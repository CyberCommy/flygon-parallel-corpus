- en: Chapter 1. Advanced User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce some advanced user and group management scenarios
    along with some examples on how to handle advanced level options such as password
    aging, managing sudoers, and so on, on a day to day basis. Here, we are assuming
    that we have already successfully installed CentOS 7 along with a root and user
    credentials as we do in the traditional format. Also, the command examples, in
    this chapter, assume you are logged in or switched to the root user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: User and group management from the GUI and the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quotas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password aging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudoers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users and groups from GUI and the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can add a user to the system using `useradd` from the command line with
    a simple command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a user entry in the `/etc/passwd` file and automatically creates
    the `home` directory for the user in `/home`. The `/etc/passwd` entry looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But, as we all know, the user is in a locked state and cannot log in to the
    system unless we add a password for the user using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will, in turn, modify the `/etc/shadow` file, at the same time unlock the
    user, and the user will be able to log in to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the preceding set of commands will create both a user and a group
    for the `testuser` user on the system. What if we want a certain set of users
    to be a part of a common group? We will use the `-g` option along with the `useradd`
    command to define the group for the user, but we have to make sure that the group
    already exists. So, to create users such as `testuser1`, `testuser2`, and `testuser3`
    and make them part of a common group called `testgroup`, we will first create
    the group and then we create the users using the `-g` or `-G` switches. So, we
    will do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have used both `-g` and `-G`. The difference between them is: with
    `-G`, we create the user with its default group and assign the user to the common
    `testgroup` as well, but with `-g`, we create the user as part of the `testgroup`
    only. In both cases, we can use either the `gid` or the group name obtained from
    the `/etc/group` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple more options that we can use for an advanced level user
    creation; for example, for system users with `uid` less than 500, we have to use
    the `-r` option, which will create a user on the system, but the `uid` will be
    less than 500\. We also can use `-u` to define a specific `uid`, which must be
    unique and greater than 499\. Common options that we can use with the `useradd`
    command are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`: This option is used for comments, generally to define the user''s real
    name, such as `-c "John Doe"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: This option is used to define `home-dir`; by default, the `home` directory
    is created in `/home` such as `-d /var/<user name>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g`: This option is used for the group name or the group number for the user''s
    default group. The group must already have been created earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-G`: This option is used for additional group names or group numbers, separated
    by commas, of which the user is a member. Again, these groups must also have been
    created earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: This option is used to create a system account with a UID less than 500
    and without a `home` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`: This option is the user ID for the user. It must be unique and greater
    than 499.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are few quick options that we use with the `passwd` command as well.
    These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l`: This option is to lock the password for the user''s account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`: This option is to unlock the password for the user''s account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e`: This option is to expire the password for the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-x`: This option is to define the maximum days for the password lifetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`: This option is to define the minimum days for the password lifetime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to control the disk space used in the Linux filesystem, we must use
    quota, which enables us to control the disk space and thus helps us resolve low
    disk space issues to a great extent. For this, we have to enable user and group
    quotas on the Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: In CentOS 7, the user and group quotas are not enabled by default so we have
    to enable them first.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether quota is enabled or not, we issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Quotas](img/B04674_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The image shows that the root filesystem is enabled without quota as mentioned
    by the `noquota` in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to enable quota on the root (`/`) filesystem, and to do that,
    we have to first edit the file `/etc/default/grub` and add the following to `GRUB_CMDLINE_LINUX`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In file `GRUB_CMDLINE_LINUX` line should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of cat `/etc/default/grub` command should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotas](img/B04674_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have to reflect the changes we just made, we should backup the grub
    configuration using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to rebuild the grub with the changes we just made using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, reboot the system. Once it''s up, log in and verify that the quota is
    enabled using the command we used before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It should now show us that the quota is enabled and will show us an output
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Add the following lead-in before image and apply CIT style to **mount | grep
    ' / '**
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotas](img/B04674_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, since quota is enabled, we will further install quota using the following
    to operate quota for different users and groups, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once quota is installed, we check the current quota for users using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will report user quotas in a human-readable format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotas](img/B04674_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, there are two ways we can limit quota for users
    and groups; one is setting soft and hard limits for the size of disk space used,
    and another is limiting the user or group by limiting the number of files they
    can create. In both cases, soft and hard limits are used. A soft limit is something
    that warns the user when the soft limit is reached, and the hard limit is the
    limit that they cannot bypass.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following command to modify a user quota:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command output shall look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotas](img/B04674_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will use the following command to modify the group quota:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Quotas](img/B04674_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have other partitions mounted separately, you have to modify the `/etc/fstab`
    file command to enable quota on the filesystem by adding `usrquota` and `grpquota`
    after the defaults for that specific partition as in the following screenshot,
    where we have enabled the quota for the `/var` partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotas](img/B04674_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are finished enabling quota, remount the filesystem and run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Quota is something all system admins use to handle disk space consumed on a
    server by users or groups and limit over usage of the space. It thus helps them
    manage the disk space usage on the system. In this regard, it should be noted
    that you plan before your installation and create partitions accordingly as well
    so that the disk space is used properly. Multiple separate partitions such as
    `/var` and `/home etc` are always suggested, as generally these are the partitions
    which consume most space on a Linux system. So, if we keep them on a separate
    partition, it will not eat up the root (`/`) filesystem space and will be more
    failsafe than using an entire filesystem mounted as only root.
  prefs: []
  type: TYPE_NORMAL
- en: Password aging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a good policy to have password aging so that the users are forced to change
    their passwords at a certain interval. This, in turn, helps to keep the security
    of the system as well.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `chage` to configure the password to expire the first time the user
    logs in to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: This process will not work if the user logs in to the system using SSH.'
  prefs: []
  type: TYPE_NORMAL
- en: This method of using `chage` will ensure that the user is forced to change the
    password right away.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we use only `chage <username>`, it will display the current password aging
    value for the specified user and will allow them to be changed interactively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps need to be performed to accomplish password aging:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lock the user. If the user doesn''t exist, we will use the `useradd` command
    to create the user. However, we will not assign any password to the user so that
    it remains locked. But, if the user already exists on the system, we will use
    the `usermod` command to lock the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Force immediate password change using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlock the account. This can be achieved in two ways. One is to assign an initial
    password and the other is to assign a null password. We will take the first approach
    as the second one, though possible, is not good practice in terms of security.
    Therefore, here is what we do to assign an initial password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the Python command to start the command-line Python interpreter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have used the `Q!W@E#R$` password with a salt combination of the alphanumeric
    character: `Bing0000` followed by a `/` character. The output is the encrypted
    password, similar to `BiagqBsi6gl1o`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *D* to exit the Python interpreter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the shell, enter the following command with the encrypted output of the
    Python interpreter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So, here, in our case, if the username is `testuser`, and the encrypted output
    is `" BiagqBsi6gl1o"` we will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, upon initial login using the `Q!W@E#R$` password, the user will be prompted
    for a new password.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the password policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a set of rules defined in some files, which have to be followed when
    a system user is setting up. It's an important factor in security because one
    of the many security breach histories was started with hacking user passwords.
    This is the reason why most organizations set a password policy for their users.
    All users and passwords must comply with this.
  prefs: []
  type: TYPE_NORMAL
- en: 'A password policy usually is defined by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Password aging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit login failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit prior password reuse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring password aging and password length
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Password aging and password length are defined in `/etc/login.defs`. Aging basically
    means the maximum number of days a password might be used, minimum number of days
    allowed between password changes, and number of warnings before the password expires.
    Length refers to the number of characters required for creating the password.
    To configure password aging and length, we should edit the `/etc/login.defs` file
    and set different `PASS` values according to the policy set by the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The password aging controls defined here do not affect existing users;
    it only affects the newly created users. So, we must set these policies when setting
    up the system or the server at the beginning. The values we modify are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PASS_MAX_DAYS`: The maximum number of days a password can be used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PASS_MIN_DAYS`: The minimum number of days allowed between password changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PASS_MIN_LEN`: The minimum acceptable password length'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PASS_WARN_AGE`: The number of days'' warning to be given before a password
    expires'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at a sample configuration of the `login.defs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring password aging and password length](img/B04674_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring password complexity and limiting reused password usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By editing the `/etc/pam.d/system-auth` file, we can configure the password
    complexity and the number of reused passwords to be denied. Password complexity
    refers to the complexity of the characters used in the password, and the reused
    password deny refers to denying the desired number of passwords the user used
    in the past. By setting the complexity, we force the usage of the desired number
    of capital characters, lowercase characters, numbers, and symbols in a password.
    The password will be denied by the system until and unless the complexity set
    by the rules is met. We do this using the following terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Force capital characters in passwords**: `ucredit=-X`, where `X` is the number
    of capital characters required in the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force lower case characters in passwords**: `lcredit=-X`, where `X` is the
    number of lowercase characters required in the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force numbers in passwords**: `dcredit=-X`, where `X` is the number of numbers
    required in the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force the use of symbols in passwords**: `ocredit=-X`, where `X` is the number
    of symbols required in the password. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Deny reused passwords**: `remember=X`, where `X` is the number of past passwords
    to be denied. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now take a look at a sample configuration of `/etc/pam.d/system-auth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring password complexity and limiting reused password usage](img/B04674_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring login failures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set the number of login failures allowed by a user in the `/etc/pam.d/password-auth`,
    `/etc/pam.d/system-auth`, and `/etc/pam.d/login` files. When a user's failed login
    attempts are higher than the number defined here, the account is locked and only
    a system administrator can unlock the account. To configure this, make the following
    additions to the files. The following `deny=X` parameter configures this, where
    `X` is the number of failed login attempts allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add these two lines to the `/etc/pam.d/password-auth` and `/etc/pam.d/system-auth`
    files and only the first line to the `/etc/pam.d/login` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is a sample `/etc/pam.d/system-auth` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring login failures](img/B04674_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a sample `/etc/pam.d/login` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring login failures](img/B04674_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see failures, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To reset the failure attempts and to enable the user to log in again, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Sudoers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Separation of user privileges is one of the main features in Linux operating
    systems. Normal users operate in limited privilege sessions to limit the scope
    of their influence on the entire system. One special user exists on Linux that
    we know already is `root`, which has super-user privileges. This account doesn't
    have any restrictions that are present to normal users. Users can execute commands
    with super-user or root privileges in a number of different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are mainly three different ways to obtain root privileges on a system:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the system as `root`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in to the system as any user and then use the `su -` command. This will
    ask you for the `root` password and once authenticated, will give you the root
    shell session. We can disconnect this root shell using *Ctrl* + *D* or using the
    command `exit`. Once exited, we will come back to our normal user shell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run commands with root privileges using `sudo` without spawning a `root` shell
    or logging in as root. This `sudo` command works as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Unlike `su`, `sudo` will request the password of the user calling the command,
    not the root password.
  prefs: []
  type: TYPE_NORMAL
- en: The `sudo` doesn't work by default and requires to be set up before it functions
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will see how to configure `sudo` and modify the
    `/etc/sudoers` file so that it works the way we want it to.
  prefs: []
  type: TYPE_NORMAL
- en: visudo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sudo` is modified or implemented using the `/etc/sudoers` file, and `visudo`
    is the command that enables us to edit the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: This file should not be edited using a normal text editor to avoid potential
    race conditions in updating the file with other processes. Instead, the `visudo`
    command should be used.'
  prefs: []
  type: TYPE_NORMAL
- en: The `visudo` command opens a text editor normally, but then validates the syntax
    of the file upon saving. This prevents configuration errors from blocking `sudo`
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: '![visudo](img/B04674_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, `visudo` opens the `/etc/sudoers` file in vi editor, but we can
    configure it to use the `nano` text editor instead. For that, we have to make
    sure `nano` is already installed or we can install `nano` using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can change it to use `nano` by editing the `~/.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, source the file using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use `visudo` with `nano` to edit the `/etc/sudoers` file. So, let's
    open the `/etc/sudoers` file using `visudo` and learn a few things.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use different kinds of aliases for different sets of commands, software,
    services, users, groups, and so on. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use these aliases to assign a set of command execution rights to a user
    or a group. For example, if we want to assign the `NETWORKING` set of commands
    to the group `netadmin` we will define:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, if we want to allow the wheel group users to run all the commands,
    we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want a specific user, `john`, to get access to all commands, we will
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create different groups of users, with overlapping membership:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Group names must start with a capital letter. We can then allow members of
    `GROUPTWO` to update the `yum` database and all the commands assigned to the preceding
    software by creating a rule like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If we do not specify a user/group to run, `sudo` defaults to the root user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can allow members of `GROUPTHREE` to shut down and reboot the machine by
    creating a `command alias` and using that in a rule for `GROUPTHREE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We create a command alias called `POWER` that contains commands to power off
    and reboot the machine. We then allow the members of `GROUPTHREE` to execute these
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create `Runas` aliases, which can replace the portion of the rule
    that specifies to the user to execute the command as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This will allow anyone who is a member of `GROUPONE` to execute commands as
    the `www-data` user or the `apache` user.
  prefs: []
  type: TYPE_NORMAL
- en: Just keep in mind that later, rules will override previous rules when there
    is a conflict between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways that you can achieve more control over how `sudo`
    handles a command. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `updatedb` command associated with the `mlocate` package is relatively
    harmless. If we want to allow users to execute it with root privileges without
    having to type a password, we can make a rule like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`NOPASSWD` is a tag that means no password will be requested. It has a companion
    command called `PASSWD`, which is the default behavior. A tag is relevant for
    the rest of the rule unless overruled by its `twin` tag later down the line.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can have a line like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In this case, a user can run the `updatedb` command without a password as the
    root user, but entering the root password will be required for running the `kill`
    command. Another helpful tag is `NOEXEC`, which can be used to prevent some dangerous
    behavior in certain programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, some programs, such as `less`, can spawn other commands by typing
    this from within their interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This basically executes any command the user gives it with the same permissions
    that `less` is running under, which can be quite dangerous.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restrict this, we could use a line like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You should now have clear understanding of what `sudo` is and how we modify
    and provide access rights using `visudo`. There are many more things left here.
    You can check the default `/etc/sudoers` file, which has a good number of examples,
    using the `visudo` command, or you can read the `sudoers` manual as well.
  prefs: []
  type: TYPE_NORMAL
- en: One point to remember is that root privileges are not given to regular users
    often. It is important for us to understand what these commands do when you execute
    with root privileges. Do not take the responsibility lightly. Learn the best way
    to use these tools for your use case, and lock down any functionality that is
    not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the major reference used throughout the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about some advanced user management and how to
    manage users through the command line, along with password aging, quota, exposure
    to `/etc/sudoers`, and how to modify them using `visudo`. User and password management
    is a regular task that a system administrator performs on servers, and it has
    a very important role in the overall security of the system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into advanced security features called **Security-Enhanced
    Linux** (**SELinux**), which comes integrated with CentOS or RedHat Linux operating
    systems.
  prefs: []
  type: TYPE_NORMAL
