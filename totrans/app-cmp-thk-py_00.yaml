- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Applied Computational Thinking with Python* provides a hands-on approach to
    implementation and associated methodologies that will have you up and running
    and productive in no time. Developers working with Python will be able to put
    their knowledge to work with this practical guide using the computational thinking
    method for problem solving.'
  prefs: []
  type: TYPE_NORMAL
- en: This book will help you to develop logical processing and algorithmic thinking
    while solving real-world problems across a wide range of domains. It's an essential
    skill that you should possess to keep ahead of the curve in this modern era of
    information technology. Developers can apply their knowledge of computational
    thinking to practice solving problems in multiple areas, including economics,
    mathematics, and artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: The book begins by helping you get to grips with decomposition, pattern recognition,
    pattern generalization and abstraction, and algorithm design, along with teaching
    you how to apply these elements practically while designing solutions for challenging
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: We'll find out how to use decomposition for solving problems through visual
    representation. We'll also employ pattern generalization and abstraction for designing
    solutions and building the analytical skills required to assess algorithmic solutions.
    We'll also use computational thinking with Python for statistical analyses.
  prefs: []
  type: TYPE_NORMAL
- en: We will understand the input and output requirements in terms of designing algorithmic
    solutions, and use computational thinking to solve data processing problems. We'll
    identify errors in logical processing to refine your solution design and apply
    computational thinking in various domains, such as cryptography, economics, and
    machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: You'll then learn about the various techniques involved in problem analysis,
    logical reasoning, algorithm design, classification and clusters, data analysis,
    and modeling, and understand how computational thinking elements can be used together
    with these aspects to design solutions.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also develop logical reasoning and problem-solving skills that will help
    you tackle complex problems. We'll also explore core computer science concepts
    and important computational thinking elements using practical examples and find
    out how to identify the algorithmic solution that is best-suited to your problem.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end, you will discover how to identify pitfalls in the solution design
    process and how to choose the right functionalities to create the best possible
    algorithmic solutions.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this algorithm book, you will have gained the confidence to apply
    computational thinking techniques to software development.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for students, developers, and professionals looking to develop
    problem-solving skills and tactics involved in writing or debugging software programs
    and applications. Familiarity with Python programming is required.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B15413_01_Final_SK_ePub.xhtml#_idTextAnchor017), *Fundamentals
    of Computer Science*, helps you learn about the fundamental elements of computer
    science, including theory, design, computational processes and systems, and computers.
    The focus of this chapter will be on the software elements of computer science.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B15413_02_Final_SK_ePub.xhtml#_idTextAnchor043), *Elements of
    Computational Thinking*, explains each of the elements of computational thinking—decomposition,
    pattern recognition, pattern generalization and abstraction, and algorithm design—and
    how the process of computational thinking is not linear. Rather, a developer can
    go back through some of these elements at all stages of the algorithm design process
    until a solution for a particular problem is reached. This chapter will include
    some short, relevant problems that are used to demonstrate the use of the elements
    of computational thinking to arrive at the algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B15413_03_Final_SK_ePub.xhtml#_idTextAnchor056), *Understanding
    Algorithms and Algorithmic Thinking*, provides you with an introduction to algorithms
    and their definition. You will also review some algorithms to help you develop
    the analysis skills necessary when assessing algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B15413_04_Final_SK_ePub.xhtml#_idTextAnchor071), *Understanding
    Logical Reasoning*, explores logical reasoning processes such as conditional statements,
    algorithmic reasoning, and Boolean logic. Throughout the chapter, you will learn
    basic and intermediate logic processing skills through real and relevant problem
    analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15413_05_Final_SK_ePub.xhtml#_idTextAnchor082), *Exploring Problem
    Analysis*, explores topics in problem analysis, focusing on problem definition,
    decomposition, and analysis. In order to practice and further understand the first
    element of computational thinking, decomposition, you will be presented with real
    and relevant problems. You will then be able to define and decompose the problem
    into parts, such as identifying input and output, and additional relevant information
    needed to begin planning solutions for the problems presented.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15413_06_Final_SK_ePub.xhtml#_idTextAnchor091), *Designing Solutions
    and Solution Processes*, gives you an opportunity to design solutions to multiple
    problems using previously learned content in the computational thinking process
    and begin to incorporate logical processing to create a visual representation
    of the decision process for the solution. Visual representations include diagrams,
    flow charts, and other helpful processes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15413_07_Final_SK_ePub.xhtml#_idTextAnchor100), *Identifying
    Challenges within Solutions*, provides the opportunity to practice identifying
    some of the common errors and/or better possible solutions for an existing problem.
    While most problems can be solved with a multitude of algorithms that address
    the needs of the problem, some solutions are best suited for that particular problem.
    The goal of this chapter is to introduce you to the identification of some pitfalls
    in the solution design process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15413_08_Final_SK_ePub.xhtml#_idTextAnchor114), *Introduction
    to Python*, introduces you to basic Python commands and functionalities while
    applying them to problems. Using the elements of computational thinking, you will
    be able to design solutions by incorporating the concepts learned earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15413_09_Final_SK_ePub.xhtml#_idTextAnchor134), *Understanding
    Input and Output to Design a Solution Algorithm*, helps you to assess problems
    to identify the input and output needed in order to design and implement a solution
    algorithm for the problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15413_10_Final_SK_ePub.xhtml#_idTextAnchor142), *Control Flow*,
    helps you to learn more about conditional statements and how to work with `for`
    and `while` loops when solving problems using computational thinking and the Python
    programming language. You will apply the logical processing learned previously
    to create Python algorithms when solving problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15413_11_Final_SK_ePub.xhtml#_idTextAnchor151), *Using Computational
    Thinking and Python in Simple Challenges*, helps you apply the knowledge acquired
    previously to complete the computational thinking process when solving challenges
    in multiple disciplines, using examples that are real and relevant, in order to
    design the best possible algorithms for each scenario.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15413_12_Final_SK_ePub.xhtml#_idTextAnchor159), *Using Python
    in Experimental and Data Analysis Problems*, explains how to utilize Python capabilities
    to solve problems that involve experimental data and data processing. The computational
    thinking elements will be used to solve real and relevant problems using advanced
    functionalities.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B15413_13_Final_SK_ePub.xhtml#_idTextAnchor174), *Using Classification
    and Clusters*, covers classification and clusters. You will use Pandas, Scikit-Learn,
    and other packages to create training and testing models, and learn some basic
    definitions for use in large data analysis, such as machine learning and neural
    network models.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B15413_14_Final_SK_ePub.xhtml#_idTextAnchor184), *Using Computational
    Thinking and Python in Statistical Analysis*, dives into further topics relating
    to statistical analysis, such as importing data, indexing, and preprocessing data.
    You will then use data visualizations to make decisions on what variables to explore
    for further analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B15413_15_Final_SK_ePub.xhtml#_idTextAnchor199), *Applied Computational
    Thinking Problems*, helps you to work through multiple problems that combine topics
    from each of the previous chapters in order to solve a problem and design an algorithm
    in Python. You will use the computational thinking elements to determine what
    functionalities are necessary in order to design models and create solutions for
    problems in linguistics, cryptography, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B15413_16_Final_SK_ePub.xhtml#_idTextAnchor219), *Advanced Applied
    Computational Thinking Problems*, works through additional applied problems in
    a variety of areas, including geometric tessellations, creating models of housing
    data, creating electric fields, analyzing genetic data, analyzing stocks, creating
    a **convolutional neural network** (**CNN**), and more. You will use the computational
    thinking elements to solve problems and create different figures and visual representations
    for your problems and datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*You will need to have* **Python 3.9** *installed on your computer in order
    to run the codes. All code examples have been tested on a Windows operating system
    using Python 3.9 and should run in subsequent releases. All code has also been
    tested using the Anaconda virtual environment.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Preface_table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Additional libraries and packages used in this book include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scikit-Learn**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorFlow/Keras**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Matplotlib**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seaborn**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cairos**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NLTK**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pandas**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*If you would like to run the code using a Spyder environment or Jupyter notebook,
    you can install Anaconda, an environment manager for Python and R programming
    languages.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python](https://github.com/PacktPublishing/Applied-Computational-Thinking-with-Python).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781839219436_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781839219436_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "Finally, we ask the program to analyze the text
    using the `Readability` function. Notice that we saved that to `r`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "As you can see from the preceding screenshot, the **deaths**
    column continues to rise, as does the number of cases, which we will take a look
    at a little later in this problem."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
