- en: Introduction to Client-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the beginning of the web, as we have learned, the conventional method
    of displaying HTML is using **server-side rendering**. This latter was great; websites
    were simple and didn't need much interaction. However, nowadays, that's not the
    case anymore. There are a lot of applications on a single website; you need messaging,
    updates, shopping, real-time data sync—the end consumer always wants more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a server-side rendering?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a client-side rendering?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pros and cons of both
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to VueJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, creating a Weather application with VueJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, what is this **client-side rendering**? Client-side rendering is a new type
    of rendering website using mostly JavaScript to render it instead of server-side
    languages such as PHP, Python, or Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the difference, we will need to understand how server-side rendering
    works.
  prefs: []
  type: TYPE_NORMAL
- en: What is server-side rendering?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side rendering is the most common way to render a website. Whenever you
    visit a website, a request to the server is made, and it renders the website in
    HTML. This usually takes a few milliseconds, but it will depend on many factors,
    such as internet speed, location, and the number of visitors.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to visit another website, you basically perform another request
    to the server with the same process all over again. This can be annoying if your
    page has a thousand lines of code, like many of the websites do nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: However, server-side rendering is good for SEO, as the HTML page is there for
    robots to crawl, something that client-side rendering doesn't do well, at least
    not as simple as server-side rendering.
  prefs: []
  type: TYPE_NORMAL
- en: What is client-side rendering?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Client-side rendering, on the other, is rendered with JavaScript. Instead of
    getting the HTML by itself, you're getting a simple HTML structure but with JavaScript
    to render the rest of the HTML with your browser.
  prefs: []
  type: TYPE_NORMAL
- en: This is a new approach and has gained a lot of traction lately with the development of
    framework from companies such as Facebook and Google.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference is that when you click to take a look at another page, the
    JavaScript renders the page instead of requesting a new page from the server.
    This is a much faster way to load content, as it will only load content that it
    needs instead of the whole page.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of it is that it's very bad SEO-wise, since the content is not
    rendered until the page is loaded into the browser. This can be fixed, but not
    in an easy way yet.
  prefs: []
  type: TYPE_NORMAL
- en: Pros and cons of server and client-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next two sections are a quick a summary of the pros and cons of each, so
    you can decide which you'll use for each project.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Better SEO because search engines can crawl the site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial page loads faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for static sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Frequent server requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slower rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page has to reload every time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster rendering after the initial load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fewer requests to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Bad SEO if not implemented correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial load may require more time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires an external library in most cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing to VueJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: They are many JavaScript frameworks we can use if we want to build a client-side
    rendering website. ReactJS, AngularJS, and VueJS are among the most well-known
    frameworks—not surprising when you know that they're backed by Google and Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'VueJS is one of the easiest to learn. That''s why we chose to start with this
    one. In the last chapter of this book, we''ll do a quick introduction to VueJS
    so that you can understand how it works and what are the possibilities for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e19a3015-d7f2-42b1-a4e9-b569015030c4.png)'
  prefs: []
  type: TYPE_IMG
- en: VueJS homepage
  prefs: []
  type: TYPE_NORMAL
- en: VueJS allows you to create everything from small widgets, driven by JavaScript,
    which you drop into existing applications. Over medium-sized applications where
    you control the whole page through JavaScript and therefore re-render various
    parts, making it very reactive, and all the way up to building big enterprise-level
    applications, single-page application, where your whole web page, multiple pages
    (at least it feels like this to the user), are driven by VueJS, which renders
    significant parts of the DOMs, to make it look like they were different pages
    being loaded, but, in the end, JavaScript handles all of that.
  prefs: []
  type: TYPE_NORMAL
- en: Why JavaScript? Since JavaScript runs in the browser, you don't need to reach
    out to any server and wait for any responses if you only want to re-render parts
    of the application. This makes the application very reactive, makes it feel nice,
    and provides awesome user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: This is what you can do with VueJS. Now, why would you choose VueJS and not,
    let's say, Angular 2 or ReactJS, which you may know and does a similar thing.
    Well, first of all, VueJS is extremely lean and small regarding the file size.
    We're talking about 16 kilobytes, minified in gzip, for the core framework.
  prefs: []
  type: TYPE_NORMAL
- en: It's a very focused and to-the-point framework. However, it's not only small,
    hence providing a fast loading time, it's also fast at runtime, and, judging by
    some benchmarks, it even beats Angular 2 and ReactJS. Now, of course, it will
    always depend on your specific application.
  prefs: []
  type: TYPE_NORMAL
- en: I'd say let's dive right into it now and get started with VueJS and build our
    first little application and take a look at how we can actually get it set up.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up VueJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with VueJS and creating your first application is actually
    very simple. We start on [vuejs.org](http://vuejs.org), its official home page;
    there, you will note this nice Get Started button. Let''s click on it. It takes
    you to the official documentation, which is always worth taking a look at anyway,
    but, there, we want to go to installation. Now, here, you''ve got a couple of
    different options, depending on which kind of setup you want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04fa0bb6-5d23-4e07-84d0-92b477350e11.png)'
  prefs: []
  type: TYPE_IMG
- en: The VueJS Installation page
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different options to download VueJS—we can either download the file
    or use the CDN provided. For this exercise, we''ll simply use the CDN. Simply
    click on the link provided by VueJS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cb71983-2d5e-41e2-9815-c80e09dd5cfa.png)'
  prefs: []
  type: TYPE_IMG
- en: VueJS CDN
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of creating a new HTML project, let's go to [jsfiddle.net](https://jsfiddle.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 'JSFiddle is an online web editor, so you can simply create or test something
    very easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92440154-743a-4291-92ff-f5227398222e.png)'
  prefs: []
  type: TYPE_IMG
- en: JSFiddle
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply copy and paste the script from VueJS to the HTML `block` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can remove the `@2.5.16` and leave just the `vue` so that it will always
    fetch the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve imported VueJS, we can already use it with all its features.
    So, let''s use it and build our first little application. For that, I want to
    add a paragraph, in which I want to say `Hello world`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, there has been nothing interesting. However, what we want to do is
    to be able to control the text with VueJS. To do that, we will need to create
    an instance. In VueJS, you will simply need to add the following code in our JavaScript
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I will need to create a `div` that will contain my app, as we don''t want
    our `<p>` tag to be the app. We''ll add an ID app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will need to call the `#app` `div` and set it as our template for our
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to put any data into our app, we will need the `data` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can call it `title`. Now we will need to link it to our text; to do that,
    just remove the text and add `{{ title }}` or the name of the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run this with JSFiddle by clicking on the RUN button on the top-left
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ec60acd-3ec1-4540-8512-f79990827e7b.png)'
  prefs: []
  type: TYPE_IMG
- en: The first VueJS instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you''re probably going to say that there is no point in doing that. It''s
    not done yet. Let''s extend our VueJS application by adding an input that will
    be linked to the text displayed in the `<p>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We added a `v-model` directive to the input; this will bind the textbox to the
    data property `title` in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try now by adding any text; it will follow what you write:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24f896a1-d293-4364-b2aa-a380e4fcad49.png)'
  prefs: []
  type: TYPE_IMG
- en: The JSFiddle end of the exercise
  prefs: []
  type: TYPE_NORMAL
- en: This introduction is now finished. You can access my JSfiddle if you have any
    trouble with this step at[ https://jsfiddle.net/knee8oha/9/](https://jsfiddle.net/knee8oha/9/).
  prefs: []
  type: TYPE_NORMAL
- en: For me, the best way to learn is by practicing. So, let's create an app together
    for you to be familiar with VueJS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a weather application in VueJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we will build a component that we can use to display the weather
    of a location in VueJS. This component will be created with a location search
    textbox; this will then search for [http://openweathermap.org/](http://openweathermap.org/),
    which is a free weather API, so we can get the information for the location-based
    search.
  prefs: []
  type: TYPE_NORMAL
- en: Vue Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a simple HTML file. For this exercise, we''ll not use Bootstrap
    but, instead, use another library and take a look at how easy it is. We''ll use
    Vue Material, which is a library based on Google Material design. You can check
    it out at [https://vuematerial.io/](https://vuematerial.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26170b5b-2cdc-4c58-97e2-dcc25fcce4aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Vue Material
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s head to their installation instruction by clicking on Getting started.
    Fortunately, they provide a CDN with a template ready to use. Let''s copy their
    template and paste it into our HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first add a title to our `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue Material provides handy layouts that we can reuse. We want the app to be
    mobile first with a header. We can use the following code that we insert into
    our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our `<script>` section, we will want to mount the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now an app ready to use and totally responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce219ec-0828-440d-a847-d7a3606d84de.png)'
  prefs: []
  type: TYPE_IMG
- en: Our VueJS app
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first component we will create is the main weather component. We need the
    following three properties attached to it:'
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data array will need the data points of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`weatherLocation`: This will store the location entered in the input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weatherApi`: This is your open weather API key [http://openweathermap.org/appid](http://openweathermap.org/appid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weather`: We will store the results of the API in this component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`displayWeather`: We will set a value of true or false (Boolean) if we want
    to display the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make a call to the OpenWeather API, we will use Vue resource method for `.get()`.
    The results of this method will be stored in the weather data point and then set
    the `displayWeather` data point to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWeather API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to access the API, we will need to sign up and create an account.
    Without further ado, let''s create an account at [http://openweathermap.org/appid](http://openweathermap.org/appid):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3706e9dd-6b43-4c47-8d64-4f0adf6fab26.png)'
  prefs: []
  type: TYPE_IMG
- en: The OpenWeather signup page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Sign Up and follow the process. In the end, you''ll access a member
    dashboard with the API tab. You can copy the API key provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/119003f1-bf64-4461-877f-3bec9ba700a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The OpenWeather API
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s check out how to call the API and get results. If we go on to the
    documentation provided by OpenWeather ([http://openweathermap.org/current](http://openweathermap.org/current)),
    you can get an example of an API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/944a5896-1bb5-4dc5-9119-b432feb12a6b.png)'
  prefs: []
  type: TYPE_IMG
- en: API Documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL is composed like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c68bd603-74fc-42ee-b4c2-79037fb90b3e.png)'
  prefs: []
  type: TYPE_IMG
- en: API Call URL
  prefs: []
  type: TYPE_NORMAL
- en: 'The result we get from this call looks like this (you can test yourself):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The code provided is in JSON, a format used generally when displaying data.
    The code is minified, so it is harder to read. Let''s use a tool to un-minify
    it. I used [http://unminify.com/](http://unminify.com/). To do that, just paste
    the code and click on Unminify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the code is more, you can see that the data is displayed with an `id`
    and a `value`. We can use whichever we desire. For this exercise, we will pick
    the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: Average Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Max Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The description of the weather
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sunrise and sunset time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: The API call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will need to create the HTML tag that will hold everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create in our app an HTML tag `<weather>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `script` section, let''s create our first Vue function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As we said earlier, we will need the data, the method, and the template to
    display the content. Let''s start with the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will store the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The location set by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our API Key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data pulled out from the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A boolean set to display or not display the information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we will need to add the method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will set the `getWeather` function, which will do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Call the API with our API key and the location set by the user by the preceding
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store the data pulled from the API and set the display information to `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is no answer or content from the API, the display information will
    be set to `false`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the template will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will pass these pieces of information to a template we create for
    each. For the weather name and description, we have the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We use the `props` property to pass the data and the `template` property to
    create the HTML with the value.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have the temperature. We will display the average temperature, maximum
    temperature, and minimum temperature. The data we get from OpenWeather API is
    in the format of Kelvin, so we need to create a function to convert the temperature.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert Kelvin to Celsius, you simply need to subtract `273.15` from the
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `cloud`, we simply need to display the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have the sunrise and sunset. The format we get from OpenWeather
    is in timestamp though, so we will need to convert it to date time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Our app is now finalized. Let''s check out how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68b17685-e9fd-4690-a35e-4d0f06c9231e.png)'
  prefs: []
  type: TYPE_IMG
- en: Our weather application - The Search bar
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have our result page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1e4f370-6f2a-4174-8b55-d4e479ce7ed7.png)'
  prefs: []
  type: TYPE_IMG
- en: Our weather application - The Result page
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was a brief introduction to VueJS. There are so much more possibilities
    with this framework, and I've just touched a very small part of it. I hope this
    will bring you the curiosity to dig more into VueJS or whichever client-side rendering
    framework you choose. In the next final chapter, I will show you a list of tools
    that I use every day to help me with my workflow. These will surely help you as
    well. Let's jump into it!
  prefs: []
  type: TYPE_NORMAL
