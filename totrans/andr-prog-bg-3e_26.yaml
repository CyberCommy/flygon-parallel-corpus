- en: '*Chapter 26*: Advanced UI with Navigation Drawer and Fragment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see what is (arguably) the most advanced UI. The `NavigationView`
    widget or navigation drawer, because of the way it slides out its contents, can
    be created simply by choosing it as a template when you create a new project.
    We will do just that and then we will examine the autogenerated code and learn
    how to interact with it. Then we will use all we know about `Fragment` to populate
    each of the "drawers" with different behavior and views. Then in the next chapter,
    we will learn about databases to add some new functionality to each `Fragment`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'And here is what we will be doing in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `NavigationView`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the simple database app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a `NavigationView` project based on the autogenerated Android Studio
    template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding multiple Fragments and layouts to `NavigationView`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at this extremely cool UI pattern.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Introducing NavigationView
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What''s so great about `NavigationView`? Well, the first thing that might catch
    your eye is that it can be made to look extremely stylish. Take a look at this
    next screenshot, which shows off a `NavigationView` in action in the Google Play
    app:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.1 – NavigationView in action'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.01_B16773.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.1 – NavigationView in action
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, right from the start, ours is not going to be as fancy as the
    one in the Google Play app. But the same functionality will be present in our
    app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: What else is neat about this UI is the way that it slides to hide/reveal itself
    when required. It is because of this behavior that it can be a significant size,
    making it extremely flexible with regard to the options that can be put on it,
    and when the user is finished with it, it completely disappears, like a drawer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: I suggest trying the Google Play app now and seeing how it works if you haven't
    already.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: You can slide your thumb/finger from the left-hand edge of the screen and the
    drawer will slowly slide out. You can of course slide it away again in the opposite
    direction.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: While the navigation drawer is open, the rest of the screen is slightly dimmed
    (as seen in the previous screenshot), helping the user to focus on the navigation
    options offered.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: You can also tap anywhere off the Navigation Drawer while it is open, and it
    will slide itself away, leaving the entire screen clear for the rest of the app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The drawer is also opened by tapping on the menu icon in the top-left corner.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: We can also tweak and refine the behavior of the navigation drawer, as we will
    see towards the end of the chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Examining the Simple Database app
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on creating the `NavigationView` and populating
    it with four `Fragment` class instances and their respective layouts. In the next
    chapter, we will learn about and implement the database functionality.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The screens of the database app are as follows. Here is what our `NavigationView`
    layout looks like in all its glory. Note that many of the options and most of
    the appearance and decoration are provided by default when using the `NavigationView`
    Activity template.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.2 – NavigationView layout'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.02_B16773.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.2 – NavigationView layout
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The four main options are what we will add to the UI. They are **Insert**, **Delete**,
    **Search**, and **Results**. The layouts are shown, and their purposes are described
    as follows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Insert
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first screen allows the user to insert a person''s name and their associated
    age into the database:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.3 – Insert'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.03_B16773.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.3 – Insert
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: This simple layout has two `EditText` widgets and a button. The user will enter
    a name and an age and then click the **INSERT** button to add them to the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This screen is even simpler. The user will enter a name in the `EditText` widget
    and click the button:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.4 – Delete'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.04_B16773.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.4 – Delete
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: If the name entered is present in the database, then the entry (name and age)
    will be deleted.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Search
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This layout is much the same as the previous layout but has a different purpose:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.5 – Search'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.05_B16773.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.5 – Search
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The user will enter a name into the `EditText` widget and then click the **SEARCH**
    button. If the name is present in the database, then it will be displayed along
    with the matching age.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Results
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This screen shows all the entries in the entire database:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.6 – Results'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.06_B16773.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.6 – Results
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with the Navigation Drawer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Simple Database project
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio. Call it `Age Database`, use the **Navigation
    Drawer Activity** template. Before we do anything else, it is well worth running
    the app on an emulator to see how much has been autogenerated as part of this
    template:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.7 – Home page'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.07_B16773.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.7 – Home page
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'At first glance, it is just a plain old layout with a `TextView` widget. But
    swipe from the left edge of the screen or press the menu button and the Navigation
    Drawer layout reveals itself:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.8 – Navigation page'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.08_B16773.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.8 – Navigation page
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Now we can modify the options and insert a `Fragment` (with a layout) for each
    option. To understand how it works, let's examine some of the autogenerated code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the autogenerated code and assets
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `res/menu` folder. Notice there is an extra file titled `activity_main_drawer.xml`.
    This next code is an excerpt from this file, so we can discuss its contents:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice there are four `item` tags within a `group` tag. Now notice the `title`
    tags from top to bottom exactly correspond to the three text options in the menu
    of the autogenerated navigation drawer. Also notice that within each `item` tag,
    there is an `id` tag, so we can refer to them in our Java code as well as an `icon`
    tag, which corresponds to one of the icons in the `drawable` folder and is the
    icon displayed next to the option in the navigation drawer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: There are also some files that we will not be using that have been autogenerated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Let's code the `Fragment` based classes and their layouts.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Coding the Fragment classes and their layouts
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create the four classes including the code that loads the layout as
    well as the actual layouts as well, but we won't put any of the database functionality
    into Java until we have learned about Android databases in the next chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: After we have our four classes and their layouts, we will see how to load them
    from the Navigation Drawer menu. By the end of the chapter, we will have a fully
    working Navigation Drawer that lets the user swap between fragments but the fragments
    won't actually have any functionality until the next chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Creating the empty files for the classes and layouts
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create four layout files with vertical `LinearLayout` as their parent view by
    right-clicking on the `layout` folder and selecting `content_insert`, the second
    `content_delete`, the third `content_search`, and the fourth `content_results`.
    All the options apart from the `LinearLayout` option and the filename can be left
    as their defaults.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: You should now have four new layout files containing `LinearLayout` parents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Let's code the related Java classes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Coding the classes
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create four new classes by right-clicking the folder that contains the `MainActivity.java`
    file and selecting `InsertFragment`, `DeleteFragment`, `SearchFragment`, and `ResultsFragment`.
    It should be plain from the names which fragments will show which layouts.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Just to make it clear, let's add some code to each class to make the classes
    extend `Fragment` and load their associated layout.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `InsertFragment.java` and edit it to contain the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `DeleteFragment.java` and edit it to contain the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open `SearchFragment.java` and edit it to contain the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open `ResultsFragment.java` and edit it to contain the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each class is completely empty of functionality except that in the `onCreateView`
    method, the appropriate layout is loaded from the associated layout file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the UI to the layout files we created earlier.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Designing the layouts
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw at the start of the chapter, all the layouts are simple. Getting your
    layouts identical to mine is not essential but as always, the ID values must be
    the same or the Java code we write in the next chapter won't work.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_insert.xml
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drag two `Plain Text` widgets from the `Text` category of the palette onto the
    layout. Remember that `Plain Text` widgets are `EditText` instances. Now drag
    a `Button` widget onto the layout after the two `Plain Text` widgets.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the widgets according to this table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_1.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.9 – Insert layout'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.09_B16773.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.9 – Insert layout
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_delete.xml
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drag a `Plain Text` onto the layout with a `Button` widget below it. Configure
    the widgets according to this table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_2.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.10 – Delete layout'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.10_B16773.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.10 – Delete layout
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_search.xml
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drag a `Plain Text` followed by a button and then a regular `TextView` onto
    the layout and then configure the widgets according to this table:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_3.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.11 – Search layout'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.11_B16773.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.11 – Search layout
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_results.xml
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drag a single `TextView` widget (not `Plain Text`/`EditText` this time) onto
    the layout. We will see in the next chapter how to add an entire list into this
    single `TextView` widget.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the widget according to this table:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_4.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.12 – Results layout'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.12_B16773.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.12 – Results layout
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Now we can use the `Fragment` based classes and their layouts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Using the Fragment classes and their layouts
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This stage has three steps. First, we need to edit the menu of the Navigation
    Drawer layout to reflect the options the user has. Next, we need a `View` instance
    in the layout to hold whatever the active `Fragment` instance is, and finally,
    we need to add code to `MainActivity.java` to switch between the different `Fragment`
    instances when the user taps on the menu.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Editing the Navigation Drawer menu
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `activity_main_drawer.xml` file in the `res/menu` folder of the project
    explorer. Edit the code within the `group` tags that we saw earlier to reflect
    our menu options of **Insert**, **Delete**, **Search**, and **Results**:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the results item reuses the camera icon. It is left as a challenge
    for you if you wish to add a unique icon of your own.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add a layout within the main layout to hold whatever the current
    active fragment is.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Adding a holder to the main layout
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `content_main.xml` file in the `layout` folder. Locate the following
    existing code, which is the current fragment holder that is not right for our
    uses:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Delete the preceding code and replace it with this XML code just before the
    closing tag of `ConstraintLayout`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Switch to design view and click the **Infer constraints** button to fix the
    new layout in place.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a `FrameLayout` widget with an `id` attribute of `fragmentHolder`,
    which we can get a reference to and load all our `Fragment` instance layouts into.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个`id`属性为`fragmentHolder`的`FrameLayout`小部件，我们可以获取其引用并加载所有我们的`Fragment`实例布局。
- en: Coding the MainActivity.java class
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity.java类
- en: 'Replace all the existing `import` directives with the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换所有现有的`import`指令：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open the `MainActivity.java` file and edit the entire code to match the following.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`文件并编辑整个代码以匹配以下内容。
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It might be quickest to delete everything except the `import` directives we
    have just added.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的方法可能是删除除我们刚刚添加的`import`指令之外的所有内容。
- en: 'We will discuss the code next, so study the variable names and the various
    classes and their related methods:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论代码，因此请仔细研究变量名称和各种类及其相关方法。
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, the `onCreate` method handles aspects of our UI. The
    code gets a reference to a `DrawerLayout` widget that corresponds to the layout
    we have just seen. The code also creates a new instance of `ActionBarDrawerToggle`,
    which allows the controlling/toggling of the drawers. Next, a reference is captured
    to the layout file of the navigation drawer itself (`nav_view`) and the final
    line of code sets a listener on `NavigationView`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`onCreate`方法处理了我们UI的一些方面。 代码获取了与我们刚刚看到的布局相对应的`DrawerLayout`小部件的引用。 代码还创建了一个`ActionBarDrawerToggle`的新实例，它允许控制/切换抽屉。
    接下来，引用被捕获到导航抽屉本身的布局文件（`nav_view`），代码的最后一行设置了`NavigationView`上的监听器。
- en: 'Now add the `onBackPressed` method as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下方式添加`onBackPressed`方法：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `onBackPressed` method is an overridden method of Activity and it handles
    what happens when the user presses the back button on their device. The code closes
    the drawer if it is open and if it is not, simply calls `super.onBackPressed`.
    This means that the back button will close the drawer if it is open or have the
    default behavior if it was already closed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`onBackPressed`方法是Activity的一个重写方法，它处理用户在设备上按返回按钮时发生的情况。 代码关闭抽屉（如果打开），如果没有打开，则简单地调用`super.onBackPressed`。
    这意味着如果抽屉打开，返回按钮将关闭抽屉，如果已经关闭，则具有默认行为。'
- en: 'Add the `onCreateOptionsMenu` and `onOptionsItemSelected` methods, which aren''t
    really used in this app but will add the default functionality to the `options`
    button:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`onCreateOptionsMenu`和`onOptionsItemSelected`方法，这些方法在此应用程序中并没有真正使用，但将为`options`按钮添加默认功能：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now add the `onNavigatioItemSelected` method shown next:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加下面显示的`onNavigatioItemSelected`方法：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's go through the code in the `onNavigationItemSelected` method. Most of
    the code should look familiar. For each of our menu options, we create a new `Fragment`
    of the appropriate type and insert it into our `RelativeLayout` with an `id` property
    value of `fragmentHolder`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`onNavigationItemSelected`方法中的代码。 大部分代码应该看起来很熟悉。 对于我们的每个菜单选项，我们都创建了一个相应类型的新`Fragment`，并将其插入到具有`fragmentHolder`属性值的`RelativeLayout`中。
- en: Finally, for the `MainActivity.java` file, the `transaction.addToBackStack`
    method means that the chosen `Fragment` instance will be remembered in order with
    any others. The result of this is that if the user chooses the `insert` fragment,
    then the `results` fragment then taps the back button, then the app will return
    the user to the `insert` fragment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于`MainActivity.java`文件，`transaction.addToBackStack`方法意味着所选的`Fragment`实例将被记住，以便与其他实例一起使用。
    这样做的结果是，如果用户选择`insert`片段，然后选择`results`片段，然后点击返回按钮，那么应用程序将返回用户到`insert`片段。
- en: You can now run the app and use the Navigation Drawer menu to flip between all
    our different `Fragment` instances. They will look just as they did in the screenshots
    at the start of this chapter, but they don't have any functionality yet.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以运行应用程序并使用导航抽屉菜单在所有不同的`Fragment`实例之间切换。 它们看起来就像本章开头的屏幕截图一样，但目前还没有任何功能。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how straightforward it is to have an attractive and
    pleasing UI and although our `Fragment` instances don't have any functionality
    yet, they are set up ready to go once we have learned about databases.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了拥有吸引人和令人愉悦的UI是多么简单，尽管我们的`Fragment`实例目前还没有任何功能，但一旦我们学会了数据库，它们就已经准备好了。
- en: In the next chapter, we will learn about databases in general, the specific
    database that Android apps can use, and we will then add the functionality to
    our `Fragment` classes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于数据库的一般知识，Android应用程序可以使用的特定数据库，然后我们将为我们的`Fragment`类添加功能。
