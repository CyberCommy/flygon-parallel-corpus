- en: '*Chapter 26*: Advanced UI with Navigation Drawer and Fragment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see what is (arguably) the most advanced UI. The `NavigationView`
    widget or navigation drawer, because of the way it slides out its contents, can
    be created simply by choosing it as a template when you create a new project.
    We will do just that and then we will examine the autogenerated code and learn
    how to interact with it. Then we will use all we know about `Fragment` to populate
    each of the "drawers" with different behavior and views. Then in the next chapter,
    we will learn about databases to add some new functionality to each `Fragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And here is what we will be doing in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `NavigationView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the simple database app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a `NavigationView` project based on the autogenerated Android Studio
    template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding multiple Fragments and layouts to `NavigationView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at this extremely cool UI pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing NavigationView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What''s so great about `NavigationView`? Well, the first thing that might catch
    your eye is that it can be made to look extremely stylish. Take a look at this
    next screenshot, which shows off a `NavigationView` in action in the Google Play
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.1 – NavigationView in action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.01_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.1 – NavigationView in action
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, right from the start, ours is not going to be as fancy as the
    one in the Google Play app. But the same functionality will be present in our
    app.
  prefs: []
  type: TYPE_NORMAL
- en: What else is neat about this UI is the way that it slides to hide/reveal itself
    when required. It is because of this behavior that it can be a significant size,
    making it extremely flexible with regard to the options that can be put on it,
    and when the user is finished with it, it completely disappears, like a drawer.
  prefs: []
  type: TYPE_NORMAL
- en: I suggest trying the Google Play app now and seeing how it works if you haven't
    already.
  prefs: []
  type: TYPE_NORMAL
- en: You can slide your thumb/finger from the left-hand edge of the screen and the
    drawer will slowly slide out. You can of course slide it away again in the opposite
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: While the navigation drawer is open, the rest of the screen is slightly dimmed
    (as seen in the previous screenshot), helping the user to focus on the navigation
    options offered.
  prefs: []
  type: TYPE_NORMAL
- en: You can also tap anywhere off the Navigation Drawer while it is open, and it
    will slide itself away, leaving the entire screen clear for the rest of the app.
  prefs: []
  type: TYPE_NORMAL
- en: The drawer is also opened by tapping on the menu icon in the top-left corner.
  prefs: []
  type: TYPE_NORMAL
- en: We can also tweak and refine the behavior of the navigation drawer, as we will
    see towards the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the Simple Database app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on creating the `NavigationView` and populating
    it with four `Fragment` class instances and their respective layouts. In the next
    chapter, we will learn about and implement the database functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The screens of the database app are as follows. Here is what our `NavigationView`
    layout looks like in all its glory. Note that many of the options and most of
    the appearance and decoration are provided by default when using the `NavigationView`
    Activity template.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.2 – NavigationView layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.02_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.2 – NavigationView layout
  prefs: []
  type: TYPE_NORMAL
- en: The four main options are what we will add to the UI. They are **Insert**, **Delete**,
    **Search**, and **Results**. The layouts are shown, and their purposes are described
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Insert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first screen allows the user to insert a person''s name and their associated
    age into the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.3 – Insert'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.03_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.3 – Insert
  prefs: []
  type: TYPE_NORMAL
- en: This simple layout has two `EditText` widgets and a button. The user will enter
    a name and an age and then click the **INSERT** button to add them to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This screen is even simpler. The user will enter a name in the `EditText` widget
    and click the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.4 – Delete'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.04_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.4 – Delete
  prefs: []
  type: TYPE_NORMAL
- en: If the name entered is present in the database, then the entry (name and age)
    will be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This layout is much the same as the previous layout but has a different purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.5 – Search'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.05_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.5 – Search
  prefs: []
  type: TYPE_NORMAL
- en: The user will enter a name into the `EditText` widget and then click the **SEARCH**
    button. If the name is present in the database, then it will be displayed along
    with the matching age.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This screen shows all the entries in the entire database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.6 – Results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.06_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.6 – Results
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with the Navigation Drawer.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Simple Database project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new project in Android Studio. Call it `Age Database`, use the **Navigation
    Drawer Activity** template. Before we do anything else, it is well worth running
    the app on an emulator to see how much has been autogenerated as part of this
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.7 – Home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.07_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.7 – Home page
  prefs: []
  type: TYPE_NORMAL
- en: 'At first glance, it is just a plain old layout with a `TextView` widget. But
    swipe from the left edge of the screen or press the menu button and the Navigation
    Drawer layout reveals itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.8 – Navigation page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.08_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.8 – Navigation page
  prefs: []
  type: TYPE_NORMAL
- en: Now we can modify the options and insert a `Fragment` (with a layout) for each
    option. To understand how it works, let's examine some of the autogenerated code.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the autogenerated code and assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `res/menu` folder. Notice there is an extra file titled `activity_main_drawer.xml`.
    This next code is an excerpt from this file, so we can discuss its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice there are four `item` tags within a `group` tag. Now notice the `title`
    tags from top to bottom exactly correspond to the three text options in the menu
    of the autogenerated navigation drawer. Also notice that within each `item` tag,
    there is an `id` tag, so we can refer to them in our Java code as well as an `icon`
    tag, which corresponds to one of the icons in the `drawable` folder and is the
    icon displayed next to the option in the navigation drawer.
  prefs: []
  type: TYPE_NORMAL
- en: There are also some files that we will not be using that have been autogenerated.
  prefs: []
  type: TYPE_NORMAL
- en: Let's code the `Fragment` based classes and their layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the Fragment classes and their layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create the four classes including the code that loads the layout as
    well as the actual layouts as well, but we won't put any of the database functionality
    into Java until we have learned about Android databases in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: After we have our four classes and their layouts, we will see how to load them
    from the Navigation Drawer menu. By the end of the chapter, we will have a fully
    working Navigation Drawer that lets the user swap between fragments but the fragments
    won't actually have any functionality until the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the empty files for the classes and layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create four layout files with vertical `LinearLayout` as their parent view by
    right-clicking on the `layout` folder and selecting `content_insert`, the second
    `content_delete`, the third `content_search`, and the fourth `content_results`.
    All the options apart from the `LinearLayout` option and the filename can be left
    as their defaults.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have four new layout files containing `LinearLayout` parents.
  prefs: []
  type: TYPE_NORMAL
- en: Let's code the related Java classes.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create four new classes by right-clicking the folder that contains the `MainActivity.java`
    file and selecting `InsertFragment`, `DeleteFragment`, `SearchFragment`, and `ResultsFragment`.
    It should be plain from the names which fragments will show which layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Just to make it clear, let's add some code to each class to make the classes
    extend `Fragment` and load their associated layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `InsertFragment.java` and edit it to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `DeleteFragment.java` and edit it to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `SearchFragment.java` and edit it to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `ResultsFragment.java` and edit it to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Each class is completely empty of functionality except that in the `onCreateView`
    method, the appropriate layout is loaded from the associated layout file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the UI to the layout files we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw at the start of the chapter, all the layouts are simple. Getting your
    layouts identical to mine is not essential but as always, the ID values must be
    the same or the Java code we write in the next chapter won't work.
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_insert.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drag two `Plain Text` widgets from the `Text` category of the palette onto the
    layout. Remember that `Plain Text` widgets are `EditText` instances. Now drag
    a `Button` widget onto the layout after the two `Plain Text` widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the widgets according to this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.9 – Insert layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.09_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.9 – Insert layout
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_delete.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drag a `Plain Text` onto the layout with a `Button` widget below it. Configure
    the widgets according to this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.10 – Delete layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.10_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.10 – Delete layout
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_search.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drag a `Plain Text` followed by a button and then a regular `TextView` onto
    the layout and then configure the widgets according to this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.11 – Search layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.11_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.11 – Search layout
  prefs: []
  type: TYPE_NORMAL
- en: Designing content_results.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drag a single `TextView` widget (not `Plain Text`/`EditText` this time) onto
    the layout. We will see in the next chapter how to add an entire list into this
    single `TextView` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the widget according to this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16773_Table_4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what your layout should look like in the design view in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 26.12 – Results layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_26.12_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 26.12 – Results layout
  prefs: []
  type: TYPE_NORMAL
- en: Now we can use the `Fragment` based classes and their layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Fragment classes and their layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This stage has three steps. First, we need to edit the menu of the Navigation
    Drawer layout to reflect the options the user has. Next, we need a `View` instance
    in the layout to hold whatever the active `Fragment` instance is, and finally,
    we need to add code to `MainActivity.java` to switch between the different `Fragment`
    instances when the user taps on the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the Navigation Drawer menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `activity_main_drawer.xml` file in the `res/menu` folder of the project
    explorer. Edit the code within the `group` tags that we saw earlier to reflect
    our menu options of **Insert**, **Delete**, **Search**, and **Results**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the results item reuses the camera icon. It is left as a challenge
    for you if you wish to add a unique icon of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add a layout within the main layout to hold whatever the current
    active fragment is.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a holder to the main layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `content_main.xml` file in the `layout` folder. Locate the following
    existing code, which is the current fragment holder that is not right for our
    uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the preceding code and replace it with this XML code just before the
    closing tag of `ConstraintLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Switch to design view and click the **Infer constraints** button to fix the
    new layout in place.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a `FrameLayout` widget with an `id` attribute of `fragmentHolder`,
    which we can get a reference to and load all our `Fragment` instance layouts into.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the MainActivity.java class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Replace all the existing `import` directives with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Open the `MainActivity.java` file and edit the entire code to match the following.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It might be quickest to delete everything except the `import` directives we
    have just added.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the code next, so study the variable names and the various
    classes and their related methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `onCreate` method handles aspects of our UI. The
    code gets a reference to a `DrawerLayout` widget that corresponds to the layout
    we have just seen. The code also creates a new instance of `ActionBarDrawerToggle`,
    which allows the controlling/toggling of the drawers. Next, a reference is captured
    to the layout file of the navigation drawer itself (`nav_view`) and the final
    line of code sets a listener on `NavigationView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `onBackPressed` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `onBackPressed` method is an overridden method of Activity and it handles
    what happens when the user presses the back button on their device. The code closes
    the drawer if it is open and if it is not, simply calls `super.onBackPressed`.
    This means that the back button will close the drawer if it is open or have the
    default behavior if it was already closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `onCreateOptionsMenu` and `onOptionsItemSelected` methods, which aren''t
    really used in this app but will add the default functionality to the `options`
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the `onNavigatioItemSelected` method shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through the code in the `onNavigationItemSelected` method. Most of
    the code should look familiar. For each of our menu options, we create a new `Fragment`
    of the appropriate type and insert it into our `RelativeLayout` with an `id` property
    value of `fragmentHolder`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for the `MainActivity.java` file, the `transaction.addToBackStack`
    method means that the chosen `Fragment` instance will be remembered in order with
    any others. The result of this is that if the user chooses the `insert` fragment,
    then the `results` fragment then taps the back button, then the app will return
    the user to the `insert` fragment.
  prefs: []
  type: TYPE_NORMAL
- en: You can now run the app and use the Navigation Drawer menu to flip between all
    our different `Fragment` instances. They will look just as they did in the screenshots
    at the start of this chapter, but they don't have any functionality yet.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how straightforward it is to have an attractive and
    pleasing UI and although our `Fragment` instances don't have any functionality
    yet, they are set up ready to go once we have learned about databases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about databases in general, the specific
    database that Android apps can use, and we will then add the functionality to
    our `Fragment` classes.
  prefs: []
  type: TYPE_NORMAL
