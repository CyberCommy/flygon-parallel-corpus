- en: Chapter 5. Running Your Private Docker Infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 4](ch04.html "Chapter 4. Publishing Images"), *Publishing Images,*
    we discussed Docker images and clearly understood that Docker containers are the
    runtime implementations of Docker images. Docker images and containers are in
    plenty these days, as the containerization paradigm has taken the IT domain by
    storm. Therefore, there is a need for worldwide enterprises to keep their Docker
    images in their own private infrastructure for security considerations. So, the
    concept of deploying a Docker Hub to our own infrastructure has emerged and evolved.
    Docker Hubs are paramount and pertinent to register and then deposit the growing
    array of Docker images. Primarily, a Docker Hub is specially made to centralize
    and centrally manage information on:'
  prefs: []
  type: TYPE_NORMAL
- en: User accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checksums of the images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public namespaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter is developed with an a focus on providing all the relevant information
    to enable you and Docker container crafters to design, populate, and run their
    own private Docker Hubs in their own backyards. This chapter covers the following
    important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker registry and index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker registry use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run your own index and registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push the image to a newly created registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker registry and index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, a Docker Hub consists of a Docker index and registry. Docker clients
    can connect and interact with the Docker Hubs over a network. The registry has
    the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: It stores the images and graphs for a set of repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not have user accounts data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has no notion of user accounts or authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It delegates the authentication and authorization to the Docker Hub Authentication
    service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports different storage backends (S3, cloud files, local filesystem, and
    so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't have a local database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a source code associated with it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advanced features of the Docker registry include `bugsnag`, `new relic`,
    and `cors`. The `bugsnag` feature detects and diagnoses crashes in applications,
    `new relic` encapsulates the registry and monitors performance, and `cors` can
    be enabled to share resources outside our own registry domain. It is recommended
    that you deploy the registry to production environments using a proxy, such as
    nginx. You can also run the Docker registry directly on Ubuntu and Red Hat Linux-based
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the firm in charge of developing the Docker platform has released
    the Docker registry as an open source service on GitHub at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
    It is important to note that the Docker index is only a recommendation and nothing
    has been released by Docker as an open source project at the time of writing this
    book. In this chapter, we will start with a use case of the Docker registry, and
    then start with the actual deployment of the index elements and the Docker registry
    from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Docker registry use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the use cases of the Docker registry:'
  prefs: []
  type: TYPE_NORMAL
- en: Pull or download an image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push an image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete an image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now go through each of these use cases in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pull or download an image**: The user requests an image using the Docker
    client from the index, the index, in turn responds back to the user with the registry
    details. Then, the Docker client will directly request the registry to get the
    required image. The registry authenticates the user with an index internally.
    As shown in the following diagram, image pulling is accomplished with the collaboration
    of the client, index, and registry modules:![Docker registry use cases](graphics/7937OT_05_01.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Push an image**: A user requests to push the image, gets the registry information
    from the index, and then pushes the image directly to the registry. The registry
    authenticates the user with the index and, finally, responds to the user. The
    control flow is illustrated in the following diagram:![Docker registry use cases](graphics/7937OT_05_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Delete an image**: The user can also request to delete an image from the
    repository.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user has the option to use the registry with or without the index. Use of
    the registry, without the index, is best suited for storing private images.
  prefs: []
  type: TYPE_NORMAL
- en: Run your own index and registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will perform the following steps to run our own index and
    registry, and finally, push the image:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment of the index components and the registry from GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuration of nginx with the Docker Registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up SSL on the web server for secure communication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 1 – Deployment of the index components and the registry from GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The index components include `apache-utils` and `ngnix` for password authentication
    and the SSL feature for HTTPS support. The user must note that the current version
    of the Docker registry supports only HTTP to connect to the registry. So, it is
    mandatory for the user to deploy and use **Secure Sockets Layer** (**SSL**) to
    secure the data. SSL creates an encrypted connection between a web server and
    the client's web browser that allows private data to be transmitted without the
    issues of eavesdropping, data tampering, or message forgery. This is a proven
    way of securing the data using SSL certificates that is widely accepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker registry is a Python application, and we can install Python on the
    local Ubuntu machine from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry),
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install the Docker registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will update the Docker registry in the Python package and update the configuration
    file in the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the `config_sample.yml` file to `config.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker, by default, saves its data in the `/tmp` directory, which can create
    problems because the `/tmp` folder is cleared on reboot on many Linux systems.
    Let''s create a permanent folder to store our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update our preceding `config.yml` file for this updated path for the
    following two locations. The updated code for the first location will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code for the second location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The other default configuration of the `config.yml` file works fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start the Docker registry using `gunicorn`. Gunicorn, also known
    as Green Unicorn, is a Python **Web Server Gateway Interface** (**WSGI**) HTTP
    server for Linux systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, the Docker registry is up and running as a process on the user's local
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: We can stop this process using *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start a Linux service as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a directory for the `docker-registry` tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and update the file for the Docker registry configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the following content in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file, run the Docker registry service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now secure this registry using `apache-utils`, by enabling the password protected
    feature, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The user creates a login ID and password to access the Docker registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Enter the new password when prompted. At this point, we have the login ID and
    password to access the Docker registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 2 – Configuration of nginx with the Docker registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need to tell nginx to use that authentication file (created in step
    6 and step 7 of the previous section) to forward requests to our Docker registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create the nginx configuration file. To do this, we need to follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the ngnix configuration file by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the soft link and restart the ngnix service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check whether everything works fine. Run the following command, and
    we should get this output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! So now we have the Docker registry running. Now, we have to check whether
    nginx worked as we expected it to. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we will get an unauthorized message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s log in using the password created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This confirms that your Docker registry is password protected.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Set up SSL on the web server for secure communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the final step to set up SSL on a local machine, which hosts the web
    server for the encryption of data. We create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that my Ubuntu machine is available on the Internet with the name `mydomain.com`
    and SSL is set up with the path for a certificate and key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s sign the certificate as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The root key is generated using `openssl`, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the root key, let''s generate a root certificate (enter whatever
    you''d like to at the Command Prompt):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, generate a key for our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to make a certificate signing request. Once we run the signing
    command, ensure that `Common Name` is our server name. This is mandatory and any
    deviation will result in an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, `Common Name` looks like `mydomain.com`. This is an Ubuntu VM running
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding command is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `challenge password` input is kept blank, and the user is also free to
    populate this. Then, we need to sign the certificate request, by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've generated all the files we need for our certificate to work,
    we need to copy these files to the correct places.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, copy the certificate and key to the paths where nginx is expecting them
    to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we have created self-signed certificates, and they are signed by
    any known certificate authority, so we need to inform the registry that this is
    a legitimate certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s restart nginx to reload the configuration and SSL keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will test the SSL certificate to check whether it works fine. Since
    `mydomain.com` is not an Internet address, add the entry in `/etc/hosts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'So if all went well, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Push the image to the newly created Docker registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, push the image to the Docker registry. So, let''s create an image
    on the local Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s log in to the Docker registry created locally on the Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Tag the image before pushing it to the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the `push` command to upload the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the image from the local disk and `pull` it from the Docker registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker engine allows every value-adding software solution to be containerized,
    indexed, registered, and stocked. Docker is turning out to be a great tool for
    systematically developing, shipping, deploying, and running containers everywhere.
    While `docker.io` lets you upload your Docker creations to their registry for
    free, anything you upload there is publicly discoverable and accessible. Innovators
    and companies aren't keen on this and therefore, insist on for private Docker
    Hubs. In this chapter, we explained all the steps, syntaxes, and semantics for
    you in an easy-to-understand manner. We saw how to retrieve images to generate
    Docker containers and described how to push our images to the Docker registry
    in a secure manner in order to be found and used by authenticated developers.
    The authentication and authorization mechanisms, a major part of the whole process,
    have been explained in detail. Precisely speaking, this chapter is conceived and
    concretized as a guide for setting up your own Docker Hubs. As world organizations
    are showing exemplary interest in having containerized clouds, private container
    hubs are becoming more essential.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into containers, which is the natural
    progression from images. We will demonstrate the capability to run services, such
    as a web server in a Docker container, and its interaction with the host machine
    and the outside world.
  prefs: []
  type: TYPE_NORMAL
