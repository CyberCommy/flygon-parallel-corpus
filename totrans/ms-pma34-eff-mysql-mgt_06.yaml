- en: Chapter 6. Exporting Structure and Data (Backup)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping good backups is crucial to a project. Backups consist of up-to-date
    backups and intermediary snapshots taken during development and production phases.
    The export feature of phpMyAdmin can generate backups, and can also be used to
    send data to other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that phpMyAdmin's export feature produces backups on demand and
    it is highly recommended to implement an automatic and scripted backup solution
    which takes backups on a regular schedule. The precise way to implement such a
    solution depends on the server's OS.
  prefs: []
  type: TYPE_NORMAL
- en: Dumps, backups, and exports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us first clarify some vocabulary. In MySQL documentation, you will encounter
    the term **dump**, and in other applications, **backup** or **export**. All these
    terms have the same meaning in the phpMyAdmin context.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL includes **mysqldump** —a command-line utility that can be used to generate
    export files. But the shell access needed for command-line utilities is not offered
    by every host provider. Also, access to the export feature from within the web
    interface is more convenient. This is why phpMyAdmin offers the export feature
    with more export formats than mysqldump. This chapter will focus on phpMyAdmin's
    export features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting an export, we must have a clear picture of the intended goal
    of the export. The following questions may be of help:'
  prefs: []
  type: TYPE_NORMAL
- en: Do we need the complete database or just some tables?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need just the structure, just the data, or both?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which utility will be used to import back the data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we want only a subset of the data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the size of the intended export, and what is the link speed between
    us and the server?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scope of the export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we click an **Export** link from phpMyAdmin, we can be in one of these
    views or contexts—`Database` view, `Table` view, or `Server` view (more on this
    later in [Chapter 19)](ch19.html "Chapter 19. Administrating the MySQL Server").
    According to the current context, the resulting export's scope will be a complete
    database, a single table, or even a multi-database as in the case of `Server`
    view. We will first explain database exports and all the relevant export types.
    Then we will go on with table and multi-database exports, underlining the difference
    for these modes of exporting.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Database` view, click on the **Export** link. Since version 3.4.0,
    the default export panel appears as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a database](img/7782_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, `$cfg['Export']['method']` is set to`'quick'` and `$cfg['Export']['format']`
    is set to`'sql'`. Usability tests show that the most common goal of exporting
    is to produce a complete backup in SQL format and save it on our workstation;
    this is accomplished by just clicking on **Go**.
  prefs: []
  type: TYPE_NORMAL
- en: Other values for `$cfg['Export']['method']` are`'custom'`, which would show
    the detailed export options, and `'custom-no-form'` which would also show the
    detailed options but without the possibility of selecting a quick export—this
    being the behavior of versions prior to 3.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'In custom mode, sub-panels are shown. The **Table(s), Output**, and **Format**
    sub-panels occupy the top part of the page. The **Format-specific options** sub-panel
    varies in order to show the options for the export format chosen. Following screenshot
    shows the SQL format panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a database](img/7782_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Table(s) sub-panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This sub-panel contains a table selector, from which we choose the tables that
    we want. By default, all tables are selected and we can use the **Select All /
    Unselect All** links to change our choice.
  prefs: []
  type: TYPE_NORMAL
- en: The Output sub-panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default behavior is to transmit the export file via HTTP (the **Save output
    to a file** radio button being selected). This triggers a **Save** dialog into
    the browser, which ultimately saves the file on our local machine. An alternative
    option would have been to select **View output as text**, which can be done as
    a testing procedure, provided that the exported data is of a reasonable size.
  prefs: []
  type: TYPE_NORMAL
- en: File name template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The name of the proposed file will obey the **File name template** field. In
    this template, we can use the special **@SERVER@, @DATABASE@**, and **@TABLE@**
    placeholders. These placeholders will be replaced by the current server, database,
    or table name (for a single-table export). Note that there is one "at sign" character
    before and after the words. We can also use any special character from the PHP
    `strftime` function; this is useful for generating an export file based on the
    current date or hour. Finally, we can put any other string of characters (not
    part of the `strftime` special characters), which will be used literally. The
    file extension is generated according to the type of export. In this case, it
    will be `.sql`. Following are some examples for the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@DATABASE@` would generate `marc_book.sql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DATABASE@-%Y%m%d` would give `marc_book-20110920.sql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **use this for future exports** option, when activated, stores the entered
    template settings into cookies (for database, table, or server exports) and brings
    them back the next time we use the same kind of export.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default templates are configurable, via the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The possible placeholders such as `@DATABASE@` are the same as those that can
    be used for the window title and are described in `Documentation.html`, FAQ 6.27.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a character set
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to choose the exact character set for our exported file. phpMyAdmin
    verifies that the conditions for recoding are met. For the actual recoding of
    data, the PHP component of the web server must support the `iconv` or the `recode`
    module. The `$cfg['RecodingEngine']` parameter specifies the actual recoding engine—the
    choices being `none, auto, iconv`, and `recode`. If it is set to `auto`, phpMyAdmin
    will first try the `iconv` module and then the `recode` module. If set to `none`,
    the character set dialog is not shown.
  prefs: []
  type: TYPE_NORMAL
- en: Kanji support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If phpMyAdmin detects the use of the Japanese language, it checks whether PHP
    supports the `mb_convert_encoding()` multibyte string function. If it does, additional
    radio buttons are displayed on the export and import pages and on the query box,
    so that we can choose between the `EUC-JP` and `SJIS` Japanese encodings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example taken from the **Export** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Kanji support](img/7782_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To save transmission time and get a smaller export file, phpMyAdmin can compress
    to ZIP, GZIP, or BZIP2 formats. These formats are offered only if the PHP server
    has been compiled with the `--with-zlib` (for ZIP and GZIP) or `--with-bz2` (for
    BZ2) configuration option respectively. The following parameters control which
    compression choices are presented in the panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A system administrator installing phpMyAdmin for a number of users could choose
    to set all these parameters to `FALSE`, so as to avoid the potential overhead
    incurred by a lot of users compressing their exports at the same time. This situation
    usually causes more overhead than if all the users were transmitting their uncompressed
    files at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In older phpMyAdmin versions, the compression file was built in the web server
    memory. Some problems caused by this were:'
  prefs: []
  type: TYPE_NORMAL
- en: File generation depended on the memory limits assigned to running PHP scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the time the file was generated and compressed, no transmission occurred.
    Hence, users were inclined to think that the operation was not working and that
    something had crashed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression of large databases was impossible to achieve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$cfg['CompressOnFly']` parameter (set to `TRUE` by default) was added to
    generate (for GZIP AND BZIP2 formats) a compressed file containing more headers.
    Now, the transmission starts almost immediately. The file is sent in smaller chunks
    so that the whole process consumes much less memory. The downside of this is a
    slightly larger resulting file.
  prefs: []
  type: TYPE_NORMAL
- en: Export formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We shall now discuss the formats (and the options available once they have been
    chosen) that can be selected with the **Format** sub-panel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if we can export into many formats, only some of these formats can be imported
    back using phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SQL format is useful, as it creates standard SQL commands that would work
    on any SQL server.
  prefs: []
  type: TYPE_NORMAL
- en: If the **Display comments** checkbox is selected, comments are included in the
    export file. The first part of the export comprises comments (starting with the
    `--` characters) that detail the utility (and version) that created the file,
    the date, and other environment information. We then see the `CREATE` and `INSERT`
    queries for each table.
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin generates ANSI-compatible comments in the export file. These comments
    start with `--`. They help with importing the file back on other ANSI SQL-compatible
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL options are used to define exactly what information the export will contain.
    The following screenshot depicts the general SQL options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SQL](img/7782_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The general SQL options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Additional custom header comment:** We can add our own comments for this
    export (for example, **Monthly backup)**, which will show in the export headers
    (after the PHP version number). If the comment has more than one line, we must
    use the special character `\n` to separate each line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display foreign key relationships:** In [Chapter 10](ch10.html "Chapter 10. Benefiting
    from the Relational System"), we will see that it''s possible to define relations
    even for tables under the `MyISAM` storage engine; this option would export these
    relationship''s definition as comments. These cannot be directly imported, but
    nonetheless are valuable as human-readable table information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display MIME types:** This adds information (in the form of SQL comments),
    to describe which MIME type has been associated to columns. [Chapter 16](ch16.html
    "Chapter 16. Transforming Data using MIME") explains this further.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enclose export in a transaction:** Starting with MySQL 4.0.11, we can use
    the `START TRANSACTION` statement. This command, combined with `SET AUTOCOMMIT=0`
    at the beginning and `COMMIT` at the end, asks MySQL to execute the import (when
    we will re-import this file) in one transaction, ensuring that all the changes
    are done as a whole.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable foreign key checks:** In the export file, we can add `DROP TABLE`
    statements. However, normally a table cannot be dropped if it is referenced in
    a foreign key constraint. This option overrides the verification by adding `SET
    FOREIGN_KEY_CHECKS=0` to the export file. This override only lasts for the duration
    of the import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database system or older MySQL server to maximize output compatibility with:**
    This lets us choose the flavor of SQL that we export. We must know about the system
    onto which we intend to import this file. Among the choices are **MySQL 3.23,
    MySQL 4.0, ORACLE**, and **ANSI**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We may want to export the structure, the data, or both; this is performed with
    the **Dump table** option. Selecting **Structure** generates the section with
    `CREATE` queries, and selecting **Data** produces `INSERT` queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we select **Structure**, the **Object creation options** sub-panel appears,
    as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SQL](img/7782_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The structure options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT:** Adds a `DROP ...
    IF EXISTS` statement before each `CREATE` statement, for example, `DROP TABLE
    IF EXISTS `author``;. This way, we can ensure that the export file is executed
    on a database in which the same element already exists, updating its structure
    but destroying the previous element''s contents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add CREATE PROCEDURE / FUNCTION / EVENT:** This includes all procedures,
    functions, and event definitions found in this database, in the export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CREATE TABLE OPTIONS / IF NOT EXISTS:** Adds the `IF NOT EXISTS` modifier
    to `CREATE TABLE` statements, avoiding an error during import if the table already
    exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CREATE TABLE OPTIONS / AUTO_INCREMENT:** Puts auto-increment information
    from the tables into the export, ensuring that the inserted rows in the tables
    will receive the next exact auto-increment ID value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enclose table and field names with backquotes:** In the MySQL world, backquotes
    are the normal way of protecting table and column names that may contain special
    characters. In most cases, it is useful to have them. However, backquotes are
    not recommended if the target server (where the export file will be imported)
    is running a SQL engine that does not support backquotes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot displays options relevant to a **Data** export:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SQL](img/7782_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The options available in the **Data** section are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**INSERT DELAYED statements:** Adds the `DELAYED` modifier to `INSERT` statements.
    This accelerates the `INSERT` operation as it is queued to the server, which will
    execute it when the table is not in use. This is a MySQL non-standard extension,
    available only for `MyISAM, MEMORY`, and `ARCHIVE` tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INSERT IGNORE statements:** Normally, at import time, we cannot insert duplicate
    values for unique keys, as this would abort the insert operation. This option
    adds the `IGNORE` modifier to `INSERT` and `UPDATE` statements, thus skipping
    the rows that generate duplicate key errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function to use when dumping data:** The choices are **INSERT, UPDATE**,
    and **REPLACE**. The most well-known of these types is the default **INSERT**—using
    `INSERT` statements to import back our data. At import time, however, we could
    be in a situation where a table already exists and contains valuable data, and
    we just want to update the columns that are in the current table we are exporting.
    **UPDATE** generates statements, such as the following line of code, updating
    a row when the same primary or unique key is found:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The third possibility, **REPLACE**, produces statements such as `REPLACE INTO
    `author` VALUES (1, 'John Smith', '111-1111');` These act similar to an INSERT
    statement for new rows and update existing rows, based on primary or unique keys.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax to use when inserting data:** There are several choices here. By including
    column names in every statement, the resulting file is bigger, but will prove
    more portable on various SQL systems with the added benefit of being better documented.
    Inserting multiple rows with a statement is faster than using multiple `INSERT`
    statements, but is less convenient as it makes reading the resultant file harder.
    It also produces a smaller file, but each line of this file is not executable
    in itself as each line does not have an `INSERT` statement. If you cannot import
    the complete file in one operation, you cannot split the file with a text editor
    and import it chunk by chunk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximal length of created query:** The single `INSERT` statement generated
    for **Extended inserts** might become too big and could cause problems. Hence,
    we set a limit to the number of characters for the length of this statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dump binary columns in hexadecimal notation:** This option makes phpMyAdmin
    encode the contents of `BLOB` columns in `0x` format. Such a format is useful
    as, depending on the software that will be used to manipulate the export file
    (for example a text editor or mail program), handling a file containing 8-bit
    data can be problematic. However, using this option will produce an export of
    `BLOB` column type that is twice the size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dump TIMESTAMP columns in UTC:** This is useful if the export file is to
    be imported back on a server located in a different time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This format is understood by a lot of programs, and you may find it useful for
    exchanging data. Note that it is a data-only format—no SQL structure here.
  prefs: []
  type: TYPE_NORMAL
- en: '![CSV](img/7782_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The available options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Columns separated with:** We put a comma here, which means that a comma will
    be placed after each column. The default value comes from `$cfg[''Export''][''csv_separator'']`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns enclosed with:** We place an enclosing character here (double quotes)
    to ensure that a column containing the terminating character (comma) is not taken
    for two columns. The default value comes from `$cfg[''Export''][''csv_enclosed'']`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns escaped with:** If the export generator finds the **Columns enclosed
    with** character inside a column, this character will be placed before it in order
    to protect it. For example,`"John \"The Great\"Smith"`. The default value comes
    from `$cfg[''Export''][''csv_escaped'']`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lines terminated with:** This decides the character that ends each line.
    We should use a proper line delimiter here depending on the operating system on
    which we will manipulate the resulting export file. The default value of this
    option comes from the `$cfg[''Export''][''csv_terminated'']` parameter, which
    contains`''AUTO''` by default. The`''AUTO''` value produces a value of `\r\n`
    if the browser''s OS is Windows, and `\n` otherwise. However, this might not be
    the best choice if the export file is intended for a machine with a different
    OS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replace NULL with:** This determines which string occupies the place in the
    export file of any `NULL` value found in a column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove carriage return/line feed characters within columns:** As a column
    can contain carriage return or line feed characters, this determines if such characters
    should be removed from the exported data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Put column names in the first row:** This gets some information about the
    meaning of each column. Some programs will use this information to name the column.
    For the exercise, we select this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we select the `author` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Go** produces a file containing the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: CSV for Microsoft Excel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This export mode produces a CSV file specially formatted for Microsoft Excel
    (using semicolons instead of commas). We can select the exact Microsoft Excel
    edition as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSV for Microsoft Excel](img/7782_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PDF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's possible to create a PDF report of a table by exporting in PDF. This feature
    always produces a file. Since phpMyAdmin 3.4.7, we can also export a complete
    database or multiple tables in one sweep. We can add a title for this report,
    and it also gets automatically paginated. Non-textual `(BLOB)` data as in the
    `book` table is discarded from this export format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we test it on the `author` table, asking to use "The authors" as a title.
    PDF is interesting because of its inherent vectorial nature—the results can be
    zoomed. Let us have a look at the generated report, as seen from the Adobe Reader:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PDF](img/7782_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Word 2000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This export format directly produces a `.doc` file suitable for all software
    that understands the Word 2000 format. We find options similar to those in the
    Microsoft Excel export, and a few more. We can independently export the table's
    **Structure** and **Data**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Microsoft Word 2000](img/7782_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that, for this format and the Excel format, we can choose many tables
    for one export. However, unpleasant results happen if one of these tables has
    non-textual data. Here are the results for the `author` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Microsoft Word 2000](img/7782_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: LaTeX
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**LaTeX** is a typesetting language. phpMyAdmin can generate a `.tex` file
    that represents the table''s structure and/or data in a sideways tabular format.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this file is not directly viewable, and must be processed further
    or converted for the intended final media.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Include table caption** | Displays captions in the tabular output |'
  prefs: []
  type: TYPE_TB
- en: '| **Structure** and **Data** | The familiar choice to request structure, data,
    or both |'
  prefs: []
  type: TYPE_TB
- en: '| **Table caption** | The caption to go on the first page |'
  prefs: []
  type: TYPE_TB
- en: '| **Table caption (continued)** | The caption to go on, page after page |'
  prefs: []
  type: TYPE_TB
- en: '| **Display foreign key relationships, comments, MIME types** | Other structure
    information we want as output. These choices are available if the phpMyAdmin configuration
    storage is in place |'
  prefs: []
  type: TYPE_TB
- en: XML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This format is very popular these days for data exchange. We can choose which
    data definition elements (such as functions, procedures, tables, triggers, or
    views) we want exported. What follows is the output for the `author` table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open document spreadsheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This spreadsheet format is a subset of the open document ([http://en.wikipedia.org/wiki/OpenDocument](http://en.wikipedia.org/wiki/OpenDocument)),
    which was made popular with the `OpenOffice.org` office suite. We need to choose
    only one table to be exported in order to have a coherent spreadsheet. The following
    screenshot shows our `author` table, exported into a file named `author.ods`,
    and subsequently looked at from OpenOffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Open document spreadsheet](img/7782_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Open document text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is another subset of the open document standard, this time oriented towards
    text processing. Our `author` table is now exported and viewed from OpenOffice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Open document text](img/7782_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: YAML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**YAML** stands for **YAML Ain''t Markup Language**. YAML is a human-readable
    data serialization format; its official site is [http://www.yaml.org](http://www.yaml.org).
    This format has no option that we can choose from within phpMyAdmin. Here is the
    YAML export for the `author` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: CodeGen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This choice might some day support many formats related to code development.
    Currently, it can export in NHibernate **Object-relation mapping (ORM)** format.
    For more details, please refer to [http://en.wikipedia.org/wiki/Nhibernate](http://en.wikipedia.org/wiki/Nhibernate).
  prefs: []
  type: TYPE_NORMAL
- en: Texy! text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Texy!** is a formatting tool ([http://texy.info/en/](http://texy.info/en/))
    with its own simplified syntax. The following block of code is an example of export
    in this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: PHP array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In PHP, associative arrays can hold text data; therefore, a PHP-array export
    format is available. The following is a PHP array export of the `author` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: MediaWiki table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MediaWiki ([http://www.mediawiki.org/wiki/MediaWiki](http://www.mediawiki.org/wiki/MediaWiki))
    is a popular wiki package, which supports the ubiquitous Wikipedia. This wiki
    software implements a formatting language in which it's possible to describe data
    in tabular format. Choosing this export format in phpMyAdmin produces a file which
    can be pasted on a wiki page we are editing.
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JavaScript Object Notation ([http://json.org](http://json.org)) is a data-interchange
    format popular in the web world. Exporting the `author` table in this format is
    shown in the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exporting a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Export** link in the `Table` view brings up the export sub-panel for
    a specific table. It is similar to the database export panel, but there is no
    table selector. However, there is an additional section for split exports (Rows)
    before the **Output** sub-panel, as depicted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a table](img/7782_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Split-file exports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The part of the dialog containing **Number of rows** and **Row to begin at**
    enables us to split the table into chunks. Depending on the exact row size, we
    can experiment with various values for the number of rows to find and how many
    rows can be put in a single export file before the memory or execution time limits
    are hit in the web server. We could then use names such as `book00.sql` and `book01.sql`
    for our export files. Should we decide to export all rows, we just select the
    **Dump all rows** radio button.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting selectively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At various places in phpMyAdmin's interface, we can export the results that
    we see, or select the rows that we want to export. We will examine the various
    ways of exporting a selected portion of a table.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting partial query results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When results are displayed from phpMyAdmin (here, the results of a query asking
    for the books from **author_id 2)**, an **Export** link appears at the bottom
    of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting partial query results](img/7782_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on this link brings up a special export panel containing the query
    on the top, along with the other table export options. An export produced via
    this panel would contain only the data from this result set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results of single-table queries can be exported in all the available formats,
    while the results of multi-table queries can be exported in all the formats except
    SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and checkboxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anytime we see the results (when browsing or searching, for example), we can
    check the boxes beside the rows that we want, and use the **With selected: Export**
    icon or link to generate a partial export file with just those rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and checkboxes](img/7782_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exporting multiple databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any user can export the databases to which he/she has access, in one operation.
  prefs: []
  type: TYPE_NORMAL
- en: On the home page, the **Export** link brings us to the screen shown in the following
    screenshot. This has the same structure as the other export pages, except for
    the databases list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting multiple databases](img/7782_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exporting large databases may or may not work. It depends on their size, the
    options chosen, and the web server's PHP component settings (especially memory
    size and maximum execution time).
  prefs: []
  type: TYPE_NORMAL
- en: Saving the export file on the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of transmitting the export file over the network with HTTP, it is possible
    to save it directly on the file system of the web server. This could be quicker
    and less sensitive to execution time limits as the entire transfer from the server
    to the client browser is bypassed. Eventually, a file transfer protocol such as
    FTP or SFTP can be used to retrieve the file, as leaving it on the same machine
    would not provide good backup protection.
  prefs: []
  type: TYPE_NORMAL
- en: A special directory has to be created on the web server before saving an export
    file on it. Usually, this is a sub-directory of the main `phpMyAdmin` directory.
    We will use `save_dir` as an example. This directory must have the correct permissions.
    First, the web server must have write permissions for this directory. Also, if
    the web server's PHP component is running on safe mode, the owner of the phpMyAdmin
    scripts must be the same as that of `save_dir`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Linux system, assuming that the web server is running as `group apache`,
    the following commands would do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The proper ownership and permissions depends highly on the chosen web server
    and the **SAPI (Server Application Programming Interface)** (refer to [http://en.wikipedia.org/wiki/Server_Application_Programming_Interface)](http://en.wikipedia.org/wiki/Server_Application_Programming_Interface))
    used, which influences how directories and files are created and accessed. PHP
    could be using the scripts' owner as the accessing user, or the web server's user/group
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: We also have to define the`'./save_dir'` directory name in `$cfg['SaveDir'].We`
    are using a path relative to the `phpMyAdmin` directory here, but an absolute
    path would work just as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Output** section will appear with a new **Save on server..**. section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving the export file on the server](img/7782_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on **Go**, we will get a confirmation message or an error message
    (if the web server does not have the required permissions to save the file).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For saving a file again using the same file name, check the **Overwrite existing
    file(s)** box.
  prefs: []
  type: TYPE_NORMAL
- en: User-specific save directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the special string, `%u`, in the `$cfg[''SaveDir'']` parameter.
    This string will be replaced by the logged-in username. For example, as shown
    in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This would give us an on-screen choice, **Save on server in the directory ./save_dir/marc/**.
    These directories (one per potential user) must exist and must bear the proper
    permissions, as already seen in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Memory limits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating an export file uses a certain amount of memory, depending on the
    size of the tables and on the chosen options. The `$cfg['MemoryLimit']` parameter
    can contain a limit (in bytes) for the amount of memory used by PHP scripts in
    phpMyAdmin—the exporting/importing scripts and other scripts. By default, the
    parameter is set to `0`, meaning that there is no limit. We could set here a limit
    of 20 MiB by using a value of `20M` (the `M` suffix here is very important, to
    avoid setting a limit of 20 bytes!).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, if PHP has its safe mode activated, changing `$cfg['MemoryLimit']`
    has no effect. Instead, the enforced limit comes from the `memory_limit` directive
    in `php.ini`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to memory limits, the execution time limit has an effect on exporting
    and can be controlled via the `$cfg['ExecTimeLimit']` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined the various ways to trigger an export—from the
    `Database` view, the `Table` view, or a results page. We also listed the various
    available export formats, their options, the possibility of compressing the export
    file, and the various places where it might be sent.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have the opportunity of importing back our structure
    and data, provided the chosen format is supported by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
