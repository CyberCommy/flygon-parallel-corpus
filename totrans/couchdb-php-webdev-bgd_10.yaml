- en: Chapter 10. Deploying your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just a few more steps to complete before our application is live for
    the world to see and ready for users to sign up and create posts to their heart's
    content.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We''ll do the following things in this chapter to get our application up and
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll set up an account with Cloudant to house our application's CouchDB database
    and prepare it for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll add a configuration class to our project to use environment variables
    to drive our application's settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll create an account with PHP Fog to host our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll configure Git to connect to PHP Fog's Git repository and deploy our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you might expect, we're going to be doing a lot of account setup and tweaking
    of our code in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any application or database deployment, there are a variety of options for
    you. Each option has its strengths and weaknesses. I'd like to arm you with some
    knowledge instead of jumping right into setting up services, just in case you
    want to change to a different service some day.
  prefs: []
  type: TYPE_NORMAL
- en: In the past few years, Cloud has become one of the most used and abused terms
    in the technology industry. In order to completely understand the term Cloud,
    you'd have to read a whole lot of research papers and articles. But to keep it
    simple, the term **Cloud** describes the shift from the traditional single tenant
    approach with dedicated hosting, to a scalable, multi-tenant, and multi-platform
    host. CouchDB itself is a perfect example of a scalable database that could enable
    the Cloud architecture. Our application is also a good candidate for a Cloud solution,
    because we aren't storing anything locally, and we don't have any special dependencies
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, we're going to use Cloud services for both our application
    and database hosting. One of the added bonuses is that we'll be able to get our
    application up and running without paying a dime, and we'll only have to start
    paying as our application becomes successful. That's not a bad deal at all!
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly talk about how we'll approach our application and CouchDB hosting
    and the options that are available to us.
  prefs: []
  type: TYPE_NORMAL
- en: Application hosting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to hosting web applications in the Cloud, there are a million
    ways it can be done. Since we aren't server setup geniuses, we'll want to use
    a high reward system that has a small amount of setup. With that in mind, we'll
    use **Platform as a Service (PaaS)**. There are quite a few PaaS solutions out
    there, but at this time, the best options for PHP developers are Heroku and PHP
    Fog.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heroku** ([http://www.heroku.com](http://www.heroku.com)) is the innovator
    that brought PaaS into the spotlight. They support PHP applications using their
    Cedar stack. But, because it''s not a PHP-specific stack, it might be smarter
    for us to look to another provider.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP Fog** ([http://www.phpfog.com](http://www.phpfog.com)) is, in my opinion,
    a solid PaaS for developing PHP applications because of their very concentrated
    focus on PHP. They support a variety of PHP application frameworks out of the
    box, have MySQL hosting (if your application requires it), and in general, are
    geared towards providing a solid development environment, specifically for PHP
    developers.'
  prefs: []
  type: TYPE_NORMAL
- en: With all of that in mind, PHP Fog is going to be the application hosting solution
    that we go with for this project.
  prefs: []
  type: TYPE_NORMAL
- en: CouchDB hosting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are far fewer solutions for CouchDB hosting than there are for application
    hosting, but luckily, they are all very solid products. The two services we'll
    talk about are Cloudant and IrisCouch.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloudant** ([http://www.cloudant.com](http://www.cloudant.com)) is one of
    the most robust solutions for CouchDB in the Cloud. They offer the familiar tools
    that we''ve used in this book, such as Futon and command-line, with the added
    ability to scale our data as it grows. Especially unique to Cloudant is that they
    offer custom solutions when your application requires some special functionality,
    and Cloudant is one of the larger contributors to CouchDB itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Iris Couch** ([http://www.iriscouch.com](http://www.iriscouch.com)) also
    allows for free CouchDB hosting in the Cloud. Unfortunately, they just started
    to provide Couchbase server as their infrastructure, which is built on top of
    much of CouchDB''s core. While I absolutely love Couchbase and its enhancements
    to the core CouchDB technology, we''ve been tasked with using only CouchDB for
    this book. But, if you find yourself in the market for Couchbase''s enhanced functionality
    in the future, then it''s definitely worth looking into Iris Couch.'
  prefs: []
  type: TYPE_NORMAL
- en: Because I've used Cloudant in the past and know what it can handle, we'll use
    it for this project.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the setup that we'll perform in this chapter is relatively similar
    to any of their competitive services. So, if you decide to switch later on, you
    should be well positioned to handle it without too many problems.
  prefs: []
  type: TYPE_NORMAL
- en: Database hosting with Cloudant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to set up a Cloudant server and prepare it for
    our application to connect to. There's very little setup to be done, and it will
    hopefully seem familiar to the steps we took early in the book when we set up
    our CouchDB databases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Cloudant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a Cloudant account is super easy, but let's walk through it just so
    that we're all on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Start by going to [https://cloudant.com/sign-up/](http://https://cloudant.com/sign-up/),
    and you'll see the signup page.![Getting started with Cloudant](graphics/3586_10_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloudant just needs some basic information to create your account. Start by
    entering a username. This will be used as your unique identifier and the link
    to your Cloudant account. I'd recommend picking something like your name or company
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the rest of the information on the page, and click the sign up button
    at the bottom of the page when you're ready!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're all done, and you should be looking at your Cloudant dashboard. From
    here, you can manage your account and create new databases.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Cloudant](graphics/3586_10_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a _users database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have our brand new Cloudant account, but we don't have any databases
    yet. What's worse is that we don't even have our `_users` database. All we need
    to do is create a new `_users` database, and Cloudant will handle the rest. We
    technically could complete this process through Cloudant's interface, but let's
    use the command-line because it's a bit more universal.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command, and replace the two instances of username and the
    one instance of password, so that Cloudant knows who you are and what account
    you are trying to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminal will let you know that your database has been created by returning
    you a success message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Great! Your `_users` database is now created. Remember that we also need another
    database called `verge` to store all of our data. Let's create the `verge` database
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a verge database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to create another database in your account, this time calling it `verge`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — give it a shot yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating another database should be easy for you to do on your own now. Give
    it a shot by following the same steps we did while creating the `_users` database
    but changing the database name to `verge` instead.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel stuck, I'll show you the command-line statement in just a moment.
    Okay, how'd it go? Let's recap the steps you needed to perform to create the `verge`
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should have ran the following command and replaced the two instances of
    username and the one instance of password, so that Cloudant would know who you
    are and what account you are trying to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminal should have then reassured you that everything went okay when you
    saw a familiar success message, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using Futon on Cloudant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Administrating the content from the command-line can be a bit tedious. Luckily,
    Cloudant also comes with our old friend — Futon. To get to Futon on Cloudant,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in, and go to your dashboard.![Using Futon on Cloudant](graphics/3586_10_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of your database names; for this example, let's use `verge`.![Using
    Futon on Cloudant](graphics/3586_10_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the database detail page－as documents appear in your database, they
    will be displayed on this page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's move on by clicking on the View in Futon button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look familiar? This is the same great Futon that we've been using locally.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Futon on Cloudant](graphics/3586_10_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we are live on our production database, it's incredibly important that
    we configure our permissions to work on our production server. If we don't secure
    our database, then our users could easily be readable, and that's not something
    we want to get tangled up in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, Cloudant has taken care of all of these issues for us by doing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Because we've already created an account, the database is no longer in `Admin
    Party` mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, Cloudant makes the `_users` database administrable for our `admin`
    account, but no other accounts have access to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're lucky that Cloudant has our back! But, if you ever decide to roll out
    your own CouchDB instance, make sure to look back to [Chapter 3](ch03.html "Chapter 3. Getting
    Started with CouchDB and Futon"), *Getting Started with CouchDB and Futon*, and
    follow the steps we took to secure our local environment.
  prefs: []
  type: TYPE_NORMAL
- en: We do, however, need to update our `verge` database so that users can read,
    create, and write in that database.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Cloudant account, and go to your dashboard. [https://cloudant.com/#!/dashboard](http://https://cloudant.com/#!/dashboard).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `verge` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Permissions** to manage the database permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the **Permissions** for **Everyone else** by checking the boxes under
    **Read, Create**, and **Write**. Make sure to leave **Admin** unchecked, so that
    normal users can't alter our database structure and design documents. The end
    result should look similar to the following screenshot:![Configuring permissions](graphics/3586_10_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our production database set up, our code needs to know how
    to connect to it. We could just alter over the hardcoded values we have in our
    `Bones` library and change it back and forth each time we want to develop locally
    or deploy to production. But, trust me that you don't want to go through the hassle
    of doing this, and more importantly, we don't want to store any usernames or passwords
    in our code; for this we'll use environment variables. **Environment variables**
    are a set of dynamically named values that allow you to define variables from
    the applications hosting environment. Let's create a class that will allow us
    to use environment variables so that our code is free of sensitive information
    and our application is easy to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a configuration class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugging in a simple configuration class is actually really easy for us to do
    because of how we've coded everything so far. Let's walk through the creation
    of it together.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new configuration file called `configuration.php` inside
    our `lib` folder (`lib/configuration.php`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's create the scaffolding for our class called `Configuration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through and create some descriptive configuration variables. We could
    add more, but let's just add the ones we need right now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, copy the login information you need to access your local CouchDB instance;
    mine looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's use a special __get function to check and see if there's an environment
    variable set, and return that instead of the default value. If not, it'll just
    return the default value that we define in this class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a simple configuration class called `configuration.php` and
    created the shell of a class called `Configuration`. Next, we created a few variables
    for the configuration of the database, which we made `public` because we might
    need to use these variables in a variety of places. Then, we filled in the default
    values of these variables with the information to access our local CouchDB instance.
    We then added in the magic of this class. We created a `__get` function that overrides
    the standard `get` operation on a class. This function uses the `getenv` function
    to check the server to see if the variable is set in the environment variables
    (we'll go over how to do this shortly). If there is an environment variable with
    the same name, we'll return it to the calling function; if not, then we will simply
    return the default value.
  prefs: []
  type: TYPE_NORMAL
- en: The `Configuration` class is a nice and simple class that does everything we
    need without being overly complex. Next, let's move on to make sure that our application
    knows to access and use this class.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding our configuration file to Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding the new configuration class to our application was pretty easy. Now,
    we just need to add it into our `__construct()of` Bones, and we should be able
    to start using this class throughout our project.
  prefs: []
  type: TYPE_NORMAL
- en: Open up `lib/bones.php`, and look at the beginning of the file where we tell
    our library where to look for our other `lib` files. We need to add our configuration
    class here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's make sure that we define `$config in` Bones' public variables so that
    we can use them in other files if we need to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at the `__construct()` method a bit further down in the file. In
    this method (right before the instantiation of Sag), let's create a new instance
    of the `Configuration` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that our code knows about the configuration class, we just need to put the
    variables in the right place and we'll be up and running. Let's tell Sag how to
    connect to CouchDB using the configuration class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'There are just a few more places where we need to update our code, so that
    it uses the configuration class. Remember that we have the `admin` username and
    password in `classes/user.php` for the creation and finding of users. Let''s clean
    this up by first looking at the signup function inside of `classes/user.php`.
    Once we plug in our configuration class, the function should look similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The last place that we need to adjust to use the `config` class is the `get_by_username`
    function at the end of the `classes/user.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We just removed all references to `ADMIN_USER` and `ADMIN_PASSWORD`, which we
    defined at the top of `index.php`. We no longer need these variables, so let's
    switch over to `index.php` and remove both `ADMIN_USER` and `ADMIN_PASSWORD` from
    the top of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just wrote the final lines of code of our application! In this section, we
    made sure that Bones had complete access to the configuration file that we recently
    created as `lib/configuration.php`. Then, we made a public variable, `$config`,
    to make sure that we had access to our configuration class anywhere in our application.
    With our configuration class stored in the `$config` variable, we moved on to
    go through places in our code where we hardcoded our database settings.
  prefs: []
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we just wrote the last lines of our code, I'm going to be a pain and
    will make sure that you've fully committed all of our code to Git. Otherwise,
    when we deploy our code shortly, there's a chance that not all of your files will
    make it to the production server.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any remaining files in your project using the wildcard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's tell Git what we have done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Application hosting with PHP Fog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our code is all up-to-date and ready to be deployed. We just need a place to
    actually deploy it. As I mentioned before, we will use PHP Fog, but feel free
    to explore the other options that are available to you. The setup and deploy process
    will be the same with most PaaS providers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a PHP Fog account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up a PHP Fog account is just as easy as it was for us to set up our
    Cloudant account.
  prefs: []
  type: TYPE_NORMAL
- en: Start by going to [https://www.phpfog.com/signup](http://https://www.phpfog.com/signup).![Setting
    up a PHP Fog account](graphics/3586_10_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an account by filling in each field. When you are finished, click on
    **Register**. You'll be forwarded on to create your first app.![Setting up a PHP
    Fog account](graphics/3586_10_050.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that there are a variety of starter applications and frameworks
    that allow us to jump in and create the scaffolding of a PHP application. We're
    just going to use our own code, so click on **Custom App**.![Setting up a PHP
    Fog account](graphics/3586_10_060.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our application is almost created, we just need to give PHP Fog a bit more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that PHP Fog is asking for a password for MySQL. Since we aren't
    using MySQL in this application, we can just enter a random password or any other
    characters. It is helpful to know that some day down the road, if you'd like to
    use MySQL in your project to store some relational data, it's just a few clicks
    away and hosted in the same application environment. Remember that MySQL and CouchDB
    can be the best of friends if you use them right!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, PHP Fog will ask for your domain. Each application will have a short URL
    hosted on [phpfogapp.com](http://phpfogapp.com). This is totally fine for us in
    the short term, and when we're ready to roll out our application with a full domain
    name, we can do that through PHP Fog's **Domain Name** section. When creating
    a domain for your application, PHP Fog requires it to be unique, so you'll need
    to come up with your own domain. You could do something like `yourname-verge.phpfogapp.com`,
    or you can get especially clever and create an app with the name of your favorite
    mythological creature. This is a popular practice, so that nobody can randomly
    find your application while you're still fixing bugs and getting ready to launch.![Setting
    up a PHP Fog account](graphics/3586_10_065.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready, click on **Create App**, and your application will be created.![Setting
    up a PHP Fog account](graphics/3586_10_070.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s all it takes! Your application is getting ready to start. You''ll notice
    that PHP Fog will say **Status: Preparing App...** for just a few moments, and
    then it will change to **Status: Running.**![Setting up a PHP Fog account](graphics/3586_10_072.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating environment variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our PHP Fog application up and running, we have one last piece of configuration
    that we need to carry out before pushing our code to the server. Remember all
    of the environment variables we set up when configuring your project? Well, we
    need to set them within PHP Fog so that our application knows how to connect to
    Cloudant.
  prefs: []
  type: TYPE_NORMAL
- en: In order for you to manage your environment variables, you'll need to start
    by navigating to your **App Console** for your project, which is where we left
    off after you created your first app.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Env Variables**, and you will be taken to the **Environment Variables
    management** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating environment variables](graphics/3586_10_075.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You'll notice that the environment variables for the MySQL database that PHP
    Fog created for us are already set. We just need to enter in our environment variables
    for Cloudant. The name will need to be the same name that we defined in our configuration
    class earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding our `db_server` environment variable. My `db_server` is
    located at `https://timjuravich:password@timjuravich.cloudant.com`, so I'll enter
    those details into the **Name** and **Value** text fields.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating environment variables](graphics/3586_10_080.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s continue this process for each of the variables inside of the configuration
    file. To recap, here are the environment variables that you''ll need to enter
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`db_server:` This will be your Cloudant URL, again, mine is `https://timjuravich:password@timjuravich.cloudant.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_port:` This is will be set to `5984`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_database:` This is the database where everything will be stored, and it
    should be set to `verge`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_admin_user:` This is the username of the `admin` user. In our case, this
    is set to the value of the Cloudant admin username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_admin_password:` This is the password for the above `admin` user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are all finished, click on **Save Changes**, and your environment variables
    will be set. With that, we're ready to deploy to PHP Fog.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to PHP Fog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploying to PHP Fog is an extremely simple process, because PHP Fog uses Git
    for deployments. It's a good thing that our project is already set up with Git
    and ready to go. We just need to tell PHP Fog our SSH key, so that it knows how
    to identify us.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our SSH key to PHP Fog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP Fog uses SSH keys just like GitHub to identify and authenticate us. Since
    we already created one early in this book, we don't need to make another one.
  prefs: []
  type: TYPE_NORMAL
- en: You can start by clicking on **MY ACCOUNT** in the top-right corner and then
    clicking on **SSH Key** on the next page. You'll be presented with the following
    page in which you can enter your SSH key:![Adding our SSH key to PHP Fog](graphics/3586_10_082.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a value for **Nickname**. You should use something simple but descriptive,
    such as `Tim's Macbook`. You'll thank yourself later for keeping this organized,
    especially if you start to collaborate with other developers on this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to grab your public key for the Public Key textbox. Luckily, we
    can do that with one simple command in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command, and your public key will be copied to your clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With the public key in your clipboard, just click on the textbox and paste in
    the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, at the bottom of the form, there's a checkbox that says **Give this
    key Write access**. If you want the computer to be able to push the code to PHP
    Fog (which we'll want to be able to do), this needs to be checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save SSH Key**, and we're ready to move on to the final steps of
    deploying our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to PHP Fog's Git repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we already have our Git repository all set up and ready to go, all we need
    to do is tell Git how to connect to the repository on PHP Fog. Let's go through
    this process by adding a remote repository to our working directory called `phpfog`.
  prefs: []
  type: TYPE_NORMAL
- en: Get the repository from Php Fog
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When we created our application on PHP Fog, we also created a unique Git repository
    that our application is driven by. In this section, we'll grab the location of
    this repository, so that we can tell Git to connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your PHP Fog Account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your application's App Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Source Code**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Source Code** page, you''ll see a section that says **Clone your git
    repository**. Mine has the following code in it (yours should be similar):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Because we already have an existing Git repository, we don't have to clone theirs,
    but we do need the location of the application's Git repository for our next configuration
    step. Using this example, the repository location would be `git@git01.phpfog.com:timjuravich-verge.phpfogapp.com`.
    Copy this to your clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to the repository from Git
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we know our PHP Fog's Git repository, we just need to tell our local
    machine how to connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the directory to your `working` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's add our PHP Fog's repository as a new remote repository called `phpfog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Clear the runway, and we're ready to launch this application!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy to PHP Fog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's the moment we've been waiting for! Let's launch our application to PHP
    Fog.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the directory to your `working` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We want to ignore what's in PHP Fog's Git repository, as we already have our
    application built. So, this time and this time only, we'll want to append `--force`
    at the end of our call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: I hope that wasn't too anti-climactic, but congratulations, your application
    is live to the world! That was nice and easy wasn't it? Each time you make changes
    to your code from here on out, all you need to do is commit it to Git, enter the
    command `git push phpfog master`, and make sure to push your code to GitHub too
    by using `git push origin master`.
  prefs: []
  type: TYPE_NORMAL
- en: If you start to play with your live application a bit, you might be bummed to
    find out that your data from your local machine isn't up for you to see. You're
    in luck; in the next section, we're going to push our local database to our production
    database using CouchDB's powerful replication.
  prefs: []
  type: TYPE_NORMAL
- en: Replicating local data to production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inner workings and background info on replication won't be covered in detail
    in this section, but you can find a full walkthrough in the bonus chapter titled
    *Replicating your data*, which is available on the Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: To give you a quick overview, **replication** is the way that CouchDB transports
    data between one server and another. Replication is driven by the `_rev` field
    that lives in each document, the `_rev` field makes sure that your server knows
    which version has the correct data to use.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll replicate both the `_users` and `verge` databases so
    that all of our local data is available on the production server. You don't have
    to worry if your application has been live for a few minutes or even a few days,
    as the best part of replication is that if someone is already using your application,
    then all of their data will remain intact; we'll just be adding our local data.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — replicating our local _users database to Cloudant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's use Futon to replicate our local `_users` database to the `_users` database
    that we created on Cloudant.
  prefs: []
  type: TYPE_NORMAL
- en: Open Futon in the browser and click on **Replicator**, or you can navigate directly
    to `http://localhost:5984/_utils/replicator.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are signed in as the `administrator`; if you are not, click
    on **Login** and sign in as an `administrator`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `_users` database in the **Replicate changes from** the dropdown
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Remote database** radio button in the **To** section.![Time for
    action — replicating our local _users database to Cloudant](graphics/3586_10_085.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Remote database** text field, enter the URL of the database at Cloudant
    along with the credentials. The format of the URL will look similar to `https://username:password@username.cloudant.com/_users`.![Time
    for action — replicating our local _users database to Cloudant](graphics/3586_10_090.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Replicate**, and CouchDB will push your local database to Cloudant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll see the familiar results from Futon.![Time for action — replicating our
    local _users database to Cloudant](graphics/3586_10_095.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used Futon to replicate our local `_users` database to our `_users`
    production database hosted with Cloudant. The process was exactly the same as
    we've done before, however, we used **Remote Database** in the **To** section,
    and used the URL of the database along with our credentials. When replication
    was complete, we received a long and confusing report, but the gist of it is that
    that everything went okay. Let's move on to replicating our `verge` database as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s worth mentioning that if you attempted to replicate the `_users` database
    from the command-line, you would have had to include the username and password
    in your call. This is because we have the users database completely locked to
    anonymous users. The function would look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: curl -X POST http://user:password@localhost:5984/_replicate -d '{"source":"_users",*"target":"https://username:password@username.cloudant.com/_users"}'*
    -H*"Content-Type:* application/json"
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — replicating the local verge database to Cloudant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you think you can figure out the command to replicate your local `verge`
    database to the `verge` database on Cloudant based on the tip I just gave you?
    It's almost impossible to mess anything up at this stage in the game, so don't
    be scared to try a few things if you don't get it the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Give it a shot. When you're finished, continue reading and we'll go over the
    command that I used.
  prefs: []
  type: TYPE_NORMAL
- en: 'How did everything go? Hopefully, you got it without too much effort. If you
    couldn''t get it to work, here''s an example of a command you could have used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we're using our local CouchDB instance to replicate our local
    `verge` database to the target Cloudant `verge` database. For the local database,
    we can simply put the name as `verge`, but for the target database, we have to
    pass the full database location.
  prefs: []
  type: TYPE_NORMAL
- en: With all of your data live and on your production server, you can log in as
    any of the users that you created locally, and see all of the content that you
    created live and ready for the world to see. This it's not quite the end of your
    journey; let's talk quickly about what's next.
  prefs: []
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before I send you on your way, let's talk about what's in store for you with
    your application in the wild, and what you can do next to make this application
    more powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luckily, scaling your application should be really easy when leveraging PHPFog
    and Cloudant. Really, the most intense thing you'll have to do is log in to PHPFog
    and bump up our web processes, or log in to Cloudant and upgrade to a bigger plan.
    They handle all of the hard work; you just need to learn how to scale effectively.
    You can't beat that!
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how to scale effectively, browse the help documents
    of both PHPFog and Cloudant, they talk a lot of about different ways that you
    can scale and problem areas to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth mentioning again that we didn't fully cover replication in this chapter.
    For a full walkthrough of replication, be sure to checkout the bonus chapter titled
    *Replicating your data*, which is available on the Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope that you continue to develop and adapt Verge into something supremely
    useful, or if not, I hope you take the knowledge learned in this book and build
    something much greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you decide to keep building features on top of Verge, there''s still quite
    a lot that you could do with this application. For example, you could:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the ability for users to follow other users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow users to filter and search content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a messaging system so users can communicate with each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the UI and make it into something really unique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I will continue to incrementally add features like these and more to the Verge
    repository on GitHub here: [https://github.com/timjuravich/verge](http://https://github.com/timjuravich/verge).
    So, make sure to watch the repository for updates, and fork it if you''d like.'
  prefs: []
  type: TYPE_NORMAL
- en: Again, I really appreciate the time we spent together in this book, please feel
    free to reach out to me on Twitter `@timjuravich` if you have any questions.
  prefs: []
  type: TYPE_NORMAL
- en: Happy developing!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to share our application with the world. Specifically,
    we signed up for an account with Cloudant and PHP Fog, and deployed our application
    successfully. All that's left for you to do is keep coding and turn this application
    into something awesome.
  prefs: []
  type: TYPE_NORMAL
