- en: Events, Event-Driven Design, and APIs
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: At the heart of a frontend application are *events*. JavaScript allows us to
    listen for and react to user and browser events to change content for the user
    in an intuitive fashion to create elegant user interfaces and experiences. We
    need to know how to use these packets of data that are thrown around. Browser
    events are our bread and butter—they allow us to have more than a static application
    and, instead, be dynamic! By understanding events, you'll be on your way to becoming
    a full JavaScript developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The event life cycle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing an event and reading its properties
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ajax and events to populate API data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling asynchronicity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `Chapter-7` directory of the
    repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The event life cycle
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When an event occurs in JavaScript, it doesn''t simply happen and vanish—it
    goes through a *life cycle*. There are three phases to this life cycle:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The **capture** phase
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **targeting** phase
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **bubbling** phase
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following HTML:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can visualize it as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b30b13fc-d9a9-42ba-90f2-9f1e8a9c7acf.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The event life cycle
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there''s something else that is important to consider when it comes to
    events: they don''t just take effect on the exact target, but rather on the whole
    stack of objects. Before we describe what capturing, targeting, and bubbling entail,
    take a look at the following representation of our code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9059220b-da02-4e37-9470-532f29aedc52.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Event layering
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'If we think about our page as a layer cake, we can see that this event (represented
    by the arrow) must pass through all the layers of our DOM to reach the button.
    This is our **capture** phase. When the button is clicked, an event is *dispatched*
    into the event flow. First, the event looks at the document object. It then travels
    through the layers of the DOM until it reaches the intended destination: the button.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Now that the event has reached the button, we begin the **targeting** phase.
    Whatever information the event is supposed to capture from the button will be
    gathered, such as the event type (such as a click or mouseover) and other details,
    such as the cursor's *X*/*Y* coordinates.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the event travels back through the layers to the document in the bubbling
    phase. The **bubbling** phase allows us to handle an event on *any* element by
    its parent elements.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at this in practice and play with our events a little bit. Find
    the following directory and open `index.html` in the browser—[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/events](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/events):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e08b2b13-0d2c-475d-bc0e-6c5eccb8e965.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Events playground
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at this page and play around with it for a few minutes, we
    see a few things:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The *X*/*Y* coordinates on the right will change as we move our mouse on the
    page.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we open the console, it will display messages about our click event and
    at which *phase* it occurred.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at the code in `index.js` at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/events/index.js](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/events/index.js).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: From lines 1 to 5, we're simply setting up a data object to map a numerical
    code to a string. So far, so good. Now, let's take a look at line 32, where it
    says `document.querySelector('html').addEventListener('click', logClick, true)`.
    This optional Boolean parameter is new to us right now; when put it into an event
    listener, it simply says "Let me listen in the *capture* phase." Thus, when we
    click anywhere on our page, we'll get a click event with the information Click
    event triggered during capture phase at HTML. And this event was previously handled
    at undefined because it's the very first encounter with this event. It hasn't
    yet bubbled or been targeted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Let's keep dissecting this example in the next section to learn about these
    mysterious parts of the code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Capturing an event and reading its properties
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll continue working with our `events` playground code: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/events/index.js](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/events/index.js).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'On lines 32–34, we registered three click event listeners, as shown:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we discussed, the first one is listening in the capture phase because we've
    included the final Boolean parameter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have three `mousemove` events on lines 16–29\. Let''s take a look at
    one of them:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I hope most of this makes sense—we''re using a new event type of `mousemove`,
    so this event says "as the user''s mouse goes over the button, execute this code."
    It''s as simple as that. The code we''re executing is to set the value of our
    inputs with IDs of `x` and `y` to equal *the* *x and y values of the event*. Here''s
    the magic of the event object: it carries with it a *lot* of information. Go ahead
    and add a line inside this function as `console.log(e)` and take a look at what''s
    logged, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/999173f2-3fb6-47cb-a27d-b6404e7a26df.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Logging events
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'As expected, every time your mouse moves over Click Here, the event fires and
    MouseEvent is logged out. Open one of those events. You''ll see something similar
    to the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2fa91e96-485b-405b-a27b-d0b01e1dc530.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – MouseEvent
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see plenty of information about the event, including (as expected)
    the *X* and *Y* coordinates of our mouse at that time. Many of these properties
    will be useful, but one in particular to note is `target`. The target of an event
    is the node upon which we placed our event listener. From the `target` property,
    we can get its ID, which is useful if we have one event handler for multiple nodes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember our sticky note program from [Chapter 6](fe95a50e-72eb-45eb-a35c-4ce76858884e.xhtml), *The
    Document Object Model (DOM)*? Let's augment it now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Sticky notes revisited
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at our sticky note program from [Chapter 6](fe95a50e-72eb-45eb-a35c-4ce76858884e.xhtml), *The
    Document Object Model (DOM)—*[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/stickies/starter-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/stickies/starter-code)—and
    include the ability to create a modal window with information about the sticky
    when clicked on and the ability to delete that sticky, as shown in the following
    screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f8a836e-9704-4f27-9788-e787ab513906.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – New and improved sticky note creator
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'To successfully code this, you''ll need to use a new DOM manipulation method:
    `.remove()`. Take a peek at [https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove)
    for the documentation. You may also want to take a look at the CSS property of
    `visibility` to show and hide the modal window.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Just for fun, I also included a small JavaScript library to use a color picker
    for the sticky color field as an example of how simple it can be to include third-party
    code. You don't need to do anything with the `jscolor.js` script; it will work
    automatically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Sticky notes – solution 1
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Did you arrive at something similar to the following code?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can find this code file on GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/stickies/solution-code-1](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/stickies/solution-code-1).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: There are a few interesting pieces here, such as our sticky click handler starting
    on line 29\. Most of this should look familiar, with the addition of a few new
    friends. First, the click handler is using the event's target property to set
    text in our message box with attributes of the target. We don't have to search
    through the DOM in order to find our properties. In fact, doing so would be an
    expensive and wasteful operation when we have the information passed to us already
    with the event object. Line 33 modifies the CSS of the modal window to display
    it, and on line 37, we remove the sticky when the delete button of the modal is
    clicked.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'This works pretty well! However, there''s another feature of events that we
    can use to make our code more efficient, thanks to the event life cycle: *event
    delegation*.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Sticky notes – solution 2 – event delegation
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The principle of **event delegation** is to register an event listener on a
    parent event and let event propagation tell us what element has been clicked on.
    Remember our diagram of the event life cycle and the layers through which an event
    travels? We can use this to our advantage. Take a look at line 37, which is shown
    here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can find this code on GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/stickies/solution-code-2/script.js#L37](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/stickies/solution-code-2/script.js#L37).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: In this code, we've removed the attachment of the click listener from the sticky
    creation logic and abstracted it to be attached to the whole container. When `container`
    is clicked, we check to see whether the target has `box` as its class. If so,
    we execute our logic! This is a more efficient use of event listeners, especially
    when used on dynamically created elements. There are cases where event delegation
    will be your best option and times when either will work.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'But now we have another problem: every time a sticky is clicked, a new click
    handler is added to the delete button. That''s not very efficient. See whether
    you can refactor the code to eliminate that problem.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Sticky notes – solution 3
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s one possible solution:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can find this solution on GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/stickies/solution-code-3/script.js](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-7/stickies/solution-code-3/script.js).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: While this uses a global variable, it's still more efficient. By encapsulating
    our whole program in a function or class, we could eliminate the global variable,
    but that's not important for this concept.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to look at Ajax and how events tie into the life cycle of a program.
    Let's do a lab!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Using Ajax and events to populate API data
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s put it all together. For this lab, we''re going to be creating a simplified
    Pokémon game using PokéAPI: [https://pokeapi.co/](https://pokeapi.co/).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what our game will end up being: [https://sleepy-anchorage-53323.herokuapp.com/](https://sleepy-anchorage-53323.herokuapp.com/).
    Go ahead and pull up the site and play around with it to see the functionality.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Please resist the temptation to look at the finished JavaScript file (for now).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of what you''ll see when you access the preceding URL
    and start playing the game:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67fb2064-b64e-41a5-9980-d9500f60521d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Pokémon game
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the HTML and CSS have been provided for you. You''ll be working in the
    `main.js` file: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/starter-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/starter-code).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: If you're not familiar with Pokémon, don't worry! The logic behind this game
    is basic. (If you *are* familiar with the games, forgive the simplified approach.)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we''ll be doing:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Query PokéAPI for all the Pokémon available.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the select list with the names of the Pokémon and the value of their
    API URLs, as provided by the API.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this is done, toggle the CSS property to show the player selections.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow each of the two players to select their Pokémon.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create functionality for each player to use their Pokémon's moves against the
    other.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decrement the other player's Pokémon hit points based on a random number generated
    from the maximum power possible.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the overlay with text stating that it's effective.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the move does not have the power attribute, display the overlay saying it's
    not effective.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When one Pokémon's hit points are `0` or lower, display the overlay that the
    opponent has fainted.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's break down the starter code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Starter code
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the starter code, piece by piece, as it introduces a
    new formulation of our JavaScript: classes! If you''re familiar with classes in
    Python or other languages, this ES6 introduction will come as a welcome reminder
    of the use of JavaScript. Let''s begin:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First of all, when declaring a class in JavaScript ES6, we simply create an
    object! Now, the details of the object *are* a little different than what we're
    used to, but many of the principles are the same. To create an instance of the
    class, we can say `const p = new Poke()` after finishing the class code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: After that, there is some syntactic sugar with classes, such as constructors,
    getters, and setters. Feel free to research classes in JavaScript, as it'll help
    you with the overall goal.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve given you the starter to a constructor, which is executed when you create
    an instance of a class:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What might you want in your constructor? Maybe you want references to often-used
    DOM elements or event handlers? Then, of course, the question arises: how do we
    *reference* the variables we''ve created?'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is `this`. When using a variable global to the class, you can preface
    it with `this.<variableName>` and it will be available to all methods. Here''s
    the great part: it''s not a pure global variable to our whole page, but just to
    our class! If you recall a few of the previous code examples, we didn''t handle
    that piece; here''s one way to do so:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Since each Pokémon has multiple moves that it learns at different points in
    the game, this is the logic for finding the moves available at the beginning of
    play. You won''t have to modify it, but take a look at the `.filter()` method
    of arrays. We didn''t cover it before, but it''s a useful method to know. MDN
    is a good resource: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part of the code we''re interested in is the **setter**:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A **setter** is a class method that handles setting or changing a member variable.
    Usually used with a **getter**, the concept allows us to abstract the logic of
    manipulation needed when changing (or retrieving) a variable. In this case, we''re
    using some game logic to see how to treat the hit points. But then we get into
    a new and wonderful idea: custom events.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Custom events
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `new CustomEvent()` directive, we can create a new, named event to
    use in our program. Sometimes, user interactions or page behavior don''t fully
    handle what we need. Custom events can help with that need. Notice in the preceding
    code that the `detail` object contains data to be passed with the event, and we
    use `document.dispatchEvent()` to send it to the event stream. Creating an event
    listener for a custom event is the same as doing so with a built-in event: use `.addEventListener()`.
    We''ll want to use the `doMove()` function.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Solution code
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How did you do with your attempt? You can take a look at one possible way of
    solving the lab here: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Remember, there are multiple ways to solve a programming problem, so if your
    solution doesn't match the provided approach, it's OK! The main idea is to solve
    the problem.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Handling asynchronicity
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we can see when using APIs, the asynchronous nature of Ajax calls for a
    couple of creative approaches. In our Pokémon game, we used a loading spinner
    while calls were completing; this is an approach you''ve seen all around the modern
    web. Let''s take a look at one example from the game:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All *this* part of the code is doing is toggling the visibility of a layer
    that contains a spinning image. This is all in the CSS (as it''s not technically
    an image, but rather a CSS animation). Let''s look at how it''s used:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we see that in our asynchronous Promise calls with `.then()`, we're toggling
    the loader when everything is complete! It's a nice little bundle. If you'd like
    a refresher on how to use `fetch` and Ajax calls in general, take a look back
    at [Chapter 4](d985ee47-411d-4ffa-bdd7-2d49fccc9b78.xhtml), *Data and Your Friend,
    JSON*, in the *API calls from the frontend – Ajax* section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with the inherently asynchronous nature of Ajax calls, it's important
    to keep in mind the fact that we don't know exactly when a call will return with
    its data—or even *if* it will return at all! We can make our code better with
    **error handling**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take a look at this code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We have some of the usual suspects here: a `fetch` call and `.then()` handling
    our results. Now, take a look at `new Error()` and `.catch()`. Just like in most
    languages, JavaScript has a way to explicitly throw errors, and `.catch()` at
    the end of our `fetch` chain will then present the error to the user in an alert
    box. It''s always best practice to include error handling in your Ajax calls in
    case the service you''re calling doesn''t respond, doesn''t respond in time, or
    sends back an error. We''ll discuss errors a bit more in [Chapter 9](2e099e56-1f9c-4329-a3ae-55c23f6bd7d3.xhtml),
    *Deciphering Error Messages and Performance Leaks*.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Star Wars API exploration Lab
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s get our hands dirty with some more Ajax calls. We''ll be using the popular
    **Star Wars API** (**SWAPI**): [https://swapi.dev/](https://swapi.dev/) . Take
    a few minutes to familiarize yourself with the documentation and how the API works.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we''ll be building:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ad5025a-4894-47ce-8f0c-07af48682c27.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Star Wars exploration
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment with the functionality at [https://packtpublishing.github.io/Hands-on-JavaScript-for-Python-Developers/chapter-7/swapi/solution-code/](https://packtpublishing.github.io/Hands-on-JavaScript-for-Python-Developers/chapter-7/swapi/solution-code/).
    Try to resist the temptation to peruse the solution code until after you've tried
    your hand at recreating the functionality.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what our code should do:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Display a loader on page load. This loader is provided for you as a CSS animation.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Call the `/people` SWAPI endpoint to retrieve all people in the API. *Hint:
    you will need to call SWAPI more than once to get all of the people.*'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the select list with the names of the people and hide the loader.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Go is clicked, make another call to SWAPI to retrieve details about the
    person chosen and display them (at least the name).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our approach will be to first populate the list and then prepare for user action,
    in order to explore both synchronously chained events and asynchronous action
    dependent on user input.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: The starter HTML and CSS shouldn't need to be altered, and our starter JavaScript
    file is nearly empty! Are you ready for the challenge? Good luck!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: A solution
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you look at the solution code, you'll find one way of creating this functionality.
    Let's break it down.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like in our Pokémon game, we''ll use a class. Its constructor will store
    a few various pieces of information, as well as add an event listener to the Go
    button:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, as we know we''ll be making multiple calls to SWAPI, we can make ourselves
    a helper function to facilitate this work. It may take four arguments: the SWAPI
    API URL, an array of previous results (useful if we''re paginating!), and Promise-like
    `resolve` and `reject` parameters:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This last line may be new. `…` is the spread operator and it expands an array
    into each of its parts. With this ES6 feature, we don''t need to iterate over
    an array in order to join it to another or do any other reassignment magic. We
    can simply explode the results and join them with the existing results:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In many APIs, if the dataset is large, only limited results will be returned,
    with a link for the next and previous pages of data. SWAPI''s nomenclature specifies
    that `.next` is the property to look for if there''s another page. Otherwise,
    we can return our results in our `resolve` function:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Don't forget error handling!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Try to read through `getPeople()` in its entirety to get a sense of what it
    does. Some of it is simple manipulation, but `new Promise()` is the core of this
    function. Instead of hardcoding page numbers to iterate over our API''s list of
    people, we''re creating a new Promise that uses our `fetchThis` function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In theory, we can use the same `fetchThis` function to get an individual person
    as well, once the button is clicked, but just for the sake of our example, this
    solution handles it all in one piece:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, all that's needed is to instantiate our class!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At this point, our program is complete and will run! Visit the page and you'll
    see our fully operational page. Emperor Palpatine thanks you for your help eliminating
    the rebel scum. We have seen the power of classes, event-based programming, and
    our ability to use events to our benefits.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned about events, their life cycle, and how event-driven design works.
    An **event** is triggered by an action by the user (or programmatically based
    on the program logic) and enters its **life cycle**. In the event life cycle,
    our program can pick up on many pieces of information carried by the **event object**
    itself, such as the mouse position or target DOM node.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: By understanding how Ajax works with events, you're well on your way toward
    becoming a fully fledged JavaScript developer. **Ajax** is incredibly important
    as its the conduit between JavaScript and external APIs. Since JavaScript is stateless
    and client-side JavaScript has no concept of sessions, it's important for Ajax
    calls to be **asynchronous** in nature; hence the introduction of tools such as
    `fetch`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We've covered a lot of very dense material. Next up are frameworks
    and libraries in JavaScript.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to gauge your understanding of events:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Which of these is the second phase of the event life cycle?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Targeting
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bubbling
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The event object provides us with which of the following? – Select all that
    apply:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The type of event triggered
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The target DOM node, if applicable
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The mouse coordinates, if applicable
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The parent DOM node, if applicable
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at this code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Which JavaScript features ae used in the preceding code? Select all that apply:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DOM manipulation
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Event delegation
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件委托
- en: Event registration
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件注册
- en: Style changes
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 样式更改
- en: What will happen when the container is clicked?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当容器被点击时会发生什么？
- en: '`box` will be visible.'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`box` 将可见。'
- en: '`#color` will be red.'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`#color` 将是红色。'
- en: Both 1 and 2.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1 和 2 都是。
- en: There is not enough context.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有足够的上下文。
- en: In which phase of the event life cycle do we typically take action?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件生命周期的哪个阶段我们通常采取行动？
- en: Targeting
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标
- en: Capturing
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获
- en: Bubbling
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冒泡
- en: Further reading
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*JavaScript: Understanding DOM Event Life Cycle*: [https://medium.com/prod-io/javascript-understanding-dom-event-life-cycle-49e1cf62b2ea](https://medium.com/prod-io/javascript-understanding-dom-event-life-cycle-49e1cf62b2ea)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JavaScript: 理解 DOM 事件生命周期*: [https://medium.com/prod-io/javascript-understanding-dom-event-life-cycle-49e1cf62b2ea](https://medium.com/prod-io/javascript-understanding-dom-event-life-cycle-49e1cf62b2ea)'
- en: 'w3schools.com – JavaScript events: [https://www.w3schools.com/js/js_events.asp](https://www.w3schools.com/js/js_events.asp)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'w3schools.com – JavaScript 事件: [https://www.w3schools.com/js/js_events.asp](https://www.w3schools.com/js/js_events.asp)'
- en: 'MDN – event reference: [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MDN – 事件参考: [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events)'
