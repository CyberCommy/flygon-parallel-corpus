- en: Building the API - Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is meant to introduce the students to API building using Node.js.
    We will start by building a basic HTTP server to gain an understanding of how
    Node.js works.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement a basic HTTP server using the Node.js built-in `http` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a basic Hapi.js setup for an API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the basic HTTP verbs and how they differ from each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement various routes for the API, making use of the different HTTP verbs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement logging the web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating API requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Basic HTTP Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by looking at the basic building blocks of a Node.js web application.
    The built-in `http` module is the core of this. However, from the following example,
    you will also appreciate how basic this can be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the following code in a file called `simple-server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use the `simple-server.js` file for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we go to the browser and visit the URL in the example, this is what we
    get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up Hapi.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hapi.js** (**HTTP API**), is a rich framework for building applications and
    services, focusing on writing reusable application logic. There are a number of
    other frameworks; notable among them is Express.js. However, from the ground up,
    Hapi.js is optimized for API building, and we will see this shortly when building
    our application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1: Building a Basic Hapi.js Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we're going to build a basic HTTP server like the one before,
    but now with Hapi.js. You will notice how most of the things are done for us under
    the hood with Hapi.js. However, Hapi.js is also built on top of the `http` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the rest of the exercises, from the first exercise of [Chapter 3](part0060.html#1P71O0-12af9adc04d045258c0a537819d419dc),
    *Building the API – Part 2*, we will be building on top of each exercise as we
    progress. So, we might need to go back and modify previous files and so forth:'
  prefs: []
  type: TYPE_NORMAL
- en: In your `Lesson-2` folder, create a subfolder called `hello-hapi`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `exercise-b1` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: On the Terminal, change directory to the root of the `hello-hapi` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize it as a basic Node.js project and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a file, `server.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Hapi.js by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the file, write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-b1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try to understand the code:'
  prefs: []
  type: TYPE_NORMAL
- en: We first start by requiring the Hapi.js framework that we just included.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recall our subtopic, *The Module System*, in [Chapter 1](part0019.html#I3QM0-12af9adc04d045258c0a537819d419dc),
    *Introduction to Node.js?* We looked at third-party modules—this is one of them.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a server by initializing the Server class, hence a new `Hapi.Server()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then bind that server on a specific host (`localhost`) and port (`8000`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, we create an example route, `/`. As you can see, for each route
    created, we have to specify three major things (as keys of an object passed to
    the `server.route` method):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: This is the HTTP method for that route. We''re going to look more
    deeply at the types of HTTP verbs in a later section. For our example, we''re
    using GET. Basically, as the name suggests, this gets stuff/resources from the
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: This is the path on the server to the particular resource we are getting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handler`: This is a closure (anonymous function) that does the actual getting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're going to look at another extra key, called `config`, in our main project.
  prefs: []
  type: TYPE_NORMAL
- en: After this setup is done, we then start the server using the `server.start`
    method. This method accepts a closure (callback function) that is called once
    the server has started. In this function, we can check whether any errors occurred
    while starting the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the server by going to the Terminal, and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see this printed on the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to this at `http://localhost:8000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open another Terminal, change directory to the same project folder, and run
    the same command, `node server.js`. We''ll get this error: `Error: listen EADDRINUSE
    127.0.0.1:8000`.'
  prefs: []
  type: TYPE_NORMAL
- en: The reason we get this error is because we can only have one server running
    on a particular port of our host. Remember that the host IP `127.0.0.1` is what
    we refer to as `localhost`.  `if (err) throw err;` is the line which throws the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can fix this by changing the port number of our second server to something
    like `8001`. However, as best practice, other than keep changing the code, we
    can pass the port number as a Terminal argument, that is, running the app as,
    `node server.js <port-number>`, then changing our code (in the `port` section)
    to, `port: process.argv[2] || 8000,`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''re saying, if the port is provided as the first argument of the script,
    use that, otherwise, use `8000` as the port number. Now, when you run: `node server.js
    8002`, the server should run okay from `localhost:8002`.'
  prefs: []
  type: TYPE_NORMAL
- en: For the `process.argv` array, index `0` is the program running the script, node
    and index `1` is the script being run, `server.js`. Arguments passed to the script
    are therefore counted from index `2` onwards. You can read more about `process.argv`
    here later on.
  prefs: []
  type: TYPE_NORMAL
- en: Using an API Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For us to utilize the client to the fullest, to be able to do all the request
    types (`GET`, `POST`, `UPDATE`, and so on), we will need to have an API client. There
    are a number out there, but we recommend either Postman ([https://www.getpostman.com/](https://www.getpostman.com/))
    or Insomnia ([https://insomnia.rest/](https://insomnia.rest/)). For our examples,
    we will be using Insomnia.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Insomnia, add a GET request to `http://localhost:8000`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by creating a *request* page for Insomnia, where we will be making
    all of our requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a name for the new request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then make our request by typing the route and clicking on Send:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When we change the type from GET to POST, and click on Send, we get a 404 error
    because, on our server, we currently have only the GET method defined for route
    `/`.
  prefs: []
  type: TYPE_NORMAL
- en: Returning JSON Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are now building our API, we need a formal way of representing our data
    in our request, by sending or receiving it. **JavaScript Object Notation** (**JSON**)
    is the conventional data-interchange format for REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note about JSON is that it started from JavaScript and is now widely
    adopted across other languages. So, when it comes to Node.js, you will see how
    using JSON becomes so easy and natural.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Returning JSON'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go back to our `server.js` file from *Exercise 1*, *Building a Basic Hapi.js*
    *Server*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `exercise-b2` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To return JSON for our `/` route, all we need to change is our returned string
    to an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the server by going to the Terminal where the server is running and pressing
    *Ctrl* + *C*. Then, start the server again to effect the changes by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go back to Insomnia and do another GET request. You can see that this is
    effectively changed into a JSON string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This comes out-of-the-box in Hapi.js, while with some frameworks, such as Express.js,
    you have to use a `json` function to do the conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Using nodemon for Development Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have noticed that, after making the changes in first exercise, we had
    to go back and stop the server and start over again. Doing this every time you
    make a change to your code becomes very cumbersome. Luckily, tooling comes to
    our rescue.
  prefs: []
  type: TYPE_NORMAL
- en: There is a Node.js package called `nodemon`, which can help restart the server
    automatically whenever there is a change in our files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Using nodemon'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to introduce a Node module known as `nodemon`,
    which we will be using to run our web server. This makes it possible for the server
    to automatically reload when we make changes to it, therefore avoiding the tediousness
    of stopping the server and starting it over again manually whenever we make changes
    to our server:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Terminal and stop the server (press *Ctrl + C*), then run the
    following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need to install this package globally (remember that you might need
    some administrative rights, so in Unix systems, you need to run the command as
    `sudo`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installation is complete, we can run with `nodemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the Logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is a very important component of any web application. We need a way
    of preserving the history of the server so that we can come back any time and
    see how it was serving requests.
  prefs: []
  type: TYPE_NORMAL
- en: And, most of all, you don't want logging to be an afterthought, only being implemented
    after you come across a production bug that makes your web app crash when you
    are trying to figure out where the problem is exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Hapi.js has a minimal logging functionality built in, but if you need an extensive
    one, a good example is called **good** ([https://github.com/hapijs/good](https://github.com/hapijs/good)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Setting up the Logger'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to add a logging mechanism on the web server
    we have created, so that each request and server activity can be easily tracked
    through the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to our project from *Exercise 2: Returning JSON*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `exercise-b4` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first need to install a couple of packages that will help with our logging
    (`good` and `good-console`). Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`good-console` is what we call a write stream. There are other write streams
    that work with good, but, for simplicity, we won''t look at them. You can check
    [https://github.com/hapijs/good](https://github.com/hapijs/good) for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then modify our `server.js` code to configure our logging. First, by
    requiring good just after Hapi.js:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, registering it with the server just before we start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-b4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are still running the server with `nodemon`, by now, you will start
    seeing the server logs being updated periodically on the Terminal; something similar
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back to Insomnia and try to do another GET request on `localhost:8000/`.
    You will see an extra log has been created showing the time the request was made
    (`timestamp`), the route, the method (`get`), the status code (`200`), and the
    time taken for the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The time taken comes in very handy when you are trying to optimize the performance
    of your server, seeing which requests take longer than expected to be served.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at the concept of request and the different HTTP request methods.
  prefs: []
  type: TYPE_NORMAL
- en: A Look at HTTP Request Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having set up our server, we are ready to start building our API. The routes
    are basically what constitute the actual API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first look at HTTP request methods (sometimes referred to as *HTTP
    verbs*), then apply them to our API using a simple *todo list* example. We will
    look at five major ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: Requests a representation of the specified resource. Requests using
    `GET` should only retrieve data, and should not be used to make changes to resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: Is used to submit an entry to a specified resource, often causing a
    change of state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: Replaces all current representations of the target resource with the
    request payload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: Deletes the specified resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: Used to apply partial modifications to a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following exercises, we're going to rewrite our previous code where we
    had hardcoded our data so that we can work with real and dynamic data coming directly
    from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5: Getting a List of Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go back to the project from *Exercise 4: Setting up the Logger*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are going to have various routes, it would be prudent to now split
    our routes to a separate file for the sake of organization. Within the project,
    create a subfolder called `routes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the created folder, create a file called `todo.js`. In `todo.js`, this
    is where we are going to have all our routes for the `todo` resource. This file
    (module) will export a list of routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start by doing a simple route that returns a list of todos on a `GET`
    request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then go back to our `server.js` file, require the `todo` route module, and
    register it with our server using the `server.route` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Use the `server.js` file for your reference at `Code/Lesson-2/exercise-c1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Insomnia, do a `GET` request to `http://localhost:8000/todo`. You should
    see this returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 6: Getting a Specific Resource'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's try and get a specific todo. Since we don't have a database with
    IDs, we will take the indices to be IDs, `[0]` being `1`, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a route for that. Notice that we use `{<parameter-key>}` as a way
    of passing request parameters to our `route` function, then get it through `request.params.id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/L``esson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Insomnia and do a `GET` request to `http://localhost:8000/todo/1`. You
    should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 7: Creating a New Todo with POST'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add a new todo. This is where `POST` comes in. A `POST` request
    should always come with a payload which is the data that is being *posted*. We
    will add a new route to handle this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Insomnia:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the request type to POST:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the request body to JSON:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the request body and the URL appropriately:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you post the request, you should see this as the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you do a `GET` request to `http://localhost:8000/todo`, you should
    see the newly created todo appear as part of the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 8: Updating a Resource with PUT'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we wanted to update, say, the first todo list, conventionally, `PUT` requires
    us to send the whole updated todo resource. Now let''s create a `PUT` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to Insomnia and make the request. Remember to change the request type
    to PUT:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And when you do a `GET` on `http://localhost:8000/todo/1`, you should get the
    updated resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 9: Updating with PATCH'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will realize that, in our previous exercise, we had to post the whole resource
    just to change a part of it. A better way of doing this is using `PATCH`, so that
    the payload only contains what is required. Let''s now create a `PATCH` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can provide any of the keys and their values, and they will be updated
    respectively. For example, make the following request, only changing the title
    of the first todo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should get the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And when you do a `GET` on `http://localhost:8000/todo/1`, you should get the
    updated resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exercise 10: Deleting a Resource with DELETE'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we want to delete a resource, we use the `DELETE` method. Let''s create
    a `DELETE` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Use the `exercise-c1` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to Insomnia and test it—you should get this response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now try accessing the previously deleted resources—you should get a `404` error.
    However, in our previous `GET` route (in *Exercise 6: Getting a Specific Resource*),
    we did not cater for this, so let''s go and make a modification to our `GET: /todo/{id}
    route`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the status code, `404`, if you have never come across it.
    We are going to go through the major status codes in our last subsection of this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the server will reload this time, therefore, the deleted resource
    will still be brought back, so go back and repeat *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you now do a `GET` request to `http://localhost:8000/todo/1`, you should
    see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Short Closing Note on Insomnia
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to access all your previous requests under History. Click
    on the Time icon in the top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: Request Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to validate the incoming requests to make sure that they conform
    to what the server can handle.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the places I see Hapi.js shining above other frameworks. In Hapi.js,
    you hook in validation as a configuration object as part of the `route` object.
    For validation, we will use the Joi library, which works well with Hapi.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Validating a Request'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to see the concept of *request validation* in
    action. We will write a validation for one of the routes as an example, but the
    same could be applied across the other routes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we go back to the `POST` route from *Exercise 1: Building a
    Basic Hapi.js Server*, we can post an empty payload and still get status code
    `200!` Clearly, we need a way of validating this.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start by installing Joi:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Use the `exercise-c2` folder for your reference at `Code/Lesson-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes/todo.js` file, we need to require Joi and then modify our post
    route by adding a `config.validate` key to the `route` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Use the `todo.js` file for your reference at `Code/Lesson-2/exercise-c1/routes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we try to submit an empty payload, we now get error `400`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That is, until we provide a title for the todo, since a title is required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Joi is a full-fledged validation library with many options for how to use it.
    In this exercise, we just touched on a basic example.
  prefs: []
  type: TYPE_NORMAL
- en: 'You validate any part of the request by coming up with the respective key/value
    pair within the validate key and its respective type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`payload` (for request payloads, as in the preceding exercise), `params` (for
    request params), and `query` (for query params).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for the request, `GET: /todo/:id`, if we want to validate that
    the ID is an integer, we will add this `config` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config: {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  validate:'
  prefs: []
  type: TYPE_NORMAL
- en: '{`'
  prefs: []
  type: TYPE_NORMAL
- en: '`    params:'
  prefs: []
  type: TYPE_NORMAL
- en: '{`'
  prefs: []
  type: TYPE_NORMAL
- en: '`      id: Joi.number()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`    }`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  }'
  prefs: []
  type: TYPE_NORMAL
- en: '}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'More details on Joi can be found here: [https://github.com/hapijs/joi](https://github.com/hapijs/joi).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered initial part of building our API with Node.js. We started
    by looking at a basic HTTP server built with only the built-in HTTP module, for
    us to appreciate the basic building blocks of a Node.js web application. We then
    introduced doing the same thing with the Hapi.js framework.
  prefs: []
  type: TYPE_NORMAL
- en: We then went through various HTTP verbs (request methods) by example as we built
    our basic API with Hapi.js. Those were `GET`, `POST`, `PUT`, `PATCH`, and `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered some fundamental concepts of web applications, such as logging,
    using good and request validation, and using Joi.
  prefs: []
  type: TYPE_NORMAL
