- en: Automating Tests in DevOps
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss automating tests in DevOps workflow to accelerate
    time to production, reduce the loss of delivery risks, and detect service anomalies
    using known test automation tools on Kubernetes. After following the recipes in
    this chapter, you will have gained the skills to prevent known defects as well
    as quickly find new defects to reduce service downtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building event-driven automation with StackStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating tests with the Litmus framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Chaos Engineering with Gremlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating your code review with Codacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting bugs and anti-patterns with static code analysis with SonarQube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting license compliance issues with Fossa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this section assume that you have a functional Kubernetes cluster
    deployed by following one of the recommended methods described in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),
    *Building Production-Ready Kubernetes Clusters*.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes command-line tool, `kubectl`, will be used for the rest of the
    recipes in this chapter, since it's the main command-line interface for running
    commands against Kubernetes clusters. We will also use `helm`, where Helm charts
    are available to deploy solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Building event-driven automation with StackStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: StackStorm is an open source, event-driven automation platform. Using the GitOps
    approach, it helps run workflows based on events. In this section, we will perform
    arbitrary automation or remediation tasks using StackStorm on Kubernetes. You
    will learn how to deploy StackStorm in a highly available configuration on Kubernetes
    using Helm charts and get started by deploying examples of rules, custom sensors,
    actions, and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready, as well as `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing StackStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the StackStorm UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the st2 CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing StackStorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although StackStorm can be distributed as a **Red Hat Package Manager**/**Debian** (**RPM/Deb**)
    for Linux systems and as Docker images, if you plan to run business-critical automation
    tasks, it is recommended to deploy StackStorm **High Availability** (**HA**) cluster
    on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to deploy StackStorm on Kubernetes by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Helm repository to your list of local charts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the StackStorm HA cluster using the Helm chart. The following command
    will deploy StackStorm and its dependencies, such as MongoDB and RabbitMQ:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The installation process may take 2 to 3 minutes. Confirm that the release
    has been deployed and running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have StackStorm running in our cluster. Next, we will access the UI
    or use the CLI to interact with StackStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the StackStorm UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The StackStorm Helm installation assumes you are running in a single-node Minikube
    cluster and the instructions provided alongside it serve smaller deployments.
    We are running StackStorm on a large cluster with multiple nodes. We will expose
    the web server externally to access the StackStorm UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create a cloud load balancer so that
    we can access the StackStorm web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a load balancer. The following command will create a load balancer through
    your cloud provider and expose the web service on port `80`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the external service IP. In the following example, we have used a Kubernetes
    cluster deployed on AWS. Although the output might be different, the following
    command should result in the same on other platforms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the external IP address from *step 2* in a browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/382d6ba1-2aed-4fba-823a-da54c0538663.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in with the necessary credentials, that is, username as `st2admin` and
    password as `Ch@ngeMe` :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bdb8e23f-31ad-4623-b704-07a929792614.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you have access to the `StackStorm` interface. Now, we will click on the
    menu items and explore the actions before we create our first rule in the *Defining
    a rule* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using the st2 CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The StackStorm web interface is useful if we want to get familiar with the
    product, but, if you are going to use StackStorm in production, you need to learn
    the CLI commands. Now, perform the following steps to access the st2 CLI from
    the pod:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the st2 client''s pod name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following commands via the st2 CLI. This command will execute the
    `st2 --version` command from the pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Authenticate to StackStorm using the following CLI command and save the password
    using the `-w` parameter. If you don''t want to save the password, then you can
    remove the `-w` parameter at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'List the available actions from the core pack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'List the actions from the core pack. You can also try the other pack options
    for Linux, ChatOps, and packs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All StackStorm CLI operations are available via REST API, Python, and JavaScript
    bindings. You can find more information at the *StackStorm CLI and Python Client*
    reference link in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'StackStorm uses rules to run available actions when events occur. StackStorm
    comes with default actions and the catalog of actions can be increased by adding
    new actions from the community. Follow these steps to create your first rule:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules are created in a familiar YAML format and consist of three sections:
    trigger, criteria, and action. Before we create the rule file, we will get familiar
    with the available triggers we can use in our rule. Use the following command
    to list the available triggers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the details of the webhook trigger. The following command will return
    the description, parameters, and payload schema for the trigger. Review `parameters_schema`
    since we will use this in our example rule later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command to list the available actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the details of the `core.local` action. This action executes an arbitrary
    Linux command on the localhost. The following command returns the parameters it
    can take, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use the preceding trigger and action in a rule, and set up a webhook
    to listen to the URL at `https://{host}/api/v1/webhooks/sample` using the following
    rule and create a `first_rule.yaml` file. Once you''ve done this, copy the file
    into the container. The action will be triggered when a POST request is made to
    this URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to find and use available actions and triggers
    to construct a rule. Next, we will learn how to run it in StackStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'StackStorm rules can be deployed through its UI, a CLI, or APIs. In this recipe,
    we will use the rule we defined previously and deploy it using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the rule using the YAML file we created in the *Defining a rule* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'List the rules and confirm that the new rule has been created. You should see
    the `examples.sample_rule_with_webhook` rule on the list, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With the new rule we created here, the webhook has started to listen on `https://{host}/api/v1/webhooks/sample`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'StackStorm documentation: [https://docs.stackstorm.com/install/k8s_ha.html](https://docs.stackstorm.com/install/k8s_ha.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StackStorm CLI and Python client: [https://docs.stackstorm.com/reference/cli.html](https://docs.stackstorm.com/reference/cli.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StackStorm examples: [https://github.com/StackStorm/st2/tree/master/contrib/examples](https://github.com/StackStorm/st2/tree/master/contrib/examples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating tests with the Litmus framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Litmus is an open source toolset that's used to run chaos experiments in Kubernetes.
    Litmus provides the Chaos **Central Registration Depository** (**CRD**) for cloud-native
    developers and SREs to inject, orchestrate, and monitor chaos to find potential
    weaknesses in Kubernetes deployments in real time in production. In this section,
    we will run some of these chaos experiments to validate the resiliency of the
    systems. You will learn how to build pipelines for CI and end-to-end testing in
    order to validate and certify the new Kubernetes version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to be able
    to use the manifest files under the `chapter4` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Litmus Operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Chaos Charts for Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a container kill chaos experiment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing chaos experiment results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing chaos experiment logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Litmus Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Litmus Chaos Engineering tool can be installed using the Helm chart. Books
    are defined as Kubernetes jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to install Litmus in our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Litmus Chaos Operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the Litmus Chaos Operator pod is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the cluster role and cluster role bindings have been applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have the Litmus Chaos Operator running in our cluster. Next, we need
    to deploy chaos experiments to test the resiliency of our cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: Using Chaos Charts for Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to workload Helm charts, Litmus Chaos Charts are used to install chaos
    experiment bundles. Chaos experiments contain the actual chaos details. In this
    recipe, we will learn how to list chaos experiment bundles and download the Kubernetes
    chaos experiment bundle. Let''s perform the following steps to install Chaos Charts
    for the Litmus Operator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Chaos Charts for Kubernetes website at [https://hub.litmuschaos.io](https://hub.litmuschaos.io) on
    your browser and search for `generic` in the search field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/074a4479-ee38-4275-8378-df1d490ab7b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Generic Chaos chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7a88f04a-0fc5-4cb9-8fb9-b5f5cbb7adfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Install All Experiments button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aa72455b-1acd-4e71-b980-5126ff4aa353.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the chaos experiment manifest link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/27dab233-8a97-425d-ae69-20c5a57d3064.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the chaos experiment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the list of chaos experiments that have been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Chaos experiment scenarios such as pod delete, network latency, network loss,
    and container kill are available under generic Chaos Chart. You can also install
    or build your own application-specific Chaos Charts to run application-specific
    Chaos.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pod deletion chaos experiment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chaos experiments bundle the reproducible chaos situations in order to run
    them as a Kubernetes job. In this recipe, we will deploy an example application
    and use a Kubernetes chaos experiment on the application. Let''s perform the following
    steps to test the impact of pod deletion in our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy a sample application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods and confirm they are running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Annotate the deployment for chaos using `litmuschaos.io/chaos="true"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `ServiceAccount` for the chaos executor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a cluster role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `ClusterRoleBinding`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the experiment CRs to view the chaos parameters. In this case, let''s
    review the `pod-delete` and `container-kill` experiments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Chaos Engine using the preceding two experiments you''ve reviewed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to create chaos experiments based on predefined
    Chaos Charts.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing chaos experiment results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chaos experiments are executed as Kubernetes jobs and affected pods will be
    taken down by the chaos executor based on the experiment definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to review the results of our chaos experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch the experiment in progress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the list of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'View the `engine-nginx-container-kill` experiment results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'View the `engine-nginx-pod-delete` experiment results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we have tested and reviewed a simple scenario. You can combine
    existing Chaos Charts to create your experiments and write your application chaos
    experiments using the Litmus framework.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing chaos experiment logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Logs are always collected and stored by the standard Kubernetes logging frameworks
    that are used on your cluster. In cases where you need to review them quickly,
    you can use access to the `kubelet` logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to take a deeper look at the tasks that
    are executed during the chaos experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the list of pods that were created by the completed jobs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'View the logs using the `kubectl logs` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Inside the logs, you will be able to see the individual tasks that have been
    executed and the summary of passed or failed tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly run a predefined chaos experiment on your
    applications running on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Litmus experiments can be easily created from scratch and integrated into an
    application developer's CI pipeline, post the build and unit/integration test
    phases, to test chaos behavior on Kubernetes clusters.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Running a Litmus chaos experiment* recipe, in *step 8*, we created a
    Chaos Engine to test a pod delete experiment, followed by a container kill experiment.
    These two experiments use Chaoskube, a tool that periodically kills random pods
    in your Kubernetes cluster, and Pumba, a chaos testing and network emulation tool,
    as the end injectors of chaos.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Litmus documentation: [https://docs.litmuschaos.io/](https://docs.litmuschaos.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaos Charts for Kubernetes: [https://hub.litmuschaos.io/](https://hub.litmuschaos.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaoskube project: [https://github.com/linki/chaoskube](https://github.com/linki/chaoskube)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pumba project: [https://github.com/alexei-led/pumba](https://github.com/alexei-led/pumba)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Chaos Engineering with Gremlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gremlin is a Chaos Engineering service that prevents outages and builds more
    reliable systems. In this section, we will run chaos attacks in production to
    validate the resiliency of the systems using Gremlin. You will learn how to create
    CPU and node shutdown attacks to test the resiliency of your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the Kubernetes command-line tool, `kubectl`,
    and `helm` installed.
  prefs: []
  type: TYPE_NORMAL
- en: All the operations mentioned here require a Gremlin account. If you don't have
    one, go to [https://app.gremlin.com/signup](https://app.gremlin.com/signup) and
    create one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Gremlin credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Gremlin on Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CPU attack against a Kubernetes worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a node shutdown attack against a Kubernetes worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running predefined scenario-based attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Gremlin from your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Gremlin credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To connect to Gremlin services from our Kubernetes cluster, we will need to
    store our Gremlin credentials as a Kubernetes Secret.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to configure our Gremlin credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Gremlin service at [https://app.gremlin.com/](https://app.gremlin.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the account menu, click on Company Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/794d46cb-8b1c-4675-8c68-4f26e2617da5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Teams tab and select your team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4ee82349-d40b-4f9c-89cf-8c90c06affde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Configuration tab and download your certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/933d24e2-107c-4ece-8781-1a26f4da82c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the `certificates.zip` file to your host where kubectl has been configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Rename the certificate files accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Secret resource in your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have converted our credentials into secret resources in Kubernetes.
    This secret will be used later to connect Gremlin to our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gremlin on Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to install Gremlin on Kubernetes is by using Helm charts. Make
    sure you have created a gremlin team cert secret, as described in the *Setting
    up Gremlin credentials* recipe, before you proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to install Gremlin using Helm charts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Gremlin Helm repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Gremlin client using your Team ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Gremlin will create a DaemonSet that will run on every node in your cluster.
    Validate that the `DESIRED` and `AVAILABLE` pods are equal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Gremlin is running in your cluster. Next, we need to trigger some chaos through
    our Gremlin account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CPU attack against a Kubernetes worker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gremlin can generate various infrastructure attacks that impact cores, workers,
    and memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to attack the CPU:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy a sample application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods and confirm they are running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the node name for one of the pods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Watch the `pods` status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Attacks menu, click on Infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the New Attack button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e40e57d4-614e-47f0-be8e-fa039ca69b71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the Choose Hosts to target tab, pick the node''s local hostname from *step
    3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the Choose a Gremlin tab, click on Resource, select CPU attack, set CPU
    Capacity to `90`, and consume all CPU cores:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/31115d3a-9a9d-45f1-a6e5-2fe190110aa2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Unleash Gremlin to run the attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1099dbdf-581d-4eac-ae0a-ae09c3c2fb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the actions you triggered on your Gremlin account will be executed on your
    cluster through the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a node shutdown attack against a Kubernetes worker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gremlin can generate various infrastructure attacks that impact cores, workers,
    and memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to attack the CPU:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Attacks menu, click on Infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the New Attack button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f724579e-d94b-46af-8e70-72c3758445e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Under the Choose Hosts to target tab, pick the node's local hostname*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the Choose a Gremlin tab, click on State and select Shutdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8654fec7-3242-477e-aff4-76120b1a2831.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Unleash Gremlin to run the attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/45e7cfbb-60d4-496a-b83b-d1814421ef36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Get the pods on the node we executed a Shutdown attack on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that the pods are restarted.
  prefs: []
  type: TYPE_NORMAL
- en: Running predefined scenario-based attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gremlin chaos scenarios help bundle attacks together to generate real-world
    outage scenarios. In this recipe, we will learn about the predefined scenarios
    that we can use to validate how our system responds to common failures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to validate autoscaling:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Scenarios menu and review the Recommended scenarios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c80cdd9a-7877-49ee-9a7e-340aefcacaad.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure autoscaling is enabled on your Kubernetes cluster and select the Validate
    Auto-Scaling scenario.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add targets and run button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9eb70ad7-72a5-4f1e-baf7-9cc5aff2b8ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Run Scenario to execute the attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, Gremlin will execute a CPU attack on the existing nodes to put
    pressure on the cluster, which should ideally trigger the autoscaling feature
    of the cluster to reduce CPU pressure.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting Gremlin from your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to remove the components of Gremlin from
    your Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the Gremlin Helm releases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the Helm release using the release name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Helm will remove the release from your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly run a predefined chaos attack on your
    worker nodes where applications are scheduled to run by Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that, although we were looking for the impact on specific pods
    in the *Creating a CPU attack* and *Creating a node shutdown attack* recipes,
    the whole node was under attack, so the other pods on the node were also impacted.
  prefs: []
  type: TYPE_NORMAL
- en: Especially in small clusters, it is suggested to limit your blast radius and
    start targeting a single container of a pod. This can be done using network latency
    attacks and by specifying the ports that are relevant to the containers you wish
    to see the attack work on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gremlin documentation: [https://www.gremlin.com/docs/](https://www.gremlin.com/docs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating your code review with Codacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Codacy to automate code reviews without having
    to make any additional code changes to our repositories and generate notifications
    on code quality and security issues. You will learn how to automate one of the
    most underestimated tasks when it comes to the development of code reviews and
    checks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require a Codacy account. If you don't have
    one, go to [https://www.codacy.com/pricing](https://www.codacy.com/pricing) and
    create one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Project Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing commits and PRs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing issues by category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Codacy badge to your repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Project Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to access the Codacy Project Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Codacy at [https://app.codacy.com](https://app.codacy.com), which
    will bring you to your Organization Dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Projects on the left menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bf3bf3d6-a316-43dd-a669-2930b1d02b9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on a specific project to get to the project view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c3e8759b-d9e1-4c1f-9d6c-0736efa25a6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Find the Project grading option on the Project Dashboard. In our example, the
    following project has been graded A:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/591c1a99-8e12-4283-8905-36aa29d8ea71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Find the Quality evolution graph and view the comparison of the number of issues
    versus industry average. If your average is higher than the industry standard,
    you need to review the commit and reduce the number of issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/da1e4e8e-d9d7-4631-adc0-f39d58e98ecc.png)'
  prefs: []
  type: TYPE_IMG
- en: Reviewing commits and PRs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to review code commits on the Codacy Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Project Dashboard, click on the Commits menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the master branch from the drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9589db08-42df-4956-a087-8c46037a0028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the commit list, find one of your commits with new issues marked in red:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/79fc51b6-2a51-4300-9172-8c54c4d94aa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on a Commit to view its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02a7da08-b5e9-4f57-9924-6d0fa5a9f6b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Implement the suggested fixes to clear the issues or open a GitHub issue for
    the developer team to fix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the Open Pull Requests menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0009aa88-250a-4bfb-8c29-b46aa20b70a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat *steps 3* to *5* to review the issues and recommended solutions to clear
    them before the code is merged. This will improve code quality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing issues by category
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all issues are the same and require the same amount of work to be fixed.
    Most of the time, security issues should be the top concern and code styles should
    be an ongoing engineering effort so that they're fixed with improving internal
    review processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to see the issue breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [https://app.codacy.com](https://app.codacy.com), which will bring
    you to your Organization Dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Projects on the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project to analyze.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the Dashboard until you see the Issues breakdown chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/05d192b6-348e-462d-a0aa-766f4e57ae6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on a category with issues and use the provided information on issues
    in code reviews:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/30da5aa3-1ab6-4667-8e0c-641982c2104a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are peer-reviewing or checking your own code, you can filter issues from
    an author by clicking on the All authors filter and changing it to a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a Codacy badge to your repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Badges are used to represent the high-level project status and its stability
    to the users coming to your repository or website. Since Codacy can show the quality
    of your code, it is definitely something you may want to display on your repository
    in the `README.MD` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to add a Codacy badge to your GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [https://app.codacy.com](https://app.codacy.com), which will bring
    you to your Organization Dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Projects on the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project to analyze.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Badge icon next to your project name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/90edb601-3b2d-45e6-b45e-55859a966efc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add badge to repository to create a **Pull Request** (**PR**) to your
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1f1fc376-4269-4b49-9e6e-7c69a2b72470.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Review the content of the PR and merge it. Once it''s been merged, you will
    see the code quality score on your repository Overview page, similar to what''s
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02ae694a-70df-4824-bf38-6e1af7b2146d.png)'
  prefs: []
  type: TYPE_IMG
- en: Badges are used to highlight important tests and information for your repository
    visitors.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Codacy documentation: [https://support.codacy.com/hc/en-us](https://support.codacy.com/hc/en-us)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting bugs and anti-patterns with SonarQube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SonarQube is a popular development tool that is used in software development to
    catch bugs and vulnerabilities in your applications. In this section, we will learn
    how to automate static code analysis to detect bugs and anti-patterns that you
    can use in your CI/CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation in order to
    use the manifest files under the `chapter4` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing SonarQube using Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the SonarQube Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new user and tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Quality Profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing issues by category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a SonarQube badge to your repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding marketplace plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting SonarQube from your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SonarQube using Helm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SonarQube is a leading open source solution for code quality and security analysis for
    adopting code quality in your CI/CD. It can be installed as a standalone solution
    from binaries. In this recipe, we will install it on a Kubernetes cluster using
    Helm charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to get SonarQube up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Install SonarQube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Validate that the PostgreSQL and SonarQube pods are ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to get SonarQube deployed on the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the SonarQube Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When installed using Helm charts, SonarQube creates a load balancer and exposes
    an external IP to connect. We will discover the IP first and connect to the SonarQube
    Dashboard using the service IP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to expose SonarQube through a cloud load
    balancer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the SonarQube load balancer''s external IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the address in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/36260514-727f-4af3-8267-39f8839b43af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Log in and use `admin` as both your username and password to log in
    to the Dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0d8f8fd0-fb1c-4c64-96e1-828092bc03b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the account profile logo on the top right of the screen and select
    My Account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cc5610be-284b-4dfd-9f39-64f8c56fc9f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Security tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/04ca34f6-5c10-4de0-b13c-ffc6e405ea46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the default admin password and save it by clicking the Change password
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/60f76082-67d7-4901-b9ca-147bab506b75.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the service port is accessible externally, it is important to change the
    default credentials of SonarQube.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new user and tokens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Team members need to have their own user accounts to access the Dashboard. It
    is recommended that you generate tokens in order to manage accounts. You can use
    them to run analyses or invoke web services without needing to access the user's
    actual credentials. This way, your analysis of the user's password does not go
    through the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create new users that can access SonarQube:'
  prefs: []
  type: TYPE_NORMAL
- en: From the top menu, click on Administration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Security tab and select Users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/85a4749a-ca0b-440b-afcf-d83e20c1f1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Create User button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c8aca861-3cc9-4462-9bd0-6dc99faab8a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the Name, Email, and Password of the user and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/560ef3fc-9d3a-4871-90f2-c95ec777dfab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Users table, click the Update Tokens button under the Tokens column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/82f4fd57-8fbb-40e2-95e9-a1a1e70e0b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Set a token name and click on the Generate button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you copy the token and take note of it for the upcoming recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling quality profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to analyze a project, first, you need to install specific programming
    language plugins. Let's perform the following steps to install Java plugins that
    we'll use in the next recipe, *Adding a project:*
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Quality Profiles. If you see a message saying There are no languages
    available, then you need to install the language plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3ea230ee-85b1-4073-8190-a48dd7370d1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Administration menu and switch to the Marketplace tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Marketplace search field, search for the language you would like to
    enable. For this recipe, this is `java` :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/52a72ec6-ccc5-47b4-bf5a-1518a9c36089.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add **Adobe Experience Manager** (**AEM**) rules for SonarQube, Checkstyle,
    Findbugs, Java i18n rules, **Programming Mistake Detector** (**PMD**), and SonarJava
    plugins by clicking on the Install button next to the respective plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d78db616-67d9-4122-8eaa-5c4a003ee7ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This action requires a restart. Click on Restart Server and log in to the Dashboard
    after it''s restarted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8c97c852-943c-42f2-abee-cd56f7d262c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve logged back into the Dashboard, click on Quality Profiles. This
    time, you should see Java profiles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8d0ae9c7-fe31-46b3-91c6-6b2e6ac6e27e.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat *steps 1* to *5* for any other languages you want to install.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A project is created in SonarQube automatically on its first analysis. Before
    we can scan a project, we need to choose an analysis method. In this recipe, we
    will launch a Gradle analysis. The other available methods are listed in the *See
    also* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to add a new project to SonarQube:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone an example repository to scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'For this example, we also need Java 1.8 installed on our node. If you already
    have it, skip to *step 4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm the version of Java you''re using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the SonarQube service''s external IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the analysis. The analysis will complete in a couple of minutes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch back to the SonarQube portal to see the new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/47eadf48-d0dc-4926-9ed7-5a75596c7660.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you will be able to see your new project on the SonarQube portal.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing a project's quality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SonarQube's analysis varies, depending on the language that's scanned, but,
    in most cases, it generates good-quality measures, issues reports, and finds where
    coding rules were broken. In this recipe, you will learn where to find types of
    issues and look into issues by severity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you added the sample project to SonarQube by following the *Adding
    a project* recipe. Now, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Issues menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2b3f8b4f-417d-46ed-8211-719ccb3525e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Known vulnerabilities are considered blockers and need to be addressed immediately.
    Under Filters, expand Severity and select Blocker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f1750847-93c1-446e-9156-428a8d809d1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A hardcoded credential has been detected in the example code, which is a serious
    vulnerability. To assign this issue to a team member, click on the Not assigned
    dropdown and type in the person''s name to assign it to them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d2226dcd-1812-4907-8d06-bd8df0effe64.png)'
  prefs: []
  type: TYPE_IMG
- en: Eventually, all the issues need to be either confirmed and assigned or resolved
    as fixed, false positive, or won't be fixed. The status can be set by clicking
    on the Open dropdown and changing it to a new status value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding marketplace plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to add new plugins to SonarQube from the
    marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Administration menu and switch to the Marketplace tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Marketplace, in addition to code analyzers, you can find alternative
    authentication methods, language packs, and other useful integrations. As an example,
    let''s search for GitHub authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aca71291-0f35-435b-90e4-1ad28c6a83a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Install button next to the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on Restart Server and log in to the Dashboard after it's been restarted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With SonarQube, go to Administration | Configuration | General Settings | GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set Enabled to true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bd101ccb-feae-4172-8755-418813bbb99c.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the `client ID` and `client secret` to the values provided by the GitHub
    developer application. Register a new OAuth application with GitHub by going to [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the settings and log out from SonarQube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/409cded0-0b88-41c5-8006-c6629755e465.png)'
  prefs: []
  type: TYPE_IMG
- en: New, users will be asked to log in with a GitHub user.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting SonarQube from your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to remove SonarQube from your Kubernetes
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the SonarQube Helm releases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the Helm release using the release name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Helm will remove the SonarQube release and its components from your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly detect security vulnerabilities and bugs
    in your project.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Adding a project* recipe, in *s**tep 5*, when we start analyzing our
    example, the files that are provided to the analysis are analyzed on the server-side,
    and the result of the analysis is sent back to the server as a report. This report
    is analyzed in an asynchronous way on the server-side.
  prefs: []
  type: TYPE_NORMAL
- en: Reports are added to a queue and processed by the server in order. If multiple
    reports are sent back to the server, the results may take some time to be displayed
    on the SonarQube Dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: By default, only the files that can be detected by the installed code analyzer
    are loaded into the project. This means that if you only have SonarJava code written
    in C or Go and YAML files that are very common in the Kubernetes world, they will
    be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SonarQube Documentation: [https://docs.sonarqube.org/latest/setup/overview/](https://docs.sonarqube.org/latest/setup/overview/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static code analysis example using SonarScanner for Gradle: [https://github.com/javajon/code-analysis ](https://github.com/javajon/code-analysis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarScanner for Jenkins: [https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/  ](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SonarQube extension for Azure DevOps: [https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarQube Scanner for MSBuild: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarQube Scanner for Maven: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarQube Scanner for Ant: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarQube Scanner to launch analysis from the CLI: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin Library: [https://docs.sonarqube.org/display/PLUG/Plugin+Library](https://docs.sonarqube.org/display/PLUG/Plugin+Library)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SonarQube Community: [https://community.sonarsource.com/](https://community.sonarsource.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting license compliance issues with FOSSA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FOSSA is an open source software license compliance tool that allows modern
    teams to be successful with open source software development. In this section,
    we will scan software licenses with the FOSSA framework. You will learn how to
    automate license compliance and vulnerability checks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require a FOSSA account. If you don't have
    one, go to [https://app.fossa.com/account/register](https://app.fossa.com/account/register) and
    create one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding projects to FOSSA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triaging licensing issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a FOSSA badge to your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding projects to FOSSA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to add projects to FOSSA:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to FOSSA at [https://app.fossa.com/projects](https://app.fossa.com/projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the ADD PROJECTS button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dd0fcf9b-efab-479b-ad04-d9b05e49a159.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select QUICK IMPORT and then Continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a9f5d363-3fa6-4a00-be68-c798b83f6907.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your repository location. In this recipe, we will use Gitlab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f3d5605e-5421-4552-a5e9-31abfdf2b0a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Connect with Service button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the repositories you would like to scan and click on the IMPORT button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/de687df8-8954-4c3d-9b92-2c3b208cbe8f.png)'
  prefs: []
  type: TYPE_IMG
- en: FOSSA will import and automatically scan for license compliance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Triaging licensing issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'FOSSA does not require any additional steps or code to scan your projects.
    It runs the license scans as soon as you add your repositories to your FOSSA account.
    Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [https://app.fossa.com/projects](https://app.fossa.com/projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The SUMMARY tab will display any Flagged Dependencies that have been detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b5a99787-b596-4e66-9db1-67725ebb24d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the ISSUES tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/511cb090-9bf1-4539-964a-f80468b77b0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Select an Issue Thread from the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the issue and the recommended resolution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/715c2ad4-3f24-413b-a60b-09eca9cc4250.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the action that needs to be taken for the issue, you can either decide
    to create a ticket, leave a comment for discussion with a team member, or resolve
    it with an explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a FOSSA badge to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to add a FOSSA license check badge to our
    GitHub repository page:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to FOSSA at [https://app.fossa.com/projects](https://app.fossa.com/projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Projects to generate a badge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the SETTINGS tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select SHEILD as the badge format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a01a0175-3b61-44ec-be83-f7c993fe5410.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the MARKDOWN content to the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `README.md` file on the GitHub repository you scanned. Paste the MARKDOWN badge
    code you copied in *step 5* to the beginning of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f005b9d5-de72-474d-9a9e-44e358b70020.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you've saved the file, the results of the FOSSA scan will be displayed
    in the badge on your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
