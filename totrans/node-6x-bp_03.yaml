- en: Chapter 3.  Building a Multimedia Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most discussed topics in applications with Node.js is undoubtedly
    the loading and storage of files, whether text, images, audio, or videos. There
    are also many ways to do it; we will not get into deep technical details, but
    follow a brief overview of the two most important methods.
  prefs: []
  type: TYPE_NORMAL
- en: One is to save the file in binary format directly in your database, and the
    other way is to save the file directly on the server (the hard drive of the server),
    or a simple storage files in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see a very practical way to make uploading files directly
    to the hard drive easy and will record the name of the file in our database as
    a reference. In this way, we can use a scalable storage service in the cloud if
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to upload different files to hard disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Stream API to read and write files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with multipart form upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure the Multer module to store files on a local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get the file type and apply simple file validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the dynamic user gravatar generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be build an application for uploading images and videos with user authentication
    using MongoDB and Mongoose; then we can see the images that are going to be the
    end result of our work.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will use another way to begin our project; this time we
    will start with the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots show what our final application will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Images screen** | **Video screen** |'
  prefs: []
  type: TYPE_TB
- en: '| ![What we are building?](img/image_03_001.jpg) | ![What we are building?](img/image_03_002.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: Starting with package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we explained in previous chapters, the `packages.json` file is the heart
    of the application. The steps to create the necessary file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `chapter-03`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `package.json` and save it in the `chapter-03` folder
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding baseline configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add some of useful files to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `.editorconfig` and save it in the `chapter-03` folder
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `.gitignore`, save it in `chapter-03`, and include the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, we are using git as source control. Although this file is not necessary
    to run the application, we strongly recommend that you use a source version control
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `app.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding server folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To finish the basic creation of our application, we will now create the directories
    that store controls, the templates, and other files of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder called `public`, and inside of it, create the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/images`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/javascripts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/stylesheets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/uploads`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/ videos`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a folder called `server`, and inside of it, create these folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/controllers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/models`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/views`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this time, our project has all the basic directories and files; let's install
    the Node modules from `package.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell at the root project folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The project folder will have the following structure after performing steps
    1, 2, and 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding server folders](img/image_03_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Let's starting creating the `app.js` file content.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the app.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will, step by step, make the `app.js` file; it will have many similar parts
    to the application created in `Chapter 01`. However, in this chapter we will be
    using different modules and a different way to create the application controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'In, `Node.js` with the Express framework, there are different ways to accomplish
    the same goals:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.js` file at the root project folder and add the following modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are using the Multer module for handling `multipart/form-data`.
    You can find more information about `multer` at [https://github.com/expressjs/multer](https://github.com/expressjs/multer).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines right after the `multer` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not worry about these controls files at this time. Later in the book, we
    will see them one by one. At this point, we will focus on the creation of `app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines right after the `controller` importer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous code sets the user session with the messaging system and also authentication
    with Passport.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s set the template engine and the connection with the application
    database. Add the following code right after the `express app` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The following lines set up some default middlewares and initialize `Passport-local`
    and user sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines right after the previous block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now let's add all the application routes. We could've used an external file
    to store all routes, but we will keep it in this file, since we will not have
    many routes in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after `app.use(flash())`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here you can see that we are using the same routes and functions as the sample
    application in [Chapter 01](ch01.html "Chapter 1.  Building a Twitter-Like Application
    Using the MVC Design Pattern"), *Building a Twitter-Like Application Using the
    MVC Design Pattern*; we kept the routes, authentication and comments, with minor
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: The last step to be taken is to add the `error` functions and configure the
    `server port` that our application will use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code after the previous code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating the config.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a file called `config.js` inside the `config` folder at `server/config/`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `passport.js` inside the `config` folder at: `server/config/`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this step, we will use the same configuration file for the `Passport` module
    used in Chapter 01, *Building a Twitter-Like Application Using the MVC Design
    Pattern in Node.js.* You can download the sample code from [www.packtpub.com](http://www.packtpub.com)
    or from the official repository of the book from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller's files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create the controller''s files in `server/controllers`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `auth.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `comments.js` and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `index.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now let's create the controllers to handle the uploading of images and videos
    to our application. We will use the Node.js API stream to read and write our files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the complete documentation of this API at [https://nodejs.org/api/stream.html](https://nodejs.org/api/stream.html).
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `images.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code right after the `importer` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now let's add the function that is responsible for saving the file to a temporary
    directory and transferring it to a directory in the `public` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines, right after the previous code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Add the function that checks whether the user is authenticated and authorized
    to insert an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s repeat this procedure for the control of `videos.js`, then create
    a file called `videos.js`, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we use the same concept as the image controller to create the
    video controller.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the stream, the Node.js API can handle any type of file using the `createReadStream()`
    and `createWriteStream()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating model files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create the application''s template files. Since we are using the
    mongoose middleware used in chapter 1, *Building a Twitter-Like Application Using
    the MVC Design Pattern in Node.js*, we will keep the same type of configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `comments.js` inside the models folder at `server/models` and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `user.js` inside the models folder at `server/models`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a file called `images.js` inside the `models` folder at `server/models`
    and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a file called `videos.js` inside the `models` folder at `server/models`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating view files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use the same `view` files used in `Chapter 01` for
    the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`views / partials / javascripts.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / partials / stylesheets.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / login.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / signup.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / profile.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / index.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / comments.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views / pages / error.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As previously commented, you can download these files from the Packt website
    or the official  GitHub repository of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to these files, we will create the `views` files for the photos
    and videos page, and add these routes to the application menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `footer.ejs` inside the `views/partials` folder and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a file called `header.ejs` inside the `views/partials` folder and
    add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `images-gallery.ejs` inside the `views/pages` folder and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The previous code sets a form HTML tag to use the `enctype="multipart/form-data`
    type and creates a loop over the image object to show all the images added to
    the gallery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `videos.ejs` inside the `views/pages` folder and add this
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating the public folder content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, we've completed all the necessary steps to create folders and
    files inside the `server` directory as controllers, models, and views.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to copy the contents of the `public` folder we created in `Chapter
    01`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following folders and their contents and paste them into the `chapter-03`
    root project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public/images`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public/javascripts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.min.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.min.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public/stylesheets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.min.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css.map`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.sass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a folder called `uploads` inside the `public` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create a folder called `videos` inside the `public` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inserting images in the application using the upload form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to test the application, noting that for this you should start
    your MongoDB. Otherwise the application will return a failure error while connecting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell at the root project folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to `http://localhost:3000/signup` and enter the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'name: **John**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'email: **john@doe.com**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'password: **123**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to `http://localhost:3000/images-gallery`, click on the **Image Upload**
    button, fill in the form with a title and choose an image (note that we set up
    the image size limit to *1 *MB just for example purposes). You will see a model
    form, as the following screenshot shows:![Inserting images in the application
    using the upload form](img/image_03_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Image upload form
  prefs: []
  type: TYPE_NORMAL
- en: After choosing the image, click on the **Save Changes** button, and you're done!
    You will see the following screenshot at `http://localhost:3000/images-gallery
    page`:![Inserting images in the application using the upload form](img/image_03_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gallery image screen
  prefs: []
  type: TYPE_NORMAL
- en: Inserting video files into the application using the upload form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did to insert an image into our application, let''s follow the same procedure
    to insert a video:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost:3000/videos`, click on the **Video Upload** button,
    fill in the form with a title and choose a video file (note that again we set
    up the image size limit to 1 MB and the video format to *MP4, WEBM* just for example
    purposes). You will see a modal form, as shown in the following screenshot:![Inserting
    video files into the application using the upload form](img/image_03_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Video upload form
  prefs: []
  type: TYPE_NORMAL
- en: Important notes about image and video upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js gives us a complete API for handling files (Stream API) such as image,
    video, pdf, and other formats. There are also several ways to do file uploads
    to the server or for storage in the cloud, as already noted. Furthermore, the
    Node.js ecosystem provides us with many modules to deal with the different types
    of files and to use forms with `enctype = "multipart / form-data"`.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we use the `Multer` module. Multer is a complete middleware
    for handling files with various methods for upload and file storage.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we only stored the filename in MongoDB and sent the file directly
    to a server folder. There is another way to upload, where we send the file in
    binary format to the database, although it is important to remember that the capacity of
    MongoDB to store *BSON* file is *16 *MB.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to store the files in the MongoDB database, you can use the GridFS
    feature of MongoDB and Node.js modules as `GridFS-stream`, as an upload middleware,
    just like we did with Multer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example for this chapter, we limit the upload size to 1 MB, which we
    can see in the following highlighted line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about limits in the official documentation for
    Multer at [https://github.com/expressjs/multer#limits](https://github.com/expressjs/multer#limits).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a complete Node MVC application for file upload of
    images and videos; we also set up a user session with e-mail and password authentication,
    storing the encrypted password on MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, this chapter enabled you to build modular, robust, and scalable
    MVC applications.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we used very common features across web applications, such as access to
    the database, sign-in and sign up, and file upload.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to manipulate and upload images using a
    cloud service and store metadata on MongoDB.
  prefs: []
  type: TYPE_NORMAL
