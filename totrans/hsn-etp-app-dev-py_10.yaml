- en: Securing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the chatter about the performance and scalability of an application,
    and the best practices to ensure an application is stable in the enterprise environment,
    we have covered a lot. We got to learn about how important the user experience
    is to make an application successful inside an enterprise. But do you think we
    are missing something here?
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that we had all the components for building a successful enterprise
    application and that we were able to make it scale, while also providing a decent
    response time to the user with the fewest deviations from the expected behavior.
    However, it''s easy for anyone to just access the records from our application.
    What if there are loopholes that allow a user to gather sensitive data from the
    application without even performing a login? Yes, that''s the missing link: the
    application security. Inside an enterprise, the security of an application is
    a really big factor. An application that is not secure may leak sensitive and
    confidential data to unintended parties and can also wreak legal havoc on the
    organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Application security is a big topic and even a 500-page book might not be enough
    to cover the topic in depth. But over the course of this chapter, we will go through
    a quick primer of how to handle application security and make our users feel secure
    while using our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reader, by the end of this chapter, you will have learned about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of enterprise application security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different types of attack vectors that are used to breach application security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common mistakes in application development giving rise to breaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your application secure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we expect the user to have an understanding of the basics
    of configuring a web server and basic knowledge of network communication.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise application security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application security is such a big topic, where you might be talking about how
    to protect confidential data from leaking out, to making the application resilient
    enough to deal with defacement attacks.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the enterprises, the topic becomes even more serious. This
    happens because most enterprises are dealing with a huge amount of personal data,
    which may include information that can be used to identify individual users or
    information related to their financial details, such as credit card numbers, CVV
    codes, or payment records.
  prefs: []
  type: TYPE_NORMAL
- en: Most enterprises spend a huge amount of their capital on improving the security
    of their business because they cannot afford to have a weak link in their chain
    that may result in a breach of the confidential information that they store. The
    repercussions that a breach may bring to an organization start with fines imposed
    on the organization that failed to maintain the security of the confidential data
    and extend to a loss of trust that may bring an organization to bankruptcy.
  prefs: []
  type: TYPE_NORMAL
- en: Security is no joke and there is no one-solution-fits-all approach. Rather,
    to make things more complicated, the attacks that have been used to breach an
    organization's security barriers have become more and more sophisticated and harder
    to build protection against. If we take a look at the history of cybersecurity
    breaches, we can find examples that show how hard a cybersecurity issue can hit.
    For example, in recent years, we saw a number of breaches involving major organizations
    where one of the organizations saw a breach of more than 3,000,000,000 user accounts;
    in another attack, a gaming network saw a security breach and remained down for
    approximately a month, costing the organization a huge amount of financial losses.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one thing that the field of cybersecurity demonstrates clearly: it
    is an ever-evolving field where new types of attacks are discovered every day
    and new mitigations are being researched to overcome them in a timely manner.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at understanding why enterprise application security
    is an important topic and one that should not be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of enterprise security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most enterprises, no matter their size, deal with a decent amount of user data.
    This data may involve something about the users that might be available publicly,
    or it may involve data that is confidential. Once this data enters the storage
    of the organization, it becomes the responsibility of the organization to protect
    the confidentiality of the data so that it cannot be accessed by any unauthorized
    party without permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, most enterprises amp up their cybersecurity and build multiple
    barriers to prevent unauthorized access to their user-data systems. So, let''s
    take a look at some of the reasons why enterprise security is so important:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Confidentiality of data:** A lot of organizations ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges in system security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The information technology field is growing at a rapid pace, with new technologies
    popping up every day. The mode of communication between two parties is also evolving,
    providing  more efficient long-distance communication. But this evolution comes
    up with its own set of challenges with respect to the security of systems. Let''s
    take a look at the challenges that make system security difficult for organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The increasing amount of data:** With most organizations building their systems
    to leverage AI and ML to provide more personalized experience to their users,
    they are also gathering a huge amount of information about their users so as to
    improve recommendations. This huge amount of data storage makes the security of
    that data more difficult to maintain, because now more and more confidential information
    is being retained, making the system a lucrative shot for the attackers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distribution of data over public service providers:** A lot of enterprises
    are now cutting down on their storage infrastructure and are becoming more and
    more reliant on third-party public storage providers, which provide the same amount
    of storage at much lower costs, along with reduced maintenance costs. This also
    puts the enterprise security at risk because now the data is governed by the security
    policies of the third-party service provider, and the owner of the data has very
    little control over the security policy of the data through which it is protected.
    A single breach on the part of the storage service provider can expose the data
    of multiple users of different organizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The increasing number of devices connected to the internet:** With more and
    more devices joining the internet, the attack surface also increases. If even
    a single device has a weak segment inside it, be it in terms of the encryption
    standard or because of not implementing proper access controls, the security of
    the whole system can be breached easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sophisticated attacks:** The attacks have became more and more sophisticated,
    where the attackers are now using day-zero vulnerabilities in systems and even
    utilizing vulnerabilities that have not yet been discovered by the organization.
    These attacks compromise a large amount of data and pose as a huge security risk
    to the whole system. To complicate matters even more, since the vulnerabilities
    are new, they don''t have an immediate solution, resulting in a delayed response,
    or at times even a delayed identification that an attack occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increase in state-sponsored attacks:** With the ever increasing move to the
    Information Technology powered communication and processes in the whole world,
    the context of wars is also changing. Where wars were previously fought on the
    ground, now they are being fought over the network, and this has given rise to
    state-sponsored attacks. These attacks usually target enterprises to either collect
    intelligence or to cause major disruptions. The problem with state-sponsored attacks
    is the fact that these attacks are highly sophisticated in nature and utilize
    a huge amount of resources, which makes them difficult to overcome.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, we now know what are the different factors that make it hard for
    the enterprises to improve the security of their systems. This is why cybersecurity
    is always playing a catch-up game, where the enterprises are improving their security
    against the ever changing attack vectors being used by the attackers to attack
    the IT systems.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with this knowledge, it's time for us to understand what really affects
    application security. Only with this knowledge of the different attack vectors
    can we move forward and make our application secure against attacks. So, let's
    embark on this journey.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at the attack vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every attack that breaches the security of the system or takes it down, exploits
    either one or the other vulnerability of the system the application is running
    on. These vulnerabilities differ for every kind of application. An application
    that has been built natively for a system may have different attack vectors than
    an application that has been developed for the web.
  prefs: []
  type: TYPE_NORMAL
- en: To adequately protect the application against attacks, we need to understand
    the different attack vectors that are used against the different application types.
  prefs: []
  type: TYPE_NORMAL
- en: For here onwards, we will take a brief look at two of the most common application
    types and the attack vectors that may be used to target those applications.
  prefs: []
  type: TYPE_NORMAL
- en: Security issues with native applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Native applications are those applications that have been built specifically
    for the platform they are running on. These applications take advantage of the
    libraries and functions that are provided by a given platform to make the best
    use of the platform features. The security issues that may be experienced by these
    applications are usually the security issues that affect the underlying platform
    on which these applications are running, or because of the vulnerabilities that
    have been left by the application developers. So, let''s take a look at some of
    the issues that affect the security of native applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerabilities of the underlying platform:** When an application runs over
    a platform, its functionality is governed by what the underlying platform exposes.
    If the underlying platform is vulnerable to security issues, the applications
    running on top of the platform will also be vulnerable, unless they implement
    proper measures to mitigate those vulnerabilities at the application level. These
    kinds of issues may involve issues with the hardware, such as the recent Spectre
    and Meltdown vulnerabilities that affected the x86 platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use of third-party libraries:** Some applications that use third-party libraries,
    specifically the ones for implementing security inside the application, can indeed
    leave the application more vulnerable to security breaches if the developer stops
    maintaining those libraries or if there are some vulnerabilities that are left
    unfixed. Usually, a better alternative is to use the libraries that are provided
    by the platform itself, at least for the use case of implementing security in
    the application and not utilizing undocumented platform APIs, which may have unexplained
    security implications for the use of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unencrypted storage of data:** In case an application that may involve the
    storage and retrieval of data stores, the data in an unencrypted format may cause
    the data to be accessed by untrusted sources and may leave the data vulnerable
    to misuse. An application should make sure that the data it is storing is in an
    encrypted form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unencrypted communication with third parties:** A lot of applications these
    days depend upon third-party services to achieve a particular functionality. This
    is true, even inside a corporate network where an application might be making
    a call to a third-party authentication server inside the network to validate the
    user''s identity. If this communication between the applications is unencrypted,
    it can lead to attacks, such as a man-in-the-middle attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoiding bound checks:** Those native applications that are implementing
    their own memory management techniques may become vulnerable in case the developers
    of the application miss a possible bounds check, which may allow an attacker to
    access data outside the application boundaries. This may cause a huge breach of
    the system''s security, where data not only from the affected application but
    also from the other applications is left exposed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a non-exhaustive list of issues that may affect the security of native
    applications. Some of these issues can be fixed easily, while others require a
    lot of effort from the application developers as well as the platform provider
    to mitigate the possible security breaches.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the knowledge of possible attack vectors that may affect the native
    apps, it's time for us to move on to understanding the attack vectors that may
    affect the web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Security issues with web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications have been seeing an ever-growing rise in their usage. With
    the increasing use of the internet, more and more organizations are shifting their
    day-to-day office work to the web applications that help establish a connect between
    the different offices located in different geographies. But these advantages come
    with their own costs in terms of security.
  prefs: []
  type: TYPE_NORMAL
- en: 'The security of web applications has been a challenging domain due to the sheer
    amount of ways an attack can take place over a web application. So, let''s take
    a look at the ones plaguing the security of web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Injections**: One of the common attacks with web applications that are
    backed by SQL databases is the use of SQL Injections. ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security anti-patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time for us to understand what kind of practices usually land the application
    in the vulnerability zone of security breaches. There could be a number of things
    that can cause the application to suffer from security issues,as we move through
    this section we will take a look at some of the mistakes that usually leaves an
    application vulnerable to security breaches. So, let's go through them one by
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Not filtering user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an application developer, we want our users to trust our application. That
    is the only way we can make sure that our users will use our application. But
    how about trusting our users equally and expecting them not to do anything wrong?
    Specifically, trusting them with the input they will provide us through the use
    of input mechanisms our application exposes to the user for taking input from
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet of code shows a simple example of not filtering the input
    provided by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Storing Sensitive Data Unencrypted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, as application developers, we love to have simplicity in the application
    code base so that we can maintain the application later with ease. While keeping
    this simplicity in mind, we thought that we already had our application running
    behind a nice firewall and every access was thoroughly checked, so why not just
    store the passwords of the user in plaintext in the database? This will help us
    to match them with ease and will also help us save a number of CPU cycles.
  prefs: []
  type: TYPE_NORMAL
- en: One day while the application was running in production, an attacker was able
    to compromise the security of the database and somehow was able to fetch the details
    from the user table. Now, we are in a situation where the login credentials of
    the user are not only leaked but are also available in cleartext format. Going
    with general psychology, many people will reuse the same password on a number
    of services. In this case, we have not only risked the credentials of users on
    our application but also on a number of other applications that the user might
    be using.
  prefs: []
  type: TYPE_NORMAL
- en: Such an attempt to have security-sensitive data stored without any strong encryption
    not only put the application at risk of security issues that may happen at any
    time, but also its users.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring bound-checking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security issues pertaining to missing bound checks is quite a common scenario
    in software applications. This happens when the developers accidentally forget
    to implement a bounds check in the data structure they are implementing.
  prefs: []
  type: TYPE_NORMAL
- en: When a program attempts to access the memory region outside the one that was
    allocated to it, it causes the program to experience a buffer overflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When this program is executed, the program tries to alter the contents of memory
    that are not actually managed by it. If the underlying platform does not raise
    any kind of memory protection, this program will be successfully able to overwrite
    a ...
  prefs: []
  type: TYPE_NORMAL
- en: Not keeping the libraries updated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the production applications depend upon third-party libraries to enable
    some sets of functions. Keeping these libraries outdated can save you upon the
    few extra kilobytes of update or maintaining your software so that it continues
    to work with the updated libraries. However, this can also lead your application
    to have unfixed security vulnerabilities that may be exploited by an attacker
    later to gain illegal access to your application and the data that is being managed
    by the application.
  prefs: []
  type: TYPE_NORMAL
- en: Giving full privileges of the database to a single user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of applications will actually give full database privileges to a single
    user of the application. Sometimes, these privileges are enough to allow your
    application database user to have the same set of permissions as the root user
    of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this kind of implementation helps a lot in solving the issue of validating
    whether a certain user has a particular permission to conduct a database operation
    and having to switch the users to complete the database operation, but also opens
    a huge vulnerability with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine if somehow the credentials of one of the database users gets leaked.
    The attacker will now have complete access to your database, which makes them
    ...
  prefs: []
  type: TYPE_NORMAL
- en: Improving your application's security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keeping your application secure can be achieved if we follow some basic rules
    of software security and implement them tightly in the application''s development
    and production cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Never trust your user input:** As developers of the application, we should
    make sure that we don''t trust any user input. Everything that may come from the
    user side should be filtered appropriately before it is processed by the application
    for storage or any other kind of operation that may cause the provided input to
    be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encrypt sensitive data:** Any kind of sensitive data should have a strong
    encryption supporting its storage and retrieval. Having some amount of randomness
    in generating the encrypted version of the data can help a lot in making it difficult
    for attackers to get anything useful out of the data, even if they somehow got
    access to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properly secure the infrastructure:** The infrastructure that is being used
    to run the application should be secured properly, with firewalls configured to
    restrict any kind of unauthorized access to the internal networks or nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement end-to-end encryption:** Any communication that happens between
    two services should be end-to-end encrypted to avoid any man-in-the-middle attacks
    or sniffing of the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carefully implement bounds checks:** If your application uses any kind of
    data structures, make sure that proper bounds-checking is in place so as to avoid
    vulnerabilities, such as Buffer overflow, which may allow malicious code to get
    executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restrict user permissions:** No application should have a single user with
    all permissions given to them. The user permissions should be restricted so as
    to define the boundaries for a user to execute an operation. Following this kind
    of recommendation can help to restrict the amount of damage a breach may cause
    in case the credentials for a less privileged user are compromised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep the dependencies updated:** The dependencies of an application should
    be kept updated so as to make sure that the dependencies are free of any known
    security vulnerability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following these kinds of guidelines can help a lot in improving the application
    security of your application and making sure that the application, as well as
    the data, is kept safe, which maintains user trust as well as data security.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we progressed through this chapter, we got to learn about the different security
    principles that govern the development and operation of software applications.
    We talked about needing to maintain high security standards with respect to enterprise
    applications, and what happens if the application's security is breached. We then
    learned about the challenges that system security faces nowadays. Then, we moved
    on to the common attack vectors that are used to compromise an application's security.
  prefs: []
  type: TYPE_NORMAL
- en: Once we had an idea about the attack vectors, we took a look at some common
    security anti-patterns that compromise the security of your application, as well
    as the data associated with the application. Once we had the knowledge of these
    anti-patterns, ...
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the different issues that make application security hard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an XSS attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we prevent a DoS attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the mistakes that compromise the security of the application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you found application security to be an interesting topic and want to learn
    more about how to use Python to improve the security of your application, take
    a look at this awesome video series, "Python for Continuous Delivery and Application
    Security," authored by Manish Saini and produced by Packt.
  prefs: []
  type: TYPE_NORMAL
