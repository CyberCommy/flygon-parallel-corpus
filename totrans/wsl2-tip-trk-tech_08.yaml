- en: '*Chapter 6*: Getting More from Windows Terminal'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new Windows Terminal was introduced in [*Chapter 3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037),
    *Getting Started with Windows Terminal*, and you saw how to install it and customize
    the order of your profiles and the color schemes that they use in that chapter.
    In this chapter, we will explore Windows Terminal further and look at a couple
    of different ways to stay productive with multiple different shells running in
    Windows Terminal. After that, we will look at adding custom profiles to enable
    you to simplify your flow for common tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing tab titles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multiple panes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start the chapter by looking at how to use tab titles to help you manage
    multiple tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing tab titles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tabbed user interfaces** are great; browsers have them, editors have them,
    and Windows Terminal has them. For some people, myself included, tabbed user interfaces
    also pose a challenge – I end up with a lot of tabs open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – A screenshot of Windows Terminal with lots of tabs open'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – A screenshot of Windows Terminal with lots of tabs open
  prefs: []
  type: TYPE_NORMAL
- en: As the preceding screenshot shows, with multiple tabs open, it can be hard to
    tell what each tab is running and for what you were using it for. When I'm coding,
    I frequently have a tab open for performing Git operations, another for building
    and running the code, and another for interacting with the code when it's running.
    Add to these an extra tab for some general system interaction and a tab or two
    for looking into a question someone asks about another project, and the number
    grows quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The previous screenshot showed that depending on the shell running in a tab,
    you may get some path information, but if you have multiple tabs in the same path,
    even this isn't that helpful as they all show the same value. Fortunately, with
    Windows Terminal you can set the tab titles to help you keep track. We'll look
    at a few different ways you can do that so that you can pick whichever method
    works best for you.
  prefs: []
  type: TYPE_NORMAL
- en: Setting tab titles from the context menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A simple way to set the title is to right-click in the tab title to bring up
    the context menu and choose **Rename Tab**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – A screenshot of the tab context menu showing Rename Tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.2_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – A screenshot of the tab context menu showing Rename Tab
  prefs: []
  type: TYPE_NORMAL
- en: 'As the preceding screenshot shows, right-clicking on a tab brings up a context
    menu allowing you to rename a tab or set the tab color to help organize your tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – A screenshot of Windows Terminal with renamed and color-coded
    tabs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.3_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – A screenshot of Windows Terminal with renamed and color-coded tabs
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows sets of tab titles grouped by the use of color in their
    tab titles. Each tab also has a descriptive title, for example, **git** to indicate
    what the tab is being used for. Naturally, you can pick titles that fit your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: When you're working in the Terminal, you might prefer to be able to use the
    keyboard to set the title, so we'll look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Setting tab titles from your shell using functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you like to keep your hands on the keyboard, it is possible to set the tab
    title from the shell that is running in the tab. The method for doing this depends
    on which shell you are using, so we will look at a few different shells here.
    Let's start by looking at **Bash**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easy to set the prompt, we can create the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from this snippet, this creates a function called `set-prompt`.
    This function uses escape sequences that control the terminal title, allowing
    us to run commands such as `set-prompt "A new title"` to change the tab title,
    in this example, changing it to `A new title`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For PowerShell, we can create a similar function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This snippet shows a `Set-Prompt` function, which accesses the PowerShell `$Host`
    object to control the title, allowing us to run commands such as `Set-Prompt "A
    new title"` to change the tab title in a similar way to that in Bash.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows Command Prompt (`cmd.exe`), we can run `TITLE A new title` to control
    the tab title.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Some utilities and shell configurations override the default prompt settings
    to control the shell title in addition to the prompt. In these cases, the functions
    from this section will not have any noticeable effect as the prompt will immediately
    overwrite the title specified. If you are having issues using the functions, then
    check your prompt configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For Bash, run echo `$PROMPT_COMMAND` to check your prompt configuration. For
    PowerShell, run `Get-Content function:prompt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using the functions we''ve just seen is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – A screenshot showing the use of the set-prompt function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.4_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – A screenshot showing the use of the set-prompt function
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see the `set-prompt` function being used in Bash
    to control the tab title. The titles of the other tabs (PowerShell and Command
    Prompt) are also set using the functions shown in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Using these functions can be a convenient way to update the tab title while
    you are working in the terminal without interrupting your flow to reach for the
    mouse. You can also use these functions to update the title as part of scripts,
    for example, to give an at-a-glance way to see the status of a long-running script
    via the tab title, even if a different tab has the focus.
  prefs: []
  type: TYPE_NORMAL
- en: The last way of updating the tab title that we'll look at is via the command
    line when launching Windows Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Setting tab titles from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous section looked at setting the tab title from a running shell in
    Windows Terminal; in this section, we will launch Windows Terminal and pass command-line
    arguments to specify the profiles to load and to set the tab titles.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Terminal can be launched from the command-line or run dialog (*Windows*
    + *R*) using the `wt.exe` command. Running `wt.exe` by itself will start Windows
    Terminal with the default profile loaded. The tab title can be controlled with
    the `--title` switch, for example, `wt.exe --title "Put a title here"`. Additionally,
    the `--profile` (or `-p`) switch allows us to specify which profile should be
    loaded, so that `wt.exe -p Ubuntu-20.04 --title "This is Ubuntu"` will load the
    `Ubuntu-20.04` profile and set the tab title.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the motivations for controlling tab titles is to keep track when working
    with multiple tabs. Windows Terminal has a powerful set of command-line arguments
    (we''ll see more of these in the next section) that allow us to launch Terminal
    with one or more specific tabs/profiles. We can build on the previous command
    by appending `; new-tab` (note the semi-colon) to specify a new tab to load, including
    any additional arguments such as `title` and `profile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are specifying the first tab as the `PowerShell` profile
    and a title of `This one is PowerShell`, and a second tab with the `Ubuntu-20.04`
    profile and its title as `WSL here!`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `new-tab` argument requires a semi-colon before it, but many shells (including
    Bash and PowerShell) treat semi-colons as command separators. To use the previous
    commands successfully, any semi-colons need to be escaped using the backtick in
    PowerShell (``;`).
  prefs: []
  type: TYPE_NORMAL
- en: As seen in [*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054), *Linux
    to Windows Interoperability*, in the *Calling Windows apps from Linux* section,
    we can launch Windows applications from WSL. Normally, we can just execute the
    Windows application directly but because Windows Terminal uses a feature called
    execution aliases, we need to launch it via `cmd.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, because of the way that `wt.exe` works, when launching from Bash,
    it needs to be run using `cmd.exe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cmd.exe /C wt.exe -p "PowerShell" --title "This one is PowerShell"\; new-tab
    -p "Ubuntu-20.04" --title "WSL here!"`'
  prefs: []
  type: TYPE_NORMAL
- en: This example shows using `cmd.exe` to launch Windows Terminal with multiple
    tabs (note the backslash to escape the semi-colon), setting the profile and titles.
  prefs: []
  type: TYPE_NORMAL
- en: The `new-tab` command with Windows Terminal can be repeated multiple times,
    and in this way, you can create commands or scripts to set up complex Windows
    Terminal tab arrangements in a repeatable manner.
  prefs: []
  type: TYPE_NORMAL
- en: The techniques from this section provide you with a number of ways to set the
    titles of tabs in your Windows Terminal sessions to help you stay organized when
    working with multiple shells open in different tabs. In the next section, we'll
    look at another feature of Windows Terminal for working with multiple shells.
  prefs: []
  type: TYPE_NORMAL
- en: Working with multiple panes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we saw the use of tabs when working with multiple
    shells open at the same time, but sometimes it is desirable to be able to see
    more than one shell at a time. In this section, we will look at how to work with
    multiple panes in Windows Terminal to achieve things like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – A screenshot showing multiple panes in Windows Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.5_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – A screenshot showing multiple panes in Windows Terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot shows running multiple profiles in panes in the same
    tab: on the left is PowerShell window that has made a web request, the top-right
    pane is running a web server, and the bottom-right pane has `htop` running to
    track running Linux processes in WSL.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with the `tmux` utility ([https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)),
    then this may look familiar, as `tmux` also allows splitting a window into multiple
    panels. But there are some differences. One feature of `tmux` is to allow you
    to disconnect and reconnect from terminal sessions, which can be handy when working
    with `ssh` as it preserves your session if your `tmux` doesn't do.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see both PowerShell and Bash (in WSL) running
    in different panes in the same tab. It is good to understand the capabilities
    of both `tmux` and Windows Terminal, and pick the right tool for the job – and
    you can always run tmux in a Bash shell in Windows Terminal for the best of both
    worlds!
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a sense of panes, let's take a look at how to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: Creating panes interactively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to create panes is to create them interactively, as you need
    them. There are a few default shortcut keys that can get you started but if you
    have specific requirements, you can configure your own key bindings as described
    here: [https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands).'
  prefs: []
  type: TYPE_NORMAL
- en: The first commands are *Alt* + *Shift* + *-*, which will split the current pane
    in half horizontally, and *Alt* + *Shift* + *+*, which will split the pane vertically.
    Both of these commands will launch a new instance of the default profile in the
    newly created pane.
  prefs: []
  type: TYPE_NORMAL
- en: The default profile may not be the profile you want to run, but a common scenario
    is to want another terminal in the same profile that you are already running.
    Pressing *Alt* + *Shift* + *D* will create a pane with a new instance of the profile
    from the current pane. The command will automatically determine whether to split
    horizontally or vertically based on the space available.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to pick which profile to open in a new pane, you can open the launch
    profile dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – A screenshot showing the launch profile dropdown'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.6_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – A screenshot showing the launch profile dropdown
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the standard dropdown for selecting a profile to run.
    Instead of clicking normally, holding down the *Alt* key while clicking will launch
    the selected profile in a new pane. As with *Alt* + *Shift* + *D*, Windows Terminal
    will determine whether to split the current pane horizontally or vertically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to use the Windows Terminal command palette using *Ctrl*
    + *Shift* + *P*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – A screenshot showing the split options in the command palette'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.7_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – A screenshot showing the split options in the command palette
  prefs: []
  type: TYPE_NORMAL
- en: The command palette allows you to type to filter the command list, and this
    screenshot shows the commands matching `split`. The bottom two commands match
    two of the commands we've already seen, along with their corresponding shortcut
    keys. The top command gives a menu system in the command palette that allows you
    to pick the profile you want to use for the new pane and then how to split the
    existing pane.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at how to create panes, let's take a look at how to
    work with them.
  prefs: []
  type: TYPE_NORMAL
- en: Managing panes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most obvious way to switch the focus between panes is to use the mouse click
    in a pane – doing this changes which pane is focused on (indicated by a highlighted
    color on the pane border). To change the pane using the keyboard, you can use
    *Alt* + a cursor key, that is, *Alt* + *cursor up* will move the focus to a pane
    above the current one.
  prefs: []
  type: TYPE_NORMAL
- en: To change the size of the panes, we use similar key combinations, *Alt* + *Shift*
    + a cursor key. The *Alt* + *Shift* + *cursor up* and *Alt* + *Shift* + *cursor
    down* combinations adjust the height of the current pane, and the *Alt* + *Shift*
    + *cursor left* and *Alt* + *Shift* + *cursor right* combinations adjust the width
    of the current pane.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the shells running in a pane exit, then that pane will close and the
    other panes will resize to fill its space. You can also close the current pane
    by pressing *Ctrl* + *Shift* + *W* (this shortcut was introduced in [*Chapter
    3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037), *Getting Started with Windows
    Terminal*, in the *Using Windows Terminal* section, as the shortcut to close a
    tab, but at that point, there was only a single pane in a tab!).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, let's take a look at how to configure panes when launching Windows Terminal
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Creating panes from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in this chapter, we saw how to use the Windows Terminal command line
    (`wt.exe`) to launch Windows Terminal with multiple tabs loaded. In this section,
    we'll see how to do the same with panes. This is useful when you are working on
    a project and have a set of panes that you commonly set up as you can script them
    and make it easy to launch a consistent layout.
  prefs: []
  type: TYPE_NORMAL
- en: When launching with multiple tabs, we used the `new-tab` command for `wt.exe`.
    The approach for launching with multiple panes is similar but uses the `split-pane`
    command instead (note that escaping rules for the semi-colons still apply from
    the *Setting tab titles from the command line* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of using `split-pane`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in this example, `split-pane` is used to specify a new pane
    and we can use the `-p` switch to specify which profile should be used for that
    pane. We can either let Windows Terminal pick how to split or we can use `-H`
    to split horizontally or `-V` to split vertically. You may also have noticed that
    `--title` has been specified. Windows Terminal allows each pane to have a title
    and displays the title of the currently focused pane as the tab title. Lastly,
    you may notice that the final pane has the additional arguments `bash -c htop`.
    These arguments are treated as the command to execute within the launched profile.
    The end result of this command is a setup very similar to the screenshot shown
    in *Figure 6.5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a bonus, the command palette in Windows Terminal also allows us to use the
    command-line options. Press *Ctrl* + *Shift* + *P* to bring up the command palette
    and then type `>` (right angle-bracket):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – A screenshot showing the command palette with command-line options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.8_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – A screenshot showing the command palette with command-line options
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in this screenshot, we can use the `split-pane` command to split
    the existing pane using the command-line options.
  prefs: []
  type: TYPE_NORMAL
- en: So far in this chapter, we've covered ways to work with tabs and panes to help
    manage running multiple profiles. In the final section of this chapter, we'll
    take a look at some additional ideas for profiles that you might want to create.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Terminal does a great job of automatically discovering PowerShell installations
    and WSL distributions to populate your profile list with (and updates it when
    new distributions are installed). This is a good start, but in addition to launching
    an interactive shell, a profile can launch specific applications within a profile
    (as the last section showed with `htop`). In this section, we'll look at a couple
    of examples, but the main purpose of them is to show ideas beyond just launching
    shells to give inspiration for how you might customize your Windows Terminal configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a machine that you regularly connect to via SSH, then you can smooth
    your workflow by creating a Windows Terminal profile that launches directly into
    SSH. Open your settings from the profile dropdown (or by pressing *Ctrl* + *,*)
    and add a profile in the `list` section under `profiles`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Windows Terminal settings file was introduced in [*Chapter 3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037),
    *Getting Started with Windows Terminal*, and in this example profile, you can
    see familiar properties from that chapter such as `name` and `colorScheme`. The
    `commandline` property is where we configure what should be run, and we are using
    that to launch the `wsl` command to run `bash` with a command line that runs `ssh`.
    You should ensure that the `guid` value is different from other profiles in your
    settings. This example shows how to create a profile to execute a command in WSL
    – for SSH, you also have the option to use `ssh` directly in the `commandline`
    property as an SSH client is now included in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Launching this new profile automatically starts `ssh` and connects to the specified
    remote machine. As a bonus, the `background` property can be used to set the background
    color to indicate the environment you are connected to, for example, to easily
    differentiate between development and test environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a number of machines that you connect to with SSH, then you can
    launch a script to allow you to select which machine to connect to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This script contains a list of options (`vals`) that are presented to the user
    when the script is executed. When the user selects an option, the script runs
    `ssh` to connect to that machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you save this script as `ssh-launcher.sh` in your home folder, you can add
    a profile to your Windows Terminal settings that executes it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding profile, you can see that `commandline` has been replaced
    with one that runs the previous `ssh-launcher.sh` script. When this profile is
    launched, it uses `wsl` to launch the script via `bash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – A screenshot showing the ssh launcher script running'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.9_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – A screenshot showing the ssh launcher script running
  prefs: []
  type: TYPE_NORMAL
- en: You can see this script in action in the preceding screenshot. The script prompts
    the user to pick from a list of machines and then runs `ssh` to connect to the
    selected machine. This makes for a convenient way to set up connections to regularly
    used machines.
  prefs: []
  type: TYPE_NORMAL
- en: As you work with WSL, you will likely find a set of applications that you frequently
    run or steps that you regularly perform, and these are great candidates for additions
    to your Windows Terminal profiles!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are various other options that we didn't get chance to look at here, for
    example, setting background images for your profiles, and you can find details
    of these in the Windows Terminal documentation at [https://docs.microsoft.com/en-us/windows/terminal/](https://docs.microsoft.com/en-us/windows/terminal/).
    Windows Terminal is also rapidly adding new features – to see what is coming,
    take a look at the roadmap documentation on GitHub at [https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md](https://github.com/microsoft/terminal/blob/master/doc/terminal-v2-roadmap.md).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've seen ways to work with multiple Windows Terminal profiles.
    First, you saw how to work with multiple tabs by controlling tab titles (and colors)
    to help keep track of the context for each tab. Then you saw how to work with
    panes to allow multiple (potentially different) profiles to run in the same tab.
    You may find that you prefer one way of working to the other or that you combine
    tabs and profiles. Either way, you also learned how to use the Windows Terminal
    command line to script the creation of both tabs and panes to allow you to easily
    and quickly create consistent, productive working environments for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter ended by looking at how Windows Terminal profiles can be used for
    more than just running a shell by setting up a profile that launches SSH to connect
    to a remote machine. You then saw how to take that further and prompt you to pick
    from a list of machines to connect to, using a *Bash* script. If you regularly
    connect to machines via SSH, then these examples will hopefully be useful, but
    the goal was to show ideas for how to take further advantage of profiles in Windows
    Terminal. As you find common tasks and applications in your workflow, think about
    whether it is worth spending a few minutes creating a Windows Terminal profile
    to make those repeated tasks quicker and easier. All of these techniques allow
    you to refine your workflow with Windows Terminal and boost your day-to-day productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will look at a new topic: how to work with containers
    in WSL.'
  prefs: []
  type: TYPE_NORMAL
