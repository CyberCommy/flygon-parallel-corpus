- en: Requirement Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Requirements are customer needs that are defined in relation to a project. They
    are tracked using the requirement number or ticket number in Jira to monitor and
    control the project's progress. Linking requirements to the test cases helps the
    project team to estimate not only the effort required in terms of resources and
    the time required to validate the linked requirement, but also helps to understand
    which requirement has more defects during the execution phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Jira issue type as a requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing relations between requirements and test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also look at how Jira helps us to define the project requirements using
    the Jira issue ...
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Jira issue type as requirement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Jira, we have default issue types, such as Epic, Story, Task, Sub-task, and
    Bug. These issue types give us flexibility to define our own issue types as per
    the project's requirements. However, each of these issue types can be treated
    as a requirement. Once the requirements are defined and logged in the system,
    it becomes easy to track and manage them. We learned how to define requirements
    in [Chapter 3](e4241f7d-9db5-42d9-b626-d134c226d2ef.xhtml), *Understanding Components
    of Testing with Jira*. So now, let's create them in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Creating requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira has a predefined set of fields to create Jira tickets. Additionally, we
    can add customized fields as required according to the selected issue type. Any
    requirement issue type should generally contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the requirement or the task that the team is expected to accomplish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The detailed description that breaks the complex requirement down into further
    details and specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The issue type's priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The issue type's current status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following details are added while creating a requirement issue type:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Requirement field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Requirement ID | This field helps to identify requirements uniquely. Most
    of the time, business requirements are prepared by business analysts and ... |'
  prefs: []
  type: TYPE_TB
- en: Prioritizing requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Requirement prioritization is done based on the need and urgency to deliver
    the feature to the end users. While prioritizing the requirements, the project team
    also considers its complexity and the efforts required to accomplish the requested
    tasks. The project team can take actions based on the level of priority.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the feature request is of critical priority, that means that
    its importance is very high and its timeline very short. Hence, all the things
    needed to achieve the aforementioned tasks, such as data, tools, permissions,
    a skill set, and resources, are acquired within a short period and the project team
    tries to achieve its goal as per the set timelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira has four different priority types assigned to any issue type by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critical**: These are the requirements that are very urgent and that have
    a high impact on the business. These aspects need to be addressed and, fixed in
    the shortest time so that they are delivered to end users on an urgent basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**: These are the requirements that need to be addressed and worked on
    as soon as possible. However, the timeline is generally specified by the project
    stakeholders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medium**: These are medium priority requirements that are worked on after
    all the critical or high priority items are delivered, since their urgency level
    is medium.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**: Low priority requirements have minimal urgency. Hence, they are the
    last items in the developer''s priority list to be worked on. Sometimes, tasks/subtasks
    with a low priority status can also be moved to another release or sprint if the
    project team needs more time to focus on the most critical/high-priority items
    in the current release/sprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The requirement status helps the project team to know its current state as well
    as giving it direction to be ready for the next course of action. Setting the
    status is part of the workflow. Hence, organizations may have a customized status
    that can vary by project or even by issue type.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the following statuses are useful for requirement issue types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Draft**: As the name suggests, this status can be used if there are further
    details that need to be added by the members responsible. Generally, a business
    analyst is responsible for creating the business requirements. If not, then the
    project leader creates them in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Draft complete**: Once all the requirement details are added, their status
    can be updated ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing requirement artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Requirements can be created in various formats, while different types of artifacts
    are possible, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project charter**: This initiates the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project''s approved requirement document**: It contains the approved requirements
    at high-level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project''s high-level and low-level design documents**: These define the
    project architecture in detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project plan**: This includes details regarding the scope, time, cost, budget,
    and other relevant plans, including a change management strategy plan, and a resource
    allocation plan. It also defines the list of acceptable deliverables at the end
    of each phase and their formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project''s related third-party tool documents**: These are going to be used
    in relation to the current project, such as product information, tutorials, or
    user permissions that are required to access the tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk mitigation strategy and action plan**: This is used to understand the
    project risks and the steps required to mitigate them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge base repository**: This contains all the documents released in
    relation to the current project, as well as any other relevant projects that can
    be used by the project team. Examples include lessons learned and retrospective
    documents from previous releases that can be referenced by the project team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training documents**: These are the resource training-related documents and
    videos, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roles and responsibilities**: These are the documents relating to resource
    roles and responsibilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project meetings**: This includes project planning, weekly and/or daily meetings
    or calls, discussion reports, including minutes of meetings or any emails that
    have been used to confirm the requirements or conditions for the project features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project progress report**: This report is generated at the end of each sprint
    or every phase of product development. Examples include sprint reports, epic reports,
    project burndown charts, test execution reports, test cycle reports, and test
    plan reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since there are various types of documents generated before, during, and at
    the end of the project, managing the project repository as per the sprint or release
    is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing relations between requirements and test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in setting up the traceability matrix is to link the test cases
    that were designed based on the requirements with the relevant requirements documented
    in the system. The traceability matrix helps the test team to understand the test
    coverage and manage test cases appropriately by adding or removing test cases
    as applicable.
  prefs: []
  type: TYPE_NORMAL
- en: During the test execution phase, this link helps the test team to understand
    which requirements are failing or taking more time to execute. Test managers can
    then decide on a strategy to overcome these issues and allocate more resources
    or time as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how the test cases can be linked to the requirements using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To link test cases to different issue types in Jira, we need to configure the
    issue types as Requirements from the Configuration section. Once configured properly,
    those issue types will have a test case section that can be used to link the test
    cases to the tickets. Now, let''s observe the following steps to link the test
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, a Story issue type has been configured
    as a requirement. Hence, it has a Test Cases section that enables users to either
    create a new test case or link an existing test case to the story. The following
    screenshot has a test case, `SCRUM-11`, which is linked to the story `SCRUM-14`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1a08f7de-d3d8-480a-98a2-0ea9dba99617.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Create Test Case option will open a Create issue page where you can create
    a new test case and it will link to the story automatically. In order to link
    the existing test case, click on the Link Test Case button and, as shown in the
    following screenshot, it gives you the option to Select Test Case and link it
    to the ticket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/acc56c2f-0334-4ee8-a634-899937013b06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the test case issued in synapseRT is another issue type, we also have
    the option to link a requirement from a test case issue type. In order to do so,
    open the test case issue and click on the Link button from the Select Requirement
    section. As demonstrated in the following screenshot, select the requirement by
    its ID and click on Link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bab3c53e-c1a9-433c-b825-3fe16055c8c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After linking the requirement, if you now go back to the Requirement section
    of the test case, you will see that Jira has created a link between the test case
    and a story from the test case issue type. As shown in the following screenshot,
    along with the Requirement section, we can also add details regarding the Test
    Suite the test case belongs to, as well as the Test Plan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/397ece6e-a70c-406c-b989-2faf543fdde4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also have an option in synapseRT, called Test Plan issue type, to view the
    test case coverage for the selected requirement. In order to view the coverage
    first, we need to add the same set of test cases to the requirement issue type,
    as well as in the test plan. After that, if you open the test plan issue, you
    can view the test case coverage from the Requirement section, as shown in the
    following screenshot. In this case, the requirement coverage is 100.0%, since
    all test cases planned to the requirement are linked to the requirement issue
    type, as well as added in the test plan to verify the functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/26543c70-1074-4ebb-a5bd-0073427559cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Zephyr, we can establish the relationship between the requirement issue type
    and test cases by linking the issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, first create a requirement issue type in Zephyr. On the
    Create issue screen, there is a field called Linked Issues. Click on it. This
    reveals the following screenshot, from where related issues—in our case, a test
    case—can be linked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/da2abfd0-2ffe-4f42-a23c-3c4bc4b2e458.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we are done linking all the test cases to the requirement issue type, the
    links can be viewed from the Issue Links section. Now, since the test case in
    Zephyr is also an issue type, by following the same steps, we can link requirements
    to the test case issue. ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the case of Test Management for the Jira plugin, we can add test cases to
    the requirement issue type from the Traceability section. This section provides
    multiple options to either create or link test cases, or even test cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the + icon from the Traceability section of the Story issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select an option, Add Existing Test Case. This shows the following screen for
    selecting the existing test cases. It shows all the existing test cases in the
    Add Existing Test Cases window. Select the checkbox for the desired test cases,
    and click on the Add button to add these test cases to the requirement issue type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/17f7595f-37dd-477a-be7c-9679dcfdb39d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After linking the existing test cases to the story type, all the linked test
    cases can be viewed from the Traceability section. As shown in the following screenshot,
    in the case of the story `TESTP-2`, we have linked two test cases, `TESTP-T2(1.0)`
    and `TESTP-T3(1.0)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6e210080-671f-4d52-9f56-ee1568707ca3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also link requirements from the test cases. In order to do so, navigate
    to the Tests section, open any existing test, and click on the Traceability tab.
    Click on the Add button in the Issues section and select the desired issues that
    you want to link to the test case. An issue can be searched from within the current
    or another project. Click on the checkbox for the desired issue that you want
    to link and then click on the Add button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the requirement, it should be displayed under the Traceability
    | Issues section. As shown in the following screenshot, we have linked the `TESTP-T2`
    test case with the `TESTP-2` requirement from the Test Case Traceability section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ea832f1e-5008-4a98-94a1-9ca0758176bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how we can effectively manage and document requirements
    in Jira. We saw how Jira issues can be utilized to track requirements for the
    testing phase. We then understood how test coverage can be traced using the traceability
    matrix. Furthermore, we created the traceability matrix using each of the Jira
    plugins by linking requirements to the relevant test cases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how Jira can help monitor and control projects
    using reports, and we will detail the various reports offered by Jira.
  prefs: []
  type: TYPE_NORMAL
