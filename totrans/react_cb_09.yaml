- en: Apollo and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first GraphQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Twitter timeline with Apollo and GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL is an application-layer query language that can be used with any database.
    It is also open source (MIT license) and was created by Facebook. It mainly differs
    from REST in that GraphQL does not use endpoints, but queries instead, and is
    supported by most server languages, such as JavaScript (Node.js), Go, Ruby, PHP,
    Java, and Python.
  prefs: []
  type: TYPE_NORMAL
- en: We'll now look at the main differences between GraphQL and REST.
  prefs: []
  type: TYPE_NORMAL
- en: 'GraphQL:'
  prefs: []
  type: TYPE_NORMAL
- en: The queries are readable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can evolve the API without versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can avoid doing multiple round trips to fetch related data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to limit the set of data we need
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST:'
  prefs: []
  type: TYPE_NORMAL
- en: In REST, everything is a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST is schemaless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need versions to evolve the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's hard to limit the set of data we need
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need data from different resources, you need to make multiple requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first GraphQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we are going to create a contacts list in which we will save
    the name, phone, and email addresses of our friends.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create a directory for our project and
    initialize a new `package.json` file installing `express`, `graphql`, and `express-graphql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to install `babel-preset-env` and `babel-cli` to use ES6 syntax in
    Node. Also, we need to create a `.babelrc` file :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our first GraphQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an `index.js` file for our Express server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'File: index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run `babel-node index.js` in your terminal, you should be able to see
    the node server running on port 3000:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5edc3ef2-a083-479b-85ac-1951698bc0ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to include our `express-graphql` library and import the `buildSchema`
    method from `graphql`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our `expressGraphQL` and `buildSchema`, let''s create our first
    GraphQL server with our first query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our data file for our contacts list. We can make a data directory
    and a `contacts.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: data/contacts.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now need to add the methods to get the data (`getContact` and `getContacts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: index.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you run the server and you go to the URL `http://localhost:3000/graphql`,
    you will see the GraphiQL IDE and, by default, the message query, if you click
    on the play button you will observe the data with the message "First message":'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a59fbac-07c1-410f-9653-0925ce08df1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now in the GraphiQL IDE, we need to create a query and add a query variable
    for our `contactId` to get a single contact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b32ab4c1-5303-4fc4-ac6a-390545ab3c91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for our `getContacts` query, we need to pass the `contactName` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5074e9a1-1678-4f5c-a50a-f83f82cc87eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, if we send John as the `contactName`, the query will return
    the two rows we have with the names John Smith and John Brown. Also, if we send
    an empty value, we are going to get all the contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a10fbcf4-b026-4ad8-949d-244c0cbb23fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we can start using fragments, which are used to share fields between
    `queries`, `mutations`, and `subscriptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f616bcb-3ddb-4a81-9143-30ac8e349e55.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we define our fragment with the fields we want to get and then
    in both queries (`contact1` and `contact2`), we re-use the same fragment (`contactFields`).
    In the query variables, we pass the values of the contacts we want to get data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mutations are also essential because they help us to modify our data. Let's
    implement a mutation and update a contact by passing the ID and the fields we
    want to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add our mutation definition and create the function to update our
    contact; our code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our mutation in GraphiQL and update a contact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/23b94c48-b325-4a54-a7b5-92ba24d6c675.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Twitter timeline with Apollo and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apollo is an open source infrastructure for GraphQL. There are other libraries
    for handling GraphQL, such as Relay and Universal React Query Library (URQL).
    The main problem with these libraries is that they are mainly for React applications,
    while Apollo can work with any other technology or framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to create a new React application using `create-react-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to eject the configuration by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `eject` command will bring all the configuration of `react-scripts` to your
    local project (Webpack configuration).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to install these dev packages as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to add a `resolutions` node to specify the exact version of GraphQL we
    are going to use. This is to avoid version conflicts. The current version of `graphql`
    is `0.13.2`. Of course, you will need to specify the latest version of GraphqQL
    at the time you''re reading this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Also, we need to remove the `babel` node in our `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, finally, we need to create a `.babelrc` file with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump to the actual recipe, we need to create first our GraphQL backend
    server to create all the queries and mutations we will need to complete this project.
    We'll see how to do that in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our GraphQL backend server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started with the backend server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, inside the `apollo` project (the one we created with `create-react-app`),
    we need to create a new directory called `backend`, initialize a `package.json`
    file, and create inside the `src` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to install these dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `package.json` file, we need to modify our start script to use `nodemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we need to create our `app.js` file, in which we are going to create our
    GraphQL middleware:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/app.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have included our typeDefs and resolvers from `types` folder,
    so let''s create that directory and create our Query file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/types/Query.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have created our Query file, we need to add our resolvers. These are
    the functions that are executed for each Query and Mutation. We are also going
    to define our custom `DateTime` type using `GraphQLScalarType`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/types/Resolvers.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to create our tweet model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/model/Tweet.jsYou need to have MongoDB installed and running to use
    this project. If you don''t know how to do this, you can look at [Chapter 8](41637135-a49d-409a-bbbe-2928609e749b.xhtml)*,
    Creating an API with Node.js Using MongoDB and MySQL.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the moment of truth! If you followed all the steps correctly you should
    see the GraphiQL IDE working if you go to `http://localhost:5000/graphiql`, but
    it''s possible you''ll get this error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ff5648d9-00ed-40d2-b6b9-9000eda3bc43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Usually, this error means that we are using `graphql` in two projects (frontend
    and backend) and npm does not know which version will use which. This is a tricky
    error, but I will show you how to fix it. First, we remove the `node_modules`
    folder from both of our projects (frontend and backend). Then we need to add a
    `resolutions` node in both of the `package.json` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: At the same time, we also need to remove the caret (`^`) from the `graphql`
    version in both `package.json` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we must delete the `package-lock.json` and `yarn.lock` files (if you have
    them).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we install the dependencies again, it''s a good idea to update npm to
    the latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, just to be safe, let''s remove the npm cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And now you run `npm install` again (first on the backend), and after you run
    the project with `npm start`, if everything works fine you should see the GraphiQL
    IDE working properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8c8eb593-bfdb-48d0-84fd-92cef490ace7.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our backend ready, let''s start working on our frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first file we need to modify is the `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We connect our backend endpoint to `ApolloClient`, and we wrapped our `<App
    />` component with `<ApolloProvider>` (yes, this is similar to Redux Provider).
    Now let''s modify our `App.js` file to include our main component (`Tweets`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is create our GraphQL queries and mutations.
    To do this, we need to create a new directory called `graphql` and other two directories
    inside it, one for `mutations` and the other for `queries`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/graphql/queries/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, you see it properly, it''s not a typo! The function is called without
    parentheses and using only backticks (`gql`YOUR QUERY HERE``). The `getTweets`
    query is already defined in our backend. We are executing the `getTweets` query,
    and we will get the fields (`_id`, `tweet`, `author`, and `createdAt`). Now let''s
    create our mutations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/graphql/mutations/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'I always like to do refactors and improve things, that''s why I created two
    helpers for the `Query` and `Mutation` components from `react-apollo`. First,
    let''s create two directories, `shared` and `shared/components`. First, this is
    our Query component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/Query.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Mutation component should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/Mutation.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our helpers ready, let''s create our components for Tweets, Tweet,
    and CreateTweet. This is our `Tweets` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Tweets.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is our `Tweet` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Tweet.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `CreateTweet` component is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/CreateTweet.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, but no less important, this is the file for the styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Tweets.css'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you did everything correctly and you run the frontend and backend (each
    on a different terminal) then you can run the project at `http://localhost:3000`,
    and you should see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7feb894b-1343-4945-8b92-a2d0931b6508.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can create new tweets by writing them in the text area and clicking
    on the Tweet it! button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff42cba1-738f-44f6-a5cd-8343f15abbd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the order of tweets is descending. This means that the newest
    tweets are posted at the top. If you want to edit a tweet, you can click on the
    edit icon (the pencil):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4aff01c3-e14d-47e2-9272-2709d3fd4ae3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The way to save the changes is by removing the focus (onBlur) on the textarea,
    and now we can see the updated tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/37cb4645-bcce-49e8-9e99-7537e6c3a7e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, if you want to delete a tweet, then click on the trash icon (I have
    removed the second tweet):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d342e424-cabe-45a6-99e5-bfaff86550a4.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the mutations are very easy to implement, and with the helpers,
    we have simplified this process.
  prefs: []
  type: TYPE_NORMAL
- en: You're probably thinking that there's some way to use Redux with GraphQL, but
    let me tell you that it is possible that GraphQL will replace Redux because we
    have access to the data through the ApolloProvider.
  prefs: []
  type: TYPE_NORMAL
