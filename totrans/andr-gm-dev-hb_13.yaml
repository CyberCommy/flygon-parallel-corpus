- en: Chapter 13. Third-Party Integration, Monetization, and Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android game development or any other smartphone game development is not complete
    without implementing background services. Background services help the game spread
    and perform to reach the next level.
  prefs: []
  type: TYPE_NORMAL
- en: The style of game development has changed a lot with time. New styles and monetization
    techniques have been introduced. New game services have been created to support
    these techniques. Many tech companies start their own services to create a new
    industry. Any work we do professionally is mainly to earn our living, and the
    gaming industry is not an exception. However, this industry is targeting entertainment,
    fun, and interactivity between a device and the user. Developers make money based
    on this. All the third-party integration and services help developers monetize
    the game, which directly or indirectly helps increase revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Services can be any background support that is not game specific and can improve
    the experience of a game. Mostly, services use the Internet and device hardware
    and software programs. Mostly, a server-based service works with the application
    to provide the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have a detailed look at these aspects in this chapter through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplayer implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytic tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android in-app purchase integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android in-game advertising
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monetization techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning the game revenue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-acquisition techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Featuring Android games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing Android games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Play Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google is currently the largest platform for Android applications. Moreover,
    Google is the owner of the Android OS. So, there can be no one better than Google
    to be the service provider for the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Services is a background service for all Android devices to access
    all Google service product APIs. It was launched in 2012 to support Android development
    and take it to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most used services in the Google Play Services package are:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google IAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Analytics is a service to track each and every event in the game. This
    can reveal user behavior, user actions, the number of users playing per day, each
    user's playing time, and so on. So, no data can go unnoticed by the developer.
    This analytic data helps developers identify the critical sections in the game.
    With this help, the developer can improve the game for better experience.
  prefs: []
  type: TYPE_NORMAL
- en: Significance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not always possible to track down each and every issue in the game in
    the testing or play testing phase. When the game gets bigger, with a huge user
    base, then it is more likely that unknown issues will be exposed. Google Analytics
    helps in these fields, not only with the current behavior of the user, but with
    the game performance as well.
  prefs: []
  type: TYPE_NORMAL
- en: Integration tips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Analytics is mostly used to track game events. So, the tracking events
    must be decided very carefully. The triggering points must also be placed in a
    strategic way. The developer might not require all the events and behavior data.
    More tracking may be even harmful to the application, as there would be more data
    use and more processing in the game.
  prefs: []
  type: TYPE_NORMAL
- en: The developer should always prioritize events. Events should be tracked based
    on the game flow design. They should then be validated by user action.
  prefs: []
  type: TYPE_NORMAL
- en: From the monetization point of view, it should always be a priority to track
    when the user is hitting the pay wall or which section is being visited more.
    A simple advertisement in the most visited section may increase the application's
    revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Best utilization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The best utilization of the Google Analytics tool is no different than any other
    Android application analytics tool. This tool is the best possible way to track
    user movement, and through the data the developer can easily predict the user's
    motive or intention with the game.
  prefs: []
  type: TYPE_NORMAL
- en: Google IAB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the modern world of gaming, there are many methods to monetize the application.
    In-app billing is one of the most popular methods. Google Play Services comes
    with the Google In-App Billing tool. This tool is directly associated with Google
    Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Through this tool, the developer can design some purchasable contents inside
    the game. For users, it is very easy to purchase from the built-in store of the
    Android application.
  prefs: []
  type: TYPE_NORMAL
- en: The Google IAB model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s have a quick look at the three purchasable options in Google IAB. We
    will have a detailed look at them later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Consumable items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-consumable items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumable items
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Users can purchase this item multiple times from the store. Google does not
    keep track of these kinds of items. The most common example of this type of item
    is in-game virtual currency. Many games are designed around virtual currency,
    and most of the time, this factor is the backbone of game monetization.
  prefs: []
  type: TYPE_NORMAL
- en: Non-consumable items
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: They are basically one-time purchases for the user. Google always keeps track
    of these purchases made by a user for any application through Google IAB. Even
    when a user uninstalls the application and reinstalls it, it is possible to restore
    the non-consumable purchases to the user's account.
  prefs: []
  type: TYPE_NORMAL
- en: The most common item under this category is game modes. In many games, there
    are some open modes and some can be purchased. This system also works with the
    try-and-buy monetization aspect.
  prefs: []
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Subscriptions are basically a time-based model of monetization. This is mainly
    used in typical service-based applications such as music channels, TV channels,
    library channels, and so on. Very few games, however, use subscriptions to monetize.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Google IAB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Play Services comes with IAB APIs. The developer needs to register the
    application on Google Play Store to get live access. This system works with item
    IDs, which are called SKUs. Each SKU represents an item in the Play Store. The
    developer may not use all the SKUs created in the Google Play account for a particular
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and disadvantages of Google IAB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have already noted that Google IAB provides a platform to implement a direct
    digital purchasing system within the application. This saves great effort and
    time for both developers and consumers. Let''s have a quick look at the advantages
    of Google IAB:'
  prefs: []
  type: TYPE_NORMAL
- en: Google IAB provides a direct platform to purchase application components or
    services within the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google IAB simplifies the monetization aspect of an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google IAB provides multiple options for payment for consumer convenience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google IAB stores and manages purchases for non-consumable items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is hassle-free implementation and excellent customer support for Google
    IAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easy refund process is completely managed by Google IAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So far, Google IAB has proved to be an excellent system for both developers
    and consumers or users. However, there are several sectors where Google IAB is
    still lagging behind. Now, let''s have look at the sectors where Google IAB needs
    to improve:'
  prefs: []
  type: TYPE_NORMAL
- en: Google IAB only provides billing services through Google Play Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google IAB still does not support carrier billing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not every user is willing to provide credit card information to Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite these issues, Google IAB is still the most popular platform for billing
    for Android developers. Google has started including carrier billing services
    within Google IAB, which may prove to be the most significant feature.
  prefs: []
  type: TYPE_NORMAL
- en: Google Leaderboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Leaderboard is a platform for games and similar competitive applications where
    each and every user can track their progress among other users. Leaderboard has
    proved to be the driving force of many games. Google Play Services comes with
    an in-built Leaderboard system for Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Significance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having a leaderboard integrated in games is always a plus, as it helps users
    compete with each other even when the game is not multiplayer. It is human psychology
    to try to become superior to others. Using this feature, there can be more user
    engagement than usual. However, the competing criteria on the leaderboard must
    be chosen carefully.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of a leaderboard-driven game is Candy Crush. Users are very active,
    playing the simple game to stay ahead of their friends on the leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Google Leaderboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no separate Google Leaderboard package. This can be included by integrating
    Google Play Services itself. However, Leaderboard has to be set up in the Google
    games account to use it.
  prefs: []
  type: TYPE_NORMAL
- en: The developer can choose any parameter or calculation to store leaderboard data.
    Google Leaderboard supports data from multiple leaderboards for a single game.
    Most of the developers use this feature efficiently to show different leader lists,
    depending on the time period, region, or some other customized parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Variety of leaderboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Primary variations of Google Leaderboard are of two types:'
  prefs: []
  type: TYPE_NORMAL
- en: Social Leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public Leaderboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social Leaderboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Social Leaderboard lists only players who are connected with the player's circle.
    For this feature, the player must log in to their respective Google accounts.
    This has a limitation to players who have played and choose to share their activity
    in the same application.
  prefs: []
  type: TYPE_NORMAL
- en: Public Leaderboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Public Leaderboard stores data for players who choose to post scores publicly.
    Otherwise, this data won't be shown by Google Leaderboard, even if they have better
    score than the existing players on the public Leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: Options for storing and displaying leaderboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Leaderboard storage can be classified into two types, based on ascending and
    descending order. In terms of Google Leaderboard, they are called:'
  prefs: []
  type: TYPE_NORMAL
- en: Larger is better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller is better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A score is always a numeric value, which is again classified into three formats:'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric value format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currency format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of a numeric value, the developer can specify the decimal placement.
    In the case of the time format, the developer needs to pass the score in milliseconds,
    and it will be automatically interpreted in the *hh:mm:ss* format. In the case
    of the currency format, the developer needs to specify the currency and its unit
    value beforehand. The Leaderboard will only take values in a unit and convert
    it to the specified unit format.
  prefs: []
  type: TYPE_NORMAL
- en: Leaderboard can have unique icons to display or indicate a unique leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The push notification service can be achieved through the **Google Cloud Messaging**
    (**GCM**) service. Let's have a quick look at the cloud messaging architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are primarily four components used to implement push notifications for
    Android using GCM:'
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GCM service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The database stores the registration details of a client or target device with
    the GCM service. So, each device is required to register only once. The same details
    are used to send push notifications to the registered target devices.
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Developers need to put up a server to achieve and control push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Target device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A target or client device is the platform where the message is pushed from the
    GCM. Each target device has a unique registration ID through the GCM. Without
    registration, a target device cannot receive any notifications.
  prefs: []
  type: TYPE_NORMAL
- en: GCM service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The GCM service is responsible for registering devices and pushing messages
    to them. The server requests the GCM service with a list of registration IDs and
    customized messages. GCM is only responsible for pushing the given content to
    specified devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GCM service](img/B05069_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Workflow of the push notification system using GCM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, let''s discuss the push notification workflow. In the preceding diagram,
    the push notification system works according to the indicated indexes (for example,
    **a**, **b**, **c**, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**: The client or target device requests GCM to register with the application
    ID and sender ID.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**b**: GCM sends the registration ID back to the sender after a successful
    registration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**c**: The device sends the registration ID to the developer''s server.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**d**: The server stores the registration ID to the database.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**e**: The developer initiates the process to the push notification with customized
    content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**f**: The server fetches the registration ID list from the database.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**g**: The database provides all the registration IDs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**h**: The server requests GCM with developer-specified content and registration
    IDs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**i**: GCM pushes the same content to the respective target devices according
    to their registration IDs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating push notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Integrating push notifications is done in three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Application integration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GCM setup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server setup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application integration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The developer needs to set up a GCM client for the application, which is the
    medium of GCM communication. Here is a brief about client-side development for
    GCM communication services.
  prefs: []
  type: TYPE_NORMAL
- en: 'It requires a set of manifest permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The manifest will also require declaration of the GCM receiver and GCM service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's have a look at the registration process for an application with GCM. Registration
    can be done in many ways, depending on the development style. We will follow the
    simplest processes within the main Android activity and store the registration
    ID for one-time registration of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the required declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The registration code should be put inside `onCreate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s define `GCMService.java` to handle the GCM message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: GCM setup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Google Play Services comes with a GCM system. GCM has to be enabled from the
    Google API console. Each registered application has its own unique application
    ID, which is required to configure the push notification system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to enable GCM for the Android project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a project on the Google Cloud platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Google API to generate an API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a server key for Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable GCM for the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Server setup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Notification server development can be implemented by any cloud connection
    server technology. The developer needs to set up the application server by satisfying
    the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: The application server should be able to communicate with the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application server should be able to send properly formatted requests to
    the GCM connection server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application server should be able to handle application requests and resend
    them using exponential backoff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application server should be able to store the API key and client registration
    tokens in a secured database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Significance of push notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Push notifications are an inevitable part of modern day game development. Push
    notifications are used for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: User retention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing user behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternative communication channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User retention
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Push notifications provide users with current updates and information on the
    game. There are many cases where the user downloads a game and then forgets about
    it. Sometimes, users leave games in between. Push notifications help these users
    regain interest in the game. This procedure improves user retention.
  prefs: []
  type: TYPE_NORMAL
- en: User control
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Through device settings and the notifications center, the developer can control
    the content that the user will see, and the user can be navigated accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing user behavior
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using user controls, the developer can track user behavior upon notifications.
    Depending on the user actions, the developer gets to know what the user likes
    and dislikes.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative communication channel
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are several ways to communicate with end users. Mostly, users do not often
    communicate with the developer. So, a one-way communication channel proves to
    be fruitful. A push notification system fits the role perfectly. It is the best
    possible medium to deliver messages about the latest news, updates of the game,
    offers, and features. In some design models, it can be used to deliver game status
    information to users.
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There was a time when multiplayer was limited to conventional PC and console
    gaming. The modern day gaming industry consists of extensive use of social networking.
    This automatically opens up the opportunity for multiplayer gaming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Improved hardware systems and continuous network support with modern connectivity
    have enhanced the world of multiplayer gaming. Multiplayer gaming can be classified
    mainly into two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time multiplayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn-based multiplayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time multiplayer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Real-time multiplayer is just like playing sports together, where every player
    reacts to any action by the game or other players at the same time. For example,
    a football game is played by 22 players, and each and every player acts as per
    the situation at the same time. If we imagine the same scenario from a digital
    gaming perspective, it will be called a real-time multiplayer.
  prefs: []
  type: TYPE_NORMAL
- en: In the general structure of multiplayer games, there should be a server where
    the gameplay runs with all the logics and calculations. The server interacts with
    the database when required, and the user does not have any control.
  prefs: []
  type: TYPE_NORMAL
- en: The client or terminal devices are the only medium that interacts with users.
    However, in many cases there are some extra layers used on the client side to
    perform a few actions without server validation to keep the spontaneity of the
    real-time multiplayer game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the general architecture of the real-time multiplayer system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Real-time multiplayer](img/B05069_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The best practice to implement real-time multiplayer is to introduce the sync
    layer on each terminal application layer. This layer acts as a medium between
    the terminal device application and server.
  prefs: []
  type: TYPE_NORMAL
- en: Turn-based multiplayer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Turn-based multiplayer is a system where only one player gets the chance to
    play at a time. For example, in the game of chess, when a player plays their turn,
    the other player remains idle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, a turn-based multiplayer system is also controlled by a server.
    A server can be one of the clients itself. However, the execution layers work
    as shown in the following diagram. Many times, a database is also an optional
    part of the architecture. The server is responsible for activating UI control
    on particular terminal devices and should only listen to that device. Let''s have
    a look at the architecture diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Turn-based multiplayer](img/B05069_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are more types of multiplayer models possible in Android gaming. Until
    now, we have discussed only the models implemented over the Internet. Local multiplayer
    gaming is also possible in Android. We can classify these games into the following
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Single-screen real-time multiplayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass and play turn-based multiplayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local network multiplayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-screen real-time multiplayer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This kind of multiplayer game is dependent on the hardware features, other configurations,
    and feasibility. The device must support multiple inputs at a single point of
    time to support real-time multiplayer. For Android touch devices, it is recommended
    that the developers target large-screen devices to provide more space for control
    for multiple players at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Pass and play turn-based multiplayer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a type of single-screen turn-based multiplayer model. In this model,
    all the participants should manage the play order manually among themselves to
    synchronize with the game turn.
  prefs: []
  type: TYPE_NORMAL
- en: Here, one player passes the same device to the next player after playing their
    turn. Then, the next player reacts to the current state of the game. In this model,
    the game state does not change until the completion of each turn.
  prefs: []
  type: TYPE_NORMAL
- en: In both single-screen multiplayer models, no network connectivity is required,
    and the database is an optional component that can be stored within the device
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: Local network multiplayer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both real-time and turn-based multiplayer models can be implemented using local
    network connectivity. In this case, one of the participating devices must act
    as a server and control the gameplay over local network connectivity using Bluetooth,
    Wi-Fi, or an infrared connection.
  prefs: []
  type: TYPE_NORMAL
- en: Analytic tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already discussed Google Analytics. There are several other analytics
    services other than Google. We will discuss analytics from a general point of
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics tools are inevitable for games. They help developers understand users
    better, which has a direct effect on game quality, user retention, and monetization.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement of analytics tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers have been collecting and analyzing data from users in many forms
    for years. Often, we have encountered forms and analysis enquiries about many
    products. This data helps the developer or manufacturer modify or improve the
    product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have look at the variety of data from analytics and its importance through
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: User behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game crash reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game event triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gameplay session timing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gameplay frequency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game balancing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User retention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piracy prevention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User behavior
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analytic tools can track each and every movement of every user. This data can
    be further analyzed, and user behavior inside games can be guessed. This behavior
    validates the **meta** design of the application or game.
  prefs: []
  type: TYPE_NORMAL
- en: Game crash reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Almost all the analytic tools can report every crash event with the crash cause
    and location. However, an encoded package of game code cannot reveal the location
    completely, where the class and its members are encoded in meaningless symbols.
  prefs: []
  type: TYPE_NORMAL
- en: This helps developers identify the playing device and exact issue with the crash.
  prefs: []
  type: TYPE_NORMAL
- en: Game event triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developer can set triggers from the game itself to track any or every aspect
    of the game. These can be any event inside the game. It is a common practice for
    game developers to use this trigger system for the game start, game end, and a
    few strategic events such as IAP, advertisement display, mode selection (if any),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay session timing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analytic tools track gameplay timing by triggering two events between the application
    coming to the foreground or the application launch, and the application going
    to the background or the application exit. By calculating the time in between,
    analytic tools inform developers of the total amount of time when the user was
    inside the application in a single session.
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay frequency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is basically the average count for launching the gameplay per user. So,
    developers can have the data increase or improve the sessions. Developers can
    classify the frequency at a given time, such as daily frequency, weekly frequency,
    or monthly frequency.
  prefs: []
  type: TYPE_NORMAL
- en: Game balancing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Developers can collect data on user scores and playtime to detect the difficulty
    for each player. Then, developers can balance the game accordingly. However, every
    single player has a different ability and skill to play. Thus, developers must
    set some standards to balance the game properly globally.
  prefs: []
  type: TYPE_NORMAL
- en: User retention
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User retention is one of the most important aspects for developers to generate
    revenue from the game. This means the number of users playing the games repeatedly.
    User retention can be also time based, such as daily, weekly, and monthly.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy prevention
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of Android gaming, there might be a model of premium or freemium
    games. In this model, the user buys the game or some components inside the game
    with real currency. Piracy is an old practice for many hackers or trackers. They
    can hack into the payment system or decode the security layers to provide the
    paid game or paid components for free. Piracy is a major problem for developers
    in terms of generating revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics tools can check the game and provide the user details to validate
    the purchase, which adds an extra security layer to prevent game piracy.
  prefs: []
  type: TYPE_NORMAL
- en: Monetization aspects of analytic tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Analytic tools are useful in all the points mentioned earlier. All the features
    are connected to the game revenue directly or indirectly. Some features help developers
    improve the game quality, and the rest of the features can increase game revenue
    directly or can help developers plan for more revenue with the help of analytic
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the analytic data, the developer can perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify popular regions of the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify a user's likes and dislikes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate and improve the metagame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track paying users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track and count advertisement display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify popular regions of the game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Identifying the most popular regions of a game helps the developer plan more
    revenue in a region by advertising or through some paid content. Especially for
    free or freemium games, it is extremely necessary to find the part of the games
    that users are visiting frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Identify a user's likes and dislikes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There might be several segments of a game. Users might like some of them and
    dislike others. Unless the developer publishes the game or performs a play test
    on a decent amount of users, it is very hard to predict a user's likes and dislikes.
  prefs: []
  type: TYPE_NORMAL
- en: Through analytics data, the developer can easily point out the segments that
    users like or dislike. Developers can change the strategy or plan for a better
    update for the game.
  prefs: []
  type: TYPE_NORMAL
- en: Validate and improve the metagame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A game generally has two segments of development: the gameplay and metagame.
    The metagame design is done by predicting user acceptance of the model. Only analytic
    tools can validate this prediction after launching the game.'
  prefs: []
  type: TYPE_NORMAL
- en: Track paying users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developer can track which user is hitting a paywall and who is actually
    paying for the game through analytic tools. This data has a direct impact on game
    revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Track and count advertisement display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developer can actually track the count of advertisement calls and advertisement
    display. Thus, it becomes easier to predict revenue from advertisements and the
    developer can even plan for better filling of advertisements.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful analytic tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have discussed Google Analytic tools under Google Play Services. There are
    many analytic tools available in the market that are as good as Google Analytics
    and can be a good option for replacement. There is no restriction for developers
    in terms of using analytics tools. Most of the tools are free and easy to use,
    and the developer can even integrate multiple tools for different purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a quick look at such tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flurry** ([https://dev.flurry.com](https://dev.flurry.com))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GameAnalytics** ([http://www.gameanalytics.com/](http://www.gameanalytics.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crashlytics** ([https://fabric.io/kits/android/crashlytics](https://fabric.io/kits/android/crashlytics))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AppsFlyer** ([https://www.appsflyer.com/](https://www.appsflyer.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apsalar** ([http://support.apsalar.com/](http://support.apsalar.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mixpanel** ([https://mixpanel.com/android-analytics/](https://mixpanel.com/android-analytics/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localytics** ([https://docs.localytics.com/index.html](https://docs.localytics.com/index.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appcelerator** ([http://www.appcelerator.com/mobile-app-development-products/](http://www.appcelerator.com/mobile-app-development-products/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flurry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most popular game analytics tool is Flurry. Flurry has almost each
    and every feature for analytics purposes. This lightweight SDK is easy to install,
    and the developer can start getting data right away.
  prefs: []
  type: TYPE_NORMAL
- en: GameAnalytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GameAnalytics is a free and powerful analytics tool for game developers. It
    helps you understand player behavior and build better games through analytics
    data on a dynamic dashboard typically designed for games.
  prefs: []
  type: TYPE_NORMAL
- en: Crashlytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Crashlytics is the most powerful and efficient bug-reporting tool. It can intercept
    any error and exception with the maximum possible details. Crashlytics is lightweight
    and easy to use for developers.
  prefs: []
  type: TYPE_NORMAL
- en: AppsFlyer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AppsFlyer is a single real-time dashboard for an all-in-one marketing tool with
    analytics features. It basically uses AppsFlyer's **NativeTrackTM** to provide
    analytic support for games.
  prefs: []
  type: TYPE_NORMAL
- en: Apsalar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apsalar is mostly used for advertising attribution. It gives a good look at
    the game marketing ROI. It also helps find out which marketing campaigns are working
    and which ones need to be avoided. They also offer great marketing tools such
    as **SmartTags**, which gives the developer a more detailed analysis of marketing
    efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Mixpanel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mixpanel's benefit is mainly for non-technical people who can easily create
    custom queries, without knowing SQL. The powerful interface allows developers
    to segment users and see which segments are working best for the game.
  prefs: []
  type: TYPE_NORMAL
- en: Localytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Localytics provides most of the functions for data analysis. The platform provides
    real-time analytics, remarketing data, attribution, and more. Localytics's messaging
    features differ from other general analytic tools.
  prefs: []
  type: TYPE_NORMAL
- en: Appcelerator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Appcelerator is an enterprise suite for mobile app testing, deployment, and
    analytics. The basic feature of this tool is an interactive tablet-based mobile
    app, which can be used on multiple platforms and provide immediate insight into
    the five key mobile metrics: retention, engagement, adoption, quality, and conversion.'
  prefs: []
  type: TYPE_NORMAL
- en: Android in-app purchase integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-app purchase is a feature through which the application's component can be
    bought from inside the application with the help of several payment gateways.
    This is one major aspect of monetization for Android games.
  prefs: []
  type: TYPE_NORMAL
- en: What are in-app purchases?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the modern day gaming industry, freemium games are booming. This means users
    can play the game for free, but they have to pay for certain components or for
    game progression advantages. This model has been proved to be a success, as it
    supports both free and premium concept in terms of digital gaming.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchases serve this purpose perfectly. We have already discussed Google
    In-App Billing services, which is just a means of in-app purchasing through Google.
    But there are other services that support the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, a game should offer in-app purchase items to give users a choice
    to buy the following types of content:'
  prefs: []
  type: TYPE_NORMAL
- en: Unlock certain features in the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy certain items to get an advantage over other players
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlock some modes inside the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase ease of play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove annoying advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many types of users who have different requirements from the same
    game with different skillsets. In-app purchase opens up the opportunity for all
    of them to play the game as per their convenience, and meanwhile, developers make
    some money.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchase options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You learned that Google IAB is not the only option for Android in-app purchases.
    There are a few more that have almost the same features. There are different service
    types based on the payment methods. Users may not opt for one option to pay, but
    if several options are given, then it would certainly increase the chance of purchasing.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is always a good practice to provide the maximum possible options to the
    user for payments. Several purchase options are required for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: All users might not have a credit card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All users might not have a debit card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All users might not have activated net banking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All users might not have sufficient talk-time balance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All users might not like to directly use real currency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The developer should provide the maximum possible options to overcome these
    issues and make users use real cash for the game. Currently, available billing
    services support multiple ways of payment, but we can categorize the services
    into two major divisions:'
  prefs: []
  type: TYPE_NORMAL
- en: Store billing services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Career billing services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store billing services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Store billing services are based on the stores from which the user downloads
    the game. The game should be connected to a store with provided APIs in order
    to access this feature. We already discussed that Google IAB is a type of store
    billing service that includes several methods of paying, including credit card,
    debit card, selective career billing, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: However, Google IAB is not the only store billing service available. The most
    mentionable store billing, other than Google, is Amazon billing service, which
    provides almost the same features as Google.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon billing services
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Amazon billing service works exactly like Google IAB. However, API and integration
    is slightly different to Google IAB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The developer needs to include the `com.amazon.device.iap` package to integrate
    Amazon IAP. This process has mainly three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ResponseReceiver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PurchasingService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PurchasingListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResponseReceiver
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Amazon IAP is an asynchronous process. It works as a background service that
    requires a response receiver to be implemented. The developer needs to declare
    the receiver in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: PurchasingService
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `PurchasingService` class is used to retrieve various types of information
    about the user, execute purchases, and notify the Amazon purchasing service about
    the fulfillment of a purchase.
  prefs: []
  type: TYPE_NORMAL
- en: PurchasingListener
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `PurchasingListener` interface is used to process asynchronous callbacks
    from the Amazon server. The application UI thread handles all the callbacks, which
    is why the developer should keep a check on the running process on the UI thread.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon IAP is similar to Google from a feature and integration point of view.
    There are other stores that may support their own billing services. There is another
    option of implementing the developer's own payment portal. However, most developers
    of Android games prefer to stick to mainstream billing services.
  prefs: []
  type: TYPE_NORMAL
- en: Career billing services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some game developers use career billing services for monetization. Career billing
    means the user pays developers for in-app products from their mobile balance,
    which is managed by the connection provider.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Google IAB has started supporting career billing within store billing.
  prefs: []
  type: TYPE_NORMAL
- en: Types of in-app purchases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Developers can design their IAP products in three types mainly. These types
    of products depend on game design and game genre. The types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Consumable items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-consumable items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumable items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These items are meant to be consumed within the application. In the case of
    Google IAB, these products are termed non-managed products.
  prefs: []
  type: TYPE_NORMAL
- en: The billing service provider does not keep track of this consumption by the
    user. Mostly, in-game currency, power ups, extra life, and so on are the main
    genres of this type of products. Users can buy the same item multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Consumable items must be defined on the billing server to make them understandable
    to the billing service.
  prefs: []
  type: TYPE_NORMAL
- en: Non-consumable items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Non-consumable items are those that do not expire on use. Billing servers keep
    track of these purchases.
  prefs: []
  type: TYPE_NORMAL
- en: When a user purchases this type of item and uninstalls the application, then
    upon reinstallation, these purchases can be retrieved. This means the user needs
    to buy this product only one time throughout the application's life.
  prefs: []
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a purchase of time or usability of some features inside the application.
    There are very limited uses for subscription in games. However, this is a good
    option to provide some feature or services for a limited time or limited use.
  prefs: []
  type: TYPE_NORMAL
- en: Within the span of the duration, the user may not buy the same item, however
    there is a renewable feature that allows the user to subscribe again for the same
    thing upon expiration of the service period.
  prefs: []
  type: TYPE_NORMAL
- en: Android in-game advertisements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-game advertisements are the most significant factor in monetization for both
    free and freemium games. Developers use their game platform to show advertisements
    in order to generate revenue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: Advertisers submit the advertisements to various advertisement agencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each advertisement has a certain value and time duration limitation, which is
    called campaign cost and campaign time, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer subscribes with those agencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer integrates the agency advertisement platform to include and show
    advertisements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer sets the parameters for advertisement types, genre, and level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the application triggers an advertisement call to the agency server, it
    looks for the available or running advertisement campaigns that match the criteria
    predefined by the developer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon successful match, the server sends the advertisement elements to the client
    device application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application loads the advertisements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application shows the advertisements on request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server keeps a count of successful display of advertisements and calculates
    revenue as per the campaign cost.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer receives the revenue after meeting certain criteria from agencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requirement for advertisements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Completely free games have no source of revenue other than advertisements or
    sponsorships. We will only look at advertisements here. Let's understand the requirement
    for advertisements inside a game.
  prefs: []
  type: TYPE_NORMAL
- en: We all work to earn our living. Android is an open source platform, and most
    of its user base consists of free users. This means developers have only one option
    left. Compared to other monetization aspects, advertisements are a good platform
    to depend on.
  prefs: []
  type: TYPE_NORMAL
- en: Advertising as an industry is old and has proven its sustainability in the market.
    In-game promotion is just another way to display advertisements. This way, it
    is always a win-win situation for both developers and advertisers.
  prefs: []
  type: TYPE_NORMAL
- en: Terminologies in advertisement monetization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will discuss typical game advertisement platforms. The developer needs
    to be familiar with a few terms to get used to in-game advertisement:'
  prefs: []
  type: TYPE_NORMAL
- en: eCPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPC/CPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fillrate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eCPM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**eCPM** stands for **effective cost per mile**, which is the result of a calculation
    of advertisement revenue generated by a banner or campaign, divided by the number
    of ad impressions of that banner or campaign expressed in units of 1,000, which
    is represented by the letter *M* at the end.'
  prefs: []
  type: TYPE_NORMAL
- en: CPC/CPA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**CPC** stands for **cost per click**, which means the developer will earn
    a certain amount if the user clicks on displayed advertisements. **CPA** stands
    for **cost per action** which is similar to CPC.'
  prefs: []
  type: TYPE_NORMAL
- en: CPI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**CPI** stands for **cost per impression**, which means the developer will
    earn a certain amount if any advertisement is successfully displayed inside an
    application. Generally, these earnings are lower than CPC.'
  prefs: []
  type: TYPE_NORMAL
- en: RPM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**RPM** stands for **Revenue Per Mile**. It indicates the total revenue generated
    from a thousand interstitial advertisements. RPM includes all types of revenue
    models. RPM is calculated by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*RPM = (Total revenue) / (Ads served / 1000)*'
  prefs: []
  type: TYPE_NORMAL
- en: Fillrate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Fillrate** is the percentage of successfully served advertisements by the
    server. We already know that the application requests the advertisement server
    for advertisements. This is termed a "request." If a server successfully serves
    advertisements upon request, then the advertisement is termed an "impression".
    So we have our fillrate, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Fillrate = (Impressions/Requests)*100%*'
  prefs: []
  type: TYPE_NORMAL
- en: Types of advertisements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few types of advertisement styles that can be used for Android
    games:'
  prefs: []
  type: TYPE_NORMAL
- en: Banner advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interstitial advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-game dynamic advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Banner advertisements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Banner ads are generally ads with a continual display feature, which users cannot
    close or hide. However, there is a very low campaign value for CPI, but CPC is
    acceptable. Many developers nowadays avoid using banner ads, as it occupies a
    significant space of the game screen. Banner ads are displayed at a given rectangular
    shape at the edge of visible display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Possible banner display positions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Top left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bottom left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bottom center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bottom right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The size variations as per the current scenario are shown in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Banner type | Target | Size in pixels |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Standard banner | Phones and tablets | 320 x 50 |'
  prefs: []
  type: TYPE_TB
- en: '| Large banner | Phones and tablets | 320 x 100 |'
  prefs: []
  type: TYPE_TB
- en: '| IAB full-size banner | Tablets | 468 x 60 |'
  prefs: []
  type: TYPE_TB
- en: '| IAB leaderboards | Tablets | 728 x 90 |'
  prefs: []
  type: TYPE_TB
- en: '| Smart banner | Phones and tablets | Screen width x 32Screen width x 50Screen
    width x 90 |'
  prefs: []
  type: TYPE_TB
- en: Interstitial advertisements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An interstitial advertisement is a full-screen clickable image advertisement
    based on various campaigns. Normally, an interstitial has a defined close button
    for users to close the advertisement and go back to the game.
  prefs: []
  type: TYPE_NORMAL
- en: When an interstitial ad is shown, the ad view comes to the foreground, pushing
    the main game view to the background. So, each time the game thread triggers an
    interrupt for the game thread.
  prefs: []
  type: TYPE_NORMAL
- en: This type of advertisement is widely being used in games because of decent revenue.
    Game monetization design has a significant role in interstitial advertisements.
    Each advertisement placement has to be strategically based on the analytic data.
  prefs: []
  type: TYPE_NORMAL
- en: Integration best practice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Integrating interstitial advertisements should follow a few logical ad displaying
    cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integration best practice](img/B05069_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is always a good practice to follow the cycle. An ad should be loaded and
    be in ready state before being displayed. Upon closing an advertisement, the next
    ad should be loaded immediately to avoid load delay.
  prefs: []
  type: TYPE_NORMAL
- en: Video advertisements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Video advertisements are one of the latest procedures to generate revenue.
    This type of advertisement has the maximum rate. However, the availability of
    video advertisements is comparatively less than image interstitial ads. There
    are two types of ads:'
  prefs: []
  type: TYPE_NORMAL
- en: Full length ads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short length ads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full length ads
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Full length ads are generally longer. These types of ads are generally skippable,
    which provides an option to skip after a certain amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: Short length ads
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Short length ads are comparatively smaller and have no option to skip.
  prefs: []
  type: TYPE_NORMAL
- en: In-game dynamic advertisements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concept provides an option to show any available ad banner within the predefined
    position and size. No matter what the actual ad size is, this mechanism resizes
    the ad in the given size within the application.
  prefs: []
  type: TYPE_NORMAL
- en: Monetization techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Monetization is basically a system or strategy to generate revenue from any
    application. The developer needs to decide their game monetization model based
    on the game requirements. We can classify these models into four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Premium model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Freemium model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try-and-buy model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premium model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a typical pay-before-play model. The user needs to pay for the game
    before downloading it. Normally, these games do not have in-app purchases or in-game
    advertisements. This is just a one-time buy for the user for the gameplay, and
    normally all users have the same opportunity for game progression.
  prefs: []
  type: TYPE_NORMAL
- en: Free model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This kind of model offers the game for free but may include in-game advertisements
    to generate revenue. The user can play the complete game for free but does not
    have any extra privileges for any actions.
  prefs: []
  type: TYPE_NORMAL
- en: Freemium model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This model offers the game for free, and the game can be played completely without
    any real currency spent on it. However, this model offers in-app purchases to
    provide extra content or facility for game progression.
  prefs: []
  type: TYPE_NORMAL
- en: Try-and-buy model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This model is years old. However, very few developers prefer using this model.
    Developers create a separate build of the same game with different features.
  prefs: []
  type: TYPE_NORMAL
- en: The free version usually has limited content or limited use. This version may
    or may not contain advertisements. The full version of the game usually follows
    a typical premium game model. Sometimes, developers use in-app purchases within
    the free version of the game to unlock the full version, which is a smart way
    to do the job, as it eliminates the hassle of creating and managing two different
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Planning game revenue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As far as we have discussed, we have a fair idea of game revenue generation.
    A game developer cannot keep on developing games without generating revenue or
    having strong financial support. Let's discuss game planning now, to keep a developer
    developing games.
  prefs: []
  type: TYPE_NORMAL
- en: Revenue versus profit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most new game developers do not know that revenue and profit are two different
    things.
  prefs: []
  type: TYPE_NORMAL
- en: Revenue is the gross amount of money that a game generates directly from users.
    Making a game may cost money to developers, and each third-party medium may charge
    a certain percentage of revenue or some amount for the services. After all the
    required payments and cuts, the remaining amount is called profit. So, high revenue
    does not mean high profit.
  prefs: []
  type: TYPE_NORMAL
- en: However, without generating revenue, there cannot be any profit. So, the developer
    must plan revenue in order to generate profit.
  prefs: []
  type: TYPE_NORMAL
- en: Revenue sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we know that generating revenue is necessary. To generate revenue, the
    developer must know about the possible revenue sources. We will discuss the main
    sources here:'
  prefs: []
  type: TYPE_NORMAL
- en: Advertisement revenue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app purchase revenue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advertisement revenue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Especially for free and freemium games, advertisements are one of the main sources
    of revenue. There are a lot of advertisement agencies that serve advertisements
    through ad servers. There may be separate values for separate advertisement campaigns.
  prefs: []
  type: TYPE_NORMAL
- en: There is another platform called ad mediation. This platform provides advertisements
    from different agencies. Sometimes, this platform helps find the highest rate
    among available advertisements. This special feature is called real-time bidding.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchase revenue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a way of generating revenue for mainly freemium game models. The developer
    provides the game for free, but certain content and features are kept locked inside
    the game. Once the user is used to the game and feels like spending extra bucks
    to get a strong hold of the game, they use in-app purchases.
  prefs: []
  type: TYPE_NORMAL
- en: Planning revenue through in-app purchases entirely depends on the game design
    and market behavior. Some game models demand content, some demand features, and
    a few demand both.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchases can be made with several billing and purchasing services, which
    we have discussed. However, choosing a particular service may have an effect on
    revenue generation. So, the developer should always study market trends before
    tying the knot with a billing service provider.
  prefs: []
  type: TYPE_NORMAL
- en: Other revenue sources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other than advertisements and in-app purchases, there are other sources of revenue
    too. Offerwall and coupon systems are two other options. The developer might opt
    for branding and sponsorship for a game. This will certainly help make more money.
    However, these are not exactly means of revenue sources from a general point of
    view.
  prefs: []
  type: TYPE_NORMAL
- en: As the industry modernizes, new sources of revenue may come up to help developers
    grow and make better games.
  prefs: []
  type: TYPE_NORMAL
- en: Regional variations of revenue plan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several types of users. Mostly, the game industry market varies with
    region, age group, and gender. If the developer plans to increase revenue, then
    they must consider these factors in a revenue plan.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not always possible to use all of these factors at one time or
    in a single plan. Mostly, developers in the current industry vary revenue plans
    on the basis of region. It has been established in the market that user behavior
    varies a lot based on region.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Asian user action and behavior may vary from African or American
    users, so does the spending capacity. So, the developer should plan game revenue
    according to the spending capability and spending behavior of users. In some regions,
    users do not pay real cash. In those cases, the developer must have a different
    approach to generate revenue.
  prefs: []
  type: TYPE_NORMAL
- en: User base variations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have already said, the user base varies with region. For example, racing
    is one of the most played genres on average throughout the world. However, generating
    revenue is not the same. In many regions, people value time more than money, and
    in other regions, it may be the opposite. So, if the purchasing element inside
    a racing game helps users save some time for game progression, it might not work
    in all regions. Some people like to spend more time to achieve that progression
    instead of paying. The developer has to have a plan to convert that play time
    into revenue by some means.
  prefs: []
  type: TYPE_NORMAL
- en: User behavior variations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typical user behavior data around the world indicates a lot of variation. One
    of the major variations is game genre. For example, cricket is an extremely famous
    and hot genre in a few countries or regions that are used to the game and connected
    to the game professionally, mentally, or sentimentally. In the American region,
    this game is not much appreciated. For the same behavior, baseball is not so popular
    among Asian people. The developer should always analyze the user behavior data
    of the maximum possible users to plan for the maximum revenue generated from a
    game.
  prefs: []
  type: TYPE_NORMAL
- en: User acquisition techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a game has no users, it is as good as scrap. This does not mean that the
    game quality or design is bad. In the Android gaming market, more than 5 million
    games are published. Hundreds of games are being published every day, which is
    increasing the competition.
  prefs: []
  type: TYPE_NORMAL
- en: In this immense crowd, a single game may disappear, irrespective of its quality,
    but due to having a poor or no marketing strategy. A game can only be successful
    if it has a significant number of users and good retention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at few of the user acquisition techniques through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Game promotion channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game blogs and forum discussions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paid user acquisitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game promotion channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to promote the game in the market. There are some game
    promotion channels that advertise in various mediums. A specific game genre channel
    promotes the same kind of games. Let''s look at few of these mediums:'
  prefs: []
  type: TYPE_NORMAL
- en: YouTube channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android forums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sports forums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook promotions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter and other social platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube channels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several YouTube channels that review and promote Android games. Many
    users follow certain channels for better games. Developers can approach these
    channels to review and promote their games in a way that users can get to know
    about the game.
  prefs: []
  type: TYPE_NORMAL
- en: A good game review from such channels can get developers a significant amount
    of users. However, such channels might charge developers for reviewing their games.
    Thousands of users may be found from such channels.
  prefs: []
  type: TYPE_NORMAL
- en: Android forums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are hundreds of Android forums available, and there are thousands of active
    participants that can be found talking about games, apps, development style and
    standards, and so on. Such forums are also good platforms to promote Android games.
    However, developers should be specific to the topic, and the game should have
    the potential to be talked about. A few hundreds of users can be achieved through
    such channels.
  prefs: []
  type: TYPE_NORMAL
- en: If a developer uses any Android-specific special feature and has implemented
    something new through technology, such forums are an excellent medium to reach
    out to users who are technology enthusiasts and hungry for new implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Sports forums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many forums for specific sports. This method works mostly for games
    in the sports genre. The developer should talk to other members of a forum about
    games of the same sport. For example, if a developer has made a cricket game,
    then the game should be posted and promoted through cricket forums.
  prefs: []
  type: TYPE_NORMAL
- en: This method has an added advantage. As the forum is specific to the same sport,
    then the developer might find a few people who are experts in the sport and can
    share their valuable opinion about the game, which may make the game better.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook promotion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Facebook is currently the largest social platform, with billions of users. It
    is a common practice for developers to use this platform for promotion of games.
    Social networking can find a significant number of users for a game.
  prefs: []
  type: TYPE_NORMAL
- en: Each game should have a page that should be maintained properly by the developer.
    This page is one of the communication mediums between the user and the developer.
    Such pages can be used to talk about the features and elements of the game so
    that new users have a good idea about the game even before they start playing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter and other social platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Twitter and other social platforms are also useful for game promotion and increasing
    the user base. Timely tweets about game updates and features can help increase
    the user count.
  prefs: []
  type: TYPE_NORMAL
- en: A social platform need not necessarily be a digital or web platform. It can
    be anything, like a social event in real life. Many developers organize events
    to showcase their games or participate in various events and competitions to get
    recognition. Good recognition for a good game can help gain more users.
  prefs: []
  type: TYPE_NORMAL
- en: Game blogs and forum discussions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Game blogs and creating forums for developed games can help in user acquisition.
    However, this technique works after the game develops a decent user base so that
    there can be a significant number of people who will participate in the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: The developer can create a game blog for the game, where users can share their
    opinions, criticism, or suggestions for the game. This can make a game famous,
    which always helps gain users.
  prefs: []
  type: TYPE_NORMAL
- en: Paid user acquisition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many marketing agencies that find users for games. Usually, such agencies
    charge developers for user acquisition. If the developer has the strength to spend
    real cash to gain users, then this is probably the best possible solution.
  prefs: []
  type: TYPE_NORMAL
- en: User acquisition charges may vary with region. The developer needs to research
    more on this, depending on the game genre and type; the users gained can repay
    the developer with more revenue. Sometimes, the wrong choice of promotion and
    a wrongly acquired user base may lead the game to disaster.
  prefs: []
  type: TYPE_NORMAL
- en: Other techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the preceding techniques, there are several methods to gain users.
    Developers may come up with their own ideas for promoting the game. Some of them
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Many times, the developer approaches users individually to promote games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many times, the game is promoted verbally through friends and family
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many times, developers run campaigns for the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The developer may approach a good publisher to get help acquiring more users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, celebrities are used to promote the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no fixed path for promoting a game and acquiring users. It is always
    a good habit to keep all the options open and aim for the maximum possible outcome.
  prefs: []
  type: TYPE_NORMAL
- en: User retention techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a good user base might not be enough to generate decent revenue to
    gain profit out of the game. Hence comes the term **user retention**. This means
    the number of users who are playing the game repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: Users may download a game, and after a few game sessions, they may never come
    back. In another scenario, the user may come back again and again to the game.
    User retention is calculated on time parameters such as weekly or monthly use.
    This means how many users are coming back to the game within the given time period.
  prefs: []
  type: TYPE_NORMAL
- en: Free and freemium game revenue mostly depends on user retention, because the
    developer converts the time spent inside the game into revenue through several
    revenue generations plans. That is why user retention becomes important for doing
    business with games.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many techniques to improve user retention other than the core metagame.
    Let''s discuss the major techniques through these points:'
  prefs: []
  type: TYPE_NORMAL
- en: Daily bonus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaderboards and achievements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offerwall integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily bonus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Daily bonus is the most popular technique among game developers for user retention.
    In this system, the user gains something extra for coming back to the game each
    day. Consecutive days of playing rewards the user with more items and elements.
  prefs: []
  type: TYPE_NORMAL
- en: This system motivates users to keep coming back to the game. Thus, a developer
    gets more game session time to convert it to revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Leaderboards and achievements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Leaderboards and achievements are used extensively to retain users. Both give
    users competition and motivation to make progress in the game. To make progress
    in the game, users must come back to the game and spend time within the game.
  prefs: []
  type: TYPE_NORMAL
- en: Offerwall Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The developer uses some real-world offers to keep users inside the game. Real
    offers such as coupons and discounts always interest users. It provokes them to
    come to the offerwall frequently. Offerwalls not only help retain users, but also
    help generate more revenue from various offer campaigns.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Push notifications can inform users about the latest information and updates
    about the game. Even if the user is not playing the game, push notifications help
    them gain interest in the game, which may make the user start playing again.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, a user downloads a game and forgets about it. In such a case, a push
    notification reminds the user to play the game. It also informs them about their
    progress inside the game.
  prefs: []
  type: TYPE_NORMAL
- en: Frequent updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The developer should keep updating the game frequently to keep up with the chart
    and to be in the sight of the user. This indirectly attracts more users and helps
    retain existing users.
  prefs: []
  type: TYPE_NORMAL
- en: Every game store informs existing users about the latest update information
    for a game or application so that users can update their game and keep playing.
  prefs: []
  type: TYPE_NORMAL
- en: Featuring Android games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A successful game means both profits and fame. A game can be profitable with
    a good monetization design and marketing. However, getting famous is not that
    easy. A game becomes famous if it gets featured in various places.
  prefs: []
  type: TYPE_NORMAL
- en: 'A game can be featured with the help of the following qualities and criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Creativity and uniqueness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User reviews and ratings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revenue amount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creativity and uniqueness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many game critics and reviewers present in the game industry. There
    are many articles, blogs, magazines, and sites that follow, review, and talk about
    games. Game creativity and uniqueness are the biggest factors for such mediums.
    The quality of the game depends on these in terms of game art, game design, and
    playability. A good art style, good design, and playability can make a game get
    featured by game stores, magazines, or blogs. In such ways, the developer can
    make a game famous, which may lead to more users and revenue.
  prefs: []
  type: TYPE_NORMAL
- en: User reviews and ratings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After publishing the game, the game's fate depends on users. New users cannot
    be attracted to the game if the game receives bad reviews and a poor rating. Hence,
    the game will not be featured and gain momentum. The developer should always keep
    an eye on the game ratings and user reviews. The developer should actively respond
    to the issues that users are having and be thankful for the good ratings and reviews.
    Often, it has been noticed that the game does not do well in the early stages
    of publishing. However, with a positive attitude towards user reviews, they perform
    well in the later stages.
  prefs: []
  type: TYPE_NORMAL
- en: Download count
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download count is another game featuring criteria. As soon as the download count
    increases, there is more probability that the game will get featured by the store
    itself. However, the rating is also a factor in such featuring. The developer
    should concentrate on increasing the number of downloads as soon as possible to
    get featured or to be in the top list.
  prefs: []
  type: TYPE_NORMAL
- en: Revenue amount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Android game can be featured with the amount of revenue generation in the
    top grossing list. Being in the top grossing list means users are paying for the
    game or the game is generating a significant amount of revenue. Getting featured
    in the top grossing list always increases the visibility of the game, which indirectly
    generates more download count and revenue. However, to remain in the top list,
    the developer should always update the game as per user requirements and heavily
    focus on user retention.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing Android games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, you''ve learned how to reach users and how to make revenue out of the
    game. However, these are the steps after the game gets published in the market.
    There are two ways through which the developer can publish the game:'
  prefs: []
  type: TYPE_NORMAL
- en: Self publishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing through publishers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a quick look at this segment of game development.
  prefs: []
  type: TYPE_NORMAL
- en: Self publishing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When users publish under their own banner and name, it is called self publishing.
    In this case, developers keep 100% of the equity in the games and own the game
    IPs themselves. Self publishing games are totally controlled by developers. Developers
    take full responsibility for the game, game ratings and reviews, game revenue,
    and user satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing through publishers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, a developer does not have bandwidth to take full game responsibility
    after publishing it. In this case, the developer may approach established publishers
    to publish the game. A few times, publishers have their own terms and conditions,
    and requirements for the game in order to publish it. The developer needs to keep
    up with the conditions to enjoy less responsibility and better marketing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned about the whole game development cycle in this chapter. Developers
    should be capable of taking the right decision for the game to taste success.
    It is a well-known fact that success does not come easily. This chapter shows
    all the factors of a game that need to be taken care of to achieve success.
  prefs: []
  type: TYPE_NORMAL
- en: Making a good game is not enough; making a unique game is not enough; making
    good graphics is not enough; and having a good design is not enough. A game's
    developers must take help from other third-party services if they are not capable
    of doing it on their own. Using social platforms is also a must.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, choosing the right publishing place and targeting the correct audience
    for the game can bring success. In the case of Android-specific gaming, there
    are already established publishing houses, stores, and other third-party service
    providers available. The developer needs to assemble all of them carefully after
    the game has been made. Otherwise, there is a strong possibility that a good game
    might be lost in the crowd of millions of Android games.
  prefs: []
  type: TYPE_NORMAL
