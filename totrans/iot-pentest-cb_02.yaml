- en: IoT Threat Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with thread modeling concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of threat modeling a device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling firmware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling an IoT web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling an IoT mobile application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling IoT device hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling IoT radio communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you have a software development background or system and networking
    background, you may be familiar with attack surfaces or vectors within each respective
    area. Attack surfaces refer to the many ways in which a device can be compromised
    via a source of input. This source of input may be via hardware, software, or
    wirelessly. Generally speaking, the more attack surfaces a device contains, the
    higher the likelihood of compromise. Attack surfaces are entry points into the
    IoT device. Sometimes, these entry points are inherently trusted by the IoT device
    or application. Each attack surface discovered will have an associated risk, likelihood,
    and impact. In essence, attack surfaces are threats which have the potential to
    negatively affect a device to perform unintended actions. In order to discover
    each attack surface, theoretical use cases will need to be thought of before testing
    has taken place, or before software is written. This exercise is known as threat
    modeling.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will discuss the basic principles of threat modeling and how it
    will help us with exploiting flaws in IoT devices. Recipes on how to conduct basic
    threat models for firmware, web applications, mobile applications, device hardware,
    and radio communication will be performed to get you started on the right track.
  prefs: []
  type: TYPE_NORMAL
- en: While the recipes in this chapter will give you an introduction into threat
    modeling, there are several books written on this topic. If supplemental reading
    is needed in order to understand the concept of threat modeling, by all means
    pick up a book on threat modeling or refer to third-party sources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with threat modeling concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat modeling is more or less associated with software development as an exercise
    that occurs after the software design phase but prior to software deployment.
    These exercises are known to take place in software development, system, network,
    and security teams upon major software releases by either drawing a full end-to-end
    data flow diagram or a data flow and network diagram to determine how to employ
    security controls and countermeasures. These drawings can be physically on a white
    board or via software tools such as Microsoft's free Threat Modeling Tool and
    web applications such as [https://draw.io](https://draw.io/) which have a number
    of template diagrams that can be used for a variety of purposes. The idea is to
    map out all of the device's functionalities and features to their associated technical
    dependencies. It is up to the company or individual how threat model formats are
    drawn out. Keep in mind that threat models can get really granular when breaking
    down components individually. The most important aspect of threat modeling is
    iteratively updating the document due to threats changing when features are added
    as well as when more knowledge is acquired about a certain technology employed.
  prefs: []
  type: TYPE_NORMAL
- en: Once the IoT device attack surface is drawn out, threat use cases have to be
    identified using methods such as STRIDE, which will be discussed later. These
    threats will need to be rated with a rating system to identify the risk of discovered
    threats. There are several threat rating systems, depending on the industry; however,
    the most common are DREAD and the **common vulnerability scoring system** (**CVSS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'CVSS offers a more granular rating system with 14 scoring areas bundled in
    3 groups: base, temporal, and environmental. Each of the three groups is subdivided
    into subareas that consist of six for base, three for temporal, and five for environmental.
    CVSS can be quite useful for reporting vulnerabilities to vendors but may not
    be as straightforward for threat modeling purposes. To learn more about CVSS,
    please visit [https://www.first.org/cvss/user-guide](https://www.first.org/cvss/user-guide).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The DREAD rating system stands for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Damage potential**: How great is the damage if exploited?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproducibility**: How easy is it to reproduce the attack?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploitability**: How easy is it to attack?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Affected users**: Roughly how many users are affected?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discoverability**: How easy is it to find the vulnerability?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DREAD has a risk rating system ranging from 1-3\. 1 is low risk, 2 is medium
    risk, and 3 is high risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table describes each rating number for each rating category:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Rating** | **High (3)** | **Medium (2)** | **Low (1)** |'
  prefs: []
  type: TYPE_TB
- en: '| **D** | Damage potential | Can subvert all security controls and get full
    trust to take over the whole IoT ecosystem. | Could leak sensitive information.
    | Could leak sensitive information. |'
  prefs: []
  type: TYPE_TB
- en: '| **R** | Reproducibility | The attack is always reproducible. | The attack
    can be reproduced only within a timed window or specific condition. | It''s very
    difficult to reproduce the attack, even with specific information about the vulnerability.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **E** | Exploitability | A novice attacker could execute the exploit. | A
    skilled attacker could make the attack repeatedly. | Allows a skilled attacker
    with in-depth knowledge to perform the attack. |'
  prefs: []
  type: TYPE_TB
- en: '| **A** | Affected users | All users, default configurations, all devices.
    | Affects some users, some devices, and custom configurations. | Affects a small
    percentage of users and/or devices through an obscure feature. |'
  prefs: []
  type: TYPE_TB
- en: '| **D** | Discoverability | Attack explanation can be easily found in a publication.
    | Affects a seldom-used feature where an attacker would need to be very creative
    to discover a malicious use for it. | Is obscure and unlikely an attacker would
    discover a way to exploit the bug. |'
  prefs: []
  type: TYPE_TB
- en: 'The STRIDE model groups threats into six categories in order to formulate questions
    to discover possible threats. The six threat categories are derived from the acronym
    STRIDE which is described as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spoofing identity**: Spoofing is attempting to gain access to a system by
    using a false identity. This can be accomplished using stolen user credentials
    or a false IP address. After the attacker successfully gains access as a legitimate
    user or host, elevation of privileges or abuse using authorization can begin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tampering with data**: Tampering is the unauthorized modification of data,
    for example, as it flows over a network between two computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repudiation**: Repudiation is the ability of users (legitimate or otherwise)
    to deny that they performed specific actions or transactions. Without adequate
    auditing, repudiation attacks are difficult to prove.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information disclosure**: Information disclosure is the unwanted exposure
    of private data. For example, a user views the contents of a table or file he
    or she is not authorized to open, or monitors data passed in plain text over a
    network. Some examples of information disclosure vulnerabilities include the use
    of hidden form fields, comments embedded in web pages that contain database connection
    strings and connection details, and weak exception handling that can lead to internal
    system level details being revealed to the client. Any of this information can
    be very useful to the attacker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of service**: Denial of service is the process of making a system
    or application unavailable. For example, a denial of service attack might be accomplished
    by bombarding a server with requests to consume all available system resources
    or by passing it malformed input data that can crash an application process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of privileges**: Elevation of privilege occurs when a user with
    limited privileges assumes the identity of a privileged user to gain privileged
    access to an application. For example, an attacker with limited privileges might
    elevate his or her privilege level to compromise and take control of a highly
    privileged and trusted process or account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional details for using STRIDE can be found via the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx](https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx)
    [https://msdn.microsoft.com/en-us/library/ff648641.aspx](https://msdn.microsoft.com/en-us/library/ff648641.aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A great threat modeling approach is one provided by Microsoft which uses a
    multiple step process to determine the severity of threats introduced by a new
    application or system. The threat modeling process steps are outlined using the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed0ffd64-8085-4b47-b865-5cf8067b086b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additional reading on Microsoft''s threat modeling process can be found via
    the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://msdn.microsoft.com/en-us/library/ff648644.aspx](https://msdn.microsoft.com/en-us/library/ff648644.aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: We will apply STRIDE and DREAD to perform threat modeling exercises from a black
    box perspective and break down components in each recipe for an IoT device. When
    beginning any type of security testing, it is always best to threat model beforehand
    in order to ensure proper coverage of testing has taken place. It can also be
    fun to think of all the potential threat possibilities and categorize them as
    a brain exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To step through ongoing threat model recipes in this chapter, we will utilize
    Microsoft's free Threat Modeling Tool and diagrams drawn from [https://draw.io](https://draw.io/).
    At the time of writing, Microsoft's Threat Modeling Tool 2016 can be downloaded
    from [https://www.microsoft.com/en-us/download/details.aspx?id=49168](https://www.microsoft.com/en-us/download/details.aspx?id=49168).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will work with Microsoft''s Threat Modeling Tool as it''s
    quite simple to draw network diagrams with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start Microsoft''s Threat Modeling Tool 2016\. Select the Create A Model option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b865a51c-3a5a-48ed-ade5-d1b933660e30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Get familiar with the Stencils the tool provides to demonstrate devices, transport
    communication, as well as trust boundaries for inputs and outputs. Microsoft does
    provide a user guide on the different Stencils and options when the tool is downloaded
    although it is not required reading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As of the 2016 version of Microsoft's Threat Modeling Tool, custom templates,
    and Stencils can be created to correlate threats more accurately.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a09af89d-24b2-4be3-8192-c0896586f372.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each of the Stencil properties can be modified according to device, network,
    or application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77b68beb-07ce-4c88-bff2-89f52a0a459d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, we would normally identify an IoT system''s assets from a high
    level and zero in on areas of interest once more knowledge is acquired about the
    device through research or reverse engineering. Identifying assets can be written
    out in a table format or via brainstorming visually. The following table shows
    a basic inventory of assets and a brief description about each asset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **ID** | **Asset** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Doorbell | Smart doorbells monitor motion, alert users, and provide a
    real-time camera feed via applications. Data is stored on the doorbell itself
    as well as the application interfaces. The doorbell can connect via P2P with SIP/RTP
    if users view camera feeds locally in the network or connect to an application
    which utilizes STUN/TURN servers to gain access to camera feeds without the need
    for opening router ports. All data is transmitted to a router for remote access.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | LED bulbs | LED bulbs transmit data over Zigbee to an IoT hub to communicate
    over Wi-Fi. LEDs are controlled via an IoT hub or through an application interface.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Mobile applications | Mobile applications control various devices in
    the network. These mobile applications can be created directly from the device
    maker, or the IoT hub vendor. Device configuration data and secrets may reside
    in mobile applications. Data is transmitted via an API or web service to devices
    or backend systems. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | IoT hub | The IoT hub aggregates all protocols into one device for ease
    of administration. Users can control devices via the IoT hub''s application interface.
    An IoT hub can connect wirelessly to the router or plug in via Ethernet. IoT hubs
    store configuration data and may send data externally to backend systems for processing.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Router | All network communication is taken care of by the router. The
    router can block external access to devices or let traffic pass-through. |'
  prefs: []
  type: TYPE_TB
- en: 'The following figure demonstrates an overview diagram of a smart home environment
    with a smart doorbell, LED bulbs, mobile application, and an IoT hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/260726cf-3398-41ae-9d64-57657b46c7a6.png)'
  prefs: []
  type: TYPE_IMG
- en: The example steps described are only the beginning of a threat modeling exercise.
    We discussed downloading Microsoft's Threat Model Tool and getting familiar with
    Stencils and their associated properties. We then moved toward identifying assets
    for a smart home environment with brief descriptions based upon research or forms
    of reverse engineering. Next, an example architecture diagram was given to visualize
    the assets identified. Our next steps will be the meat of threat modeling that
    will help break down each portion of an IoT system to help identity attack points,
    methods, and impact if a portion of an IoT system was to be exploited. As with
    many aspects of security, the greater your familiarity with the platform you plan
    on testing, the higher the probability of compromise will be.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of threat modeling an IoT device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2016, we witnessed mass exploitation of IoT devices that consisted of IP
    cameras and **digital video recorders** (**DVRs**) that contributed to the world's
    largest **distributed denial of service** (**DDoS**) ever recorded. This DDoS
    was possible due to vendor negligence that could have been prevented by basic
    threat model exercises. Considering the prevalence of these types of devices on
    the internet and the risk they pose to the internet, we will conduct a threat
    modeling exercise and walk through the threat modeling process for a *connected
    DVR IP camera security system*. These connected security systems can be purchased
    by consumers or small/medium size businesses via e-commerce sites as well as through
    a number of electronic stores for a fairly low price. Connected DVRs are a good
    example of an IoT system because they contain a number of entry points into the
    device in order to view camera feeds and can be connected to a third-party provider
    to utilize remote viewing without opening ports on your network. Gathering details
    about an IoT device and its applications from a black box perspective can be a
    bit tricky. However, there may be plenty of resources on the product available
    online to help with this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start threat modeling the connected DVR, we will follow the aforementioned
    Microsoft multistep threat modeling approach.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - identifying the assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Document all of the DVR''s assets in order to understand where to focus more
    probable attacks in the interest of time. If we can identify assets that contain
    public vulnerabilities, this will save us time as attackers when exploiting the
    DVR system. The following table describes what we know about the DVR''s assets
    by reading the back of the box and user manuals when installing the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Asset** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | DVR | The DVR contains multiple camera channels to view live feeds, play
    back previous feeds, record videos, and take camera pictures. The DVR can connect
    to IP cameras or hardwired BNC cable cameras. A number of known network protocols
    and proprietary protocols are supported, such as TCP/IP, PPPoE, DHCP, Hik-connect
    Cloud P2P, DNS, DDNS, NTP, SADP, SMTP, NFS, iSCSI, UPnP, and HTTPS. The DVR has
    the ability to connect to a number of application interfaces to view camera feeds.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Cameras | Video streams are captured by enabled IP cameras and/or BNC
    cable cameras where data is transmitted to the DVR directly or wirelessly if an
    IP is available. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Firmware | Various camera features and configuration options are controlled
    via the firmware. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Web applications | The DVR contains a local web server that can be reached
    by accessing the IP address in a web browser. To view video feeds via the local
    web application, a plugin must be downloaded with a supported browser.The device
    has the option to view video feeds via the vendor''s cloud SaaS platform when
    configuring the device. A separate username and password is needed to enable the
    vendor''s cloud SaaS platform. The SaaS platform adds additional sharing features
    to third parties and access to other DVRs that may be purchased by the same owner.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Mobile applications | Android and iOS applications are available for
    configuring various settings as well as view and save video feeds remotely. All
    traffic from mobile applications is sent via the vendor''s API over the mobile
    device''s network connection. The mobile application connects to the vendor''s
    cloud environment to render back the camera feed. A username and password are
    needed to access the camera system via the mobile applications. |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Thick applications | Windows and OS X installers are available to view
    camera feeds and configure various settings. |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Device hardware | The DVR hardware contains multiple video outputs for
    VGA and HDMI. The device connects to the local network via an Ethernet cable.
    For storage, the device has one SATA connector for a hard drive with up to 6 TB
    in capacity. |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | Radio communication | The DVR connects to cameras via BNC connectors
    or via IP. No wireless communication is used; however, all traffic via the mobile
    applications is transmitted over wireless communication. |'
  prefs: []
  type: TYPE_TB
- en: Step 2 - creating an IoT device architecture overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating an architecture overview helps with visualizing how we can attack
    the DVR to misuse the system in an unintended manner. When creating an IoT device
    architecture overview, our goal is to document the DVR functionality and its applications
    as well as its physical architecture from the data we have gathered or learned
    in the process. We want to discover flaws in the DVR''s design and its implementation.
    This includes identifying the different technologies as well. Let''s break down
    how we should create an architecture overview into three tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Document the DVR functionality and features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an architectural diagram that details the DVR ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the technologies in use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with documenting DVR functionality and features, let's create a couple
    of use cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case 1**: User views camera feed in their local network via the local
    web application'
  prefs: []
  type: TYPE_NORMAL
- en: User installs the DVR and a camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User creates a user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User configures the DVR and camera settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User then connects the Ethernet to the DVR for network connectivity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User takes note of the DVR IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User then installs plugins and software provided by the vendor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User logs into to the DVR via a web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User selects the appropriate camera to view its feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Use case 2**: User views camera feed remotely via the mobile application'
  prefs: []
  type: TYPE_NORMAL
- en: User configures settings for platform access to the vendor SaaS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User downloads and installs the Android or iOS application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User creates a separate user for the vendor's SaaS application upon installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User logs into the mobile application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User scans a barcode with the mobile application under the DVR for vendor verification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User selects the appropriate camera to view its feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following architectural diagram of the preceding listed use cases provides
    details of components for the DVR ecosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e248e594-8362-4aab-9edc-655bb2c52245.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once an architecture diagram is drawn, the different technologies need to be
    identified and examined. Certain operating systems, protocols, and low-level libraries
    contain inherent vulnerabilities. It is important to document what technologies
    are utilized to further analyze and define possible threat cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technology** | **Details** |'
  prefs: []
  type: TYPE_TB
- en: '| DVR | Embedded Linux 3.10.0; communicates over HTTP and TCP/IP; custom web
    server (DNVRS-Webs); internal and external storage options. |'
  prefs: []
  type: TYPE_TB
- en: '| Wireless (Wi-Fi) router | 2.4 GHz Wi-Fi; 100 m range. |'
  prefs: []
  type: TYPE_TB
- en: '| Mobile apps | Android and iOS applications connect to a third-party service
    for viewing camera feeds. Data has the option to be stored locally on the device
    for pictures as well as user credentials. |'
  prefs: []
  type: TYPE_TB
- en: '| Communication protocol: HTTP | Clear text protocol used by default when viewing
    camera feeds. |'
  prefs: []
  type: TYPE_TB
- en: '| Communication protocol: HTTPS | Encrypted communication when viewing camera
    feeds but needs to be configured manually after generating an SSL certificate
    through the web interface. |'
  prefs: []
  type: TYPE_TB
- en: '| Communication protocol: 802.11 Wi-Fi | RF protocol for communication between
    IP cameras and the DVR. |'
  prefs: []
  type: TYPE_TB
- en: '| Communication protocol: RTSP | Network protocol used to stream camera feeds
    to applications. |'
  prefs: []
  type: TYPE_TB
- en: Step 3 - decomposing the IoT device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we analyze the application and protocol data flows through the DVR environment
    to locate vulnerable entry points into the device or client applications. We will
    look for locations that may have higher privilege access and document each possible
    entry point. An entry point that compromises the DVR's confidentiality and integrity
    will give us the upper hand as an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: These entry points will vary based upon the platform, technology, and protocol
    used but for this section, we will keep it at a high level. Also examine the various
    trust boundaries between the technologies and features as well. Once decomposing
    the DVR architecture is complete, you should have a better idea of attack surfaces
    and how data may be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is an example of decomposing an IoT DVR''s environmental
    data flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a43ea0b8-4241-4fd7-aaad-f9877d0d02b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the data flow is mapped out and complete, documentation of the entry
    points takes place:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DVR entry points** |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **#** | **Entry Point** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Embedded web app | The embedded web application provides an interface
    to view camera feeds and make changes to the camera details, configurations, as
    well as networking details for monitoring such as SNMP. The embedded web app uses
    SOAP/XML web services for transport communication over HTTP but has the option
    to use HTTPS by creating a self-signed certificate within the configuration menus.
    In order to view camera feeds, an executable is downloaded and within the executable
    file, an ActiveX plugin is installed in Internet Explorer.Note: Browsers other
    than **Internet Explorer** (**IE**) cannot view camera feeds. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Vendor web app | A connection is made from the DVR to a STUN/TURN server
    owned by the vendor in order to stream camera feeds without opening ports on a
    router. The vendor application is only available over HTTPS and uses web sockets
    for communication. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | DVR | The DVR connects to multiple web apps and mobile apps. An embedded
    web app is a server from the DVR itself and the vendor SaaS application connects
    to the DVR. Similarly, the vendor has a mobile app available but also has another
    third-party mobile app from the original manufacturer for the DVR (discovered
    through proxying). The DVR also has inputs via hardware peripherals as well as
    through its main PCB. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Firmware | The DVR utilizes firmware to control the device but may only
    be acquired via vendor technical support (per documentation). The embedded web
    server utilizes the firmware for managing actions. |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Cameras | Cameras can be added to a DVR by adding their IP address to
    the DVR configuration page. Cameras can also be added by manually plugging in
    cameras with a BNC connector. |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Mobile applications | Multiple mobile applications are available for
    download. Each mobile application can make configuration changes to the DVR and
    cameras. Credentials are required to use the mobile app. All traffic is fed to
    the vendor environment to view camera details and feeds. |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Wireless communication | Communication traffic from the mobile applications
    are over wireless technology; either 802.11 or cell provider networks (4G). |'
  prefs: []
  type: TYPE_TB
- en: Step 4 - identifying threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this stage, we have drawn out the data flow of a DVR system and identified
    entry points. We now have to identify the risks of each entry point as it relates
    to the user, the network, and the application as well, as the vendors who wrote
    the application code. From an attacker perspective, we want to identify threats
    which affect the network, applications, and hosts that may be exploitable and
    cause the following impact:'
  prefs: []
  type: TYPE_NORMAL
- en: Affect a large number of users utilizing this specific DVR system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compromise the vendor's infrastructure to induce mass exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compromise the DVR to pose a privacy risk to users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compromise the DVR to pose a safety risk to the DVR owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To help with identifying threats and categorizing them, let''s apply the STRIDE
    model to our DVR IoT system. We will be adding a couple of threat types in lieu
    of IoT-specific issues in the following table. This table is by no means exhaustive
    but should help with ideas when thinking about threats that may affect the holistic
    DVR environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat types** | **Analysis** |'
  prefs: []
  type: TYPE_TB
- en: '| Spoofing identity | Examine the system for threats related to the spoofing
    DVR identity and the ability for an attacker to overcome automated trust relationships
    between devices.Look for entry points that allow devices or users to manipulate
    trust relationships within DVR provisioning processes.Analyze authentication and
    authorization functions with the DVR''s application interfaces.Review the DVR''s
    app communication for the ability to forge requests. |'
  prefs: []
  type: TYPE_TB
- en: '| Tampering with data | Review the DVR''s messaging communication between applications
    and devices.Identify points in the DVR that provide an opportunity to tamper with
    the data at points of collection, processing, transport, and storage of data.Attempt
    to tamper with firmware and mobile app configurations to perform unauthorized
    actions. |'
  prefs: []
  type: TYPE_TB
- en: '| Repudiation | Identify attack entry points that allow illegal operations
    to take place without logging abilities.Disable web and mobile app tracing functionalities.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Information disclosure | Fuzz application parameters to influence application
    error disclosuresIdentify all clear text communications.Review DVR API communication
    HTTP response headers for versioning information.Identify all API endpoints and
    application backend technologies utilized.Review application data storage for
    unintended data leakage within clear text files. |'
  prefs: []
  type: TYPE_TB
- en: '| Denial of service | Perform functions such as forgot password to identify
    whether locking out users is possible.Test for account lockout policies within
    each DVR application interface.Examine the throughput of the DVRs network services
    to understand how attacks may withstand relevant DoS attacks.Examine the messaging
    structures (for example, data buses), data structures, improper use of variables
    and APIs used within the DVR''s components and determine whether there are vulnerabilities
    that would allow a malicious camera to drown out the transmissions of a legitimate
    camera or compatible DVR device. |'
  prefs: []
  type: TYPE_TB
- en: '| Privileged elevation | Examine the administration capabilities the DVR provides.
    Create lower application users and test for administrative access.Identify instances
    where there are weaknesses in the ability to segregate administrative functions
    from user-level functions within the DVR''s application and operating system.Identify
    weaknesses in the authentication methods employed by DVR nodes in order to design
    appropriate authentication controls into the system. |'
  prefs: []
  type: TYPE_TB
- en: '| Physical security bypass | Examine the physical protection mechanisms offered
    by the DVR and its cameras to identify weaknesses that may allow administrative
    console access. |'
  prefs: []
  type: TYPE_TB
- en: '| Supply chain issues | Understand the various technological components and
    their origins that make up the DVR system (for example, ODMs, hardware manufacturers,
    OEMs, and so on).Keep track of vulnerabilities related to any of the technology
    layers related to the DVR''s hardware and software components. |'
  prefs: []
  type: TYPE_TB
- en: 'Alternatively, we can simply list out threats from a high-level and later in
    the chapter, we will drill down to threats for each component. Some of the threats
    may be unknown or completely theoretical since we may not have all the insights
    but it''s important to brainstorm these ideas. To get the most out of identifying
    threats, pair up with a partner or make it a group exercise with others who are
    looking at attacking your specific IoT system of interest. The following are examples
    of high-level threats to our DVR system that an attacker could perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Remotely take over the DVR system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remotely view camera feeds (spy) without authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off camera recording playback features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track individuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Break into surrounding areas based upon intelligence gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install malware on the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain physical access and sabotage recordings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overload the DVR with requests to prevent usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdrop on DVR communications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 5 - documenting threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will document a few of the threat use cases we have identified in step
    4 with a description, threat target, attack technique(s), and any countermeasures
    that may be in place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could remotely take over the DVR system**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR customers, DVR network processes, DVR applications. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker intercept wireless communication, API communication,
    and/or network protocol communications for credentials or session cookies. Attackers
    can social engineer users into accessing their DVR via spoofed user interfaces
    or exploiting application vulnerabilities to add user accounts using cross-site
    request forgery (CSRF). |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | DVR locks out users for 30 mins if failed logins are attempted
    or too many requests are sent at one time. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could remotely view camera feeds without
    authorization** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR customers, protocols, and applications. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Acquire credentials or API calls to view cameras without
    authenticated access. Attacker can harvest session identifiers to hijack sessions
    to enable remote viewing of camera feeds. Attackers can socially engineer users
    into accessing their DVR feed. Attackers can exploit vulnerable clear text RTSP
    streams to access video feeds with tools such as Cameradar ([https://hub.docker.com/r/ullaakut/cameradar/](https://hub.docker.com/r/ullaakut/cameradar/)).
    |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Enforce multifactor authentication and make use of encrypted
    RTSP or SRTP streams. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attackers could turn off recording playback features**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR customers. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attackers can physically access the DVR system to apply
    changes. Attackers can socially engineer users into accessing their DVR. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Enforce authentication to sensitive features as well as
    multifactor authentication. |'
  prefs: []
  type: TYPE_TB
- en: Step 6 - rating the threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have identified and documented threats for our DVR, let's rate the
    threats with their likelihood as well as their possible impact using the DREAD
    rating system. Earlier in the chapter, we introduced the DREAD rating system but,
    as noted, there are other rating systems available to use. The rating values for
    each letter in DREAD range from 3 for high, 2 for medium, and 1 for low.
  prefs: []
  type: TYPE_NORMAL
- en: 'For DREAD, the final risk is ranked using the following ratings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Risk rating** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '| High | 12-15 |'
  prefs: []
  type: TYPE_TB
- en: '| Medium | 8-11 |'
  prefs: []
  type: TYPE_TB
- en: '| Low | 5-7 |'
  prefs: []
  type: TYPE_TB
- en: 'An example of a threat rating for a threat case in our DVR system is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could remotely view camera feeds without authorization**
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk rating score: High** | **13** |'
  prefs: []
  type: TYPE_TB
- en: Initially, threat modeling a holistic DVR system may be a bit more difficult
    when thinking of all threat cases due to all the different components. Although,
    once complete, you will have documented a number of potential high-risk vulnerabilities
    to focus on for testing. This will make it easier to prioritize vulnerabilities
    when testing an IoT system.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling firmware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we conducted a threat model of a DVR system and rated
    a threat case that would help with prioritizing vulnerabilities to test. In this
    recipe, we will go through threat modeling firmware for the same DVR system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we will use the free [https://draw.io](https://draw.io/) online
    diagram software to help with demonstrating relationships in diagrams within firmware.
    This tool is a Chrome app and ties to third-party services for storage such as
    Google Drive or GitHub. We can draw relationships and processes that overlap,
    which is not possible in the Microsoft tool. Any tool that can effectively draw
    the architecture with their respective relationships of the target device or software
    will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with drawing diagrams, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Create New Diagram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Software Design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the deployment diagram template as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5cbb192-eb79-4d45-b76d-f1701e66bb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Remove all unused diagrams in the template and leave one rectangle for the firmware
    and its internal components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop assets into the diagram to show their relationship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For firmware, we can identify what type of operating system is running via the
    device packaging, basic port scans, or various online resources. We should have
    a general idea how firmware functions on embedded IoT devices as discussed in
    [Chapter 1](d21aaeab-23b9-4b4d-8ae7-efdca033ec10.xhtml), *IoT Penetration Testing*.
    This section will not be going into as much detail as the previous recipe but
    we still want identify all we know about the firmware as well as draw out its
    components to identify potential threats for testing. Some of the threat modeling
    steps we will combine for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - identifying the assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From what we know about the firmware and services the DVR provides, let''s
    use the following table to document some of the firmware assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Asset** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Web server | The firmware serves a local web app for viewing camera feeds
    and managing cameras. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | SSH | The DVR listens on port 22 for shell access. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | RTSP | Camera feeds utilize RTSP for viewing. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | UPnP | UPnP is available to manage the device''s configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | DNS | Local DNS server is running for remote viewing. |'
  prefs: []
  type: TYPE_TB
- en: Steps 2 and 3 - creating an architecture overview and decomposition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a general idea of what firmware components and possible libraries may
    be used that pertain to the DVR''s services. An overview diagram such as the following
    one can be drawn showing the relationship between the device, firmware contents,
    and what resides in the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/988a8d59-07dc-4dba-925d-510deda23155.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 - identifying threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now document threats based upon our diagram and knowledge of the firmware
    contents. Remember, we have not disassembled or located the firmware image at
    this stage. The contents of the diagrams are assumptions based upon what the DVR
    advertises as its services and online documentation. The following are possible
    threats to firmware that attackers could exploit to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform remote code execution on network services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain admin access to the filesystem and attack the LAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intercept network communications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access filesystem resources via SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control DNS to redirect traffic to victim networks/computers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access web configurations and possible secrets within firmware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install malicious firmware or applications on the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track user activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tamper with camera feeds and content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tamper with audit logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brick the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block all network connections to the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 5 - documenting threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will pick a few threat cases and document them with a description,
    threat target, attack technique(s), and any countermeasures that may be in place
    in order to rate their risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could perform remote code execution on
    network services** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR firmware. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker discovers flaws in DVR API communication. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | DVR has rate-limit protections within its API. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could gain admin access to the filesystem
    and attack the LAN** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR firmware. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Access to the console could be enabled via SSH or Telnet.
    Attacker can discover a buffer overflow to access filesystem contents and utilize
    post-exploitation techniques. Attackers locate a known bug in libraries used by
    the DVR. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | DVR enforces auto-update features preventing vulnerable
    libraries and services from being enabled. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could install malicious firmware or applications
    on the DVR** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | DVR firmware. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attackers can sideload malicious firmware upon firmware
    updates. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | DVR should sign its firmware images and validate upon reboot.
    |'
  prefs: []
  type: TYPE_TB
- en: Step 6 - rating the threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did in the previous recipe, we will need to rate each of the possible
    threats using DREAD. Using the following table, we will choose one threat and
    find out its risk rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could gain admin access to the filesystem
    and attack the LAN** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk rating score: High** | **12** |'
  prefs: []
  type: TYPE_TB
- en: Most embedded device operating systems typically run as root or admin. This
    means any vulnerability that may be exploited via a device's firmware should give
    you the highest access needed. There is no need for privilege escalation. More
    regulated industries may defer but if you are testing a consumer device, chances
    are the firmware is already running as root.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling of an IoT web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing our threat modeling exercises for our DVR, we will work on breaking
    down its web applications. Our DVR contains two types of web applications. One
    web application is embedded, running off of the DVR itself. The second web application
    is a SaaS application provided by the vendor for remote access to the DVR and
    its camera feeds.
  prefs: []
  type: TYPE_NORMAL
- en: The SaaS application accesses the embedded DVR within the LAN. We have a better
    sense of what runs on the embedded web application locally on the DVR rather than
    the vendor SaaS application. Earlier in the chapter, we did mention some technologies
    utilized for the vendor web application but no additional information is known
    at this time. We will start by drawing out the architecture of the embedded web
    application and touch on the vendor SaaS application in the threats section rather
    than drawing its unknown architecture.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we should have a good idea of how to conduct threat models from
    beginning to end. With this in mind, we will skip some steps in the threat modeling
    process and move toward some of the more important aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 :Creating an architecture overview and decomposition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned, we will draw out what we know about the embedded web application
    and work on identifying and rating threats within its architecture data flow.
    The following diagram illustrates some of the basic functions for the embedded
    web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5367bbce-0460-4cd4-b5ca-d7a6e8b033be.png)'
  prefs: []
  type: TYPE_IMG
- en: The flow of the application is simplistic as the traffic only stays in the LAN
    and doesn't reach public-facing traffic. Identifying threats for an embedded application
    should not be too difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Identifying threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the data flow within an embedded web application is simplistic in nature,
    documenting threats should be a breeze, although we will add some additional scenarios
    to take into account the vendor SaaS web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'An attacker could exploit the DVR embedded web application and/or vendor SaaS
    applications to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Hijack user sessions for viewing camera feeds and configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdrop on API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute operating system commands via command injection vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose sensitive user details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump database contents via SQL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform arbitrary script execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain access to other user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forge requests under the logged-in user account (CSRF)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify DVR settings to redirect traffic to unauthorized users or networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose camera playback feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete camera playback feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit a flaw in the web or application server of the vendor environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent access to legitimate users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 3 :Documenting threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will pick threat cases similar to what we have done in previous recipes
    and document their threat case description, threat target, attack technique(s),
    and any countermeasures that may be in place to rate their respective risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could execute operating system commands
    via command injection vulnerabilities** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Embedded and vendor web app. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker discovers flaws in DVR and vendor API communications
    due to weak input validation. Attacker creates code that runs within the context
    of the application. Attacker gains access to backend systems with custom code
    injected into the application. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Applications perform input validation and contextual output
    encoding. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could forge requests under the logged-in
    user account (CSRF)** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Embedded and vendor web app. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker identifies a vulnerable HTML form and creates
    code to forge the requested change in the context of the logged-in user. Such
    changes may include adding or sharing a user account to a third party. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Implement anti-CSRF tokens for sensitive HTML forms that
    change application state. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could dump database contents via SQL
    injection** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Vendor web app. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | An attacker appends or concatenates SQL commands to a
    vulnerable parameter that''s used to query the database. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | User input should be validated and queries should be parameterized
    or a stored procedure to access the database. |'
  prefs: []
  type: TYPE_TB
- en: 'Step 4 : Rating the threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the following table, we will choose one threat and find out its risk
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could dump database contents via SQL injection**
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk Rating Score: High** | **13** |'
  prefs: []
  type: TYPE_TB
- en: Clearly, there is more of a payoff to exploit vulnerabilities in the vendor's
    SaaS application given that there are loads of users' details with additional
    features available. However, it is important to stay within legal bounds and gain
    authorization prior to testing. Targeting the embedded web applications may not
    give as big of a reward up front but it is definitely possible once a poll is
    taken on the device usage online and a remotely exploitable vulnerability is discovered.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling an IoT mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our next threat modeling exercise, we will examine IoT mobile applications
    for our DVR system. This DVR system (like many others in IoT) has several mobile
    applications available developed by resellers and different OEMs. For demonstration
    purposes, we will only threat model one Android and one iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have the majority of our data flow diagrams created from previous recipes,
    we will continue to use the same Microsoft Threat Modeling Tool for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Creating an architecture overview and decomposition'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to our last couple of recipes, we will jump right to creating a data
    flow diagram which includes all known assets for the mobile applications. The
    following is the data flow diagram for the mobile applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ba5ad59-60d4-49f0-96c6-4666befa3cb7.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the applications contact the third-party vendor cloud environment
    each time in order to view account details and camera feeds. This also occurs
    when the user is in the same network as the DVR. A username and password is needed
    to access the DVR remotely, which is also stored within the mobile devices. At
    this point, we do not know how this data is stored or sent when communicating
    with the vendor backend systems. This leads us to our next step, identifying threats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Identifying threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An attacker could exploit the mobile application to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Eavesdrop on API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access local resources on the mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose sensitive user details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate sensitive information for all users in clear text on the mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump database contents via SQL(ite) injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform arbitrary script execution via WebView JavaScript interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain access to other user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track users in the vendor's cloud environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose camera playback feeds stored on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete camera playback feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change user information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add users for sharing cameras without authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create long-lived sessions that do not expire for persistent access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take screenshots and send them to a third party
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Documenting threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will pick threat cases similar to what we have done in previous recipes
    and document them to rate their respective risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could access local resources on the mobile
    device** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Mobile apps. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker discovers flaws in API communications that expose
    a WebView to a JavaScript bridge for access to local objects. Attacker exploits
    a SQL injection for SQLite calls locally on the mobile device to attach a database
    and create a file which has access to local resources. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Applications disable JavaScript within WebViews or whitelist
    accepts scripts. Applications validate user input and disallow dynamic queries
    to execute. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could locate sensitive information for
    all users in clear text on the mobile device** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Mobile apps. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker monitors file storage during runtime and finds
    data being synced from the vendor cloud to the mobile device, exposing sensitive
    information. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Only data required for use should be stored on the device.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could add users for sharing cameras without
    authorization** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Mobile apps. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | An attacker creates a CSRF request that is sent to victims
    to auto-add a user for sharing. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Use anti-CSRF tokens. |'
  prefs: []
  type: TYPE_TB
- en: 'Step 4: Rating the threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the following table, we will choose one threat and find out its risk
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could access local resources on the mobile
    device** |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk rating score: Medium** | **9** |'
  prefs: []
  type: TYPE_TB
- en: In the mobile space, common threats pertain to data and the way it's stored
    as well as transported. As a result, the risk is relatively low in mobile bugs
    unless the exploit affects a large number of users or many users' data was to
    be exposed. It would be rare for a mobile vulnerability to result in a shell on
    the server or mobile device during application testing.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling IoT device hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is time to analyze hardware threats for our target DVR. Most consumer DVRs
    are easy to open up and disassemble to examine their various inputs as well as
    their peripherals. This is due to the need to expand storage space or simply because
    they are not designed to be heavy duty like production **hardware security modules**
    (**HSMs**) which have tamper protections in place.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we use [https://draw.io](https://draw.io) diagrams to help
    us with demonstrating hardware inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Creating an architecture overview and decomposition'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a diagram of the DVR''s hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e84dc12-c798-4bb5-9794-aedbeee14068.png)'
  prefs: []
  type: TYPE_IMG
- en: Depicting the image, there are eight BNC connectors for cameras, two USB ports,
    one Ethernet port, one power port, a VGA, and an HDMI port facing the outside
    of the DVR. Inside the DVR are various chips, with one being an EEPROM and possible
    inputs for UART on the PCB board itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Identifying threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An attacker could exploit the DVR hardware inputs to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain access to the consoles via UART
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump secrets within the EEPROM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit a flaw in the USB stack to the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach a malicious USB device that causes corruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short the DVR power inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glitch the DVR bootloader into console access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install malicious software via USB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Documenting threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will pick threat cases similar to what we have done in previous recipes
    and document them to rate their respective risk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could gain access to the consoles via
    UART** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | UART. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attack UART headers on the PCB board of the device. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | UART access is password protected. UART access is blocked
    by another chip. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could dump secrets within the EEPROM**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | EEPROM. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker attaches an SOIC clip on top of the EEPROM to
    read its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Prevent storage of sensitive data within the EEPROM. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could glitch the DVR bootloader into
    console access** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | EEPROM. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | An attacker interrupts timing of the bootloader to access
    the console. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Implement glitch protections or tamper protections. |'
  prefs: []
  type: TYPE_TB
- en: 'Step 4: Rating the threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the following table, we will choose one threat and find out its risk
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could gain access to the consoles via UART**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage Potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk rating score: High** | **11** |'
  prefs: []
  type: TYPE_TB
- en: Threat modeling IoT radio communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on to radio/wireless communication, our DVR does not have much going
    on with regards to radio communication other than the data that transports to
    the DVR from client applications or cameras. Most IoT devices and environments
    have several different radio communications broadcasting on different frequencies
    using different protocols. Luckily, we only have to worry about Wi-Fi and cell
    provider entry points into the DVR.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our radio communication threat modeling exercise, we can simply update previously
    drawn diagrams to reflect the radio communication that occurs within devices and
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Creating an architecture overview and decomposition'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An example architecture overview for radio communication usage within the DVR
    system is illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fa2ea24-b3d1-4357-adf9-7caa0de6c52d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you may be able to tell, the wireless communication is limited to users accessing
    the DVR via client devices such as a browser and applications as well as wireless-enabled
    IP camera's which are optional. Also note that our diagram has iterated being
    that more information about the DVR has been acquired through previous threat
    models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Identifying threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An attacker could exploit wireless communications to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the DVR network from a long-range distance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdrop on DVR wireless communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jam DVR communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove IP cameras from the DVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a fake access point to connect cameras
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdrop on cellular communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a fake base station for **Global Systems for Mobile Communications**
    (**GSM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoof client application requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fake IP cameras
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access DVR systems through rogue client applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Documenting threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will pick threat cases similar to what we have done in previous recipes
    and document them to rate their respective risk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat #1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could access the DVR network from a long-range
    distance** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Wireless. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker exploits wireless communication from any given
    client application via man-in-the-middle techniques or hijacking of user sessions
    from a wireless client. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Authorized devices should be implemented and whitelisted.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could jam DVR communications** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Wireless. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | Attacker identifies DVR traffic broadcasting from an
    IP camera or client device to replay traffic at a rate the DVR cannot consume.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Implement anti-jamming protections or block malicious IP
    addresses within a given threshold. |'
  prefs: []
  type: TYPE_TB
- en: 'Threat #3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat description** | **Attacker could add fake IP cameras** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat target | Wireless. |'
  prefs: []
  type: TYPE_TB
- en: '| Attack techniques | An attacker mimics an IP camera to be added to the network
    which contains malicious firmware. |'
  prefs: []
  type: TYPE_TB
- en: '| Countermeasures | Client validation from the DVR should be implemented. |'
  prefs: []
  type: TYPE_TB
- en: 'Step 4: Rating the threats'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the following table, we will choose one threat and find out its risk
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat risk rating: Attacker could access to the DVR network from a long-range
    distance** |'
  prefs: []
  type: TYPE_TB
- en: '| **Item** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| **Risk rating score: High** | **12** |'
  prefs: []
  type: TYPE_TB
- en: Wireless threats within the DVR environment can be rather simple using common
    wireless man-in-the-middle techniques. Other threats such as adding fake IP cameras
    may be a bit more difficult and not worth the time for an attacker looking to
    make a bigger impact.
  prefs: []
  type: TYPE_NORMAL
