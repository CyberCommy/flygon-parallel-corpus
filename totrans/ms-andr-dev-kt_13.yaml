- en: Tuning Up for High Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just finished mastering work with backend and API. We are approaching the
    end of our journey, but it's not over yet! We have to cover some very important
    points! One such is performance optimization. We will guide you through some good
    practices in achieving this. Think about the code we have developed so far and
    how can we apply these advices on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Layout optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimization to preserve battery life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing to get maximal responsiveness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To achieve maximal UI performance, follow these points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimize your layout hierarchies**: Avoid nested layouts since it can be
    a performance killer! For example, you can have multiple `LinearLayout` views
    nested. Instead of this, switch to `RelativeLayout`. This can save your performance
    significantly! Nested layouts require more processing power to be used on calculations
    and drawing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reuse layouts if possible**: Android provides `<include />` to allow this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Beside this, you can use `<merge>`. Merge eliminates redundant `view groups`
    in your view hierarchy when you include one layout within another. Let''s take
    a look at the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we include `to_merge.xml` in another layout using include, like we did
    in the previous example, Android will ignore the `<merge>` element and add our
    views directly to the container in which `<include />` is placed:'
  prefs: []
  type: TYPE_NORMAL
- en: Include layouts into your screens only when they are needed--If you don't need
    view at the moment, set its visibility to `Gone` instead of `Invisible`. `Invisible`
    will still create an instance of view. When using `Gone`, Android will instantiate
    view only when visibility is changed to `Visible`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use containers like `ListView` or `GridView` to hold your groups of data. We
    already explained why you should use them in the previous chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing battery life
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to drain your battery. Just one of the examples is doing
    too much work in your application. Too much processing can affect your battery.
    However, we will point out ways you can save your battery and what you must avoid.
    Follow these points and keep them in mind every time you develop an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep your battery in the best condition, apply these advices:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce network communication as much as possible. Frequent network calls can
    affect your battery. Because of this, try to make this optimal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine if your phone is charging. That can be a good time to fire up intensive
    and performance demanding actions your application may need to do.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor connectivity status and perform connectivity related operations only
    when the connectivity status is proper.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of broadcast messages rationally. Frequent and unnecessary sending
    of broadcast messages can cost you your performance. Think how frequent you need
    them and also unregister your receivers when you don't need to receive messages
    anymore and when there is no benefit to receiving them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay attention to the intensity of GPS use. Frequent location requests can affect
    your battery significantly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping your application responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How many times has it happened to you that you use some Android application
    and get the message saying that the application is not responding? Why does this
    happen? We will explain! Pay attention to these points so you don''t have the
    same thing happening with your application:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure nothing blocks your input (any intensive operation, especially network
    traffic).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't perform long tasks on the main application thread.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't perform long running operations in the `onReceive()` method for your broadcast
    receivers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of the `AsyncTask` class as much as you can. Consider the use of `ThreadPoolExecutor`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try using content loaders whenever it's possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid executing too many threads at the same time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If writing to filesystem, do it from a separate thread.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it still happens that you have ANRs, or your application behaves sluggishly,
    use tools such as systrace and Traceview to track the roots of your problems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short but important chapter, we highlighted important points about maintaining
    and achieving good application performance and responsiveness. These advices are
    crucial in application optimization. So, if your application doesn't follow these
    rules, you must optimize it accordingly. By finishing this chapter, we covered
    all you need to develop Android applications. In the next chapter, we will test
    it. Be ready to write some unit and instrumentation tests!
  prefs: []
  type: TYPE_NORMAL
