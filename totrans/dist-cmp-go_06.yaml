- en: Goophr Concierge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, [Chapter 5](../Text/Ch05.xhtml), *Introducing Goophr*,
    we split our application into two components: Concierge and Librarian. In this
    chapter, we shall look at the design and implementation of Concierge. The following
    are the major sections in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A deeper look at document feeder and query handler APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagrams explaining the architecture and logical flow of Concierge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests for Concierge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting the API definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have another look at the API definition for Concierge, and discuss what
    the definition conveys regarding the expected behavior by the API and application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the API definition, we can state the following:'
  prefs: []
  type: TYPE_NORMAL
- en: All communication to and from Concierge is using the JSON format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two endpoints for Concierge are `/api/feeder` and `/api/query`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/api/feeder`: This uses the `POST` method to add new documents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/api/query`: This uses the `POST` method to receive search query terms and
    returns a list of documents related to the search term'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's look at each of the endpoints in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Document feeder – the REST API endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main aim of `/api/feeder` is to receive documents to be indexed, process
    them, and forward the processed data to Librarian to be added to the index. This
    means we need to accurately process the document. But what do we mean by "processing
    a document?"
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be defined as the following set of consecutive tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: We rely on the payload to provide us with a title and link to the document.
    We download the linked document and use it in our index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The document can be thought of as one big blob of text, and it is possible that
    we might have multiple documents with the same title. We need to be able to identify
    each document uniquely and also be able to easily retrieve them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of a search query expects the provided words to be present in the
    document. This means we need to extract all words from a document and also keep
    track of where a word occurs within a document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would it make sense to differentiate between "HELLO", "hello", and "HELLO!!!"?
    In the context of the text it occurs in, they certainly convey different meanings.
    However, for the index, it depends on how complex and accurate we want to make
    our index. For our case, we keep the implementation simple, and thus we normalize
    the words, that is, we treat all these variations of the word as a single unit/token.
    Additionally, we do not index pronouns, articles, propositions, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a search engine, pronouns, articles, and so on are termed as **stop words**,
    and it is common to ignore them in the index. The main reason is that while they
    provide valuable information for the user, they tend to have little to no relevance
    for the index.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we would like to add all these tokens to the index maintained by the
    Librarian.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the source code for Concierge, each of the preceding tasks stated is handled
    by certain functions. The following is a list showing associated functions for
    each of the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task 1: `api.FeedHandler` and `api.docProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Task 2: `api.docStore` and `api.lineStore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Task 3 and Task 4: `api.indexProcessor` and `common.SimplifyToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Task 5: `api.indexAdder`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query handler – the REST API endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similarly, if we consider the case of handling a search query at `/api/query`,
    we should be able to take the search terms from the payload, request results from
    various instances of the Librarian, process them, and then return search results
    back to the user in the descending order of search relevance. However, since we
    haven't implemented the Librarian yet, we shall discuss the implementation of
    this endpoint later in [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*, the
    distributed search index.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code for Concierge has a lot of moving parts. Directly jumping into
    the code without any prior understanding might not be the best way to proceed.
    Instead, we shall take the tasks defined in the previous sections and present
    them as flow diagrams. However, first, let's have a brief look at the symbols
    and naming conventions we are using in the diagrams and code.
  prefs: []
  type: TYPE_NORMAL
- en: Code conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are the entities in Concierge:'
  prefs: []
  type: TYPE_NORMAL
- en: '**payload** (**p**): This represents the payload received to add a new document
    to index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**document** (**d**): This represents all the metadata representing a unique
    document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**line** (**l**): This represents all the metadata for a single line within
    a document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**token** (**t**): This represents all the metadata for each token within a
    document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message** (**xMsg**): For a given entity, **x**, it provides information
    to identify a unique entity and a callback channel to return the unique entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process Channels** (**xProcessCh**): For a given entity, **x**, the channel
    is used by **xProcessor** goroutine to consume and process the entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stores** (or **Data Stores**): The Concierge is also responsible for storing
    and maintaining information regarding all the documents and lines in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store Channels** (xStoreCh): For a given entity, **x**, the channel is used
    to update the entity''s store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Channels** (**xGetCh** or **xGetAllCh**): These channels are used by
    stores to provide a mechanism to retrieve an entity using callback channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**done**: This is a special channel that will stop all running goroutines once
    it is closed. We should be careful to close this channel and not send a message
    on it, the reason being that sending a message will only signal a single goroutine
    to stop. Instead, if we were to close the channel, all goroutines listening on
    the channel will receive message to stop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a few examples so that we have perfect understanding of the
    conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dStoreCh**: This is the channel to add new documents to Document Store'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dGetCh**: This is the channel to get a single document from Document Store'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagram conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, let''s look at the symbols we will be using in our diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32bcf0f7-1c6d-4c2c-b72a-9ba9e7398520.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's proceed to visualize Concierge's logic with help of logical flow
    diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Logical flow diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can split the logic for Concierge into five major chunks. We shall address
    the required logic flow for each of the individual chunks, and then at the end,
    combine them all to get the big picture of what we are trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: The doc processor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First and foremost, we want to accept the payload sent to endpoint and start
    processing the document. Let''s assume that `api.FeedHandler` accepts, validates,
    and sends the payload on **pProcessCh**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5ee380a-1d6f-440e-9360-c2fc668361c2.png)'
  prefs: []
  type: TYPE_IMG
- en: The doc store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s then consider **dStoreCh**, which is the channel used for adding and
    retrieving documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c59ee7d-56b5-4f6c-8e59-629c3aee8e6e.png)'
  prefs: []
  type: TYPE_IMG
- en: The index processor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from adding to `docstore`, `docProcessor` also sends the document to
    `indexProcessor`*,* which is responsible for storing lines in the document and
    converting lines into tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6881d8b-9ad5-4e9d-a89c-7668f2375fd3.png)'
  prefs: []
  type: TYPE_IMG
- en: The line store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`indexProcessor` splits the document into lines, and `lineStore` is responsible
    for storing them and also returning them when queried:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/809153a9-efa6-44d3-bdc8-3a91fca7456c.png)'
  prefs: []
  type: TYPE_IMG
- en: '`indexProcessor` also splits the lines into tokens and adds them to `iAddCh`
    channel. `indexAdder` is responsible for adding these tokens to the index (Librarian).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a70e7bec-20d6-4dd3-ab8b-66c9d0e2bb27.png)'
  prefs: []
  type: TYPE_IMG
- en: The consolidated flow diagram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have defined each of the individual chunks, you might have noticed
    that they flow into one another and have some components that they share among
    themselves. Let us consolidate all of these flow diagrams now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dd32720-e188-44c8-8ee3-6308e598b06d.png)'
  prefs: []
  type: TYPE_IMG
- en: This might be a good opportunity to try and build Concierge on your own. However,
    please read the following three design points to have complete knowledge of the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Queue workers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the consolidated flow diagram, you might have noticed that we run four instances
    of `docProcessor`*,* `indexProcessor`, and `indexAdder`*.* The reason for this
    is that the tasks handled by these goroutines are embarrassingly parallel, that
    is, they can be run in parallel without side effects. This allows us to parallelize
    and process the documents at a faster pace.
  prefs: []
  type: TYPE_NORMAL
- en: Single stores
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In contrast, we run `docStore` and `lineStore` as single instances because we
    want to a maintain consistent state for these stores.
  prefs: []
  type: TYPE_NORMAL
- en: Buffered channels
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For almost all the channels in our code, we will be using buffered channels
    with a capacity of 8\. This allows us to avoid blocking the `api.FeedHandler`
    endpoint in case `docProcessors` are busy. Also because of queue workers and single
    stores, `lStoreCh` and `dStoreCh` have a capacity of 16 each.
  prefs: []
  type: TYPE_NORMAL
- en: The Concierge source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have discussed the design of Concierge in detail, let us implement
    Concierge based on these design points. We will discuss the implementation of
    `api/query.go` and Dockerfile in [Chapter 8](../Text/Ch08.xhtml), *Deploying Goophr*.
    Let''s look at the project structure & source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at the source code for each of the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**main.go**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**common/helpers.go**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**api/feeder.go**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**api/feeder_test.go**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Running tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In `api/feeder_test.go`, we have three main test case scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: To test if a unique hash is generated for each new document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing if payload sent to the `/api/feeder` endpoint returns document content
    as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test to ensure the indexing of documents is working as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the expected output after running the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Concierge server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s try to post the book, *Hackers: Heroes of the Computer Revolution* to
    the Concierge endpoint, `/api/feeder`. We need to have the Concierge server running
    in another terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s see what happens on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we took an in-depth look at the `feeder` component of Concierge.
    We designed the system and used logical flow diagrams to understand how the various
    parts of the code interact. Next, we tested our code with tests and also with
    a real-world example.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [Chapter 7](../Text/Ch07.xhtml), *Goophr Librarian*, we
    will delve into the design and implementation of Goophr Librarian.
  prefs: []
  type: TYPE_NORMAL
