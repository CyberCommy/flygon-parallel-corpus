- en: Chapter 9. Working with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding vulnerabilities and attacking targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling multiple targets using tab switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation with Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side exploitation with Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have focused completely on the Metasploit framework and studied how
    to use the framework to get the best out of penetration testing. Now we will shift
    our focus on Metasploit extension tools which further take penetration testing
    to the next level. We will start our tour with Armitage, a GUI-based tool that
    runs over the framework. It is an intelligent tool for Metasploit that visualizes
    targets, recommends exploits, and exposes the advanced post-exploitation features
    in the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Armitage organizes Metasploit's capabilities around the hacking process. There
    are features for discovery, access, post-exploitation, and maneuver. Armitage's
    dynamic workspaces let you define and switch between target criteria quickly.
    Use this to segment thousands of hosts into target sets. Armitage also launches
    scans and imports data from many security scanners. Armitage visualizes your current
    targets, so you'll know the hosts you're working with and where you have sessions.
    Armitage recommends exploits and will optionally run active checks to tell you
    which exploits will work. If these options fail, use the Hail Mary attack to unleash
    Armitage's smart automatic exploitation against your targets.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're in, Armitage exposes post-exploitation tools built into the meterpreter
    agent. With the click of a menu, you will escalate your privileges, log keystrokes,
    dump password hashes, browse the file system, and use command shells.
  prefs: []
  type: TYPE_NORMAL
- en: So by using Armitage, we can further ease our penetration testing process by
    various ready-made features provided by the tool. So let us start our chapter
    with the basics of setting up Armitage with Metasploit and later we will analyze
    port scanning, pre exploitation and post exploitation with Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us start with a basic setup guide for Armitage. We will cover Armitage
    setup in Windows and BackTrack in Linux. Armitage comes pre-installed in recent
    versions of BackTrack. To set up Armitage on Windows, we can download the ZIP
    file from its official web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.fastandeasyhacking.com/download](http://www.fastandeasyhacking.com/download)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us start with setting up Armitage in BackTrack.
  prefs: []
  type: TYPE_NORMAL
- en: Armitage will be pre-installed in BackTrack 5 R2\. It can be launched by clicking
    on **Applications** on the desktop and then navigating to **Backtrack** | **Exploitation
    tools** | **Network Exploitation tools** | **Metasploit framework** | **Armitage**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a GUI that will ask you to set up the connection. It will have
    the default username and password as `msf` and `test` respectively. You can keep
    the DB driver as `postgressql` and finally the DB connect string as `msf3:"8b826ac0"@127.0.0.1:7175/msf3:`
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7423_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once these default settings are done, we can start the Armitage GUI by clicking
    on **Start MSF.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To set up Armitage on Windows, there are two primary requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit version 4.2 and above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK 1.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download the ZIP file from the URL mentioned earlier but there is a
    simple alternative as well. You can go to **Start** | **Programs** | **Metasploit
    framework** | **Framework Update**. Once the update is complete, it will automatically
    add Armitage to your Metasploit library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the update is done, Armitage can be started by navigating to **Start**
    | **Programs** | **Metasploit framework** | **Armitage**.![How to do it...](img/7423_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the connect GUI that will have default values set up for **Host,
    Port, User**, and **Password**. You can simply click on **Connect** to start Armitage
    locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click on **Connect**, it will ask you to start the Metasploit RPC server.
    Click on **Yes** and proceed to the main window. To use Armitage on a remote Metasploit,
    you can change the IP address from **127.0.0.1** to the remote IP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Armitage works by creating RPC calls to Metasploit. Once you click on **Connect**,
    you will notice a repeated RPC connect back failure message. The error message
    is because Armitage keeps trying to connect to the Metasploit framework by throwing
    RPC calls and it waits for a response. Once the connection is successful, we will
    be presented with the Armitage GUI containing the MSF console at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us see how we can set up Armitage on other flavors of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Armitage on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting up Armitage over Metasploit on Linux is also simple. You can download
    the installer from its official website or you can simply run `msfupdate` to get
    Armitage on Metasploit versions 4.2 and higher. While working with Armitage on
    Linux, make sure that the framework database is up and running. Run the following
    command from the terminal to start PostgreSQL: `/etc/init.d/framework-postgres
    start`.'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving ahead from our first recipe, we can now start working with Armitage once
    it is up and running. In this recipe, we will start with the most basic step of
    penetration testing, that is, scanning and information gathering. Let's perform
    an Nmap scan in Armitage and see what result is displayed on the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To launch an Nmap scan, you can click on **Hosts** and then **Nmap Scan**,
    as shown in the following screenshot. Let us do a quick operating system detection
    scan and see if any hosts are alive or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/7423_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Giving a quick look at the Armitage window, there is a search panel on the left
    where we can search for all different modules present in the framework, which
    is not as easy when working with msfconsole. Further, we can see the MSF **Console**
    panel from where we can execute any Metasploit command that we have learned so
    far. So we have the power of both GUI, as well as the command line when we are
    working with Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform scanning follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To start the scanning process, Armitage will ask us for an IP or IP range that
    it will scan. Give a scan range of 192.168.56.1/24 that will scan the entire network
    for us and return the operating system versions of alive hosts if it is detectable:![How
    to do it...](img/7423_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the scan is complete, it will reflect all the alive hosts and their possible
    operating systems in the form of images, as shown in the preceding screenshot.
    So in our case, there are three alive hosts of which two are running windows while
    one is running Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now our next step will be to gather more information about our alive targets,
    so that we can choose relevant exploits to perform penetration testing. Right-clicking
    on the image of the target will throw the **Services** option. Clicking on it
    will open a new tab that will list open ports and services running on these ports.
    In this way, we can gather lots of relevant information about multiple targets
    with just a few clicks:![How to do it...](img/7423_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another important thing to note here is the different tabs that Armitage creates
    for every new request. This helps us in handling multiple targets at the same
    time with ease. We can easily switch between targets and gain information about
    them. At any time if we are falling short of options in Armitage, we can go to
    the **Console** tab and try out Metasploit commands directly there. This is a
    huge advantage that Armitage has over Metasploit. Handling of multiple targets
    increases the efficiency of performance testing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will begin our exploitation phase and see how easily
    and quickly Armitage provides us relevant exploits and payloads that we can apply
    on our targets.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Armitage imports the Nmap functionality from the Metasploit framework. The parameters
    needed by Nmap are passed from the Armitage GUI in the form of instructions to
    Metasploit. Then Metasploit invokes the Nmap script and uses the instructions
    as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerabilities and attacking targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving ahead from our previous recipe, here we will see how we can automatically
    look for known vulnerabilities for the targets that we discovered in our Nmap
    scan. Armitage automates the process of discovering exploits for targets based
    on open ports and vulnerabilities existing in the operating system. This automation
    process will not always yield correct results as the exploits searched totally
    depends on the results returned from the Nmap scan. If the OS discovery is false,
    then the exploit will not work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us launch our Armitage panel and connect to Metasploit. Then, launch the
    Nmap scan to look for available targets. We have covered these steps in the previous
    two recipes. Let us find vulnerabilities in our targets using Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the targets have been discovered, Armitage has a **Attacks** option which
    can look for known exploits based on open ports and OS vulnerabilities for the
    targets discovered. To find exploits, click on **Attacks** | **Find Attacks**
    | **By port or by vulnerability.**
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the exploits have been discovered by Armitage, we will find an extra option—**Attack**
    by right-clicking on the target image. This option reflects different attacks
    discovered by Armitage for that particular target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7423_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us move ahead and exploit our Windows target. You can use the SMB `ms_08_047
    netapi` vulnerability to exploit the target. You can find this exploit by right-clicking
    on the target and moving to the **Attack** | **SMB** | **MS_08_047 netapi** exploit.
    You can also check the **Use a reverse connection** option to get a connection
    back to you once the exploit is executed successfully. On successful execution
    of an exploit, you will notice three things:'
  prefs: []
  type: TYPE_NORMAL
- en: The image of the target changes to red with lightning bolts around it showing
    successful exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-clicking on the target gives us the option for the meterpreter channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The msfconsole shows the opening of the session![How it works...](img/7423_09_07.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see how easy it is to exploit a target without passing any commands.
    The GUI provides all features that are command driven in Metasploit. This is the
    reason why Armitage adds more power to the framework. However, a good knowledge
    of msfconsole commands is essential. We cannot solely depend on the GUI. There
    are several MSF functionalities that can't be leveraged by using the GUI of Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will analyze post exploitation with Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: Handling multiple targets using the tab switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous few recipes, we have seen how the Armitage GUI eases the process
    of exploitation. In this recipe, we will see another advantage of using Armitage.
    When we are dealing with multiple targets in Metasploit, we have to switch between
    sessions in order to manage them. This process of switching between multiple targets
    is further eased up in Armitage by using different tabs. Let us see how it is
    done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous recipe, we have compromised our Windows XP target. We still
    have two more targets available to us. We can exploit our Windows 2008 Server
    by right-clicking on it and selecting an exploit. Alternatively, we can also start
    a new console by going to **View** | **Console.** This will start a new console
    where we can use the command line to compromise the target.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us set up a multi-handler and exploit the target by using the client-side
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the exploit command threw an error that it can't bind a reverse
    handler on `192.168.56.101:15263`. This is because we have already set a reverse
    connection on this port while exploiting the Windows XP target. So we will have
    to change the port number and use the exploit command again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, once the client-side exploit executes successfully, we will have a reverse
    connection and we will have lightning bolts against our 2008 Server target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important thing to note here is that we have different tabs for different
    targets. We can easily interact with any compromised target by switching between
    tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7423_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is yet another important feature of Armitage that eases the process of
    penetration testing. This can be very beneficial when we are dealing with several
    targets in a network.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how Armitage can be useful in handling multiple
    targets. Once the targets are exploited, our next step will be to perform various
    post-exploitation activities. Let us see how Armitage can be handy in the post
    exploitation phase as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will analyze our exploited Windows XP target and see how we can perform several
    post-exploitation activities on it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a target has been exploited, we can follow several meterpreter options
    by right-clicking on its image. There are some commonly used post-exploitation
    actions available to us such as access, interact, and pivot. We can perform several
    actions by just making a few clicks. Let us perform the first and most essential
    phase of post exploitation—**privilege escalation**. We can find this option by
    right-clicking on the target image and navigating to **Meterpreter** | **Access**
    | **Escalate privileges**. Another interesting post-exploitation activity is **screenshot**
    which can be browsed through **Meterpreter** | **Explore** | **Screenshot**. A
    screenshot of the target desktop will be displayed in a new tab which can be refreshed
    whenever you wish. The following screenshot demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7423_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see that the screenshot has been displayed in a new tab which has two
    buttons at the bottom. The **Refresh** button will display a fresh screenshot,
    whereas the **Watch** button will refresh the screenshot after every 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can try out lots of "click-to-server" post-exploitation options
    available in Armitage to speed up the process of penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: This was a small demonstration of using Armitage as a potential extension for
    Metasploit in order to speed up the process of exploitation. The real power of
    Armitage can be understood only when we have full command over Metasploit. A combination
    of a powerful command line with the GUI makes Armitage a perfect tool for penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side exploitation with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Client-side exploitation can be a helpful technique for penetration testing
    if we are unable to find a vulnerable operating system. As discussed earlier in
    [Chapter 4](ch04.html "Chapter 4. Client-side Exploitation and Antivirus Bypass"),
    *Client-side Exploitation and Antivirus Bypass*, the client-side exploitation
    technique utilizes a vulnerability in an application installed on the target system
    such as Internet Explorer and Adobe Reader. In this recipe we will perform a Java-based
    client-side exploitation using Armitage on Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can start our penetration testing by launching a simple Nmap scan to figure
    out the IP address and other information about our target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform a client-side exploitation, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the left pane of Armitage, go to **Exploit** | **Windows** | **Browser**
    | **java_docbase_bof**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be presented with several parameter options, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7423_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The exploit module asks for SRVHOST and the URI host where we will have to provide
    the IP address of the target machine and the request URI. All the other parameters
    already have default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the parameter values have been passed, click on the **Launch** button to
    begin the process of exploitation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the **Launch** button is clicked, the exploitation activity is reflected
    in the **Console** window. Armitage will generate a URI location that has to be
    executed by the target user in his/her browser in order to launch the attack.
    Armitage automatically starts a back listener which waits for a connection back
    from the target machine if the exploit succeeds. We can use different social engineering
    techniques to transfer our malicious URL to the target user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the attack is successful, we will notice the lightning bolts around our
    target image in Armitage GUI. By right-clicking on the target, we can find different
    post-exploitation options such as setting up a meterpreter session and login.
    The following screenshot depicts this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7423_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The response of different processes such as setting a meterpreter session can
    be monitored in the **Console** window as well. We can notice the same set of
    commands being executed in the console that we covered in previous chapters. Armitage
    only automates the entire process by providing a GUI-based interaction medium.
  prefs: []
  type: TYPE_NORMAL
