- en: Chapter 2. Getting Started with DOM-based Game Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have had an idea about what we are going to learn in the whole book in Chapter
    1, Introducing HTML5 Games. From this chapter, we will go through a lot of learning-by-doing
    sections and we will focus on one topic in each section. Before digging deeply
    into the cutting edge CSS3 animations and HTML5 Canvas game, let's start with
    traditional DOM-based game development. We will warm up with some basic techniques
    in this chapter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will be:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our first game—Ping Pong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning basic positioning with the jQuery JavaScript library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting keyboard inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Ping Pong game with scoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the game we will get after this chapter. It
    is a Ping Pong game played by two players with one keyboard simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with DOM-based Game Development](img/1260_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, let's get on with making our Ping Pong.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The environment for developing HTML5 games is similar to designing websites.
    We need web browsers with the required plugin and a good text editor. Which text
    editor is good is a never-ending debate. Each text editor comes with its own strength,
    so just pick your favorite one. For the browser, we will need a modern browser
    that supports the latest HTML5, CSS3 spec, and provides us with handy tools for
    debugging.
  prefs: []
  type: TYPE_NORMAL
- en: There are several modern browser choices on the Internet now. They are Apple
    Safari ([http://apple.com/safari/](http://apple.com/safari/)), Google Chrome ([http://www.google.com/chrome/](http://www.google.com/chrome/)),
    Mozilla Firefox ([http://mozilla.com/firefox/](http://mozilla.com/firefox/)),
    and Opera ([http://opera.com](http://opera.com)). These browsers support most
    features we discuss in the examples in the whole book. We will use Google Chrome
    to demonstrate most examples in the book because it runs fast and smooth with
    CSS3 transition and Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the HTML documents for a DOM-based game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every website, web page, and HTML5 game starts with a default HTML document.
    Moreover, the document starts with a basic HTML code. We will start our HTML5
    game development journey from `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Installing the jQuery library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create our HTML5 Ping Pong game from scratch. It may sound as if we
    are going to be preparing all the things ourselves. Luckily, at least we can use
    a JavaScript library to help us. **jQuery** is the **JavaScript library** we will
    be using in the whole book. It will help us in simplifying our JavaScript logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `pingpong`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `js` inside the `pingpong` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now it's time to download the jQuery library. Go to [http://jquery.com/](http://jquery.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Production** and click on **Download jQuery**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save `jquery-1.4.4.min.js` in the `js` folder we created in step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new document named `index.html` and save it in the first game folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `index.html` in text editor and insert an empty HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the jQuery JavaScript file by adding the following line before the
    closing of the body tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have to ensure that jQuery is loaded successfully. We place the
    following code before the close of the body tag and after the jQuery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the `index.html` and open it in the browser. We should see the following
    alert window showing our text. This means our jQuery is correctly set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Installing the jQuery library](img/1260_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a basic HTML5 page with jQuery and ensured that the jQuery is
    loaded correctly.
  prefs: []
  type: TYPE_NORMAL
- en: New HTML5 doctype
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DOCTYPE` and `meta` tags are simplified in HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: 'In HTML4.01, we declare doctype as the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a long line of code, right? While in HTML5, the doctype declaration cannot
    be simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We even do not have the HTML version in the declaration. This implies that HTML5
    will support all existing content of previous HTML versions. Future HTML versions
    will also support the existing content of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplification also comes to `meta` tag. We define the charset of the HTML
    by using the following short line now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Header and footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 comes with many new features and improvements, one of them is semantics.
    HTML5 adds new elements to improve the **semantics**. We just used two, `header`
    and `footer`. Header gives a heading introduction to the section or the entire
    page. Therefore, we put the `h1` title inside header. Footer, same as its name,
    contains the footer information of the section or the page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A semantic HTML means that the markup itself provides meaningful information
    to the content instead of only defining the visual outlook.
  prefs: []
  type: TYPE_NORMAL
- en: Best practice to place the JavaScript code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We put the JavaScript code right before the closing`</body>` tag and after all
    the content in the page. There is a reason for putting the code there instead
    of putting it inside the`<head></head>` section.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, browsers load content and render them from top to bottom. If the JavaScript
    code is put in the `head` section, then the content of document will not be loaded
    until all JavaScript code is loaded. Actually, all rendering and loading will
    be blocked if the browsers load a JavaScript code in the middle of the page. This
    is the reason why we want to put the JavaScript code at the bottom when possible.
    In this way, we can deliver the content with higher performance.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the latest jQuery version is 1.4.4\. That
    is why the jQuery file in our code examples is named `jquery-1.4.4.min.js`. This
    version number will be different, but the usage should be the same unless there
    is a big change in jQuery without backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Running our code after the page is ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to ensure that the page is ready before our JavaScript code is executed.
    Otherwise, we may get an error when we try to access an element that is not yet
    loaded. jQuery provides us with a way to execute the code after the page is ready.
    It is the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Actually, what we just used is the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `$` sign is a shortcut for jQuery. When we are calling `$(something)`, we
    are actually calling `jQuery(something)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`$(function_callback)` is another shortcut for the `ready` event.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is identical to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, identical to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which is the best place to put JavaScript code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Before the`<head>` tag
  prefs: []
  type: TYPE_NORMAL
- en: b. Inside the`<head></head>` elements
  prefs: []
  type: TYPE_NORMAL
- en: c. Right after the`<body>` tag
  prefs: []
  type: TYPE_NORMAL
- en: d. Right before the`</body>` tag
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Ping Pong game elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the preparation ready and it is time to set up the Ping Pong game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Placing Ping Pong game elements in DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will continue from our jQuery installation example. Open the `index.html`
    in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create the following playground and game objects with DIV nodes in the
    body. There are two paddles and one ball inside the playground. Moreover, the
    playground is inside the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have the game objects'' structure ready and it is time to apply styles
    to them. Put the following styles inside the `head` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the last section, we put our JavaScript logic right after the jQuery inclusion.
    We will put it in a separate file as our code is getting large. Therefore, create
    a file named `html5games.pingpong.js` inside the `js` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We prepared the JavaScript file. Now it is time to link them to our HTML file.
    Put the following code in `index.html` before the`</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will place the game logic inside the `html5games.pingpong.js`. Our only
    logic now is the following paddle''s initialization code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will test the setup in a browser. Open the `index.html` file in a browser
    and we should see a screen similar to the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Placing Ping Pong game elements in DOM](img/1260_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have put two paddles and a ball in the Ping Pong game. We also used jQuery
    to initialize the position of the two paddles.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery is a JavaScript library that is designed for easily navigating the DOM
    elements, manipulating them, handling events, and creating an asynchronies remote
    call.
  prefs: []
  type: TYPE_NORMAL
- en: 'It contains two major parts: **selection** and **modification**. Selection
    uses CSS selector syntax to select all matched elements in the web page. Modification
    actions modify the selected elements, such as add, remove children, or style.
    Using jQuery often means chaining selection and modifications actions together.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It contains two major parts: **selection** and **modification**. Selection
    uses CSS selector syntax to select all matched elements in the web page. Modification
    actions modify the selected elements, such as add, remove children, or style.
    Using jQuery often means chaining selection and modifications actions together.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code selects all elements with `box` class and sets
    the CSS properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Understanding basic jQuery selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery is about selecting elements and performing actions on them. We need
    a method to select our required elements in the entire DOM tree. jQuery borrows
    the selectors from CSS. The selector provides a set of patterns to match elements.
    The following table lists the most common and useful selectors that we will use
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Selector pattern | Meaning | Examples |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| $("Element") | Selects all elements with the given tag name | `$("p")` selects
    all the p tags.`$("body")` selects the body tag. |'
  prefs: []
  type: TYPE_TB
- en: '| $("#id") | Selects the element with the given ID of the attribute | Provides
    the following code:**<div id="box1"></div>**<div id="box2"></div>`$("#box1")`
    selects the highlighted element. |'
  prefs: []
  type: TYPE_TB
- en: '| $(".className") | Selects all elements with the given class attribute | Provides
    the following code:**<div class="apple"></div>****<div class="apple"></div>**<div
    class="orange"></div><div class="banana"></div>`$(".apple")` selects the highlighted
    elements with class set to apple. |'
  prefs: []
  type: TYPE_TB
- en: '| $("selector1, selector2, selectorN") | Selects all elements that match the
    given selector | Provides the following code:**<div class="apple"></div>****<div
    class="apple"></div>****<div class="orange"></div>**<div class="banana"></div>`$(".apple,
    .orange")` selects the highlighted elements that class is set to, either apple
    or orange. |'
  prefs: []
  type: TYPE_TB
- en: Understanding the jQuery CSS function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery `css` is a function to get and set the CSS properties of the selected
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a general definition of how to use the `css` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `css` function accepts several types of arguments as listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function type | Arguments definitions | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(propertyName)` | `propertyName` is a CSS property | The function returns
    the value of the given CSS property of the selected element.For example, the following
    code returns the value of the `background-color` property of the `body` element:`$("body").css("background-color")`It
    will only read the value and not modify the property value. |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(propertyName, value)` | `propertyName` is a CSS property,`value` is
    a value to set for the property | The function modifies the given CSS property
    to the given value.For example, the following code sets the background color to
    red of all elements with `box` class:`$(".box").css("background-color","#ff0000")`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.css(map)` | `map` is a set of property-value pairs to update | This function
    is useful for setting multiple CSS properties to the same selected elements at
    the same time.For example, the following code sets both left and top CSS properties
    to the selected element with ID `box1:``$("#box1").css({``"left" : "40px"`,`"top"
    : "100px"``})` |'
  prefs: []
  type: TYPE_TB
- en: Benefits of using jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several advantages of using jQuery over pure JavaScript, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery requires shorter code to select DOM nodes and modify them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorter code results in more clear code for reading, it is important in game
    development that usually contains a lot of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing shorter code increases the development speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the jQuery library enables the code to support all major browsers without
    extra tweaks; jQuery wraps the pure JavaScript code and deals with cross browser
    capability by itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating game elements in DOM with jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We initialized the paddles game elements with jQuery. We will do an experiment
    on how we use jQuery to place the game elements.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Changing position of elements with jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s inspect our Ping Pong game element with a grid background:'
  prefs: []
  type: TYPE_NORMAL
- en: We will continue with our Ping Pong example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I have prepared a grid image. Download the `pixel_grid.jpg` image from the
    following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://gamedesign.cc/html5games/pixel_grid.jpg](http://gamedesign.cc/html5games/pixel_grid.jpg
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `images` in the example directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the `pixel_grid.jpg` into the images folder. This image helps us inspect
    the pixel displacement later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open the `index.html` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `background` property of the `playground` DIV to include the pixel
    grid image like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now on opening the `index.html` in web browser we should have the following
    screenshot. The game elements are overlaid on top of a grid image so we can see
    where the elements are placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Changing position of elements with jQuery](img/1260_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We began the example by placing an image called `pixel_grid.jpg`. This is an
    image I created for easy debugging purposes. The image is divided into small grids.
    Every 10 x 10 grid forms a big block with 100 x 100 pixels. By placing this image
    as background of the DIV, we put a ruler that enables us to measure the position
    of its children DIVs on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the behavior of absolute position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a DOM node is set to be the `absolute` position, the left and top properties
    can be treated as a **coordinate**. We can treat the left/top properties into
    X/Y coordinates with Y positive pointing down. The following graphs show the relationship.
    The left side is the actual CSS value and the right side is the coordinate system
    in our mind when programming the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the behavior of absolute position](img/1260_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the left and top properties refer to the top left edge of the web
    page. This reference point is different when any parent of this DOM node has a
    `position` style set explicitly. The reference point of the left and top properties
    becomes the top left edge of that parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why we need to set the playground with relative position and all game
    elements inside with absolute position. The following code snippet from our example
    shows their position values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which jQuery selector is to be used if you want to select all header elements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. $("#header")
  prefs: []
  type: TYPE_NORMAL
- en: b. $(".header")
  prefs: []
  type: TYPE_NORMAL
- en: c. $("header")
  prefs: []
  type: TYPE_NORMAL
- en: d. $(header)
  prefs: []
  type: TYPE_NORMAL
- en: Getting a keyboard input from players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is about game development. We can think about game development as
    the following loop:'
  prefs: []
  type: TYPE_NORMAL
- en: A game state is visually displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Players input their commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The game runs according to the players' input under the designed game mechanics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loop the process again from step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We learned how to display game objects with CSS and jQuery in previous sections.
    The next thing we need to create in the game is getting input from the players.
    We will discuss the keyboard input in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Moving DOM objects by a keyboard input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create a traditional ping pong game. There are two paddles
    on the left and right side. A ball is placed in the middle of the playground.
    Players can control the left paddle and move it up and down by using *w* and *s*
    keys, and use *arrow-up* and *down* keys for the right paddle. We will focus on
    the keyboard input and leave the ball movement for the later section:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue with our `pingpong` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `html5games.pingpong.js` file which will contain our game logic. Our
    only logic now is to listen to the key down event and move the corresponding paddles
    up or down. Replace the content in the file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's test the paddle control of the game. Open the `index.html` in Google Chrome.
    Try pressing the *w* key, the *s* key, and *arrow-up* and *down*. The two paddles
    should be able to move up or down according to the input, but they cannot move
    at the same time now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Moving DOM objects by a keyboard input](img/1260_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the HTML code we just used. The HTML page contains header,
    footer information, and a DIV with ID `game`. The game node contains a child named
    playground. The playground contains three children, two paddles, and the ball.
  prefs: []
  type: TYPE_NORMAL
- en: We often start the HTML5 game development by preparing a well-structured HTML
    hierarchy. The HTML hierarchy helps us group similar game objects (which are some
    DIVs) together. It is a little like grouping assets into a movie clip in Adobe
    Flash if you have ever made animations with it. We may also consider it as layers
    of game objects for us to select and style them easily.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding a key code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every key on the keyboard is assigned a number. By getting that number, we can
    find out which key is pressed. We listen to the jQuery `keydown` event listener.
    The event fires with the `event` object containing the **key code**. We can obtain
    the key code by calling the `which` function to the key down `event` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try adding a console log function inside the `keydown` event listener
    and observe the representing integer of each key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Making constants more readable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our example, we use the key code to check whether the player hits the keys
    we are interested in. Take the arrow-up key as an example. Its key code is 38\.
    We can simply compare the key code with the number directly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this is not a recommended practice because it makes the game code
    more difficult to maintain. Imagine later if we want to map the action from the
    arrow-up key to another key. We may not be sure whether 38 means the arrow-up.
    Instead, we can give the constant a meaningful name with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: By giving 38 a name `KEY.UP`, we can be sure that the block of code is mapped
    to the arrow-up key and so we can modify it without doubt when maintaining the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Converting strings to numbers with parseInt function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most cases, we apply the left and top CSS styles to DOM elements by using
    the format such as **100px**. We specify the unit when setting the property. It
    is the same when we get the value of the property. When we call `$("#paddleA").css("top")`,
    we get the value of **100px** instead of **100**. This gives us a problem when
    we want to perform an arithmetic operation on the value.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, we apply the left and top CSS styles to DOM elements by using
    the format such as **100px**. We specify the unit when setting the property. It
    is the same when we get the value of the property. When we call `$("#paddleA").css("top")`,
    we get the value of **100px** instead of **100**. This gives us a problem when
    we want to perform an arithmetic operation on the value.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we want to move up the paddle by setting the paddle `top` property
    to its current position minus five pixels. Let us assume paddle A has the `top`
    property set to 100px now. If we use the following expression to add five pixels,
    it fails and returns `100px5:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It is because JavaScript executes the `css` function and gets "100px". Then
    it appends "5" to the "100px" string.
  prefs: []
  type: TYPE_NORMAL
- en: We need a method to convert the "100px" string before doing any mathematical
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript provides us with the `parseInt` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a general definition of how to use the `parseInt` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `parseInt` function takes one required argument and one option:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Definition | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| String | The string to be parsed | The function parses the first number of
    the string. It will return `NaN`, Not a Number, if the given string cannot be
    converted into a number.It will parse the string starting with "0x" in hexadecimal
    by default.Take the following code as examples:`parseInt("100px")` returns 100.`parseInt("5cm")`
    returns 5.`parseInt("0xF")` returns 15. |'
  prefs: []
  type: TYPE_TB
- en: '| Radix | Optional. A number to indicate which number system to be used | The
    second argument forces the `parseInt` function to parse the string in a given
    number system.For example:`parseInt("0x10")` returns 16`parseInt("0x10",10)` returns
    0`parseInt("FF",16)` returns 255 |'
  prefs: []
  type: TYPE_TB
- en: Executing JavaScript expressions directly in the Console panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should also know that you can execute JavaScript expressions by directly
    typing it into the console window. The console window is a tool from the Developer
    Tool in Google Chrome. (There are also other similar tools in other web browsers).
    We can open the console by clicking on **Wrench Icon | Tools | Developer tools
    | Console**.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a handy way to quickly test a simple expression when you are not sure
    whether it works during development. The following screenshot tests the return
    value of the two `parseInt` expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing JavaScript expressions directly in the Console panel](img/1260_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converting strings to integers can be tricky sometimes. Do you know what is
    the `parseInt` result of *10 seconds 20?* How about *10x10* and *$20.5?*
  prefs: []
  type: TYPE_NORMAL
- en: It is time to open the console panel and try converting some strings into numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the console window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are writing more complicated logic code now. It is good practice to keep
    an eye on the console of the Developers Tools. If the code contains any error
    or warning, the error message will appear there. It reports any error found and
    the line of code that contains the error. It is very useful and important to have
    the console window open when testing the HTML5 games. I have seen many times that
    people get stuck and have no idea as to why the code is not working. The reason
    is that they have a typo or syntax error and they did not check the console window
    until fighting with the code for hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that there is an error in line 25 of the `html5games.pingpong.js`
    file. The error message is **Invalid left-hand side in assignment**. After inspecting
    the code, I found that I wrongly used an equal sign (=) when setting the CSS `top`
    property in jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Checking the console window](img/1260_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Supporting multiple keyboard input from players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous input method only allows one input at a time. The keyboard input
    is also not so smooth. Imagine now that two players are playing the Ping Pong
    game together. They cannot control the paddle well because their inputs interrupt
    the others. In this section, we are going to modify our code to make it support
    multiple keyboard inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Listening to keyboard input with another approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use another approach to handle the key down event. This approach will
    be a lot smoother and supports multiple inputs at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html5games.pingpong.js` we used in the last section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the code we coded there. It is simpler to start from scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need a global variable of array to store the key pressed status. Enter
    the following code in the opened JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing is the code is executed once the page is loaded and ready. It
    will listen and mark the pressed key. Put the following code in the JavaScript
    file after the two lines we just coded there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We have stored the key which is pressed. What we are missing is actually moving
    the paddles. We set a timer to continuously call a function to move the paddles.
    Paste the following code in the `html5games.pingpong.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Let's test what we just coded. Save all the files and open `index.html` in the
    web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try pressing the keys to control both paddles. The two paddles should move smoothly
    and respond at the same time without interruption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used another approach to capture the keyboard input. Instead of doing
    the action once after the key press is detected, we store which keys are pressed
    and which are not. Afterwards, we use a JavaScript interval to check the pressed
    keys every 30 milliseconds. This approach enables us to know all the keys pressed
    at the time and so we can move both paddles at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring global variables in a better way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Global variables** are variables that can be accessed globally in the entire
    document. Any variable that is declared outside any function is a global variable.
    For instance, in the following example code snippets, `a` and `b` are global variables
    while `c` is a **local variable** that only exists inside the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Since global variables are available in the entire document, it may increase
    the change of variable name conflicts if we integrate different JavaScript libraries
    into the web page. As good practice, we should put all global variables we use
    into an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Time for action* section, we have a global array to store all pressed
    keys. Instead of just putting this array in global scope, we created a global
    object named `pingpong` and put the array inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the future, we may need more global variables and we will put them all inside
    the `pingpong` object. This reduces the chance of name confliction to only one
    name, `pingpong`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a JavaScript timer with setInterval function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pressed keys are stored in the array and we have a timer to loop and check
    the array periodically. This can be done by the `setInterval` function in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the general definition of the `setInterval` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `setInterval` takes two required arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Definition | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| expression | The function call back or code expression to be executed | The
    expression can be a reference of function call back or an inline code expression.
    The inline code expression is quoted and reference of function call back is not.For
    example, the following code calls the `hello` function 100 milliseconds:setInterval(hello,100);The
    following code calls the `hi` function with parameters every 100 milliseconds:setInterval("hi(''Makzan'')",100);
    |'
  prefs: []
  type: TYPE_TB
- en: '| milliseconds | The duration between every execution of the expression, in
    milliseconds | The unit of the interval is in milliseconds. Therefore, setting
    it to 1000 means running the expression every second. |'
  prefs: []
  type: TYPE_TB
- en: Understanding Game Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a timer to execute some game-related code every 30 milliseconds, so
    this code is executed 33.3 times per second. In game development, this is called
    **Game Loop.**
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several common things we will execute inside a game loop:'
  prefs: []
  type: TYPE_NORMAL
- en: Processing user input, which we just did
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating game objects' status, including position and appearance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking game over
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is actually executing in the game loop differs in different types of games
    but the purpose is the same. The game loop is executed periodically to help run
    the game smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Moving a DOM object with JavaScript Interval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine now we can make the little red ball move around in the playground. The
    ball will bounce away when it hits the paddles. The player will lose a score when
    the ball passes the paddle and hits the playground edge behind the paddle. All
    these actions are manipulating the position of the DIVs inside the HTML page by
    jQuery. To complete this Ping Pong game, our next step is to move the ball.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Moving the ball with JavaScript Interval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just learnt and used the `setInterval` function to create a timer. We will
    use the timer to move the ball a little bit every 30 milliseconds. We are going
    to also change the direction of the ball movement once it hits the playground
    edge. Let''s make the ball move now:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use our last example, listening to multiple keyboard inputs, as the
    starting point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `html5games.pingpong.js` file in the text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are now moving the ball and we need to store the ball status globally. We
    will put the ball-related variable inside the `pingpong` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In every game loop, we used to move the paddles. Now we will move the ball
    as well. Add a `moveBall` function call to the `gameloop` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'It is time to define the `moveBall` function. The function is divided into
    four parts, it gets the current ball position, checks the boundaries of the playground,
    changes the direction of the ball when hitting the boundaries and actually moves
    the ball after all these calculations. Let''s put the following `moveBall` function
    definition in the JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We have prepared the code to move the ball every 30 milliseconds. Save all files
    and open `index.html` in Google Chrome to test it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The paddles work just as in the last example and the ball should be moving around
    the playground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just successfully made the ball move around the playground. We have a loop
    to run routine game logic every 30 milliseconds. Inside that game loop, we move
    the ball five pixels at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three properties of the ball, speed, and direction X/Y. The speed
    defines how many pixels the ball moves in each step. The direction X/Y is either
    1 or -1\. We move the ball with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The direction value is multiplied by the movement. When the direction is 1,
    the ball moves to the positive direction of the axis. When the direction is -1,
    the ball moves to the negative direction. By toggling the X and Y directions,
    we can move the ball in four directions.
  prefs: []
  type: TYPE_NORMAL
- en: We compare the ball's X and Y with the four edges of the playground DIV element.
    This checks whether the ball's next position is beyond the boundary and then we
    toggle the direction between 1 and -1 to create the bouncing effect.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning collision detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have checked the boundary of the playground when moving the ball in the previous
    section. Now we can control the paddles with the keyboard and watch the ball moving
    around the playground. What is missing now? We cannot interact with the ball.
    We control the paddles but the ball just passes through them as if they are not
    there. It is because we missed the collision detection between the paddles and
    the moving ball.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Hitting the ball with the paddles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use a similar approach of checking the boundary to check the collision:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html5games.pingpong.js` file we used in the previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `moveball` function, we have already reserved the place to put the collision
    detection code there. Find the line with `// check moving paddle here`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s put the following code there. The code checks whether the ball is overlapping
    with either paddle and bounces the ball away when they overlap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to reset the ball in the middle area after the ball hits
    the left or right edge of the playground. Remove the bouncing ball code in the
    `check right` and `check left` code section and paste the following code there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Test the game in a browser and the ball will now bounce away after hitting the
    left or right paddle. It will also reset to the center of the playground when
    hitting the left or right edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Hitting the ball with the paddles](img/1260_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have modified the ball checking to make it bounce away when overlapping with
    the paddles. Moreover, we reposition the ball in the center of the playground
    when hitting the left and right edge.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we check the collision between the ball and the left paddle.
  prefs: []
  type: TYPE_NORMAL
- en: At first, we check whether the ball's X position is less than the left paddle's
    right edge. The right edge is the `left` value plus the `width` of the paddle.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1260_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then we check whether the ball's Y position is between the top edge and bottom
    edge of the paddle. The top edge is the `top` value and the bottom edge is the
    `top` value plus the `height` of the paddle.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1260_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We bounce the ball away if the ball's position passes both checks. This is how
    we check it and it is just a basic collision detection.
  prefs: []
  type: TYPE_NORMAL
- en: We determine that the two objects are overlapped by checking their position
    and width/height. This type of collision detection works well in rectangle objects
    but is not good for circles and other shapes. The following screenshot illustrates
    the issue. The collision areas shown in the following graph are false positive.
    Their bounding box collides but the actual shapes do not overlap each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1260_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For special shapes, we will need more advanced collision detection techniques
    that we will discuss later.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We check three edges of the paddles to determine whether the ball overlaps with
    them. If you play the game and observe the ball bouncing carefully, you will find
    that it is not perfect now. The ball may bounce while behind the paddles. Think
    about the reason and modify the code to make a better collision detection with
    the ball and the paddles.
  prefs: []
  type: TYPE_NORMAL
- en: Showing text dynamically in HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the basic game mechanics implemented in the previous sections. Our Ping
    Pong game is missing a scoring board now showing both players' scores. We discussed
    how to use jQuery to modify the CSS styles of the selected elements. Can we also
    alter the content of the selected elements with jQuery? Yes, we can.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Showing the score of both players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create a text-based scoreboard and update the scores when either
    player scores a goal:'
  prefs: []
  type: TYPE_NORMAL
- en: We are making improvements on our existing game so we use the last example as
    the starting point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `index.html` in the text editor. We are going to add the scoreboard
    DOM elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following HTML code before the `game` DIV inside `index.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Let's move onto the JavaScript part. Open the `html5games.pingpong.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need two more global variables to store the players'' scores. Add their
    score variables inside the `pingpong` global object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We had a place to check if player B lost. We incremented the player A''s score
    there and updated the scoreboard with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We have similar code as in step 6 to update player B''s score when player A
    lost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'It is time to test our latest code. Open the `index.html` in a web browser.
    Try playing by controlling both paddles and lose some points. The scoreboard should
    be counting the scores correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Showing the score of both players](img/1260_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just used another common jQuery function: `html()` to alter the content
    of the game on the fly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `html()` function gets or updates the HTML content of the selected element.
    Here is a general definition of the `html()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: When we use the html ( ) function without an argument, it returns the HTML content
    of the first match element. When we use it with an argument, it sets the HTML
    content to all matched elements with the given HTML string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, provide the following HTML structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the following jQuery calls return Makzan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in the following jQuery call, it sets all matched elements to the
    given HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the jQuery command makes the following HTML result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Have a go hero Winning the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have the scoring now. See whether you can modify the game to make it stop
    after any player gets 10 points. Then show a win message.
  prefs: []
  type: TYPE_NORMAL
- en: You might also want to try styling the game to make it more appealing. How about
    giving the scoreboard and playground some image backgrounds? Replacing the paddles
    with two goalkeeper characters?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot in this chapter about basic techniques of creating a simple
    Ping Pong game with HTML5 and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first HTML5 game—Ping Pong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using jQuery to manipulate DOM objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting keyboard inputs with multiple keys down support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting collisions with the bounding box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also discussed how to create a game loop and move the ball and paddles.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've warmed up by creating a simple DOM-based game, we are ready to
    create more advanced DOM-based games with new features from CSS3\. In the next
    chapter, we will create games with CSS3 animation, transition, and transformation.
  prefs: []
  type: TYPE_NORMAL
