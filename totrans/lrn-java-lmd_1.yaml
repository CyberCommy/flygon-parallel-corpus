- en: Chapter 1. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to Learning Java Lambdas.
  prefs: []
  type: TYPE_NORMAL
- en: Java underwent huge changes in it's version 8 release. A lot was driven by the
    perception that Java was becoming long in the tooth. To compete with modern, functional
    programming languages, Java 8 introduced functional programming constructs like
    lambdas to better support a more functional style.
  prefs: []
  type: TYPE_NORMAL
- en: This book offers a concise explanation of lambdas and various other features
    required to make them work in Java. As well as offering background, syntax and
    usage examples of lambdas, the book describes other related features, such as
    functional interfaces and type inference.
  prefs: []
  type: TYPE_NORMAL
- en: The road to modern Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 8 was released on March 18, 2014, two years seven months after the previous
    release. It was plagued with delays and technical problems but when it finally
    came, it represented one of the biggest shifts in Java since Java 5.
  prefs: []
  type: TYPE_NORMAL
- en: The headliners were of course lambdas and a retrofit to support functional programming
    ideas. With languages such as **Scala** taking center stage and the modern trend
    towards functional programming, Java had to do something to keep up.
  prefs: []
  type: TYPE_NORMAL
- en: Although Java is not and never will be a *pure* functional programming language,
    the changes in Java 8 enabled developers to use functional idioms more easily
    than in previous versions. With discipline and experience, you can now get a lot
    of the benefits of functional programming without resorting to third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Modern Java features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To give you an idea of just how big a change Java 8 was, and why it ushered
    in a new, modern Java, here''s a mostly complete list of the new features it introduced:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core APIs were updated to take advantage of lambdas, including the collection
    APIs and a new functional package to help build functional constructs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entirely new APIs were developed that use lambdas, things like the stream API
    which brought functional style processing of data. For example, functions like
    `map` and `flatMap` from the stream API enable a declarative way to process lists
    and move away from external iteration to internal iteration. This in turn allows
    the *library vendors* to worry about the details and optimize processing however
    they like. For example, Java now comes with a parallel way to process streams
    without bothering the developer with the details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minor changes to the core APIs; new helper methods were introduced for strings,
    collections, comparators, numbers and maths.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the additions are changing the way that people code. For example, the
    `Optional` class will be familiar to some, and it enables a better way to deal
    with nulls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There were various concurrency library improvements. Things like an improved
    concurrent hash map, completable futures, thread safe accumulators, an improved
    read write lock (called a StampedLock), an implementation of a work stealing thread
    pool and much more besides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for adding static methods to interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default methods (otherwise known as *virtual extension* or *defender methods*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type inference was improved and new constructs like functional interfaces and
    method references were introduced to better support lambdas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An improved date and time API was introduced (similar to the popular `Joda-time`
    library).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `IO` and `NIO` packages received welcome additions to enable working with
    IO streams using the new streams API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflection and annotations were improved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An entirely new JavaScript engine shipped with Java 8\. Nashorn replaced Rhino,
    and was faster and had better support for ECMA-Script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM improvements; the integration with JRocket was completed, creating a faster
    JVM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JVM dropped the idea of perm gen, instead using native OS memory for class
    metadata. This is a huge deal and provides better memory utilization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JRocket integration also brought Mission control (jmc) to the JDK as standard.
    It compliments JConsole and VisualVM with similar functionality but adds very
    inexpensive profiling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other miscellaneous improvements, like improvements to JavaFX, base64 encoding
    support and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
