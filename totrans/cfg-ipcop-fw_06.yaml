- en: Chapter 6. Intrusion Detection with IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a working firewall with most of the basic features set up,
    we are feeling pretty secure. Surely no malicious intruder could get past these
    defenses on our network. What if they did though? How would we know? What would
    we do?
  prefs: []
  type: TYPE_NORMAL
- en: These are questions that an **Intrusion Detection System** (**IDS**) tries to
    answer; it detects when things don't go entirely to plan in regards to network
    security and logs any suspicious activity that it recognizes, so that we can effectively
    deal with a security incident.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to IDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a variety of Intrusion Detection Systems in the market ranging from
    the enterprise-level managed-network monitoring solution to a simple on-the-host
    logging system. There is also a distinction between an **Intrusion Prevention
    System** (**IPS**) and an IDS. An IPS goes one better than the IDS and attempts
    to block an attack in progress whereas the IDS attempts to log the attack and
    optionally notify a responsible party to employ an incident response plan.
  prefs: []
  type: TYPE_NORMAL
- en: IDSs can be further categorized as **NIDS** or **HIDS**, the difference being
    that the former watches the *network* and the latter monitors the *host*. This
    is important when choosing an IDS as we have to be sure of what exactly we are
    monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: For example, many administrators won't employ a HIDS on Windows or Unix boxes
    due to their built-in abilities to log extensively (event logs/syslog), and therefore
    prefer to monitor the traffic on the network for signs of malicious behavior.
    This can also be more reliable than host monitoring as it's hard to trust the
    logs of a compromised host.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of IPCop what we have is a built-in NIDS on our firewall, pre-configured
    and ready to use with the absolute minimal configuration, the **Snort** intrusion
    detection system.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Snort
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snort is the IDS included with IPCop, and is one of the best-known and commonly
    used **sniffers** available today and used by networks large and small the world
    over. It has continually updated signatures for a massive number of vulnerabilities,
    a massive user base, commercial support, and excellent documentation available
    online as well as in print. Snort was initially developed by Martin Roesch in
    the late 1990's and was destined to be a sniffer and possibly a little more, hence
    the name Snort.
  prefs: []
  type: TYPE_NORMAL
- en: Initially as a sniffer Snort was quite good and was linked to its slightly older
    relative TCPDUMP. Eventually Snort was expanded and become known as more of a
    NIDS than a sniffer (many of Snort's users are unaware of its sniffing capabilities
    and use it purely as an IDS).
  prefs: []
  type: TYPE_NORMAL
- en: As Snort became very popular, Martin Roesch decided to start a company based
    on Snort to offer security services based on the expertise that he had as a Snort
    developer. This led to the creation of Sourcefire ([http://www.sourcefire.com](http://www.sourcefire.com)).
    Sourcefire now offers commercial support and other services based on Snort. Though
    it also employs full time developers for Snort, it still remains an open-source
    product, and hence can be provided with IPCop. The IPCop developers add to this
    a pre-configured Snort system with very easy-to-use and simple management options
    in the IPCop interface.
  prefs: []
  type: TYPE_NORMAL
- en: Do We Need an IDS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The need of an IDS depends entirely on the network and what we want to do. Generally
    I'd say that we need it, unless we can think of a good reason not to have it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The added benefit of an IDS is that we can see what is passing through our
    network and attempt to isolate any traffic that appears malicious. This is important
    as it''s a function many firewalls lack (except those with layer-seven support,
    which are termed application-layer firewalls). Since firewalls work at the lower
    layers of network communication their filtering rules are generally limited to
    IP addresses, ports, time of day, and only a few other criteria. If we have a
    firewall that isn''t looking into the payload of a packet and only making decisions
    based on packet headers, it''s far from inconceivable to say that these devices
    may allow some malicious traffic to pass. The role of our IDS is to do deep inspection
    of these packets looking at the data contained within and make decisions such
    as: "Does this look like the Code Red worm?", "Is this an attempt at a buffer
    overflow in our sendmail server?", or "Has one of our users just been exploited
    by the latest 0-day WMF exploit?". It''s quite valuable for an administrator to
    be notified of any packets that throw up these warning signs in the IDS, as we
    can then use this information to look further into the status of our network to
    see if we have a major issue to contend with, although often these warnings are
    false alarms. We can think of an IDS as an early warning system that something
    might be going on that requires our attention. In an attempt to protect our network,
    this is very valuable information to have!'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Layer-7 Filtering (Application Layer)**'
  prefs: []
  type: TYPE_NORMAL
- en: There are options for IPCop that provide filtering at this layer, but they are
    not provided by default and require the installation of third-party add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: How Does an IDS Work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NIDS in general, and Snort specifically, are run on devices that have the ability
    to monitor as much of the network as possible, generally on or near a gateway
    device, (as in the case of IPCop) or on some sort of monitoring port on a switch
    (SPAN/Mirror ports). The NIDS then sets up the network card or cards on the device
    to work in **promiscuous mode** meaning they will pass packets up through the
    network stack whether or not they are destined for the machine. This is important
    as a NIDS will often be monitoring machines other than itself. The NIDS on the
    host will then take these packets and have a look at the data payload (and sometimes
    the headers as well) to see if it notices anything malicious. This may sound like
    artificial intelligence as the NIDS just sits there thinking to itself about packets
    passing by; it's actually quite a lot simpler than that!
  prefs: []
  type: TYPE_NORMAL
- en: Every day exploits, viruses, worms, spyware, and other malicious software generate
    network traffic, and this traffic often has patterns specific to the piece of
    software in use, a specific string in an exploit, specific hosts it contacts,
    and specific options in the TCP/IP headers. There are many people watching their
    networks and as they notice something that looks strange they document it and
    generally seek advice from their peers to see if anyone notices something similar.
    Quite shortly afterwards, if malicious activity is detected, someone will write
    a signature for their favorite IDS and in many cases for a few IDSs all at once.
    Based on these signatures the IDS detection engine will decide whether to flag
    a packet as possibly malicious. These are rarely 100% accurate as they can and
    will provide false positives or negatives. This detection is designed as an extra
    layer of defense and cannot say for sure that a network has or has not been compromised.
    What can be done is alerting of an administrator that something is up. Snort on
    an IPCop box is placed in an excellent position to alert on any malicious behavior
    attempting to pass through the firewall to protected interfaces—or even between
    protected interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Using Snort with IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up Snort with IPCop is a very straightforward process. SourceFire require
    users to register if they want to download updated signatures. We really do want
    to have updated rules, and so we should ensure we register with SourceFire. This
    can be done by following the instruction on the following screen for registering
    on the Snort website and generating an Oink code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Snort with IPCop](img/1361_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once registered, we fill in the form on the previous screen. We select each
    interface we want to monitor by marking the corresponding checkbox. The author's
    preference is to monitor all interfaces at this point and filter later when monitoring
    the logs. We should also choose **SourceFire VRT rules for registered users**
    unless we have a paid for subscription that allows us access to the subscription
    rules. Then we enter our **Oink Code** as obtained from the Snort website. We
    can now download the most up-to-date rules. That's it! We have now, by filling
    in a very simple form, configured a NIDS for our network. Now surely we are secure!
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An intrusion detection system on its own isn't any good whatsoever; it needs
    a set of eyes to look over the logs and take action or some sort of automated
    notification system. IPCop's web interface provides a primitive first look at
    what is going on in the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be found under the **Logs IDS Logs** menu option as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring the Logs](img/1361_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The log screen defaults to today's date and gives us some interesting information.
    Today on December 20^(th) 381 rules were activated, meaning that Snort noticed
    381 possible attacks on the network. This number is abnormally high as the data
    was generated artificially by the author, but generally you would expect to see
    a few rules activated per day depending on the size of your network. Home users
    should expect to see a lot of port scans and automated worm attacks for example.
    If we take a closer look at one of the rules, we can see what Snort has shown
    us in the logs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Date:12/20 12:51:41 Name:SNMP request udp**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Priority:2 Type:Attempted Information Leak**'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP info: 10.0.0.102:32833 -> 10.0.0.200:161**'
  prefs: []
  type: TYPE_NORMAL
- en: '**References: none found SID: 1417**'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that someone from the computer at IP address **10.0.0.102** attempted
    to gain information on our network using a **UDP**-based **SNMP** request from
    port **32833** on the attacker to port **161** on **10.0.0.200**. We also have
    a **SID** value of **1417**. This is good basic information to let us know what
    is going on. We can see who, what, where, and when—which are very important for
    intrusion detection. The only value we don't have an obvious explanation for here
    is the SID.
  prefs: []
  type: TYPE_NORMAL
- en: The SID is the the Snort Signature ID and the number itself is a link to the
    online database of SIDs, which contains more information about this event.
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring the Logs](img/1361_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This gives us a lot of information and lets us narrow down exactly what happened
    in this case. In the false positives section we can see that this event can occur
    when the system is scanned by security scanning software, which in this case is
    entirely correct, as the author scanned the IPCop box with OpenVAS, ([http://www.openvas.org](http://www.openvas.org))
    an open-source vulnerability scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**OpenVAS**'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVAS is a fork of the Nessus security scanner, now being developed as a separate
    project in order to give an alternative to the latest non-GPL version of Nessus.
  prefs: []
  type: TYPE_NORMAL
- en: Priority
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another very important field is the priority, which in this case is **2**.
    Snort has the following three levels by default:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Level 1:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executable code detected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempt or success in gaining administrative privilege
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trojan signatures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Level 2:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempted/Successful Denial of Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempted/Successful Information Leak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unusual client port connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Level 3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port Scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suspicious string detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever an attack is detected, the rule it matches has a priority level that
    is referenced in order to give the event its priority number. These numbers are
    part of the rule and can be modified if necessary by manually altering the Snort
    rules. Manual alteration of Snort's configuration will not be covered here; however,
    there are many books and a lot of online documentation available on the subject
    of Snort.
  prefs: []
  type: TYPE_NORMAL
- en: Log Analysis Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snort, being such a well-used project, has a variety of analysis products available.
    We will take a quick look at some of the most commonly used products and the features
    they provide. The IPCop logging system is not entirely adequate for most analysis,
    and definitely cannot be used to provide reports, which are commonly required
    whenever there is an intrusion attempt. Many projects have been created in order
    to analyze and report on these logs. In order to use these tools you may have
    to configure IPCop to log to a remote syslog server or in some cases you can install
    and add on to IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: Perl Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the easiest install-and-use products for Snort log analysis is the excellent
    SnortALog. It offers some excellent features, the most useful being the abilities
    it has for report generation—you can have reports in ASCII, PDF, or HTML format
    with images represented as GIF, PNG, or JPEG. This makes for excellent reporting
    as you can be provided with a variety of graphs and statistics that can then be
    used in presentations or other reports, on the security status of the network.
    SnortALog works with all output options available with Snort and has an easy-to-use
    GUI for generating reports. There is also the option of SnortSnarf, which offers
    features similar to those of SnortALog; however SnortALog is fairly easy to use,
    and apparently SnortSnarf is no longer being developed. SnortALog also provides
    more report options and has a more polished look.
  prefs: []
  type: TYPE_NORMAL
- en: ACID and BASE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are also some more full-featured and complicated systems that can be used
    for monitoring and analyzing Snort logs. **ACID** for example is PHP-based, requires
    the use of a web server, and provides real-time monitoring and statistics of the
    Snort log. Moreover with the statistics generated with the above PERL scripts,
    you have very powerful options for further analysis. For example, you can query
    quite extensively to be provided with only the events of most interest for your
    current analysis, you can view the packet contents that generated the event, and
    closely analyze the packet data to fully determine the extent of the attack and
    whether it was a false positive. **BASE** is an alternative (forked from ACID)
    to ACID, provides similar features, and it is worth comparing the two to find
    the product preferred for our monitoring of the intrusion detection system.
  prefs: []
  type: TYPE_NORMAL
- en: What to Do Next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have identified that an incident has occurred, it is important to quickly
    act on the incident. Although Snort itself provides nothing more than a few ideas
    on looking further at a specific event, it's the responsibility of the administrator
    to decide how to handle an event.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a smaller network a formalized incident response plan isn''t always necessary,
    but it does help in maintaining system security if we have an idea of what to
    do if subjected to a specific attack. Some good examples would be port scans,
    denial of service, and exploitation attempts. We can then decide on things like:'
  prefs: []
  type: TYPE_NORMAL
- en: Do we want to report these?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we want to analyze other protection systems if they occur?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we have to notify someone?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answering a few basic questions like these as you set up your IDS gives the
    IDS much more value as it becomes part of a valid plan for network protection.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered the basics of what an IDS is, how it works,
    how to use Snort with IPCop, and additional tools for use with Snort.
  prefs: []
  type: TYPE_NORMAL
- en: At this point we have knowledge of network protection, network monitoring, and
    at least a basic idea of what we would do if an attack attempt occurs. This puts
    us in a good situation on our network and ensures we are fully aware of what is
    going on. As mentioned in the introduction to this chapter, an IDS is supposed
    to give us a basic overview of the security status of the network—are we being
    attacked, where is it coming from, and what are the targets.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with this information we can effectively increase the security of our
    network. Using an automated tool such as this means it is much easier for us to
    monitor these activities daily and ensure that we are always aware of our surroundings.
    Knowing how our network functions and what sort of data passes through it daily
    is an important measure in spotting network intrusions. We cannot be aware that
    something is going wrong if we don't have a baseline to compare this against;
    constantly monitoring our IDS gives us that baseline.
  prefs: []
  type: TYPE_NORMAL
