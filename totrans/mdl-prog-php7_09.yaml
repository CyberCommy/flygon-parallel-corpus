- en: Chapter 9. Building the Payment Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The payment module provides a basis for further sales functionality in our web
    shop. It will enable us to actually choose a payment method when we reach the
    checkout process of the upcoming sales module. The payment methods can generally
    be of various types. Some can be static, like Check Money and Cash on Delivery,
    while others can be regular credit cards like Visa, MasterCard, American Express,
    Discover, and Switch/Solo. Throughout this chapter we will address both types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our application requirements, defined under [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*, do not really say anything about the type of payment method we
    need to implement. Thus, for the purpose of this chapter, we will develop two
    payment methods: a card payment and a check money payment. In regards to the credit
    card payment, we will not be connecting to a real payment processor, but everything
    else will be done as if we are working with a credit card.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, we want this done by an interface, similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This would then impose the requirement of having the `SalesBundle` module,
    which we still haven''t developed. We will therefore proceed with our payment
    methods using a simple Symfony `controller` class that provides its own way to
    address the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: function `authorize();`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function `capture();`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function `cancel();`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `authorize` method is used for cases where we merely want to authorize the
    transaction, without actually executing it. The result is a transaction ID that
    our future `SalesBundle` module can store and reuse for further `capture` and
    `cancel` actions. The `capture` method takes us a step further by first executing
    the authorize action and then capturing the funds. The `cancel` method performs
    the cancelation based on a previously stored authorization token.
  prefs: []
  type: TYPE_NORMAL
- en: We will expose our payment methods through tagged Symfony services. The tagging
    of a service is a nice feature which enables us to view the container and all
    of the services tagged with the same tag, which is something we can use to fetch
    all of the `paymentmethod` services. The tag naming has to follow a certain pattern,
    which we impose on ourselves as application creators. With that in mind, we will
    tag each payment service with a `name`,`payment_method`.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, the `SalesBundle` module will fetch and use all of the services tagged
    with `payment_method` and then use them internally to generate a list of available
    payment methods that you can work with.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module has no firm dependencies on any other module. However, it might have
    been more convenient to build the `SalesBundle` module first and then expose a
    few interfaces that the `payment` module might use.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start off by creating a new module called `Foggyline\PaymentBundle`. We
    do so with the help of the console by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The command triggers an interactive process which asks us several questions
    along the way, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementation](graphics/B05460_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, files `app/AppKernel.php` and `app/config/routing.yml` are modified
    automatically. The `registerBundles` method of an `AppKernel` class has been added
    to the following line under the `$bundles` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `routing.yml` has been updated with the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to avoid colliding with the core application code, we need to change
    the `prefix: /` to `prefix: /payment/`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a card entity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though we won''t be storing any credit cards in our database as part of
    this chapter, we want to reuse the Symfony auto-generate CRUD feature in order
    for it to provide us with a credit card model and form. Let''s go ahead and create
    a `Card` entity. We will do so by using the console, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The command triggers the interactive generator, providing it with `FoggylinePaymentBundle:Card`
    for an entity shortcut, where we also need to provide entity properties. We want
    to model our `Card` entity with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`card_type`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card_number`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expiry_date`: date'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security_code`: string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once done, the generator creates `Entity/Card.php` and `Repository/CardRepository.php`
    within the `src/Foggyline/PaymentBundle/` directory. We can now update the database
    so it pulls in the `Card` entity, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With the entity in place, we are ready to generate its CRUD. We will do so
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in a `src/Foggyline/PaymentBundle/Controller/CardController.php`
    file being created. It also adds an entry to our `app/config/routing.yml file`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Again, the view files were created under the `app/Resources/views/card/` directory.
    Since we won't actually be doing any CRUD related actions around cards as such,
    we can go ahead and delete all of the generated view files, as well as the entire
    body of the `CardController` class. At this point, we should have our `Card` entity,
    `CardType` form, and empty `CardController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a card payment service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The card payment service is going to provide the relevant information our future
    sales module will need for its checkout process. Its role is to provide the payment
    method label, code, and processing URLs of an order, such as `authorize`, `capture`,
    and `cancel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by defining the following service under the services element
    of the `src/Foggyline/PaymentBundle/Resources/config/services.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This service accepts two arguments: one being `form.factory` and the other
    being `router`. `form.factory` that will be used within service to create a form
    view for the `CardType` form. The tag is a crucial element here, as our `SalesBundle`
    module will be looking for payment methods based on the `payment_method` tag assigned
    to the service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to create the actual service class within the `src/Foggyline/PaymentBundle/Service/CardPayment.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getInfo` method is what''s going to provide the necessary information
    to our future `SalesBundle` module in order for it to construct the payment step
    of the checkout process. We are passing on three different types of URLs here:
    `authorize`, `capture`, and `cancel`. These routes do not exist just yet, as we
    will create them soon. The idea is that we will shift the payment actions and
    process to the actual `payment` method. Our future `SalesBundle` module will merely
    be doing an **AJAX POST** to these payment URLs, and will expect either a success
    or error JSON response. A success response should yield some sort of transaction
    ID and an error response should yield a label message to show to the user.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a card payment controller and routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will edit the `src/Foggyline/PaymentBundle/Resources/config/routing.xml`
    file by adding the following route definitions to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then edit the body of the `CardController` class by adding the following
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We should now be able to access URLs like `/app_dev.php/payment/card/authorize`
    and see the output of `authorizeAction`. Implementations given here are dummy
    ones. For the purpose of this chapter ,we are not going to connect to a real payment
    processing API. What is important for us to know is that the `sales` module will,
    during its checkout process, render any possible form view pushed through the
    `['payment']['form']` key of the `getInfo` method of a `payment_method` tagged
    service. Meaning, the checkout process should show a credit card form under card
    payment. The behavior of checking out will be coded such that if payment with
    a form is selected and the **Place Order** button is clicked, that payment form
    will prevent the checkout process from proceeding until the payment form is submitted
    to either authorize or capture the URL defined in the payment itself. We will
    touch upon this some more when we get to the `SalesBundle` module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a check money payment service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aside from the credit card payment method, let's go ahead and define one more
    static payment, called **Check Money**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by defining the following service under the services element
    of the `src/Foggyline/PaymentBundle/Resources/config/services.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `service` defined here accepts only one `router` argument. The `tag name`
    is the same as with the card payment service.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then create the `src/Foggyline/PaymentBundle/Service/CheckMoneyPayment.php`
    file, with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Unlike a card payment, the check money payment has no form key defined under
    the `getInfo` method. This is because there are no credit card entries for it
    to define. It is just going to be a static payment method. However, we still need
    to define the `authorize`, `capture`, and `cancel` URLs, even though their implementation
    might be nothing more than just a simple JSON response with success or error keys.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a check money payment controller and routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the check money payment service is in place, we can go ahead and create
    the necessary routes for it. We will start by adding the following route definitions
    to the `src/Foggyline/PaymentBundle/Resources/config/routing.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create the `src/Foggyline/PaymentBundle/Controller/CheckMoneyController.php`
    file, with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Similar to a card payment, here we added a simple dummy implementation of the
    `authorize`, `capture`, and `cancel` methods. The method responses will feed into
    the `SalesBundle` module later on. We can easily implement more robust functionality
    from within these methods, but that is out of the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `FoggylinePaymentBundle` module is really simple. It provides only two
    payment methods: card and check money. It does so via two simple `service` classes.
    Since we are not going after full code coverage tests, we will only cover the
    `CardPayment` and `CheckMoneyPayment` service classes as part of unit testing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start off by adding the following line under the `testsuites` element
    of our `phpunit.xml.dist` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/PaymentBundle/Tests/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and create a test for our `CardPayment` service. We will
    do so by creating a `src/Foggyline/PaymentBundle/Tests/Service/CardPaymentTest.php`
    file, with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are running two simple tests to see if we can instantiate a service,
    either via a container or directly, and simply call its `getInfo` method. The
    method is expected to return a response that contains the `['payment']['form']`
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and create a test for our `CheckMoneyPayment` service.
    We will do so by creating a `src/Foggyline/PaymentBundle/Tests/Service/CheckMoneyPaymentTest.php`
    file, with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, here we also have two simple tests: one fetching the `payment` method
    via a container, and the other directly via a class. The difference being that
    we are not checking for the presence of a form key under the `getInfo` method
    response.'
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our module has two controller classes that we want to test for responses. We
    want to make sure that the `authorize`, `capture`, and `cancel` methods of the
    `CardController` and `CheckMoneyController` classes are working.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first create a`src/Foggyline/PaymentBundle/Tests/Controller/CardControllerTest.php`
    file, with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create `src/Foggyline/PaymentBundle/Tests/Controller/CheckMoneyControllerTest.php`,
    with content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both tests are nearly identical. They contain a test for each of the `authorize`,
    `capture`, and `cancel` methods. Since our methods are implemented with a fixed
    success JSON response, there are no surprises here. However, we can easily play
    around with it by extending our payment methods into something more robust.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter we have built a payment module with two payment methods.
    The card payment method is made so that it is simulating payment with the credit
    cards involved. For that reason, it includes a form as part of its `getInfo` method.
    The check money payment, on the other hand, is simulating a static payment method
    - one that does not include any form of credit card. Both methods are implemented
    as dummy methods, meaning they are not actually communicating to any external
    payment processor.
  prefs: []
  type: TYPE_NORMAL
- en: The idea was to create a minimal structure that showcases how one can develop
    a simple payment module for further customization. We did so by exposing each
    payment method via a tagged service. Using the `payment_method` tag was a matter
    of consensus, since we are the ones building the full application so we get to
    choose how we will implement this in the `sales` module.By using the same tag
    name for each payment method, we effectively created conditions for the future
    `sales` module to pick all of the payments methods and render them under its checkout
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, in the next chapter we will build a **shipment** module.
  prefs: []
  type: TYPE_NORMAL
