- en: Understanding Password Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cryptanalysis, password cracking can be defined as the process of recovering
    the cleartext passphrase by using its hash counterpart. Passwords are part of
    our daily lives; we use them in almost everything we do. As the security of systems
    has developed by looking at various ways to encrypt passwords, so have the tools
    that can crack them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will benefit from taking a look at how passwords have become
    part of our everyday lives. You will gain skills in finding, building, and customizing
    wordlists. You will learn how to leverage wordlists and use them in various password
    cracking tools within Kali Linux. You will gain an understanding of the various
    tools, and when and how they can be used in a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through the chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to password attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with wordlists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline password cracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online password cracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping passwords from memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are required for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 2 and 3 virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to password attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords are nothing new. They have been around for centuries. For example,
    the Roman military used passwords to distinguish friend from foe. In the early
    1960s, the concept of passwords was used by people accessing computer systems
    and sharing data. The purpose was to help keep individual files secret from other
    individuals. From there on, it became the de facto standard for computer security,
    both for personal and corporate use. At inception, securing passwords was not
    much of a concern. As time went by, and because of the boom of the internet, security
    became more of a concern as people started having sensitive information on the
    internet.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing and salting were later introduced to aid in the security of passwords.
    Hashing performs a one-way transformation of the password, in essence turning
    the password into a string of characters. Salting is a unique value of data that
    is added to the password, which results in a different hash being generated. Comparing
    a password that is simply hashed to a password that is hashed with salt will result
    in two completely different hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Today, usernames and passwords are a combination that is used by people every
    day. Devices such as computer systems, mobile devices, game consoles, tablets,
    and more, are all protected by passwords. As a computer user, you probably have
    passwords for many purposes, such as logging into a system, and accessing email,
    databases, networks, websites, applications, and elevated services.
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration testing engagement, you will often encounter passwords
    as your smallest obstacle. Businesses with a high level of security maturity will
    still have users who are the weakest link. As we have learned in [Chapter 4](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml)*,
    Mastering Social Engineering*, users can be exploited by using social engineering.
    Users are also predictable, and the majority will use passwords that are easy
    to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Passwords introduce an inseparable problem. Shorter passwords are easier to
    remember, and easier to guess. Longer passwords are harder to crack, but also
    harder to remember. Add complexity into the mix and the problem remains the same.
    If password requirements are too complex, users will end up forgetting them or, even worse,
    write them down. This introduces problems such as a high volume of password resets,
    which you can exploit by social engineering. Writing passwords down can easily
    be noted while walking through the building. Now, let's factor into consideration
    the fact that users have passwords for multiple online services such as Amazon,
    Spotify, iTunes, Facebook, and Instagram, and the list goes on. Keeping track
    of so many passwords is difficult, and has led to many people using the same password
    more than once. This introduces a major problem if an attacker is able to obtain
    one password; everything can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how we can leverage various methods to crack passwords
    and, in some cases, you don't even need to crack the password to use services.
  prefs: []
  type: TYPE_NORMAL
- en: Working with wordlists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to crack a password, you need to have a list of credentials that you
    can try. You can utilize a user list (which contains usernames only), a password
    list (which contains passwords only), or a list that combines the two.
  prefs: []
  type: TYPE_NORMAL
- en: '**Userlists** is a list that contains usernames. It can be built by performing
    reconnaissance on your target, or, in some cases, it may be provided to you for
    the penetration test. If you need to build your own **userlist**, there are some
    questions to consider. Is the target using `firstname.lastname`as the username?
    Perhaps the target''s username is the same as their email address? A good way
    to find usernames is looking at the metadata of files publicly posted on the internet.
    You can use a simple Google query to find specific file types, using the `filetype:`
    search string.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing Information
    Gathering*, we looked at how to use Google **dorks** for information gathering.
  prefs: []
  type: TYPE_NORMAL
- en: Within Kali Linux, using Firefox ESR, and using the search string `filetype:xls`,
    I was able to pick up a number of documents that had details that could give me
    a clue as to the username structure *(*as shown in the following screenshot*). *You
    can perform the same analysis using a tool such as ExifTool**. **ExifTool is a
    cross-platform tool that supports a number of file formats. It's lightweight and
    you are able to obtain a lot of information from files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install ExifTool in Kali Linux, you need to run the following command from
    a Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can query the file using the `exiftool [options] file` command. To
    view a full list of the options, you can use the `man exiftool` command, which
    will display the documentation within the Terminal, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/133d64c5-6152-4115-9734-83f73acbcd9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Extracting metadata using the exiftool'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we are able to determine that this specific company's
    username structure is `name.surname`. We can perform further investigation using
    LinkedIn to obtain a list of employees who work at the company and generate a
    username list from there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Password** **lists** contain passwords. You can download these or even build
    your own. Kali Linux contains some password lists, although these are not as comprehensive
    as the ones you will find on the internet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in wordlists are found at `/usr/share/wordlists` and contain the
    famous `rockyou.txt` password list, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2849d3b3-714c-4564-a032-1b401b95f04c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Kali Linux built-in word lists'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the tools within Kali Linux have their own wordlists; for example, the
    tool **John the Ripper** has a password list located at `/usr/share/John/password.lst`.
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit framework has a number of wordlists located in `/usr/share/metasploit-framework/data/wordlists`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of online resources where you can obtain password lists.
    Some websites host older password lists that are not updated often. The ones that
    are kept updated are located at sites such as WeakPass ([https://weakpass.com](https://weakpass.com))
    and Seclists ([https://github.com/danielmiessler/SecLists/tree/master/Passwords](https://github.com/danielmiessler/SecLists/tree/master/Passwords)).
    Seclists can be installed inside Kali Linux using the `apt install seclists` command. This
    will download the current release of the password lists into the `/usr/share/seclists`
    path, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2e7567a-8640-4ede-9650-6cefd4211359.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: List of password lists from Seclists'
  prefs: []
  type: TYPE_NORMAL
- en: Some sites, such as CrackStation ([https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm)),
    host a fairly large database and offer an online hash cracker.
  prefs: []
  type: TYPE_NORMAL
- en: Password profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you plan a penetration test, it is important to have a customized password
    list that will apply exclusively to your target. Having a profiled password list
    can aid in the success of a penetration test, as you eliminate the time spent
    using a public wordlist, which is generally very broad.
  prefs: []
  type: TYPE_NORMAL
- en: One way to customize your password list and make it more specific to the target
    is by using the technique of password profiling. Password profiling involves taking
    words or phrases from the organization you are targeting and including them in
    a wordlist with the aim of improving your chances of finding a valid password.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing Information
    Gathering*, we performed Nmap scans on the Metasploitable 2 and 3 virtual machines.
    Some of the open services were SSH (port `22`) and FTP (port `21`). In the previous
    [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml), *Diving into the Metasploit
    Framework, *we explored some attacks against these vulnerable virtual machines.
    Now, we will perform some attacks that leverage a password file, but instead of
    using a password file form the internet, which will contain thousands of passwords,
    we will build one that has been profiled.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux comes with a tool called **CeWL**. CeWL spiders a given URL to a
    depth that you can specify, and returns a list of words that can be used. CeWL
    is customizable, allowing you to specify the minimum and maximum length of words,
    extract words from the metadata of files, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: To build a wordlist related to the Metasploitable virtual machines, we can use
    the wiki page that is available at [https://github.com/rapid7/metasploitable3/wiki.](https://github.com/rapid7/metasploitable3/wiki)
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following command, we will generate the wordlist that we will use
    for a password brute force. In the command, we defined the minimum word count
    *(*`-m 7`*), *the spider depth (`-d 1`), and then we instructed CeWL to write
    the output to a file on the desktop called `metasploitable-dict.txt` (`-w`) as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command is completed, we have a wordlist that currently contains 2,443
    words, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3484e296-b279-4301-bc3a-98e4441e543c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: CeWL-generated wordlist'
  prefs: []
  type: TYPE_NORMAL
- en: To perform a word count on a text file, you can use the command `wc -w` [file].
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can perform a test using the wordlist we have just created. We will
    run the wordlist against the Metasploitable 3 virtual machine to check whether
    we can access it using the **Server Message Block** (**SMB**) protocol. This can
    be checked using the auxiliary module `auxiliary/scanner/smb/smb_login` by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From a Terminal window, open the Metasploit Framework using the `msfconsole` command. Ensure
    that you have the PostgreSQL service started before running the `msfconsole` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the auxiliary scanner using the `use auxiliary/scanner/smb/smb_login` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will define the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SET RHOSTS [IP]`: Here, you will define the Metasploitable 3 virtual machine''s
    IP address. This can be picked up using `netdiscover -r [subnet]` or by logging
    into the virtual machine and checking its IP address using the `ipconfig` command
    from a command prompt window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET USER_FILE [path]` and `SET PASS_FILE [path]`: Here, we define the wordlist.
    Using the wordlist generated by **CeWL**, the path we defined was `/root/Desktop/metasploitable-dict.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET STOP_ON_SUCCESS true`: This tells the scanner to stop scanning once it
    has found a successful credential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET VERBOSE false`: This stops the scanner from displaying the output on the
    screen. It will only display the successful output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the options are defined, we run the scanner using the `run` command. Once
    a successful credential is found, the output is displayed as per the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d538d797-2e17-445c-8db7-c00f25e5715a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Output from the Metasploit Framework SMB login scanner'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit stores discovered credentials in its database. The credentials can
    be accessed using the `creds` command.
  prefs: []
  type: TYPE_NORMAL
- en: A key point to keep in mind is that the larger your wordlist, the more time
    it will take. By using a profiled wordlist, you are reducing the amount of time
    spent on finding a valid login.
  prefs: []
  type: TYPE_NORMAL
- en: Password mutation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will often mutate their passwords in a variety of ways. Some types of
    mutations include adding in numbers at the end of the password, swapping out characters,
    such as using a 3 for an "e", using capital letters, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Using John the Ripper, we can perform mutations on a password list. John the
    Ripper comes with an extensive configuration file that holds a number of predefined
    password mutation rules. This configuration file can be found at `/etc/John/john.conf`**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the configuration file are rulesets defined as `[List.Rules:<name>]`,
    for example `[List.Rules:Wordlist]` or `[List.Rules:hashcat]`, and the list goes
    on. You can view the various current rules by using a simple concatenate query: `cat
    /etc/john/john.conf |grep List.Rules`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5820c743-f93e-48d9-b213-7b0b2792f153.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Snippet of the current rulesets within John the Ripper'
  prefs: []
  type: TYPE_NORMAL
- en: Let's perform a few mutations. For illustration purposes, I will create a new
    file called `mutate-test.txt` and put just one word inside `password` and store
    it on the desktop.You can do this using leafpad, nano, or your favorite text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is created, we can perform some mutations and observe the output.
    Editing the `John.conf`, file, I have added in a custom ruleset called `List.Rules:Custom`
    as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2340f0a-d8a5-4396-a512-3a45c039deab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Custom rule mutation'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this custom rule, I am telling John the Ripper to add two additional numbers
    to the end of each password. Here is a list of the common commands that you can
    use within a ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$`: This appends a character or number to a word. In the preceding custom
    rule, you will notice I have defined a group of numbers that is denoted by **[**`0`**-**`9`**]**.
    This will append `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, and `9` to the word.
    You can also append a single character; for example, using the command `$9` will
    append just a `9` to the word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^`: This prepends a character or number to a word. Here, you can define ranges
    as per the previous `$` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: This converts all the characters to lowercase, and `c`converts them to
    uppercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t`:This toggles the case of all characters in the word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the output of this rule using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a new file called `mutated.txt`, which will have the word defined in `mutation-test.txt`mutated.
    The `stdout` command is used to output candidate passwords. Notice that the content of
    the `mutated.txt` file contains two additional characters at the end of the main
    word, as shown in the following previous :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b8b1f98-235f-43ee-bedb-ebd674836619.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Mutated password list'
  prefs: []
  type: TYPE_NORMAL
- en: As you work with password mutations, you will find that some rules work better
    than others. The key is to find what works for your target, and knowing that you
    have the flexibility of John the Ripper to perform password mutations.
  prefs: []
  type: TYPE_NORMAL
- en: Offline password attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Offline password attacks are a way of cracking passwords without being discovered.
    Since there is no brute forcing to an active service, the risk of detection is
    a lot less. The aim is to obtain the hashed version of a password and reverse
    it back to plain text. Different hashing algorithms output different hashes of
    varying bit lengths. Since hashes are made up of hexadecimal numbers, which are
    four bits each, identifying a hash bit length would entail counting the number
    of hexadecimal numbers and multiplying by four.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a hash of `63640264849A87C90356129D99EA165E37AA5FABC1FEA46906DF1A7CA50DB492` contains
    64 characters. **64 x 4 = 256**. This tells us that the bit length of the hash
    is `256` bits. In this example, the most common hashing algorithm that would output
    a `256` bit hash is `SHA-256`. What if you have a hash that is `128` bits? Here,
    we have a few algorithms that come into play, such as `MD2`, `MD4`, `MD5`, and
    `RipeMD-128`. This is where your intuition comes into play when identifying what
    hash you have. For example, if you have extracted a hash from a MySQL database,
    the chances are that the hash is an `MD5` hash.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there are tools that can help you identify a hash, thus making
    your time spent on performing a manual calculation a lot less. However, knowing
    how to calculate the hash bit lengths and training your powers of perception will
    never be a waste.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current release of Kali Linux (2019.1), there is a tool called **Hash
    Identifier**, which will attempt to identify a hash. This tool can be run from
    a Terminal window using the `hash-identifier` command. Let''s attempt to identify
    the `SHA-256` hash discussed previously. Notice the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6ac5a7d-120a-4d4c-ba07-d27a95d16016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Identifying a hash using hash-identifier'
  prefs: []
  type: TYPE_NORMAL
- en: Using `hash-identifier` makes identifying hashes simple, as the hash identified
    is very specific.
  prefs: []
  type: TYPE_NORMAL
- en: John the Ripper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John the Ripper is both feature-rich and fast. It leverages several cracking
    modes in one program and is fully configurable (as we have seen with password
    mutations). John the Ripper is available on multiple platforms, which makes it
    easy to use the same cracker on multiple systems. It is included by default in
    Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the features of John the Ripper are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Hash types can be autodetected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support of multiple hash algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax for John the Ripper is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have identified the hashing algorithm, let''s attempt to crack
    this hash using John the Ripper by taking the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1**: Add the hash to a text file using a text editor. I have named the
    file `sha256hash.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2**: Within a Terminal window, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In my example, I have used the `rockyou.txt wordlist`. So, the full command
    in my environment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81603372-6a2c-45e4-a5a9-91b5a4815143.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Cracking an SHA-256 hash using John the Ripper'
  prefs: []
  type: TYPE_NORMAL
- en: 'John the Ripper stores all cracked passwords in a `john.pot` file, which is
    located where you have installed John the Ripper. By default, in Kali Linux 2019.1,
    it is located at `/root/.John/john.pot`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67eceafc-1e07-4a50-ade8-038256e2dfbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Cracked passwords stored in the john.pot file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s attempt to crack the hashes we have dumped from [Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*,
    Diving into the Metasploit Framework*, using John the Ripper. From a Terminal
    window, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are defining the wordlist to be used (`rockyou.txt`), the
    ruleset to use (`wordlist`), and where to store the cracked hashes (`meta3.pot`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26b32871-5bdb-4e07-8e01-1745b1d39b30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Using John the Ripper to crack the hashes obtained from Metasploitable
    3'
  prefs: []
  type: TYPE_NORMAL
- en: Cracking password hashes can sometimes be very time-consuming and not feasible
    when you are pressed for time during a penetration test. Another approach of making
    use of dumped password hashes is to re-authenticate to a remote system using a
    valid combination of a username and NTLM/LM hash. This technique is called **Pass-the-Hash**
    (**PTH**), and has been around since 1997.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we were only able to crack three passwords, we still cracked a privileged
    account, which is the **administrator** account. If I had to use a more complex
    wordlist and more complex rules within John the Ripper, it would have probably
    cracked all of the hashes. Keep in mind that as you add more complexity, the time
    to crack the passwords takes a bit longer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to crack accounts on a Linux system, you will need the following two
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/passwd`: This contains the user information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/shadow`: This containing the corresponding password hashes for the users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we can crack the passwords, these two files need to be combined. This
    can be done by using the `unshadow` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddef5309-e4c2-43da-baf7-1658250d55f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Using the unshadow command to combine the passwd and shadow files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can leverage this combined file with John the Ripper using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'John will begin cracking the passwords of the Linux hashes (as shown in the
    following screenshot). Notice in this scenario that we did not define the format;
    John the Ripper is able to identify the `hash type` and apply the correct cracking
    algorithm, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11f6009f-2c15-423f-97f2-55a2c4baa0f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Using John the Ripper to crack the hashes obtained from Metasploitable
    2'
  prefs: []
  type: TYPE_NORMAL
- en: Even though the `root` password was not cracked in the preceding screenshot,
    leveraging a more complex wordlist and rules within John the Ripper will likely
    crack the password.
  prefs: []
  type: TYPE_NORMAL
- en: Hashcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hashcat is another offline password cracking tool that is claimed to be the
    world's fastest and most advanced password recovery utility. It is installed by
    default within Kali Linux, and it combines both the CPU and GPU versions in a
    single program.
  prefs: []
  type: TYPE_NORMAL
- en: The program supports a multitude of hashing algorithms, with unique modes for
    password cracking. Hashcat supports multiple platforms, such as Windows, macOS,
    and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the features of Hashcat are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It supports multiple threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multihash support (cracking multiple hashes at the same time)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-device support (utilizing multiple devices in the same system)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-device types (utilizing mixed device types in the same system)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is multi-algorithm based (MD4, MD5, SHA1, DCC, NTLM, MySQL, and much more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses specialized rules to extend attack modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax for running Hashcat is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the common options used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-m`defines the hash type using the number of the hash. For example, MD5 is
    number 0, and SHA1 is 100.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a` defines the attack mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o` defines the output file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The attack modes in Hashcat are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionary attack**: (Also called straight mode or attack mode zero), this tries
    all words in a given list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combination attack:** (Known as mode *1*), this concatenates words from multiple
    wordlists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brute force and mask attack:** (Mode 3) tries all characters from given character
    sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid attack:** (Mode *6* and *7*) combines wordlists and masks and the
    other way around. Rules can also be used with this attack mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hashcat supports a multitude of hashing algorithms; these can be seen under
    the `[Hash modes]` section, as shown in the following screenshot, when using the `hashcat
    -h` command from a Terminal window. The following screenshot is just a snippet
    of the hash algorithms supported. When you run the command in your own lab, you
    will see the full list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e143ccc7-cfcc-40c0-aee8-dc95d63c6c75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Hashcat-supported algorithms'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a GPU, you can really leverage the power of Hashcat for password
    cracking. Unfortunately, GPU cracking is not with in the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Online password attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like using an automated vulnerability scanner, we can leverage tools to
    automatically attempt to log in to services and find valid credentials. These
    tools are designed to automate online password attacks until the server responds
    with a valid login. An online password attack can be defined as trying to log
    in to a live service by brute forcing credentials until a valid combination is
    discovered.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble with online password attacks is that they can be noisy, and trigger
    alarms. Let's look at some of the online password attack tools that are commonly
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra is a login cracker that is very fast and flexible. It supports modules
    that can easily be added. It provides powerful authentication brute forcing for
    many protocols and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for Hydra is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some of the options that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l` denotes a single username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-L` defines a username list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p` defines a single password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P` defines a password list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t` is used to limit concurrent connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V` tells Hydra to display verbose output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f` is used to stop on the correct login.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s` is used to define a port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-x` leverages a brute force mode. For example, `-x 5:8:A1` generates passwords
    5 to 8 characters in length with uppercase and numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hydra supports a number of services, some of which include `ssh`, `smb`, `smtp[s]`,
    LDAP, http/s, Telnet, and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Let's leverage Hydra to attack services on the Metasploitable 2 virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)*, Performing Information
    Gathering*, we performed an Nmap scan against the Metasploitable 2 virtual machine.
    One of the services that we discovered was `ftp` port `21`. Using the password
    list we generated earlier, we can use this with Hydra to perform an online password
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a Terminal window in Kali Linux, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are defining a `username` and `password` list. You will
    notice in my example that I am using the same file for both. You can leverage
    a dedicated `username file` if you have one. The service we are targeting is `ftp`,
    and we want Hydra to stop once a valid login is found, so we use the `-f` option,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b06ff81-da30-4975-be38-e0cadf90caf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Using Hydra to brute force a login to the FTP service of Metasploitable
    2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hydra has the ability to resume canceled scans. In the following screenshot,
    you will notice that I used a larger password list and purposefully canceled the
    scan using the *Ctrl* + *C* key sequence. Take note of the following message that
    Hydra wrote. Hydra created a `hydra.restore` file that can be used to resume the
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81586fb6-3531-4b5d-83cb-86d1a4a38c3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Hydra resume functionality'
  prefs: []
  type: TYPE_NORMAL
- en: It's important to keep in mind that most services are configured to lock out
    accounts after a certain number of failed login attempts. This is one way of getting
    noticed by the target's IT staff. Intrusion prevention devices can also come into
    play when there are rapid successions of login attempts. The key is to slow down
    the number of password attempts made to the service. However, this will cost you
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra is a tool that you should have in your penetration testing toolkit. It
    is capable of running through massive lists of usernames, passwords, and targets.
    It can be tuned using various flags to adapt to situations you may encounter during
    penetration tests.
  prefs: []
  type: TYPE_NORMAL
- en: Medusa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Medusa is claimed to be a speedy, parallel, and modular login brute force tool.
    It supports many services that allow remote authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the key features of Medusa:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parallel testing**: This provides the capability of testing against multiple
    hosts, users, or passwords simultaneously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variable user input**: This provides the ability to specify the target information
    in a variety of ways. You can use files that contain a hosts'' list, for example,
    or you can define a single host in the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modular design**: Modules exist as independent files (`.mod`). If any changes
    are needed to the modules, the core application does not need to be modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple protocols supported**: Similar to Hydra, Medusa supports a wide
    range of applications, including `smtp`, `http`, `pop3`, and `sshv2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some of the options that are available with Medusa:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-h` defines the target hostname of the IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-H` specifies the file containing multiple targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-U` specifies the file containing usernames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P` specifies the file containing passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g [num]` defines the number of seconds after which Medusa will give up trying
    to connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r [num]` defines the number of seconds between retry attempts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-M` specifies the name of the module that will be used. Note that this is
    without the `.mod` extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m` defines parameters to pass to the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Z` defines a previous scan that you would like to resume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Medusa supports a number of modules. A current list of supported modules can
    be viewed using the `medusa -d` command from a Terminal window, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15f250fd-ee6d-4973-89af-0e4e66c05293.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: List of modules supported by Medusa'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for Medusa is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s perform an FTP attack using Medusa, as we have done with Hydra. The
    command used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I am using the same text file for both the `username` and `passwords`.
    The module being used is `ftp`, and I want Medusa to stop on the first match using
    the `-f` option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb1ff715-3da1-491c-809c-cb3de8567c75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Performing an FTP brute force using Medusa'
  prefs: []
  type: TYPE_NORMAL
- en: 'Medusa has the capability to resume canceled scans, as shown in the following
    screenshot*.* These can be resumed using the `-Z [unique code]` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae831555-b72c-4d0b-8f8c-b102932fe2bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Medusa resume functionality'
  prefs: []
  type: TYPE_NORMAL
- en: Medusa is another tool that should be in your penetration testing toolkit. It
    is flexible and supports different sets of protocols compared to Hydra.
  prefs: []
  type: TYPE_NORMAL
- en: Ncrack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ncrack is a powerful and fast password cracking tool that is focused on network-based
    services that rely on authentication. It is designed to be modular, leveraging
    a command-line syntax that is not new if you are familiar with Nmap's syntax.
    You are able to integrate scans that were executed with Nmap into Ncrack. The
    protocols supported by Ncrack include `ssh`, `rdp`, `ftp`, `telnet`, `http/s`,
    `smb`, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ncrack is included with Kali Linux, so there is no need to install it as it
    is available to use out of the box. The syntax for Ncrack is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some of the options that are available in Ncrack:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-cl` defines the minimum number of concurrent parallel connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-CL` defines the maximum number of concurrent parallel connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-at` defines the number of authentication attempts per connection. This is
    a good way to avoid account lockouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-U` specifies a username file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P` specifies a password file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-iX` defines the file to input from an Nmap XML output file (`-oX` switch
    in Nmap).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-iN` defines the file to input from an Nmap normal output file (`-oN` switch
    in Nmap).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -`iL` defines a list of hosts or networks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To display the current list of modules that is supported by Ncrack, you can
    run the `ncrack -V` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9e3b7f4-efab-4491-ab50-e7ea39274ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Modules supported by Ncrack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Ncrack has the ability to perform a brute force attack, let''s perform
    this attack against the Metasploitable 3 virtual machine. Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, I am using the same file for both the usernames and passwords.
    I am using the `-f` option to stop on a match and `-vv` for an increased verbose
    output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7777fd83-04c1-474e-998e-2159d6376146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Using Ncrack against the RDP service of Metasploitable 3'
  prefs: []
  type: TYPE_NORMAL
- en: While using Ncrack to perform the RDP brute force login, the Metasploitable
    3 virtual machine session was locked. This is something to keep in mind as you
    perform your penetration tests. If an active user or administrator is using a
    system and their session is locked, it's bound to raise an alarm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ncrack enables you to resume a current session by saving a restore file if
    you terminate a scan, as shown in the following screenshot*. *This scan can be
    resumed using the `ncrack --resume [filename]` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6dcffb08-8413-4255-80ad-683f9cc34ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: Resuming an Ncrack session'
  prefs: []
  type: TYPE_NORMAL
- en: The protocol you are attempting to brute force in your penetration test will
    determine the tool that you will use. In some cases, you might have a choice of
    more than one tool, and your choice might boil down to the speed of the tool itself.
    A common option to speed up a bruce force attack is to increase the number of
    login threads. In some cases, such as RDP and SMB, this may not be possible, due
    to the restrictions associated with the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Another factor to consider is the protocol authentication negotiations. For
    example, the authentication negotiations of a protocol such as RDP are more time-consuming
    than that of HTTP. However, if you manage to successfully brute force the RDP
    protocol, your reward is often a lot larger, as this can lead to additional hashes
    that might be of higher privilege. The art behind brute forcing with online tools
    is choosing your targets, user lists, and password files carefully, and with intuition
    before initiating the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping passwords from memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Password cracking can really be fun, but dumping passwords from memory of a
    compromised host is much quicker. This will give you quick access to credentials
    that can allow you to either elevate your privileges or move laterally in the
    environment. Some systems might be configured with `wdigest` authentication, which
    will provide you with clear text passwords, while others might be more secure,
    which you can then leverage as a pass the hash attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some possibilities of dumping passwords from memory.
    We will use what we have learned in the previous chapter ([Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml)*,
    Diving into the Metasploit Framework)*, and perform an exploit toward the Metasploitable
    3 virtual machine using the `eternalblue` exploit. For the payload, we will leverage
    a `meterpreter` shell, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d7aa0b4-47aa-4a7a-a9f7-0bc1127b4c55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Options used in the EternalBlue exploit'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a `meterpreter` session established, we can leverage the built-in
    tools of the Metasploit Framework, or use a tool such as **Mimikatz** or **Windows
    Credential Editor**. Using Mimikatz from a `meterpreter` session does not load
    anything to the remote system (nothing touches the disk). The beauty with this
    method is that it's harder to detect since there is nothing being written to the
    disk. Using a tool such as **Windows Credential Editor** (**WCE**) requires us
    to upload the tool to the remote system and then dump the credentials from memory.
    Since this involves writing to the remote system disk, the chances of detection
    are greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'Built into Metasploit, we have the ability to obtain the hashes from memory
    using the `msv` command from a `meterpreter` session. You will notice in the following
    screenshot that we have both the `LM` and `NTLM` hashes dumped from memory for
    the current users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db72ee51-b8e0-4dea-9775-48a3a54d8d30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: Dumping MSV hashes using Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: The next option we have is to dump the Kerberos credentials from memory. This
    can be done using the `kerberos` command from a `meterpreter` session, as shown
    in the following screenshot*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice here that we are able to obtain clear text credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8474b3a4-cb1f-4f7c-9251-0f3c448e37c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: Dumping Kerberos credentials using Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is possible using the `wdigest` command, as shown in the following
    screenshot*.* This is possible since the authentication protocol being used is
    `wdigest`, which is insecure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b6b883a-a3ed-486e-9d3a-dae3084cd0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: Dumping wdigest credentials using Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: From `meterpreter`, we are able to leverage Mimikatz. Mimikatz was created to
    demonstrate the vulnerabilities in authentication protocols used by Microsoft
    operating systems. It is the most widely used hacker tool and hosts a ton of features,
    and is constantly being updated.
  prefs: []
  type: TYPE_NORMAL
- en: Mimikatz can be loaded using the `load mimikatz` command from a `meterpreter`
    session. Once it has been loaded, you can use the pipe commands to Mimikatz using `mimikatz_command
    -f`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dump the hashes of a compromised host, you can use the `mimikatz_command
    -f samdump::hashes` command, as shown in the following screenshot.Notice the **New
    Technology LAN Manager** (**NTLM**) hashes that can be copied if you want to perform
    offline password cracking against them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/256784b0-106d-4a39-895f-e4e2f7fd89c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Dumping hashes from the SAM database using Mimikatz inside Meterpreter'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can extract the passwords from memory using the `mimikatz_command -f sekurlsa::searchPasswords`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8e79e3e-787f-4316-a008-2c242543a48c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29: Extracting passwords from memory using Mimikatz'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the flexibility of `meterpreter`, you can `upload` files, such as the
    Windows credential editor. This will allow you to dump passwords from memory as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f03bdd5-9195-4e5a-bfaa-5165df3edfce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 30: Using Windows credential editor to dump credentials from memory'
  prefs: []
  type: TYPE_NORMAL
- en: Being able to dump passwords from memory can be really rewarding, especially
    if a high privilege account is obtained on the first shot.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords are something that we all use daily, and having a good understanding
    of how to crack passwords can aid in a successful penetration test. Keep in mind
    the trade-off with password security; the more complex the password is, the greater
    are the chances of people circumventing it. Password re-use is a common flaw that
    people make, so you might end up discovering that an end user's password for an
    online service is the same as their user account for the corporate network. In
    all the tools used for password cracking, there is support for throttling brute
    force attempts. This feature enables you to blend in brute force attacks with
    everyday traffic and ultimately reduce lockouts.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned about the history of passwords. We looked
    at how you can discover usernames from public files that expose metadata. You
    have learned about online resources where password and user lists can be obtained.
    You learned how to use your powers of perception in password profiling, and how
    to create profile password lists. We looked at password mutating, and how we can
    make a profiled password list better suited for your target. We dived into offline
    password attacks and how various tools can be used to crack password hashes. In
    the online password attack section, we looked at using various tools to perform
    brute force attacks against network services that leverage authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter ([Chapter 7](5b0d52fc-f241-4d66-ae8a-0238b1c96399.xhtml), *Working
    with Burp Suite*), we will look at how to use Burp Suite in a penetration test.
    We will work with the various modules of Burp Suite and perform various attacks
    on web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is one way of obtaining usernames publicly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the benefit of password profiling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can be used for password mutation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between online and offline password attacks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What should you keep in mind when dumping credentials from memory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
