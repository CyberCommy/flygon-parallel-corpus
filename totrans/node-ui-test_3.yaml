- en: Chapter 3. Installing Zombie.js and Mocha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter you should be able to setup the base structure of
    a test environment for an application using Zombie.js and Mocha.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Zombie.js and Mocha packages in your application manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a test environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the application manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll now be extending the to-do application you started building in the previous
    chapter and start providing it with the ability to test itself.
  prefs: []
  type: TYPE_NORMAL
- en: In the root of the application, you have a file named `package.json` that you
    already changed to introduce some modules that your application depends on. Now
    you need to add a new section that specifies the dependencies on other modules
    during the development and testing phase. This section is named `devDependencies`
    and is only installed by NPM if the `NODE_ENV` environment variable is not set
    to `production`. This is a good place to introduce the dependencies on modules
    that need to be there for running your tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'First you need to add the `mocha` and `zombie` modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you will need to install these missing dependencies using NPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will install these two modules and their internal dependencies inside the
    `node_modules` folder, making them available for your application at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a test environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now need to set up a testing script. First you're going to test the user
    signup process.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before that, in order for us to be able to start up our server from within
    the tests, we need to make a slight modification to the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our tests will be using their own server, so we don't need `app.js` to run a
    server for us in this case. These last few lines export the application and only
    start up the server if the main module (the module that the `node` command line
    is called with) is the `app.js` one. Since the tests will have a different main
    module, the server won't start when we run the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as the first example, we''re going to test the fetching of the user signup
    form. We''re going to concentrate all the tests that are related to the user routes
    in a file under `test/users.js`. This file can start out with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, at the top, we include the `assert` module (used for verifying
    whether the app behaves as expected), the `zombie` module (assigned to the `Browser`
    variable), and the `app` module. The `app` module gets hold of the Flatiron application
    object so you can start and stop the corresponding server.
  prefs: []
  type: TYPE_NORMAL
- en: Next we declare that, before any test is run, the app should be started, and
    that after all the tests are done, the server should be closed.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is a series of nested `describe` calls. These calls serve to give context
    to each test, allowing you to, later, differentiate the setup and teardown functions
    that will occur before and after each of the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Then comes an `it` statement where you implement the test. This statement takes
    two arguments, namely, the description of what is being tested on the described
    subject and a function that will be called when the test is started. This function
    gets a callback function, `done` that is called on completion of the test. This
    arrangement makes asynchronous testing possible and reliable. Each test only ends
    when the respective `done` function is called, which can be after a series of
    asynchronous I/O calls.
  prefs: []
  type: TYPE_NORMAL
- en: Then we set out to create a browser and load the user signup form URL, using
    the `assert.ok` function to verify whether the page loads successfully. The `assert`
    module is a Node.js core module that provides basic assertion testing. Within
    the test code, we place some assertions to validate that some values are what
    we expect them to be. If any of the assertions fail, `assert` will throw an error,
    which will be caught by the test runner, signaling that the test has failed.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the basic `assert.ok` function, which will throw an error if the value
    is not true (that is, passes the `x == true` test), this module also provides
    a set of helper functions to provide more elaborate comparisons such as `assert.deepEqual`
    and others. For more information about the `assert` module you can read the API
    documents at [http://nodejs.org/api/assert.html](http://nodejs.org/api/assert.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to specify a test command script by replacing the default that
    Flatiron provided in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This specifies what NPM should do when told to run the tests. To run the tests
    enter the following command on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Mocha and Zombie, you need to include them as development dependencies
    in your application manifest and then use NPM to install them.
  prefs: []
  type: TYPE_NORMAL
- en: Once these modules are installed, you can create test files for each logical
    component of your application inside a directory named `test`. Each of these files
    should contain a series of tests, each of them properly contextualized inside
    nested `describe` statements.
  prefs: []
  type: TYPE_NORMAL
- en: You should also alter the application manifest to specify the testing script
    so that the tests are runnable using NPM.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, we'll be evolving this test and introduce some more,
    in order to cover more use cases of our application.
  prefs: []
  type: TYPE_NORMAL
