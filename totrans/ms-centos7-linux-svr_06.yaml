- en: Chapter 6. Virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, computer infrastructures have changed in many ways. We no longer
    see a room full of servers, each responsible for providing several services depending
    on how powerful they are. In these times, we only see a few big servers composed
    of several units so as to reinforce their capacities. This type of server hosts
    several virtual servers that serve the same old purposes as per the infrastructure
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In our days, being a system administrator for bare-metal machines is just not
    enough. Virtual machines are on the rise; we should admit this. Big companies
    are no longer using old architectures; it is no longer a good option. A lot of
    money and huge management effort is required to sustain them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to explain virtualization as a concept, where
    we will see how to set up several virtualization technologies, and then give an
    example of how to create some virtual machines for each one of those technologies.
    Finally, we will explain, in brief, what Docker is and how to add an image and
    access the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through this chapter, you are going to learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concept of full virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concept of paravirtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Xen and how to use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using KVM to set up some Linux virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a virtual machine using OpenVZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and configuring virtual machines on VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Docker and how to create a container and access it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing services' high availability using HAProxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of virtualization on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization is the capacity to create a machine-like program that simulates,
    the physical behavior of a real machine running through virtual hardware including
    CPU, RAM, Hard disk, Network card, and so on, where those resources are all being
    taken from the physical machine running the virtual one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, the way of managing services was to deploy a new server or upgrade
    the old one to meet the requirements of the new services to perform long and complex
    migrations in the event of a hardware failure. All the time, there would be too
    little RAM, too few disks, or low processing power. Managers got tired of trying
    to fix the existent system while paying a lot of money to help maintain an old
    server that was no longer supported. However, they did not have too many options,
    since the services running on those machines were very important and essential.
    Companies were deploying servers that would not work on their peak capacity, and
    there was no better way of controlling every server''s capacity for the right
    services with the right hardware equipment. All of these reasons made the newborn
    solution of virtualization grow so fast. Just after a while from its first deployment,
    virtualization has been integrated in many fields, specially in the field of computer
    science. Virtualization allows an abstraction of the physical hardware, to run
    multiple virtual machines on a single shared resource (CPU, Memory, Networking,
    and Storage):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basics of virtualization on Linux](img/B04674_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://cdn.arstechnica.net](http://cdn.arstechnica.net)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this new technology is booming. We are witnessing a new virtualization
    service being born each day. Virtualization has been divided into many types:'
  prefs: []
  type: TYPE_NORMAL
- en: We have network virtualization, which is related to virtual network creation
    and management to separate groups of machines from each other. They are connected
    to the same switch and group of switches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have application virtualization, wherein we put an application or an
    ensemble of applications inside a container, and then we make the application
    believe that it is running on its original supported system. So, it believes that
    it can access the resource that it needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have full machine virtualization. This is a kind of virtualization
    that creates a full virtual machine (desktop, server) with its virtual hardware
    and the dedicated services on demand. This virtualization involves abstraction
    of the server-based workload (the work load demanded by the virtual machine user)
    from the underlying hardware. The virtual machine won't notice if it is running
    on a physical or a virtual hardware as long as the hardware answering its service's
    demands for resources (store data, network access to other machines, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will focus on both application virtualization and desktop
    virtualization.
  prefs: []
  type: TYPE_NORMAL
- en: A piece of software called hypervisor is executed on the physical machine to
    help with the virtualization of the data center, with a goal of a platform for
    the virtual machines. The hypervisor's main job is to organize dynamically the
    physical resources between the different virtual machines running under its control.
    This gives them the capacity to run independently of the physical machine where
    a system administrator can relocate a virtual machine from a host to another without
    affecting it. A hypervisor, also called a virtual machine manager, is a program
    that allows multiple operating systems to share a single hardware host.
  prefs: []
  type: TYPE_NORMAL
- en: While using a virtual machine or a container, we are expecting to provide the
    applications or services with an operating system that can host them and simplify
    their communication to the hardware. Since those machines are not really running
    on the physical hardware, virtualization allows them to access dynamically and
    flexibly the CPU, memory, storage, and networking resources as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization can increase flexibility and management and offers a better scalability
    with an enormous saving in costs. The service's workload gets deployed faster,
    with a visible increase in performance-on-demand availability, while getting the
    scalability function automated, to simplify the infrastructure management for
    the IT support guys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enumerate some of the major advantages of having a virtualization solution
    installed on a server infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduction in the number of hardware and operating costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery of high availability of applications and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimization or elimination of downtime (with best practice methods)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase in the IT team's productivity, efficiency, agility, and responsiveness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase in speed and simplification of application and resource provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for business continuity and disaster recovery as an increase in the
    system's security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling centralized management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a true software-defined data center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting the full advantages of multicore processor machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows an example of three Linux virtual machines running
    on one Linux server. These machines are controlled and managed by a type of hypervisor
    depending on the virtualization chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basics of virtualization on Linux](img/B04674_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A virtual machine really is just some files in some format stored at a specific
    location on the host machine. For some technologies, it can also be an LVM logical
    volume or a direct device. The virtual disk used by a virtual machine is just
    another file encapsulated within it. Inside a virtual machine, managing the OS
    and applications can be simplified (in some ways; it is complicated in others).
  prefs: []
  type: TYPE_NORMAL
- en: But the good thing is that having the virtual machine as just a folder full
    of files that can be copied and moved makes it easier to backup in the event of
    a hardware failure on the physical machine. In such cases, the manager should
    simply buy a new server, load the backed-up virtual machines on it, and run the
    entire environment again as if nothing ever happened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CentOS repository, we have a choice between two virtualization technologies:
    **Xen** and **KVM**. To understand these virtualization technologies, you need
    to understand the two different approaches to virtualization: full virtualization
    and paravirtualization.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A combination of paravirtualization and full virtualization has been created,
    called **hybrid virtualization**. In it, some parts of the guest operating system
    use paravirtualization for certain hardware drivers, and the host uses full virtualization
    for other features. This often produces superior performance on the guest without
    the need for the guest to be completely paravirtualized.
  prefs: []
  type: TYPE_NORMAL
- en: Full virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Full virtualization is a virtualization technology that completely simulates
    virtual hardware underneath the virtual machines, with no interaction with the
    physical hardware. It requires that the entire hardware underneath the virtual
    machine to become unnoticeable. This technology can simulate any kind of physical
    hardware on demand to answer the need of the system running on the virtual machine,
    which answers any service or application demand for specific baremetal hardware.
    In other words, full virtualization is a virtualization capacity to fully run
    the guest machine without letting it become aware that it is running on a virtual
    environment. The virtual machine, in this case, has a fully virtualized hardware
    to run its services on. They don't have any interaction with the physical hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how, during full virtualization, the underlying
    platform runs the guest OS without being modified or being aware that it is running
    on a virtualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Full virtualization](img/B04674_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a specific type of full virtualization called hardware-assisted virtualization.
    In this, the CPU architecture helps with the execution of hardware virtualization
    through some special instructions that might allow the guest machine to execute
    privileged instructions directly on the CPU, even though it is a virtualization.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CentOS 7 server, we can conduct full virtualization or hardware-assisted
    full virtualization by using either Xen or KVM. We will see how to do so in the
    *Setting up Xen for CentOS 7* section.
  prefs: []
  type: TYPE_NORMAL
- en: On a larger scale, solutions that can implement full virtualization include
    VMware's family of hypervisors, Xen and XenServer, VirtualBox, QEMU, and KVM.
  prefs: []
  type: TYPE_NORMAL
- en: Paravirtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Paravirtualization is a new kind of enhancement to the virtualization technology.
    It has the capacity of making the guest OS recompile before being installed on
    the vertical machine that serves the virtual machines to identify between virtual
    and physical hardware. With the use of this virtualization, we have a better optimization
    in system performance via conserving computing resources. It is due to this technology
    that we don't need to dedicate resources for the virtual machines and will be
    used only as necessary. Differing from the full virtualization where we need to
    create the virtual resources and dedicate them to the virtual machine, it is rather
    being used or not.
  prefs: []
  type: TYPE_NORMAL
- en: In paravirtualization, the guest operating system is managed by the hypervisor—as
    a layer lying between the physical machine and the virtual machines—to efficiently
    enable and share physical device access. While it normally doesn't require full
    device emulation or dynamic recompiling to perform privileged instructions, paravirtualization
    often performs at a near-native speed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Paravirtualization](img/B04674_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This preceding architecture shows how the paravirtualization virtual machines
    interact with the physical hardware through the special hypervisor that communicates
    directly with the modifier OS to optimize the communication.
  prefs: []
  type: TYPE_NORMAL
- en: Paravirtualization is an expansion of a technology invented by IBM. Xen is an
    open source software project that incorporates paravirtualization. The Xen hypervisor
    is what brought about the term *paravirtualization*. Today, most virtualization
    solutions support paravirtualization as a norm. A number of Linux development
    vendors have collaborated on a new form of paravirtualization, initially developed
    by the Xen group, and it provides a hypervisor-agnostic interface between the
    hypervisor and guest OS kernels.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Xen on CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xen is an open source solution used to run multiple virtual systems on one machine.
    It supports both paravirtualization and hardware-assisted full-virtualization.
    Xen is a very powerful virtualization solution. It offers the capacity to use
    both virtualization technologies at the same time to always answer the user's
    demands.
  prefs: []
  type: TYPE_NORMAL
- en: To create our virtualization environment using Xen, we need to make sure that
    the Xen Hypervisor will boot just before the machine's own kernel to have access
    to as much physical hardware as possible, so it can be used to serve our environment's
    virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Xen on CentOS 7](img/B04674_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.2virt.com](http://www.2virt.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to set up Xen4 for CentOS 7\. Xen4 is not supported
    by the default CentOS 7 repository, so we need to add the CentOS Xen repository.
    But first, we need to make sure that we have some packages installed. These will
    be needed later during the installation of Xen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the latest Xen repository using YUM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this tutorial, we will be installing Xen Version 4.5, so we need to run
    the installation command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the installation is done, we need to list the Xen kernel archive,
    which is in the `/boot` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we move on to the installation of the `kernel-xen` package. This installation
    should be executed separately from the Xen installation and after it so that the
    system boot loader grub can detect the new kernel and get configured correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After having the new kernel installed, we should resolve the SELinux issue.
    We can try to resolve the issues by determining which modules the SELinux is blocking
    and resolve that, or if we have a better method to secure our server, we can just
    disable it. To disable SELinux, we just need to go to its configuration file and
    disable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, consider this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, if we need to check the issues, we can follow this. First, we check
    the log file for the cause of the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we activate the blockage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And this should resolve the issue. Finally, we can restart the system and boot
    the new Xen kernel. After the restart, we need to check whether the Xen kernel
    is correctly installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To use Xen, we need to install some tools and packages to make the virtual
    machines run well. First, we need to make sure that the basic usage packages are
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to configure the network. But before that, we must create the
    bridge interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the following lines inside the file that we have just opened using
    nano and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we make minor changes to the default network interface configuration
    file to use the bridged interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to change the MAC address with the Ethernet interface MAC address. We
    can check that using `ifconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we reboot the system. With this, the bridge network is ready to
    be used. Then, we download any Linux system for the test. Next, we need to make
    it an IMG file using the `dd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we download any Linux system for the test. Moreover, we must create a
    kick-start file and put it at the same location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the following code with the required modification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we use `virt-install` to create the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now the virtual machine should start and be able to get an IP from the DHCP
    server; so we can continue tweaking it and adding the required service.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Xen usage, we need to use the following commands (we are going to present
    the most common ones. For more, you can always follow this link [https://www.centos.org/docs/5/html/Virtualization-en-US/virt-task-xm-create-manage-doms.html](https://www.centos.org/docs/5/html/Virtualization-en-US/virt-task-xm-create-manage-doms.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to the virtual machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To shutdown or reboot a machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove (terminate) a machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To suspend and resume a machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To rename a machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To pause, and then unpause a machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Setting up KVM for full virtualization on CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: KVM can only support hardware-assisted full virtualization. And there is still
    work going on in supporting paravirtualization. KVM is a kernel module that only
    works with the default Linux kernel (we should not install it on the Xen one).
    KVM creates virtual machines using a personalized version of Qemu for KVM called
    **Qemu-kvm**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up KVM for full virtualization on CentOS 7](img/B04674_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.virtualopensystems.com](http://www.virtualopensystems.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'KVM has many useful features and advantages supported by its hypervisor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thin provisioning**: This is the capacity to allocate flexible storage and
    manage the available space for the virtual machines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overcommitting**: This is the capacity to allocate more CPU and memory power
    more that the available resource on the physical machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic NUMA balancing**: This is an improvement to the application running
    on the NUMA hardware'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disk I/O throttling**: This is the capacity to manage limits of the physical
    system disk input and output requests sent by the virtual machines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual CPU hot add capability**: This is the capacity to adjust the processing
    power of the virtual machines without any downtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before starting the KVM installation, we need to check some pre-installation
    steps. First, we check whether the machine CPU can handle the virtualization technology:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To know whether that''s true, we need to see the `vmx` or `svm` word highlighted
    in the command output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we make sure that the system packages are all updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we change the working mode of SELinux to permissive to make sure that
    it won''t bother the execution of KVM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, consider this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now start the installation. First, we will install the `Qemu` package
    to provide a user level for KVM and its disk image manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to install the GUI for the virtual machine''s administration,
    the command-line tools to administrate the virtual environment, the tool that
    helps create virtual machines from the CLI, and the hypervisor library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for CentOS 7, we add the virtualization client, virtualization platform,
    and virtualization tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'With this step done, we can say that we have finished installing the required
    tools and packages. Now, we go to the configuration part. First, we need to restart
    the virtualization daemon to make sure that the entire configuration is well set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we check whether it is running well or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see this as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up KVM for full virtualization on CentOS 7](img/B04674_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we move on to the network configuration. We need to create a bridge interface
    to allow the guest system to access an external network. To do so, we must enable
    IP forwarding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we check whether it is well set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to change the network configuration by keeping the original
    interface as it is, but we will assign its IP address to the bridge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the following line to the end of the file and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create the bridge interface configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we put the following code inside the file we just opened for editing,
    and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: After rebooting the system, we can say that the network configuration is well
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we complete the KVM installation and configuration, it''s time to start
    using the host. The first thing we need to do is create a new domain or virtual
    machine. To do so, using the CLI, we will make use of the `virt-install` command.
    First, we need to see the list of templates known to our KVM installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We need an ISO of the Linux OS to use it for the installation. Then, we can
    start the setup of a new virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The options written in the preceding command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the virtual machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ram`: This is the memory size in MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vcpus`: This is the number of virtual CPUs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cdrom`: This is the location of the ISO image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`os-type`: This is the OS type, such as Linux, Windows, or Unix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`os-variant`: This is the OS variant, such as rhel 6 or Solaris'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network`: This is the network interface and connectivity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphics`: This is the guest display settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disk path`: This is the location of the disk with a size of 10 GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have issued the preceding command, `virt-install` will create a virtual
    machine and start the `virt` viewer console for the OS installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is always a graphical mode perform the previous treatment. The graphical
    tools is called virt-manager found a the system tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands are meant for better management of the KVM virtual machines
    after being deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the virtual machines running on KVM:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To get more information about a virtual machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop a running guest machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a virtual machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a guest machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the code used to automatically start a virtual machine with the host
    system startup:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up KVM for full virtualization on CentOS 7](img/B04674_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://virt-manager.org/](https://virt-manager.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up OpenVZ virtualization on CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVZ is a new form of virtualization technology that we call a container based
    one. It basically creates multiple secure and isolated Linux containers running
    on a single Linux server. This container technology allows better server utilization,
    since we are not installing a full virtual machine, just a container to hold some
    of it, and it eliminates application conflict. The virtual machine running on
    OpenVZ platform are on a standalone mode, where it is the capacity to run without
    falling in any type of conflict with any other virtual machine running on the
    same platform. Those machines are independent from each other.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual machines running on OpenVZ have their own operating system, IP address,
    processes, memory or storage space, application and configuration files, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up OpenVZ virtualization on CentOS 7](img/B04674_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.quantact.com](http://www.quantact.com)'
  prefs: []
  type: TYPE_NORMAL
- en: While using OpenVZ, the virtualization is run through the system-level virtualization
    technology, where the guest system uses the same kernel as the physical machine
    system unlike KVM and VirtualBox and this helps with the usage effectiveness of
    the physical machine processing power and the storage power.
  prefs: []
  type: TYPE_NORMAL
- en: For a better usage for OpenVZ, we might need to use QEMU and Virtuozzo as management
    utilities. We really recommend the usage of the OpenVZ container and virtual machines
    on a Virtuozzo installation of images.
  prefs: []
  type: TYPE_NORMAL
- en: For CentOS 7, there is no working OpenVZ distribution as of now. So, we are
    going to install its forked project, Virtuozzo 7, which is capable of all OpenVZ
    options and more. Yet, we are going to use the OpenVZ tools only.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Virtuozzo 7, we need to install the RPM-based distribution package.
    First, we need to bring the meta information of the `virtuozzo-release` package
    into the YUM repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we install the mandatory Virtuozzo RPM packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have OpenVZ kernel installed. We move on to the kernel parameter configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we make SELinux act permissive to ensure that OpenVZ works fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to have the configuration line to make it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This part is optional. We can install the OpenVZ usage statistics tools if
    needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, since we have successfully installed OpenVZ, we can reboot the system
    and log in through the OpenVZ kernel. We need to edit the OpenVZ configuration
    file to set the same subnet for physical and virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we find and uncomment the following line and change its option to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can set up a web-based interface for OpenVZ to help administrate it.
    We need to download the installation script and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the port from where this web interface is going to serve using Firewalld:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, reload Firewalld:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The web-based interface will be serving its web interface at the machine hostname
    or IP address followed by port number `3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to start using OpenVZ to download a container and start using
    it. First, we need to specify a folder to put our containers into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we download an example container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we unpack the `tar` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we type this command to create our first virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Our container ID is `101`, since they typically start from `100`. Now, we set
    an IP address for our container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Then comes a DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'After having the network configuration ready, we can start our newly created
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify that it is running by pinging its IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can log in to our container to explore it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: We are in the newly created container. We can do whatever we want with it. To
    exit the virtual machine, we can simply type exit in the terminal. Also, using
    the OpenVZ web interface, we can visualize its status and do some administrative
    management through it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up OpenVZ virtualization on CentOS 7](img/B04674_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://bderzhavets.wordpress.com/](https://bderzhavets.wordpress.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up VirtualBox virtualization on CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle VirtualBox is a virtualization application that has the capacity to run
    on multiple computer architectures (Intel, AMD-based systems) and on almost every
    available OS (OSX, Linux, Windows, Solaris, and so on), where it allows its users
    to run multiple operating systems on the same physical machine. Basically, virtual
    box is a full virtualization technology.
  prefs: []
  type: TYPE_NORMAL
- en: Most people count on it while using multiple systems and need to export and
    import template virtual machines, where virtual box offers a variety of options
    to exchange virtual machines between all kinds of infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.oracle.com](http://www.oracle.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will show you how to install Oracle VirtualBox 5.0.2 on CentOS
    7\. Firstly, we need to add the VirtualBox yum repository to our system. So, we
    need to create its repo file in the YUM repository directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to put the following code into the file and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We should also have the EPEL repository installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we start the installation, we need to install some necessary packages
    to make sure that VirtualBox works fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we set up an environment variable called `KERN_DIR`, from which VirtualBox
    will get the kernel source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'My latest kernel version is stored in this directory: `3.10.0-229.14.1.el7.x86_64`.
    It might change over time due to upgrades.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can start the installation of VirtualBox using YUM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation, we need to rebuild the kernel modules using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have VirtualBox installed and ready for use. Still, VirtualBox only
    supports graphical interfaces, so we need to have one installed and then we can
    start it and use it.
  prefs: []
  type: TYPE_NORMAL
- en: We need to have a graphical interface installed on our server and we have a
    long list to choose from. I would recommend Gnome, as it is one of the most used
    interfaces with its user-friendliness and its low resources consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Gnome as the graphical interface, we can start VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can go ahead and create a new virtual machine. We give it a name and
    a type, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we proceed to configure the amount of RAM to give it, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then comes the amount of disk space, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: VirtualBox offers some extra services that allow the mouse and the keyboard
    of the original system to switch between the physical and the virtual machine.
    To install those tools, we can go to the VM menu, then the **Guest** option, and
    then install the virtual machine guest tools. It will take some time to get installed,
    then we need to restart the virtual machine so that those tools can start working.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish, we have our virtual machine ready to be executed, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up VirtualBox virtualization on CentOS 7](img/B04674_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up Docker on CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharing the same technology as OpenVZ on using the container technology, Docker
    is another alternative for container-based software virtualization. Docker is
    famous due to its capacity to automatically deploy applications. Those templates
    or containers are divided between community containers presented as templates
    provided by the Docker community, or private containers provided by individual
    users. Some of the user-personalized containers can be publicly available, others
    can be stored in a private folder that can be accessed by their creator or some
    one he wants to share with. Docker containers are portable, lightweight, and encapsulated
    application modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the industry analyst firm, 451 Research:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Docker is a tool that can package an application and its dependencies in
    a virtual container that can run on any Linux server. This helps enable flexibility
    and portability on where the application can run, whether on premises, public
    cloud, private cloud, bare metal, etc."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To install Docker, we are going to use the Docker installation script. Here,
    we have another way to install Docker via YUM—the traditional way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make sure that our system packages are updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we run the Docker installation script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up Docker on CentOS 7](img/B04674_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://blog.ouseful.info/](http://blog.ouseful.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: This script will add the Docker repository to the system repository and then
    install Docker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If too many users are going to use Docker in our system, we need to add them
    to the Docker group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we start the Docker daemon. Add it to the system startup script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that Docker is correctly installed, we have a simple image container
    that we can test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'To download a Docker container, we need to look for its name and then type
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the container, we need to use the `docker run` command with the `-i`
    option to attach `stdin` and `stdout` to the container, and the `-t` option to
    allocate a `tty` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'To leave the Docker container without losing the shell terminal, we need to
    follow the following sequence: `Ctrl-p` and `Ctrl-q` at the same time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more community containers that are publicly available on the Web, we can
    always use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up Docker on CentOS 7](img/B04674_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://blog.ouseful.info/](http://blog.ouseful.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Establishing services' high availability using HAProxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we are going to show in brief how to setup a high-availability/load
    balancer to control traffic over a specific service; in our case, we will use
    HTTP as for web server's traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '![Establishing services'' high availability using HAProxy](img/B04674_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [assets.digitalocean.com](http://assets.digitalocean.com)'
  prefs: []
  type: TYPE_NORMAL
- en: For this job, we are using HAProxy as an open source solution for load balancing
    and services' high availability through multiple servers. It is commonly used
    for a website's traffic load balancing. HAProxy distributes the workload over
    many servers that offer the same services (basically web servers, databases, and
    so on) to improve the overall performance of the service and its reliability.
  prefs: []
  type: TYPE_NORMAL
- en: As we said earlier, this section is going to install and configure a high availability
    load balancer to share the load between three web servers and a backup server
    in case of server or service failure to take over.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will have an infrastructure that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HAProxy server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: 172.25.25.166 and 10.0.0.10'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: haproxy.packt.co.uk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server 1:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: 10.0.0.11'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: webserver1.packt.co.uk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server 2:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: 10.0.0.12'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: webserver2.packt.co.uk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server 3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: 10.0.0.13'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: webserver3.packt.co.uk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Backup web server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: 10.0.0.20'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: backupwebserver.packt.co.uk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Establishing services'' high availability using HAProxy](img/B04674_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we will start by setting the web servers and to do so, we will be only
    using the default page generated by Apache after being installed. For more information
    on how to setup a web server, you can always refer to [Chapter 3](ch03.html "Chapter 3. Linux
    for Different Purposes"), *Linux for Different Purposes*. So, we will only need
    to have Apache installed and running and we need to configure the network and
    the machine's hostname.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will use the default package manager for CentOS 7 YUM to install
    the Apache web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Then after that, we configure the hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'And we make sure it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we go to each hosts file and we configure the domain to the default
    localhost while adding the list of all the servers with their IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This part is only needed if there is no reliable DNS server inside the infrastructure
    that can resolve all the infrastructure servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We change the default localhost address `127.0.0.1` domain name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Before finishing, we need to open the HTTPS and HTTPS ports at the webserver
    firewall to make the service accessible for the visitors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'By this step, we can say that we have all our web servers ready. We can now
    move to our HAProxy server installation. First, we need to open the needed ports
    for the web service and log reception used by HAProxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can start the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, we go to the configuration part. Before doing the main HAProxy configuration,
    we need to setup the HAProxy logging feature configuration for debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the **#Global settings** options, we need to make sure that the following
    line is not commented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Some minor modification needs to happen at the `Rsyslog` configuration file
    too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'That is where we need to uncomment the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Before finishing, we need to have a file that represents `HAProxy` at the `Rsyslog
    log` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'And while creating it using Nano, we need to put the following line inside
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, then apply the changes and restart `Rsyslog service`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can go to the HAProxy Global settings configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'First, at the default section, we need to setup the timeout for a more personalized
    solution. Since our server is just doing the load balancing, we can always use
    port 80\. So, we need to take over that port, by removing its association to the
    `Httpd` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we change the listening port to anything other than 80\. In our example,
    `8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go to the **Main Frontend** section to change the port on which the
    web interface is serving. So we need to change the whole section to look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to comment out the **Backend** section to replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to make sure that the end of the file matches our infrastructure IP
    addresses and hostnames. Then, we can start the HAProxy server and add it to the
    startup system services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that there is no error at the configuration file, we can always check
    the service status using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Then, we get each web server and put a test page just to access it and collect
    the test results. Then, we open the web interface of HAProxy to visualize the
    status of the load balancing `http://10.0.0.10/stats` or `http://172.25.25.166/stats`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Establishing services'' high availability using HAProxy](img/B04674_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we get to see the following interface, that means that our high availability
    server is running well. If we need to enable https to access the web interface
    of HAProxy using SSL, we can always install OpenSSL and configure our server to
    use it.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at the references used throughout the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware** **Documentation Center**: [http://pubs.vmware.com/vsphere-51/index.jsp](http://pubs.vmware.com/vsphere-51/index.jsp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VMware** **Virtualization**: [http://www.vmware.com/virtualization.html](http://www.vmware.com/virtualization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full** **virtualization wiki**: [https://en.wikipedia.org/wiki/Full_virtualization](https://en.wikipedia.org/wiki/Full_virtualization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paravirtualization** **wiki**: [https://en.wikipedia.org/wiki/Paravirtualization](https://en.wikipedia.org/wiki/Paravirtualization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xen project** **wiki**: [http://wiki.xen.org/wiki/Xen_Project_Software_Overview](http://wiki.xen.org/wiki/Xen_Project_Software_Overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KVM home** **page**: [http://www.linux-kvm.org/page/Main_Page](http://www.linux-kvm.org/page/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenVZ home** **page**: [https://openvz.org/Main_Page](https://openvz.org/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VirtualBox** **home page**: [https://www.virtualbox.org](https://www.virtualbox.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker** **documentation**: [http://www.modssl.org/docs/](http://www.modssl.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HAProxy web** **page**: [http://www.haproxy.org/](http://www.haproxy.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter started with a brief description of the basics of virtualization.
    Then, we defined full virtualization and paravirtualization. Next, to better explain
    all of that practically using a variety of open source virtualization tools, we
    started with Xen as a paravirtualization and full virtualization solution. We
    moved on to KVM as a full virtualization solution, container virtualization, OpenVZ,
    and the VirtualBox tool. This allows an easy setup through its beautiful graphical
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: We concluded the chapter with Docker and its ways of using containers from the
    Web. By the end of this chapter, we can say that we have seen various virtualization
    technologies and how to create virtual machines using them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get a chance to explore the cloud computing technology
    and apply some examples using the open source solution, OpenStack.
  prefs: []
  type: TYPE_NORMAL
