- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building modular applications is a challenging task. It involves a wide spectrum
    of knowledge, ranging from design patterns and principles to the ins and outs
    of the chosen technology stack. The PHP ecosystem has quite a selection of tools,
    libraries, frameworks, and platforms to assist us with our goal of modular application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: PHP 7 brings a lot of improvements that can further assist achieving that goal.
    We will start our journey by looking into some of these improvements. By the end
    of this book, our final delivery will be a modular web shop application built
    by the Symfony framework.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Ecosystem Overview"), *Ecosystem Overview*,
    gives a gentle introduction to the current state of the PHP ecosystem. It looks
    into the latest features of PHP 7, some of which open a door to the new concepts
    of use in modular development. Furthermore, this chapter glosses over the popular
    PHP frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. GoF Design Patterns"), *GoF Design Patterns*,
    describes recurring solutions to common problems in software design. Practical
    PHP examples are given for each of the following patterns: creation pattern types,
    structural patterns, and behavioral patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. SOLID Design Principles"), *SOLID Design
    Principles*, dives into the five basic principles of object-oriented programming
    and design under the acronym SOLID (single responsibility, open-closed, Liskov
    substitution, Interface Segregation, and dependency inversion).It gives practical
    examples and explains the importance of these principles in modular development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Requirement Specification for a Modular Web
    Shop App"), *Requirement Specification for a Modular Web Shop App*, guides a reader
    through the process of defining overall application requirements. It starts by
    defining actual application feature requirements and progresses all the way to
    the technology stack selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Symfony at a Glance"), *Symfony at a Glance*,
    gives a high-level overview of Symfony as a framework, a set of tools, and a development
    methodology. It focuses on the building blocks that we will need to build our
    modular application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Building the Core Module"), *Building the
    Core Module*, guides you through setting up a core module based on the Symfony
    bundle. The core module is then used to set the structure and dependencies for
    other modules to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Building the Catalog Module"), *Building
    the Catalog Module*, guides us through building a self-sufficient module that
    matches the web shop catalog-only feature set. It shows us how to set up entities
    relevant to the module functionality and how to manage those entities and their
    interactions using the existing framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Building the Customer Module"), *Building
    the Customer Module*, guides us through building a self-sufficient module that
    matches the web shop customer-related feature set. It shows us how to set up entities
    relevant to the module''s functionality and how to manage those entities and their
    interactions using the existing framework. It further shows us how to create a
    register and login systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Building the Payment Module"), *Building
    the Payment Module*, guides us through building a self-sufficient module that
    matches the web shop payment-related feature set. It shows us how to integrate
    with a third-party payment provider. It further shows us how to expose a payment
    provider as service for other modules to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Building the Shipment Module"), *Building
    the Shipment Module*, guides us through building a self-sufficient module that
    matches the web shop shipment-related feature set. It shows us how to define several
    flat methods that yield different shipment pricing based on various cart product
    attributes. It further shows us how to expose a shipment method as service for
    other modules to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Building the Sales Module"), *Building
    the Sales Module*, guides us through building a self-sufficient module that matches
    the web shop sales-only feature set. It shows us how to set up cart, cart item,
    order, and order item entities relevant to the module functionality and how to
    manage those entities and their interactions using the existing framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Integrating and Distributing Modules"),
    *Integrating and Distributing Modules*, integrates all the modules built in the
    preceding chapters into a single functioning application. Moving on, it guides
    us through the modern PHP module distribution techniques. These include Git and
    Composer, which in turn indirectly include GitHub and Packagist.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to successfully run all the examples provided in this book, you will
    need either your own web server or a third-party web-hosting solution. The high-level
    technology stack includes PHP 7.0 or greater, Apache/Nginx, and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: The Symfony framework itself comes with a detailed list of system requirements
    that can be found at [http://symfony.com/doc/current/reference/requirements.html](http://symfony.com/doc/current/reference/requirements.html).
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes that the reader is familiar with setting up the complete development
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily intended for intermediate-level PHP developers, with
    little to no knowledge of modular programming who want to understand design patterns
    and principles in order to better utilize the existing framework for modular application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: The modular web-shop application developed as a part of this book uses the Symfony
    framework. However, no previous knowledge of the Symfony framework is assumed
    or required.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
