- en: Web App Exploitation – Beyond OWASP Top 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting XSS with XSS Validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injection attacks with `sqlmap`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Owning all `.svn` and `.git` repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winning race conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting JBoss with JexBoss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting PHP Object Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backdoors using web shells and meterpreters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the OWASP Top 10, we usually see the most common way of finding and exploiting
    vulnerabilities. In this chapter, we will cover some of the uncommon cases one
    might come across while hunting for bugs in a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting XSS with XSS Validator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While XSS is already detected by various tools such as Burp, Acunetix, and so
    on, XSS Validator comes in handy. It is the Burp Intruder and Extender that has
    been designed to automatically validate XSS vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: It is based on SpiderLabs' blog post at [http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html](http://blog.spiderlabs.com/2013/02/server-site-xss-attack-detection-with-modsecurity-and-phantomjs.html).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the tool in the following recipe, we will need to have SlimerJS and PhantomJS
    installed on our machines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the XSS Validator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We open up Burp and switch to the Extender tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/340ecd29-1c09-4b7d-a6ed-ab0cc040f60c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then install the XSS Validator extender:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41724867-7fed-4714-b23c-3e42f3d6dcc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation is done, we will see a new tab in the Burp window titled
    xssValidator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/433f6113-9b8a-41df-a1c9-ac9421d41fb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we install PhantomJS and SlimerJS; this can be done on Kali with a few
    simple commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We download both the PhantomJS file from the internet using `wget`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We extract it using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the folder in which the preceding command downloads
    the PhantomJS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d73703dd-292f-4cd3-bb74-af87cf63c49a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can browse the folder using `cd`, and the easiest way is to copy the
    PhantomJS executable to `/usr/bin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d8228a7-84f6-454d-882e-f9c2ccc8fae7.png)'
  prefs: []
  type: TYPE_IMG
- en: To verify that we can type the `phantomjs -v` command in the Terminal and it
    will show us the version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly, to install SlimerJS we download it from the official website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://slimerjs.org/download.html](http://slimerjs.org/download.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first install the dependencies using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we extract the files using this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then browse the directory and simply copy the SlimerJS executable to `/usr/local/bin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a0702cc-7da1-477e-84f3-f2bf8462cab2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41680f08-dd26-41ae-872e-b17546584451.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to navigate to the XSS Validator folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then need to start the PhantomJS and SlimerJS server using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the servers are running, we head back to the Burp window. In the XSS Validator
    tab on the right-hand side, we will see a list of payloads the extender will test
    on the request. We can manually enter our own payloads as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/795477e2-b319-41b8-b6c1-518d46c81cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we capture the request we need to validate XSS on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We select the Send to Intruder option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48b5b90e-f0fa-463e-986f-e85f3d6d309a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we switch to the Intruder window, and under the Positions tab, we set
    the position where we want our XSS payloads to be tested. The value surrounded
    by `§` is where the payloads will be inserted during the attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12c86f32-6eab-428f-9355-283e29dc5720.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Payloads tab, we select the Payload type as extension-generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f06ce3bb-6051-4cfe-90ac-e667045c54eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Payload Options, we click on the Select generator... and choose XSS Validator
    Payloads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/653b5ad9-e114-476c-9b29-42a70d8450bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we switch to the XSS Validator tab and copy Grep Phrase; this phrase
    can be customized as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8e61d10-0658-4bd6-8d25-38b95d66cd15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we switch to the Options tab in the Intruder and add the copied phrase
    in the Grep - Match:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a80d507b-e6b1-4dbb-8349-099cf3a6ab5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We click on Start attack, and we will see a window pop up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5aa5280-5e74-400e-b817-4336f3e591c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we will see that the requests with a check mark in our Grep Phrase column
    have been successfully validated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/014009ae-d513-447c-ba6e-468bdc026942.png)'
  prefs: []
  type: TYPE_IMG
- en: Injection attacks with sqlmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sqlmap` tool is an open source tool built in Python, which allows the detection
    and exploitation of SQL injection attacks. It has full support for MySQL, Oracle,
    PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM Db2, SQLite, Firebird,
    Sybase, SAP MaxDB, HSQLDB, and Informix databases. In this recipe, we will cover
    how to use sqlmap to test and exploit SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the steps to use `sqlmap`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first take a look at the help of `sqlmap` for a better understanding of
    its features. This can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c825353f-95f8-4485-a504-ffed2f2db7b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To scan a URL, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a SQL has been detected, we can choose yes (`Y`) to skip other types of
    payloads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad4a1923-1b9b-4708-a428-b7879594a9f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once SQL has been detected, we can list the database names using the `--dbs`
    flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bca5b5f9-b626-4e6c-b1cc-27064df38efa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the databases now; similarly, we can use flags such as `--tables` and
    `--columns` to get table names and column names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b87d57a3-41e6-46c0-9655-ccffa009ad42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check whether the user is a database administrator, we can use the `--is-dba`
    flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f84de64-83b1-47d0-a6d7-4d3571701b52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `sqlmap` command has a lot of flags. We can use the following table to
    see the different types of flags and what they do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Flag** | **Operation** |'
  prefs: []
  type: TYPE_TB
- en: '| `--tables` | Dumps all table names |'
  prefs: []
  type: TYPE_TB
- en: '| `-T` | Specifies a table name to perform an operation on |'
  prefs: []
  type: TYPE_TB
- en: '| `--os-cmd` | Executes an operating system command |'
  prefs: []
  type: TYPE_TB
- en: '| `--os-shell` | Prompts a command shell to the system |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | Specifies a filename to run the SQL test on |'
  prefs: []
  type: TYPE_TB
- en: '| `--dump-all` | Dumps everything |'
  prefs: []
  type: TYPE_TB
- en: '| `--tamper` | Uses a tamper script |'
  prefs: []
  type: TYPE_TB
- en: '| `--eta` | Shows estimated time remaining to dump data |'
  prefs: []
  type: TYPE_TB
- en: '| `--dbs=MYSql,MSSQL,Oracle` | We can manually choose a database and perform
    injection for specific database types only |'
  prefs: []
  type: TYPE_TB
- en: '| `--proxy` | Specifies a proxy |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Backdoors using web shells* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Backdoors using meterpreters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Owning all .svn and .git repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool is used to rip version controlled systems such as SVN, Git, and Mercurial/hg,
    Bazaar. The tool is built in Python and is pretty simple to use. In this recipe,
    you will learn how to use the tool to rip the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: This vulnerability exists because most of the time when using a version-controlled
    system, developers host their repository in production. Leaving these folders
    allows a hacker to download the whole source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can download `dvcs-ripper.git` from GitHub using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We browse the `dvcs-ripper` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5dfd0caa-7f46-4707-8980-420bb267ffbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To rip a Git repository, the command is very simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We let it run and then we should see a `.git` folder created, and in it, we
    should see the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc8d52b0-a1c6-49b6-9cfa-35c50a10acf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can use the following command to rip SVN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Winning race conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Race conditions occur when an action is being performed on the same data in
    a multiple threaded web application. It basically produces unexpected results
    when the timing of one action being performed will impact the other action.
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of an application with the race condition vulnerability can be
    an application that allows transfer of credit from one user to another or an application
    that allows a voucher code to be added for a discount that can also have a race
    condition, which may allow an attacker to use the same code multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can perform a race condition attack using Burp''s Intruder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We select the request and click on Send to Intruder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed7fba7b-5504-46f1-8edd-b03504d7598e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We switch to the Options tab and set the number of threads we want, `20` to
    `25` are good enough usually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bbe6543-a0bc-4ec0-81c2-45a7fe3217a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, in the Payloads tab, we choose Null payloads in Payload type as we want
    to replay the same request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c034f5f-ccbc-4756-a1dd-32cfb88d2142.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, in the Payload Options, we choose the number of times we want the request
    to be played.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we don't really know how the application will perform, we cannot perfectly
    guess the number of times we need to replay the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we click on Start attack. If the attack is successful, we should see the
    desired result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following articles for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf](http://antoanthongtin.vn/Portals/0/UploadImages/kiennt2/KyYeu/DuLieuTrongNuoc/Dulieu/KyYeu/07.race-condition-attacks-in-the-web.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://sakurity.com/blog/2015/05/21/starbucks.html](https://sakurity.com/blog/2015/05/21/starbucks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/](http://www.theregister.co.uk/2016/10/21/linux_privilege_escalation_hole/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting JBoss with JexBoss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JexBoss is a tool for testing and exploiting vulnerabilities in JBoss Application
    Server and other Java Application Servers (for example, WebLogic, GlassFish, Tomcat,
    Axis2, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: It can be downloaded at [https://github.com/joaomatosf/jexboss](https://github.com/joaomatosf/jexboss).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We begin with navigating to the directory in which we cloned our JexBoss and
    then follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We install all the requirements using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f40d300-f99a-498f-a52e-bc78a6412ac6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the help, we type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0434aeba-f83b-4617-a7ac-a6017da624e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To exploit a host, we simply type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2110d739-1384-45d6-8981-7e1cc22f5e8b.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows us the vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cd41e0b-44f8-4fa0-a77b-e102ad4e3251.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We type `yes` to continue exploitation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f96a6d4-16ef-4f7d-9c94-68c1f245188f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This gives us a shell on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc88ef97-f384-4230-8b44-ca2766686425.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting PHP Object Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP Object Injection occurs when an insecure user input is passed through the
    PHP `unserialize()` function. When we pass a serialized string of an object of
    a class to an application, the application accepts it, and then PHP reconstructs
    the object and usually calls magic methods if they are included in the class.
    Some of the methods are `__construct()`, `__destruct()`, `__sleep()`, and `__wakeup()`.
  prefs: []
  type: TYPE_NORMAL
- en: This leads to SQL injections, file inclusions, and even remote code execution.
    However, in order to successfully exploit this, we need to know the class name
    of the object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate PHP Object Injection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have an app that is passing serialized data in the `get` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23b23bcb-dc82-4f1d-9028-5c27fb399a67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have the source code, we will see that the app is using `__wakeup()`
    function and the class name is `PHPObjectInjection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8646771c-8982-4e2e-86d5-376fc9d64923.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can write a code with the same class name to produce a serialized object
    containing our own command that we want to execute on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We run the code by saving it as a PHP file, and we should have the serialized
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/722b5d72-d65b-4dbf-a47c-b963ad9be4eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We pass this output into the `r` parameter and we see that here, it shows the
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45e43049-e12f-47a4-aa54-aed864c3dd94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try passing one more command, `uname -a`. We generate it using the PHP
    code we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/baba11b2-ced5-44a8-9be8-3481636bf437.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And we paste the output in the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f6d11b5-85fe-4ebc-8495-9c6469c8c82c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we see the command being executed and the output is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cb4d30f-41cf-41c2-94f9-e2aa8e980bee.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2](https://mukarramkhalid.com/php-object-injection-serialization/#poi-example-2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities](https://crowdshield.com/blog.php?name=exploiting-php-serialization-object-injection-vulnerabilities)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/](https://www.evonide.com/how-we-broke-php-hacked-pornhub-and-earned-20000-dollar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backdoors using web shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shell uploads are fun; uploading web shells gives us more power to browse around
    the servers. In this recipe, you will learn some of the ways in which we can upload
    a shell on the server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of web shells:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first check whether the user is DBA by running sqlmap with the `--is-dba`
    flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19a19e66-693e-4efd-ab17-53108d5e0191.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we use `os-shell`, which prompts us with a shell. We then run the command
    to check whether we have privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcc389a3-6623-49f8-9750-e21e2cbf1cd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, we have admin rights. But we don't have RDP available to outside users.
    Let's try another way to get meterpreter access using PowerShell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We first create an object of `System.Net.WebClient` and save it as a PowerShell
    script on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create our `meterpreter.exe` via `msfvenom` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to get our meterpreter downloaded, so we append the following
    command in our `abc.ps1` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1146fc5b-8f64-4155-b5f9-0d63506a28b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, PowerShell is configured to prevent the execution of `.ps1` scripts
    on Windows systems. But there''s an amazing way to still execute scripts. We use
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is an example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75492280-4ddf-433d-bc55-8d3b0e6e40f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we go to the directory `D:/video/meterpreter.exe` where our file was
    downloaded and execute it using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will open up msf as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bef0c4f-faa1-4b6f-98f0-6436fede6833.png)'
  prefs: []
  type: TYPE_IMG
- en: Backdoors using meterpreters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we may also come across a file upload that is initially meant to
    upload files such as Excel, photos, and so on, but there are a few ways through
    which we can bypass it. In this recipe, you will see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of meterpreters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have a web application that uploads a photo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20015428-2d33-4c72-aac2-2e4987f00419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we upload a photo, this is what we see in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32380e31-b3f9-4a6b-bfd6-db71db172b93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what happens if we upload a `.txt`. We create one with test as the
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d2d5ccb1-bb1a-4673-9073-d3d74b8e2718.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try uploading it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/538fb14d-b1b3-4931-adc0-a04bb9cbee66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our image has been deleted! This might mean our application is doing either
    a client-side or a server-side check for file extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66cfba69-5774-4673-bf53-5286ebc30ec4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to bypass the client-side check. We intercept the request in Burp
    and try to alter the extension in the data submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c2bce9c-ab7c-4fb5-92d1-4d09356abbdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we change the extension from `.txt` to `.txt;.png` and click on forward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a58f8519-a8e2-4d6c-a521-e0495ed45262.png)'
  prefs: []
  type: TYPE_IMG
- en: This is still being deleted, which tells us that the application might be having
    a server-side check.
  prefs: []
  type: TYPE_NORMAL
- en: One of the way to bypass it would be to add a header of an image along with
    the code we want to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the header `GIF87a` and try to upload the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b64944a2-7953-471b-b410-37cc790ab763.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And then we upload this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59b34ecd-7496-47c1-a47d-d5e0d54c7593.png)'
  prefs: []
  type: TYPE_IMG
- en: We see that the file has been uploaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we try to add our PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/0725ad0d-0e6a-42cc-acca-471888d6c322.png)'
  prefs: []
  type: TYPE_IMG
- en: But our PHP has not been executed still.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are other file formats too, such as `.pht`, `.phtml`, `.phtm`,
    `.htm`, and so on. Let's try `.pht`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a642eab-1083-4d72-a8bb-25bf4b6201d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Our file has been uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/259298d1-2bc0-4060-9a5d-6f03c2a172c1.png)'
  prefs: []
  type: TYPE_IMG
- en: We browse the file and see that it has been executed!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/814041e7-29f8-46d2-954c-5e4f6659f83f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try executing a basic command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b6146f1b-ff1d-4e40-bb72-47c67a5fba9b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that our command has been successfully executed and we have uploaded
    our shell on the server.
  prefs: []
  type: TYPE_NORMAL
