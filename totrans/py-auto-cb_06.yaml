- en: Fun with Spreadsheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a CSV spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating CSV spreadsheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading an Excel spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an Excel spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new sheets in an Excel spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts in Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with format in Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing in LibreOffice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a macro in LibreOffice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spreadsheets are one of the most versatile and omnipresent tools in the world
    of computing. Their intuitive approach of sheets and cells is used by virtually
    everyone that uses a computer as part of their day-to-day operations. There's
    even a joke that whole complex businesses are managed and described in a single
    spreadsheet. They are an incredibly powerful tool.
  prefs: []
  type: TYPE_NORMAL
- en: That makes the ability to automate reading from and writing to spreadsheets
    so powerful. We'll see in this chapter how to process spreadsheets, mainly in
    the most common format, Excel. A final recipe will cover a free alternative, Libre
    Office, and in particular, how to use Python as a scripting language inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a CSV spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSV files are simple spreadsheets that are easy to share. They are basically
    a text file with tabular data, separated by commas (hence the name Comma-Separated
    Values), in a simple table format. CSV files can be created using Python's standard
    library and can be read by most spreadsheet software.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, only the standard library of Python is required. Everything
    is ready out of the box!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `csv` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the header with how the data will be ordered and the data to store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the data into a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the resulting CSV file in a spreadsheet. In the following screenshot,
    the file is displayed using the LibreOffice software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7608d599-692e-4267-93fd-e569ef57e858.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the preparation work in steps 1 and 2 in the *How to do it…* section,
    step 3 is the part that does the work.
  prefs: []
  type: TYPE_NORMAL
- en: It opens a new file, `movies.csv`, in write (`w`) mode. The raw file object
    in `csvfile` then creates a writer. All this happens in a `with` block, so it
    closes the file when it's over.
  prefs: []
  type: TYPE_NORMAL
- en: Note the `newline=''` parameter. This is done to make the `writer` store the
    newline directly and avoid incompatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: The writer writes row by row the elements using `.writerow`. The first one is
    the `HEADER`, and then each of the lines of data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code presented stores the data in the default dialect. The dialect defines
    what divides the data on each row (commas or other characters), how to escape,
    newlines, and so on. In case the dialect needs to be tweaked, each of these parameters
    can be defined in the `writer` call. See the following link for a list of all
    the parameters that can be defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters](https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters).'
  prefs: []
  type: TYPE_NORMAL
- en: CSV files are better when simple. If the data to be stored is complicated, maybe
    the best alternative is not a CSV file. But CSV files are extremely useful when
    dealing with tabular data. They can be understood by virtually all programs, and
    even dealing with them at a low level is easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full `csv` module documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/csv.html](https://docs.python.org/3/library/csv.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading CSV files* recipe *in *[Chapter 4](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml), *Searching
    and Reading Local Files*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating CSV files* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the CSV files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given that CSV files are simple text files, the best solution to update their
    content is to read them, change them to internal Python objects, and then write
    the result in the same format. In this recipe, will see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will use the `movies.csv` file that is available on GitHub
    at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.csv](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.csv).
    It contains the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Admissions** | **Name** | **Year** |'
  prefs: []
  type: TYPE_TB
- en: '| 225.7 | Gone With the Wind | 1939 |'
  prefs: []
  type: TYPE_TB
- en: '| 194.4 | Star Wars | 1968 |'
  prefs: []
  type: TYPE_TB
- en: '| 161.0 | ET: The Extra-Terrestrial | 1982 |'
  prefs: []
  type: TYPE_TB
- en: Notice that the year of `Star Wars` is incorrect (it should be 1977). We'll
    change it in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `csv` module and define the filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the contents of the file using a `DictReader` and transform them into
    a list of ordered rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the obtained data. Change the proper value from 1968 to 1977:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file again, and store the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Check the result in spreadsheet software. The result is similar to that displayed
    in step 4 of the *Writing a CSV spreadsheet* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the `csv` module in step 2 of the *How to do it…* section, we
    extract all the data from the file. The file is opened in a `with` block.  `DictReader`
    conveniently transforms it into a list of dictionaries, with the keys on the header
    values.
  prefs: []
  type: TYPE_NORMAL
- en: The conveniently formatted data can then be manipulated and changed. We change
    the data to the proper value in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we change the value directly, but searching may be required
    in a more general case.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 overwrites the file and, using `DictWriter`, stores the data. `DictWriter`
    requires us to define the fields on the columns by requiring the `fieldnames`.
    To obtain it, we retrieve the keys of one of the rows and store them in `HEADER`.
  prefs: []
  type: TYPE_NORMAL
- en: The file is opened again in `w` mode to overwrite it. `DictWriter`  first stores
    the header with `.writeheader` and then stores all the rows with a single call
    to `.writerows`.
  prefs: []
  type: TYPE_NORMAL
- en: The rows can also be added one by one by calling `.writerow`
  prefs: []
  type: TYPE_NORMAL
- en: After closing the `with` block, the file is stored and can be checked.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dialect of the CSV file typically known, but it may be the case that it
    is not. In that case, the `Sniffer` class can help. It analyses a sample of the
    file (or the whole file) and returns a `dialect` object to allow reading in the
    proper way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The dialect then can be passed to the `DictReader` class when opening the file.
    The file will need to be opened twice for reading.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to use the dialect on the `DictWriter` class as well to save the file
    in the same format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full documentation for the `csv` module can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.6/library/csv.html](https://docs.python.org/3.6/library/csv.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading CSV files* recipe in [Chapter 4](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml), *Searching
    and Reading Local Files*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Writing a CSV spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading an Excel spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MS Office is arguably the most common office suite software, making its formats
    pretty much standards. In terms of spreadsheets, Excel is probably the most used
    one and a format easily exchanged.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to obtain information from an Excel spreadsheet
    programmatically from Python using the `openpyxl` module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `openpyxl` module. We should install the module, adding it
    to our `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the GitHub repository, there''s an Excel spreadsheet named `movies.xlsx`
    that contains information on the top ten movies by attendance. The file can be
    found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source of the information is this web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `openpyxl` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the file into memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'List all sheets and get the first one, which is the only one that contains
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtain the value of cells `B4` and `D4` (admissions and director of E.T.):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtain the size in rows and columns. Any cell out of that range will return
    `None` as a value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the module in step 1, step 2 in the *How to do it…* section
    loads the file into memory in a `Workbook` object. Each workbook can contain one
    or more sheets, which contain cells.
  prefs: []
  type: TYPE_NORMAL
- en: To determine the available sheets, in step 3 we obtain all the sheets (there's
    only one in this example) and then access the sheet like a dictionary to retrieve
    a `Worksheet` object.
  prefs: []
  type: TYPE_NORMAL
- en: '`Worksheet` can then access all the cells directly by their names, such as `A4`
    or `C3`. Each of them will return a `Cell` object. The `.value` attribute stores
    the value in the cell.'
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of the recipes in this chapter, we will see more attributes of `Cell`
    objects. Keep reading!
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the area where the data is stored is possible with `max_columns` and
    `max_rows`. This allows us to search within the limits of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Excel defines the columns as letters (A, B, C, and so on ) and rows as numbers
    (1, 2, 3, and so on). Remember to always set the column, and then the row (`D1`,
    not `1D`), or an error will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Cells outside the area are accessible, but won't return data. They can be used
    to write new info.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cells can also be retrieved with `sheet.cell(column, row)`. Both elements start
    at 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the cells within the data area iterating from the sheet, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return a list of lists with all cells, row by row: A1, A2, A3 ...
    B1, B2, B3, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: You can retrieve the cell's column with columns iterating through `sheet.columns`: A1,
    B1, C1, and so on, A2, B2, C2\. and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When retrieving a cell, you can find their position with `.coordinate`, `.row`,
    and `.column`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The full `openpyxl` documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Updating an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating new sheets in an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating charts in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with the format in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an Excel spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to update an existing Excel spreadsheet. This
    will include changing raw values in cells but also setting up formulas that will
    be evaluated when the spreadsheet is open. We'll also see how to add comments
    to cells.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the module `openpyxl`. We should install the module, adding it
    to our `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the GitHub repository, there's an Excel spreadsheet named `movies.xlsx` that
    contains information on the top ten movies by attendance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx)[.](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter6/movies.xlsx)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the module `openpyxl` and the `Comment` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the file into memory and get the sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtain the value of cell `D4` (director of E.T):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the value to just `Spielberg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a comment to that cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new element that obtains the total of all values in the `Admission` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the spreadsheet to the `movies_comment.xlsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the resulting file, which includes the comment and the calculation of
    the total of column `B` in `A12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fc401f36-2ee6-48e2-ba41-d2999eac7c60.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *How to do it…* section, the imports in step 1 and reading the spreadsheet
    in step 2, we select the cell to be changed in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the value is done in step 4 with an assignment. A comment in the cell
    is added, overwriting the `.coment` attribute with a new `Comment`. Note that
    the user that made the comment needs to be added as well.
  prefs: []
  type: TYPE_NORMAL
- en: Values can also include descriptions of formulas. In step 6, we add a new formula
    to cell `B12`. The value is calculated and displayed when the file is opened in
    step 8.
  prefs: []
  type: TYPE_NORMAL
- en: The value of a formula is not calculated in the Python object. This means that
    the formula could contain errors or display unexpected results through bugs. Be
    sure to double-check that the formulas are correct.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 9, the spreadsheet is saved to disk by calling the `.save`
    method of the file.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the resulting file can be the same one as the input one to overwrite
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: The comment and values can be checked by externally accessing the file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can store data in multiple values, and it will be translated into the proper
    types for Excel. For example, storing `datetime` will store it in the proper date
    format. The same is true with `float` or other numeric formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to infer types, you can enable this by using the `guess_type` parameter
    when loading the file, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Adding comments to automatically generated cells can help review the resulting
    file, making clear how where they generated.
  prefs: []
  type: TYPE_NORMAL
- en: While is possible to add formulas to automatically generate Excel files, debugging
    the results can be tricky. When generating a result, generally it's better to
    make the calculations in Python and store the result in raw.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full `openpyxl` documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating new sheets on an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating charts in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with the format in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new sheets on an Excel spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll demonstrate how to create a new Excel spreadsheet from
    scratch, and add and deal with multiple sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `openpyxl` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Excel file. It creates a default sheet, called `Sheet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add data about the number of attendees to this sheet from the source. Only
    the first three are added for simplicity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the name of the director for each movie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `movie_sheets.xlsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `movie_sheets.xlsx` file to check that it has two sheets, with the
    proper information, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ccd6f5d1-d03e-486c-a7ac-81df1c52b165.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *How to do it…* section, after importing the module in step 1, we create
    a new spreadsheet in step 2\. This is a new spreadsheet that contains just the
    default sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The data to be stored is defined in step 3\. Note it contains the info that
    will go on both sheets (name in both, admissions in the first sheet, and director's
    name in the second). In this step, the first sheet is filled.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the value is stored. The proper cell is defined as column `A` or `B` 
    and the proper row (rows start at 1). The `enumerate` function returns a tuple
    with the first element as the index and the second as the enumerate parameter
    (an iterator).
  prefs: []
  type: TYPE_NORMAL
- en: After that, the new sheet is created in step 4, using the name `Directors`.
    `.create_sheet` returns the new sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The information in the `Directors` sheet is stored in step 5 and the file is
    saved in step 6.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The name of an existing sheet can be changed through the `.title` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Be careful, as it won't be possible to access the sheet with `xlsfile['Sheet']`.
    That name doesn't exist!
  prefs: []
  type: TYPE_NORMAL
- en: 'The active sheet, the sheet that will be displayed when the file is opened,
    can be obtained through the `.active` property and changed with `._active_sheet_index`.
    The index starts at `0` for the first sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The sheet can also be copied using `.copy_worksheet`. Be aware that some data,
    for example, charts, won''t be carried over. Most duplicated information will
    be cell data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The full `openpyxl` documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating an Excel spreadsheet and adding comments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating charts in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with format in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts in Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spreadsheets include a lot of tools to deal with data, including presenting
    the data in colorful charts. Let's see how to append a chart programmatically
    to an Excel spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `openpyxl` module and create a new Excel file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add data about the number of attendees in this sheet from the source. Only
    the first three are added for simplicity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `BarChart` object and fill it with basic information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a reference to the `data`, and append the `data` to the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the chart to the sheet and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the resulting chart in the spreadsheet, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f68753d2-22dd-4b8c-8ed2-aa57da72b49c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *How to do it…* section, after preparing the data in steps 1 and 2, the
    data is ready in the range `A1:B4`. Note that `A1` and `B1` both contain a header
    that should not be used in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: In step 3, we set up the new chart and include the basic data, such as a title
    and the units of the *Y* axis.
  prefs: []
  type: TYPE_NORMAL
- en: The title is changed to `Millions`; although a more correct way would been `Admissions(millions)`,
    it'd be redundant with the full title of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates a reference box through a `Reference` object, from row 2 column
    1 to row 4 column 2, which is the area where our data lives, excluding the header.
    The data is added to the chart with `.add_data`. `from_rows` makes each row a
    different data series. `titles_from_data` makes the first column treated as the
    name of the series.
  prefs: []
  type: TYPE_NORMAL
- en: The chart is added to cell `A6` in step 5 and saved to disk.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a bunch of different charts that can be created, including bar charts,
    line charts, area charts (line charts that fill the area between the line and
    the axis), pie charts, or scatter charts (XY charts where one value is plotted
    against the other). Each kind of chart has an equivalent class, for example `PieChart`
    or `LineChart`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each one, at the same time, can have different types. For example, the default
    type for `BarChart` is column, printing the bars vertically, but they can also
    be printed in vertical, selecting a different type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Check the `openpyxl` documentation to see all available combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of extracting the *x *axis labels from the data, they can be set explicitly
    with `set_categories`. For example, compare step 4 with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The range, instead of using a `Reference` object, can also be input with text
    labels describing the region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This way of describing it may be more difficult to deal with if the range of
    data needs to be created programatically.
  prefs: []
  type: TYPE_NORMAL
- en: Defining charts in Excel correctly can be difficult sometimes. The way Excel
    extracts the data from a particular range can be baffling. Remember to allow time
    for trial and error, and to deal with differences. For example, in step 4 we define
    three series with one data point, while in the preceding code we define a single
    series with three data points. Most of those differences are subtle. Finally,
    the most important point is how the end chart looks. Try different chart types
    and learn the differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full `openpyxl` documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating an Excel spreadsheet and adding comments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating new sheets on an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with format in Excel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with format in Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Presenting information in spreadsheets is not just a matter of organizing it
    into cells or displaying it graphically in charts, but also involves changing
    the format to highlight the important points about it. In this recipe, we'll see
    how to manipulate the format of cells to enhance the data and present it in the
    best way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `openpyxl` module and create a new Excel file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Add data about the number of attendees in this sheet from the source. Only
    the first four are added, for simplicity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the colors to use for styling the spreadsheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the header in a blue background and a white font:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an alternate pattern for the columns and a border on each row after
    the header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `movies_format.xlsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the resulting file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ef4c4635-405a-440e-ac36-4ad3ba1fe4c4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *How to do it… *section, in step 1 we import the `openpyxl` module and
    create a new Excel file. In step 2, we add the data to the first sheet. Step 3
    is also a preparation step to define the colors to be used. The colors are defined
    in hex format, which is common in the web design world.
  prefs: []
  type: TYPE_NORMAL
- en: To find the definition of colors, there are plenty of color pickers online or
    even embedded in the OS. A tool like [https://coolors.co/](https://coolors.co/) can
    be useful to define a palette to work with.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, we prepare the format to define the header. The header will have
    a different font (Tahoma), a bigger size (14pt), and it will be white on a blue
    background. To do this, we prepare a `Font` object with the font, size, and foreground
    color, and a `PatternFill` with the background color.
  prefs: []
  type: TYPE_NORMAL
- en: The loop after creating `header_font` and `header_fill` applies the font and
    fill to the proper cells.
  prefs: []
  type: TYPE_NORMAL
- en: Note that iterating over a range always returns the row, then cells, even if
    only one row is involved.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, a border to the rows and an alternate background is applied. The
    border is defined with blue top and bottom and white left and right. The fill
    is created in a similar way to step 4, but in a light blue. The background is
    only applied to even rows.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the top border of a cell is the bottom of the one above and vice versa.
    This means that it's possible to overwrite the border in a loop.
  prefs: []
  type: TYPE_NORMAL
- en: The file is saved finally in step 6.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To define the font, there are other options available, such as bold, italic,
    strikeout, or underline. Define the font and reassign it if you need to change
    any of its elements. And remember to check that the font is available.
  prefs: []
  type: TYPE_NORMAL
- en: There are also various ways of creating a fill. The `PatternFill` accepts several
    patterns, but the most useful one is `solid`. `GradientFill` can also be used
    to apply a two-color gradient.
  prefs: []
  type: TYPE_NORMAL
- en: It's best to limit yourself to solid fills using `PatternFill`. You can tweak
    the color to best represent what you want. Remember to include `style='solid'`,
    or the colour may not appear.
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to define conditional formatting, but it's better to try
    to define the conditionals in Python and then apply the proper formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Number formatting can be set up properly, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will display the value `0.37` as `37%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full `openpyxl` documentation can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Reading an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating an Excel spreadsheet and adding comments *recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The* Creating new sheets on an Excel spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating charts in Excel *recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a macro in LibreOffice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LibreOffice is a free office suite that's an alternative to MS Office and other
    office packages. It includes a text editor and a spreadsheet program called `Calc`.
    Calc understands the regular Excel formats, and it's also totally scriptable internally
    through its UNO API. The UNO interface allows programmatic access to the suite,
    and it's accessible in different languages, such as Java.
  prefs: []
  type: TYPE_NORMAL
- en: One of the available language is Python, making it very easy to generate very
    complex applications in a suite format, as this enables the use of the full Python
    standard library.
  prefs: []
  type: TYPE_NORMAL
- en: Using the full Python standard library give access to elements such as cryptography;
    opening external files, including ZIP files; or connecting to remote databases.
    Also, take advantage of the Python syntax and avoid dealing with LibreOffice BASIC.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see in this recipe how to add an external Python file as a macro that
    will change the contents of a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LibreOffice needs to be installed. It is available at [https://www.libreoffice.org/](https://www.libreoffice.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded and installed, it needs to be configured to allow the execution
    of macros:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Settings | Security to find the Macro Security details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bbdc16ad-dbf6-4455-8129-73b9d7d77d1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Macro Security and select Medium to allow execution of our macros. This
    will display a warning before allowing us to run a macro:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/99fc81d8-fb85-40bf-94ab-62dc031a733f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To insert the macro into the file, we''ll use a script called `include_macro.py`,
    which is available at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py).
    The script with the macro is also available as `libreoffice_script.py` here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file to put the script into, called `movies.ods`, is also available here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods).
    It contains, in the `.ods` format (LibreOffice format), a table with the 10 movies
    with highest admissions. Data is extracted from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `include_macro.py` script to attach the `libreoffice_script.py` to
    the file `movies.ods` macrofile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the resulting file, `macro_file/movies.ods`, in LibreOffice. Notice that
    it shows a warning to enable the macros (click on Enable). Go to Tools | Macros
    | Run Macro:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a6d8b67c-0e48-4fff-bc98-1db332741dfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `ObtainAggregated` under `movies.ods` | `libreoffice_script` macro
    and click on Run. It calculates the aggregated admissions and stores them in cell
    `B12`. It adds a `Total` label in `A15`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02d9a18b-278d-47dd-90b7-8c855e61077f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat steps 2 and 3 to run it again. Now it runs all the aggregations, but
    adds `B12` and gets the result in `B13`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b861820b-7343-4563-8695-a6d9dc85a16d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main work in step 1 is done in the `include_macro.py` script. It copies
    the file into the `macro_file` subdirectory to avoid modifying the input.
  prefs: []
  type: TYPE_NORMAL
- en: Internally, an`.ods` file is a ZIP file with a certain structure. The script
    takes advantage of the ZIP file Python module to add the script in the proper
    subdirectory internally. It also modifies the `manifest.xml` file to allow LibreOffice
    to know there's a script inside the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The macro that is executed in step 3 is defined in `libreoffice_script.py` and
    contains a single function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The variable `XSCRIPTCONTEXT` is created automatically and allowed to get the
    current component, and from there, the first `Sheet`. After that, the sheet is
    iterated to find the `Admissions` column through `.getCellByPosition ` and obtain
    the string value with the `.String` attribute. With the same method, it aggregates
    all the values in the column, extracting them through `.getValue` to get their
    numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: As the loop iterates through the column until finding an empty cell, the second
    time it's executed it will aggregate the value in `B12`, which is the aggregated
    value in the previous execution. This is done on purpose to show that macros can
    be executed multiple times, with different results.
  prefs: []
  type: TYPE_NORMAL
- en: Cells can also be referenced by their string position through `.getCellRangeByName`,
    to store `Total` in cell `A15`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python interpreter is embedded into LibreOffice, meaning that the specific
    version can change if LibreOffice changes. In the latest version of LibreOffice
    at the time of writing this book (6.0.5), the version included was Python 3.5.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UNO interface is very complete and allows you to access a lot of advanced
    elements. Unfortunately, the documentation is not great, and achieving it can
    be complicated and time consuming. The documentation is defined in Java or C++,
    and there are examples in LibreOffice BASIC or other languages, but few for Python.
    The full documentation can be found at: [https://api.libreoffice.org/](https://api.libreoffice.org/),
    and the reference is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://api.libreoffice.org/docs/idl/ref/index.html](https://api.libreoffice.org/docs/idl/ref/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: For example, it is possible to create complex charts or even interactive dialogs
    that ask for and process responses from the user. There's a lot of information
    in forums and old answers. The code in BASIC is also adaptable to Python most
    of the time.
  prefs: []
  type: TYPE_NORMAL
- en: LibreOffice is a fork of a previous project called OpenOffice. UNO was already
    available, meaning that some references will be found when searching the internet
    that refer to OpenOffice.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that LibreOffice is capable of reading and writing Excel files. Some
    features may not be 100% compatible; for example, there may be formatting issues.
  prefs: []
  type: TYPE_NORMAL
- en: For the same reason, it is totally possible to generate a file in Excel format
    with the tools described in other recipes of this chapter and open it with LibreOffice.
    That can be a good approach as the documentation is better for `openpyxl`.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging can also be tricky on occasion. Remember to ensure that a file is
    fully closed before reopening it with new code.
  prefs: []
  type: TYPE_NORMAL
- en: UNO is also capable of working with other parts of the LibreOffice suite, such
    as for creating documents.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a CSV spreadsheet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating an Excel spreadsheet and adding comments and formulas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
