- en: Chapter 2. Working with Docker Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing/searching for an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the logs of containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the restart policy on a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting privileged access inside a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing a port while starting a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the host device inside the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting a new process to a running container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning low-level information about a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeling and filtering containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, after installing Docker, we pulled an image and created
    a container from it. Docker''s primary objective is running containers. In this
    chapter, we''ll see the different operations we can do with containers such as
    starting, stopping, listing, deleting, and so on. This will help us to use Docker
    for different use cases such as testing, CI/CD, setting up PaaS, and so on, which
    we''ll cover in later chapters. Before we start, let''s verify the Docker installation
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction](../Images/image00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will give the Docker client and server version, as well as other details.
  prefs: []
  type: TYPE_NORMAL
- en: I am using Fedora 20/21 as my primary environment to run the recipes. They should
    also work with the other environment.
  prefs: []
  type: TYPE_NORMAL
- en: Listing/searching for an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need an image to start the container. Let's see how we can search images
    on the Docker registry. As we have seen in [Chapter 1](part0015.xhtml#aid-E9OE2
    "Chapter 1. Introduction and Installation"), *Introduction and Installation*,
    a registry holds the Docker images and it can be both public and private. By default,
    the search will happen on the default public registry, which is called Docker
    Hub and is located at [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To search an image on a Docker registry, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example to search a Fedora image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot lists the name, description, and number of stars awarded
    to the image. It also points out whether the image is official and automated or
    not. `STARS` signifies how many people liked the given image. The `OFFICIAL` column
    helps us identify whether the image is built from a trusted source or not. The
    `AUTOMATED` column is a way to tell whether an image is built automatically with
    push in GitHub or Bitbucket repositories. More details about `AUTOMATED` can be
    found in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The convention for image name is `<user>/<name>`, but it can be anything.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker searches for images on the Docker public registry, which has a repository
    for images at [https://registry.hub.docker.com/](https://registry.hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: We can configure our private index as well, which it can search for.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list the images that got more than 20 stars and are automated, run the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more…](../Images/image00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Working with Docker Images"),
    *Working with Docker Images*, we will see how to set up automated builds.
  prefs: []
  type: TYPE_NORMAL
- en: From Docker 1.3 onwards, the `--insecure-registry` option to Docker daemon is
    provided, which allows us to search/pull/commit images from an insecure registry.
    For more details, look at [https://docs.docker.com/reference/commandline/cli/#insecure-registries](https://docs.docker.com/reference/commandline/cli/#insecure-registries).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Docker package on RHEL 7 and Fedora provides options to add and block the
    registry with the `--add-registry` and `--block-registry` options respectively,
    to have better control over the image search path. For more details, look at the
    following links:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/](http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/docker/docker/pull/10411](https://github.com/docker/docker/pull/10411)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For help with the Docker search, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#search](https://docs.docker.com/reference/commandline/cli/#search)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After searching the image, we can pull it to the system by running the Docker
    daemon. Let's see how we can do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To pull an image on the Docker registry, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example to pull the Fedora image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pull` command downloads all layers from the Docker registry, which are
    required to create that image locally. We will see details about layers in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Image tags group images of the same type. For example, CentOS can have images
    with tags such as `centos5`, `centos6`, and so on. For example, to pull an image
    with the specific tag, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the image with latest tag gets pulled. To pull all images corresponding
    to all tags, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With Docker 1.6 ([https://blog.docker.com/2015/04/docker-release-1-6/](https://blog.docker.com/2015/04/docker-release-1-6/)),
    we can build and refer to images by a new content-addressable identifier called
    a `digest`. It is a very useful feature when we want to work with a specific image,
    rather than tags. To pull an image with a specific digest, we can consider the
    following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Digest is supported only with the Docker registry v2.
  prefs: []
  type: TYPE_NORMAL
- en: Once an image gets pulled, it resides on local cache (storage), so subsequent
    pulls will be very fast. This feature plays a very important role in building
    Docker layered images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of Docker `pull`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#pull](https://docs.docker.com/reference/commandline/cli/#pull)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can list the images available on the system running the Docker daemon. These
    images might have been pulled from the registry, imported through the `docker`
    command, or created through Docker files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command to list the images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Docker client talks to the Docker server and gets the list of images at
    the server end.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the images with the same name but different tags get downloaded. The interesting
    thing to note here is that they have the same name but different tags. Also, there
    are two different tags for the same `IMAGE ID`, which is `2d24f826cb16`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might see a different output for `REPOSITORY`, as shown in the following
    screenshot, with the latest Docker packages.![There's more…](../Images/image00284.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is because the image listing prints the Docker registry hostname as well.
    As shown in the preceding screenshot, `docker.io` is the registry hostname.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker images`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#images](https://docs.docker.com/reference/commandline/cli/#images)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have images, we can use them to start the containers. In this recipe,
    we will start a container with the `fedora:latest` image and see what all things
    happen behind the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax used to start a container is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Docker picks the image with the latest tag:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-i` option starts the container in the interactive mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-t` option allocates a `pseudo-tty` and attaches it to the standard input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, with the preceding command, we start a container from the `fedora:latest`
    image, attach `pseudo-tty`, name it `f21`, and run the `/bin/bash` command. If
    the name is not specified, then a random string will be assigned as the name.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if the image is not available locally, then it will get downloaded from
    the registry first and then run. Docker will run the `search` and `pull` commands
    before running the `run` command.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under the hood, Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: Will merge all the layers that make that image using UnionFS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allocates a unique ID to a container, which is referred to as Container ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allocates a filesystem and mounts a read/write layer for the container. Any
    changes on this layer will be temporary and will be discarded if they are not
    committed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allocates a network/bridge interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigns an IP address to the container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executes the process specified by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, with the default Docker configuration, it creates a directory with the
    container's ID inside `/var/lib/docker/containers`, which has the container's
    specific information such as hostname, configuration details, logs, and `/etc/hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To exit from the container, press *Ctrl* + *D* or type `exit`. It is similar
    to exiting from a shell but this will stop the container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `run` command creates and starts the container. With Docker 1.3 or later,
    it is possible to just create the container using the `create` command and run
    it later using the `start` command, as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The container can be started in the background and then we can attach to it
    whenever needed. We need to use the `-d` option to start the container in the
    background:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command returns the container ID of the container to which we
    can attach later, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding case, we chose `/bin/bash` to run inside the container. If
    we attach to the container, we will get an interactive shell. We can run a noninteractive
    process and run it in the background to make a daemonized container like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove the container after it exits, start the container with the `--rm`
    option, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As soon as the `date` command exits, the container will be removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--read-only` option of the `run` command will mount the root filesystem
    in the `read-only` mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Remember that this option just makes sure that we cannot modify anything on
    the root filesystem, but we are writing on volumes, which we'll cover later in
    the book. This option is very useful when we don't want users to accidentally
    write content inside the container, which gets lost if the container is not committed
    or copied out on non-ephemeral storage such as volumes.
  prefs: []
  type: TYPE_NORMAL
- en: You can also set custom labels to containers, which can be used to group the
    containers based on labels. Take a look at the *Labeling and filtering containers*
    recipe in this chapter for more details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A container can be referred in three ways: by name, by container ID (0df95cc49e258b74be713c31d5a28b9d590906ed9d6e1a2dc75672
    aa48f28c4f), and by short container ID (0df95cc49e25)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker run`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#run](https://docs.docker.com/reference/commandline/cli/#run)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker 1.3 release announcement [http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/](http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can list both running and stopped containers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You will also need a few running and/or stopped containers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list the containers, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Docker daemon can look at the metadata associated with the containers and
    list them down. By default, the command returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The container ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image from which it got created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command that was run after starting the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The details about when it got created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ports that are exposed from the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To list both running and stopped containers, use the `-a` option as follows:![There's
    more…](../Images/image00286.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To return just the container IDs of all the containers, use the `-aq` option
    as follows:![There's more…](../Images/image00287.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To show the last created container, including the non-running container, run
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using the `--filter/-f` option to `ps` we can list containers with specific
    labels. Look at the *Labeling and filtering containers* recipe in this chapter
    for more details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `man` page of `docker ps` to see more options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker ps`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#ps](https://docs.docker.com/reference/commandline/cli/#ps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the logs of containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the container emits logs or output on `STDOUT`/`STDERR`, then we can get
    them without logging into the container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You will also need a running container, which emits logs/output
    on `STDOUT`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get logs from the container, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take the example from the earlier section of running a daemonized container
    and look at the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker will look at the container's specific log file from `/var/lib/docker/containers/<Container
    ID>` and show the result.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `-t` option, we can get the timestamp with each log line and with `-f`
    we can get tailf like behavior.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at `help` option of `docker logs`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#logs](https://docs.docker.com/reference/commandline/cli/#logs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can stop one or more containers at once. In this recipe, we will first start
    a container and then stop it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You will also need one or more running containers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stop the container, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you already have a running container, then you can go ahead and stop it;
    if not, we can create one and then stop it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will save the state of the container and stop it. It can be started again,
    if needed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To stop a container after waiting for some time, use the `--time/-t` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To stop all the running containers run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at `help` option of `docker stop`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#stop](https://docs.docker.com/reference/commandline/cli/#stop)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can delete a container permanently, but before that we have to stop the container
    or use the force option. In this recipe, we'll start, stop, and delete a container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You will also need some containers in a stopped or running
    state to delete them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first start a container, stop it, and then delete it using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding screenshot, the container did not show up,
    which just entered the `docker ps` command after stopping it. We had to provide
    the `-a` option to list it. After the container is stopped, we can delete it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To forcefully delete a container without an intermediate stop, use the `-f`
    option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To delete all the containers, we first need to stop all the running containers
    and then remove them. Be careful before running the commands as these will delete
    both the running and the stopped containers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: There are options to remove a specified link and volumes associated with the
    container, which we will explore later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Docker daemon will remove the read/write layer, which was created while
    starting the container.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look at the `help` option of `docker rm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#rm](https://docs.docker.com/reference/commandline/cli/#rm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the restart policy on a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before Docker 1.2, there used to be an option to restart the container. With
    the release of Docker 1.2, it has been added with the `run` command with flags
    to specify the restart policy. With this policy, we can configure containers to
    start at boot time. This option is also very useful when a container dies accidentally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the restart policy using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three restart policies to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '`no`: This does not start the container if it dies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on-failure`: This restarts the container if it fails with nonzero exit code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always`: This always restarts the container without worrying about the return
    code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also give an optional restart count with the `on-failure` policy as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will only restart the container three times, if any failure
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker run`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#run](https://docs.docker.com/reference/commandline/cli/#run).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a restart does not suit your requirements, then use `systemd` ([http://freedesktop.org/wiki/Software/systemd/](http://freedesktop.org/wiki/Software/systemd/))
    for solutions to automatically restart the container on failure. For more information,
    visit [https://docs.docker.com/articles/host_integration/](https://docs.docker.com/articles/host_integration/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting privileged access inside a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux divides the privileges traditionally associated with superuser into distinct
    units, known as capabilities (run `man capabilities` on a Linux-based system),
    which can be independently enabled and disabled. For example, the `net_bind_service`
    capability allows nonuser processes to bind the port below 1,024\. By default,
    Docker starts containers with limited capabilities. With privileged access inside
    the container, we give more capabilities to perform operations normally done by
    root. For example, let's try to create a loopback device while mounting a disk
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting privileged access inside a container](../Images/image00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the `privileged` mode, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try the preceding example with the privileged access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By providing almost all capabilities inside the container.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This mode causes security risks as containers can get root-level access on
    the Docker host. With Docker 1.2 or new, two new flags `--cap-add` and `--cap-del`
    have been added to give fine-grained control inside a container. For example,
    to prevent any `chown` inside the container, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Look at [Chapter 9](part0092.xhtml#aid-2NNJO2 "Chapter 9. Docker Security"),
    *Docker Security*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker run`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#run](https://docs.docker.com/reference/commandline/cli/#run)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker 1.2 release announcement [http://blog.docker.com/2014/08/announcing-docker-1-2-0/](http://blog.docker.com/2014/08/announcing-docker-1-2-0/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing a port while starting a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of ways by which ports on the container can be exposed. One
    of them is through the `run` command, which we will cover in this chapter. The
    other ways are through the Docker file and the `--link` command. We will explore
    them in the other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax to expose a port is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to expose port 22 while starting a container, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways to expose the ports for a container. For now, we will
    see how we can expose the port while starting the container. We'll look other
    options to expose the ports in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker run`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#run](https://docs.docker.com/reference/commandline/cli/#run)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the host device inside the container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From Docker 1.2 onwards, we can give access of the host device to a container
    with the `--device` option to the `run` command. Earlier, one has bind mount it
    with the `-v` option and that had to be done with the `--privileged` option.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You will also need a device to pass to the container.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can give access of a host device to the container using the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding command will access `/dev/sdc` inside the container.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker run`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#run](https://docs.docker.com/reference/commandline/cli/#run)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting a new process to a running container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While doing development and debugging, we might want to look inside the already
    running container. There are a few utilities, such as `nsenter` ([https://github.com/jpetazzo/nsenter](https://github.com/jpetazzo/nsenter)),
    that allow us to enter into the namespace of the container to inspect it. With
    the `exec` option, which was added in Docker 1.3, we can inject a new process
    inside a running container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client. You might also need a running container to inject a process
    in.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can inject a process inside a running container with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start an `nginx` container and then inject `bash` into that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `exec` command enters into the namespace of the container and starts the
    new process.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at `help` option of Docker inspect:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#exec](https://docs.docker.com/reference/commandline/cli/#exec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning low-level information about a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While doing the debugging, automation, and so on, we will need the container
    configuration details. Docker provides the `inspect` command to get those easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To inspect a container/image, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll start a container and then inspect it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker will look into the metadata and configuration for the given image or
    container and present it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `-f | --format` option we can use the Go (programming language) template
    to get the specific information. The following command will give us an IP address
    of the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at the `help` option of `docker inspect`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#inspect](https://docs.docker.com/reference/commandline/cli/#inspect)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeling and filtering containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Docker 1.6, a feature has been added to label containers and images, through
    which we can attach arbitrary key-value metadata to them. You can think of them
    as environment variables, which are not available to running applications inside
    containers but they are available to programs (Docker CLI) that are managing images
    and containers. Labels attached to images also get applied to containers started
    via them. We can also attach labels to containers while starting them.
  prefs: []
  type: TYPE_NORMAL
- en: Docker also provides filters to containers, images, and events ([https://docs.docker.com/reference/commandline/cli/#filtering](https://docs.docker.com/reference/commandline/cli/#filtering)),
    which we can use in conjunction with labels to narrow down our searches.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, let's assume that we have an image with the label, `distro=fedora21`.
    In the next chapter, we will see how to assign a label to an image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Labeling and filtering containers](../Images/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, if we use filters with the `docker
    images` command, we only get an image where the corresponding label is found in
    the image's metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the Docker daemon 1.6 and above is running on the host and you
    can connect through the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start the container with the `--label/-l` option, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Let's start a container without a label and start two others with the same label:![How
    to do it…](../Images/image00294.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we list all the containers without a label, we will see all the containers,
    but if we use label, then we get only containers, which matches the label.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](../Images/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker attaches label metadata to containers while starting them and matches
    the label while listing them or other related operations.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can list all the labels attached to a container through the `inspect` command,
    which we saw in an earlier recipe. As we can see, the `inspect` command returns
    both the image and the container labels.![There's more…](../Images/image00296.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can apply labels from a file (with the `--from-file` option) that has a
    list of labels, separated by a new EOL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These labels are different from the Kubernetes label, which we will see in [Chapter
    8](part0081.xhtml#aid-2D7TI1 "Chapter 8. Docker Orchestration and Hosting Platforms"),
    *Docker Orchestration and Hosting Platforms*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website [https://docs.docker.com/reference/builder/#label](https://docs.docker.com/reference/builder/#label)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://rancher.com/docker-labels/](http://rancher.com/docker-labels/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
