- en: Magnum – COE Management in OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will explain the OpenStack project for managing the **Container
    Orchestration Engine** (**COE**), Magnum. Magnum is the OpenStack project for
    managing infrastructure and for running containers on top of OpenStack, backed
    by different technologies. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Magnum introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnum DevStack installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing COEs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnum introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum is an OpenStack service that was created in 2014 by the OpenStack containers
    team to enable a **Container Orchestration Engine** (**COE**) offering the ability
    to deploy and manage containers as first-class resources in OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Magnum supports Kubernetes, Apache Mesos, and Docker Swarm COEs.
    Magnum uses Heat to do the orchestration of these COEs on VMs or bare metals provisioned
    by OpenStack. It uses OS images that contain the required tools to run containers.
    Magnum offers KeyStone compatible APIs and a complete multi-tenant solution for
    managing your COEs on top of an OpenStack cluster.
  prefs: []
  type: TYPE_NORMAL
- en: A Magnum cluster is a set of various resources provided by different OpenStack
    services. It consists of a group of VMs provisioned by Nova, networks connecting
    these VMs created by Neutron, volumes attached to VMs created by Cinder, and so
    on. A Magnum cluster can also have some external resources depending on the options
    provided while creating a cluster. For example, we can create an external load
    balancer for our cluster by specifying the `-master-lb-enabled` option in the
    cluster template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the salient features of Magnum are:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides a standard API for complete life cycle management of COEs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multiple COEs such as Kubernetes, Swarm, Mesos, and DC/OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports the ability to scale a cluster up or down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multi-tenancy for container clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different choices of container cluster deployment models: VM or bare-metal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides KeyStone-based multi-tenant security and auth management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neutron based multi-tenant network control and isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Cinder to provide volume for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated with OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure container cluster access (**Transport Layer Security** (**TLS**)) enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for external infrastructure can also be used by the cluster, such as
    DNS, public network, public discovery service, Docker registry, load balancer,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barbican provides the storage of secrets such as certificates used for TLS within
    the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kuryr-based networking for container-level isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnum has several different types of objects that form the Magnum system.
    In this section, we will learn about each of them in detail and also learn what
    they are used for in Magnum. Two important objects are the cluster and the cluster
    template. Here is a list of Magnum objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was previously known as **Baymodel**. Cluster template is equivalent to
    a Nova flavor. An object stores template information about the cluster such as
    a keypair, image, and so on, and this is used to create new clusters consistently.
    Some parameters are relevant to the infrastructure of the cluster, while others
    are for the particular COE. Multiple cluster templates can exist for different
    COEs.
  prefs: []
  type: TYPE_NORMAL
- en: A cluster template cannot be updated or deleted if is used by any cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was previously known as **Bay**. It is a collection of node objects where
    work is scheduled. This node can be a VM or bare metal. Magnum deploys a cluster
    according to the attributes defined in the particular cluster template as well
    as a few additional parameters for the cluster. Magnum deploys the orchestration
    templates provided by the cluster driver to create and configure all of the necessary
    infrastructure where the COE runs. After a cluster is created, users can use the
    native CLIs of each COE to run their application on top of OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cluster driver contains all of the necessary files that are needed for setting
    up a cluster. It contains a heat template defining the resources to be created
    for any cluster, scripts to install and configure services on the cluster, the
    version information of the driver, and the template definition.
  prefs: []
  type: TYPE_NORMAL
- en: Heat Stack Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Heat Stack Template** (**HOT**) is a template that defines the resources
    which will form a COE cluster. Every COE type has a different template depending
    on the steps of its installation. This template is passed to Heat by Magnum to
    set up a full COE cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Template definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template definition represents the mapping between Magnum attributes and Heat
    template attributes. It also has outputs that are consumed by Magnum. It indicates
    which cluster type it will use for a given cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certificate is an object that represents the CA certificate for a cluster in
    Magnum. Magnum generates both server and client certificates while creating a
    cluster to provide a secure communication between Magnum services and COE services.
    The CA certificate and key are stored in Magnum for use by a user to access the
    cluster securely. Users need to generate a client certificate, a client key, and
    a Certificate Signing Request (CSR), and then send a request to Magnum to get
    it signed and also download the signing cert for accessing the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service is an object that stores the information about the `magnum-conductor`
    binary. This object contains information such as the host where the service is
    running, if the service is disabled or not, the last seen details, and so on.
    This information can be used by admins to see the status of the `magnum-conductor`
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum also manages the statistics of each project usage. This information is
    helpful for administration purposes. Stats objects contain some metrics about
    the current usage of any admin or user for a tenant or even for all active tenants.
    They provide information, such as the total number of clusters, nodes, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quotas is an object that stores the resource quota of any given project. Imposing
    quotas on resources puts a limitation on a number of resources that can be consumed,
    which helps to guarantee *fairness* or the fair distribution of resources at creation
    time. If a particular project needs more resources, the concept of quota provides
    the ability to increase the resource count on-demand, given that the system constraints
    are not exceeded. Quotas are tied closely to physical resources and are billable
    entities.
  prefs: []
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned that Magnum provides various features in addition to the management
    of COE infrastructure in the previous section. In the following sections, we will
    talk about some of the advanced features present in Magnum.
  prefs: []
  type: TYPE_NORMAL
- en: External load balancer for Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum uses Flannel by default to provide networking for the resources in Kuberenetes.
    The pods and services can access each other and the external internet using this
    private container networking. However, these resources can't be accessed from
    an external network. To allow access from the external network, Magnum provides
    the support for setting up an external load balancer for a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://docs.openstack.org/magnum/latest/user/#steps-for-the-cluster-administrator](https://docs.openstack.org/magnum/latest/user/#steps-for-the-cluster-administrator)
    to set up a Kubernetes load balancer using Magnum.
  prefs: []
  type: TYPE_NORMAL
- en: Transport Layer Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnum allows us to set up secure communication between a cluster''s services
    and the outside world using TLS. The TLS communication in Magnum is employed at
    three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Communication between Magnum services and the cluster API endpoint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between the cluster worker nodes and the master nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between the end user and the cluster. End users use the native
    client libraries to interact with the cluster and with the certificates to communicate
    over a secure network. This applies to both a CLI and a program that uses a client
    for the particular cluster. Each client needs a valid certificate to authenticate
    and communicate with a cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two cases are implemented internally by Magnum, and it creates, stores,
    and configures services to use the certificate for communication and are not exposed
    to the users. The last case involves the users creating a certificate, signing
    it, and then using it to access the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Magnum uses Barbican to store the certificates. This provides another level
    of security with the storage of a certificate. Magnum also supports other ways
    of storing certificates, such as storing them in a local filesystem of the conductor
    node or in the Magnum database.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://docs.openstack.org/magnum/latest/user/#interfacing-with-a-secure-cluster](https://docs.openstack.org/magnum/latest/user/#interfacing-with-a-secure-cluster)
    for more details on how to configure clients to access the secure cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scaling is yet another powerful feature of Magnum. Magnum supports the scaling
    of the cluster, whereas the scaling of containers is outside of Magnum's scope.
    Scaling a cluster can help users to either add or remove nodes from the cluster.
    While scaling up, Magnum creates a VM or bare metal, deploys the COE services
    on it, and then register it to the cluster. When scaling down, Magnum tries to
    remove the node with the least workload.
  prefs: []
  type: TYPE_NORMAL
- en: See the *Managing COEs* section to learn how to scale a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum supports Cinder to provide block storage to the containers, which can
    either be persistent or ephemeral storage.
  prefs: []
  type: TYPE_NORMAL
- en: Ephemeral storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the changes to a container's filesystem can be either stored in a local
    filesystem or in Cinder volume. This is the ephemeral storage which gets deleted
    after the container exits. Magnum provides additional Cinder volume to be used
    as ephemeral storage with containers. Users can specify the volume size in the
    cluster template using the `docker-volume-size` attribute. Also, users can select
    a different volume type, such as a device mapper, and overlay this with the `docker_volume_type`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Persistent storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be a need to persist the container's data when it exits. A container
    can be mounted with Cinder volume for this purpose. When a container exits, the
    volume is unmounted, thus persisting the data.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of third-party volume drivers that support Cinder as the
    backend, such as Rexray and Flocker. Magnum currently supports Rexray as the volume
    driver for Swarm, and Mesos and Cinder for Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum generates notification about usage data. This data is useful for third-party
    applications for the purpose of billing, quota management, monitoring, and so
    on. To provide a standard format for the notification, Magnum uses the **Cloud
    Auditing Data Federation** (**CADF**) format.
  prefs: []
  type: TYPE_NORMAL
- en: Container monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnum also supports the monitoring of containers. It collects metrics such
    as the container CPU load, the number of available Inodes, the cumulative count
    of bytes received, memory, CPU statistics of the node, and so on. The offered
    monitoring stack relies on the following set of containers and services present
    in the COE environment:'
  prefs: []
  type: TYPE_NORMAL
- en: cAdvisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node exporter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can set up this monitoring stack by specifying the given two configurable
    labels in the Magnum cluster template's definition that are `prometheus_monitoring`
    when set to True, the monitoring will be enabled and `grafana_admin_password`
    which the admin password.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The diagram in the *Magnum Conduct*or section shows the architecture of Magnum,
    which has two binaries named `magnum-api` and `magnum-conductor` that form the
    Magnum system. Magnum interacts with Heat to do the orchestration. This means
    Heat is the OpenStack component that talks to various other projects such as Nova,
    Neutron, and Cinder to set up the infrastructure for COE, and then it installs
    the COE on top of it. We will now learn about the detailed functions of the services.
  prefs: []
  type: TYPE_NORMAL
- en: Magnum API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magnum API is a WSGI server that serves the API requests that the user sends
    to Magnum. The Magnum API has many controllers to handle a request for each of
    the resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Baymodel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnum services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quota
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Baymodel and Bay will be replaced by cluster and cluster templates respectively.
    Each of the controllers handle a request for specific resources. They validate
    the request for permissions, validate the OpenStack resources (such as validating
    if an image passed in the cluster template exists in Glance or not), create DB
    objects for the resource with the input data, and passes the request to `magnum-conductor`
    via the AMQP server. The call to `magnum-conductor` can be synchronous or asynchronous
    depending on the processing time taken by each of the operations.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the list calls can be synchronous as they are not time-consuming,
    whereas the create requests can be asynchronous. Upon receiving a response from
    the conductor service, the `magnum-api` service returns the response to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Magnum conductor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum conductor is an RPC server that provides coordination and database query
    support for Magnum. It is stateless and horizontally scalable, meaning multiple
    instances of the conductor service can run at the same time. The `magnum-conductor`
    service selects the cluster driver and then sends the template files to the Heat
    service to do the installation, and finally updates the database with the object
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an architecture diagram for Magnum, which shows the different components
    in Magnum, what other OpenStack projects they communicate to, and the infrastructure
    provisioned for running any COE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the process of a COE cluster being
    created by Magnum. This section deals with the request flow and the component
    interaction of various projects in OpenStack. Provisioning a cluster in Magnum
    involves interaction between multiple components inside OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The request flow for provisioning a cluster in Magnum goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The user sends a REST API call to `magnum-api` for creating a cluster via a
    CLI or Horizon, with the authentication token received from KeyStone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-api` receives the request and sends the request for the validation
    of token and access permission to KeyStone.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: KeyStone validates the token and sends the updated authentications headers with
    roles and permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-api` then validates the quota for the request. If the quota exceeds
    the hard limit, an exception is raised complaining that the *resource limit has
    exceeded* and the request exists with `403` HTTP status.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the validation of all OpenStack resources specified in the cluster template
    is done. For example, `magnum-api` talks to `nova-api` to check if the specified
    keypair exists or not. If the validation fails, the requests exists with `400`
    HTTP status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-api` generates a name for the cluster if the name is not specified
    in the request.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-api` then creates a database object for the cluster.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-api` sends the RPC asynchronous call request to magnum-conductor to
    process the request further.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-conductor` picks the request from the message queue.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-conductor` sets the status of the cluster to `CREATE_IN_PROGRESS` and
    stores the entry in the database.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-conductor` creates the trustee, trust, and certificate for the cluster
    and sets them to cluster for later use.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the cluster distribution, COE type, and server type provided in the
    cluster template, `magnum-conductor` selects a driver for the cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`magnum-conductor` then extracts the template files, template, environment
    files, and heat parameters from the cluster driver and then sends the request
    to Heat to create the stack.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heat then talks to multiple OpenStack services such as Nova, Neutron, and Cinder
    to set up the cluster and install the COE on top of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the stack is created in Heat, the stack ID and cluster status is set to
    `CREATE_COMPLETE` in the Magnum database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are periodic tasks in Magnum which sync the cluster status in the Magnum
    database at a specific time interval.
  prefs: []
  type: TYPE_NORMAL
- en: Magnum DevStack installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Magnum with DevStack for development purposes, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a root directory for DevStack if needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will run DevStack with minimal `local.conf` settings required to enable
    Magnum, Heat, and Neutron:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we have to use Barbican here for storing the TLS certificate
    generated by Magnum. For details, see the *Transport Layer Security* section under
    the *Key Features* section.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure to use the appropriate interface for setup in `local.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run DevStack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will have a Magnum setup running. To verify the installation, check the
    list of Magnum services running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Managing COEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magnum provides seamless management for the life cycle of the cluster in OpenStack.
    The current operations are the basic CRUD operations, with some advance features
    such as the scaling of the cluster, setting up external load balancers, setting
    up a secure cluster with TLS, and so on. In this section, we will create a Swarm
    Cluster Template, use this template to create a Swarm cluster, and then, we will
    run some workloads on the cluster to verify our cluster status.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will prepare our session to be able to use the various OpenStack
    clients including Magnum, Neutron, and Glance. Create a new shell and source the
    DevStack `openrc` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a keypair to use with the cluster template. This keypair will be used
    to ssh to the cluster nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'DevStack creates a Fedora Atomic micro-OS image in Glance for Magnum''s use.
    Users can also create additional images in Glance for use in their cluster. Verify
    the image created in Glance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a Magnum cluster template with the swarm COE type. This is similar
    in nature to a Nova flavor and tells Magnum how to construct the cluster. The
    cluster template specifies all of the resources to be used in our cluster, such
    as a Fedora Atomic image, a Nova keypair, a network, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the cluster template creation by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a cluster using the preceding template. This cluster will result in
    a group of VMs to be created with Docker Swarm installed on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Clusters will have an initial status of `CREATE_IN_PROGRESS`. Magnum will update
    the status to `CREATE_COMPLETE` when it is done creating the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Heat can be used to see detailed information on the status of a stack or specific
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the list of all cluster stacks, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the details of cluster, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We now need to set up the Docker CLI to use the swarm cluster we have created
    with the appropriate credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `dir` to store `certs` and `cd`. The `DOCKER_CERT_PATH` env variable
    is consumed by Docker, which expects `ca.pem`, `key.pem`, and `cert.pem` to be
    in that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate an RSA key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `openssl` config to help generated a CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `openssl req` command to generate the CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have your client CSR, use the Magnum CLI to get it signed and
    also download the signing cert:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the CLI to use TLS. This `env var` is consumed by Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Set the correct host to use, which is the public IP address of the Swarm API
    server endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `env var` is consumed by Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a container in this Swarm cluster. This container will
    ping the address `8.8.8.8` four times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a similar output to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After a cluster is created, you can dynamically add or remove node(s) to or
    from the cluster by updating the `node_count` attribute. For example, to add one
    more node, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Clusters will have a status of `UPDATE_IN_PROGRESS` while the process of the
    update continues. After the completion of update, the status will be updated to
    `UPDATE_COMPLETE`. Reducing `node_count` removes all of the existing pods/containers
    on the nodes that were deleted. Magnum tries to delete the node with the least
    workload.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the OpenStack container infrastructure management
    service, Magnum, in detail. We looked into the different objects in Magnum. Then,
    we learned about the components and architecture of Magnum. Then, we provided
    a detailed overview of the user request workflow in Magnum.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at how to install a development setup for Magnum using DevStack
    and then did a hands-on exercise using Magnum CLI to create a Docker Swarm COE.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Zun, which is a container management
    service for OpenStack.
  prefs: []
  type: TYPE_NORMAL
