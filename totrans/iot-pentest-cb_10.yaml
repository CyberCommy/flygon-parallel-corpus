- en: Securing Hardware
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Hardware best practices
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncommon screw types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Antitamper and hardware protection mechanisms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Side channel attack protections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposed interfaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting communication data and TPM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the IoT devices out in the market today fail in terms of hardware security,
    that is, protecting access to the hardware from attackers. Be it an IP camera,
    baby monitor, medical device, enterprise IoT, smart wearables, or smart TVs, as
    soon as you start looking at its security, there is a high likelihood that a moderately
    skilled attacker would be able to open up the device (thanks to no/little protection
    against opening up the device), read the various chips, identify datasheets for
    them (due to missing protection for hiding the identities of chips), get access
    to the data in the chip (when there is no protection against getting access to
    the chips), interact with the device over various interfaces (because there is
    no protection against exposed interfaces), and more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the various steps, which device developers and
    manufacturers can take to secure the embedded device hardware used in IoT devices.
    Even though making a device 100% secure is close to impossible, the steps mentioned
    in this chapter will help to ensure that the devices that you work on are adhering
    to a really good security posture, which is tough for attackers to break into.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Hardware best practices
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But before getting into the nitty-gritty of the various things that can be done
    to secure the hardware, let's discuss shortly the approach that needs to be taken
    to secure embedded devices.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: One of the things to keep in consideration while building embedded devices is
    that most of the hardware-based vulnerabilities can't be fixed once the product
    is out in the market. This means that you need to be extremely careful from the
    very start when working with hardware.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The other thing to note while building hardware devices for IoT solutions is
    to always think about the resources that an attacker would get access to if he
    is able to reach the hardware. This means that if an attacker is able to open
    up the IoT device what visible components would be seen by him if he looked at
    the PCB. Moreover, what could the attacker do if he went a step further and had
    access to the hardware interface via a shell.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the things that should be considered while building embedded
    devices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are some of the best practices which should be followed in the hardware
    design and development process for embedded devices:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your device has antitamper and hardware protection mechanisms
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complexity of reverse engineering can be improved by using unique screws
    or putting the various sections of hardware together using other means
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that all the common ways of accessing hardware by attackers-UART and
    JTAG-are not exposed/present
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of **trusted platform module** (**TPM**) protections to ensure that
    your device security is strengthened further
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncommon screw types
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step for a hardware attacker is to open up the device to look at the
    chips on the PCB and various exposed interfaces. This can be protected to an extent
    using uncommon screws, which are tough to open or by using things such as ultrasonic
    welding or high-temperature glue to seal the multiple hardware enclosures together.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the common screw types are shown in the following figure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58046357-fd8f-4376-aa88-81a65ee5ba16.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Source: http://thecraftsmanblog.com/wp-content/uploads/2013/09/Screw-Drive-Types.png'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to have unique/less common device screws, it would make it tougher
    for attackers to open up your device, and the only option in most cases would
    be to break it open. Force opening, and even normal opening, can be resisted by
    adding components, which sense and detect the opening of a device, which is discussed
    in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Antitamper and hardware protection mechanisms
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tamper resistance means using specialized components to protect against tampering
    with a given device. One of the common and effective ways of implementing antitampering,
    which can strengthen the hardware security of a device, is by adding tamper detection
    switches, sensors, or circuitry in the device, which can detect certain actions
    such as the opening of the device or its forceful breakage, and would act based
    on that by deleting the flash memory, or making the device unusable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Along with this, it is highly recommended to protect sensitive chips and components
    by removing their labels, hiding them with epoxy, and even encapsulating the chips
    in a secure enclosure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Some other techniques of implementing tamper resistance include incorporating
    tight airflow channels, security screws and hardened steel enclosures-all of which
    would make tampering with the device extremely difficult.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b344f9ba-5298-40c7-bb84-741ba876e442.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Security screws in a power socket
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Most device manufacturers also implement a number of ineffective tamper-resistant
    protections. The following is an image of a TP-Link MR3020, which used a glue
    to protect and hide the UART ports, but obviously did not succeed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d49498ab-e7da-4bc9-a4d8-edea1257b40b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: In this case, it was possible to remove the glue extremely easily using a paper
    knife which would then expose the underlying UART interface.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Side channel attack protections
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the obvious protection mechanisms taken to secure hardware is to implement
    and enable encryption. However, attacks exist whereby encryption can be bypassed,
    or the key can be obtained extremely easily.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Side channel attacks are an advanced hardware exploitation technique in which
    an attacker uses different information sources, such as variations in power, timing
    analysis, electromagnetic data variations, and sound information, to extract more
    information, which can be used to compromise the target device.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Direct memory attacks** (**DMA**) are a type of side channel attack, which
    let the attacker access one of the components involved in the functionality of
    a certain activity *directly* instead of going the usual route. For example, if
    we take an example of a USB, the USB connects to the controller hub/**platform
    controller hub** (**PCH**), which can be accessed via **direct memory access**
    (**DMA**).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'These attacks are complicated to prevent, however, the following are some of
    the measures which can be taken to secure against these kinds of attacks:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Use components in your device, which reduce the overall information that is
    passed outside the system-be it electromagnetic radiations or sounds.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add additional noise whenever a sensitive activity is performed to make it tougher
    for an attacker to extract information.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that an attacker is not able to get any physical access to an unwanted
    component.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposed interfaces
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important things for securing hardware in IoT devices is to
    disable and remove the UART and JTAG interfaces, as well as any other diagnostic
    functionality in the hardware when the device is launched to the market.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The other important consideration here is that, even if there are no exposed
    interfaces visible, an attacker can directly hook to the legs of the chip to get
    access to the UART, JTAG, and so on. This is done by reading the datasheet of
    the chipset, figuring out which pins are for what functionalities, and then making
    the necessary connections. One of the steps that could be taken here to add a
    bit of complexity is to have the interfaces deep between different layers via
    *vias* and not exposed on one of the visible layers. However, this should be done
    only if the exposed interfaces are required for the device developer at a later
    point in time. In all other practical cases, these interfaces should be removed.
    Another security protection worth noting is the addition of hardware and software
    fuses, which can prevent the chips from being read or written to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的考虑因素是，即使没有可见的外部接口，攻击者也可以直接连接到芯片的引脚，以获取对UART、JTAG等的访问权限。这是通过阅读芯片组的数据表，找出哪些引脚用于什么功能，然后进行必要的连接来实现的。在这里可以采取的一项措施是增加一些复杂性，将接口深深地放置在不同层之间，通过*过孔*而不是暴露在一个可见层上。然而，只有在设备开发者在以后的某个时间点需要暴露的接口时才应该这样做。在所有其他实际情况下，这些接口应该被移除。另一个值得注意的安全保护是添加硬件和软件保险丝，可以防止芯片被读取或写入。
- en: One of the things to note here is that basic protection mechanisms, such as
    cutting off tracks, are highly inefficient and can be worked around by a moderately
    skilled attacker.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，基本的保护机制，如切断轨道，效率极低，并且可以被一名技能适中的攻击者绕过。
- en: However, by using a solder bridge, the cut track can be joined together to re-enable
    the JTAG, further exploiting it using other techniques.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过使用焊接桥，切断的轨道可以重新连接以重新启用JTAG，并利用其他技术进一步利用它。
- en: Encrypting communication data and TPM
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密通信数据和TPM
- en: Even though encryption would be a part of firmware security, attackers can often
    sniff the data being passed between two different hardware components. To ensure
    that none of your sensitive information is getting into the hands of attackers,
    make sure that you are encrypting data that is in transit as well as at rest.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管加密将成为固件安全的一部分，攻击者通常可以嗅探两个不同硬件组件之间传递的数据。为了确保您的敏感信息不会落入攻击者手中，请确保您加密了传输中以及静止状态下的数据。
- en: One of the other things to consider when talking about encryption in embedded
    devices is the amount of resources it would take to perform a certain encryption
    function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论嵌入式设备中的加密时，另一个重要考虑因素是执行某种加密功能所需的资源量。
- en: Since the devices are low on resources, performing extremely strong crypto wouldn't
    be feasible-thus, a good balance between encryption and usability should be thought
    about ahead of time and implemented in the hardware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设备资源有限，执行极强的加密可能不可行-因此，在硬件中应该提前考虑并实施加密和可用性之间的良好平衡。
- en: If possible and when the chip supports it take advantage of the TPM to store
    all the various cryptographic keys, which can also provide functionalities such
    as a root of trust, preventing modifications to the boot up process. Most TPMs
    support an effective hardware random number generator and the ability to compute
    2048-bit RSA signatures in 200 ms.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，并且芯片支持，利用TPM存储各种加密密钥，这也可以提供诸如信任根之类的功能，防止对启动过程的修改。大多数TPM支持有效的硬件随机数生成器和在200毫秒内计算2048位RSA签名的能力。
- en: In case TPM-bases security is not possible, another alternative is to use a
    copy protection dongle or a **hardware security module** (**HSM**), where the
    cryptographic keys will be stored. This can also be used during the runtime of
    the device to prevent against attacks, such as firmware modifications and backdooring,
    which makes the device security stronger.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果基于TPM的安全不可行，另一种选择是使用复制保护加密狗或硬件安全模块（HSM），在那里存储加密密钥。这也可以在设备运行时使用，以防止固件修改和后门攻击，从而增强设备安全性。
