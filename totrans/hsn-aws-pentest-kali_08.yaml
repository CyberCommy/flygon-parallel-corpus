- en: Elastic Block Stores and Snapshots - Retrieving Deleted Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces you to the different types of storage options that are
    available through AWS, extending the information covered in [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml),
    *Exploitation on the Cloud Using Kali Linux*. Here, we focus on creating independent **Elastic
    Block Store** (**EBS**) volumes, attaching and detaching from multiple EC2 instances,
    and mounting detached volumes to retrieve data from prior EC2 instances and EBS
    snapshots. This chapter also covers the forensic retrieval of deleted data from
    EBS volumes. This highlights a very important part of the post-exploitation process
    while targeting the AWS infrastructure, since examining EBS volumes and snapshots
    is a very easy way to get access to sensitive data such as passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating, attaching, and detaching new EBS volumes from EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting EBS volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting EBS volumes in EC2 instances for data retrieval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting deleted data from EBS volumes to look for sensitive information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following tool will be used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Sleuth Kit (TSK)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EBS volume types and encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'EBS storage can be broadly divided into two distinct storage types—**solid
    state drives** (**SSD**) and **hard disk drives** (**HDD**):'
  prefs: []
  type: TYPE_NORMAL
- en: SSD-backed volumes are optimized for transactional workloads involving frequent
    read/write operations with a small I/O size, where the dominant performance attribute
    is **I/O operations per second** (**IOPS**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HDD-backed volumes are optimized for large streaming workloads where throughput
    (measured in MiB/s) is a better performance measure than IOPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EBS has four main types of storage, and each is suited for a specific use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose SSD (GP2) volumes**:These are cost-effective storage solutions
    suited for general purpose use across a wide range of workloads. These volumes
    can sustain 3,000 IOPS for an extended period of time, with a minimum of 100 IOPS
    and a maximum of 10,000 IOPS. GP2 volumes provide a very low level of latency
    and can be scaled at 3 IOPS per GB. A GP2 volume can be allocated between 1 GB
    and 16 TB of space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioned IOPS SSD (IO1) volumes**: These are much faster and provide much
    higher performance than the GP2 volumes. IO1 volumes can sustain between 100 and
    32,000 IOPS, which is more than three times as much as GP2\. This type of storage
    is designed for I/O intensive operations such as databases. AWS also allows you
    to specify a rate of IOPS when creating an IO1 volume that AWS can deliver consistently.
    IO1 volumes can be provisioned between a minimum of 4 GB and a maximum of 16 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throughput optimized HDD (ST1)**:ST1 is a low-cost storage solution based
    on magnetic storage disks instead of SSD. These cannot be used as a bootable volume;
    instead, they are best suited to store frequently access data, such as log processing
    and data warehousing. These volumes can only range from a minimum of 1 GB to a
    maximum of 1 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold HDD (SC1)**: SC1 volumes, though similar to ST1 volumes, are not designed
    to hold frequently-accessed data. These too, are low-cost, magnetic storage volumes
    that cannot be used as bootable volumes. Similar to ST1, these volumes can only
    range from a minimum of 1 GB to a maximum of 1 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, attaching, and detaching new EBS volumes from EC2 instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will learn how to create, attach, and mount an EBS volume
    to an Ubuntu EC2 instance. We will then create and delete some files, detach this,
    and then try to extract the deleted data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to EC2 | Volumes and create a new volume. For this exercise, we are creating
    an additional volume size of 8 GB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b94a1375-1d8d-45d1-bd64-454d1da16e61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want your volume to be encrypted (this is optional), perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the checkbox for Encrypt this volume
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Key Management Service** (**KMS**) **Customer Master Key** (**CMK**)
    to be used under Master Key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Create Volume
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the created volume, right-click, and then select the Attach Volume option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Ubuntu instance from the Instance textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f17b6e21-3616-4c28-9956-347641e73acc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Secure shell** (**SSH**) into your Ubuntu instance and list the available
    disks using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will list the disk you attached to your instance. In this case, we can
    see a device named `/dev/xvdf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check if the volume has any data using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the preceding command output shows `/dev/xvdf: data`, it means that your
    volume is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will have to format the volume to the `ext4` filesystem. To do this,
    issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a directory to mount our new `ext4` volume. Here, we are
    using the name, `newvolume`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we mount the volume to the `newvolume` directory using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You may go into the `newvolume` directory and check the disk space for confirming
    the volume mount:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the volume is attached, we can write data to it. We will create a `data.txt` file
    and write some data to it. This file will then be deleted, and we will later try
    to recover the file using TSK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now delete the file, which we will recover later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to detach the volume. We will start by unmounting the volume first;
    move back out of the folder and issue this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s detach the volume from the EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Amazon EC2 console at `https://console.aws.amazon.com/ec2/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the navigation pane, choose Volumes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select a volume and choose Actions | Detach Volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea6f2588-7548-4262-918f-553efc565011.png)'
  prefs: []
  type: TYPE_IMG
- en: In the confirmation dialog box, choose Yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, we have successfully detached the volume from our EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting deleted data from EBS volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our next activity, we will learn how to attach volumes to our Kali machine
    and then use forensics to recover the deleted data. Before we dive into a hands-on
    exercise, let's understand what forensics is and how data recovery works.
  prefs: []
  type: TYPE_NORMAL
- en: '**Forensic Data Analysis** (**FDA**) comes under the umbrella of Digital Forensics,
    and is the method of recovering and analysing data to gain an insight into how
    the data was created, and to acquire digital dust in the cases of cyber crime
    and fraud. Data recovery can be performed on a range of devices including mobile
    devices, storage devices, and servers. The techniques involved include data decryption,
    and reverse engineering binaries analysis of logs.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data recovery, we face two types of data; namely, persistent
    data (which is written to a drive and is easily accessible) and volatile data
    (which is temporary and has a high probability of being lost). So, how do we recover
    data from a drive? In order to understand this, we first need to know what filesystems
    are and how data is stored in a drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'A filesystem is a combination of the data structure and algorithms that an
    **operating system** (**OS**) uses to organize data. Each OS has a different type
    of filesystem to organize and keep track of data. Let''s take a look at the typical
    filesystems being used by the most popular OSes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**: Typically uses **New Technology File System** (**NTFS**); other
    supported filesystems are **File Allocation Table** (**FAT**)/FAT32 and **Resilient
    File System** (**ReFS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**: Supports multiple types of filesystems such as **Extended File System**
    (**XFS**), Ext2/3/4, ReiserFS, and **Journaled File System** (**JFS**)/JFS2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS**: Earlier models of Apple devices used the **Hierarchical File System
    Plus **(**HFS+**) filesystem; since macOS High Sierra it was changed to **Apple
    File System** (**APFS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BSD/Solaris/Unix**: **Unix file system** (**UFS**)/UFS2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this demo, we are working with Linux OS, which typically uses the **extended**
    (**ext**) family of the filesystem. So, how is data stored and retrieved in a
    Linux filesystem? Files are treated as a series of bytes in the filesystem. All
    files are stored using a data structure called **index nodes** (**inodes**). Every
    file is assigned a unique `inode` number. Each directory has a table that maps
    the name of a file to its `inode` number. Inodes contain pointers that point to
    the disk blocks of the file. When we access the file in a directory, the OS looks
    up the directory table and fetches the `inode` for the given filename. Inodes
    also contain other attributes, such as owner and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the `inode` numbers of the files in a directory with the `ls -l
    -i` command.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to deleting data, the Ext4 filesystem cleans the file node and
    then updates the data structure with newly freed space. This means that only the
    file's metadata has been removed, and the file itself still lives in the disk. This
    is crucial as we are going to use inodes to calculate and figure out the location
    of a deleted file.
  prefs: []
  type: TYPE_NORMAL
- en: With that understood, let's take a look at how we can recover data by calculating
    inodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly to what we have done before, go to EC2 | Volumes and select the volume
    that we detached from our Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Attach and then attach it to your Kali machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8172033c-89ef-43aa-ab1f-9c1017fbabfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the volume has been attached, identify the partition using `lsblk`; the
    image will be `/dev/xvdf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using TSK (the forensics framework), let's attempt to recover the `data.txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the filesystem on the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the start sector address for the Linux partition to list the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can start at the `0` offset and then calculate subsequent `inode` numbers
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `inode` number for the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `icat` to recover the file that we deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you print the contents of `/tmp/data`, you will find `"Hello World"` as we
    had written earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Full disk encryption on EBS volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data encryption is achieved via Amazon's KMS by enforcing strong encryption
    standards as well as managing and protecting the keys themselves. Data is encrypted
    using the AES 256-bit encryption algorithm, which is considered as one of the
    best standards of data encryption. Amazon also ensures these standards are absolutely
    compliant with **Health Insurance Portability and Accountability Act of 1996**
    (**HIPAA**), **Payment Card Industry** (**PCI**), and **National Institute of
    Standards and Technology** (**NIST**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Encryption is performed on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Data at rest inside the volume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All snapshots created from the volume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All disk I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how is the data encrypted? AWS uses CMKs to encrypt EBS volumes. The CMKs
    are included by default with each region of AWS. Data can be either encrypted
    using the included CMKs, or a user can create a new CMK using the AWS KMS. AWS
    uses the CMK to assign a data key to each storage volume. When the volume is attached
    to an EC2 instance, the data key is used to encrypt all the data at rest. A copy
    of the data key is encrypted and stored in the volume as well. Data encryption
    on EC2 instances happen seamlessly, and produce next to no latency while encrypting
    or decrypting data.
  prefs: []
  type: TYPE_NORMAL
- en: All types of EBS volumes support full disk encryption. However, not all EC2
    instances support encrypted volumes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only the following EC2 instances support EBS encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose**: A1, M3, M4, M5, M5d, T2, and T3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute optimized**: C3, C4, C5, C5d, and C5n'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory optimized**: cr1.8xlarge, R3, R4, R5, R5d, X1, X1e, and z1d'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage optimized**: D2, h1.2xlarge, h1.4xlarge, I2, and I3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerated computing**: F1, G2, G3, P2, and P3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bare metal**: i3.metal, m5.metal, m5d.metal, r5.metal, r5d.metal, u-6tb1.metal,
    u-9tb1.metal, u-12tb1.metal, and z1d.metal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any snapshot of an encrypted storage volume is encrypted by default, and any
    volume created from such snapshots are also encrypted by default. You can simultaneously
    attach both encrypted and unencrypted storage volumes to an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an encrypted volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can encrypt an EBS volume:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the AWS EC2 page and ensure that the Ubuntu Server is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s time to create a new EBS storage volume. On the left-hand side, find
    Elastic Block Storage and click on Volumes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82e048f7-0b57-45aa-b8de-a630abf7a9c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create Volume and enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69ffa745-9439-4c30-b702-21687b2e49e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the box labeled Encryption. You can either choose the built-in master
    key, aws/ebs, or you can create your own Master Key from the KMS service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0245932-aa21-4f06-a79c-89599649968d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Master Key and create the volume. Once the volume has been created successfully,
    you can click on the Close button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d2963804-f4a7-478c-b571-6de910895d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Attaching and mounting an encrypted volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the volume has been created, we will attach the volume to our Ubuntu EC2
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to EBS | Volumes, and check the box of the volume that we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Actions and select Attach Volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7eb21cd-f9ff-49db-b5c2-08265730bb9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the pop up section, select the Ubuntu EC2 instance to attach to, and select
    Attach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d07ff67-1158-4fed-8ad6-9f3f4f884724.png)'
  prefs: []
  type: TYPE_IMG
- en: 'SSH into the Ubuntu instance and check the volume we attached; then issue the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Like previously, this will list the disk we attached to the instance. In this
    case, we can again see a device named `/dev/xvdf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s format the volume to `ext4` once again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And then mount the volume to a folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create another data file; we will later delete this file and try to
    recover it again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now delete the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And then unmount the drive as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Finally, on AWS' EC2 Dashboard, go to EBS | Volumes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the encrypted drive, click on Actions, and click on Detach Volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77517138-422b-499e-963d-04c960024456.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, on the popup, select Yes, Detach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/913ed412-fdd1-44b8-a25c-d3cb2a7191a4.png)'
  prefs: []
  type: TYPE_IMG
- en: We have an encrypted EBS volume with data written to it and then deleted. Next,
    we will see if we can retrieve the data again.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data from an encrypted volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s see if we can retrieve the data from an encrypted volume:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to EBS | Volumes and select the encrypted volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Attach Volume; this time, in the pop-up alert, attach the volume to
    our Kali machine instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbeacf93-d502-41e4-b3db-66cdc5dca1b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the volume is attached, SSH into the Kali machine. Issue the following
    command to identify the volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using TSK (the forensics framework), let's attempt to recover the `data.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the filesystem on the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the start sector address for the Linux partition to list the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can start at the `0` offset and then calculate subsequent `inode` numbers
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `inode` number for the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Since the drive is fully encrypted, while issuing this command, you won't get
    any value returned. As a result, since you don't have the `inode` number, you
    can't retrieve any data from the drive.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, it seems we can prevent deleted data from being recovered using full disk
    encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the different types of storage available for
    an EC2 instance and when they are used. We also learned about data encryption
    and Amazon's KMS. We walked through how to create additional storage for an EC2
    instance using the EBS block storage, and mount it to an EC2 instance for use.
    Additionally, we learned how we can recover lost data from an EBS storage volume
    through memory analysis using TSK.
  prefs: []
  type: TYPE_NORMAL
- en: In an attempt to secure our data, we learned how we can use EBS volume encryption
    using AWS KMS to encrypt data at rest. We also saw how full disk encryption can
    prevent someone from retrieving sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this chapter. In the next chapter, we will learn
    about S3 storage and how to identify vulnerable S3 buckets. We will also see how
    S3 bucket kicking is done and how to exploit vulnerable S3 buckets.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Sleuth Kit**: [https://www.sleuthkit.org/sleuthkit/docs.php](https://www.sleuthkit.org/sleuthkit/docs.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon EBS Encryption**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
