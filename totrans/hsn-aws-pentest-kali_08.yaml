- en: Elastic Block Stores and Snapshots - Retrieving Deleted Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces you to the different types of storage options that are
    available through AWS, extending the information covered in [Chapter 3](12c0f5b9-216d-4b5e-bae0-c6960ed5087d.xhtml),
    *Exploitation on the Cloud Using Kali Linux*. Here, we focus on creating independent **Elastic
    Block Store** (**EBS**) volumes, attaching and detaching from multiple EC2 instances,
    and mounting detached volumes to retrieve data from prior EC2 instances and EBS
    snapshots. This chapter also covers the forensic retrieval of deleted data from
    EBS volumes. This highlights a very important part of the post-exploitation process
    while targeting the AWS infrastructure, since examining EBS volumes and snapshots
    is a very easy way to get access to sensitive data such as passwords.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Creating, attaching, and detaching new EBS volumes from EC2 instances
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting EBS volumes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting EBS volumes in EC2 instances for data retrieval
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting deleted data from EBS volumes to look for sensitive information
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following tool will be used in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The Sleuth Kit (TSK)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EBS volume types and encryption
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'EBS storage can be broadly divided into two distinct storage types—**solid
    state drives** (**SSD**) and **hard disk drives** (**HDD**):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: SSD-backed volumes are optimized for transactional workloads involving frequent
    read/write operations with a small I/O size, where the dominant performance attribute
    is **I/O operations per second** (**IOPS**).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HDD-backed volumes are optimized for large streaming workloads where throughput
    (measured in MiB/s) is a better performance measure than IOPS.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EBS has four main types of storage, and each is suited for a specific use case:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose SSD (GP2) volumes**:These are cost-effective storage solutions
    suited for general purpose use across a wide range of workloads. These volumes
    can sustain 3,000 IOPS for an extended period of time, with a minimum of 100 IOPS
    and a maximum of 10,000 IOPS. GP2 volumes provide a very low level of latency
    and can be scaled at 3 IOPS per GB. A GP2 volume can be allocated between 1 GB
    and 16 TB of space.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioned IOPS SSD (IO1) volumes**: These are much faster and provide much
    higher performance than the GP2 volumes. IO1 volumes can sustain between 100 and
    32,000 IOPS, which is more than three times as much as GP2\. This type of storage
    is designed for I/O intensive operations such as databases. AWS also allows you
    to specify a rate of IOPS when creating an IO1 volume that AWS can deliver consistently.
    IO1 volumes can be provisioned between a minimum of 4 GB and a maximum of 16 TB.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throughput optimized HDD (ST1)**:ST1 is a low-cost storage solution based
    on magnetic storage disks instead of SSD. These cannot be used as a bootable volume;
    instead, they are best suited to store frequently access data, such as log processing
    and data warehousing. These volumes can only range from a minimum of 1 GB to a
    maximum of 1 TB.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold HDD (SC1)**: SC1 volumes, though similar to ST1 volumes, are not designed
    to hold frequently-accessed data. These too, are low-cost, magnetic storage volumes
    that cannot be used as bootable volumes. Similar to ST1, these volumes can only
    range from a minimum of 1 GB to a maximum of 1 TB.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, attaching, and detaching new EBS volumes from EC2 instances
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will learn how to create, attach, and mount an EBS volume
    to an Ubuntu EC2 instance. We will then create and delete some files, detach this,
    and then try to extract the deleted data:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to EC2 | Volumes and create a new volume. For this exercise, we are creating
    an additional volume size of 8 GB:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b94a1375-1d8d-45d1-bd64-454d1da16e61.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'If you want your volume to be encrypted (this is optional), perform the following
    steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Select the checkbox for Encrypt this volume
  id: totrans-24
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Key Management Service** (**KMS**) **Customer Master Key** (**CMK**)
    to be used under Master Key
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要在主密钥下使用的密钥管理服务（KMS）客户主密钥（CMK）
- en: Select Create Volume
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建卷
- en: Select the created volume, right-click, and then select the Attach Volume option.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建的卷，右键单击，然后选择附加卷选项。
- en: 'Select the Ubuntu instance from the Instance textbox:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从实例文本框中选择Ubuntu实例：
- en: '![](img/f17b6e21-3616-4c28-9956-347641e73acc.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f17b6e21-3616-4c28-9956-347641e73acc.png)'
- en: '**Secure shell** (**SSH**) into your Ubuntu instance and list the available
    disks using the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过SSH进入Ubuntu实例，并使用以下命令列出可用磁盘：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will list the disk you attached to your instance. In this case, we can
    see a device named `/dev/xvdf`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出您附加到实例的磁盘。在这种情况下，我们可以看到一个名为`/dev/xvdf`的设备。
- en: 'Check if the volume has any data using the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查卷是否有任何数据：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the preceding command output shows `/dev/xvdf: data`, it means that your
    volume is empty.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '如果前面的命令输出显示`/dev/xvdf: data`，这意味着您的卷是空的。'
- en: 'Now we will have to format the volume to the `ext4` filesystem. To do this,
    issue the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将需要将卷格式化为`ext4`文件系统。为此，请发出以下命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will create a directory to mount our new `ext4` volume. Here, we are
    using the name, `newvolume`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个目录来挂载我们的新的`ext4`卷。在这里，我们使用名称`newvolume`：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we mount the volume to the `newvolume` directory using the following
    command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用以下命令将卷挂载到`newvolume`目录：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You may go into the `newvolume` directory and check the disk space for confirming
    the volume mount:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以进入`newvolume`目录并检查磁盘空间以确认卷挂载：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the volume is attached, we can write data to it. We will create a `data.txt` file
    and write some data to it. This file will then be deleted, and we will later try
    to recover the file using TSK:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦卷被附加，我们就可以向其写入数据。我们将创建一个`data.txt`文件并向其写入一些数据。然后将删除此文件，并稍后尝试使用TSK恢复文件：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s now delete the file, which we will recover later:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们删除文件，稍后我们将恢复它：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It''s time to detach the volume. We will start by unmounting the volume first;
    move back out of the folder and issue this command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候分离卷了。我们将首先卸载卷；退出文件夹并发出此命令：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s detach the volume from the EC2 instance:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从EC2实例中分离卷：
- en: Open the Amazon EC2 console at `https://console.aws.amazon.com/ec2/`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`https://console.aws.amazon.com/ec2/`上打开Amazon EC2控制台。
- en: In the navigation pane, choose Volumes.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航窗格中，选择卷。
- en: 'Select a volume and choose Actions | Detach Volume:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个卷并选择操作|分离卷：
- en: '![](img/ea6f2588-7548-4262-918f-553efc565011.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea6f2588-7548-4262-918f-553efc565011.png)'
- en: In the confirmation dialog box, choose Yes.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中，选择是。
- en: Thus, we have successfully detached the volume from our EC2 instance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功从EC2实例中分离了卷。
- en: Extracting deleted data from EBS volumes
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从EBS卷中提取已删除的数据
- en: In our next activity, we will learn how to attach volumes to our Kali machine
    and then use forensics to recover the deleted data. Before we dive into a hands-on
    exercise, let's understand what forensics is and how data recovery works.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个活动中，我们将学习如何将卷附加到我们的Kali机器，然后使用取证来恢复已删除的数据。在进行实际操作之前，让我们了解一下取证是什么，以及数据恢复是如何工作的。
- en: '**Forensic Data Analysis** (**FDA**) comes under the umbrella of Digital Forensics,
    and is the method of recovering and analysing data to gain an insight into how
    the data was created, and to acquire digital dust in the cases of cyber crime
    and fraud. Data recovery can be performed on a range of devices including mobile
    devices, storage devices, and servers. The techniques involved include data decryption,
    and reverse engineering binaries analysis of logs.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数字取证数据分析（FDA）属于数字取证范畴，是恢复和分析数据以了解数据创建方式，并在网络犯罪和欺诈案件中获取数字证据的方法。数据恢复可以在包括移动设备、存储设备和服务器在内的一系列设备上进行。涉及的技术包括数据解密和日志的二进制反向工程分析。
- en: When it comes to data recovery, we face two types of data; namely, persistent
    data (which is written to a drive and is easily accessible) and volatile data
    (which is temporary and has a high probability of being lost). So, how do we recover
    data from a drive? In order to understand this, we first need to know what filesystems
    are and how data is stored in a drive.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据恢复方面，我们面临两种类型的数据；即持久数据（写入驱动器并且易于访问）和易失性数据（临时数据，很有可能丢失）。那么，我们如何从驱动器中恢复数据？为了理解这一点，我们首先需要了解文件系统是什么，以及数据是如何存储在驱动器中的。
- en: 'A filesystem is a combination of the data structure and algorithms that an
    **operating system** (**OS**) uses to organize data. Each OS has a different type
    of filesystem to organize and keep track of data. Let''s take a look at the typical
    filesystems being used by the most popular OSes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统是操作系统用于组织数据的数据结构和算法的组合。每个操作系统都有不同类型的文件系统来组织和跟踪数据。让我们来看看最受欢迎的操作系统使用的典型文件系统：
- en: '**Windows**: Typically uses **New Technology File System** (**NTFS**); other
    supported filesystems are **File Allocation Table** (**FAT**)/FAT32 and **Resilient
    File System** (**ReFS**)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：通常使用新技术文件系统（NTFS）；其他支持的文件系统包括文件分配表（FAT）/FAT32和弹性文件系统（ReFS）
- en: '**Linux**: Supports multiple types of filesystems such as **Extended File System**
    (**XFS**), Ext2/3/4, ReiserFS, and **Journaled File System** (**JFS**)/JFS2'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：支持多种类型的文件系统，如扩展文件系统（XFS）、Ext2/3/4、ReiserFS和日志文件系统（JFS）/JFS2
- en: '**macOS**: Earlier models of Apple devices used the **Hierarchical File System
    Plus **(**HFS+**) filesystem; since macOS High Sierra it was changed to **Apple
    File System** (**APFS**)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS：早期的苹果设备使用分层文件系统加（HFS+）文件系统；自macOS High Sierra起，改为Apple文件系统（APFS）。
- en: '**BSD/Solaris/Unix**: **Unix file system** (**UFS**)/UFS2'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BSD/Solaris/Unix：Unix文件系统（UFS）/UFS2
- en: In this demo, we are working with Linux OS, which typically uses the **extended**
    (**ext**) family of the filesystem. So, how is data stored and retrieved in a
    Linux filesystem? Files are treated as a series of bytes in the filesystem. All
    files are stored using a data structure called **index nodes** (**inodes**). Every
    file is assigned a unique `inode` number. Each directory has a table that maps
    the name of a file to its `inode` number. Inodes contain pointers that point to
    the disk blocks of the file. When we access the file in a directory, the OS looks
    up the directory table and fetches the `inode` for the given filename. Inodes
    also contain other attributes, such as owner and permissions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: You can see the `inode` numbers of the files in a directory with the `ls -l
    -i` command.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to deleting data, the Ext4 filesystem cleans the file node and
    then updates the data structure with newly freed space. This means that only the
    file's metadata has been removed, and the file itself still lives in the disk. This
    is crucial as we are going to use inodes to calculate and figure out the location
    of a deleted file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: With that understood, let's take a look at how we can recover data by calculating
    inodes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly to what we have done before, go to EC2 | Volumes and select the volume
    that we detached from our Ubuntu machine:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Attach and then attach it to your Kali machine:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8172033c-89ef-43aa-ab1f-9c1017fbabfa.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Once the volume has been attached, identify the partition using `lsblk`; the
    image will be `/dev/xvdf`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using TSK (the forensics framework), let's attempt to recover the `data.txt`
    file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the filesystem on the image:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the start sector address for the Linux partition to list the files:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can start at the `0` offset and then calculate subsequent `inode` numbers
    accordingly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `inode` number for the file:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use `icat` to recover the file that we deleted:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you print the contents of `/tmp/data`, you will find `"Hello World"` as we
    had written earlier.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Full disk encryption on EBS volumes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data encryption is achieved via Amazon's KMS by enforcing strong encryption
    standards as well as managing and protecting the keys themselves. Data is encrypted
    using the AES 256-bit encryption algorithm, which is considered as one of the
    best standards of data encryption. Amazon also ensures these standards are absolutely
    compliant with **Health Insurance Portability and Accountability Act of 1996**
    (**HIPAA**), **Payment Card Industry** (**PCI**), and **National Institute of
    Standards and Technology** (**NIST**).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Encryption is performed on the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Data at rest inside the volume
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All snapshots created from the volume
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All disk I/O
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how is the data encrypted? AWS uses CMKs to encrypt EBS volumes. The CMKs
    are included by default with each region of AWS. Data can be either encrypted
    using the included CMKs, or a user can create a new CMK using the AWS KMS. AWS
    uses the CMK to assign a data key to each storage volume. When the volume is attached
    to an EC2 instance, the data key is used to encrypt all the data at rest. A copy
    of the data key is encrypted and stored in the volume as well. Data encryption
    on EC2 instances happen seamlessly, and produce next to no latency while encrypting
    or decrypting data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: All types of EBS volumes support full disk encryption. However, not all EC2
    instances support encrypted volumes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Only the following EC2 instances support EBS encryption:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose**: A1, M3, M4, M5, M5d, T2, and T3'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute optimized**: C3, C4, C5, C5d, and C5n'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory optimized**: cr1.8xlarge, R3, R4, R5, R5d, X1, X1e, and z1d'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage optimized**: D2, h1.2xlarge, h1.4xlarge, I2, and I3'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerated computing**: F1, G2, G3, P2, and P3'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bare metal**: i3.metal, m5.metal, m5d.metal, r5.metal, r5d.metal, u-6tb1.metal,
    u-9tb1.metal, u-12tb1.metal, and z1d.metal'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any snapshot of an encrypted storage volume is encrypted by default, and any
    volume created from such snapshots are also encrypted by default. You can simultaneously
    attach both encrypted and unencrypted storage volumes to an EC2 instance.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 任何加密存储卷的快照默认都是加密的，从这些快照创建的任何卷也默认是加密的。您可以同时将加密和未加密的存储卷附加到EC2实例。
- en: Creating an encrypted volume
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建加密卷
- en: 'Let''s take a look at how we can encrypt an EBS volume:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何加密EBS卷：
- en: Go to the AWS EC2 page and ensure that the Ubuntu Server is running.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到AWS EC2页面，确保Ubuntu服务器正在运行。
- en: 'It''s time to create a new EBS storage volume. On the left-hand side, find
    Elastic Block Storage and click on Volumes:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是创建新的EBS存储卷的时候了。在左侧找到弹性块存储，然后单击卷：
- en: '![](img/82e048f7-0b57-45aa-b8de-a630abf7a9c3.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82e048f7-0b57-45aa-b8de-a630abf7a9c3.png)'
- en: 'Click on Create Volume and enter the following details:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击创建卷，输入以下详细信息：
- en: '![](img/69ffa745-9439-4c30-b702-21687b2e49e9.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69ffa745-9439-4c30-b702-21687b2e49e9.png)'
- en: 'Check the box labeled Encryption. You can either choose the built-in master
    key, aws/ebs, or you can create your own Master Key from the KMS service:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选标记为加密的框。您可以选择内置的主密钥aws/ebs，或者您可以从KMS服务创建自己的主密钥：
- en: '![](img/d0245932-aa21-4f06-a79c-89599649968d.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0245932-aa21-4f06-a79c-89599649968d.png)'
- en: 'Select Master Key and create the volume. Once the volume has been created successfully,
    you can click on the Close button:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择主密钥并创建卷。一旦卷成功创建，您可以单击关闭按钮：
- en: '![](img/d2963804-f4a7-478c-b571-6de910895d4a.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2963804-f4a7-478c-b571-6de910895d4a.png)'
- en: Attaching and mounting an encrypted volume
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加和挂载加密卷
- en: 'Once the volume has been created, we will attach the volume to our Ubuntu EC2
    instance:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦卷创建完成，我们将把卷附加到我们的Ubuntu EC2实例：
- en: Go to EBS | Volumes, and check the box of the volume that we just created.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到EBS | Volumes，并勾选我们刚刚创建的卷的框。
- en: 'Click on Actions and select Attach Volume:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击操作，选择附加卷：
- en: '![](img/c7eb21cd-f9ff-49db-b5c2-08265730bb9d.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7eb21cd-f9ff-49db-b5c2-08265730bb9d.png)'
- en: 'In the pop up section, select the Ubuntu EC2 instance to attach to, and select
    Attach:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出部分，选择要附加的Ubuntu EC2实例，并选择附加：
- en: '![](img/5d07ff67-1158-4fed-8ad6-9f3f4f884724.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d07ff67-1158-4fed-8ad6-9f3f4f884724.png)'
- en: 'SSH into the Ubuntu instance and check the volume we attached; then issue the
    following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH进入Ubuntu实例并检查我们附加的卷；然后发出以下命令：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Like previously, this will list the disk we attached to the instance. In this
    case, we can again see a device named `/dev/xvdf`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，这将列出我们附加到实例的磁盘。在这种情况下，我们可以再次看到一个名为`/dev/xvdf`的设备。
- en: 'Let''s format the volume to `ext4` once again:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次将卷格式化为`ext4`：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And then mount the volume to a folder:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将卷挂载到文件夹：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s create another data file; we will later delete this file and try to
    recover it again:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建另一个数据文件；稍后我们将删除此文件并尝试再次恢复它：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s now delete the file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们删除文件：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And then unmount the drive as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后按以下步骤卸载驱动器：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, on AWS' EC2 Dashboard, go to EBS | Volumes.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在AWS的EC2仪表板上，转到EBS | Volumes。
- en: 'Select the encrypted drive, click on Actions, and click on Detach Volume:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择加密驱动器，单击操作，然后单击分离卷：
- en: '![](img/77517138-422b-499e-963d-04c960024456.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77517138-422b-499e-963d-04c960024456.png)'
- en: 'Finally, on the popup, select Yes, Detach:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在弹出窗口中，选择是，分离：
- en: '![](img/913ed412-fdd1-44b8-a25c-d3cb2a7191a4.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/913ed412-fdd1-44b8-a25c-d3cb2a7191a4.png)'
- en: We have an encrypted EBS volume with data written to it and then deleted. Next,
    we will see if we can retrieve the data again.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个加密的EBS卷，其中写入了数据，然后删除了。接下来，我们将看看是否可以再次检索数据。
- en: Retrieving data from an encrypted volume
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从加密卷中检索数据
- en: 'Now let''s see if we can retrieve the data from an encrypted volume:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看是否可以从加密卷中检索数据：
- en: Go to EBS | Volumes and select the encrypted volume.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到EBS | Volumes并选择加密卷。
- en: 'Click on Attach Volume; this time, in the pop-up alert, attach the volume to
    our Kali machine instead:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击附加卷；这次，在弹出的警报中，将卷附加到我们的Kali机器上：
- en: '![](img/cbeacf93-d502-41e4-b3db-66cdc5dca1b7.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbeacf93-d502-41e4-b3db-66cdc5dca1b7.png)'
- en: 'Once the volume is attached, SSH into the Kali machine. Issue the following
    command to identify the volume:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦卷被附加，SSH进入Kali机器。发出以下命令以识别卷：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using TSK (the forensics framework), let's attempt to recover the `data.txt` file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TSK（取证框架），让我们尝试恢复`data.txt`文件。
- en: 'Check the filesystem on the image:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查图像上的文件系统：
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Use the start sector address for the Linux partition to list the files:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Linux分区的起始扇区地址列出文件：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can start at the `0` offset and then calculate subsequent `inode` numbers
    accordingly.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从`0`偏移开始，然后相应地计算后续的`inode`编号。
- en: 'Get the `inode` number for the file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取文件的`inode`编号：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Since the drive is fully encrypted, while issuing this command, you won't get
    any value returned. As a result, since you don't have the `inode` number, you
    can't retrieve any data from the drive.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于驱动器是完全加密的，因此在发出此命令时，您将不会得到任何返回值。因此，由于您没有`inode`编号，您无法从驱动器中检索任何数据。
- en: Thus, it seems we can prevent deleted data from being recovered using full disk
    encryption.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，似乎我们可以通过完全磁盘加密防止删除的数据被恢复。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the different types of storage available for
    an EC2 instance and when they are used. We also learned about data encryption
    and Amazon's KMS. We walked through how to create additional storage for an EC2
    instance using the EBS block storage, and mount it to an EC2 instance for use.
    Additionally, we learned how we can recover lost data from an EBS storage volume
    through memory analysis using TSK.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了EC2实例可用的不同类型的存储以及它们的使用方式。我们还了解了数据加密和亚马逊的KMS。我们通过EBS块存储的使用步骤，为EC2实例创建额外的存储并将其挂载到EC2实例中。此外，我们还学习了如何使用TSK通过内存分析从EBS存储卷中恢复丢失的数据。
- en: In an attempt to secure our data, we learned how we can use EBS volume encryption
    using AWS KMS to encrypt data at rest. We also saw how full disk encryption can
    prevent someone from retrieving sensitive data.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们的数据，我们学习了如何使用AWS KMS对EBS卷进行加密，以加密静态数据。我们还看到了如何使用全盘加密来防止某人检索敏感数据。
- en: This brings us to the end of this chapter. In the next chapter, we will learn
    about S3 storage and how to identify vulnerable S3 buckets. We will also see how
    S3 bucket kicking is done and how to exploit vulnerable S3 buckets.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的结束。在下一章中，我们将学习关于S3存储以及如何识别易受攻击的S3存储桶。我们还将看到S3存储桶踢的操作以及如何利用易受攻击的S3存储桶。
- en: Further reading
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**The Sleuth Kit**: [https://www.sleuthkit.org/sleuthkit/docs.php](https://www.sleuthkit.org/sleuthkit/docs.php)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**The Sleuth Kit**: [https://www.sleuthkit.org/sleuthkit/docs.php](https://www.sleuthkit.org/sleuthkit/docs.php)'
- en: '**Storage**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
- en: '**Amazon EBS Encryption**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon EBS 加密**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)'
