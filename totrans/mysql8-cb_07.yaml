- en: Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking backups using mysqldump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking backups using mysqlpump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking backups using mydumper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking backups using flat files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking backups using XtraBackup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking instances for backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary log backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After setting up the database, the next important thing is to set up backups.
    In this chapter, you will learn how to set up various types of backups. There
    are two main ways to perform a backup. One is logical backup, which exports all
    the databases, table structures, data, and stored routines into a set of SQL statements
    that can be executed again to recreate the state of the database. The other type
    is physical backup, which contains all the files on the system that the databases
    used to store all the database entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logical backup utilities**: `mysqldump`, `mysqlpump`, and `mydumper` (not
    shipped with MySQL)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Physical backup utilities**: XtraBackup (not shipped with MySQL) and flat
    file backup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For point-in-time recovery, the backup should be able to provide the binary
    log positions up to which the backups are taken. This is called a **consistent
    backup**.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to take backups from a slave onto a filer mounted on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Taking backups using mysqldump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysqldump` is a widely used logical backup tool. It gives a variety of options
    to include or exclude databases, select specific data to be backed up, back up
    only the schema without data, or just take a backup of stored routines without
    anything else, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mysqldump` utility comes along with the `mysql` binary, so you do need
    to install it separately. Most production scenarios are covered in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the options, you can specify the username, password, and hostname to connect
    to the database, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, `--user` and `--password` are not mentioned in every example,
    to keep the reader focused on other important options.
  prefs: []
  type: TYPE_NORMAL
- en: Full backup of all databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This can be done with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `--all-databases` option takes a backup of all databases and all tables.
    The `>` operator redirects the output to the `dump.sql` file. Prior to MySQL 8,
    stored procedures and events were stored in the `mysql.proc` and `mysql.event`
    tables. From MySQL 8 onward, definitions for corresponding objects are stored
    in `data dictionary` tables, but those tables are not dumped. To include stored
    routines and events in a dump made using `--all-databases`, use the `--routines`
    and `--events` options.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include the routines and events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can open the `dump.sql` file to see how it is structured. The first few
    lines are the session variables at the time of dumping. Next is the `CREATE DATABASE`
    statement, followed by the `USE DATABASE` command. Next is the `DROP TABLE IF
    EXISTS` statement, followed by `CREATE TABLE`; and then we have the actual `INSERT`
    statements that insert the data. Since the data is stored as SQL statements, this
    is called **logical backup**.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that when you restore the dump, the `DROP TABLE` statement will
    wipe off all the tables before creating the tables.
  prefs: []
  type: TYPE_NORMAL
- en: Point-in-time recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get point-in-time recovery, you should specify `--single-transaction` and
    `--master-data`.
  prefs: []
  type: TYPE_NORMAL
- en: The `--single-transaction` option provides consistent backup by changing the
    transaction isolation mode to `REPEATABLE READ` and executing `START TRANSACTION`
    before taking a backup. It is useful only with transactional tables, such as `InnoDB`,
    because then it dumps the consistent state of the database at the time `START
    TRANSACTION` was issued without blocking any applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--master-data` option prints the binary log coordinates of the server
    to the `dump` file. If `--master-data=2`, it prints as a comment. This also uses
    the `FLUSH TABLES WITH READ LOCK` statement to get a snapshot for the binary logs.
    As explained in Chapter 5, *Transactions*, this can be very dangerous when there
    is any long-running transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Dumping master binary coordinates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Backups are always taken on slaves. To get the binary log coordinates of the
    master when the backup was taken, you can use the `--dump-slave` option. If you
    are taking the binary log backup from the master, use this option. Otherwise,
    use the `--master-data` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Specific databases and tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To back up only a specific database, execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To back up only a specific table, execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Ignore tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ignore certain tables, you can use the `--ignore-table=database.table` option.
    To specify more than one table to ignore, use the directive multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Specific rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysqldump` helps you filter the data you back up. Suppose you want to take
    a backup of employees who joined after 2000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `LIMIT` clause to limit the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Backup from a remote server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you may not have SSH access to the database server (as in the case
    of cloud instances such as Amazon RDS). In those cases, you can use `mysqldump`
    to take a backup from a remote server to the local server. For this, you need
    to mention `hostname` using the `--hostname` option. Make sure that the user has
    appropriate privileges to connect and perform a backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Backup to rebuild another server with a different schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be a situation where you want to have a different schema on another
    server. In that case, you have to dump and restore the schema, alter the schema
    as you need, and then dump and restore the data. Altering the schema with data
    can take a long time, depending on the amount of data you have. Note that this
    method will work only when the modified schema is compatible with inserts. The
    modified table can have extra columns but it should have all the columns present
    in the original table.
  prefs: []
  type: TYPE_NORMAL
- en: Only schema and no data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `--no-data` to dump only the schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Only data and no schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the following options to take only a data dump, excluding the schema.
  prefs: []
  type: TYPE_NORMAL
- en: '`--complete-insert` will print the column names in the `INSERT` statement,
    which will help when you have extra columns in the modified table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Backup for merging data with other server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can take backup either way to replace the old data or keep the old data
    incase of conflict.
  prefs: []
  type: TYPE_NORMAL
- en: REPLACE with new data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose you want to restore data from the production database to a development
    machine that already has some data. If you want to merge the data from production
    with development, you can use the `--replace` option, which will use the `REPLACE
    INTO` statement instead of the `INSERT` statement. You should also include the `--skip-add-drop-table`
    option, which will not write a `DROP TABLE` statement to the `dump` file. If you
    have the same number of tables and structure, you can also include the `--no-create-info`
    option, which will skip the `CREATE TABLE` statement in the `dump` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you have some extra tables in production, the preceding dump will fail while
    restoring because the table does not exist on development server. In that case,
    you should not add the `--no-create-info` option and use the `force` option while
    restoring. Otherwise, the restore will fail at `CREATE TABLE` saying that the
    table already exists. Unfortunately, `mysqldump` has not provided the option of
    `CREATE TABLE IF NOT EXISTS`.
  prefs: []
  type: TYPE_NORMAL
- en: IGNORE data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of `REPLACE`, you can use the `INSERT IGNORE` statement when writing
    to the `dump` file. This will keep the existing data on the server and insert
    new data.
  prefs: []
  type: TYPE_NORMAL
- en: Taking backups using mysqlpump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysqlpump` is a very similar program to `mysqldump` with some extra features.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous ways to do it. Let's have a look at each one in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can speed up the process of dumping by specifying the number of threads
    (based on the number of CPUs). For example, use eight threads to take a full backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even specify the number of threads for each database. In our case,
    the `employees` database is very big compared to the `company` database. So you
    can spawn four threads to `employees` and two threads to the `company` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example to distribute the threads has three threads for `db1` and `db2`,
    two threads for `db3` and `db4`, and four threads for the rest of the databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that there is a progress bar that will help you estimate the
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Exclude/include database objects using regex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a backup of all databases ending with `prod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose there are some test tables in some databases and you want to exclude
    them from the backup; you can specify using the `--exclude-tables` option, which
    will exclude tables with the name `test` across all databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of each inclusion and exclusion option is a comma-separated list
    of names of the appropriate object type. Wildcard characters are permitted in
    object names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%` matches any sequence of zero or more characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_` matches any single character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from databases and tables, you can also include or exclude triggers, routines,
    events, and users, for example, `--include-routines`, `--include-events`, and
    `--exclude-triggers`.
  prefs: []
  type: TYPE_NORMAL
- en: To know more about the include and exclude options, refer to [https://dev.mysql.com/doc/refman/8.0/en/mysqlpump.html#mysqlpump-filtering](https://dev.mysql.com/doc/refman/8.0/en/mysqlpump.html#mysqlpump-filtering).
  prefs: []
  type: TYPE_NORMAL
- en: Backup users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In `mysqldump`, you will not get a backup of the users in `CREATE USER` or
    `GRANT` statements; instead you have to take a backup of the `mysql.user` table.
    Using `mysqlpump`, you can dump user accounts as account management statements
    (`CREATE USER` and `GRANT`) rather than as inserts into the `mysql` system database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also exclude some users by specifying the `--exclude-users` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Compressed backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can compress the backup to minimize disk space and network bandwidth. You
    can use `--compress-output=lz4` or `--compress-output=zlib`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you should have the appropriate decompress utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To decompress execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `zlib` execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To decompress execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Faster reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will notice that in the output, the secondary indexes are omitted from the
    `CREATE TABLE` statement. This will speed up the restoration process. The indexes
    are added at the end of the `INSERT` using the `ALTER TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Indexes will be covered in [Chapter 13](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83),
    *Performance Tuning*.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, it was possible to dump all tables in the `mysql` system database.
    As of MySQL 8, `mysqldump` and `mysqlpump` dump only non-`data dictionary` tables
    in that database.
  prefs: []
  type: TYPE_NORMAL
- en: Taking backups using mydumper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mydumper` is a logical backup tool that''s similar to `mysqlpump`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mydumper` has these advantages over `mysqldump`:'
  prefs: []
  type: TYPE_NORMAL
- en: Parallelism (hence, speed) and performance (avoids expensive character set conversion
    routines and has efficient code overall).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency. It maintains snapshots across all threads, provides accurate master
    and slave log positions, and so on. `mysqlpump` does not guarantee consistency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easier to manage output (separate files for tables and dumped metadata, and
    it is easy to view/parse data). `mysqlpump` writes everything to one file, which
    limits the option of loading selective database objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inclusion and exclusion of database objects using regex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The option to kill long-running transactions that block the backup and all subsequent
    queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mydumper` is an open source backup tool, which you need to install separately.
    In this section, installation steps on Debian and Red Hat systems and the usage
    of `mydumper` will be covered.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the installation and then we will learn a lot of things related
    to backup in every subsection that is listed within this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu/Debain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'On Red Hat/CentOS/Fedora:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, using YUM or APT, you can find the releases here at [https://github.com/maxbube/mydumper/releases](https://github.com/maxbube/mydumper/releases):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Full backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following command takes a backup of all databases into the `/backups` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Several files are created in the `/backups` folder. Each database has its `CREATE
    DATABASE` statement as `<database_name>-schema-create.sql` and each table will
    have its own schema and data files. Schema files are stored as `<database_name>.<table>-schema.sql`
    and data files are stored as `<database_name>.<table>.sql`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The views are stored as `<database_name>.<table>-schema-view.sql`. Stored routines,
    triggers, and events are stored as `<database_name>-schema-post.sql` (use `sudo
    mkdir –pv /backups` if directory is not created):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are any queries longer than 60 seconds, `mydumper` will fail with
    the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: To avoid this, you can pass the `--kill-long-queries` option or set `--long-query-guard`
    to a higher value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--kill-long-queries` option kills all the queries that are greater than
    60 seconds or a value set by `--long-query-guard`.  Please note that `--kill-long-queries`
    also kills the replication thread due to a bug ([https://bugs.launchpad.net/mydumper/+bug/1713201](https://bugs.launchpad.net/mydumper/+bug/1713201)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Consistent backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The metadata file in the `backup` directory contains the binary log coordinates
    for consistent backup.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a master, it captures the binary log positions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'On a slave, it captures the binary log positions of both master and slave:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Backup of a single table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following command takes the backup of the `employees` table of the `employees`
    database into the `/backups` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The convention of the files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`employees-schema-create.sql` contains the `CREATE DATABASE` statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`employees.employees-schema.sql` contains the `CREATE TABLE` statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`employees-schema-post.sql` contains the `ROUTINES`, `TRIGGERS`, and `EVENTS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`employees.employees.sql` contains the actual data in the form of `INSERT`
    statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup of specific databases using regex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can include/exclude specific databases using the `regex` option. The following
    command will exclude `mysql` and `test` databases from the backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Taking backup of a big table using mydumper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To speed up the dump and restore of a big table, you can split it into small
    chunks. The chunk size can be specified by the number of rows it contains and
    each chunk will be written into a separate file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`-t`: Specifies the number of threads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--trx-consistency-only`: If you are using only transnational tables, such
    as `InnoDB`, using this option will minimize the locking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--rows`: Split the table into chunks of this number of rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each chunk, a file is created as `<database_name>.<table_name>.<number>.sql`;
    the number is padded with five zeros:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Non-blocking backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To provide consistent backup, `mydumper` acquires `GLOBAL LOCK` by executing
    `FLUSH TABLES WITH READ LOCK`.
  prefs: []
  type: TYPE_NORMAL
- en: You have already seen how dangerous it is to use `FLUSH TABLES WITH READ LOCK`
    if there are any long-running transactions (explained in Chapter 5, *Transactions*).
    To avoid that, you can pass the `--kill-long-queries` option to kill blocking
    queries rather than aborting `mydumper`.
  prefs: []
  type: TYPE_NORMAL
- en: '`--trx-consistency-only`: This is equivalent to `--single-transaction` for
    `mysqldump` but with a `binlog` position. Obviously, this position only applies
    to transactional tables. One of the advantages of using this option is that the
    global read lock is only held for the threads'' coordination, so it''s released
    as soon as the transactions are started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--use-savepoints` reduces metadata locking issues (needs the `SUPER` privilege).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressed backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can specify the `--compress` option to compress the backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Backing up only data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `--no-schemas` option to skip the schema and take a data-only
    backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Taking backups using flat files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a physical backup method whereby you take a backup by directly copying
    the files inside `data directory`. Since new data is written while you copy the
    files, the backup will be inconsistent and cannot be used. To avoid that, you
    have to shut down MySQL, copy the files, and then start MySQL. This method is
    not used for daily backups but is well suited during maintenance windows for upgrades
    or downgrades or while doing a host swap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shut down the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the files into the `data directory` (your directory may be different):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Taking backups using XtraBackup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XtraBackup is an open source backup software provided by Percona. It copies
    flat files without shutting down the server, but to avoid inconsistencies, it
    uses a redo log file. It is widely used by many companies as a standard backup
    tool. The advantages are that it is very fast compared to logical backup tools
    and recovery is also very fast.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how Percona XtraBackup works (taken from the Percona XtraBackup documentation):'
  prefs: []
  type: TYPE_NORMAL
- en: It copies your `InnoDB` data files, which results in data that is internally
    inconsistent; but then it performs crash recovery on the files to make them a
    consistent, usable database again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This works because `InnoDB` maintains a redo log, also called the transaction
    log. This contains a record of every change to the `InnoDB` data. When `InnoDB`
    starts, it inspects the data files and the transaction log, and performs two steps.
    It applies committed transaction log entries to the data files, and it performs
    an undo operation on any transactions that modified data but did not commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Percona XtraBackup works by remembering the **log sequence number** (**LSN**)
    when it starts, and then copying away the data files. It takes some time to do
    this, so if the files are changing, then they reflect the state of the database
    at different points in time. At the same time, Percona XtraBackup runs a background
    process that watches the transaction log files, and copies changes from it. Percona
    XtraBackup needs to do this continually because the transaction logs are written
    in a round-robin fashion, and can be reused after a while. Percona XtraBackup
    needs the transaction log records for every change to the data files since it
    began execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, Percona XtraBackup is not supported for MySQL 8\. Eventually,
    Percona will release a new version of XtraBackup supporting MySQL 8; hence only
    the installation is covered.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation steps are in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: On CentOS/Red Hat/Fedora
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install `mysql-community-libs-compat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Percona repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see some output such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Install XtraBackup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: On Debian/Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fetch the repository packages from Percona:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the downloaded package with `dpkg`. To do that, run the following commands
    as `root` or with `sudo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Once you install this package, the Percona repositories should be added. You
    can check the repository setup in the `/etc/apt/sources.list.d/percona-release.list`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to update the local cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can install the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Locking instances for backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of MySQL 8, you can lock the instance for backup, which will allow the DML
    during online backup and block all the operations that could result in an inconsistent
    snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you begin your backup, lock the instance for backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the backup, and after completion, unlock the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Binary log backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You know that binary logs are needed for point-in-time recovery. In this section,
    you will understand how to take a backup of binary logs. The process streams the
    binary logs from the database server to a remote backup server. You can take the
    binary log backup from either the slave or the master. If you are taking the binary
    log backup from the master and the actual backup from the slave, you should use
    `--dump-slave` to get the corresponding master log position. If you are using
    `mydumper` or XtraBackup, it gives both the master and slave binary log positions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a replication user on the server. Create a strong password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the binary logs on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: You can find the first binary log available on the server; from this, you can
    start the backup. In this case, it is `server1.000008`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the backup server and execute the following command. This will copy
    the binary logs from the MySQL server to the backup server. You can start using
    `nohup` or `disown`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the binary logs are being backed up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
