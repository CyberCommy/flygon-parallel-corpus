- en: Chapter 1. No Sign Up? No Party!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS3 has been a big leap forward for forms. Not only are new style possibilities
    available, but new and powerful pseudo-selectors can also now be used to modify
    the appearance of our page, depending on the state of the form or of its fields.
    In this chapter, we will use a party registration form as a test case to show
    how this component can be enhanced by the new CSS specifications. We will also
    pay attention to how we can retain the right behavior for older browsers. We''re
    going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: HTML structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic styling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marking required fields
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The checked radio buttons trick
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting invalid fields
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balloon styling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with some HTML5 code to shape the structure of our project''s
    web page. To do so, create a file, named `index.html`, in a new folder, named
    `no_signup_no_party`, containing the following markup:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    through your account at [http://www.packtpub.com](http://www.packtpub.com). If
    you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the markup, we are taking advantage of the new structure
    offered by HTML5\. Tags such as `<article>`, `<header>`, and `<footer>` enrich
    the page by adding semantic meaning to the content. These tags are rendered exactly
    as `<div>` but are, semantically speaking, better because they explain something
    about their content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information, I suggest you look at the following article: [http://html5doctor.com/lets-talk-about-semantics](http://html5doctor.com/lets-talk-about-semantics)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Flavor text aside, the only section that needs detailed explanation is the `<head>`
    section. Within this tag, we ask the browser to include some external assets that
    will help us along the way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Reset stylesheet and custom fonts
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, there is a Reset stylesheet, which is particularly useful for ensuring
    that all the CSS properties that browsers apply by default to HTML elements get
    removed. In this project, we use the one offered freely by Yahoo!, which basically
    sets all the properties to `none` or something equivalent.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Next, we ask for another stylesheet. This one is from a Google service called
    Google Web Fonts ([www.google.com/webfonts](http://www.google.com/webfonts)),
    which distributes fonts that can be embedded and used within a web page. Custom
    web fonts are defined with a special `@font-face` property that contains the link
    to the font file the browser has to implement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Unfortunately, to reach the maximum possible compatibility between browsers,
    more font file formats are required, and so a more complex statement is necessary.
    The following statements help achieve such compatibility:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Google Web Fonts provides us with a stylesheet containing these statements for
    the fonts we choose, saving us all the trouble related to font conversion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's create an empty file for our stylesheet under a `css` folder within
    the project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we need to ensure that even older Internet Explorer browsers
    will be able to handle the new HTML5 tags correctly. `html5shiv` ([html5shiv.googlecode.com](http://html5shiv.googlecode.com))
    is a small JavaScript file that accomplishes exactly this task.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Creating the form
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s write the HTML code for the form by adding the following code below
    the `<!--FORM FIELDS-->` mark:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'HTML5 offers some new attributes that we will explore briefly, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`placeholder`: This is used to specify some help text that is displayed within
    the field when empty.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: This is used to mark the field as required. It''s a Boolean attribute
    that tells the browser to ensure that the field is not empty before submitting
    the form. This attribute is part of the new form validation features, which basically
    offer a way to specify some input constraints on the client side. Unfortunately,
    each browser handles the display of the error messages contained in the `title`
    attribute in a different way, but we''ll check this later in the chapter.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern`: This is a powerful and sometimes complex way of specifying a validation
    pattern. It needs a regular expression as a value. This expression is then checked
    against the data inserted by the user. In case of failure, the message contained
    in the `title` attribute is displayed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the given example, the pattern value is `@[a-zA-Z0-9]+`, which means "one
    or more occurrences (the `+` sign) of glyphs from the ranges `a-z` (all lowercase
    letters), `A-Z` (all uppercase letters), and `0-9` (all digits)".
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More ready-to-use patterns can be found at [http://html5pattern.com/](http://html5pattern.com/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Like most of the features introduced by HTML5, even new form attributes such
    as the ones we saw in the code earlier suffer in terms of complete browser compatibility.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get a glimpse of the current browser support for these attributes and many
    other HTML5 and CSS3 features, I suggest going to [http://caniuse.com/](http://caniuse.com/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Misplaced labels
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There''s another oddity in this code: labels are placed after the fields they''re
    linked to. This markup, although uncommon, is still valid and gives us some new
    interesting options to intercept user interaction with the form elements. This
    may sound mysterious, but we''re going to analyze the technique in detail in a
    few pages from now.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add another `fieldset` element below the one we just wrote:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nothing to highlight here; we've just added two radio button groups. Now, if
    we try to run what we've done up to now in a browser, we are going to face some
    disappointment because the default browser's styles have been removed by the Reset
    stylesheet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Misplaced labels](img/3264OT_01_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Time to add some basic styling!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Basic styling
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we need to do is center the form, give the right size to the texts, choose
    a background, and adjust the displacement of labels and fields.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the background. What we want to achieve is to place an image
    as big as possible to fit the page while keeping its proportions. This simple
    task in the "CSS2 era" would involve some use of JavaScript, such as the well-known
    Redux jQuery plugin ([http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/](http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/)).
    With CSS3 it''s just a matter of a few statements:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Basic styling](img/3264OT_01_01.1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'What does the trick here is the `background-size` property, which accepts the
    following values:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '`length`: Using this value, we can express the size of the background using
    any units of measurement, for example `background-size: 10px 10px;`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percentage`: Using this value, we can specify a background size that varies
    with the size of the element, for example `background-size: 10% 10%;`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover`: This value scales the image (without stretching it) to cover the whole
    area of the element. This means that part of the image may not be visible because
    it could get bigger than the container.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contain`: This value scales the image (without stretching it) to the maximum
    size available while keeping the whole image within the container. This, obviously,
    could leave some area of the element uncovered.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, by using `cover`, we ensure that the whole page will be covered by our image,
    but we can do more! If we run all that we've done up to here in a browser, we
    will see that the pixels of our background image become visible if we enlarge
    the window too much. To avoid this, what we can do is to use another background
    image on top of this one. We can use small black dots to hide the pixels of the
    underlying image and achieve a better result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that we can do this without using another element, as CSS3
    allows more than one background on the same element. We can use commas (`,`) to
    separate the backgrounds, keeping in mind that what we declare first will lay
    over the others. So, let''s change the preceding code a bit:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Basic styling](img/3264OT_01_01.2.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'Also, all the other background-related properties act in the same way. If we
    omit one of the values, the previous one is used, so writing `background-repeat:
    repeat` is the same as writing `background-repeat: repeat, repeat` if two background
    images are declared.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Defining properties
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s move on and define the rest of the required properties to complete the
    first phase of the project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are just a few things to underline here. First of all, by using some
    floats, we''ve moved all the fields to the right and the labels to the left. Next,
    we''ve defined some distance between the elements. Maybe the most cryptic statement
    is the following one:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Due to the floating that we just talked about, the first element of each group
    of radio buttons became the rightmost. So, we identify this element by using the
    `selector1 + selector2` selector, which indicates that the specified elements
    must be siblings. This is called an **adjacent sibling selector**, and selects
    all the elements matching the `selector2` selector that directly follows an element
    matching the `selector1` selector. Finally, using `clear:right` we simply state
    that there must be no other floating elements to the right of these radio buttons.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s reload the project in the browser to appreciate the result of our work:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining properties](img/3264OT_01_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Marking required fields
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at an easy trick to automatically display an asterisk (*) near
    the labels of required fields. The HTML5 form validation model introduces some
    new and very interesting pseudo-selectors:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`:valid`: It matches only fields that are in a valid state.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:invalid`: It works in the opposite way, matching only fields with errors.
    This includes empty fields with the `required` attribute set to `true`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:required`: It matches only fields with the `required` flag, whether they''re
    filled or not.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`:optional`: It works with all fields the without the `required` flag.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, we need to match all the labels that follow a field that has the
    `required` attribute. Now the HTML5 structure we implemented earlier comes in
    handy because we can take advantage of the `+` selector to accomplish this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We added a small variation (`input:required + * + .label:after`) in order to
    intercept the structure of the radio buttons as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Let's analyze the sentence a bit before moving on. We used the `:after` pseudo-selector
    to get access to the location just after the element with a `label` class. Then,
    with the `content` property, we injected the asterisk within that location.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: If we reload the page we can verify that, now, all the labels that belong to
    fields with a `required` flag end with an asterisk. Someone may point out that
    screen readers do not recognize this technique. To find a way around this, we
    can take advantage of the `aria-required` property, part of the WAI-ARIA specification
    ([http://www.w3.org/TR/WCAG20-TECHS/ARIA2](http://www.w3.org/TR/WCAG20-TECHS/ARIA2)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Marking required fields](img/3264OT_01_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: The checked radio buttons trick
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can concentrate on the radio buttons, but how can we render them in a
    better way? There is a cool technique for this; it takes advantage of the fact
    that you can check a radio button even by clicking on its linked label. What we
    can do is hide the input elements and style the corresponding labels, maybe using
    icons that represent chips and beers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by removing the text from the radio button labels and changing
    the cursor appearance when it''s hovering over them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Well done! Now we have to hide the radio buttons. We can achieve this by placing
    a patch with the same color as the background over the radio button. Let''s do
    that:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If we now try to submit the form either using WebKit-based browsers or Firefox,
    we can appreciate that the validation balloons related to radio buttons are displayed
    correctly on both of them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Displaying icons within radio button labels
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's move on and work on the radio button labels that, at the moment, are completely
    empty because we moved the text away using the `text-indent` property. What we
    are going to do now is to put a tiny placeholder image within each label, and
    by taking advantage of the CSS3 `~` selector, create a pseudo-star rating system
    with a nice mouse-over effect.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the fact that we have to work with different images (for beers and chips),
    we have to duplicate some statements. Let''s start with the `.beers` labels:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `elem1 ~ elem2` selector applies to all the `elem2` labels that are siblings
    of the `elem1` label and that follow it (the `elem2` labels don't have to be adjacent,
    though). This way, we can target all the labels that follow a label that is in
    the hover state (when the mouse is over the element) with the selector `.preferences
    label.beers:hover ~ label.beers`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Using the CSS3 `:checked` pseudo-class selector, we can identify the radio button
    that has been checked, and by applying the same trick that we just discussed,
    we can target all the labels that follow a checked radio button by using `.preferences
    input[type=radio][name=beers]:checked ~ label.beers`. By putting together these
    two selectors and a classic `.preferences label.beers:hover` selector, we are
    now able to change the placeholder image reflecting the user interaction with
    the radio buttons. Now let's add a final cool feature. We have used the `counter-increment`
    property to keep track of the number of selected labels, so we can take advantage
    of this counter and display it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s try the result in a browser:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying icons within radio button labels](img/3264OT_01_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have to duplicate the same statements for the `.chips` labels too:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All of the styling we did in this chapter has one big problem; if the browser
    doesn't support CSS3, it successfully hides both radio buttons and text labels
    but fails to add their image replacements, making everything unusable. There are
    a few ways to prevent this. The one introduced here is to use **media queries**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Media queries, which will be covered in detail in a later project, basically
    consist of a statement that describes some conditions required to apply some styles.
    Let''s consider the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this example, the body background is turned into red only if the size of
    the browser window doesn''t exceed `1000px`. Media queries are really useful to
    apply specific styles only to target devices (smartphones, tablets, and so on),
    but they have another interesting property; if a browser supports them, it also
    supports the CSS3 rules we used, so we can place all of the CSS written in this
    and in the previous sections within a media query statement:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this trick, we solved another subtle problem. Trying the project on an
    iPad without this media query statement would have resulted in some problems with
    clicking on the radio buttons. This is because labels do not respond to clicks
    on iOS. By implementing this media query, we force iOS devices to fall back to
    regular radio buttons.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Counting and displaying invalid fields
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we used some properties without explaining them; they
    are `counter-reset` and `counter-increment`. Plus, we used a function-like command
    called `counter()`. In this section, we'll explain these properties by creating
    a mechanism to display the number of invalid fields. A **counter** is basically
    a variable we can name and whose value can be incremented using `counter-increment`.
    Next, this counter can be displayed by using the `counter(variable name)` declaration
    within a `content` property.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a small example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Trying this small bit of code results in a `p` element containing the sentence
    **3 elements**:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Counting and displaying invalid fields](img/3264OT_01_04.1.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: We can combine these powerful properties with the new form pseudo-selector to
    obtain a way to display valid and invalid fields.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the counters
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by creating two counters, `invalid` and `fields`, and resetting
    them at each `fieldset` element because we want to display the invalid fields
    for each `fieldset` element. Then, we increment both counters when we find an
    invalid field and only the `fields` counter when we find a valid field.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `:not` pseudo-selector is pretty straightforward. It subtracts the elements
    matching the selector within the parentheses from the elements matching the leftmost
    selector. If this seems a bit confusing, let''s try to read the last selector:
    match all the `input` elements, whose `type` value is *not* `submit` and *not*
    `radio`, that respond to the `:valid` pseudo-selector.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost there! Now that we have the counters, let''s display them using the
    `footer` element we have:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `:not([fake])` selector is used like the media query shown earlier. We just
    want to ensure that only the browsers that support the `:valid` and `:invalid`
    pseudo-selectors can interpret this selector.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: This last addition has some drawbacks, though; mixing presentation with content
    is generally something to avoid.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Balloon styling
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each browser actually displays form errors in its own way, and we can''t do
    very much to affect this visualization. The only exceptions are WebKit-based browsers,
    which let us change the appearance of such messages. The following code shows
    how an error balloon is constructed in these browsers:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We can access all the elements that compose an error message by using the special
    pseudo-classes listed in the preceding code. So, let's begin!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With `-webkit-transform`, we're applying some transformation to the matched
    elements. In this case, we're moving the arrow, which usually lies on the bottom
    of the balloon, to the left side of it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a glimpse of how our completed project looks:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Balloon styling](img/3264OT_01_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Graceful degradation
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we might expect, this project is not fully supported on all browsers because
    it implements HTML5 and CSS3 features that, of course, aren't included in old
    browsers. Many techniques exist to find a way around this issue; the one we'll
    look at now is called **graceful degradation**. It basically focuses on making
    the core functionalities of the project as widely supported as possible while
    accepting that everything else might be unsupported and thus not displayed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Our project is a good example of graceful degradation: when a browser does
    not support a specific property, its effects are simply ignored without affecting
    the basic functionality of the form.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'To prove this, let''s try the project on IE8, which basically has no CSS3 support:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Graceful degradation](img/3264OT_01_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: To achieve the best possible browser support, we may also want to hide footer
    elements and radio buttons on IE9 because, otherwise, they'll be displayed but
    they won't behave as expected. To do so, we need to add a conditional comment
    in our `index.html` file, just before the end of the `head` section. We'll see
    in the later chapters how conditional comments work, but for now let's say that
    they allow us to specify some markup that needs to be interpreted only by chosen
    browsers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最佳的浏览器支持，我们可能还需要在IE9上隐藏页脚元素和单选按钮，否则它们会被显示，但行为不如预期。为此，我们需要在`index.html`文件的`head`部分结束前添加一个条件注释。我们将在后面的章节中看到条件注释是如何工作的，但现在让我们说它们允许我们指定一些标记，只有选择的浏览器才能解释。
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this first project, we've explored how CSS3 can enhance our forms with useful
    information derived from the markup and the status of the fields. In the next
    chapter, we'll focus our attention on buttons and how we can mimic real-world
    shapes and behavior without using images by taking full advantage of gradients
    and other CSS3 properties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个项目中，我们探讨了CSS3如何通过从标记和字段状态中获取的有用信息来增强我们的表单。在下一章中，我们将把注意力集中在按钮上，探讨如何利用渐变和其他CSS3属性充分模拟真实世界的形状和行为，而不使用图像。
