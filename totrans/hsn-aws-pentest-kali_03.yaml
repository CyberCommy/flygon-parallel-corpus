- en: Setting Up a Kali PentestBox on the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a readily available **Amazon Machine Image** (**AMI**) that runs Kali
    Linux on the Amazon Marketplace. This means that a penetration tester can quickly
    set up a Kali Linux instance on the Amazon Cloud and access it at any time for
    any kind of penetration test. This chapter focuses on creating an Amazon EC2 instance,
    setting it up with a Kali Linux AMI, and configuring remote access to this host
    in a variety of ways. Once set up, a penetration tester can remotely access a
    **Virtual Private Cloud** (**VPC**) belonging to an AWS account and perform pentests
    within that VPC and on any remote hosts using Kali.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to run Kali Linux on the Amazon Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Kali remotely over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Kali remotely through clientless RDP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to use the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux AMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Guacamole ([https://guacamole.apache.org](https://guacamole.apache.org))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH client and a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Kali Linux on AWS EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through the very first steps of setting up a virtual
    penetration testing machine on the cloud, as well as setting up remote access
    to it to perform penetration testing on the go. The penetration testing machine will
    go hand-in-hand with the penetration testing lab that was set up in the [Chapter
    1](9c51c4e0-951d-4b49-95ed-c9220a9d3210.xhtml), *Setting Up a Pentesting Lab on
    AWS*, that allows you to perform penetration testing and exploitation on those
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: The Kali Linux AMI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS provides a fascinating feature that allows for the rapid deployment of **Virtual
    Machines** (**VMs**) on the Amazon Cloud—**Amazon Machine Images** (**AMIs**).
    These act as templates and allow one to quickly set up a new VM on AWS without
    going through the unnecessary hassle of manually configuring hardware and software
    like on traditional VMs. However, the most useful feature here is that AMIs allow
    you to bypass the OS installation process entirely. As a result, the total amount
    of time needed to decide what OS is required and to get a fully functioning VM
    on the cloud is reduced to a few minutes—and a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Kali Linux AMI was added to the AWS store pretty recently, and we shall
    leverage it to quickly set up our Kali VM on the Amazon Cloud. Setting up a Kali
    instance using the ready-made AMI is pretty simple—we start by accessing the Kali
    Linux AMI from the AWS Marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d31c2806-f832-4792-be31-3f5905d33b6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous screenshot shows the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The version of the AMI that we are using (2018.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Typical Total Price for running this in a default instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview and details of the AMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is useful to note that the default recommended instance size for Kali Linux
    is t2.medium, as we can see under pricing information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f43d09cd-a3c9-4b4d-b6e0-42ec917f718b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Further down the page, we can see that the size of the t2.medium instance consists
    of two CPU virtual cores and 4GiB RAM, which is more than enough for our setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9273c83-00cd-475e-a404-701eacc60f0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have confirmed that we're setting up the image according to our requirements,
    we can go ahead and click on the Continue to Subscribe option to proceed with
    our instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Kali Linux instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we confirmed the AMI we are going to use along with
    the specifications of the machine we will be using to launch our Kali machine.
    Once that has been selected it is time to launch our machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to the Launch on EC2 page. This contains some options that need
    to be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The version of the AMI that we will ****use**: It is usually recommended
    to use the latest version of the AMI that is available in the marketplace. Often,
    this isn''t the one that is selected by default for Kali Linux. At the time of
    writing, the latest version is 2018.1, and the build date is February 2018, as
    can be seen here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7bd1533f-db26-48b1-8492-fd3dc3bb0438.png)'
  prefs: []
  type: TYPE_IMG
- en: Since 2019.1 is released now you need to download the latest version of Kali
    linux
  prefs: []
  type: TYPE_NORMAL
- en: '**The region where we will be deploying the instance**: As discussed in the
    [Chapter 1](9c51c4e0-951d-4b49-95ed-c9220a9d3210.xhtml), Setting Up a Pentesting
    Lab on AWS, we need to set the region to the data center that is geographically
    closest to the current location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The EC2 instance size**:This was already verified in the previous step. We
    will be looking at various instance types and sizes in greater depth in later
    sections of this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VPC Settings**:The VPC and subnet settings need to be set to use the same
    VPC that we used to set up the penetration testing lab in [Chapter 1](9c51c4e0-951d-4b49-95ed-c9220a9d3210.xhtml),
    *Setting Up a Pentesting Lab on AWS*. This will put our hacking box on the same
    network as the vulnerable machines that we set up earlier. The setting should
    match whatever was configured in the previous chapter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/09ab7eb9-b05a-456c-8106-4fa2501c2188.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Security group**: Previously, we set up the Security Group in such a way
    that unauthorized outsiders would not have access to the instances. However, in
    this case, we need to allow remote access to our Kali instance. Hence, we need
    to forward the SSH and the Guacamole remote access port to a new Security Group:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a09c1fe1-c7e5-40ec-915f-52b15784e0fb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Key pair**:We can use the same key pair that was created during the setup
    of the lab environment in the [Chapter 1](9c51c4e0-951d-4b49-95ed-c9220a9d3210.xhtml), *Setting
    Up a Pentesting Lab on AWS*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these settings in place, we are good to go and can spin up the instance
    by clicking on Launch with 1-click:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f338529-165a-4eb0-8bc7-c20ad551be69.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS will then launch the Kali machine and assign it a public IP. However, we
    need to be able to access this machine. In the next section, we will see how we
    can use OpenSSH for accessing a Kali Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring OpenSSH for remote SSH access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS already sets a default form of SSH access for their Kali AMI with an `ec2-user`
    account using a public key. However, this isn't convenient for access via a mobile
    device. For users who want to conveniently SSH into their Kali instances from
    mobile applications directly with root privileges, the following section walks
    through the process. It should be noted, however, that using a limited user account
    with PKI authentication is the most secure way to connect over SSH, and using
    a root account with a password is not recommended if securing the instance is
    a priority.
  prefs: []
  type: TYPE_NORMAL
- en: Setting root and user passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first step of configuring root SSH on a Kali Linux instance is to set
    the root password. The root account usually doesn't have a password set for `ec2`
    instances that are using an `ec2-user` account that has `sudo` privileges. However,
    since we are setting up SSH access from mobile SSH applications, this needs to
    be set. It should be noted, however, that this comes with a reduction in the security
    stance of the Kali instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the root password is as simple as running `sudo passwd` on the SSH
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de40240e-d823-46a2-80e3-ac0e2383dc1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the password of the current user can also be changed by running
    `sudo passwd ec2-user` over SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d806ab5-0848-4e40-819b-51612abc565e.png)'
  prefs: []
  type: TYPE_IMG
- en: This will be helpful in SSH-ing as `ec2-user` from an SSH client application
    that doesn't support authentication keys. However, another step remains before
    we can SSH into the Kali instance as root.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling root and password authentication on SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an enhanced security measure, OpenSSH server comes with root login disabled
    by default. Enabling this is a straightforward process and involves editing a
    configuration file, `/etc/ssh/sshd_config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/869ede0f-4bfe-48c6-99c1-0628a7037da2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The critical parts of this are the two entries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PermitRootLogin: This can be set to `yes` if you want to log in as root'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PasswordAuthentication: This needs to be set to `yes` instead of the default
    `no` to log in using passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you are done performing the changes, you will need to restart the ssh
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With that, our Kali Machine on the cloud is up and running and can be accessed
    over SSH using a password. However, SSH only gives you a command line interface.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at how we can set up a remote desktop
    service to get GUI access to our Kali Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Guacamole for remote access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Guacamole is a clientless remote access solution that will allow you
    to access the Kali Linux instance remotely using a browser. This will allow you
    to access the PentestBox on the go even from a mobile device, without having to
    worry about other complications surrounding remote access. The traditional way
    of accessing such servers is over SSH, but this will not be able to provide a
    GUI when accessed from a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening and installing prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up remote access to a VM can be a risky affair, hence it''s recommended
    that we install and set up a firewall and IP blacklisting services to protect
    against brute-forcing attacks and similar attacks on the internet. The services
    we will install are `ufw` and `fail2ban`. They are pretty easy to set up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need to do is run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have installed the `ufw` firewall, we need to allow the two ports that
    we will be using for remote access: `22` for SSH and `55555` for Guacamole. So
    we need to run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that''s done, we need to restart the `ufw` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f01117ce-17cc-48f4-9bbe-5f19ba7a9d01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to install the prerequisites for Apache Guacamole. You can do
    this by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Post-installation, we need to modify the configuration of Apache Tomcat to
    listen on port `55555` (as set in our Security Group) rather than the default
    `8080`. To do this, we need to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this file, the `Connector port` needs to be changed from `8080` to `55555`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45c6d56c-5128-40c3-89a9-a381e9a5cc27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set up the RDP Service on the Kali instance. This is easily
    achieved by installing `xrdp` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to allow all users to access the RDP Service (the X Session).
    This requires the editing of a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this file, edit the value of `allowed_users` to `anybody`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to set the `xrdp` services to start automatically and `enable`
    the services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once this step has been completed, we have to download the source code for Apache
    Guacamole server from [https://guacamole.apche.org/releases/](https://guacamole.apache.org/releases/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep in mind that you need to download the latest `guacamole-server.tar.gz` and `guacamole.war`
    files. At the time of writing, the latest version is `0.9.14`, which we can download
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these have been downloaded, we need to extract the source by executing
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the extracted directory, we have to build and install the package.
    This can be achieved by executing the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once this has been successfully run, Guacamole has been installed. However,
    further configuration needs to be undertaken in order to fully set up remote access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Guacamole for SSH and RDP access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guacamole's default configuration directory is `/etc/guacamole`. It requires
    a file called `guacamole.properties` to be properly created to function. There
    are some other directories that we might want to place within the configuration
    directory, but they won't be needed for the current setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Guacamole properties file should contain information about the address
    of the `guacamole proxy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this, we also need another file called `user-mapping.xml` in
    the same directory, containing a list of usernames and passwords that Guacamole
    will authenticate with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once completed, it is time to deploy the war file that we downloaded earlier.
    We need to move it into the `tomcat8/webapps` folder so that it gets auto-deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we just have to restart both the `guacd` and `tomcat8` services to get
    Apache Guacamole up and running! To do that, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s one last configuration step that is required—copying the authentication
    information into the Guacamole client directory. This is done by executing the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we point our browser to `ipaddr:55555/guacamole`, we will be able to
    access Guacamole! We are greeted with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f16e884d-1970-4e84-a276-f94cf37d8c7f.png)'
  prefs: []
  type: TYPE_IMG
- en: We have to log in with the same credentials that we set up in the `user-mapping.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have successfully logged in, it''s a simple matter of selecting the
    technique through which we want to access the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6040e16-2a6c-44bc-a265-c2bd1f40c3f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have successfully set up your Kali PentestBox on the cloud
    and can access it remotely from anywhere using your browser!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After going through this chapter, you will be able to successfully set up a
    Kali Linux PentestBox on the Amazon Cloud, which will aid you in the exercises
    in the upcoming chapters. We learned how to set up remote access to the cloud
    instance via SSH, RDP, and Apache Guacamole. This chapter also focused on certain
    information about the hardening of a cloud instance that will help you to better
    understand several advanced security concepts related to the EC2 service further
    in the book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be going through the steps to perform automated
    and manual pentests of our pentesting lab (which we set up in the first chapter)
    using the PentestBox that we set up in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the advantage of using Guacamole for remote access rather than a service
    such as `tightvnc`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the current setup, anyone who knows the IP address can easily access the
    Guacamole interface. Is there any way to protect the server from such access?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `-Wno-error` flag that was added during the compilation
    process of Guacamole?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does the default `sshd_config` set the PermitRootLogin value to `no`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does AWS disable password-based login?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use SSH-tunneling to improve the security of this setup?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH Tunneling: [https://www.ssh.com/ssh/tunneling/](https://www.ssh.com/ssh/tunneling/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PKI in SSH: [https://www.ssh.com/pki/](https://www.ssh.com/pki/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxying Guacamole: [https://guacamole.apache.org/doc/gug/proxying-guacamole.html ](https://guacamole.apache.org/doc/gug/proxying-guacamole.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
