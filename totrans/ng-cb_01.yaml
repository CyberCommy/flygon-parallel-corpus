- en: '*Chapter 1*: Winning Components Communication'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll master component communication in Angular. You'll learn
    different techniques to establish communication between components and will learn
    which technique is suitable in which situation. You'll also learn how to create
    a dynamic Angular component in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the recipes we''re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Components communication using component `@Input(s)` and `@Output(s)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components communication using services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using setters for intercepting input property changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ngOnChanges` to intercept input property changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent template via template variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent component class using `ViewChild`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first dynamic component in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the recipes in this chapter, make sure you have **Git** and **Node.js**
    installed on your machine. You also need to have the `@angular/cli` package installed,
    which you can do with `npm install -g @angular/cli` from your terminal. The code
    for this chapter can be found at [https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter01](https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: Components communication using component @Input(s) and @Output(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll start with an app with a parent component and two child components. You'll
    then use Angular `@Input` and `@Ouput` decorators to establish communication between
    them using attributes and `EventEmitter`(s).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter01/start_here/cc-inputs-outputs`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
    Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The cc-inputs-outputs app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.01_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – The cc-inputs-outputs app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have an app with `AppComponent`, `NotificationsButtonComponent`,
    and `NotificationsManagerComponent`. While `AppComponent` is the parent of the
    other two components mentioned, there is absolutely no component communication
    between them to sync the notification count value. Let''s establish the appropriate
    communication between them using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll move the `notificationsCount` variable from `NotificationsManagerComponent`
    and host it in `AppComponent`. To do so, just create a `notificationsCount` property
    in `app.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, convert the `notificationsCount` property in `notifications-manager.component.ts`
    to `@Input()`, rename it to `count`, and replace its usages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `notifications-manager.component.html` to use `count` instead of `notificationsCount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, pass the `notificationsCount` property from `app.component.html` to the
    `<app-notifications-manager>` element as an input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You could now test whether the value is being correctly passed from `app.component.html`
    to `app-notifications-manager` by assigning the value of `notificationsCount`
    in `app.component.ts` as `10`. You''ll see that in `NotificationsManagerComponent`,
    the initial value shown will be `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create an `@Input()` in `notifications-button.component.`ts named `count`
    as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass `notificationsCount` to `<app-notifications-button>` as well from `app.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `count` input in `notifications-button.component.html` with the notification
    bell icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You should now see the value `10` for the notification bell icon count as well.
  prefs: []
  type: TYPE_NORMAL
- en: '*Right now, if you change the count by adding/removing notifications from*
    `NotificationsManagerComponent`, *the count on the notification bell icon won''t
    change.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To communicate the change from `NotificationsManagerComponent` to `NotificationsButtonComponent`,
    we''ll use Angular `@Output`(s) now. Use `@Ouput` and `@EventEmitter` from `''@angular/core''`
    inside `notifications-manager.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll listen in `app.component.html` for the previously emitted event
    from `NotificationsManagerComponent` and update the `notificationsCount` property
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we''ve listened to the `countChanged` event previously and called the
    `updateNotificationsCount` method, we need to create this method in `app.component.ts`
    and update the value of the `notificationsCount` property accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to communicate between components using `@Input`(s) and `@Output`(s),
    the data flow will always go **from** the *child components* **to** the *parent
    component*, which can provide the new (updated) value *as input* back to the required
    child components. So, `NotificationsManagerComponent` emits the `countChanged`
    event. `AppComponent` (being the parent component) listens for the event and updates
    the value of `notificationsCount`, which automatically updates the `count` property
    in `NotificationsButtonComponent` because `notificationsCount` is being passed
    as the `@Input()` count to `NotificationsButtonComponent`. *Figure 1.2* shows
    the entire process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – How component communication works with inputs and outputs'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.02_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – How component communication works with inputs and outputs
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do Angular components communicate? [https://www.thirdrocktechkno.com/blog/how-angular-components-communicate](https://www.thirdrocktechkno.com/blog/how-angular-components-communicate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Component Communication in Angular* by Dhananjay Kumar: [https://www.youtube.com/watch?v=I8Z8g9APaDY](https://www.youtube.com/watch?v=I8Z8g9APaDY)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components communication using services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll start with an app with a parent component and a child
    component. You'll then use an Angular service to establish communication between
    them. We're going to use `BehaviorSubject` and Observable streams to communicate
    between components and the service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter01/start_here/cc-services`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see the app as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The cc-services app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.03_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The cc-services app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the previous recipe, we have an app with `AppComponent`, `NotificationsButtonComponent`,
    and `NotificationsManagerComponent`. `AppComponent` is the parent of the other
    two components mentioned previously, and we need to establish the appropriate
    communication between them using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder inside the `chapter01/start_here/cc-services/src/app` project
    named `services`. This is where our new service will reside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the terminal, navigate into the project, that is, inside `chapter01/start_here/cc-services`,
    and create a new service called `NotificationService`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `BehaviorSubject` named `count` inside `notifications.service.ts`
    and initialize it with `0`, as a `BehaviorSubject` requires an initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `BehaviorSubject` is a `private` property and we'll only update
    it from within the service using a `public` method later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create an `Observable` named `count$` using the `.asObservable()` method
    on the `count` `BehaviorSubject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert the `notificationsCount` property in `notifications-manager.component.ts`
    to an Observable named `notificationsCount$`. Inject `NotificationsService` in
    the component and assign the service''s `count$` Observable to the component''s
    `notificationsCount$` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Comment out the code that updates the notification count for now; we''ll come
    back to it later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `notificationsCount$` Observable in `notifications-manager.component.html`
    with the `async` pipe to show its value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, similarly inject `NotificationsService` in `notifications-button.component.ts`,
    create an Observable named `notificationsCount$` inside `NotificationsButtonComponent`,
    and assign the service''s `count$` Observable to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `notificationsCount$` Observable in `notifications-button.component.html`
    with the `async` pipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you refresh the app now, you should be able to see the value `0` for both
    the notifications manager component and the notifications button component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the initial value for the `count` `BehaviorSubject` to `10` and see
    whether that reflects in both components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a method named `setCount` in `notifications.service.ts` so we are
    able to update the value of the `count` `BehaviorSubject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `setCount` method in place, let''s use it inside `notifications-manager.component.ts`
    to update its value based on the button clicks. In order to do so, we need to
    get the latest value of the `notificationsCount$` Observable and then perform
    some action. We''ll first create a `getCountValue` method inside `NotificationsManagerComponent`
    as follows, and will use `subscribe` with the `first` operator on the `notificationsCount$`
    Observable to get its latest value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll use the `getCountValue` method within our `addNotification`, `removeNotification`,
    and `resetCount` methods. We''ll have to pass the callback function from these
    methods to the `getCountValue` method. Let''s start with the `addNotification`
    method first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, you should already see both components reflecting the
    updated values correctly whenever we click the **Add Notification** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the same logic for `removeNotification` and `resetCount` now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BehaviorSubject` is a special type of `Observable` that requires an initial
    value and can be used by many subscribers. In this recipe, we create a `BehaviorSubject`
    and then create an `Observable` using the `.asObservable()` method on `BehaviorSubject`.
    Although we could''ve just used `BehaviorSubject`, using the `.asObservable()`
    approach is recommended by the community.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have created the Observable named `count$` in `NotificationsService`,
    we inject `NotificationsService` in our components and assign the `count$` Observable
    to a local property of the components. Then, we subscribe to this local property
    (which is an Observable) directly in `NotificationsButtonComponent`'s template
    (`html`) and in `NotificationsManagerComponent`'s template using the `async` pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Then, whenever we need to update the value of the `count$` Observable, we use
    the `setCount` method of `NotificationsService` to update the actual `BehaviorSubject`'s
    value by using the `.next()` method on it. This automatically emits this new value
    via the `count$` Observable and updates the view with the new value in both of
    the components.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Subjects from RxJS''s official documentation: [https://www.learnrxjs.io/learn-rxjs/subjects](https://www.learnrxjs.io/learn-rxjs/subjects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BehaviorSubject` versus `Observable` on Stack Overflow: [https://stackoverflow.com/a/40231605](https://stackoverflow.com/a/40231605)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using setters for intercepting input property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn about how to intercept changes in an `@Input`
    passed from a parent component and to perform some action on this event. We'll
    intercept the `vName` input passed from the `VersionControlComponent` parent component
    to the `VcLogsComponent` child component. We'll use setters to generate a log
    whenever the value of `vName` changes and will show those logs in the child component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter01.start_here/cc-setters`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, run `ng serve -o`. This should open the app in a new browser tab
    and you should see the app as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The cc-setters app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.04_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – The cc-setters app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll first create a logs array in `VcLogsComponent` as follows to store all
    the logs that we''ll display later using our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the HTML for where we''ll show the logs. Let''s add the logs
    container and log items using following code to `vc-logs.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll add a bit of styling for the logs container and log items to be
    shown. After the changes, the view should look as shown in *Figure 1.5*. Update
    the `vc-logs.component.scss` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the app with logs container styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The cc-setters app with logs container styles'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.05_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – The cc-setters app with logs container styles
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll convert `@Input()` in `vc-logs.component.ts` to use a getter and
    setter so we can intercept the input changes. For that, we''ll also create an
    internal property named `_vName`. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With the changes in *step 4*, the app works exactly like before, that is, perfectly.
    Now, let''s modify the setter to create those logs. For the initial value, we''ll
    have a log saying `''initial version is x.x.x''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as the last step, for every time we change the version name, we need to
    show a different message saying `''version changed to x.x.x''`. *Figure 1.6* shows
    the final output. For the required changes, we''ll write some further code in
    the `vName` setter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the final output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Final output using the setter'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.06_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Final output using the setter
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getters and setters are components of a built-in feature of JavaScript. Many
    developers have used them in their projects while using vanilla JavaScript, or
    even TypeScript. Fortunately, Angular's `@Input()`can also use getters and setters
    since they're basically a property of the provided class.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we use a getter and, more specifically, a setter for our input
    so whenever the input changes, we use the setter method to do additional tasks.
    Moreover, we use the setter of the same input in our HTML so we directly show
    the value in the view when updated.
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to use a private variable/property with getters and
    setters to have a separation of concerns on what the component receives as input
    and what it stores in itself separately.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter](https://angular.io/guide/component-interaction#intercept-input-property-changes-with-a-setter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.jackfranklin.co.uk/blog/es5-getters-setters](https://www.jackfranklin.co.uk/blog/es5-getters-setters)
    by Jack Franklin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ngOnChanges to intercept input property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use `ngOnChanges` to intercept changes using
    the `SimpleChanges` API. We'll listen to a `vName` input passed from the `VersionControlComponent`
    parent component to the `VcLogsComponent` child component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter01/start_here/cc-ng-on-changes`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, run `ng serve -o`. This should open the app in a new browser tab
    and you should see the app as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The cc-ng-on-changes app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.07_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – The cc-ng-on-changes app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll first create a logs array in `VcLogsComponent` as follows to store all
    the logs that we''ll display later using our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the HTML for where we''ll show the logs. Let''s add the logs
    container and log items using the following code to `vc-logs.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll add a bit of styling for the logs container and log items to be
    shown, in `vc-logs.component.scss`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 1.8 – The cc-ng-on-changes app with logs container styles'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.08_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – The cc-ng-on-changes app with logs container styles
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s implement `ngOnChanges` using simple changes in `VcLogsComponent`
    as follows in the `vc-logs.component.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We now can add a log for the initial value of the `vName` input saying `''initial
    version is x.x.x''`. We do this by checking whether it is the initial value using
    the `.isFirstChange()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s handle the case where we update the version after the initial value
    was assigned. For that, we''ll add another log that says `''version changed to
    x.x.x''` using an `else` condition, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ngOnChanges` is one of the many life cycle hooks Angular provides out of the
    box. It triggers even before the `ngOnInit` hook. So, you get the *initial values*
    in the first call and the *updated values* later on. Whenever any of the inputs
    change, the `ngOnChanges` callback is triggered with `SimpleChanges` and you can
    get the previous value, the current value, and a Boolean representing whether
    this is the first change to the input (that is, the initial value). When we update
    the value of the `vName` input in the parent, `ngOnChanges` gets called with the
    updated value. Then, based on the situation, we add an appropriate log into our
    `logs` array and display it on the UI.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular life cycle hooks: [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using change detection hooks with `ngOnChanges`: [https://angular.io/guide/lifecycle-hooks#using-change-detection-hooks](https://angular.io/guide/lifecycle-hooks#using-change-detection-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SimpleChanges` API reference: [https://angular.io/api/core/SimpleChanges](https://angular.io/api/core/SimpleChanges)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in the parent template via template variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use **Angular template reference variables**
    to access a child component into a parent component's template. You'll start with
    an app having `AppComponent` as the parent component and `GalleryComponent` as
    the child component. You'll then create a template variable for the child component
    in the parent's template to access it and perform some actions in the component
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter01/start_here/cc-template-vars`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – The cc-template-vars app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.09_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – The cc-template-vars app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Click the buttons at the top to see the respective console logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with creating a template variable named `#gallery`, on the `<app-gallery>`
    component in the `app.component.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we modify the `addNewPicture()` and `removeFirstPicture()` methods in
    `app.component.ts` to accept a parameter named `gallery`, so that they can accept
    the template variable from `app.component.html` when we click the buttons. The
    code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s pass the `#gallery` template variable from `app.component.html`
    to the click handlers for both buttons as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now implement the code for adding a new picture. For this, we''ll access
    `GalleryComponent`''s `generateImage()` method and add a new item to the `pictures`
    array as the first element. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For removing the first item from the array, we''ll use the array''s `shift`
    method on the `pictures` array in the `GalleryComponent` class to remove the first
    item as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A template reference variable is often a reference to a DOM element within
    a template. It can also refer to a directive (which contains a component), an
    element, `TemplateRef`, or a web component (source: [https://angular.io/guide/template-reference-variables](https://angular.io/guide/template-reference-variables)).'
  prefs: []
  type: TYPE_NORMAL
- en: In essence, we can refer to our `<app-gallery>` component, which behind the
    scenes is a directive in Angular. Once we have the variable in our template, we
    pass the reference to the functions in our component as function arguments. Then,
    we can access the properties and the methods of `GalleryComponent` from there.
    You can see that we are able to add and remove items from the `pictures` array
    that resides in `GalleryComponent` directly from `AppComponent`, which is the
    parent component in this entire flow.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular template variables: [https://angular.io/guide/template-reference-variables](https://angular.io/guide/template-reference-variables)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular template statements: [https://angular.io/guide/template-statements](https://angular.io/guide/template-statements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a child component in a parent component class using ViewChild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use the `ViewChild` decorator to access
    a child component in a parent component's class. You'll start with an app that
    has `AppComponent` as the parent component and `GalleryComponent` as the child
    component. You'll then create a `ViewChild` for the child component in the parent's
    component class to access it and perform some actions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter01/start_here/cc-view-child`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
    Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the app in a new browser tab and you should see something like
    the following:![Figure 1.10 – The cc-view-child app running on http://localhost:4200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_1.10_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – The cc-view-child app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Click the buttons at the top to see the respective console logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with importing `GalleryComponent` into our `app.component.ts`
    file so we can create a `ViewChild` for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll create the `ViewChild` for `GalleryComponent` using the `ViewChild()`
    decorator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll implement the logic for adding a new picture. For that, in the
    `addNewPicture` method inside `AppComponent`, we''ll use the `gallery` prop we
    created in *step 2*. This is to access the `pictures` array from the child component.
    Once done, we will add a new picture to the top of that array using the `generateImage`
    method of `GalleryComponent`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To handle removing pictures, we''ll add the logic to the `removeFirstPicture`
    method inside the `AppComponent` class. We''ll do this using the view child as
    well. We''ll simply use the `Array.prototype.shift` method on the `pictures` array
    to remove the first element, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ViewChild()` is basically a decorator that the `@angular/core` package provides
    out of the box. It configures a **view query** for the Angular change detector.
    The change detector tries to find the first element matching the query and assigns
    it to the property associated with the `ViewChild()` decorator. In our recipe,
    we create a view child by providing `GalleryComponent` as the query parameter,
    that is, `ViewChild(GalleryComponent)`. This allows the Angular change detector
    to find the `<app-gallery>` element inside the `app.component.html` template,
    and then it assigns it to the `gallery` property within the `AppComponent` class.
    It is important to define the gallery property''s type as `GalleryComponent` so
    we can easily use that in the component later with all the TypeScript magic.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The view query is executed after the `ngOnInit` life cycle hook and before the
    `ngAfterViewInit` hook.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular `ViewChild`: [https://angular.io/api/core/ViewChild](https://angular.io/api/core/ViewChild)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Array''s shift method: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first dynamic component in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to create **dynamic components** in Angular,
    which are created dynamically on-demand based on different conditions. Why? Because
    you might have several complex conditions and you want to load a particular component
    based on that, instead of just putting every possible component in your template.
    We'll be using the `ComponentFactoryResolver` service, the `ViewChild()` decorator,
    and the `ViewContainerRef` service to achieve the dynamic loading. I'm excited,
    and so are you!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter01/start_here/ng-dynamic-components`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – The ng-dynamic-components app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.11_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – The ng-dynamic-components app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Click the buttons at the top to see the respective console logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s remove the elements with the `[ngSwitch]` and `*ngSwitchCase`
    directives from our `social-card.component.html` file and replace them with a
    simple `div` with a template variable named `#vrf`. We''ll use this `div` as a
    container. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll add the `ComponentFactoryResolver` service to `social-card.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a `ViewChild` for `ViewContainerRef` in the same file, so that
    we can refer to the `#vrf` div from the template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the components dynamically, we need to listen to the changes to the
    type input. So, whenever it changes, we load the appropriate component dynamically.
    For this, we''ll implement the `ngOnChanges` hook in `SocialCardComponent` and
    log the changes on the console for now. Once implemented, you should see the logs
    on the console upon tapping the Facebook or Twitter buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll create a method in `SocialCardComponent` called `loadDynamicComponent`
    that accepts the type of social card, that is, `SocialCardType`, and decides which
    component to load dynamically. We''ll also create a variable named `component`
    inside the method to select which component is to be loaded. This should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we know which component is to be dynamically loaded, let''s use `componentFactoryResolver`
    to resolve the component and then to create the component inside `ViewContainerRef`
    (`vrf`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding change, we're almost there. When you tap either the Facebook
    or Twitter button for the first time, you should see the appropriate component
    being dynamically created.
  prefs: []
  type: TYPE_NORMAL
- en: But… if you tap either of those buttons again, you'll see the component being
    added to the view as an additional element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon inspecting, it might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Preview of multiple elements being added to ViewContainerRef'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.12_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Preview of multiple elements being added to ViewContainerRef
  prefs: []
  type: TYPE_NORMAL
- en: 'Read in the *How it works…* section why this happens. But to fix it, we just
    perform a `clear()` on `ViewContainerRef` before we create the dynamic component,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ComponentFactoryResolver` is an Angular service that allows you to resolve
    components dynamically at runtime. In our recipe, we use the `resolveComponentFactory`
    method, which accepts a **Component** and returns a `ComponentFactory`. We can
    always use the `create` method of `ComponentFactory` to create instances of the
    component. But in this recipe, we''re using `ViewContainerRef`''s `createComponent`
    method, which accepts `ComponentFactory` as an input. It then uses `ComponentFactory`
    behind the scenes to generate the component and then to add it to the attached
    `ViewContainerRef`. Every time you create a component and attach it to `ViewContainerRef`,
    it''ll add a new component to the existing list of elements. For our recipe, we
    only needed to show one component at a time, that is, either `FBCardComponent`
    or `TwitterCardComponent`. So that only a single element exists in `ViewContainerRef`,
    we used the `clear()` method on it before adding an element.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `resolveComponentFactory` method: [https://angular.io/api/core/ComponentFactoryResolver#resolvecomponentfactory](https://angular.io/api/core/ComponentFactoryResolver#resolvecomponentfactory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular''s documentation on the dynamic component loader: [https://angular.io/guide/dynamic-component-loader](https://angular.io/guide/dynamic-component-loader)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewContainerRef` docs: [https://angular.io/api/core/ViewContainerRef](https://angular.io/api/core/ViewContainerRef)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Loading Components Dynamically in Angular 9 with IVY: [https://labs.thisdot.co/blog/loading-components-dynamically-in-angular-9-with-ivy](https://labs.thisdot.co/blog/loading-components-dynamically-in-angular-9-with-ivy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
