- en: Gaining Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will demonstrate several use cases for Kali Linux tools such as
    Social Engineering Toolkit and Metasploit to exploit Windows vulnerabilities.
    You will also learn to use the exploit databases provided with Kali Linux, and
    others. You will learn to use tools to exploit several common Windows vulnerabilities,
    and guidelines to create and implement new exploits for upcoming Windows vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Pwnage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting Windows systems with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using advanced footprinting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pwnage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's where the fun stuff begins. **Pwnage**! For those not in the know. **Pwn**
    is hacker speak for **own**. If you have been pwned, your systems have been **owned**.
    In other words, I own your system now I am in full control of it. Exploitation
    is the process of owning or compromising the machine. So far, we have gathered
    information on our target by gathering public information on the target and scanned
    the target network for vulnerabilities. We are now ready for the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Black Hats will pick the busiest times to hit your network and do it slowly
    and quietly as possible. They will try to stay under the noise of normal operations.
    Yes, there are more eyes on the network at that time, but as a smart cracker knows,
    if you are slow and quiet, a lot of traffic is a good cover.
  prefs: []
  type: TYPE_NORMAL
- en: If you're the security operations guy and you're testing your own network, this
    is not a good idea. Test during your network during off-hours is best when the
    CEO is asleep. If any accidents happen during the test, things can be fixed and
    working before the next day, when the CEO is awake. Exploitation doesn't normally
    kill a system beyond repair during testing, but some exploits will sometimes hang
    a service, or completely hang the system to the point where it needs a reboot.
    The entire purpose of some exploits is to perform **Denial of Service** (**DoS**)
    to a service, or a system. Bo doesn't see these as true exploits. Yes, you have
    attacked the system, and taken it offline; but you haven't penetrated the machine.
    You have made a successful attack but you don't pwn it. The real bad guys don't
    use DoS attacks. They want to get in, and steal or copy data from all over your
    network. Services going down draws the attention of IT. Not a good thing, if you
    are trying to break in. DoS attacks are script kiddie stuff; if this is all you
    know, don't call yourself a hacker.
  prefs: []
  type: TYPE_NORMAL
- en: DoS tools are considered exploits also because they work on the system in the
    same method. A DoS hangs a system. An exploit to gain access often hangs a system
    long enough for you to inject some type of code to gain access. Basically, you
    make the machine go stupid for long enough to establish a connection. When your
    exploit tool fails, it may just look like a DoS attack. If you have a choice,
    it is better to have the failed exploit look like a temporary denial of service,
    which can be misinterpreted as an innocent NIC failure at an origin host, than
    as a cracker testing exploit code on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hacker Tip**:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you are testing, always have someone or some way to reboot a service
    of a system when you are testing them. Always have contact information for people
    to call *when things go wrong*, before you start testing. Although you may try
    to be quiet, and not knock anything off-line, have your *Plan B* in place. Also,
    always have your *Get out of Jail* card before testing!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the Metasploit framework to exploit Windows operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced footprinting goes beyond mere vulnerability scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit a segmented network using the pivot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting Windows systems with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Fear not the command line.."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Bo Weaver'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Metasploit framework is the ultimate toolkit. There was a time when building
    a pen-testing machine would take days. Every individual exploit tool would have
    to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Tracked down and researched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloaded (sometimes over dial-up internet connection)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiled from source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tested on your cracking platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, from the great people at Rapid7 comes the Metasploit framework. Metasploit
    brings just about every tool you'll ever need as a plugin or function within the
    framework. It doesn't matter what OS or even what kind of device you discover
    on the network you are testing, Metasploit is likely will have a module to exploit
    it. Bo does 90% of his work with Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit comes in two versions—the Community version and the Professional
    version. At the command line they are both the same. The major thing you get with
    the Professional version is a nice web interface and reporting tools that will
    build reports for you from that interface. You also get some good tools for testing
    large networks that aren't available from the command line. One feature is that
    you can pick a machine or several machines from the imported vulnerability scan
    and the Pro version will automatically pick out modules and run these against
    the target machines. If you working on large networks, or doing a lot of testing,
    get the Professional version. It is well worth the money, and you can easily use
    it on your Kali attack platform.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, we will be using the Community version that comes with Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Warning! If you do decide to buy the Professional version, do not uninstall
    the Community version of Metasploit. This may break Kali updates. When you install
    the Pro version, it will install in its own directory. The Pro version will need
    some of the Community libraries in order to run.
  prefs: []
  type: TYPE_NORMAL
- en: When using Metasploit at the command line, the *Tab *key will do a lot of auto-complete
    for you. For `show options`, type `sh<tab> o<tab>`. You will see this will auto-complete
    the commands. This works throughout Metsploit.
  prefs: []
  type: TYPE_NORMAL
- en: Also to repeat commands, the arrow up key will take you to previous commands.
    This is really useful. For example, `set RHOST 192.168.202.3` when changing modules
    and attacking the same machine, arrowing up to the previous commands does save
    time.
  prefs: []
  type: TYPE_NORMAL
- en: OK, let's fire up Metasploit. First, we need to turn on the Metasploit services
    in the Menu bar. The following screenshot shows an LxDE desktop menu. Go to **Exploitation
    Tools** |** metasploit framework****:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdc352e4-49b1-4007-b143-aea5c72d8c69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A Terminal window will open and the services will start up. The next screenshot
    shows what the Terminal will show you as it starts up. Metasploit uses the PostgreSQL
    database server. It can take several minutes for the services to start on the
    first run of the service. In the following screenshot, we see the start up skipping
    initialization. Metasploit is already set up on this machine. You will see this
    after the first time it is set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84deaf5c-a145-498e-8321-de1bdaef7885.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yes Hackers Love Shells!**'
  prefs: []
  type: TYPE_NORMAL
- en: Once the services have started, type `msfconsole` to start the Metasploit console.
    When we type `workspace,` we can see the workspaces. We will set up a new workspace
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hacker tip**:'
  prefs: []
  type: TYPE_NORMAL
- en: The first time you start the Metasploit console, it will create the database,
    so let it take its time. The next time you use it, it will start faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a list of the console commands, type `help` at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To get an individual command help, type `help <command>`, as seen in the following
    screenshot. We have two examples showing the `use` and `hosts` command help. We
    have a listing showing its usage and explanation of any flags that work with the
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6263e6a-0bb2-42e4-b297-0f11c0467696.png)'
  prefs: []
  type: TYPE_IMG
- en: First, we need to set up a workspace. Workspaces are a big help in keeping your
    testing in order. The workspaces hold all your collected data of the test including
    any login credentials that are collected and any system data collected during
    an exploit. It's best to keep your testing data separate so you can compare the
    results of a previous test later. We're going to set up a project called `TestCompany-int-20180830`.
    This is a way to name projects, with `<client-name>-[ int (internal) | ext (external)
    ]-<start-date (unix-style)>`. This helps you, 6 months down the road, to remember
    which test is what.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new project, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By typing `workspace`, we see the list of the workspaces in the database. When
    you run the command, you will see an asterisk by the `TestCompany-int-20180830`
    workspace. This shows that when you created the workspace, you also entered it.
    The asterisk denotes the active workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter the workspace, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b087d0b8-a037-4b4b-9a21-85eacf724f88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can pull data from a scan into the workspace using the `db_import` command
    from an XML file generated by the scanning application. All scanning applications
    will export their data to XML and Metasploit will automatically import the data
    from the major scanning applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7395ccbb-6e48-4cf7-ae3f-79b7a5161ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a list of the supported scan types that will automatically import into
    Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: Acunetix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amap Log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amap Log -m
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appscan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Session XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Issue XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundstone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FusionVM XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP Address List
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP360 ASPL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP360 XML v3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libpcap Packet Capture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Masscan XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit PWDump Export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit Zip Export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Baseline Security Analyzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NeXpose Simple XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NeXpose XML Report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus NBE Report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus XML (v1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus XML (v2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetSparker XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikto XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVAS Report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVAS XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outpost24 XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qualys Asset XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qualys Scan XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retina XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spiceworks CSV Export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wapiti XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also import hosts, services, and network information using Nmap and
    directly import Nmap's ouput into Metasploit using the MSFconsole `db_nmap` command.
    This command works with all the normal `nmap` command line flags. `db_` tells
    Metasploit to import the data. Running just `nmap` will run the scan but no data
    will be directly imported into Metasploit. You will just see the output of the
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to directly import an Nmap scan, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`-A` tells `nmap` to run all tests. `-sV` tells Nmap to record the versioning
    of any running services. `-O` tells Nmap to record the operating system of any
    running hosts. We will see the output of the running scan but this data is also
    collected to the database. We can then also see the results after importing by
    running the `hosts` and `services` commands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the results of running these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With the `hosts` command, we get a list of all active IP addresses, any collected
    machine names, and the operating system of the machine. By running the services
    command, we get a list of all running services on the network and their related
    IP address. You can change the table listings from the command by using the `-c` flag.
    The help for help on this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8675d5ad-0041-4adf-a65a-a44b80ec01b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Using advanced Footprinting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability scans only provide some information. When actually attacking the
    machine, you want to do some deep level probes to check for helpful information
    leaks. From the scans, we can see a Windows Domain Controller and a Windows File
    Server, both running Windows 2008 Server. Both have SMB/NetBIOS services running.
    This looks like the most likely path of attack. SMB/NetBIOS services have known
    weaknesses. So, let's look closer at these services.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get fully into footprinting, a note about notes. Especially when getting
    into manual probes, remember to keep notes on your outputs and your findings.
    Copy/paste is your best friend. Vulnerability scans always produce nice reports,
    with the data all compiled in one place. Manually probing doesn't, so it's up
    to you and you will gather a lot of data you'll want later. Use KeepNote, which
    we visited first in [Chapter 1](b18fe074-058f-410f-86de-77499a727708.xhtml), *Choosing
    Your Distro*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is Bo''s normal layout for testing. The best thing about KeepNote
    is that the framework is very open and can be set up and used as you like. This
    setup uses the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A folder for the client company in which it is found
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A page for general project notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A folder for targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual pages for each system being tested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KeepNote even comes with a nice **Export to HTML** tool where you can export
    your notes and they can be read by others without them having KeepNote.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e59aa05-5263-48b7-a2e3-441fb02a59a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let''s use `nbtscan` to get a quick look at the domain name or workgroup
    name and other basic NetBIOS data we''ll need. So let''s open a new Terminal window
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-v` flag is for verbose mode and will print out all the gathered information.
    The `-s :` flag will separate the data with a colon tabbed format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/550eb36b-0503-433e-9602-d681dc49a506.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the domain name is `LAB1` and all machines are members of that
    domain. We will need this information later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the MSFconsole window, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a listing of all the modules related the SMB service. This is a listing
    of scanning, probes, exploits, and post-exploit modules. First, we are going to
    check for exposed shares and check that the guest account has any rights on the
    machine. We pick `auxiliary/scanner/smb/smb_enumshares`. You can select the text
    and copy it by hitting *Ctrl* + *Shift* + *C* and you can paste using *Ctrl* +
    *Shift* +*V*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfff891e-5022-47e6-ada3-3ee930c0b7de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the module, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will put you into the module. The way that we use this module is the normal
    way of using all of the modules. The configurations for the different modules
    may change the operation of getting into a module but the configurations are the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the reverse of the way we got into the module with the `use` command, the
    `use` command is used to open any module. To back out of a module, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will take you back to your MSF prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this command, we can see information and help information about the module
    without actually entering the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the module, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will show you the usable parameters for the module. With this module, we
    will need to set the hosts to probe the domain name and the user account. By running
    this module with the `SMBUser` account as blank, you can check to see if the `Everyone` group
    has any permissions. Setting it to `Guest` will check that the guest account is
    enabled and will also check the `Everyone` group.
  prefs: []
  type: TYPE_NORMAL
- en: Notice we have a parameter called `RHOSTS`. This is the parameter to set the
    host you are going to probe. This is a scanner module so the parameter is plural
    and will accept a network range or a single host.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set the configuration by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `show options` will pull up the configuration again, so you can check it
    before running the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edb766b0-e757-429f-8369-1bb96a0b3148.png)'
  prefs: []
  type: TYPE_IMG
- en: Interpreting the scan and building on the result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the results of the scanner run by typing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the scan failed but did give us valuable information. First,
    by the scan failing, we now know that there are no shares open to the Everyone
    group. We can tell by the response that the service is active but refusing to
    allow a connection. Second, we can see that, in fact, the guest account is disabled.
    One could say this has led nowhere but from this we have determined the service
    is active and accepting connections from our IP address. This is important information
    for our next move:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0693af2-5e77-42c9-9453-1e8a13155802.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The SMB service uses RPC pipes to transfer information and the RPC service
    is known for leaking system information sometimes, so let''s look at what we got.
    To do this, we will use the DCERPC Pipe Auditor module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, we see the module configuration. We can use the arrow
    keys to arrow up to the configurations from the earlier module and set the `SMBDomain`
    and `RHOSTS` settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/08b7b5a8-894b-4177-b3f9-00d41785fd22.png)'
  prefs: []
  type: TYPE_IMG
- en: It seems our SMB service is well locked down. We'll see about that in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Looking over the earlier scans made, we can tell the machine hasn't been patched
    in a while. Also from our network footprinting, we know that this is a Windows
    2008 server so this rules out using exploits earlier than 2008\. We can also tell
    from our probes that there are weak links in the configuration of the server.
    We need an exploit that will work around these roadblocks.
  prefs: []
  type: TYPE_NORMAL
- en: Picking the right exploit is a matter of experience and trial and error. Not
    all work, and some take more than one try to exploit a system. Some work sometimes
    and then fail on the next try. Don't give up if at first you don't succeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we have picked `auxiliary/scanner/smb/smb_ms17_010`.
    This will check for systems vulnerable to the leaked exploits from the NSA''s
    Equation Group by the Shadow Brokers. These exploits are EnernalBlue, EternalRomance,
    EternalChampion, and EternalSynergy. These exploits are also the basis of the
    widely known ransomware viruses, Wanacry and Petya, which reeked havoc on many
    a network across the internet. These exploits were the attack vector to gain access,
    upload, and run the payload, which encrypted the drives of the infected machine.
    Later, we will use these exploits to accomplish the same task except, instead
    of damaging the data, we will loot the system of system information and user credentials.
    So, let''s scan and see if we have any vulnerable hosts on our network. To use
    this scanning tool, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will put you into the module. To see the options needed, type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then see the options, as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to set some options to run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then set the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When we look at the results, it seems we have quite a few vulnerable hosts
    to choose from, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fee135af-1e7d-4069-bc71-2aeaa6fc2fe9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lots of low hanging fruit. Let''s pick some. By running a search for `ms10_010`,
    we will find the exploits related to this vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see the following exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/510f8e16-7530-4785-bc90-26b36b9262d7.png)'
  prefs: []
  type: TYPE_IMG
- en: We have three exploits from the same framework. The `ms17_010_eternalblue` exploit
    works best on 64-bit systems. Actually, if you type show payloads, you will see
    that only x64 payloads are shown. I have used x32-bit payloads and got this to
    run against 32-bit systems but this can hang a 32-bit system and cause it to either
    Blue Screen or reboot.
  prefs: []
  type: TYPE_NORMAL
- en: The `ms17_010_psexec` exploit works best with the 32-bit systems. The `ms17_010_eternalblue_win8`
    exploit works best on Win8 and Win10 systems. This exploit will also bypass the
    ASLR protection on these systems.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that these exploits don't work well on a domain controller. This
    is most likely due to the fact that a domain controller expects Active Directory
    login credentials and fails to allow a connection to the SMB service. It's best
    to go for another server and then move laterally to the domain controller. This
    will be our attack strategy here.
  prefs: []
  type: TYPE_NORMAL
- en: 'From our scan earlier, we found we have one vulnerable 64-bit system, BO-SRV3\.
    We''ll use the `ms17_010_eternalblue` exploit to compromise this system. Load
    the module with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For the options, you need to load the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the available payloads, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything looks good, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Bingo! We have a winner! We see that the exploit has successfully ran and we
    have a Meterpreter shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ec94160-17b4-447a-bf2d-458b076d4a99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the following commands, we can see we are remotely connected to the
    system with full system level access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/69a8ce8a-4f7f-46ea-be85-52e5a68a1fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s time to pillage and plunder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we see we have dumped the local hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64ffa220-da8a-40eb-865a-73d3bee3b9bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So we have the local administrator''s hash. Most likely this is also the local
    admin on the domain controller and other host, but let''s dump some Active Directory
    information too. To do this, we will need to load the Kiwi toolkit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the commands, type `help` at any time. The following is a list of Kiwi
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `creds_all` command will get the `msv`, `wdigest`, `tspkg`, and `kerberos`
    credentials. It''s basically a dump of all saved or stored credentials on the
    machine. Notice we captured clear text domain credentials from a domain user that
    has recently logged into the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c71f6cf4-9aa4-439a-8640-58270f1fcbbe.png)'
  prefs: []
  type: TYPE_IMG
- en: So one down and with the credentials to hit the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following to back out of the Meterpreter session without closing the
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/23125dc2-375c-408f-9b62-af31c2645e21.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting a 32-bit system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we attacked a 64-bit machine using the standard EternalBlue
    exploit. Now let''s compromise a 32-bit system using the `psexec` module. We are
    using this module since we gathered credentials from the last exploit. This time
    we are going after a workstation on the network. Workstations are normally used
    by a lot of different people so there should be a lot of stored credentials on
    this machine. The more credentials we have, the more access we have. To use this
    module, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to load the same options as before but we will be attacking `172.16.42.173
    \\WIN7-01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to pick a payload, so run the following command to see the available
    payloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'On the last exploit, when we ran this command, we only saw 64-bit payloads.
    This time, we see both 32- and 64-bit payloads to choose from. WIN7-01 is 32-bit
    so we will need to pick the proper payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You will notice this is the same type of reverse TCP payload but doesn't show
    the x64 in its command line. This is the one for the 32-bit system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you didn''t earlier globally set your `LHOST` (your Kali machine), you''ll
    need to set it now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Hacker''s tip**:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit will automatically try to set up the `LHOST` interface for exploits.
    This can create a problem if the Kali machine is connected to two or more networks.
    The exploit handler may connect to the wrong network causing the exploit to fail.
    Normally, when running Metasploit, after entering into my workspace, I go ahead
    and globally set the `LHOST` interface using the `setg` global option to the local
    host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `show options` command again, we can see the proper setup for attacking
    the remote host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d836e7c0-fc90-4767-ad06-dbfaa908be3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we also see that we have the proper setup for
    our handler on our local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8da4e7bb-4d62-4b63-9dcd-379db2859ae7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Bingo! We have another host compromised with full system level access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4ae60c63-82a8-4e97-9751-a0e91cdae4df.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, after loading Kiwi, we run the `creds_all` command and dump all saved
    or stored credentials, including system and domain credentials, on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Between these two systems, we now have enough credentials that we know we can
    now take over the domain controller with no problem.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Systems With Xfreerdp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Xfreerdp** is an RDP client on Kali used to access Windows systems using
    the RDP protocol. Rdesktop is the normal default RDP client used when running
    Linux. Xfreerdp has some cool features that hackers love. With Rdesktop, you must
    have clear text passwords. With Xfreerdp, you can run a *Pass the Hash* attack
    and gain access to a Window''s remote desktop session without having to crack
    a captured hash. Xfreerdp is run from the command line and does not have a GUI
    interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get a full list of the supported options by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a copy of the Help file and the supported options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, this application has a lot more supported features than Rdesktop
    and is also just a great application for normal access to Window machines. A configuration
    file can be built and complex setups can be started by calling the file when running
    the application. Many of these features are beyond the scope of this book. Let''s
    look at the most useful of the flags, `/pth:<password-hash>`. This flag will pass
    the hash instead of the plain text password and log into the system. The following
    is the string I used to gain access to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/45c87fe2-b0c4-455f-aa12-b6995cee5d2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we know the password, we can access the system using the following flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Wait, there's more!
  prefs: []
  type: TYPE_NORMAL
- en: Not only can you access a remote desktop using this application but by going
    into the system using RDP and setting up Remote Assistance, you can log in again
    using this application with the `/assistance:<password>` flag and you can now
    watch a logged in user's desktop. Just be careful with your mouse or the user
    will know you are there.
  prefs: []
  type: TYPE_NORMAL
- en: By using the audio and multimedia flags, an attacker can turn on the microphone
    and camera on the remote system and pull a *Peeping Tom* on the unsuspecting user.
    Who needs fancy spycraft technology when you have remote access to a laptop? The
    laptop is now the bug. (and people wonder why I keep a band aid over the camera).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to gain access to a system using known
    exploits and how to move laterally between machines using stolen credentials.
    You have learned about the leaked exploits from the NSA and how they are used
    and about the havoc some of these have caused on the internet today.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to elevate your privileges from a normal
    user account to SYSTEM level access when you only have normal user rights.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Eternal Blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0143/](https://cvedetails.com/cve/CVE-2017-0143/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0144/](https://cvedetails.com/cve/CVE-2017-0144/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0145/](https://cvedetails.com/cve/CVE-2017-0145/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0146/](https://cvedetails.com/cve/CVE-2017-0146/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0147/](https://cvedetails.com/cve/CVE-2017-0147/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cvedetails.com/cve/CVE-2017-0148/](https://cvedetails.com/cve/CVE-2017-0148/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://technet.microsoft.com/en-us/library/security/MS17-010](https://technet.microsoft.com/en-us/library/security/MS17-010)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html](https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/countercept/doublepulsar-detection-script](https://github.com/countercept/doublepulsar-detection-script)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://technet.microsoft.com/en-us/library/security/ms17-010.aspx](https://technet.microsoft.com/en-us/library/security/ms17-010.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/worawit/MS17-010](https://github.com/worawit/MS17-010)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://hitcon.org/2017/CMT/slide-files/d2_s2_r0.pdf](https://hitcon.org/2017/CMT/slide-files/d2_s2_r0.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blogs.technet.microsoft.com/srd/2017/06/29/eternal-champion-exploit-analysis/](https://blogs.technet.microsoft.com/srd/2017/06/29/eternal-champion-exploit-analysis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/worawit/MS17-010](https://github.com/worawit/MS17-010)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
