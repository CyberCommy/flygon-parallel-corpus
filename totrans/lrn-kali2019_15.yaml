- en: Network Penetration Testing - Detection and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the concept of network security as a penetration tester is an
    asset in itself. In this chapter, we will focus on the cybersecurity operational
    side of things. Understanding how to detect threats and suspicious network traffic
    patterns is important as it will assist the IT security team in detecting and
    stopping attacks across the network. You will learn about various **blue team
    tactics** that are used to detect and prevent cyberattacks within an organization's
    network infrastructure. After submitting a penetration test report to the customer,
    the customer may ask for additional services that allow them to detect and prevent
    cyber threats in their organization. This chapter will aid you in getting started
    with suspicious traffic monitoring and prevention techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Wireshark to understand ARP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting ARP poisoning attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting suspicious activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Man-in-the-Middle** (**MITM**) remediation techniques'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing remediation techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux: [https://www.kali.org/](https://www.kali.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireshark Telnet file: [https://wiki.wireshark.org/SampleCaptures#Telnet](https://wiki.wireshark.org/SampleCaptures#Telnet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Wireshark to understand ARP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Address Resolution Protocol** (**ARP**) was designed to resolve IP addresses
    to MAC addresses. The importance of ARP is sometimes underestimated among IT professionals.
    All the communication between devices on a **local area network** (**LAN**) or
    within the same subnet uses the **Media Access Control** (**MAC**) address. This
    means that the devices do not use an IP address unless the communication is going
    beyond their local subnet, such as to another network (or subnet).
  prefs: []
  type: TYPE_NORMAL
- en: Let's use a simple analogy of a PC that wants to send a document to be printed
    out to the network printer. If these two devices are on the same subnet, the PC
    will encapsulate its message (document) within a frame and send it to the network
    switch. The network switch will read the destination MAC address of the frame
    and forward it to the network printer for processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following screenshot. This is a frame that''s been
    captured by Wireshark. Looking at the layer 2 protocol, that is, ARP, we can determine
    a number of things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e6b0d27-3738-4542-9c7c-de2f22d005c6.png)'
  prefs: []
  type: TYPE_IMG
- en: This frame is an **Address Resolution Protocol (request)** message. The sender
    of this frame has a MAC address of `00:0c:29:7e:37:58` with an IP address of `10.10.10.16`.
    The `10.10.10.16` machine is sending a broadcast on the local network. This can
    be determined by observing that the destination MAC address in the frame is `ff:ff:ff:ff:ff:ff`;
    however, the **Target MAC address** is empty, while the **Target IP address**
    is `10.10.10.23`. To put this simply, the `10.10.10.16` machine is asking everyone
    on the local network who `10.10.10.23` is and what the device's MAC address is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Address Resolution Protocol (reply)**
    (response) frame from `10.10.10.16`. Please take some time to observe all the
    fields within the frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39ef1df2-12c8-4ecf-8582-f91a51592608.png)'
  prefs: []
  type: TYPE_IMG
- en: The device that has the IP address of `10.10.10.23` responded to the sender
    (`10.10.10.16`), saying that its MAC address is `00:0c:29:24:be:4f`. For all future
    communication between `10.10.10.16` and `10.10.10.23`, both devices have each
    other's MAC addresses in their ARP cache. These MAC addresses will be used to
    forward frames on the network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to use Wireshark to see and interpret
    ARP messages that are flowing across a network. In the next section, we will cover
    how to detect an ARP poisoning attack on a network.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting ARP poisoning attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a cybersecurity professional, you may be asked to help an organization identify
    any ARP poisoning attacks on their network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: ARP poisoning is the process in which an attacker sends fake ARP messages to
    a victim's machine to create the effect of modifying the entries in the victim's
    ARP cache. This would cause the victim's machines to send frames (traffic) to
    a rogue device on the network rather than the legitimate destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explain the detection process of ARP poisoning, we''ll use the following
    topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97abf0ad-e1d0-43b4-a7b8-2fa2221c93e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using Wireshark, we can look for specific patterns of traffic between endpoint
    devices on the network. Using the `arp` filter on Wireshark, we will only be able
    to view **ARP** messages, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/011e7d8f-b884-45e8-b3f9-046b45d64c7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the **Info** column, a few of the packets have unusual descriptions.
    By expanding the information of **Frame 1** within the **Packet Details** pane,
    we will be able to see that a sender (attacker) is sending a gratuitous ARP message
    (ARP reply) to `10.10.10.23` (a PC):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d18383b-4eff-44cf-b2f3-bb80ea020ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Frame 1** is telling `10.10.10.23` that the MAC address of `10.10.10.1` (the
    gateway) is `00:0c:29:7e:37:58`. This will cause the victim to update its ARP
    cache to map `10.10.10.1` to `00:0c:29:7e:37:58`. However, this MAC address belongs
    to the Kali Linux (attacker) machine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the content of the frame that was sent from
    the attacker to the gateway (`10.10.10.1`), stating that the MAC address of the
    PC (`10.10.10.23`) is now `00:0c:29:7e:37:58`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24c88185-67de-4158-9c4e-1e5db564016b.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, Wireshark has been detecting the duplication of MAC addresses
    within the ARP frames and has issued a warning in yellow. Please keep in mind
    that Wireshark is a network protocol analyzer and not a threat monitoring application,
    and so human intervention is required to perform further analysis of network traffic.
    Security appliances and tools such as Cisco Stealthwatch, AlienVault SIEM, and
    OpenSOC can assist cybersecurity professionals in quickly identifying threats.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to detect an ARP poisoning attack using
    Wireshark. In the next section, we will take a look at detecting suspicious activity
    on a network.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting suspicious activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within many large organizations, the IT department usually implements a **network
    operation center** (**NOC**) to monitor and resolve all network-related issues.
    With the rise of security threats, organizations can sometimes implement a dedicated
    team that focuses on cybersecurity; this team is called the **security operation
    center** (**SOC**).
  prefs: []
  type: TYPE_NORMAL
- en: The responsibilities of the SOC range from threat monitoring and remediation
    to security appliance configurations, compliance, forensics, and even reverse
    malware engineering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the suspicious activities that should be investigated by the SOC include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Abnormal traffic spikes during after-work hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unusual inbound and outbound traffic flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abnormal DNS requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Wireshark capture in my lab. By carefully
    observing the flow of packets, we can see that a port scan is taking place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05e6918d-a93a-42c3-a9d2-acfd9b6dc61e.png)'
  prefs: []
  type: TYPE_IMG
- en: The machine that is conducting the port scan has the IP address `10.10.10.16`,
    while the target has the IP address `10.10.10.100`. The **Info** column provides
    a brief summary of each packet. Here, we can see that a **SYN** probe is being
    sent to each network port. We can clearly see that a **SYN** (**Stealth**) scan
    is being executed on the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all the TCP connections in Wireshark, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Statistics | Endpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, the **Endpoints** window will appear, displaying all the connections
    that have been made to the target, `10.10.10.100`, and the ports that were probed
    by the attacker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b5262ae-ca05-4515-a28f-d6755ba4db98.png)'
  prefs: []
  type: TYPE_IMG
- en: Being in the field of cybersecurity, you will begin to develop the skill of
    recognizing abnormal traffic patterns in network traffic. However, tools such
    as Wireshark can greatly assist you in filtering for and viewing a specific type
    of packet that is flowing across a network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned about the fundamentals of using Wireshark
    to detect suspicious activity on a network. In the next section, we will cover
    various methods for preventing and mitigating MITM attacks.
  prefs: []
  type: TYPE_NORMAL
- en: MITM remediation techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to focus on some techniques that an IT professional
    can employ to stop and prevent MITM attacks against a LAN. We will discuss the
    following topics to learn about the roles they play on a LAN to stop and prevent
    MITM attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic ARP inspection** (**DAI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During an MITM attack, the attacker is able to intercept all the traffic between
    the victim and the intended destination for their communication. Encrypted data
    will not be readable by an attacker; however, the attacker will still be able
    to view the following details, despite the encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: Source IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer 3 protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the attacker''s machine, they will only be able to view the traffic that
    has been sent in plain text. The following screenshot shows a Wireshark capture
    between a client and a Linux server on a network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8b87a9c-d0f8-4d97-9456-0f7a0a386960.png)'
  prefs: []
  type: TYPE_IMG
- en: The server is using Telnet as its method of remote access. The user's input
    is given in red, while the server responses are given in blue. Here, we can see
    that Wireshark has reassembled all the Telnet packets for the entire conversation
    and is presenting it in a beautiful dialog format. In other words, we can see
    everything that happened during the Telnet session between both devices. In this
    capture, the username and password were recorded.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing MITM attacks is critical on corporate networks as, every second,
    sensitive information is being sent across the organization in many formats.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn about how to configure a Cisco IOS switch
    with DAI.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic ARP inspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DAI is a security feature on switches that prevents invalid ARP packets from
    entering the network. This technique is used to prevent both MITM attacks and
    ARP poisoning attacks on a LAN.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, we can see an attacker attempting to perform an MITM
    attack on a network between the PCs and the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6b809a3-9fa8-411f-b838-3eaf92d9b44f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To prevent such attacks, you can use the following configuration on a Cisco
    IOS switch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable **DHCP snooping** on the VLAN and configure the trusted port on all
    the trunk ports and the interface that connects to the DHCP server on the network.
    The following configurations are being made on a Cisco IOS switch to enable DHCP
    snooping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**DHCP snooping** is used to prevent a malicious user from connecting a **rogue
    DHCP server** to a corporate network. The **trust** port is used to allow the
    `DHCP Offer` and `DHCP ACK` packets onto the network, while the other ports (untrusted
    ports) will only allow the `DHCP Discover` and `DHCP Request` packets.'
  prefs: []
  type: TYPE_NORMAL
- en: Trunk ports are those that are able to carry multiple VLANs' traffic simultaneously.
    Trunk ports are ports that are between one switch and another, or one switch and
    the router.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable ARP inspection on the VLAN and configure all the trunk ports so that
    they''re trusted ports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a layer 2 **access control list** (**ACL**) on the switch to bind an
    IP address to a MAC address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Map the layer 2 ACL to the VLAN. The following command will enable ARP inspection
    on the switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are able to implement DAI on a Cisco IOS switch, let's take a look
    at some additional remediation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing remediation techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Detecting and mitigating a network sniffer can be a bit challenging. A network
    sniffer is almost undetectable on a network as it passively listens for incoming
    network traffic. Using secure protocols such as HTTPS, **Secure File Transfer
    Protocol** (**SFTP**), and **Secure Shell** (**SSH**) will prevent a sniffer from
    seeing the original messages that were sent between devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you can use Nmap to discover sniffers on a corporate network.
    To do that, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you scan your entire subnet and any other networks owned by your
    organization. Furthermore, IT professionals occasionally perform a physical network
    sweep on a corporate network to discover whether there are any unauthorized devices
    that are attached to the corporate LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of this chapter, we covered the essentials of ARP and how
    attackers leverage vulnerabilities within ARP to perform ARP poisoning and MITM
    attacks on networks. Additionally, we took a look at using Wireshark to help us
    analyze network traffic so that we can quickly detect MITM and ARP attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have the knowledge and skills to understand how ARP and MITM attacks
    can be detected using Wireshark and how to implement security controls on your
    network switches. I hope this chapter will prove helpful and informative for your
    studies and career.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 13](b6b3699c-e4ee-473d-94fc-a87edbbd2b69.xhtml), *Client-Side Attacks
    - Social Engineering*, you'll learn about various social engineering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some questions based on the topics we have covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How can you prevent an attacker from reading your data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What technique can an attacker perform to intercept a victim's network traffic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What security control does a Cisco IOS switch support to prevent an MITM attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should an IT professional not use Telnet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you detect a sniffer on a network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wireshark documentation**: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
