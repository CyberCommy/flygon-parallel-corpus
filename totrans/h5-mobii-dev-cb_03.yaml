- en: Chapter 3. Interactive Media with Mobile Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Moving an element with touch events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting and handling orientation event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating an HTML element with gesture events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a carousel with swipe events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating image zoom with gesture events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest differences between mobile and desktop is the way in which
    we interact with the screen. On a desktop screen, we use a mouse to move and click
    events to control the interaction. On a mobile screen, the interaction comes from
    touch and gesture events. In this chapter, we will see some of the events that
    are unique to touch screens (for example, two finger events) and how you can leverage
    these features to build something unique for mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Moving an element with touch events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: On a mobile screen, we interact with elements using touch events. Because of
    that, we can move an HTML element on the screen with our fingers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we will be using jQuery. First, let's create a new HTML file,
    and name it `ch03r01.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your HTML document, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now let's see how it renders in Opera:![How to do it...](img/1963_03_08.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we register the square `div` with a `touchmove` event.
  prefs: []
  type: TYPE_NORMAL
- en: You can detect the touch position relative to the page which is `touch.pageX`
    and `touch.pageY` in our example. We use the finger position minus half the width
    and height of the square `div` element, so it feels like we are moving with the
    `div` center as the registration point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We apply the x and y values to the square element using CSS position. This is
    the 'moving' action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have realized that, at the top of this example, there is one line as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you might be wondering what it does. Mobile Safari does not allow the `e.touches`
    and `e.changedTouches` properties on event objects to be copied to another object.
    You can get around this issue by using `e.originalEvent`. You could read more
    about it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.the-xavi.com/articles/trouble-with-touch-events-jquery](http://www.the-xavi.com/articles/trouble-with-touch-events-jquery).'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery mobile events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'jQuery mobile is a set of components. If you want to dig into all the mobile-related
    events, you can find them at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/shichuan/jquery-mobile/blob/master/js/jquery.mobile.event.js](http://github.com/shichuan/jquery-mobile/blob/master/js/jquery.mobile.event.js).'
  prefs: []
  type: TYPE_NORMAL
- en: Zepto
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Zepto is a more lightweight alternative to jQuery that you could consider using
    if your main target is WebKit-based browsers. You can find out more about it at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/madrobby/zepto](http://github.com/madrobby/zepto).'
  prefs: []
  type: TYPE_NORMAL
- en: Safari's guide on mobile event handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the official reference, you could visit Safari''s online guide at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html](http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Redrawing a canvas with orientation events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating an HTML element with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making a carousel with swipe events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Manipulating image zoom with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting and handling orientation event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: On mobile browsers, if your site is built based on a fluid layout, it shouldn't
    be affected by orientation change. But for a highly interactive site, sometimes
    you may want to handle orientation change in a special way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new HTML file, and name it `ch03r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's start creating the HTML and Script to detect and handle orientation
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, render this code in your mobile browser and rotate the screen to view in
    both portrait and landscape mode. In portrait mode, the text output will be 'PORTAIT'.![How
    to do it...](img/1963_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we rotate the screen to landscape mode, the text will be 'LANDSCAPE'.![How
    to do it...](img/1963_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By listening to `window.onorientationchange` event, we could get the `orientationchange`
    event, when it occurs; we get the `event.orientation` parsed to the function to
    output the result.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, you may want to lock the orientation of the screen if let's say when
    building a game. For a native application, this can be easy, but for a web app,
    this can be a bit difficult to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a one-page screen that locks to only landscape mode. Note that
    this is a proof-of-concept, and to create really sophisticated apps or game requires
    more calculation and handling.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document and name it `ch03r02_b.html`, and enter the following code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you render the page in your browser, you will see the following screen.
    In portrait mode, it suggests to the user the game/application is designed to
    be viewed in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you rotate the screen from portrait to landscape mode, it looks normal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we used `transform:rotate` from CSS3 to rotate the screen
    to 90 degrees when viewed in portrait mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The mode the user is in can be determined by `window.orientation`. There are
    four values: -90, 0, 90, 180\. The device is in landscape mode when the degree
    is -90 and 90\. And it''s in portrait mode when the degree is 0 and 180.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With this, you can determine the orientation of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Safari's native support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the official reference, you could visit Safari''s online guide at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html](http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Web versus native
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although mobile web is catching up, if you are developing a highly interactive
    application, always keep in mind that even the slowest native app still performs
    faster than an HTML app. If you are deciding to use HTML5 to build an app, you
    also have to keep all the hacks and browser inconsistencies in mind.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Moving an element with touch events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating an HTML element with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making a carousel with swipe events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Zooming an image with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating an HTML element with gesture events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: iOS, Android, Symbian'
  prefs: []
  type: TYPE_NORMAL
- en: On Mobile Safari, you can detect the degrees of rotation when people use two
    fingers to do a rotation on the screen. Because of that, we can use our fingers
    to rotate an element on the screen!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create an HTML document and name it `ch03r03.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following code to `ch03r03.html` and render it in your mobile browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now use two fingers to rotate the box and you will see something like this:![How
    to do it...](img/1963_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we rotate the element when there is an `ongesturechange` event
    triggered. We get the rotation degree by using the following value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that we also listen to `ongestureend` event, because if
    the user has previously rotated, this script will remember the last rotated angle
    and continue to rotate from there.
  prefs: []
  type: TYPE_NORMAL
- en: Safari event handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the official reference, you could visit Safari''s online guide at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html](http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/HandlingEvents/HandlingEvents.html).'
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 transforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we used CSS3''s transforms feature. You can find more information
    about WebKit and CSS transform at WebKit''s blog at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.webkit.org/blog/130/css-transforms/](http://www.webkit.org/blog/130/css-transforms/).'
  prefs: []
  type: TYPE_NORMAL
- en: Drawbacks of the scale bug fix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we used `maximum-scale=1.0` to prevent zooming when using a
    gesture event. This will cause some accessibility drawbacks, so use a rotate event
    only if you are building a highly interactive web application. Try to avoid it
    when building a mobile website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Moving an element with touch events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Redrawing a canvas with orientation events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating an HTML element with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zooming an image with gesture events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a carousel with swipe events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the common features of mobile devices is swiping. When you browse photos
    in your photo gallery, you swipe left and right to navigate from one picture to
    another. On Android devices, you swipe down to unlock the phone. On a mobile browser,
    you can use swipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create an HTML document and name it `ch03r04.html.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once you've entered the code in the page, swipe left and right of the viewing
    area, and you can see the boxes being scrolled horizontally:![How to do it...](img/1963_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used a couple of HTML5 techniques in this example. First, we used jQuery
    Mobile to detect the swipe event. When we use our finger to swipe the page to
    the left or right, an event listener is assigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the swipe events are detected, jQuery animation `.animate()` is used to
    create the moving effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we used a CSS3 technique for the circle buttons. You can draw
    an entire circle using just pure CSS3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define the width and height of the document to be 10 px,
    and the border radius to be 5 px. Now you can have a perfect circle in just a
    couple of lines of CSS!
  prefs: []
  type: TYPE_NORMAL
- en: Zepto framework and swipe events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the Zepto framework to do something similar. It has events such
    as `swipe, swipeLeft, swipeRight, swipeUp, swipeDown`.
  prefs: []
  type: TYPE_NORMAL
- en: YUI and gesture events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YUI has gesture events which you can use to create swipe events. You can read
    more about this here: Supporting A Swipe Left Gesture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://yuiblog.com/sandbox/yui/3.3.0pr3/examples/event/ swipe-gesture.html](http://yuiblog.com/sandbox/yui/3.3.0pr3/examples/event/)'
  prefs: []
  type: TYPE_NORMAL
- en: Dive into the source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Events in jQuery mobile are built in a modular way. Those who want to learn
    how jQuery made the swipe event can visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jquery/jquery-mobile/blob/master/js/jquery.mobile.event.js](http://github.com/jquery/jquery-mobile/blob/master/js/jquery.mobile.event.js).
    The part related to swipe events is under:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Vertical, horizontal, and distance threshold are calculated for the event calculation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Moving an element with touch events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Redrawing a canvas with orientation events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating an HTML element with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Zooming an image with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zooming an image with gesture events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the iPhone, you can resize an element based on zoom detection. On gesture
    change, you could get the value of the scale factor, and zoom HTML elements based
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch03r05.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we assign the element we want to scale with the `ongesturechange`
    event. The scale factor is determined by the `e.target.scale:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gesture events can be tricky, so using them properly is very important. For
    a two finger multi-touch gesture, the events occur in the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '`touchstart` for finger 1\. Sent when the first finger touches the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gesturestart`. Sent when the second finger touches the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`touchstart` for finger 2\. Sent immediately after `gesturestart` when the
    second finger touches the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gesturechange` for current gesture. Sent when both fingers move while still
    touching the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gestureend`. Sent when the second finger lifts from the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`touchend` for finger 2\. Sent immediately after `gestureend` when the second
    finger lifts from the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`touchend` for finger 1\. Sent when the first finger lifts from the surface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Official iOS Safari guide on GestureEvent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is an official iPhone Safari guide that explains the details of `GestureEvent`
    class on Safari:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.apple.com/library/safari/#documentation/UserExperience/Reference/GestureEventClassReference/GestureEvent/GestureEvent.html](http://developer.apple.com/library/safari/#documentation/UserExperience/Reference/GestureEventClassReference/GestureEvent/GestureEvent.html).'
  prefs: []
  type: TYPE_NORMAL
- en: YUI gesture events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YUI from Yahoo! has a cross-browser solution for gesture events, but only supports
    one-finger events. You can find out more about it at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.yahoo.com/yui/3/event/#gestures](http://developer.yahoo.com/yui/3/event/#gestures).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Maps and gesture events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One example of a site that relies heavily on the two fingers gesture event
    is Google Maps on Mobile Safari:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Maps and gesture events](img/1963_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Moving an element with touch events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Redrawing a canvas with orientation events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating an HTML element with gesture events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making a carousel*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
