- en: Chapter 1. Nmap Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Nmap from the official source code repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Nmap from source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing open ports on a remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting services of a remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding live hosts in your network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning using specific port ranges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running NSE scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning using a specified network interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing scan results with Ndiff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple scanning profiles with Zenmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting NAT with Nping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring servers remotely with Nmap and Ndiff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Nmap** (Network Mapper) is an open-source tool specialized in network exploration
    and security auditing, originally published by Gordon "Fyodor" Lyon. The official
    website ([http://nmap.org](http://nmap.org)) describes it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap (Network Mapper) is a free and open source (license) utility for network
    discovery and security auditing. Many systems and network administrators also
    find it useful for tasks such as network inventory, managing service upgrade schedules,
    and monitoring host or service uptime. Nmap uses raw IP packets in novel ways
    to determine what hosts are available on the network, what services (application
    name and version) those hosts are offering, what operating systems (and OS versions)
    they are running, what type of packet filters/firewalls are in use, and dozens
    of other characteristics. It was designed to rapidly scan large networks, but
    works fine against single hosts. Nmap runs on all major computer operating systems,
    and official binary packages are available for Linux, Windows, and Mac OS X.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are many other port scanners out there, but none of them even comes close
    to offering the flexibility and advanced options of Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: The **Nmap Scripting Engine (NSE)** has revolutionized the possibilities of
    a port scanner by allowing users to write scripts that perform custom tasks using
    the host information collected by Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the Nmap Project includes other great tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Zenmap**: A graphical interface for Nmap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ndiff**: A tool for scan result comparison'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nping**: An excellent tool for packet generation and traffic analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ncrack**: An Nmap-compatible tool for brute forcing network logins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ncat**: A debugging utility to read and write data across networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Needless to say, it is essential that every security professional and network
    administrator master this tool to conduct security assessments, monitor, and administer
    networks efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap's community is very active, and new features are added every week. I encourage
    you to always keep an updated copy in your arsenal, if you haven't done this already;
    and even better, to subscribe to the development mailing list at [http://cgi.insecure.org/mailman/listinfo/nmap-dev](http://cgi.insecure.org/mailman/listinfo/nmap-dev).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter describes how to do some of the most common tasks with Nmap, including
    port scanning and target enumeration. It also includes recipes that illustrate
    how handy Zenmap's profiles are, how to use Nping for NAT detection, and different
    applications of Ndiff, including how to set up a remote monitoring system with
    some help of bash scripting and cron. I've added as many reference links with
    additional material as possible; I recommend you visit them to learn more about
    the inner workings of the advanced scanning techniques performed by Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: I've also created the website [http://nmap-cookbook.com](http://nmap-cookbook.com)
    to post new, related material and additional recipes, so make sure you stop by
    from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Nmap from the official source code repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes how to download Nmap's source code from the official
    subversion repository. By doing so, users can compile the latest version of Nmap
    and keep up with the daily updates that are committed to the subversion repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before continuing, you need to have a working Internet connection and access
    to a subversion client. Unix-based platforms come with a command-line client called
    **subversion** (**svn**). To check if its already installed in your system, just
    open a terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If it tells you that the command was not found, install `svn` using your favorite
    package manager or build it from source code. The instructions for building svn
    from source code are out of the scope of this book, but they are widely documented
    online. Use your favorite search engine to find specific instructions for your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: If you would rather work with a graphical user interface, RapidSVN is a very
    popular, cross-platform alternative. You can download and install RapidSVN from
    [http://rapidsvn.tigris.org/](http://rapidsvn.tigris.org/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until svn downloads all the files stored in the repository. You should
    see the list of the added files as it finishes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the program returns/exits, you will have Nmap's source code in your current
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command downloads a copy of the remote repository located at [https://svn.nmap.org/nmap/](https://svn.nmap.org/nmap/).
    This repository has world read access to the latest stable build, allowing svn
    to download your local working copy.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using RapidSVN then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Bookmarks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Checkout New Working Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `https://svn.nmap.org/nmap/` in the URL field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your local working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to start downloading your new working copy.![There's more...](img/7485_01_02_new.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experimenting with development branches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to try the latest creations of the development team, there is a
    folder named `nmap-exp` that contains different experimental branches of the project.
    Code stored there is not guaranteed to work all the time, as the developers use
    it as a sandbox until it is ready to be merged into the stable branch. The full
    subversion URL of this folder is [https://svn.nmap.org/nmap-exp/](https://svn.nmap.org/nmap-exp/).
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your source code up-to-date
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To update a previously-downloaded copy of Nmap, use the following command inside
    your working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should see the list of files that have been updated, as well as some revision
    information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Compiling Nmap f**rom source code* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing multiple scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe in [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe in [Chapter 8](ch08.html "Chapter 8. Generating
    Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Nmap from source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Precompiled packages always take time to prepare and test, causing delays between
    releases. If you want to stay up-to-date with the latest additions, compiling
    Nmap's source code is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to compile Nmap's source code in the Unix environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure the following packages are installed in your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gcc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openssl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the missing software using your favorite package manager or build it
    from source code. Instructions to build these packages from source code are out
    of the scope of this book but are available online.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your terminal and go into the directory where Nmap's source code is stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure it according to your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An ASCII dragon warning you about the power of Nmap will be displayed (as shown
    in the following screenshot) if successful, otherwise lines specifying an error
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Build Nmap using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you don't see any errors, you have built the latest version of Nmap successfully.
    You can check this by looking for the compiled binary `Nmap` in your current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to make Nmap available for all the users in the system, enter the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the script `configure` to set up the different parameters and environmental
    variables affecting your system and desired configuration. Afterwards, GNUs `make`
    generated the binary files by compiling the source code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you only need the Nmap binary, you can use the following configure directives
    to avoid installing Ndiff, Nping, and Zenmap:'
  prefs: []
  type: TYPE_NORMAL
- en: Skip the installation of Ndiff by using `--without-ndiff`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skip the installation of Zenmap by using `--without-zenmap`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skip the installation of Nping by using `--without-nping`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL development libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenSSL is optional when building Nmap. Enabling it allows Nmap to access the
    functions of this library related to multiprecision integers, hashing, and encoding/decoding
    for service detection and Nmap NSE scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the OpenSSL development package in Debian systems is `libssl-dev`.
  prefs: []
  type: TYPE_NORMAL
- en: Configure directives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several configure directives that can be used when building Nmap.
    For a complete list of directives, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Precompiled packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several precompiled packages available online ([http://nmap.org/download.html](http://nmap.org/download.html))
    for those who don't have access to a compiler, but unfortunately, it's very likely
    you will be missing features unless its a very recent build. Nmap is continuously
    evolving. If you are serious about harnessing the power of Nmap, keep your local
    copy up-to-date with the official repository.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Downloading Nmap from the official source code repository* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing multiple scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using a specified network interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe in [Chapter 8](ch08.html "Chapter 8. Generating
    Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe in [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing open ports on a remote host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes the simplest way of using Nmap to determine the port states
    on a remote host, a process used to identify running services commonly referred
    as **port scanning**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The scan results should appear on the screen, showing the interesting ports
    and their states. The ports marked as open are of special interest as they represent
    services running on the target host.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following command checks the state of the most popular ports on the host
    `scanme.nmap.org` by launching a TCP port scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The results contain host information such as the IPv4 address and PTR record,
    and port information such as a service name and port state.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even for this simplest port scan, Nmap does a lot of things in the background,
    and these can be configured as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap begins by converting the hostname to an IPv4 address using DNS. If you
    wish to use a different DNS server, use `--dns-servers <serv1[,serv2],...>`, or
    use`-n` if you wish to skip this step, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, it pings the target address to check if the host is alive. To skip
    this step use `–PN` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Nmap then converts the IPv4 address back to a hostname by using a reverse DNS
    call. Use `-n` to skip this step as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, it launches a TCP port scan. To specify a different port range, use
    `-p[1-65535]`, or `-p-` for all possible TCP ports, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Privileged versus unprivileged
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running `nmap <TARGET>` as a privileged user launches the **SYN Stealth Scan**.
    For unprivileged accounts that can't create raw packets, the **TCP Connect Scan**
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between these two is that a TCP Connect Scan uses the high-level
    system call **connect** to obtain information about the port state. This means
    that each TCP connection is fully completed and, therefore, is slower and more
    likely to be detected and recorded in system logs. SYN Stealth Scans use raw packets
    to send specially-crafted TCP packets that detect port states more reliably.
  prefs: []
  type: TYPE_NORMAL
- en: Port states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap categorizes ports into the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The type of packets sent depends on the scanning technique(s) used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: This indicates that an application is listening for connections on
    this port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed**: This indicates that the probes were received but there is no application
    listening on this port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filtered**: This indicates that the probes were not received and the state
    could not be established. It also indicates that the probes are being dropped
    by some kind of filtering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unfiltered**: This indicates that the probes were received but a state could
    not be established.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open/Filtered**: This indicates that the port was filtered or open but Nmap
    couldn''t establish the state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed/Filtered**: This indicates that the port was filtered or closed but
    Nmap couldn''t establish the state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port scanning techniques supported by Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We showed the simplest way of performing a port scan, but Nmap has a vast number
    of advanced scanning techniques available. Use `nmap -h` or visit [http://nmap.org/book/man-port-scanning-techniques.html](http://nmap.org/book/man-port-scanning-techniques.html)
    to learn more about them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using a specified network interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Manage different scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from your scans* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operative system of a host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting services of a remote host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Version detection** is one of the most popular features of Nmap. Knowing
    the exact version of a service is highly valuable for penetration testers who
    use this service to look for security vulnerabilities, and for system administrators
    who wish to monitor their networks for any unauthorized changes. Fingerprinting
    a service may also reveal additional information about a target, such as available
    modules and specific protocol information.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to fingerprint the services of a remote host by using
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command is a table containing an additional column named
    **VERSION**, displaying the specific service version, if identified. Additional
    information will be enclosed in parenthesis. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The flag `-sV` enables service detection, which returns additional service and
    version information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Service detection** is one of the most loved features of Nmap, as it''s very
    useful in many situations such as identifying security vulnerabilities or making
    sure a service is running on a given port.'
  prefs: []
  type: TYPE_NORMAL
- en: This feature basically works by sending different probes from `nmap-service-probes`
    to the list of suspected open ports. The probes are selected based on how likely
    it is that they can be used to identify a service.
  prefs: []
  type: TYPE_NORMAL
- en: There is very detailed documentation on how the service detection mode works,
    and the file formats used, at [http://nmap.org/book/vscan.html](http://nmap.org/book/vscan.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the amount of probes to use by changing the intensity level of
    the scan with the argument `–-version-intensity [0-9]`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Aggressive detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap has a special flag to activate aggressive detection, namely `-A`. **Aggressive
    mode** enables OS detection (`-O`), version detection (`-sV`), script scanning
    (`-sC`), and traceroute (`--traceroute`). Needless to say this mode sends a lot
    more probes and it is more likely to be detected, but provides a lot of valuable
    host information. You can see this by using one of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Aggressive detection](img/7485_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Submitting service fingerprints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nmap's accuracy comes from a database that has been collected over the years
    through user submissions. It is very important that we help keep this database
    up-to-date. If Nmap does not identify the service correctly, please submit your
    new service fingerprint or correction to [http://insecure.org/cgi-bin/submit.cgi?](http://insecure.org/cgi-bin/submit.cgi?).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using a specified network interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing multiple scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operative system of a host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding live hosts in your network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding live hosts in a network is often used by penetration testers to enumerate
    active targets, and by system administrators to count or monitor the number of
    active hosts.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to perform a ping scan, to find live hosts in a network
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The result shows hosts that are online and responded to the ping sweep.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we found two live hosts in the network. Nmap has also found the
    MAC address, and it identified the vendor of a home router.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap uses the `-sP` flag for ping scanning. This type of scan is very useful
    for enumerating the hosts in a network. It uses a TCP ACK packet and an ICMP echo
    request if executed as a privileged user, or a SYN packet sent via `connect()`
    `syscall` if run by users who can't send raw packets.
  prefs: []
  type: TYPE_NORMAL
- en: CIDR `/24` in `192.168.1.1/24` is used to indicate that we want to scan all
    the 256 IPs in our network.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ARP requests are used when scanning a local Ethernet network as a privileged
    user, but you can override this behavior by including the flag `--send-ip`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Traceroute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use `--traceroute` to include a path between your machine and each host that
    was found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: NSE scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ping scanning does not perform port scanning or service detection, but the Nmap
    Scripting Engine can be enabled for scripts depending on host rules, such as the
    cases of `sniffer-detect` and `dns-brute`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe in [Chapter
    2](ch02.html "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning using specific port ranges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are situations when a system administrator is looking for infected machines
    that use a specific port to communicate, or when users are only looking for a
    specific service or open port and don't really care about the rest. Narrowing
    down the port ranges used also optimizes performance, which is very important
    when scanning multiple targets.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use port ranges when performing Nmap scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: A list of hosts with the state of port `80` will appear in the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap uses the flag `-p` for setting the port ranges to be scanned. This flag
    can be combined with any scanning method. In the previous example, we used the
    argument `-p80` to indicate to Nmap that we are only interested in port 80.
  prefs: []
  type: TYPE_NORMAL
- en: The CIDR `/24` in `192.168.1.1/24` is used to indicate that we want to scan
    all of the 256 IPs in our network.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several accepted formats for the argument `-p`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Port list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Port range:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'All ports:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Specific ports by protocols:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Service name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Service name wildcards:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Only ports registered in Nmap services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using a specified network interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolution* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from your scans* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running NSE scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NSE scripts are very powerful and have become one of Nmap's main strengths,
    performing tasks from advanced version detection to vulnerability exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe describes how to run NSE scripts, and the different options
    available for this engine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To include the title of the index document of a web server in your scan results,
    open your terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/7485_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument **--script** sets which NSE scripts should be run with the scan.
    In this case, when the service scan detects the web server, a parallel thread
    is initialized for the selected NSE script.
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 230 scripts available, which perform a wide variety of tasks.
    The NSE script **http-title** returns the title of the root document if a web
    server is detected.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can run multiple scripts at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, NSE scripts can be selected by category, expression, or folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run all the scripts in the `vuln` category:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the scripts in the categories `version` or `discovery`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all the scripts except for the ones in the `exploit` category:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all HTTP scripts except `http-brute` and `http-slowloris`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To debug scripts use `--script-trace`. This enables a stack trace of the executed
    script to help you to debug the session. Remember that sometimes you may need
    to increase the debugging level with the flag `-d[1-9]` to get to the bottom of
    the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: NSE script arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The flag `--script-args` is used to set arguments of NSE scripts. For example,
    if you would like to set the HTTP library argument `useragent`, `you would use`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can also use aliases when setting the arguments for NSE scripts. For example,
    you could use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Adding new scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To test new scripts, you simply need to copy them to your `/scripts` directory
    and run the following command to update the script database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: NSE script categories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`auth`: This category is for scripts related to user authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast`: This is a very interesting category of scripts that use broadcast
    petitions to gather information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brute`: This category is for scripts that help conduct brute-force password
    auditing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: This category is for scripts that are executed when a script scan
    is executed (`-sC`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discovery`: This category is for scripts related to host and service discovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dos`: This category is for scripts related to denial of service attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit`: This category is for scripts that exploit security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external`: This category is for scripts that depend on a third-party service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fuzzer`: This category is for NSE scripts that are focused on fuzzing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intrusive`: This category is for scripts that might crash something or generate
    a lot of network noise. Scripts that system administrators may consider intrusive
    belong to this category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`malware`: This category is for scripts related to malware detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe`: This category is for scripts that are considered safe in all situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This category is for scripts that are used for advanced versioning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vuln`: This category is for scripts related to security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Managing different scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe in [Chapter
    2](ch02.html "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail accounts* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning using a specified network interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is known for its flexibility, and allows users to specify the network interface
    used when scanning. This is very handy when running some of the sniffer NSE scripts,
    discovering whether your interface supports the promiscuous mode, or when testing
    a network connection with routing problems.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe describes how to force Nmap to scan using a specified network
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This will force Nmap to perform a TCP scan of `scanme.nmap.org` using the interface
    `<INTERFACE>`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The flag **-e** is used to set a specific network interface when Nmap is unable
    to select one automatically. The existence of this flag allows Nmap to send and
    receive packets through an alternate interface.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to select your interface manually, you will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Checking a TCP connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To check if a network interface can communicate with your network, you could
    try a ping scan that forces Nmap to use a specified interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolution* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from your scans* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operative system of a host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing the protocols supported by a remote host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing scan results with Ndiff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ndiff was designed to address the issues of using diff with two XML scan results.
    It compares files by removing false positives and producing a more readable output,
    which is perfect for anyone who needs to keep a track of the scan results.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to compare two Nmap scans to detect the changes in
    a host.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ndiff requires two Nmap XML files to work, so make sure you have previously
    saved the scan results of the same host. If you haven't, you can always scan your
    own network, deactivate a service, and scan again to get these two test files.
    To save the results of an Nmap scan into an XML file use `-oX <filename>`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The output returns all the differences between `FILE1` and `FILE2`. New lines
    are shown after a plus sign. The lines that were removed on `FILE2` are displayed
    after a negative sign.![How to do it...](img/7485_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ndiff uses the first file as a base to compare against the second one. It displays
    the state differences for host, port, services, and OS detection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you prefer Zenmap, you can use the following steps instead:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Zenmap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Tools** on the main toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Compare Results** (*Ctrl* + *D*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the first file by clicking on **Open** in the section named **A scan**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the second file by clicking on **Open** in the section named **B scan**.![There's
    more...](img/7485_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A human readable format is returned by default. However, Ndiff can return the
    differences in XML format, if preferred, by using the flag `--xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Verbose mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Verbose mode** includes all of the information including hosts and ports
    that haven''t changed. To use it, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing multiple scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geo-locating an IP* address recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operative system of a host* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe in [Chapter 4](ch04.html
    "Chapter 4. Auditing Web Servers"), *Auditing Web Servers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple scanning profiles with Zenmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scanning profiles are a combination of Nmap arguments that can be used to save
    time and the need to remember argument names when launching an Nmap scan.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is about adding, editing, and deleting a scanning profile in Zenmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a new profile for scanning web servers:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Zenmap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Profile** on the main toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New Profile** or **Command** (*Ctrl* + *P*). The **Profile Editor**
    will be launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a profile name and a description on the **Profile** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **Version detection** and disable **reverse DNS resolution** on the **Scan**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the following scripts on the **Scripting** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**hostmap**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-default-accounts**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-enum**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-favicon**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-headers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-methods**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-trace**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-php-version**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-robots.txt**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**http-title**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, go to the **Target** tab and click on **Ports** to scan and enter `80`,
    `443`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your changes by clicking on **Save Changes**.![How to do it...](img/7485_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After using the editor to create our profile, we are left with the following
    Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Using the **Profile** wizard, we have enabled service scanning (`-sV`), set
    the scanning ports to `80` and `443`, set the **Timing** template to `4`, and
    selected a bunch of HTTP-related scripts to gather as much information as possible
    from this web server. And we now have this profile saved for some quick scanning
    without having to type all these flags and options again.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zenmap includes 10 predefined scan profiles to help newcomers familiarize themselves
    with Nmap. I recommend that you to analyze them in order to understand the additional
    scanning techniques that are available to Nmap, along with some of the more useful
    combinations of its options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intense scan: `nmap -T4 -A -v`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intense scan plus UDP: `nmap -sS -sU -T4 -A -v`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intense scan, all TCP ports: `nmap -p 1-65535 -T4 -A -v`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intense scan, no ping: `nmap -T4 -A -v -Pn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ping scan: `nmap -sn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quick scan: `nmap -T4 -F`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quick scan plus: `nmap -sV -T4 -O -F –version-light`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quick traceroute: `nmap -sn –traceroute`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regular scan: `nmap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Slow comprehensive scan: `nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389
    -PU40125 -PY -g 53 --script` default or discovery and safe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing and deleting a scan profile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To edit or delete a scan profile, you need to select the entry you wish to modify
    from the **Profile** drop-down menu. Click on **Profile** on the main toolbar
    and select **Edit Selected Profile** (*Ctrl* + *E*).
  prefs: []
  type: TYPE_NORMAL
- en: The editor will be launched allowing you to edit or delete the selected profile.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting server of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe in [Chapter
    2](ch02.html "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting NAT with Nping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nping was designed for packet crafting and traffic analysis and is perfect for
    a variety of networking tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will introduce Nping by showing how to perform NAT detection
    with some help of the Nping Echo protocol.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in an output stream similar to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nping will return the packet traffic between the client and the Nping echo
    server `echo.nmap.org`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Take note of the source address `192.168.1.102` in the first packet marked as
    `SENT`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Compare this address to the source address in the second packet marked as `CAPT`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The addresses are different, indicating the presence of NAT.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nping's **echo mode** was designed to help troubleshoot firewall and routing
    problems. Basically, it returns a copy of the received packet back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: It uses Nping's echo mode (`--ec` or `--echo-client`) to help us analyze the
    traffic between Nmap's Nping echo server, to determine if there is a NAT device
    on the network. The argument after `–ec` corresponds to a secret passphrase known
    by the server to encrypt and authenticate the session.
  prefs: []
  type: TYPE_NORMAL
- en: The flag `-c` is used to specify how many iterations of packets must be sent.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Nping it is really simple to generate custom TCP packets. For example,
    to send a TCP SYN packet to port 80, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Nping is a very powerful tool for traffic analysis and packet crafting. Take
    a moment to go through all of its options by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Nping Echo Protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the Nping Echo Protocol visit [http://nmap.org/svn/nping/docs/EchoProtoRFC.txt](http://nmap.org/svn/nping/docs/EchoProtoRFC.txt).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing multiple scanning profiles with Zenmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring servers remotely with Nmap and Ndiff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining tools from the Nmap project allows us to set up a simple but powerful
    monitoring system. This can then be used by system administrators monitoring a
    web server or by penetration testers wanting to surveil a remote system.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use bash scripting, cron, Nmap, and Ndiff to set
    up a monitoring system that alerts the user by an e-mail if changes are detected
    in a network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the directory `/usr/local/share/nmap-mon/` to store all the necessary
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Scan your target host and save the results in the directory that you just created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The resulting file `base_results.xml` will be used as your base file, meaning
    that it should reflect the known "good" versions and ports.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the file `nmap-mon.sh` into your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: The output of the scan will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Update the configuration values according to your system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Make `nmap-mon.sh` executable by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: You can now run the script `nmap-mon.sh` to make sure it is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch your `crontab` editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You should now receive e-mail alerts when Ndiff detects a change in your network.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ndiff is a tool for comparing two Nmap scans. With some help from bash and cron,
    we set up a task that is executed at regular intervals to scan our network and
    compare our current state with an older state, in order to identify the differences
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can adjust the interval between scans by modifying the cron line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: To update your base file, you simply need to overwrite your base file located
    at `/usr/local/share/nmap-mon/`. Remember that when we change the scan parameters
    to create our base file, we need to update them in `nmap-mon.sh` too.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring specific services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To monitor some specific service, you need to update the scan parameters in
    `nmap-mon.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you would like to monitor a web server, you may use the following
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: These parameters set port scanning only to ports `80` and `443`, and in addition
    these parameters include the script `http-google-safe` to check if your web server
    has been marked as malicious by the Google Safe Browsing service.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe in [Chapter
    2](ch02.html "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
