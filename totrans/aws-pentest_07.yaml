- en: '*Chapter 5*: Understanding Vulnerable RDS Services'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：了解易受攻击的RDS服务'
- en: Amazon **Relational Database Service** (**RDS**) provides scalable and easy
    to set up cloud-based databases that allow users to operate them just as they
    would a typical database. RDS enables users to interact with databases via services
    such as MySQL and Amazon Aurora, just as a user would in a standard physical database
    infrastructure. The downfall of RDS is the same as regular databases – injection
    and misconfigurations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊**关系数据库服务**（**RDS**）提供了可扩展且易于设置的基于云的数据库，允许用户像操作典型数据库一样操作它们。RDS使用户能够通过MySQL和Amazon
    Aurora等服务与数据库交互，就像用户在标准物理数据库基础设施中一样。RDS的缺点与常规数据库相同-注入和配置错误。
- en: In this chapter, we will go over what RDS is by discussing some key points and
    setting up an RDS database using MySQL. After setting up the database, we will
    scan it and then use it to apply syntax and learn necessary "movements" and commands
    that will allow us to navigate throughout a small MySQL database. Afterward, we
    will take a look at how severe weak passwords are by actually brute-forcing login
    credentials and finish up by understanding what **SQL Injection** (**SQLi**) is
    and what its impact is on databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论RDS的一些关键点，并使用MySQL设置RDS数据库。设置完数据库后，我们将对其进行扫描，然后使用它来应用语法，并学习必要的“动作”和命令，使我们能够在一个小的MySQL数据库中进行导航。之后，我们将看一下弱密码的严重性，通过暴力破解登录凭据，并最后了解**SQL注入**（**SQLi**）是什么，以及它对数据库的影响。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Understanding RDS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解RDS
- en: Setting up RDS (MySQL)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置RDS（MySQL）
- en: Understanding basic SQL syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解基本的SQL语法
- en: Database maneuvering and exploration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库操作和探索
- en: Understanding misconfigurations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解配置错误
- en: Learning about injection points
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解注入点
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本章的说明进行操作，您需要以下内容：
- en: '**Nmap**: [https://nmap.org/download.html](https://nmap.org/download.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nmap**：[https://nmap.org/download.html](https://nmap.org/download.html)'
- en: '**Hydra**: [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hydra**：[https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)'
- en: '**Medusa**: [https://github.com/jmk-foofus/medusa](https://github.com/jmk-foofus/medusa)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Medusa**：[https://github.com/jmk-foofus/medusa](https://github.com/jmk-foofus/medusa)'
- en: '**Vulnscan**: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vulnscan**：[https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/35Va2KH](https://bit.ly/35Va2KH)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：[https://bit.ly/35Va2KH](https://bit.ly/35Va2KH)
- en: Understanding RDS
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解RDS
- en: RDS allows users to stand up, scale, and operate relational database services
    without all the headache that comes with standing up your very own database servers.
    Aside from not having to locally allocate hardware and resources, RDS aims to
    lower the cost of ownership, which in turn allows companies to focus more on their
    own business goals and worry less about technology needs. Self-hosting databases
    tend to take up lots of time, money, and manpower – RDS enables owners to only
    need to create and configure their cloud database setup.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: RDS允许用户架设、扩展和操作关系数据库服务，而无需处理架设自己的数据库服务器所带来的所有麻烦。除了不必在本地分配硬件和资源外，RDS旨在降低所有权成本，从而使公司能够更多地专注于自己的业务目标，减少对技术需求的担忧。自行托管数据库往往需要大量的时间、金钱和人力资源-
    RDS使所有者只需要创建和配置他们的云数据库设置。
- en: Let's take a quick look at some of the advantages of using RDS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下使用RDS的一些优势。
- en: Advantages of using RDS
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RDS的优势
- en: There are numerous benefits and plus points as to why RDS is a great way to
    stand up databases for an infrastructure. Besides some of the ones that we have
    briefly already mentioned, it's good to know how we can scale quickly and securely
    with AWS and its related services.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RDS是架设基础设施数据库的一个很好的方式，有许多好处和优点。除了我们已经简要提到的一些优点之外，了解如何使用AWS及其相关服务快速且安全地扩展是很重要的。
- en: 'Let''s look at some quick points as to why RDS has an impactful advantage over
    other database services:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下RDS相对于其他数据库服务具有影响力优势的一些要点：
- en: '**Fast**: Simply a few clicks, and you have your very own database! Don''t
    fret that we aren''t doing any hands-on currently, we will be working with RDS
    quite a bit throughout this chapter.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速**：只需点击几下，您就拥有了自己的数据库！不要担心我们目前没有进行任何实际操作，我们将在本章中大量使用RDS。'
- en: '**Secure**: Both **data at rest** and **data in use** are encrypted.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：**数据在静止**和**数据在使用**都是加密的。'
- en: --**Data in use** is data that is currently transmitting from one source to
    another. It's important that this data be secure because someone could perform
    **a man in the middle** attack (**MiTM**). A MiTM attack is where an attacker
    is able to access data while it's moving over the wire. The unencrypted data is
    then retrieved by the attacker and used for malicious purposes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: --**数据在使用**是当前从一个源传输到另一个源的数据。这些数据的安全性很重要，因为有人可能会进行**中间人**攻击（**MiTM**）。中间人攻击是指攻击者能够在数据在传输过程中访问数据。然后，攻击者会检索未加密的数据，并用于恶意目的。
- en: --**Data at rest** is data that is currently stored – this includes backups.
    An attacker should not be able to access or view this data. Unencrypted data at
    rest creates a large risk that can allow attackers to view data if stolen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: --**数据在静止**是当前存储的数据-包括备份。攻击者不应能够访问或查看这些数据。静止的未加密数据会产生很大的风险，可以允许攻击者在数据被窃取时查看数据。
- en: --Database instances will automatically be patched. Some options allow the manual
    administration of patching – as you can imagine, this can lead to security issues
    if patches are not applied.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: --数据库实例将自动进行补丁。一些选项允许手动管理补丁-可以想象，如果不应用补丁，这可能会导致安全问题。
- en: '**Easy to Administer**: Being able to control all your databases through the
    AWS web console centrally makes things pretty seamless. However, it is important
    that database administrators ensure that they keep up with the constant demand
    of updating and scaling.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable**: With a few clicks, you can grow out your database to fit your
    needs. This allows you to expand your infrastructure with much less hassle due
    to not having to buy large abundances of hardware.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another benefit that is separate from this list is the cost benefits RDS produces
    for clients that choose it over not having it hosted locally. Companies can expect
    to save quite a bit of money by moving to AWS. This is largely due to not having
    to set up a physical infrastructure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: From a security standpoint, not having databases stored locally means that you
    do not have to worry about physical access control and physical security – also
    savings. The AWS shared security model ensures that Amazon will take ownership
    of physical devices, which includes the physical security of those devices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Now let's begin to look more exclusively at some services so that we can understand
    what type of services are hosted in RDS. The two services we will mention are
    MySQL and Aurora.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL is a standard database that is based on and around the **S**tructured
    **Q**uery **L**anguage, also known as **SQL**. The comprehensive database has
    become somewhat commonplace to use as a web database that acts as the backend
    database for web applications. So, chances are, when you're shopping online, you're
    interacting with a MySQL database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: While it doesn't pertain to much in this section, it is important to know that
    we will be using MySQL throughout this book. We will be looking at various database
    systems and going over the syntax used with those systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Aurora
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aurora is a MySQL- and PostgreSQL-compatible relational database built for
    durability and speed. It''s known to be much faster than other databases such
    as MySQL and PostgreSQL and provides the same advantages that we mentioned for
    RDS. It''s built with other AWS components in mind, such as the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: S3
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPCs and more…
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also managed by RDS, meaning that they use both the same management and
    admin functions that are dependent on AWS. We will take a deeper look at setting
    up Aurora and testing it in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*. Now that we know a little bit about
    what RDS is, let's take a look at actually setting up an RDS database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Setting up RDS (MySQL)
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up an RDS database, we will be using an older version of MySQL. You''ll
    be moving back and forth around RDS in the AWS console, so make sure you pin the
    RDS icon in your AWS console:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Pinning RDS as a shortcut'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B15630.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Pinning RDS as a shortcut
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: After that, make sure you are in the region you've been working with in this
    book and continue to make a database. Remember, it is important that we select
    the region that we have been using for our environment throughout this entire
    book. This allows all our resources to remain geographically in the same place.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the next instructions to create your own RDS instance:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **RDS** icon you created, and then select **Create database**:![Figure
    5.2 – Creating a new database
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B15630.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Creating a new database
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll need to select a database – we will be using **MySQL**. Make sure
    you use an older version, if not the oldest version available:![Figure 5.3 – Selecting
    MySQL
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B15630.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Selecting MySQL
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: After that, you'll be given a template to choose from. We want to avoid charges,
    so use the **Free tier** option:![Figure 5.4 – Selecting Free tier
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B15630.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Selecting Free tier
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Next, set the name, username, and password for the RDS instance:![ Figure 5.5
    – Creating a username and password
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B15630.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Creating a username and password
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have selected the option for the database to be public:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Making the RDS instance public'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B15630.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Making the RDS instance public
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: You now have an up-and-running RDS database! It will take some time for it to
    finish creating – once it's finished creating, you can access it via MySQL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: With our instance up and running, let's go ahead and add a rule to our security
    group that will allow the default MySQL port, `3306`, to open and allow traffic
    to the instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Adding a rule to the security group
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our instance is up, but not quite ready for us yet. Now you need to ensure there
    is inbound traffic allowed via port `3306` – this is the port we are going to
    be accessing our instance on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, follow these steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Click on the security group within your database:![Figure 5.7 – Creating a security
    group
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B15630.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Creating a security group
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Click on **VPC security groups**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the security group ID.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an inbound rule that allows `3306`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Editing rules'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B15630.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Editing rules
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Now you'll be allowed to connect to the database from your machine. Next, let's
    take a look at testing a connection to our newly set up database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Testing the connection
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your database up and running, it''s always a good sanity check
    to make sure you can connect to it – even if you aren''t going to be using it
    right away. To test the connection to our new database, let''s open up a Terminal
    in Kali and use `mysql` to access our database:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Connecting to RDS'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B15630.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Connecting to RDS
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: We now have a stable connection to our database! We will take a look at moving
    around in the database after we scan the server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how we can connect to our database, let's take a look
    at how we would scan our database during a penetration test.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Scanning RDS
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our RDS database up and running, let's take a look at how we
    would perform various scans on it. These techniques are exactly the techniques
    we would use in a pentest and can help us understand more about our *target* in
    our lab environment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help us achieve these results:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say this is a "real-life" pentest. The first thing we want to do is
    check our target and see what ports are open. In order to enumerate any information,
    we need to run a *basic scan* on the host:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will give the following output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Port 3306 is open on the instance'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B15630.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Port 3306 is open on the instance
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we run a version scan to see what version of the software is running
    on the port:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will give the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Port 3306'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B15630.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Port 3306
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we confirm the software version using Metasploit:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will give the following output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Scanning for MySQL versions with Metasploit'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B15630.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Scanning for MySQL versions with Metasploit
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Great, now we know what version is running!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the enumeration phase is to see what CVEs are associated with
    this version. We are going to look at some CVEs listed using a script built within
    Nmap.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'CVEs provide a reference for various vulnerabilities and exploits you may find
    during an assessment. You can find more about CVEs here: https://cve.mitre.org/.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's pull a new CVE repo, and run an Nmap scan with the updated CVE repo.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide us:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you''ll need to get the following from GitHub: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan).'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can execute it by using the `git clone` command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then run your scan:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will give you the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Information from Vulnscan'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B15630.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Information from Vulnscan
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the output of the scan is showing us various CVEs that we can
    look up. You can use the MITRE database to look up CVEs here: [https://cve.mitre.org/](https://cve.mitre.org/).
    CVEs are a fairly deep topic that would divert from this book a little bit, so
    it''s best to simply understand that CVEs are references for vulnerabilities and
    exploits that you may discover during your pentest.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, there are various ways to scan – I mean skin – a cat! Scanning
    a host allows you to see any service and ports that are open that can be a possible
    foothold into a server. In pentesting, no port is left overlooked and no services
    are left in the dust. Enumeration is key, and scanning can be the biggest tactic
    in enumeration!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at some quick references for SQL syntax that will help us move
    through the rest of this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Understanding basic SQL syntax
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to understand SQL syntax – especially now that we will be interacting
    with a SQL "shell" via MySQL. Essentially, the syntax is the language of the system,
    applications, and devices you are interacting with, so it is extremely important
    that you know some basics and how to use the syntax.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of basic commands that fall within MySQL syntax:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT`: Extracts data from a database'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPDATE`: Updates information in a database'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: Deletes data from a database'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHOW`: Displays data in a database or table'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USE`: Switches to a database'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT INTO`: Inserts new data into a database'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CREATE DATABASE`: Creates a new database'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALTER DATABASE`: Modifies a database'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CREATE TABLE`: Creates a new table'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know some simple syntax, let's go ahead and apply it and start
    moving around in our new database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Database maneuvering and exploration
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to move around in a database isn't only important for pentesting;
    it's also very important to understand as a technologist. Databases are used by
    everything and you're going to come across databases more than your own fair share
    of times, so it is important that you understand the syntax for how to use them.
    Also, if you don't know where you're going, then how do you get there? What if
    you don't even know where to start? That's what it can be like moving in MySQL
    if you don't apply your knowledge to actual testing. Since we have mentioned syntax,
    let's actually use it in this next portion. To begin, make sure you are connected
    to your RDS database. Once connected, move forward in the section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Let's say this was a real pentest, and you were granted access to the database,
    but need to find misconfigurations. The first thing you want to do when getting
    access to the server is to show all the databases on the server.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use some commands that will help us maneuver in our database:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the databases in our instance:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will give us the following output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Listing out the databases in RDS'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B15630.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Listing out the databases in RDS
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, we now know what databases are on the server. Next, let''s take a look
    at the MySQL database – this typically hosts usernames and passwords:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s look at the tables within that database:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following tables are displayed:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Displaying tables'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B15630.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Displaying tables
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see a table titled `user`. Go ahead and show the data within that table:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will give us the following output:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Listing out info from the user table'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B15630.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Listing out info from the user table
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: You'll get some data back that looks like the mess of data illustrated in our
    screenshot. If you look at it, you can see each username and its hash. By default,
    MySQL uses SHA-1 hashes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s ensure we saw all the users by querying only the users:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give us the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Users in human-readable text'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.17_B15630.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – Users in human-readable text
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have usernames and their hashes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`rdsadmin`:`*AAEED912FFD9F3EBB625FBE039BB2A88FB8C4187`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql.sys`:`*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin`:`*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving forward, let's take a look and see whether there is a more natural way
    to look at the usernames and hashes from the Terminal. When pentesting, it's good
    practice to be able to effectively illustrate a technique in one screenshot. Doing
    so helps your client understand and looks more professional when putting it into
    a report.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by dumping hashes using Metasploit. Let's move forward and look
    at how we can do this.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Dumping hashes with Metasploit
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dumping hashes is a great way to get passwords from users. While the hashes
    are not the passwords themselves, they can be either cracked or used in a "hash"
    passing attack – a technique that allows you to use a hashed password for authentication.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute our `hashdump`, we need to use `mysql_hashdump` and set the parameters
    to fit your target. Ensure that you use the database username and password:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Dumping hashes'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.18_B15630.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Dumping hashes
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have successfully dumped the database hashes and can provide
    a more concise screenshot that could be lodged into a pentest report.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have figured out ways to move around and locate users and passwords,
    let's keep moving and see how we could create databases and use **crumbs** during
    a pentest.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Creating RDS databases
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's common to leave **crumbs** behind when performing a pentest. These crumbs
    are often called **artifacts** and are internally left in order to let clients
    know they were actually in the system they said they were in. Additionally, when
    the pentesters revisit the system months later, they will know if the system was
    fixed by seeing whether the artifact has been removed or not. If the artifact
    is still there, it's a good indicator that the system's issues were not resolved
    – typically, because administrators would remove the artifact while fixing the
    problems.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'For our MySQL server, we are going to create a database titled `pentest`. If
    this were a real engagement, it simply would be left behind as an *I was here*
    statement:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to your database and enter the following command to create the database:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that you have a database created, it''s a good measure to double-check
    and make sure it was created correctly:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot will show you the output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Displaying our new database'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.19_B15630.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – Displaying our new database
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have made a database, we understand quite a bit more about RDS,
    MySQL, and how we can move about databases. Now let's discuss some common misconfigurations
    and perform a hands-on brute-forcing exercise to get a real view of the issues
    stemming from misconfigurations.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Understanding misconfigurations
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Misconfigurations can be the end of a database if not corrected quickly and
    effectively. More often than not, these issues arise from poor hygiene or a lack
    of knowledge on the part of administrators. The holes left in databases are treasure
    troves for nasty hackers, and lots of fun for pentesters, however, just because
    they are fun for pentesters does not mean that they should be there!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a few common issues that you may or may not find in your
    technology career.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Weak passwords
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Weak passwords tend to derive from either default passwords or from common
    passwords. Find out more about what weak passwords here: https://cwe.mitre.org/data/definitions/521.html.
    Weak passwords are passwords that typically can be easily guessed. The following
    is a list of passwords that would be considered weak:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Admin
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12345qwer
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password123
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help illustrate just how dangerous weak passwords are, let's look at some
    tools that we could use to brute-force the weak password for our admin account
    on our recently created RDS database.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助说明弱密码有多危险，让我们看一些工具，我们可以用来暴力破解我们最近创建的RDS数据库上管理员帐户的弱密码。
- en: Hydra
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Hydra
- en: Hydra is a great tool to use when you need to crack login passwords – it's fast,
    easy, and flexible for various protocols. In our case, we are going to use it
    to brute-force our RDS database login.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是一个很棒的工具，当您需要破解登录密码时可以使用它-它对各种协议都很快速、简单且灵活。在我们的情况下，我们将使用它来暴力破解我们的RDS数据库登录。
- en: 'Before you begin, make sure you have a short password list to test out against
    the RDS login. I''d recommend using 10 passwords or so and storing them in a `.txt`
    file. Once you have the password file created, use the following command to brute-force
    the database using the known password, `admin`, and a password list:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您有一个短密码列表可用于针对RDS登录进行测试。我建议使用大约10个密码并将它们存储在`.txt`文件中。创建密码文件后，使用以下命令使用已知密码`admin`和密码列表来暴力破解数据库：
- en: '[PRE13]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will give us the following output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.20 – Brute-forcing with Hydra'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.20 - 使用Hydra暴力破解'
- en: '](img/Figure_5.20_B15630.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.20_B15630.jpg)'
- en: Figure 5.20 – Brute-forcing with Hydra
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20 - 使用Hydra暴力破解
- en: As you can see, Hydra displays the found password and username in green – making
    it easier for us to read. Now let's look at another tool, Medusa.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Hydra以绿色显示找到的密码和用户名-这样我们更容易阅读。现在让我们看看另一个工具，Medusa。
- en: Medusa
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Medusa
- en: 'Medusa is the same as Hyrda – as in, it is a great and fast tool to brute-force
    login credentials. Just as before, let''s use our password list and known username
    to brute-force our RDS login:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Medusa与Hyrda相同-它是一个用于暴力破解登录凭据的出色且快速的工具。就像以前一样，让我们使用我们的密码列表和已知用户名来暴力破解我们的RDS登录：
- en: '[PRE14]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will give us the following output:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们以下输出：
- en: '![Figure 5.21 – Brute-forcing with Medusa'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.21 - 使用Medusa暴力破解'
- en: '](img/Figure_5.21_B15630.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.21_B15630.jpg)'
- en: Figure 5.21 – Brute-forcing with Medusa
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21 - 使用Medusa暴力破解
- en: Notice the last line displaying `ACCOUNT FOUND`, showing that a username and
    password have been found.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一行显示`ACCOUNT FOUND`，表明已找到用户名和密码。
- en: Metasploit
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Metasploit
- en: 'Metasploit also has a great module built in to let us use brute force! Just
    like the other times, use your password list and known username to brute-force
    the login! To find the module, search for the `mysql_login` scanner and target
    your RDS instance:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit还内置了一个很棒的模块，让我们使用暴力破解！就像以前一样，使用您的密码列表和已知用户名来暴力破解登录！要找到该模块，请搜索`mysql_login`扫描程序并针对您的RDS实例：
- en: '![Figure 5.22 – Brute forcing with Metasploit'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.22 - 使用Metasploit暴力破解'
- en: '](img/Figure_5.22_B15630.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.22_B15630.jpg)'
- en: Figure 5.22 – Brute forcing with Metasploit
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22 - 使用Metasploit暴力破解
- en: You now have had some time to look at various issues within databases, while
    also pentesting for weak passwords. If you inspect the output of the tool, you'll
    see the words `LOGIN FAILED`, which indicates we were not successful at gaining
    credentials. However, if you look at the output that says `SUCCESS`, you'll see
    that the credentials `admin:password` have been found.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有一些时间来查看数据库中的各种问题，同时也为弱密码进行渗透测试。如果您检查工具的输出，您将看到`LOGIN FAILED`这些词，这表明我们未能成功获取凭据。但是，如果您查看显示`SUCCESS`的输出，您将看到已找到凭据`admin:password`。
- en: Now let's discuss some more about some of the issues we see in databases, some
    of which you may discover during your pentest career.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更多地讨论一些我们在数据库中看到的问题，其中一些您可能在渗透测试职业中发现。
- en: Unpatched databases
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未打补丁的数据库
- en: Unpatched systems are a significant issue that – at times – can be easy for
    malicious hackers. So why don't companies patch their systems or have automated
    patching enabled? Unfortunately, it isn't that simple. Many companies face issues
    with patching due to specific patches having adverse effects on their systems
    and applications. Also, patching can take time and can cause downtime to servers.
    If a server isn't running, typically, that translates to a loss in revenue for
    organizations.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 未打补丁的系统是一个重大问题，有时对恶意黑客来说可能很容易。那么为什么公司不打补丁他们的系统或启用自动打补丁呢？不幸的是，情况并不那么简单。许多公司在打补丁时面临问题，因为特定的补丁对其系统和应用程序产生不利影响。此外，打补丁需要时间，可能会导致服务器停机。如果服务器停机，通常意味着组织的收入损失。
- en: This is why pentesting is now becoming such a big career field. Companies are
    having issues keeping up with the constant grind of having to update their security
    posture and it can seem virtually impossible to look at everything. Pentesting
    helps relieve that issue by continuously looking for unpatched systems and exploiting
    vulnerabilities. Doing so allows companies to assess the risk associated with
    unpatched systems and plan accordingly.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么渗透测试现在成为如此重要的职业领域。公司在不断更新其安全姿态方面遇到问题，似乎几乎不可能查看所有内容。渗透测试通过不断寻找未打补丁的系统并利用漏洞来帮助缓解这一问题。这样做可以让公司评估与未打补丁系统相关的风险并做出相应的计划。
- en: Now let's start to wrap up, but before we do, we are going to take a quick look
    at injection. Injection is one of the most impactful vulnerabilities found within
    web applications that allow access to the backend database.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始总结，但在此之前，我们将快速看一下注入。注入是在允许访问后端数据库的Web应用程序中发现的最具影响力的漏洞之一。
- en: Learning about injection points
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习注入点
- en: While we aren't going to do any "hands-on" with injection in this chapter, it's
    essential to understand what injection is, how it works, and why it's an issue
    that remains one of the top issues within web applications. We will look at a
    more hands-on implementation of injection in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*, when we set up a vulnerable environment
    for SQL injection exercises.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: What is an injection?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An injection is a flaw within an application that allows malicious statements
    to be executed. While it may not seem "too evil," these statements can be statements
    that actually control databases – ultimately giving unauthorized users control
    of a system. This means that if not corrected, the flaw could allow malicious
    users to access sensitive data or even completely take over the database.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, a point of entry needs to be found; this is typically a vulnerable
    input section within a web page or web application. The vulnerable point of entry
    usually has direct access to the SQL database and allows users to make queries
    that directly query from the database. Once discovered, a malicious payload is
    sent to the database and is executed server-side. Let's take a look at a **proof-of-concept**
    (**POC**) that illustrates a very basic injection sting that will allow an unauthorized
    query of a username and password.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Pseudocode
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we are going to use pseudocode – which is not really coding;
    it''s code that is easy to read and helps the reader understand what actions are
    being performed. The following string is pseudocode, meaning it may or may not
    actually work in a real scenario:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following query will attempt to retrieve the administrator username and
    password but will fail because the database will see that the user does not have
    the right to access the server. Think of this as a **FALSE** statement. A **FALSE**
    statement simply means that the server will not execute the command because the
    query is not legitimate (there are multiple ways it could be illegitimate).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if the database doesn''t execute false commands, that means it should run
    a **TRUE** statement. Let''s change our query to make it **TRUE**:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By adding `OR 1=1'` to the end of the query, we have made it a `1` does equal
    `1` – making it true. Doing so allows the retrieval of the administrator's username
    and password.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Remember that pseudocode is not real code. The purpose of pseudocode is to lay
    out a "roadmap" of possibilities.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Why is it an issue?
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, injection impacts both business employees and clients. Injection
    points can allow anything from the total control of a database to leaking sensitive
    information. It's exceptionally critical when standing up a new database, that
    the frontend website sanitizes input to help prevent these types of attacks.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned quite a bit about databases – such as RDS, MySQL,
    and Aurora. We also took a quick dive into MySQL syntax to help us better understand
    what commands are and what they are doing when we are in an interactive MySQL
    shell. We learned how to set up a database using RDS, and also learned how to
    create a database within the RDS database. We then learned how to brute-force
    databases, while also learning the severity of the effect weak passwords have
    on databases.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will begin using knowledge gained from this chapter
    and implementing it in more hands-on practice, while also building out environments
    in AWS.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL injection: [https://portswigger.net/web-security/sql-injection](https://portswigger.net/web-security/sql-injection)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database vulnerabilities: [https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676](https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
