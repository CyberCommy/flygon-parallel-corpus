- en: '*Chapter 5*: Understanding Vulnerable RDS Services'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon **Relational Database Service** (**RDS**) provides scalable and easy
    to set up cloud-based databases that allow users to operate them just as they
    would a typical database. RDS enables users to interact with databases via services
    such as MySQL and Amazon Aurora, just as a user would in a standard physical database
    infrastructure. The downfall of RDS is the same as regular databases – injection
    and misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go over what RDS is by discussing some key points and
    setting up an RDS database using MySQL. After setting up the database, we will
    scan it and then use it to apply syntax and learn necessary "movements" and commands
    that will allow us to navigate throughout a small MySQL database. Afterward, we
    will take a look at how severe weak passwords are by actually brute-forcing login
    credentials and finish up by understanding what **SQL Injection** (**SQLi**) is
    and what its impact is on databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up RDS (MySQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding basic SQL syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database maneuvering and exploration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about injection points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nmap**: [https://nmap.org/download.html](https://nmap.org/download.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hydra**: [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medusa**: [https://github.com/jmk-foofus/medusa](https://github.com/jmk-foofus/medusa)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnscan**: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/35Va2KH](https://bit.ly/35Va2KH)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RDS allows users to stand up, scale, and operate relational database services
    without all the headache that comes with standing up your very own database servers.
    Aside from not having to locally allocate hardware and resources, RDS aims to
    lower the cost of ownership, which in turn allows companies to focus more on their
    own business goals and worry less about technology needs. Self-hosting databases
    tend to take up lots of time, money, and manpower – RDS enables owners to only
    need to create and configure their cloud database setup.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a quick look at some of the advantages of using RDS.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using RDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are numerous benefits and plus points as to why RDS is a great way to
    stand up databases for an infrastructure. Besides some of the ones that we have
    briefly already mentioned, it's good to know how we can scale quickly and securely
    with AWS and its related services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some quick points as to why RDS has an impactful advantage over
    other database services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fast**: Simply a few clicks, and you have your very own database! Don''t
    fret that we aren''t doing any hands-on currently, we will be working with RDS
    quite a bit throughout this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure**: Both **data at rest** and **data in use** are encrypted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: --**Data in use** is data that is currently transmitting from one source to
    another. It's important that this data be secure because someone could perform
    **a man in the middle** attack (**MiTM**). A MiTM attack is where an attacker
    is able to access data while it's moving over the wire. The unencrypted data is
    then retrieved by the attacker and used for malicious purposes.
  prefs: []
  type: TYPE_NORMAL
- en: --**Data at rest** is data that is currently stored – this includes backups.
    An attacker should not be able to access or view this data. Unencrypted data at
    rest creates a large risk that can allow attackers to view data if stolen.
  prefs: []
  type: TYPE_NORMAL
- en: --Database instances will automatically be patched. Some options allow the manual
    administration of patching – as you can imagine, this can lead to security issues
    if patches are not applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to Administer**: Being able to control all your databases through the
    AWS web console centrally makes things pretty seamless. However, it is important
    that database administrators ensure that they keep up with the constant demand
    of updating and scaling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable**: With a few clicks, you can grow out your database to fit your
    needs. This allows you to expand your infrastructure with much less hassle due
    to not having to buy large abundances of hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another benefit that is separate from this list is the cost benefits RDS produces
    for clients that choose it over not having it hosted locally. Companies can expect
    to save quite a bit of money by moving to AWS. This is largely due to not having
    to set up a physical infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: From a security standpoint, not having databases stored locally means that you
    do not have to worry about physical access control and physical security – also
    savings. The AWS shared security model ensures that Amazon will take ownership
    of physical devices, which includes the physical security of those devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's begin to look more exclusively at some services so that we can understand
    what type of services are hosted in RDS. The two services we will mention are
    MySQL and Aurora.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL is a standard database that is based on and around the **S**tructured
    **Q**uery **L**anguage, also known as **SQL**. The comprehensive database has
    become somewhat commonplace to use as a web database that acts as the backend
    database for web applications. So, chances are, when you're shopping online, you're
    interacting with a MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: While it doesn't pertain to much in this section, it is important to know that
    we will be using MySQL throughout this book. We will be looking at various database
    systems and going over the syntax used with those systems.
  prefs: []
  type: TYPE_NORMAL
- en: Aurora
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aurora is a MySQL- and PostgreSQL-compatible relational database built for
    durability and speed. It''s known to be much faster than other databases such
    as MySQL and PostgreSQL and provides the same advantages that we mentioned for
    RDS. It''s built with other AWS components in mind, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPCs and more…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also managed by RDS, meaning that they use both the same management and
    admin functions that are dependent on AWS. We will take a deeper look at setting
    up Aurora and testing it in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*. Now that we know a little bit about
    what RDS is, let's take a look at actually setting up an RDS database.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up RDS (MySQL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up an RDS database, we will be using an older version of MySQL. You''ll
    be moving back and forth around RDS in the AWS console, so make sure you pin the
    RDS icon in your AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Pinning RDS as a shortcut'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Pinning RDS as a shortcut
  prefs: []
  type: TYPE_NORMAL
- en: After that, make sure you are in the region you've been working with in this
    book and continue to make a database. Remember, it is important that we select
    the region that we have been using for our environment throughout this entire
    book. This allows all our resources to remain geographically in the same place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the next instructions to create your own RDS instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **RDS** icon you created, and then select **Create database**:![Figure
    5.2 – Creating a new database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Creating a new database
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll need to select a database – we will be using **MySQL**. Make sure
    you use an older version, if not the oldest version available:![Figure 5.3 – Selecting
    MySQL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Selecting MySQL
  prefs: []
  type: TYPE_NORMAL
- en: After that, you'll be given a template to choose from. We want to avoid charges,
    so use the **Free tier** option:![Figure 5.4 – Selecting Free tier
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Selecting Free tier
  prefs: []
  type: TYPE_NORMAL
- en: Next, set the name, username, and password for the RDS instance:![ Figure 5.5
    – Creating a username and password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Creating a username and password
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have selected the option for the database to be public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Making the RDS instance public'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Making the RDS instance public
  prefs: []
  type: TYPE_NORMAL
- en: You now have an up-and-running RDS database! It will take some time for it to
    finish creating – once it's finished creating, you can access it via MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: With our instance up and running, let's go ahead and add a rule to our security
    group that will allow the default MySQL port, `3306`, to open and allow traffic
    to the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a rule to the security group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our instance is up, but not quite ready for us yet. Now you need to ensure there
    is inbound traffic allowed via port `3306` – this is the port we are going to
    be accessing our instance on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the security group within your database:![Figure 5.7 – Creating a security
    group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Creating a security group
  prefs: []
  type: TYPE_NORMAL
- en: Click on **VPC security groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the security group ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an inbound rule that allows `3306`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Editing rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Editing rules
  prefs: []
  type: TYPE_NORMAL
- en: Now you'll be allowed to connect to the database from your machine. Next, let's
    take a look at testing a connection to our newly set up database.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your database up and running, it''s always a good sanity check
    to make sure you can connect to it – even if you aren''t going to be using it
    right away. To test the connection to our new database, let''s open up a Terminal
    in Kali and use `mysql` to access our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Connecting to RDS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Connecting to RDS
  prefs: []
  type: TYPE_NORMAL
- en: We now have a stable connection to our database! We will take a look at moving
    around in the database after we scan the server.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how we can connect to our database, let's take a look
    at how we would scan our database during a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning RDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our RDS database up and running, let's take a look at how we
    would perform various scans on it. These techniques are exactly the techniques
    we would use in a pentest and can help us understand more about our *target* in
    our lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help us achieve these results:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say this is a "real-life" pentest. The first thing we want to do is
    check our target and see what ports are open. In order to enumerate any information,
    we need to run a *basic scan* on the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Port 3306 is open on the instance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Port 3306 is open on the instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we run a version scan to see what version of the software is running
    on the port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Port 3306'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Port 3306
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we confirm the software version using Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Scanning for MySQL versions with Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Scanning for MySQL versions with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: Great, now we know what version is running!
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the enumeration phase is to see what CVEs are associated with
    this version. We are going to look at some CVEs listed using a script built within
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'CVEs provide a reference for various vulnerabilities and exploits you may find
    during an assessment. You can find more about CVEs here: https://cve.mitre.org/.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's pull a new CVE repo, and run an Nmap scan with the updated CVE repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you''ll need to get the following from GitHub: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can execute it by using the `git clone` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run your scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Information from Vulnscan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Information from Vulnscan
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the output of the scan is showing us various CVEs that we can
    look up. You can use the MITRE database to look up CVEs here: [https://cve.mitre.org/](https://cve.mitre.org/).
    CVEs are a fairly deep topic that would divert from this book a little bit, so
    it''s best to simply understand that CVEs are references for vulnerabilities and
    exploits that you may discover during your pentest.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, there are various ways to scan – I mean skin – a cat! Scanning
    a host allows you to see any service and ports that are open that can be a possible
    foothold into a server. In pentesting, no port is left overlooked and no services
    are left in the dust. Enumeration is key, and scanning can be the biggest tactic
    in enumeration!
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at some quick references for SQL syntax that will help us move
    through the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding basic SQL syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to understand SQL syntax – especially now that we will be interacting
    with a SQL "shell" via MySQL. Essentially, the syntax is the language of the system,
    applications, and devices you are interacting with, so it is extremely important
    that you know some basics and how to use the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of basic commands that fall within MySQL syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT`: Extracts data from a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPDATE`: Updates information in a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: Deletes data from a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHOW`: Displays data in a database or table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USE`: Switches to a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT INTO`: Inserts new data into a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CREATE DATABASE`: Creates a new database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALTER DATABASE`: Modifies a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CREATE TABLE`: Creates a new table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know some simple syntax, let's go ahead and apply it and start
    moving around in our new database.
  prefs: []
  type: TYPE_NORMAL
- en: Database maneuvering and exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to move around in a database isn't only important for pentesting;
    it's also very important to understand as a technologist. Databases are used by
    everything and you're going to come across databases more than your own fair share
    of times, so it is important that you understand the syntax for how to use them.
    Also, if you don't know where you're going, then how do you get there? What if
    you don't even know where to start? That's what it can be like moving in MySQL
    if you don't apply your knowledge to actual testing. Since we have mentioned syntax,
    let's actually use it in this next portion. To begin, make sure you are connected
    to your RDS database. Once connected, move forward in the section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say this was a real pentest, and you were granted access to the database,
    but need to find misconfigurations. The first thing you want to do when getting
    access to the server is to show all the databases on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use some commands that will help us maneuver in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the databases in our instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Listing out the databases in RDS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Listing out the databases in RDS
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, we now know what databases are on the server. Next, let''s take a look
    at the MySQL database – this typically hosts usernames and passwords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s look at the tables within that database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following tables are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Displaying tables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Displaying tables
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see a table titled `user`. Go ahead and show the data within that table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Listing out info from the user table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Listing out info from the user table
  prefs: []
  type: TYPE_NORMAL
- en: You'll get some data back that looks like the mess of data illustrated in our
    screenshot. If you look at it, you can see each username and its hash. By default,
    MySQL uses SHA-1 hashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s ensure we saw all the users by querying only the users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Users in human-readable text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.17_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – Users in human-readable text
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have usernames and their hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rdsadmin`:`*AAEED912FFD9F3EBB625FBE039BB2A88FB8C4187`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql.sys`:`*THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin`:`*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving forward, let's take a look and see whether there is a more natural way
    to look at the usernames and hashes from the Terminal. When pentesting, it's good
    practice to be able to effectively illustrate a technique in one screenshot. Doing
    so helps your client understand and looks more professional when putting it into
    a report.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by dumping hashes using Metasploit. Let's move forward and look
    at how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping hashes with Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dumping hashes is a great way to get passwords from users. While the hashes
    are not the passwords themselves, they can be either cracked or used in a "hash"
    passing attack – a technique that allows you to use a hashed password for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute our `hashdump`, we need to use `mysql_hashdump` and set the parameters
    to fit your target. Ensure that you use the database username and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Dumping hashes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.18_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Dumping hashes
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have successfully dumped the database hashes and can provide
    a more concise screenshot that could be lodged into a pentest report.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have figured out ways to move around and locate users and passwords,
    let's keep moving and see how we could create databases and use **crumbs** during
    a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Creating RDS databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's common to leave **crumbs** behind when performing a pentest. These crumbs
    are often called **artifacts** and are internally left in order to let clients
    know they were actually in the system they said they were in. Additionally, when
    the pentesters revisit the system months later, they will know if the system was
    fixed by seeing whether the artifact has been removed or not. If the artifact
    is still there, it's a good indicator that the system's issues were not resolved
    – typically, because administrators would remove the artifact while fixing the
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our MySQL server, we are going to create a database titled `pentest`. If
    this were a real engagement, it simply would be left behind as an *I was here*
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to your database and enter the following command to create the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have a database created, it''s a good measure to double-check
    and make sure it was created correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot will show you the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Displaying our new database'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.19_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – Displaying our new database
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have made a database, we understand quite a bit more about RDS,
    MySQL, and how we can move about databases. Now let's discuss some common misconfigurations
    and perform a hands-on brute-forcing exercise to get a real view of the issues
    stemming from misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding misconfigurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Misconfigurations can be the end of a database if not corrected quickly and
    effectively. More often than not, these issues arise from poor hygiene or a lack
    of knowledge on the part of administrators. The holes left in databases are treasure
    troves for nasty hackers, and lots of fun for pentesters, however, just because
    they are fun for pentesters does not mean that they should be there!
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a few common issues that you may or may not find in your
    technology career.
  prefs: []
  type: TYPE_NORMAL
- en: Weak passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Weak passwords tend to derive from either default passwords or from common
    passwords. Find out more about what weak passwords here: https://cwe.mitre.org/data/definitions/521.html.
    Weak passwords are passwords that typically can be easily guessed. The following
    is a list of passwords that would be considered weak:'
  prefs: []
  type: TYPE_NORMAL
- en: Admin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12345qwer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help illustrate just how dangerous weak passwords are, let's look at some
    tools that we could use to brute-force the weak password for our admin account
    on our recently created RDS database.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hydra is a great tool to use when you need to crack login passwords – it's fast,
    easy, and flexible for various protocols. In our case, we are going to use it
    to brute-force our RDS database login.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have a short password list to test out against
    the RDS login. I''d recommend using 10 passwords or so and storing them in a `.txt`
    file. Once you have the password file created, use the following command to brute-force
    the database using the known password, `admin`, and a password list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Brute-forcing with Hydra'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.20_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – Brute-forcing with Hydra
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Hydra displays the found password and username in green – making
    it easier for us to read. Now let's look at another tool, Medusa.
  prefs: []
  type: TYPE_NORMAL
- en: Medusa
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Medusa is the same as Hyrda – as in, it is a great and fast tool to brute-force
    login credentials. Just as before, let''s use our password list and known username
    to brute-force our RDS login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Brute-forcing with Medusa'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.21_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.21 – Brute-forcing with Medusa
  prefs: []
  type: TYPE_NORMAL
- en: Notice the last line displaying `ACCOUNT FOUND`, showing that a username and
    password have been found.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Metasploit also has a great module built in to let us use brute force! Just
    like the other times, use your password list and known username to brute-force
    the login! To find the module, search for the `mysql_login` scanner and target
    your RDS instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Brute forcing with Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.22_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.22 – Brute forcing with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: You now have had some time to look at various issues within databases, while
    also pentesting for weak passwords. If you inspect the output of the tool, you'll
    see the words `LOGIN FAILED`, which indicates we were not successful at gaining
    credentials. However, if you look at the output that says `SUCCESS`, you'll see
    that the credentials `admin:password` have been found.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's discuss some more about some of the issues we see in databases, some
    of which you may discover during your pentest career.
  prefs: []
  type: TYPE_NORMAL
- en: Unpatched databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unpatched systems are a significant issue that – at times – can be easy for
    malicious hackers. So why don't companies patch their systems or have automated
    patching enabled? Unfortunately, it isn't that simple. Many companies face issues
    with patching due to specific patches having adverse effects on their systems
    and applications. Also, patching can take time and can cause downtime to servers.
    If a server isn't running, typically, that translates to a loss in revenue for
    organizations.
  prefs: []
  type: TYPE_NORMAL
- en: This is why pentesting is now becoming such a big career field. Companies are
    having issues keeping up with the constant grind of having to update their security
    posture and it can seem virtually impossible to look at everything. Pentesting
    helps relieve that issue by continuously looking for unpatched systems and exploiting
    vulnerabilities. Doing so allows companies to assess the risk associated with
    unpatched systems and plan accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's start to wrap up, but before we do, we are going to take a quick look
    at injection. Injection is one of the most impactful vulnerabilities found within
    web applications that allow access to the backend database.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about injection points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we aren't going to do any "hands-on" with injection in this chapter, it's
    essential to understand what injection is, how it works, and why it's an issue
    that remains one of the top issues within web applications. We will look at a
    more hands-on implementation of injection in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281)*,
    Setting Up and Pentesting AWS Aurora RDS*, when we set up a vulnerable environment
    for SQL injection exercises.
  prefs: []
  type: TYPE_NORMAL
- en: What is an injection?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An injection is a flaw within an application that allows malicious statements
    to be executed. While it may not seem "too evil," these statements can be statements
    that actually control databases – ultimately giving unauthorized users control
    of a system. This means that if not corrected, the flaw could allow malicious
    users to access sensitive data or even completely take over the database.
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, a point of entry needs to be found; this is typically a vulnerable
    input section within a web page or web application. The vulnerable point of entry
    usually has direct access to the SQL database and allows users to make queries
    that directly query from the database. Once discovered, a malicious payload is
    sent to the database and is executed server-side. Let's take a look at a **proof-of-concept**
    (**POC**) that illustrates a very basic injection sting that will allow an unauthorized
    query of a username and password.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudocode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we are going to use pseudocode – which is not really coding;
    it''s code that is easy to read and helps the reader understand what actions are
    being performed. The following string is pseudocode, meaning it may or may not
    actually work in a real scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The following query will attempt to retrieve the administrator username and
    password but will fail because the database will see that the user does not have
    the right to access the server. Think of this as a **FALSE** statement. A **FALSE**
    statement simply means that the server will not execute the command because the
    query is not legitimate (there are multiple ways it could be illegitimate).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if the database doesn''t execute false commands, that means it should run
    a **TRUE** statement. Let''s change our query to make it **TRUE**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By adding `OR 1=1'` to the end of the query, we have made it a `1` does equal
    `1` – making it true. Doing so allows the retrieval of the administrator's username
    and password.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that pseudocode is not real code. The purpose of pseudocode is to lay
    out a "roadmap" of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Why is it an issue?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, injection impacts both business employees and clients. Injection
    points can allow anything from the total control of a database to leaking sensitive
    information. It's exceptionally critical when standing up a new database, that
    the frontend website sanitizes input to help prevent these types of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned quite a bit about databases – such as RDS, MySQL,
    and Aurora. We also took a quick dive into MySQL syntax to help us better understand
    what commands are and what they are doing when we are in an interactive MySQL
    shell. We learned how to set up a database using RDS, and also learned how to
    create a database within the RDS database. We then learned how to brute-force
    databases, while also learning the severity of the effect weak passwords have
    on databases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will begin using knowledge gained from this chapter
    and implementing it in more hands-on practice, while also building out environments
    in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL injection: [https://portswigger.net/web-security/sql-injection](https://portswigger.net/web-security/sql-injection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database vulnerabilities: [https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676](https://www.darkreading.com/vulnerabilities---threats/the-10-most-common-database-vulnerabilities/d/d-id/1134676)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
