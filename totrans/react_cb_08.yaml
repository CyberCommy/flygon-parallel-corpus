- en: Creating an API with Node.js Using MongoDB and MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic API with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a database with MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a database with MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding access tokens to secure our API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Node.js official website ([https://nodejs.org](https://nodejs.org)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Node.js is a JavaScript runtime built on Chrome''s V8 JavaScript engine. Node.js
    uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.
    Node.js'' package ecosystem, npm, is the largest ecosystem of open source libraries
    in the world.*'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is widely used as a backend for web applications because it is easy
    to create an API and its performance is better than technologies such as Java,
    PHP, or Ruby. Usually, the most popular way to use Node.js is by using a framework
    called Express.
  prefs: []
  type: TYPE_NORMAL
- en: 'From Express official website ([https://expressjs.com](https://expressjs.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Express is a minimal and flexible Node.js web application framework that provides
    a robust set of features for web and mobile applications.*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic API with Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Express is the most popular Node.js framework and is easy to install and to
    use. In this recipe we are going to create, configure, and install a basic API
    using Express.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to install Node. You need to go to the official website, [www.nodejs.org](http://www.nodejs.org),
    and then download Node.js. There are two versions: the **LTS** (**Long Term Support**)
    version and the current version, which has the latest features. In my opinion,
    it is always better to choose the LTS version, but it''s up to you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Node, you can check which version you have by running
    this command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, Node includes Node Package Manager (npm) by default. You can check which
    version you have with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to install Express. To do this, there is a package called `express-generator`,
    which will allow us to create an Express application with a simple command. We
    need to install it globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After we installed `express-generator`, we can create an Express application.
    I usually prefer to create a directory called `projects` inside my home folder
    on my Mac, or if you use Windows, you can make it at `C:\projects`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run the command, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0bccf184-aa0c-4f1f-b259-cd47fab12921.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you follow the instructions to run the application, you will see the Express
    application running at `http://localhost:3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d25ab16-c785-45b9-a461-48372d15b22e.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code generated by default with `express-generator` is ES5 code, using `var`,
    `require`, `module.exports`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is convert this code to be ES6\. To do this,
    let''s first modify our `app.js` file. This is the original code of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: app.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Migrating to ES6, we should have this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: app.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s remove our `bin/www`directory because we had added `app.listen(3000);`
    at the end of our file, and then you need to modify the `start` script in `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to run your application with `npm start` you will get this error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5a034ddd-3709-48a5-9351-cb80a902b114.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This error is because our ES6 code does not work directly with Node. We need
    to use Babel to compile our file and be able to write ES6 code. For this, we need
    to install `babel-cli` globally and also the `babel-preset-es2015` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To make it work, we need to create a new file called `.babelrc` and add our
    `es2015` preset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to change your `start` script again and switch `node` to `babel-node`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: If you run `npm start` in your terminal, you should be able to run the application
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After we have changed our code to ES6, we have another issue. If you modify
    a file and you save it in the application, it will not refresh. Also, if for some
    reason our application crashes, then our server will stop working. The way to
    fix this is by using a Node watcher. The most popular one is `nodemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to modify your `start` script for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you make any changes to your application (for example, in the `routes/index.js`
    file, you can change the text `Express` on line 6  for any other content), you
    will see how the server restarts itself and refreshes the site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2bd39c52-2994-49e6-8e43-e8de87d81b20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the first message in green says `starting babel-node app.js`, and
    then when it detects a change, it says restarting due to changes... Now we can
    see the changes reflected in our site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fc5a2047-a2e5-48b4-a685-05bf7d847395.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because our Express application was created to be an API instead of a regular
    website, we need to remove many things that are superfluous, such as the `views`
    folder and the template engine, and we need to make some structural changes to
    make it easier to handle. Let''s see what our `app.js` file looks like now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: app.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, I renamed the `routes` directory to `controllers`, and also
    I deleted the `users.js` file that was in that folder, and I renamed the `index.js`
    as `api.js`. Let''s create an API to handle a blog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: controllers/api.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s test our new API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to `http://localhost:3000/api`, we are going to display a list of
    the endpoints. This is optional, but it is useful as a reference for developers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d0a3ea05-5b03-4b31-a25b-650b1df4baaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go to `http://localhost:3000/api/posts`, you will see all the posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f53337e7-16a7-4f0c-b051-fc8d9d39d892.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you hit `http://localhost:3000/api/post/1`, you will get the first
    post of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e350206c-a69c-4404-8668-e4e171a583d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, if you try to get a post that does not exist in our data (`http://localhost:3000/api/post/99`),
    then we will return an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f18f6765-805f-40c1-9916-223f2f709645.png)'
  prefs: []
  type: TYPE_IMG
- en: Building a database with MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is the most popular NoSQL database. It is free (open source) and document-oriented.
    In this recipe, we are going to install MongoDB, create a database, create a document,
    and insert some data to display information with Node.js using the Mongoose library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to install MongoDB. In this recipe, I'm going to show you the
    easiest way to install it using Mac, and I'll give you some links to install it
    if you have Linux or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: '**From the MongoDB official documentation** ([https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x))**:** "Starting
    in version 3.0, MongoDB only supports MacOS version 10.7 (Lion) and later on Intel
    x86-64."'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB Community Edition manually (the hard way)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This installation works for Mac and Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the binary files for the version you want of MongoDB from [https://www.mongodb.com/download-center#community](https://www.mongodb.com/download-center#community).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the files from the downloaded file; you can use the terminal and use
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the extracted folder to the location from which MongoDB will run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure the location of the binaries is in the `PATH` variable. You can add
    the following line in your shell''s `rc` file, such as `~/.bashrc` or `~/.bash_profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Installing MongoDB Community Edition with Homebrew (the easy way)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Homebrew is a package manager for Mac (*also known as the missing package manager
    for macOS*) and is easy to install. Go to the official website (https://brew.sh),
    and there you will find a command that you should run to install it, which is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have Homebrew already installed, or if you just installed it, then the
    first thing you need to do is to update the package database with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to install MongoDB using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to install the latest development version of MongoDB, then you
    should run this command (I don''t recommend it because it may have some bugs that
    are not fixed yet, but it is up to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Running MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start MongoDB for the first time, we need to create a directory in
    which the *mongod* process will write the data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the mongod process uses the `/data/db` directory. To create this
    folder, you can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to set permissions for the data directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new terminal (or tab) you need to run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you didn''t get an error, you could start the Mongo shell on the same host
    machine as *mongod* (in a new terminal or tab):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get an error like this: *Error: Port number 127017 out of range parsing
    HostAndPort from "127.0.0.1:127017"*, then just run `mongo` without `--host` flag.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you want to stop MongoDB, press *Ctrl* + *C* in the terminal that `mongod`
    is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If everything works, you should see this in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1c552831-d61e-4124-85f2-a51f3c571b30.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to create a new database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new database or switch to an existing database, you need to run: `use
    <name of the database>`. Let''s create a blog database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create a collection called *posts*, and you need to save the
    data directly in JSON format using the `db.<your-collection-name>.save({})` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''m not adding any `id` value, and that is because MongoDB
    automatically creates a unique ID for each row called `_id`, which is a random
    hash. If you want to see the data that you just saved, you need to use the `find()`
    method without any parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see your data like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/84051594-8bc2-498f-a098-fbb7821c8225.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s suppose you add a new row for Post 2 and you want to find that specific
    row by specifying the slug (post-2). You can do it like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/251b9d46-2fa3-44b0-8747-1efa66091936.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s change the Post 2 title to My Updated Post 2\. To do this, we need
    to update our row as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the query to find the row we want to update, and the
    second one modifies the fields using `$set`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, if we want to remove a specific row, we can do it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The recommended way to remove a row is by specifying the `_id` directly to
    avoid deleting other rows by mistake but is also possible to delete a row by any
    other field. For example, let''s say you want to remove Post 1 using the slug.
    You can do it like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have learned how to do basic operations with MongoDB let''s implement
    MongoDB into Node.js using the Mongoose library, which is an **Object Document
    Mapper** (**ODM**) for Node. We need to install some extra packages for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the same code as the previous recipe (`Repository: Chapter08/Recipe1/my-first-express-app`),
    we are going to connect Mongoose to Node.js. The first thing we need to do is
    to modify `app.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'File: app.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have Mongoose connected to our database we need to create a model
    to handle our blog posts. To do this, you will need to create a `src/models/blog.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to handle our model we need to create a new controller (`src/controllers/blog.js`)
    where we are going to add methods to save, update, remove, find all posts, or
    find a single post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: File: src/controllers/blog.js
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are going to modify our API controller (`src/controllers/api.js`)
    to remove the fake data we created in the last recipe and get the data from the
    actual MongoDB database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: File: src/controllers/api.js
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to install Postman ([https://www.getpostman.com](https://www.getpostman.com))
    or any other REST client to test the API. Mainly for a `POST`, `PUT` and `DELETE`
    methods, the GET method can be easily verified on any browser.
  prefs: []
  type: TYPE_NORMAL
- en: GET method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GET /posts**. This endpoint can be tested with your browser. Go to `http://localhost:3000/api/posts`.
    I have manually inserted three rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c0ae937-b138-4923-8dcb-7a06f19a511d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to test it on Postman, then write the same URL (`http://localhost:3000/api/posts`),
    select the `GET` method, and click on the Send button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d201617-225a-45bc-833b-e0a05c1f13fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**GET /post/:slug**. This endpoint is also a `GET`, and you need to pass the
    slug (friendly URL) on the URL. For example, the slug of the first row, My blog
    post 1, is my-blog-post-1\. A slug is a friendly URL that has the same value of
    a title but in lowercase, without special characters, and with the spaces replaced
    with dashes (-). In our model, we defined our slug as a unique field. That means
    there cannot be more than one post with the same slug.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `http://localhost:3000/api/post/my-blog-post-1` in the browser.
    If the slug exists in the database you will see the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a1720d4-76a4-4571-a0eb-d649da2976c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But if you try to find a slug that does not exist in the database you will
    get this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/85d62104-76d1-4dc7-b4c2-cb81ba1a44ac.png)'
  prefs: []
  type: TYPE_IMG
- en: POST method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `POST` method is typically used when we want to insert new data into our
    database.
  prefs: []
  type: TYPE_NORMAL
- en: '**POST /post**. For this endpoint, we need to use Postman to be able to send
    the data through the body. To do this, you need to select the POST method in Postman.
    Use the URL `http://localhost:3000/api/post`, then click on Headers, and you need
    to add the header `Content-Type` with the value `application/x-www-form-urlencoded`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48486a95-e81b-4834-b0a1-cef74fab6fde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you set the header, then go to the Body tab and select the raw option,
    and you can send the information like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/14e38988-f382-4259-84fe-26007f6573ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can hit the Send button and see the response that the service returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49ffd8e7-e8ae-4146-bb19-c1640fbf7b85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you did everything correctly, you should get a response with the saved node set
    to true and the *post* node containing information about the saved post. Now if
    you try to hit the *Send* button again with the same data (the same title), it
    will cause an error because, as you remember, our slug must be unique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4f6552a-dc34-4125-b3e0-f88986e9be99.png)'
  prefs: []
  type: TYPE_IMG
- en: You are probably wondering what the `__v` is if we haven't added that node directly.
    That is the `versionKey`, which is a property set on each document when it's first
    created by Mongoose. This key's value contains the internal revision of the document.
    You can change or remove the name of this document property. The default is `__v`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to change it, you can do something like this when you are defining
    a new schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you want to remove it, you can pass `false` to the `versionKey`, but
    I don''t recommend doing that because you won''t have control on the version changes
    every time you update a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: DELETE method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DELETE` method, as the name implies, is for deleting rows in a database.
  prefs: []
  type: TYPE_NORMAL
- en: '**DELETE /post/:slug**. In Postman, we need to select the `DELETE` method,
    and in the URL you need to pass the slug of the post you want to remove. For example,
    let''s remove the post my-blog-post-2\. If you remove it correctly you should
    get a response with the removed node set to true:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d0b0a0a4-fdcb-43ad-9b0b-a3676a314193.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to verify the post was deleted, you can go to the `/posts` endpoint
    again, and you will see that is not in the JSON anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/85e32f89-e584-4979-96ae-14456006c218.png)'
  prefs: []
  type: TYPE_IMG
- en: PUT method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last method is `PUT`, and it is typically used to update a row in a database.
  prefs: []
  type: TYPE_NORMAL
- en: '**PUT /post/:slug**. In Postman you need to select the PUT method, then the
    URL of the post you want to edit. Let''s edit my-blog-post-3; the URL will be
    `http://localhost:3000/api/post/my-blog-post-3`. On the Headers tab, like in the
    `POST` method, you need to add a `Content-Type` header with the value application/x-www-form-urlencoded.
    In the Body tab, you send the new data you want to replace, in this case, a new
    title and new content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a904f58d-2a3f-4f91-b336-55fc61f986b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything works fine, you should get this response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/738bb7f1-eb5d-436d-992e-5644307bf71b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, if you want to verify the post was updated correctly then go to the
    `/posts` endpoint in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/525231bf-fb84-4def-a8f1-2311d0512ded.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the post title, content, and slug were updated correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Building a database with MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL is the most popular database. It''s an open source Relational Database
    Management System (RDBMS). MySQL normally is a central component of the LAMP (Linux,
    Apache, MySQL, PHP/ Python/ Perl) stack; many bundles include MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: AMPPS (Max, Linux, and Windows) – [https://www.ampps.com](https://www.ampps.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XAMPP (Mac, Linux, and Windows) – [https://www.apachefriends.org](https://www.apachefriends.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAMP Server (Windows) – [http://www.wampserver.com](http://www.wampserver.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAMP (Mac) – [https://www.mamp.info](https://www.mamp.info)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other developers prefer to install it individually. If you want to do this,
    you can download MySQL directly from the official website: [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, I'm going to use MySQL Workbench to execute the SQL queries.
    You can download it from [https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/).
    Feel free to use any other MySQL administrator, or if you prefer the terminal,
    you can use MySQL commands directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are more MySQL GUI tools:'
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin – [https://www.phpmyadmin.net](https://www.phpmyadmin.net)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequel Pro – [https://www.sequelpro.com](https://www.sequelpro.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navicat – [https://www.navicat.com](https://www.navicat.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work with MySQL on Node, we need to install the sequelize and mysql2 packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create a database, which we will name as
    blog, and use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our database ready let's work on the MySQL implementation with
    Node.js. There are many ways to use MySQL with Node, but for this recipe, we will
    use a package called *Sequelize*, which is a robust ORM for MySQL and other databases
    such as SQLite, Postgres, and MsSQL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create a config file to add our database
    configuration (host, database, user, password, etc). To do this, you need to create
    a file called `config/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'File: config/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can re-use the same API controller we used in the MongoDB recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'File: controllers/api.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create our blog model (`models/blog.js`). Let''s build it in
    sections; the first thing is the connection to our database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we created our database connection, let''s create our Post model. We
    will create a table called posts with the following fields: `id`, `title`, `slug`,
    `content`, `author`, and `createdAt`, but Sequelize by default will automatically create
    an extra field called `updatedAt` when you add a `DATE` field, which will change
    every time we update a row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the coolest things of sequelize is that we can add a validation with
    a custom message when a field is empty (`notEmpty`). Now we are going to add a
    method to create a new post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need a method to update a post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we need a method to delete a post by its slug:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequelize also supports SQL queries directly. Let''s create two methods, one
    to find all the posts and the other to find a post by slug using SQL queries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `queryType` variable that we defined at the beginning of the file is to
    avoid getting a second response from Sequelize. By default, if you don''t pass
    this `queryType` Sequelize will return the result in a multidimensional array
    (the first object is the result and the second one is the metadata object). Let''s
    put all the pieces together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/blog.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It will work in the same way as the MongoDB recipe, just with minor differences
    in the results. To test the API, you will need to install Postman ([https://www.getpostman.com](https://www.getpostman.com)).
  prefs: []
  type: TYPE_NORMAL
- en: POST method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The POST method is typically used when we want to insert new data into our database.
  prefs: []
  type: TYPE_NORMAL
- en: '**POST /post.** For this endpoint, we need to use Postman to send the data through
    the request body. To do this, you need to select the POST method in Postman. Enter
    the URL `http://localhost:3000/api/post`, then click on Headers, and you need
    to add a `Content-Type` header with a value of `application/x-www-form-urlencoded`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1cf5089d-dc33-45ce-80a7-bd4b7e86e1cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you set the header, go to the `Body` tab and select the `raw` option,
    and you can send the information like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d24a9c4c-d82e-473f-82e5-f1e8c52a2033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can hit the Send button and see the response that the service returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/caaf5419-5406-4dee-a373-e0d85cd4b786.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you did everything correctly, you should get a response with the saved node set
    to true and the post node with information about the saved post. If you try to
    hit the *Send* button again with the same data (the same title), it will cause
    an error because, as you remember, our slug must be unique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b0d1911-3327-4929-be63-f1e1f8c33543.png)The text in this image
    is not relevant. The purpose of the image is to give you a glimpse of how the
    error looks like. Try in your Postman, and you will see the same error as the
    image.'
  prefs: []
  type: TYPE_NORMAL
- en: GET method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GET /posts**. This endpoint can be tested with your browser. Go to `http://localhost:3000/api/posts`.
    I have manually inserted three rows with the `createPost` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2706cc8b-dd9d-4f31-b4b7-d89d7e36e4bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to test it on Postman, then write the same URL (`http://localhost:3000/api/posts`),
    select the `GET` method, and click on the Send button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d429bc41-8f87-4c5a-928f-d14fc2cb3398.png)'
  prefs: []
  type: TYPE_IMG
- en: '**GET /post/:slug**'
  prefs: []
  type: TYPE_NORMAL
- en: This endpoint is also a GET, and you need to pass the slug (the friendly URL)
    in the URL. For example, the slug of the first row, My blog post 1, is my-blog-post-1. A
    slug is a friendly URL that has the same value as the title but in lowercase,
    without special characters and the spaces are replaces with dashes (`-`). In our
    model, we defined our slug as a unique field, which means that there cannot be
    more than one post with the same slug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `http://localhost:3000/api/post/my-blog-post-1` in the browser.
    If the slug exists in the database you will see the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5fb67d09-368a-4194-a40f-b94eb9afdf21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But if you try to view a slug that does not exist in the database you will
    get this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/283dd8c5-5c71-4d39-9fe4-b0b952223d57.png)'
  prefs: []
  type: TYPE_IMG
- en: DELETE method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DELETE` method, as the name implies, is for deleting rows in a database.
  prefs: []
  type: TYPE_NORMAL
- en: '**DELETE /post/:slug**. In Postman, we need to select the `DELETE` method,
    and in the URL you need to pass the slug of the post you want to remove. For example,
    let''s remove my-blog-post-2. If you remove it correctly you should get a response
    with the removed node with a value of true:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c06a5148-9780-45c5-aca3-ed132c2c59b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to verify the post was deleted, you can go to the `/posts` endpoint
    again, and you will see that is not in the JSON anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86099ab6-2d08-415a-9726-3dc08eaa8036.png)'
  prefs: []
  type: TYPE_IMG
- en: PUT method endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last method is `PUT`, and it is usually used to update a row in a database.
  prefs: []
  type: TYPE_NORMAL
- en: '`PUT /post/:slug`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Postman, you need to select the PUT method first, then the URL of the post
    you want to edit. Let''s edit my-blog-post-3; so the URL will be `http://localhost:3000/api/post/my-blog-post-3`.
    In the Headers tab, you need to add, as in the POST method, the `Content-Type`
    header with the value `application/x-www-form-urlencoded`. The last part is the
    Body tab, where you can send the new data you want to replace, in this case, a
    new title and new content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/774cd76e-7c09-46f0-aab3-ea77ad15db36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything works fine, you should get this response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1fd0ea4f-8fdd-4f15-80d7-c3bcf90199a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, if you want to verify the post was updated correctly, then go to the `/posts` endpoint
    in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/746c4fcf-f8bb-47cc-ae48-90e31a71b571.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the post title, content, and slug were updated correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding access tokens to secure our API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The APIs that we created in the last two recipes is public. That means everyone
    can access and get the information from our server, but what happens if you want
    to add a security layer on the API and get the information for registered users
    on your platform? We need to add access token validation to protect our API, and
    to do this; we have to use **JSON Web Tokens** (**JWT**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you need to install JWT for Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will mostly use the same code that we created for the MySQL recipe and add
    a security layer to validate our access tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to modify our config file (`config/index.js`),
    add a security node with the `secretKey` we are going to use to create our tokens,
    and add the expiration time of the token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: File: config/index.js
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create a `db.js` file in our model''s folder to separate
    our database connection and share it between our models. Before, we just had the
    blog model, but now we are going to create a user model file as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/db.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a table for users and save a record for our user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We can insert a user with this command, change the username and password. In
    this recipe, we are going to use the SHA1 algorithm to encrypt our passwords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have created our user table and we have a registered user, let''s
    create our user model with a `login` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'File: models/user.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to modify our API controller, add a `login` endpoint to generate
    our token, and add a function to validate the token. Then we are going to protect
    one of our endpoints (`/api/posts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'File: controllers/api.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to test the security of your API, the first thing you need to do
    is to execute the *POST* `/api/login` method to get a new token. As before, we
    can do this with Postman.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to select the POST method and then write the URL `http://localhost:3000/api/login`
    and add a `Content-Type` header with the value `application/x-www-form-urlencoded`
    to be able to send data through the request body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/860c9a7a-ea73-4a50-b402-065418b2c8b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, on the *Body* tab, we need to send our data (username and password) with
    the information of the user that we have in the database. Here we are doing this
    process manually, but eventually, this information should come from a login form
    on your website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/118e7fca-a9f9-48e7-bf45-d544150fc4da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you passed the correct information for your user you should get the `accessToken`,
    but if for some reason the login fails or the user or password is incorrect, you
    will get an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc76aea9-c029-4a12-8e2d-197a2f33985f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you get the new `accessToken` (remember that this token will be valid
    just for 1 hour; after the expiration time you will need to create a new one)
    you need to copy the token and then send it as header (as an access tokenwith
    the format `Bearer <access-token>`) in the protected endpoint we have (`/api/posts`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/953b247e-b35f-4eb6-ae9d-dfa28f091ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: It is crucial that you send the correct format, Bearer[SPACE]<access-token>.
    Remember, we are using a space to get the token. If you did everything correctly,
    you should get the response from the service with the posts from the blog and
    the user information (this can maybe be in a different endpoint, but for this
    example, I just added the user data here).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e99f71c4-8ebd-4637-acaf-e8f9a7675bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the user data, we are getting the information from the database
    plus two new fields: `iat` (issued at) and `exp` (token expiration). But what
    happens if our token expires or the user sends an incorrect access-token? In these
    scenarios, we will return an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6424039-d5fd-49d4-901e-18454c280a18.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, token validation is easy to implement and adds a security layer
    for our API when we are working with private data. You will probably ask where
    the best place is to save the generated access token. Some people save the access
    token in cookies or sessions, but I don't recommend this because there are some
    associated security issues. My recommendation is to use local storage to save
    it only while the user is connected to the site, and then remove it after the
    user closes the browser, but again this will depend on the type of security you
    want to add to your platform.
  prefs: []
  type: TYPE_NORMAL
