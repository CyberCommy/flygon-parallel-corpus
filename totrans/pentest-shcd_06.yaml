- en: Buffer Overflow Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will delve more deeply into buffer overflow attacks. We'll
    see how to change the flow of execution and look at very simple ways to inject
    shellcode. Shall we begin?
  prefs: []
  type: TYPE_NORMAL
- en: Stack overflow on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are about to learn what a buffer overflow is, and we will understand
    how to change the flow of an execution using a vulnerable source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, let''s tweak it a little to do something more useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we added a new function, `letsprint`, which contains `printf`, and since
    this function has never been called in the `main` function, it will never be executed.
    So, what if we use this buffer overflow to control the execution and change the
    flow to execute this function?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s compile it and run it on our Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, nothing happened. Let''s try to cause an overflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'OK, now let''s try to get that error inside our GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s set a breakpoint at the `main` function to pause the execution
    at the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the program starts. It will pause at the `main` function. Proceed using
    24 `a` characters as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the code will pause at `main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit the *C* and *Enter* keys to continue executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program crashed as expected, so let''s try 26 `a` characters as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use Python to generate the input instead of counting the characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, give it the execute permission and execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'From inside GDB, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the code will pause at `main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *C* then *Enter* to continue executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Have you noticed the error `0x0000000000006161` in `?? ()`? From the preceding
    screenshot, the program doesn't know where  `0x0000000000006161` is, and `6161`
    is `aa`, which means we were able to inject 2 bytes into the RIP register, so
    that is how I got it to start after 24 characters. Don't worry, we will talk about
    that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm that by using 24 of the `a` characters and 6 of `b` characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the exploit to generate the new input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, run the following from inside GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the code will hit the breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *C* then *Enter* to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, by looking at the error, we see our injected `b` characters in there.
    At this point, we are doing very well. Now we know our injection form, let''s
    try to execute the `letsprint` function using the `disassemble` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We got the first instruction in the `letsprint` function, `push rbp` with address
    `0x00000000004005e3`, and the real address is what we need here; we can also get
    the address by using the `print` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the address, let''s try to build our exploit using Python
    because we can''t pass the address directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we execute it to generate the new input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from inside GDB, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, it will hit the breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *C* and then *Enter* to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We did it! Now, let''s confirm that from our shell instead of GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yes, we changed the flow of execution to execute something that should never
    be executed!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try another payload just for fun. We will use our code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'But we will add our `execve` syscall to run `/bin/sh` from the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s put them together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, here `shell_pwn` will never be executed because we never called it here,
    but now we know how to do it. First, let''s compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open our code inside GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, set a breakpoint at the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, now let''s prepare our exploit to confirm the exact position of the RIP
    register:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from GDB, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, it will hit the breakpoint at the `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s hit *C* and then *Enter* to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yes, it''s complaining about our 6 `b` characters, `0x0000626262626262`, so
    now we are on the right track. Now, let''s find the address of our shellcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first instruction''s address is `0x000000000040060d`. Also, we can use
    the `print` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perfect! Now, let''s build our final exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, from inside GDB, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the code will pause at the `main` function; hit *C* to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we''ve got a shell; let''s try to execute it with `$ cat /etc/issue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s confirm that, using our bash shell instead of GDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to execute something:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It worked!
  prefs: []
  type: TYPE_NORMAL
- en: Stack overflow on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's try the previous vulnerable code to exploit the stack overflow on
    Windows 7\. We don't even have to disable any security mechanisms on Windows,
    such as **Address Space Layout Randomization **(**ASLR**) or **Data**** Execution
    Prevention** (**DEP**); we will talk about security mechanisms in the [Chapter
    12](part0115.html#3DLGM0-5bf3e26315164e77bbeecc4f75207114), *Detection and Prevention*—shall
    we begin?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try our vulnerable code using Code::Blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Simply open Code::Blocks and navigate to File | New | Empty file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, write our vulnerable code. Go to File | Save file and then save it as
    `buffer2.c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's build our code by navigating to Build | Build.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to see what is going on behind the scenes; open Immunity Debugger
    as the administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to File | Open and select `buffer2`. Here, enter our argument as `aaaaaaaaaaaaaaaaaaaaaaaaaaabbbb`
    (27 characters of `a` and 4 characters of `b`); we will know later how to get
    the length of our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can see our four windows. Hit the run program once. After that, we
    are at the entry point of our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, hit the run program again and notice the status bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program crashed and gave us access violation when executing `62626262`,
    which are our characters `b` in ASCII, and the most important thing to notice
    is the Registers (FPU) window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The instruction pointer is pointing at the `b` characters `62626262`, that's
    perfect!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to locate our function. From Immunity Debugger, navigate to Debug
    | Restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are starting over; hit the run program once and then right-click on
    the disassemble window and navigate to Search for | All referenced text strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are searching for our string, which is inside the `letsprint` function, `Hey!!
    , you succeeded\n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new window will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The third one is our string, but it is not readable because of the `exit(0)` function.
    You can make sure by compiling another version without `exit(0)` and performing
    the same step, and you will be able to read our string.
  prefs: []
  type: TYPE_NORMAL
- en: Addresses here are not fixed—you may get a different address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on our string, then Immunity Debugger will set you exactly at
    our string at address, `0x00401367`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Really, we don''t need our string, but we need to locate the `letsprint` function.
    Keep going up until you hit the end of the previous function (`RETN` instruction).
    Then, the next instruction will be the start of the `letsprint` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00259.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There it is! Address `0x0040135f` should be the start of the `letsprint` function. Now,
    let''s confirm that. Open IDLE (Python GUI) and navigate to File | New Window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the new window, write our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, save it as `exploit.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Run on the IDLE window, which will generate a new file, `input.txt`,
    in our current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `input.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is our payload; copy the contents of the output file. Then, go back to
    Immunity Debugger by navigating to File | Open, then paste the payload in Arguments
    and select `buffer2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, start the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, hit the run program; then, it will pause at the program entry point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, hit the run program one more time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program exited normally with exit code `0`. Now, let''s take a look at
    Immunity''s CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It worked! Let''s take a look at the stack window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the `a` characters are injected in the stack and the `letsprint`
    address is injected correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to inject a shellcode instead of using the `letsprint` function,
    using Metasploit to generate a shellcode for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can test this shellcode before we use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, build it and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it''s waiting for our connection. From our attacking machine, start Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, select the handler to connect to the victim machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, select our payload, which is `windows/shell_bind_tcp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, set the IP address of the victim machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, set the rhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the session starts on `session 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now inside our victim machine. Exit this session and let''s get back
    to our code. So, our final code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, build it and let''s run it inside Immunity Debugger to find the address
    of the `shell_pwn` function. Start Immunity Debugger as the administrator and
    select our new code with any argument you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, hit the run program once. Now, we are at the program''s entry point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the main screen and navigate to Search for | All referenced
    text strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Do you see `Shellcode Length`? This is a string in the `shell_pwn` function;
    now double-click on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program set us on the exact location of the `Shellcode Length` string.
    Now, let''s go up until we hit the function''s start address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00278.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it at address `0x00401340`. Now, let''s set up our exploit code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the exploit code to renew `input.txt`; then, open `input.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, copy the contents of it. Go back to Immunity Debugger and open the program
    again and paste the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, hit the run program twice. The code is still running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, take a look at the status bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our shellcode is running now and waiting for our connection. Let''s go back
    to our attacking machine and set up the handler to connect to the victim machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The connection has been established on `session 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It worked!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we know how buffer overflow attacks work on Linux and Windows.
    Also, we know how to exploit stack overflow.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about more techniques, such as how to locate
    and control the instruction pointer, how to find the location of your payload,
    and more techniques for buffer overflow attacks.
  prefs: []
  type: TYPE_NORMAL
