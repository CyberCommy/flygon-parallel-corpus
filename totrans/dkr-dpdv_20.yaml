- en: 'Appendix A: Securing client and daemon communication'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This was originally going to be a section in the “Installing Docker” chapter,
    or the “Security in Docker” chapter. But it got too long, so I’ve added it here
    as an appendix.
  prefs: []
  type: TYPE_NORMAL
- en: Docker implements a client-server model. The client implements the CLI, and
    the server (daemon) implements the functionality, including the public-facing
    REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client is called `docker` (`docker.exe` on Windows) and the daemon is called
    `dockerd` (`dockerd.exe` on Windows). A default installation puts them on the
    same host and configures them to communicate over a secure local PIC socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var/run/docker.sock` on Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//./pipe/docker_engine` on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, it’s possible to configure them to communicate over the network. But
    the default daemon network configuration uses an unsecured HTTP socket on port
    2375/tcp.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A1.1](images/figurea1-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A1.1
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** It’s convention to use `2375` for unencrypted communication between
    the client and daemon, and `2376` for encrypted traffic.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This might be fine for labs, but it’s unacceptable for production.
  prefs: []
  type: TYPE_NORMAL
- en: TLS to the rescue!
  prefs: []
  type: TYPE_NORMAL
- en: Docker let’s you configure the client and daemon to only accept network connections
    that are secured with TLS. This is recommended for production environments, even
    if you’re using trusted internal networks!
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker offers two modes for securing client-daemon traffic with TLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Daemon mode:** The Docker daemon will only accept connections from authenticated
    clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client mode:** The Docker client will only connect to Docker daemons that
    have certificates signed by a trusted CA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A combination of the two provides the highest security.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a simple lab environment to walk through the process of configuring
    Docker for **daemon mode** and **client mode** TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Lab setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll use a simple lab setup for the remainder of the chapter. It’s a three-node
    Linux lab with a CA, Docker client, and Docker daemon. It’s vital that all hosts
    can resolve each other by name.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll configure `node1` to be the secure Docker client, and `node3` to be the
    secure Docker daemon. `node2` will be the CA.
  prefs: []
  type: TYPE_NORMAL
- en: You can follow along in your own environment, but all of the examples shown
    will use the names and IPs from the lab diagram in Figure A1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A1.2 Sample lab setup](images/figurea1-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A1.2 Sample lab setup
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level process will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure a CA and certificates**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a CA (self-signed certs)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and sign keys for the Daemon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and sign keys for the Client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Distribute keys
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure Docker to use TLS**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure daemon mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure client mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a CA (self-signed certs)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You only need to complete this step if you are following along in a lab and
    need to build a CA to sign certificates. Also, we’re building a simple CA to help
    demonstrate how to configure Docker, we’re **not** attempting to build a production-grade
    PKI.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following commands from the `CA` node in the lab.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new private key for the CA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will set a passphrase as part of the operation. Don’t forget it!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`You will have a new file in your current directory called `ca-key.pem`. This
    is the CA’s private key.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`*   Use the CA’s private key to generate a public key (certificate).'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to enter the passphrase from the previous step. Hopefully you
    haven’t forgotten it already :-D
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`This has added a second file to your working directory called `ca.pem`. This
    is the CA’s public key, a.k.a. “certificate”.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``You now have two files in your current directory: `ca-key.pem` and `ca.pem`.
    These are the CA’s private and public keys, and form the *identity* of the CA.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a key pair for the daemon
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this step, we’ll generate a new key-pair for `node3`. This is the node that
    will run the secure Docker daemon. It’s a four-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the private key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the signing request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add IP addresses and make it valid for *server authorization*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the certificate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s do it.
  prefs: []
  type: TYPE_NORMAL
- en: Run all commands from the CA node (node2).
  prefs: []
  type: TYPE_NORMAL
- en: Create the private key for the daemon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`This has created new file in your working directory called `daemon-key.pem`.
    This is the private key for the daemon node.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`*   Create a certificate signing request (CSR) for the CA to create and sign
    a certificate for the daemon. Be sure to use the correct DNS name of the node
    that you intend to run your secure Docker daemon on. The example uses `node3`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`You now have a fourth file in your working directory. This one is the CSR
    and it is called `daemon.csr`.` `*   Add required attributes to the certificate.'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a file that will add a couple of extended attributes to the
    daemon’s certificate when it gets signed by the CA. These attributes will add
    the daemon’s DNS name and IP address, as well as configure the certificate to
    be used for *server authentication*.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `extfile.cnf` with the following values. The example
    uses the DNS name and IP of the daemon node in the lab from Figure A1.2\. The
    values in your environment might be different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`*   Generate the certificate.'
  prefs: []
  type: TYPE_NORMAL
- en: This step uses the CSR file, CA keys, and the `extfile.cnf` file to sign and
    configure the daemon’s certificate. It will output the daemon’s public key (certificate)
    as a new file called `daemon-cert.pem`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5][PRE6]At this point, you have a working CA, as well as a key-pair for
    `node3` which will run the secure Docker daemon.'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the CSR and `extfile.cnf` before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`#### Create a key pair for the client'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll repeat what we just did for the `node3`, but this time
    we’ll do it for `node1` which will run our Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: Run all commands from the CA (`node2`).
  prefs: []
  type: TYPE_NORMAL
- en: Create a private key for `node1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will generate a new file in your working directory called `client-key.pem`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`*   Create a CSR. Be sure to use the correct DNS name of the node that will
    be your secure Docker client. The example uses `node1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`This will create a new file in your current directory called `client.csr`.`
    `*   Create a file called `extfile.cnf` and populate it with the following value.
    This will make the certificate valid for client authentication.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`*   Create the certificate for `node1` using the CSR, CA’s public and private
    keys, and the `extfile.cnf` file. This will create the client’s signed public
    key as a new file in your current directory called `client-cert.pem`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11][PRE12]Delete the CSR and `extfile.cnf` files, as these are no longer
    needed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`At this point you should have the following 7 files in your working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`Before moving on, you should remove write permission from the keys, and make
    them only readable to you and other accounts that are members of your group.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`#### Distribute keys'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve got all of the keys and certificates, it’s time to distribute
    them to the client and daemon nodes. We’ll be copying the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca.pem`, `daemon-cert.pem`, and `daemon-key.pem` from the CA to the `node3`
    (the daemon node).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca.pem`, `client-cert.pem`, and `client-key.pem` from the CA to `node1` (the
    client node).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll show you how to do it using `scp`, but feel free to use a different tool.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following commands from the directory containing the keys on `node2`
    (the CA node).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`A few things to note about the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: The 2nd, 3rd, 5th, and 6th commands are renaming the files as part of the copy
    operation. This is important, as Docker expects the files to have these names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These commands will work on Ubuntu Linux, and they assume you are using the
    `ubuntu` user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may have to pre-create the `/home/ubuntu/.docker` hidden directory on the
    daemon and client nodes before executing the commands. You may also have to change
    permissions on the `.docker` directory to enable the copy — `chmod 777 .docker`
    will work, but is not secure. **Remember, we’re building a quick CA and certificates
    so you can follow along. We’re not trying to build a secure PKI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you’re working in something like AWS, you’ll need to specify the instance’s
    private key with the `-i <key>` flag for each copy command. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`The lab now looks like Figure A1.3'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A1.3 Updated lab with keys](images/figurea1-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A1.3 Updated lab with keys
  prefs: []
  type: TYPE_NORMAL
- en: The presence of the CA’s public key (`ca.pem`) on `node1` and `node3` is what
    will tell them to trust the CA and all certificates signed by it.
  prefs: []
  type: TYPE_NORMAL
- en: With the certificates in place, it’s **finally time to configure Docker so that
    the client and daemon use TLS!**
  prefs: []
  type: TYPE_NORMAL
- en: Configure Docker for TLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we mentioned previously, Docker has two TLS modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**daemon mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**client mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daemon mode tells the daemon process to only allow connections from clients
    with a valid certificate. Client mode tells the client only to connect to daemons
    that have a valid certificate.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll configure the daemon process on `node1` for *daemon mode*, and test it.
    After that, we’ll configure the client process on `node2` for *client mode*, and
    test that.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Docker daemon for TLS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Securing the daemon is as simple as setting a few daemon flags in the `daemon.json`
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tlsverify` enables TLS verification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlscacert` tells the daemon which CA to trust'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlscert` tells Docker where the daemon’s certificate is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlskey` tells Docker where the daemon’s private key is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hosts` tells Docker which sockets to bind the daemon on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll configure these in the platform-independent `daemon.json` configuration
    file. This is found in `/etc/docker/` on Linux, and `C:\ProgramData\Docker\config\`
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Perform all of the following operations on the node that will run your secure
    Docker daemon (`node3` in the example lab).
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `daemon.json` file and add the following lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`**Warning!** Linux systems running `systemd` do not allow you to use the “hosts”
    option in `daemon.json`. Instead, you have specify it in a systemd override file.
    The simplest way to do this is with the `sudo systemctl edit docker` command.
    This will open a new file called `/etc/systemd/system/docker.service.d/override.conf`
    in an editor. Add the following three lines and save the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`Now that the TLS and host options are set, it’s time to restart Docker.'
  prefs: []
  type: TYPE_NORMAL
- en: Once Docker has restarted, you can check that the new `hosts` value is in effect
    by inspecting the output of a `ps` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`The presence of “`-H tcp://node3:2376`” in the command output is evidence
    that the daemon is listening on the network. Port `2376` is the standard port
    for Docker using TLS. `2375` is the default unsecured port.'
  prefs: []
  type: TYPE_NORMAL
- en: If you run a normal command, such as `docker version`, it will not work. This
    is because we’ve just configured the **daemon** to listen on the network, but
    the **Docker client** is still trying use the local IPC socket. Try the command
    again, but this time specifying the `-H tcp://node3:2376` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`The command looks better, but it’s still not working. This is because the
    daemon is rejecting all connections from unauthenticated clients.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations. The Docker daemon is configured to listen on the network, and
    is rejecting connections from unauthenticated clients.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s configure the Docker client on `node1` to use TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Docker client for TLS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we’ll configure the Docker client on `node1` for two things:'
  prefs: []
  type: TYPE_NORMAL
- en: To connect to a remote daemon over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To sign all `docker` commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform all of the following from the node that will run your secure Docker
    client (`node1` in the example lab).
  prefs: []
  type: TYPE_NORMAL
- en: Export the following environment variable to configure the client to connect
    to the remote daemon over the network.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`Try the following command.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`The Docker client is now sending commands to the remote daemon across the
    network, but the remote daemon will only accept authenticated connections.'
  prefs: []
  type: TYPE_NORMAL
- en: Export one more environment variable to tell the Docker client to sign all commands
    with its certificate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`Run the `docker version` command again.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`Congratulations. The client is successfully talking to the remote daemon over
    a secure connection. The final configuration of the lab is shown in Figure A1.4.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A1.4](images/figurea1-4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A1.4
  prefs: []
  type: TYPE_NORMAL
- en: A couple of final points before we do a quick recap.
  prefs: []
  type: TYPE_NORMAL
- en: This last example works because we copied the clients TLS keys to the folder
    that Docker expects them to be in. This is a hidden folder in your user’s home
    directory called `.docker`. We also gave the keys the default filenames that Docker
    expects (`ca.pem`, `cert.pem`, and `key.pem`). You can specify a different folder
    by exporting `DOCKER_CERT_PATH`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will probably want to make the environment variables (`DOCKER_HOST` and
    `DOCKER_TLS_VERIFY`) more permanent fixtures of your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker TLS Recap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Docker supports two TLS modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`daemon mode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client mode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daemon mode will refuse connections from clients that do not sign commands with
    a valid certificate. Client mode will not connect to remote daemons that do not
    possess a valid certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a daemon for TLS is done through the Docker daemon configuration
    file. The file is called `daemon.json` and it’s platform agnostic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `daemon.json` should work on most systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`*   `hosts` tells Docker which socket to bind the daemon on. The example binds
    it to a network socket on port 2376\. You can use any free port, but it’s convention
    to use `2376` for secured Docker connections. Linux systems running `systemd`
    cannot use this flag and require the use of a `systemd` override file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tls` and `tlsverify` force the daemon to only use encrypted and authenticated
    connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlscacert` tells Docker which CA to trust. This causes Docker to trust all
    certificates signed by that CA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlscert` tells Docker where the daemon’s certificate is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tlskey` tells Docker where the daemon’s private key is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making any changes to these values requires a Docker restart for them to take
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring the **Docker client** for TLS is as simple as setting two environment
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DOCKER_HOST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOCKER_TLS_VERIFY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOCKER_HOST` tells the client where to find the daemon. `export DOCKER_HOST=tcp://node3:2376`
    will tell the Docker client to connect to the daemon on a remote host called `node3`
    on port `2376`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`export DOCKER_TLS_VERIFY=1` will tell the Docker client to sign all of the
    commands it issues.[PRE26]'
  prefs: []
  type: TYPE_NORMAL
