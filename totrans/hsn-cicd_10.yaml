- en: Travis CI CLI Commands and Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we showed you how to configure Travis CI in a software
    project and explained the basics of how to use Travis CI. This chapter will help
    you get Travis CLI installed on your operating system and we will go over all
    the different types of commands in Travis CI, such as the general API commands,
    repository commands, and more. We will go over the different options that the
    CLI commands can use and we will also go over the meaning of each command in detail.
    We will also take a look at working with the Travis API directly by using our
    access token and the curl REST client. We will briefly look at the Travis Pro
    and Enterprise versions as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Travis CLI installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require some basic Unix programming skills and knowledge about
    using a command-line terminal application. If you are in a Windows OS then consider
    using either the Command Prompt or the PowerShell application. If you are on the
    macOS operating system then use the Terminal application that is installed for
    you by default. If you are using Linux, then you should already have a Terminal
    installed or available.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CLI installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first prerequisite to install Travis CLI is to have Ruby ([https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/))
    installed on your OS and make sure that it is version 1.9.3 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check that you have Ruby installed by running the following command
    in a command shell or Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d20c4bda-fc0f-40c4-8f63-3e80b7c71e0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Travis CLI user documentation at [https://github.com/travis-ci/travis.rb#windows](https://github.com/travis-ci/travis.rb#windows) recommends
    that you use the RubyInstaller ([http://rubyinstaller.org/](http://rubyinstaller.org/))
    to install the latest version of Ruby on the Windows OS.
  prefs: []
  type: TYPE_NORMAL
- en: We need to pick Ruby Devkit version 2.5.1 at the RubyInstaller download site and
    then make sure to accept the license agreement and then choose the appropriate
    options for the installation. Make sure to install the development toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the installer window closes, a Command Prompt will open and you will need
    to pick an option; you can just hit enter to install all three options on your
    system. The installation process could take a while to finish. Mine took about
    20 minutes to update GPG keys and to install other dependencies required for the
    Ruby programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7766af67-a7d0-4be3-8ef7-627edb9fd2ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here that we have Ruby version 2.5.1 installed on our system as we would expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b7f55af-bda2-49d6-b796-d202e8b8869f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this step, we install Travis RubyGems in the Windows Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc833258-5274-4751-8171-7754d1b94366.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this last step, we verify that Travis CLI RubyGem is installed on our system;
    it reports version `1.8.8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/665fffd6-7924-45eb-bc27-ab5d5e352446.png)'
  prefs: []
  type: TYPE_IMG
- en: Linux installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Linux OS has multiple different package managers, so how you install Ruby
    on your system is dependent on your particular Linux OS. We will look at installing
    Ruby and Travis CLI on Ubuntu 14.04 in a DigitalOcean server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Ruby on Ubuntu, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, confirm that Ruby is installed by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/65b89a7c-54bb-46c1-8915-eb0ea35dbf30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to install the Travis CLI RubyGem with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to check that Travis CLI is installed with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: macOS installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to install the Xcode Command Line tools, which you can do so with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you already have the Xcode Command Line tools installed, you will see the
    following information displayed in the Terminal: ![](assets/7a29872c-1a87-4152-8ef3-250a95119732.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Ruby comes preinstalled on current macOS operating system, so you only need
    to run the following command to install Travis CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9cb098a4-806a-4061-abd3-ac777451f673.png)'
  prefs: []
  type: TYPE_IMG
- en: Here I used `sudo` because I needed elevated administrator privileges to install
    RubyGem.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will know that Travis CLI is installed if you see this message in your
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c896c99-907b-4888-b68a-00cf5baeddbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Here that I am using Travis CLI version `1.8.8` but your particular version
    could be different.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Travis CLI is fully featured, with the Travis API ([https://github.com/travis-ci/travis-api](https://github.com/travis-ci/travis-api))
    in GitHub and has CLI commands that come in the following three different forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-API commands**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-API commands documentation ([https://github.com/travis-ci/travis.rb#non-api-commands](https://github.com/travis-ci/travis.rb#non-api-commands))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These commands include `help` and `version` and do not directly hit the Travis
    CI API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General API commands**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General API commands documentation ([https://github.com/travis-ci/travis.rb#general-api-commands](https://github.com/travis-ci/travis.rb#general-api-commands))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These commands directly hit the Travis API and inherit all options from the
    non-API commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository commands**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository commands documentation ([https://github.com/travis-ci/travis.rb#repository-commands](https://github.com/travis-ci/travis.rb#repository-commands)[)](https://github.com/travis-ci/travis.rb#repository-commands)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These commands have all the options that General API commands have and additionally
    you can specify the repo owner/name to talk to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Travis CLI library is written in the Ruby programming language and if you
    want to directly interface with it, be prepared to read more about in the *Ruby
    Library* section at GitHub ([https://github.com/travis-ci/travis.rb#ruby-library](https://github.com/travis-ci/travis.rb#ruby-library)).
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the `packtci` GitHub ([https://github.com/packtci](https://github.com/packtci))
    user that we created in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI* in *Creating a GitHub account* section
    and the `packtci` Travis CI account that we created in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI* in *Creating a Travis CI account* section.
  prefs: []
  type: TYPE_NORMAL
- en: Non-API commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The non-API Travis CLI commands include the `help` and the `version` commands.
    These commands do not directly hit the Travis API but instead print out useful
    information about the Travis CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Printing help information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `help` command will display the arguments and options that a particular
    command takes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we run the `travis help` command in a command-line
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d6f4f2af-d978-494b-bbb2-926072eca5a8.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to get help on a particular command, then you simply need to use `travis
    help COMMAND`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot with more information about the `whoami` command
    in Travis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a5094366-ae34-418c-bb24-5501700fb329.png)'
  prefs: []
  type: TYPE_IMG
- en: Printing version information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `version` command displays the current Travis CLI client that is installed
    on the system. The following screenshot displays the current client version of
    `1.8.8` for Travis CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c87c2e98-44eb-4d8f-beef-ff3b7be2a221.png)'
  prefs: []
  type: TYPE_IMG
- en: API commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API commands directly hit the Travis API, and some require that you have
    a proper access token which you can get by using the `travis login` command.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `login` command is typically the first command that you will need to use
    in order to work with the Travis API as it authenticates you with the Travis API.
  prefs: []
  type: TYPE_NORMAL
- en: The `login` command will ask you for your GitHub username and password, but
    does not send these credentials to Travis CI. Instead it uses your username and
    password to create a GitHub API token and then shows the token to Travis API and
    then run a series of checks to make sure that you are who you say you are. It
    then gives you an access token for the Travis API in return, and finally the Travis
    Client will delete the GitHub token again. All of these steps occur under the
    hood once you successfully run the `travis login` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows where we try to run the `travis accounts` commands,
    and it notifies us that we we need to be logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb3cd9b6-07f7-4e23-992c-3b9a731949c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we run the `travis login` command and provide
    the GitHub username and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/47170f74-277e-456e-be4a-514ba14517c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have successfully logged in to the Travis CI system and Travis CI has
    issued us an access token.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the current access token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `token` command is useful to display the current access token. The screenshot
    has an access token that has been greyed out for security purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d3b53b5e-8ac6-4d61-a37d-5caeed257e4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Logging out of Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `logout` command will log you out of Travis CI and remove your access token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice in the following screenshot that after we initiated the `travis logout`
    command, the `travis token` command shows that we need to log back in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4939ff78-067a-4a0a-acf8-5309875d17d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will need to log back in to Travis CI in order to get a token again. In
    the following screenshot, we log back in to Travis and then get another access
    token so that we can issue commands to Travis API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15d824a6-6bda-49f8-ad93-1d12a5dcc8cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying accounts information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `accounts` command is used to list all the accounts that you can set up
    repositories for. Remember that when we ran this command earlier, Travis informed
    us that we needed to log in to Travis to execute this command. In the following
    screenshot, Travis informs us that we are subscribed to four different repositories
    in Travis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd2383dd-d15a-4a0c-aadf-bc41e8fa6a53.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying help information for Travis commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that we can find all the options for a particular command in Travis
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we run the `help` command for the `accounts` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b295ee68-e062-4e08-8405-3e9857b3395d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an option called `--debug` which we will use to debug the HTTP request
    made to the Travis API. In the following screenshot we get additional information
    about the request made to Travis, such as the endpoint hit which is `GET "accounts/"
    {:all=>true}` as well as other information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a0b8487c-95a3-4762-8351-86f788da111a.png)'
  prefs: []
  type: TYPE_IMG
- en: Interactive console session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `console` command drops you into an interactive Ruby session with all the entities imported
    into global namespaces, as well as making sure that you are authenticated with
    Travis and if you are setting correct. In the following screenshot I pressed *Tab*
    and got auto-completion in the console session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4074384a-e685-4e51-99bb-6f13f9bbebc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Also notice that the current logged-in user is `packtci`.
  prefs: []
  type: TYPE_NORMAL
- en: Printing API endpoint Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `endpoint` command prints out the API endpoint that we are using. Notice
    that we are using the free and open source version of Travis API in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d6d32fd9-c7f5-4cb6-af73-9f9a2347784c.png)'
  prefs: []
  type: TYPE_IMG
- en: The PRO version of Travis uses the following endpoint at [https://api.travis-ci.com/](https://api.travis-ci.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Conducting live monitoring with all the CI builds that are currently running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `travis monitor` command will conduct live monitoring for all the CI builds
    in the logged-in account. In the following screenshot, there is no activity occurring
    in Travis CI at the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4fdf1d4f-4dd6-49b0-8147-a67bbfea8d68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us add a unit test case for the `puppeteer-headless-chrome-travis-yml-script`
    repo ([https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script)) and
    then push this change into the GitHub version control system. In the the following
    screenshot, we push up a change into the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3e1c672c-2575-4f8e-9519-f4a620372b9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we go back into the Terminal session where the Travis monitor is running,
    we will see that a build has been initiated and then it is passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0ed9bce6-6a63-4f99-943b-03d75003ddca.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a build job of `2.1`; in the `.travis.yml` file we did not specify any
    other build jobs so Travis CI bundled all of the build jobs into one build job.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Travis CI build stages at [https://docs.travis-ci.com/user/build-stages/](https://docs.travis-ci.com/user/build-stages/)[.](https://docs.travis-ci.com/user/build-stages/)
  prefs: []
  type: TYPE_NORMAL
- en: Initiating a Travis CI API call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can initiate a direct API call to the Travis API by using the `travis raw
    RESOURCE` command. Remember that we can always use the `travis help COMMAND` to
    find out how to use a particular command in Travis CLI. In the following screenshot,
    we run the `help` command for the `raw` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/98ac6647-e5ba-4ead-ac0d-17b48a6ee340.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we know how to run the `raw` command, let us issue a request to this
    endpoint in the Travis API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you want to see the developer documentation for the Travis API, then you
    need to go to the following URL at [https://developer.travis-ci.com/](https://developer.travis-ci.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to log in and authorize Travis CI as a third-party application for
    GitHub. In the following screenshot, we authorize Travis CI for the `packtci`
    GitHub user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6c0e1c89-1cd2-4474-985c-3b059cdd86e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then view the API documentation for Travis CI at the URL: [https://developer.travis-ci.com/](https://developer.travis-ci.com/).
    In the following screenshot, we make a GET request to the `/config` endpoint and
    use the following two different options in the `raw` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/e1104b0b-07e6-4e83-b292-ffe2ef9b6f7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At some point in the near future, the Travis API plans on deprecating the V2
    API and only the V3 API will be officially supported. You can use the API Explorer
    to make REST calls into the V3 API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot we make a REST call to the following endpoint using
    the `API Explorer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d9893e8-2c6c-4e46-af9a-38b67486bccd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can go to the API Explorer at this url: [https://developer.travis-ci.com/explore/](https://developer.travis-ci.com/explore/).
    Then you input the resource in the input box that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d8b38d2-ccc7-46eb-9f27-85816c89bdae.png)'
  prefs: []
  type: TYPE_IMG
- en: API V3 REST call with curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will issue the `travis token` command so that we can copy the access token
    to the system clipboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will run the `travis endpoint` command and copy the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will make a `curl` request in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that in this curl request we used the `travis token` cli command that
    will return a valid token for this particular HTTP Header. This HTTP request will
    return a JSON response payload which we will use to copy a particular repo ID to
    make the following REST call to find all the environment variables for the `functional-summer`
    repo ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `GET` request, we get all the environment variables from the `functional-summer`
    repository and receive a JSON response like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us make a `POST` request to add an environment variable to the `functional-summer`
    repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we make a `GET` request for the environment variables, we see that
    we have an environment variable called `MOVIE` that has been set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Printing out important system configuration information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `report` command prints out important system configuration information,
    as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/11891700-6972-497f-a649-11179687e989.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing all the repositories that the currently logged in user has access to
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `repos` command will list repositories whether they are active or not and
    has a variety of options that can be used. In the following screenshot, we used
    the `-m` option to match all the repositories for the `packtci` GitHub user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a12f8524-e533-4846-a541-ccc9ad9d8d64.png)'
  prefs: []
  type: TYPE_IMG
- en: Initiating synchronization with Travis CI for any new or outdated repositories
    in GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sync` command helps you update information about users and any new or
    modified repositories in GitHub. Let us add another repository to GitHub called
    `functional-patterns` ([https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns)).
    In the following screenshot, we use the `sync` command so that Travis CI becomes
    aware of the new repository and then use the `repos` command to confirm that it
    shows up in the list of repos we have access to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8d14d83-b528-44d4-8440-0dce1389832c.png)'
  prefs: []
  type: TYPE_IMG
- en: The `sync` command can replace the step we took in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, where we clicked the Sync account button
    to synchronize all the repository information in our account.
  prefs: []
  type: TYPE_NORMAL
- en: lint - a Travis YML script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `lint` command is very useful as it checks that you have the proper syntax
    in your Travis YML script. Let use create a Travis YML script in the `functional-patterns` repository
    ([https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns))
    that we just added to GitHub. We will add the following entry for the `.travis.yml`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us now run the `lint` command to check the syntax. In the following screenshot,
    Travis informs us that we are using an illegal value of `blah` and that it will
    default to `ruby` as the language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1eb10fde-5937-424e-b83b-0d389dff543a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us fix the language entry to use Node.js and then run the `lint` command
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/09e0846d-0a6e-486c-9ad3-ea8155abb4ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The `lint` command reports that we now have valid syntax in our `.travis.yml`
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining current build information for the organization or user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `whatsup` command lets you see activity that has recently occurred in Travis.
    When we ran this `whatsup` command, it gave us the most recent activity in Travis
    CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/54fa5d69-f491-47e8-8e66-20de3d90ffb2.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `packtci` Travis account, there is only one user but you can have many
    users in a Travis CI account, and so it may be more useful to see only your repositories
    with the `whatsup` command. Remember that we can use the `help` command to find
    out more options for a particular command. As an exercise, use the `help` command
    to find the options to show only your own repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the currently logged-in user information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `whoami` command is useful to find out the currently logged-in user for
    Travis CI account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/970c8631-76a8-4dff-9ed4-9ff6eeeee86c.png)'
  prefs: []
  type: TYPE_IMG
- en: The `whoami` command reports `packtci` as we would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Repository commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The repository commands have all the options that the API commands have and
    additionally you can specify the specific repository that you want to work with
    using the `--repo owner/name` option.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the most recent build information for each branch in Git version
    control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `branches` command shows the most recent build information for each branch
    in version control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9fae3d9e-b9b9-4f2b-a532-b38acb3b2c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: There could be more branches shown when you run this command.
  prefs: []
  type: TYPE_NORMAL
- en: Listing cache information for all the repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cache` command can list all the caches in a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/982eaa9f-8935-4459-be66-641fe045438d.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting cache information for a given repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cache` command can also delete the caches in the repository if you use
    the `-d`, `--delete` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/296b04f3-b20f-4947-81c0-84bfadb1a737.png)'
  prefs: []
  type: TYPE_IMG
- en: We received a warning message in red asking us for confirmation to delete the
    caches.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a repository in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `enable` command will activate Travis CI in your GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63e34061-6bfa-455f-926d-7b717bac3823.png)'
  prefs: []
  type: TYPE_IMG
- en: The `enable` command helps replace the manual step we took in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, to activate a repository in Travis CI, where we clicked
    the slider button in the Travis web client to activate the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling a repository in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `disable` command will make the Travis CI in your GitHub repository inactive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a012e33c-82b9-4eef-a0a5-a43def2dcfdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Cancelling the latest build in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us enable the `functional-patterns` repo with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us push a commit to the repository by using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous `git` command lets you reuse the previous `git commit` command
    that you used, but you will need to issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us look at the current state of the repositories in Travis CI; it may take
    a while for the build to be officially created in Travis CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7527ff6-74f0-4995-802d-8e461ee7362a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we issue the `whatsup` command to see the current
    status of the builds and notice that `packtci/functional-patterns` started job
    number `1`. We then issued the `travis cancel` command and provided an argument
    of `1`. This was not completely necessary as this was the current build, so we
    could have just issued the `travis cancel` command. When we run the `travis whatsup`
    command, the build is canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting environment variables or deployment keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `encrypt` command lets you encrypt secret values stored in environment
    variables and/or deployment keys that you don''t want to publicly expose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dd03cf6a-4f90-4447-86ea-000887cdc70d.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding environment variables in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add this entry into our `.travis.yml` script in the `env` block. You
    can read more about using environment variables in Travis CI in this documentation
    at [https://docs.travis-ci.com/user/environment-variables](https://docs.travis-ci.com/user/environment-variables).
    In general, you can add environment variables by adding a block called `env` in
    your `.travis.yml` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have added a sample snippet in the `.travis.yml` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We added a public environment variable called `DB_URL` and a global variable
    by using the `global` block and then pasting the entry into it.
  prefs: []
  type: TYPE_NORMAL
- en: You can automatically add the entry by using the `--add` option if you want,
    although any comments you have in the `.travis.yml` script will be gone, as will
    the spacing, so be mindful of this when you run the `--add` option.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `encrypt-file` command will encrypt an entire file using symmetric (AES-256)
    encryption and stores the secret in a file. Let us create a file called `secret.txt`
    and add the following entries into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us encrypt our secret file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67bb1e1a-38f5-4298-bf44-30ee8b1955cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So now we will add this entry into our `.travis.yml` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It can then decrypt the values in the secret text file for us.
  prefs: []
  type: TYPE_NORMAL
- en: Listing environment information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `env` command can list all the environment variables set for the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/18ddd3dd-ae1a-4afe-a596-c0c17ab796fc.png)'
  prefs: []
  type: TYPE_IMG
- en: We don't have any environment variables set for this repository.
  prefs: []
  type: TYPE_NORMAL
- en: Setting an environment variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `env` command can also set an environment variable from the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2659ed9e-4639-4f03-a5f7-1ea231eaf88f.png)'
  prefs: []
  type: TYPE_IMG
- en: We set an environment variable of `API_URL` and that it shows up as an environment
    variable for the multiple languages repository now.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an environment variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `env` command can also remove an environment variable from the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/330adbc3-34a5-4966-9786-78af22a56f5a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `travis env` list command now reports that we don't have any environment
    variables set for the multiple-languages repository which is what we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing out all environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `env` command can be used to clear out all of the environment variables
    that have been set in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5b11b397-cc21-4809-b2dc-c808c00e4f1b.png)'
  prefs: []
  type: TYPE_IMG
- en: List history information for recent builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `history` command displays a repositories build history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/47f82048-ebfb-4bf8-8ed0-eb70efae4225.png)'
  prefs: []
  type: TYPE_IMG
- en: The `history` command will by default only display the last 10 builds, but you
    can limit or extend the number of builds by using the `--limit` option.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing Travis CLI on a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `init` command will help you set up Travis CI in a project by generating
    a `.travis.yml` script for you. We have set up a new project in GitHub called
    `travis-init-command` ([https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command)).
    We will use the `init` command to set up Golang in this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3e87decb-4ad6-4252-8847-0643b06a2c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The steps in the process are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to use the `sync` command so that Travis CI is aware of this
    new repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we will enable this new repository in Travis CI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we will try to create a `.travis.yml` script with Golang, but notice that
    it is not recognized, so we try again with Go and it succeeds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we print out the contents of the new file and notice that it set the
    language to Go and used two different versions of Go
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Printing out CI build log information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `logs` command will print out the contents of the Travis CI log for the
    repository and by default it will print out the first job of the latest build.
    Here, we run the `logs` command in the recent repository that we created; it won''t
    pass the CI build, however, since there aren''t any buildable Go files in the
    repository yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `build` failed, as we noted earlier, because there aren't any
    Go files to be built. The `logs` command can also be given a specific build number
    to run and you can also give them a specific branch to run. Run the `travis help
    logs` command for more options.
  prefs: []
  type: TYPE_NORMAL
- en: Opening the Travis web interface for the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `open` command will open the repository in the Travis CI web client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Running `travis open` in the `travis-init-command` repository ([https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command))
    will take us to the following URL at [https://travis-ci.org/packtci/travis-init-command](https://travis-ci.org/packtci/travis-init-command).
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `--print` option to print out the URL instead of opening it
    to the specific project view, as it does by default. Run the `travis help open`
    command for more options.
  prefs: []
  type: TYPE_NORMAL
- en: Printing out public key information for the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pubkey` command will print out the public SSH key for the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5208a514-128f-4572-9509-3c09b2157d3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For security reasons, I removed the public key information. You can also display
    the key in different formats. For example, if you use the `--pem` option your
    key will display like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b56b9ecb-27fe-4a3d-8024-ab79eb9bee4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `travis help pubkey` command to show more options for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d27d584-4b6f-4166-ae8c-ae4111b159c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Restarting the latest CI build in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `restart` command will restart the latest build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc36f25c-2600-4e08-8733-0783cba99bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Printing out current build requests in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `requests` command will list any build requests that Travis CI receives.
    We will run the `travis requests` command on the build we just triggered for the
    `travis-init-command` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a038f86-fbb8-4c35-b3ee-c0ed0b3d64da.png)'
  prefs: []
  type: TYPE_IMG
- en: The build is still failing because there aren't any buildable Go files in it
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Printing out particular repository settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `settings` command will display repository settings for the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e46036b-e732-4dda-b336-51f4788908ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that the minus (`-`) means it is disabled while the plus (`+`) means
    it is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `travis settings` command can also be used to enable, disable, and set
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf38a65e-73e8-4e0d-9cc9-38078906c4cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Travis CI add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `setup` command helps you configure Travis add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/992b1f80-7f78-4b85-a374-f44f3e9a82d8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see more Travis add-ons that are available in the Travis CLI user documentation
    ([https://github.com/travis-ci/travis.rb#setup](https://github.com/travis-ci/travis.rb#setup)).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying general information for the current CI build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `show` command displays general information about the most recent CI build
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e57cb227-ca7f-4fb5-a004-0f145af11f55.png)'
  prefs: []
  type: TYPE_IMG
- en: The first command, `travis show`, displayed the most recent build and in the
    next run we provided a specific build number.
  prefs: []
  type: TYPE_NORMAL
- en: Listing SSH key in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sshkey` command will check if there is a custom SSH key set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This command only works with Travis's Pro version, and if there is no SSH key
    it will report that no custom SSH key is installed.
  prefs: []
  type: TYPE_NORMAL
- en: You can read about more options in this command in the user documentation ([https://github.com/travis-ci/travis.rb#sshkey](https://github.com/travis-ci/travis.rb#sshkey)).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying status information for the current build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `status` command outputs a one-line message about the project''s last build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8bfabd10-4cb7-4b21-b0f6-1fbf576530a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Travis CI options for Pro version and Enterprise version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the general API commands hit the `api.travis-ci.org` endpoint. The
    Travis Pro version has some additional features and options that a regular Travis
    account does not have such as using the `sshkey` command and more. You can read
    more about the options in the user documentation ([https://github.com/travis-ci/travis.rb#pro-and-enterprise](https://github.com/travis-ci/travis.rb#pro-and-enterprise)).
  prefs: []
  type: TYPE_NORMAL
- en: Option to display the information for Pro version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you use the `--pro` option with the general API command, then you will hit
    the Travis Pro endpoint at `https://api.travis-ci.com/`. So for example if we
    make the following request using the `--pro` option we will hit Travis Pro API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6cea2ba-e508-40c8-a0af-3c79fa1967f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that the host is `travis-ci.com` which is Travis PRO.
  prefs: []
  type: TYPE_NORMAL
- en: Option to display information for Enterprise version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have Travis Enterprise set up, then you can use the `--enterprise` option
    so that you hit where your enterprise domain lives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c81581fe-ffa1-4033-9424-daa668e61b2e.png)'
  prefs: []
  type: TYPE_IMG
- en: We don't have Travis Enterprise set up, but if you did then you would enter
    your domain here.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone over how to install Ruby and Travis CLI RubyGem
    on the Windows operating system, macOS operating system, and Linux operating system.
    We went over each Travis CLI command in detail and discussed the various ways
    to use each command and some of the options that each command takes. We also showed
    you how to directly call the Travis API using the curl REST client. Finally, we
    looked at some of the features in the Travis Pro and Enterprise versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over some more advanced techniques to log out
    values and to debug with Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the recommended way to install Ruby on the Windows OS according to the
    Travis docs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command should you use to print out the current version of Travis that
    is installed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command do you use to print out helpful information in Travis CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you get an access token to work with the general API commands in Travis
    CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What HTTP header do you need to use to work with Travis API Version 3?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you print out system configuration information?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command checks the syntax of your Travis YML script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command helps you set up Travis in your project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can further explore the Travis CLI options in the user documentation ([https://github.com/travis-ci/travis.rb](https://github.com/travis-ci/travis.rb)) and
    you can read more about using the Travis API in the API documentation ([https://developer.travis-ci.com/](https://developer.travis-ci.com/)).
  prefs: []
  type: TYPE_NORMAL
