- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every Web developer must have come across it every once in a while, even if
    they just dabble in simple Web pages. Whenever you want to make your Web page
    a little more interactive, you grab your trustworthy friends, such as JavaScript
    and jQuery, and hack together something new. You might have developed some exciting
    frontend applications using AngularJS or Backbone and want to learn more about
    what else you can do with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: While testing your website on multiple browsers you must have come across Google
    Chrome at some point and you might have noticed that it is a great platform for
    JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Chrome and Node.js have something very big in common: they both work
    on Google''s high-performance V8 JavaScript engine, this gives us the same engine
    in the browser that we will be using in the backend, pretty cool, right?'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started and use Node.js, we need to download and install Node.js.
    The best way to install it will be to head over to [https://nodejs.org/](https://nodejs.org/)
    and download the installer.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the current version of Node.js is 4.2.1.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure consistency, we are going to use a `npm` package to install the correct
    version of Node.JS and, for this, we are going to use the `n` package described
    at [https://www.npmjs.com/package/n](https://www.npmjs.com/package/n).
  prefs: []
  type: TYPE_NORMAL
- en: Currently, this package has support only for `*nix` machines. For Windows. see
    nvm-windows or download the binary for 4.2.1 from [https://nodejs.org/dist/v4.2.1/](https://nodejs.org/dist/v4.2.1/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Node.js installed, open a terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `–g` argument will install the package globally so we can use the package
    anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Linux users may need to run commands that install global packages as `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the recently install package, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display a screen with the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If `node/4.2.1` isn''t marked we can simply run the following packages; this
    will ensure that `node/4.2.1` gets installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the `node` is good-to-go, lets create and run a simple `hello
    world` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Cool, it works; now let's get down to business.
  prefs: []
  type: TYPE_NORMAL
- en: Hello require
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, we just logged a simple message, nothing interesting,
    so let's dive a bit deeper in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using multiple scripts in the browser, we usually just include another
    script tag such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Both these scripts share the same global scope, this usually leads to some unusual
    conflicts when people want to give variables the same name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This can lead to confusion, and when many files are minified and crammed together
    it causes a problem; `script_a` declares a global variable, which is then declared
    again in `script_b` and, on running the code, we see the following on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The most common method to get around this and to limit the pollution of the
    global scope is to wrap our files with an anonymous function, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we run this, it works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is good for code that isn’t depended upon externally, but what do we do
    for the code that is? We just *export* it, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Something similar to the following code will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we run this script, we can access Logger from the global scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So now we can share our libraries and everything is good; But what if someone
    else already has a library that exposes the same `Logger` class.
  prefs: []
  type: TYPE_NORMAL
- en: What does `node` do to solve this issue? Hello require!
  prefs: []
  type: TYPE_NORMAL
- en: Node.js has a simple way to bring in scripts and modules from external sources,
    comparable to require in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets create a few files in this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can see that `main.js`. is dependent on `util/index.js`, which is in turn
    dependent on `util/logger.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should just work right? Maybe not. Let''s run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: So why is this? Shouldn't they be sharing the same global scope? Well, in Node.js
    the story is a bit different. Remember those anonymous functions that we were
    wrapping our files in earlier? Node.js wraps our scripts in them automatically
    and this is where require fits in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets fix our files, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you notice, I didn't use `index.js` when requiring `util/index.js`; the reason
    for this is that when you a require a folder rather than a file you can specify
    an index file that can represent that folder's code. This can be handy for something
    such as a model folder where you expose all your models in one require rather
    than having a separate require for each model.
  prefs: []
  type: TYPE_NORMAL
- en: So now, we have required our files. But what do we get back?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Still, there is no logger. We have missed an important step; we haven't told
    Node.js what we want to expose in our files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To expose something in Node.js, we use an object called `module.exports`. There
    is a shorthand reference to it that is just *exports*. When our file is wrapped
    in an anonymous function, both *module* and *exports* are passed as a parameter,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The example shows that *exports* is initially just a reference to `module.exports`.
    This means that, if you use `exports = { }`, the value you set it as won't be
    accessible outside the function's scope. However, when you add properties to an
    *exports* object, you are actually adding properties to the `module.exports` object
    as they are both the same value. Assigning a value to `module.exports` will export
    that value because it is accessible outside the function's scope through the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this knowledge, we can finally run our script in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Require can also be used to include modules in our code. When requiring modules,
    we don't need to use a file path, we just need the name of the `node` module that
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js includes many prebuilt core modules, one of which is the `util` module.
    You can find details on the `util` module at [https://nodejs.org/api/util.html](https://nodejs.org/api/util.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the `util` module command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Hello npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with internal modules there is also an entire ecosystem of packages; the
    most common package manager for Node.js is `npm`. At the time of writing, there
    are a total of 192,875 packages available.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `npm` to access packages that do many things for us, from routing
    HTTP requests to building our projects. You can also browse the packages available
    at [https://www.npmjs.com/](https://www.npmjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Using a package manager you can bring in other modules, which is great as you
    can spend more time working on your business logic rather than reinventing the
    wheel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s download the following package to make our log messages colorful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to use it, create a file and require it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: On running this code, you will see the first message in a default color and
    the second message in blue. Let's look at the command:.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Having the ability to download existing packages comes in handy when you require
    something that someone else has already implemented. As we said earlier, there
    are many packages out there to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to keep track of these dependencies and there is a simple solution
    to that: `package.json`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using `package.json` we can define things, such as the name of our project,
    what the main script is, how to run tests, our dependencies, and so on. You can
    find a full list of properties at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` provides a handy command to create these files and it will ask you the
    relevant questions needed to create your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding utility will walk you through the creation of a `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: It only covers the most common items and tries to guess valid defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `npm help json` command for definitive documentation on these fields
    and to know what they do exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Afterwards, use `npm` and install `<pkg> --save` to install a package and save
    it as a dependency in the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Press `^C` to quit at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The utility will provide you with default values, so it is easier to just skip
    through them using the *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when installing our package we can use the `--save` option to save `chalk`
    as a dependency, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see chalk has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We can add these dependencies manually by modifying `package.json`; this is
    the most common method to save dependencies on installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the package file at: [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are creating a server or an application rather than a module, you most
    likely want to find a way to start your process without having to give a path
    to your main file all the time; this is where the script object in your `package.json`
    file comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set your start up script, you just need to set the `start` property in the
    `scripts` object, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, all we need to do is run `npm` start and then `npm` will run the start
    script we have already specified.
  prefs: []
  type: TYPE_NORMAL
- en: We can define more scripts, for example if we want a start script for the development
    environment we can also define a development property; with non-standard script
    names however, instead of just using `npm <script>`, we need to use `npm run <script>`.
    For example, if we want to run our new development script we will have to use
    `npm run development`.
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` has scripts that are triggered at different times. We can define a `postinstall`
    script that runs after we run `npm install`; we can use this if we want to trigger
    a package manager to install the modules (for example, bower)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the scripts object here: [https://docs.npmjs.com/misc/scripts](https://docs.npmjs.com/misc/scripts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to define a package if you are working in a team of developers where
    the project is to be installed on different machines. If you are using a source
    control tool such as **git**, it is recommended that you add the `node_modules`
    directory into your ignore file, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That was quick, wasn't it? We have covered the fundamentals of Node.js, which
    we need to continue on our journey.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered how easy it is to expose and protect public and private code
    compared to regular JavaScript code in the browser, where the global scope can
    get very polluted.
  prefs: []
  type: TYPE_NORMAL
- en: We also know how to include packages and code from external sources and how
    to ensure that the packages included are consistent.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see there is a huge ecosystem of packages in one of the many package
    managers, such as `npm`, just waiting for us to use and consume.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on creating a simple server to route, authenticate,
    and consume requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
