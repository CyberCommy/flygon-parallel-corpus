- en: AOP and Logger Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about Spring **Aspect-Oriented Programming**
    (**AOP**) and logger controls, both their theory and implementation. We will integrate
    Spring AOP in our existing REST APIs and walk through how AOP and logger controls
    will make our lives easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring AOP theory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of Spring AOP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we need logger controls?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we implement logger controls?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring AOP and logger controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aspect-oriented programming (AOP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aspect-oriented programming is a concept where we add a new behavior to existing
    code without modifying the code itself. The AOP concept is really helpful when
    it comes to logging or method authentication.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways you can use AOP in Spring. Let's not get into much detail,
    as it will be a big topic to discuss. Here, we will discuss only the `@Before`
    pointcut and how to use `@Before` in our business logic.
  prefs: []
  type: TYPE_NORMAL
- en: AOP (@Before) with execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The term execution in AOP means having a pointcut in the `@Aspect` annotation
    itself, and it doesn''t depend on the controller API. The alternate way is that
    you will have to explicitly mention the annotation in the API call. Let''s talk
    about the explicit pointcut in the next topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this pointcut, we have used the `@Before` annotation, and it uses `execution(*
    com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`, which means
    this pointcut will be focusing on a specific method, the `testAOPWithoutAnnotation`
    method inside the `HomeController` class, in our case.
  prefs: []
  type: TYPE_NORMAL
- en: 'For AOP-related work, we might need to add the dependency to our `pom.xml`
    file, which is mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding dependency will bring all aspect-oriented classes to support our
    AOP implementation in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '`@Aspect`: This annotation is used to make the class support aspects. In Spring,
    aspects can be implemented using XML configurations or annotation, such as `@Aspect`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Component`: This annotation will make the class scannable according to the
    rule of Spring''s component scanner. By mentioning this class with `@Component`
    and `@Aspect`, we tell Spring to scan this class and identify it as an aspect.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `HomeController` class is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we simply create a new method to test our AOP. You may not need to create
    a new API to test our AOP. As long you provide the appropriate method name, it
    should be okay. To make it easier for the reader, we have created a new method
    called `testAOPExecution` in the `HomeContoller` class.
  prefs: []
  type: TYPE_NORMAL
- en: Testing AOP @Before execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just call the API (`http://localhost:8080/test/aop/with/execution`) in the
    browser or using any other REST client; then, you should see the following in
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Even though this log doesn't really help our business logic, we will keep it
    for now to keep things easier for the reader to understand the flow. Once we learn
    about AOP and how it functions, we will integrate it into our business logic.
  prefs: []
  type: TYPE_NORMAL
- en: AOP (@Before) with annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen an execution-based AOP method that can be used for one
    or more methods. However, in some places, we may need to keep the implementation
    plain to increase visibility. This will help us use it wherever it is needed,
    and it is not tied to any method. We call it explicit annotation-based AOP.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use this AOP concept, we may need to create an interface that will
    help us with what we need to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: '`TokenRequired` is just a base interface for our `Aspect` class. It will be
    supplied to our `Aspect` class, which is mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`@Retention`: A retention policy determines at what point the annotation should
    be discarded. In our case, `RetentionPolicy.RUNTIME` will be retained for the
    JVM through runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other retention policies are as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOURCE`: It will be retained only with the source code, and it will discarded
    during compile time. Once the code is compiled, the annotation will be useless,
    so it won''t be written in the bytecode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`CLASS`: It will be retained till compile time and will be discarded during
    runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Target`: This annotation is applicable for the class level and matches at
    runtime. The target annotation can be used to collect the target object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `tokenRequiredWithAnnotation` method will implement the business
    logic for our aspect. To keep the logic simple, we have just provided `System.out.println(..)`.
    Later, we will add the main logic to the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have created a method called `tokenRequiredWithAnnotation`
    and supplied the `TokenRequired` interface as a parameter for this method. We
    can see the annotation called `@Before` on top of this method with `@annotation(tokenRequired)`.
    This method will be called every time the `@TokenRequired` annotation is used
    in any method. You can see the annotation usage as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The main difference between the previous AOP method and this is `@TokenRequired`.
    In the old API caller, we didn't mention any AOP annotation explicitly, but we
    have to mention `@TokenRequired` in this caller as it will call the appropriate
    AOP method. Also, in this AOP method, we don't need to mention `execution`, like
    we did in the previous `execution(* com.packtpub.restapp.HomeController.testAOPWithoutAnnotation())`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Testing AOP @Before annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just call the API (`http://localhost:8080/test/aop/with/annotation`) in the
    browser or using any other REST client; then, you should see the following on
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Integrating AOP with JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's assume that you want to restrict the `deleteUser` option in the `UserContoller`
    method. Whoever deletes the user should have the proper JWT token. If they don't
    have the token with them, we won't let them delete any users. Here, we will first
    have a `packt` subject to create a token.
  prefs: []
  type: TYPE_NORMAL
- en: The `http://localhost:8080/security/generate/token?subject=packt`-generated
    token API can be called to generate the token.
  prefs: []
  type: TYPE_NORMAL
- en: When we use `packt` in the subject, it will generate the `eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYWNrdCIsImV4cCI6MTUwOTk0NzY2Mn0.hIsVggbam0pRoLOnSe8L9GQS4IFfFklborwJVthsmz0`
    token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will have to create an AOP method to restrict the user by asking them
    to have the token in the header of the `delete` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the preceding code, you can see the JWT integration in AOP. Yes,
    we have integrated the JWT token verification part with AOP. So hereafter, if
    someone calls the `@TokenRequired`-annotated API, it will first come to the AOP
    method and check for a token match. If the token is empty, not matched, or expired,
    we will get an error. All possible errors will be discussed as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start using the `@TokenRequired` annotation in our API call in the
    `UserController` class. So whenever this `deleteUser` method is called, it will
    go to `JWT`, checking pointcut before executing the API method itself. By doing
    this, we can assure that the `deleteUser` method will not be called without a
    token.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `UserController` class is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If the token is empty or null, it will throw the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If the token is matched, it will show the result without throwing any error.
    You''ll see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we don''t provide any token in the headers, it might throw the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the token is expired, you will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Logger controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging will be helpful when we need to track the output of a specific process.
    It will help us verify the process or find the root cause of the error when things
    go wrong after deploying our application in the server. Without loggers, it will
    be difficult to track and figure out the problem if anything happens.
  prefs: []
  type: TYPE_NORMAL
- en: There are many logging frameworks we can use in our application; Log4j and Logback
    are the two major frameworks used in most applications.
  prefs: []
  type: TYPE_NORMAL
- en: SLF4J, Log4J, and Logback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SLF4j is an API to help us choose Log4j or Logback or any other JDK logging
    during deployment. SLF4j is just an abstraction layer that gives freedom to the
    user who uses our logging API. If someone wants to use JDK logging or Log4j in
    their implementation, SLF4j will help them plug in the desired framework during
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: If we create an end product that can't be used by someone as a library, we can
    implement Log4j or Logback directly. However, if we have a code that can be used
    as a library, it would be better to go with SLF4j, so the user can follow any
    logging they want.
  prefs: []
  type: TYPE_NORMAL
- en: Logback is a better alternative for Log4j and provides native support for SLF4j.
  prefs: []
  type: TYPE_NORMAL
- en: Logback framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We mentioned earlier that Logback is more preferable than Log4j; here we will
    discuss how to implement the Logback logging framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three modules in Logback:'
  prefs: []
  type: TYPE_NORMAL
- en: '`logback-core`: Basic logging'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`logback-classic`: Improved logging and SLF4j support'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`logback-access`: Servlet container support'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `logback-core` module is the base for other two modules in the Log4j framework.
    The `logback-classic` module is an improved version of Log4j with more features.
    Also, the `logback-classic` module implements the SLF4j API natively. Due to this
    native support, we can switch to different logging frameworks such as **Java Util
    Logging** (**JUL**) and Log4j.
  prefs: []
  type: TYPE_NORMAL
- en: The `logback-access` module provides support to servlet containers such as Tomcat/Jetty,
    specifically to provide HTTP-access log facilities.
  prefs: []
  type: TYPE_NORMAL
- en: Logback dependency and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use Logback in our application, we need the `logback-classic` dependency.
    However, the `logback-classic` dependency is already available in the `spring-boot-starter`
    dependency. We can check this with dependency tree (`mvn dependency:tree`) in
    our project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'While checking dependency tree in the project folder, we will get the whole
    tree for all of our dependencies. The following is the section where we can see
    the `logback-classic` dependency under the `spring-boot-starter` dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Since the necessary dependency files are already available, we don't need to
    add any dependencies for Logback framework implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Logging levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As SLF4j defined these logging levels, whoever implements SLF4j should adapt
    the logging levels of SFL4j. The logging levels are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TRACE`: Detailed comments that might not be used in all cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEBUG`: Useful comments for debugging purposes in production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFO`: General comments that might be helpful during development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WARN`: Warning messages that might be helpful in specific scenarios such as
    deprecated methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ERROR`: Severe error messages to be watched out for by the developer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add the logging configuration to the `application.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding configuration, we have used logging configuration for both
    Spring Framework and our application. According to our configuration, it will
    print `ERROR` for Spring Framework and `INFO` for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Logback implementation in class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a `Logger` to the class; in our case, we can use `UserController`.
    We have to import `org.slf4j.Logger` and `org.slf4j.LoggerFactory`. We can check
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we introduced the `_logger` instance. We use the `UserController`
    class as a parameter for the `_logger` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to use the `_logger` instance to print the message we wanted.
    Here, we have used `_logger.info()` to print the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have used various loggers to print messages. When
    you restart the server and call the `http://localhost:8080` REST API, you will
    see the following output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the log, the class name will always be in the log to identify
    the specific class in the log. As we haven't mentioned any logging pattern, the
    logger takes the default pattern to print the output with the class. If we need,
    we can change the pattern in our configuration file to get customized logging.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, we have used different logging levels to print the messages.
    There is a restriction on the logging level, so based on the business requirements
    and implementation, we will have to configure our logging levels.
  prefs: []
  type: TYPE_NORMAL
- en: In our logger configuration, we have used only the console printing option.
    We can also provide an option to print to external files wherever we want.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered Spring AOP and logger controls with implementation.
    In our existing code, we introduced Spring AOP and walked through how AOP saves
    time via code reuse. For the user to understand AOP, we simplified AOP implementation.
    In the next chapter, we will talk about how to build a REST client and discuss
    more about error handling in Spring.
  prefs: []
  type: TYPE_NORMAL
