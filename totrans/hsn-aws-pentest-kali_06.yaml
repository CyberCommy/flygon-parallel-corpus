- en: Setting Up Your First EC2 Instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most popular and central component of AWS is the** Elastic Compute Cloud** (**EC2**). The
    EC2 provides on-demand scalable computing infrastructure to developers through
    virtual machines. This means that a developer can spin up a virtual machine with
    customized specs in a choice of geographical locations to run their application.
  prefs: []
  type: TYPE_NORMAL
- en: The service is **elastic**, meaning a developer has the option to scale up or
    down their infrastructure as required for operations and pay by the minute for
    active servers only. The developer can set the geographical location to reduce
    latency and achieve a high level of redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on creating an Amazon EC2 instance, setting up a VPC around
    the instance, and configuring the firewall to restrict remote access to this VPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to run setup customized EC2 instances with the available AMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage types that are used for EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall and VPC configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to use the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Linux AMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH client and a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting Up Ubuntu on AWS EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through setting up an EC2 instance on the cloud
    running an Ubuntu AMI and look at the various settings that we can customize according
    to our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The Ubuntu AMI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen in the previous chapters, setting up an EC2 instance can be
    pretty easy and accomplished quickly with a few mouse clicks. AWS Marketplace
    has a number of AMIs that are available ready-made for deployment. The AWS Marketplace
    also offers a range of AMIs from vendors such as SAP, Zend, and Microsoft, as
    well as open source ones, customized for mission-critical projects, such as DevOps
    and NAS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by searching for the Ubuntu Linux AMI in the AWS Marketplace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b641e4f-b331-4b2c-b01f-21f93fea7bc8.png)'
  prefs: []
  type: TYPE_IMG
- en: We will use the latest Ubuntu AMI available at the time of writing, Ubuntu 18.04
    LTS - Bionic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot shows the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The version of the AMI that we are using (18.04 LTS)
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Instance types available for Ubuntu, along with the per-hour pricing for each
    instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview and details of the AMI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the next page, we select the instance type for our AMI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02997ebc-afda-4003-84cf-5ce67972e012.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the instance type
  prefs: []
  type: TYPE_NORMAL
- en: AWS has a free tier eligible instance for Ubuntu called t2.micro that runs on
    1 vCPU and 1 GB of memory, which is sufficient for this tutorial. Ensure that t2.microhas
    been selected and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have configured the RAM and the CPU of our EC2 instance. In the following
    section, we'll learn about configuring its network and VPC settings.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring VPC settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we configured the RAM and CPU of our EC2 instance.
    In this section, we will learn how to create a new VPC and Subnet for our EC2
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have selected t2.micro as our instance type, we are presented with
    the Configure Instance Details page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e846158-fbee-4202-aaee-b694ef9a35d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, we will see how we can configure the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number of Instances**:This is left for the reader to decide how many instances
    are to be launched. For this chapter, we are launching one instance only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**:We will take a look at how to create a new VPC for our EC2 resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnet**: We will look at separating our EC2 resources into different subnets
    within a VPC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto-assign Public IP**: We will enable this so that we can access it from
    our machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by creating a VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on the Create new VPC link, we are taken to the VPC Dashboard,
    where we can see existing VPCs and create new ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f1f801e-982a-474d-88d3-920a554925cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Create VPC and name it `New VPC`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We already have a VPC network with IPv4 block `172.31.0.0/16`. Let's proceed
    and create a new VPC with IPv4 block `10.0.0.0/16`. As is mentioned in the dialogue
    box that appears, our IPv4 CIDR block size can only be between `/16` and `/28`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit Yes, Create, and your VPC will be created within seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/107d74c9-96e4-4156-8627-f701fc026ff4.png)'
  prefs: []
  type: TYPE_IMG
- en: To launch our EC2 instance in this VPC, we will have to create a subnet. Let's
    go to the Subnets section and create a subnet within our new VPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Create subnet and give it a name, `New Subnet`. We''ll select the
    VPC we created. Upon selecting `New VPC`, the VPC CIDR block is shown in the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6db1cb6-1147-4cf2-bb02-211dbbff2631.png)'
  prefs: []
  type: TYPE_IMG
- en: The user can choose any availability zone from those provided. However, we are
    keeping it as No Preference.
  prefs: []
  type: TYPE_NORMAL
- en: We are creating our subnet with the IPv4 CIDR block `10.0.1.0/24`, which means
    it will give us a range of IPs from `10.0.1.1` to `10.0.1.254`. However, we only
    have 251 IP addresses that can be used. This is because the `10.0.1.1` is reserved
    for the gateway of the subnet, `10.0.1.2` is reserved for AWS DNS, and `10.0.1.3`
    is reserved for any future use by AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, we select our VPC as our new VPC and select subnet | New
    Subnet. This is what your screen should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54799c48-c353-4253-8405-571b3c98609a.png)'
  prefs: []
  type: TYPE_IMG
- en: '6\. Let''s continue and add storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b429e61a-536e-4668-81c6-af373e18c9b5.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, each EC2 instance, while being launched, receives a root storage
    device by default. Each EC2 instance gets a default root storage by default. This
    is to house the OS files for the instance to launch. Other than that, we can add
    additional storage to the EC2 instance if required.
  prefs: []
  type: TYPE_NORMAL
- en: Storage types that are used in EC2 instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon offers the following storage types for an EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elastic Block Storage (EBS)**: High-speed storage volumes offered by AWS.
    These are typical storage volumes that are available in either HDD or SSD technology.
    These are raw and unformatted, and can be attached to any EC2 instance, like mounting
    a hard disk drive in real life. The volumes need to be formatted before use. Once
    they are set up, they can be attached, mounted, or unmounted to any EC2 instance.
    These volumes are fast, and are best suited to high-speed and frequent data writes
    and reads. These volumes can be set to persist once the EC2 instance has been
    destroyed. Alternatively, you can create a snapshot of an EBS volume and recover
    data from a snapshot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon EC Instance Store**: Instance store storage volumes are physically
    attached to the host computer where the EC2 instance is hosted and are used for
    storing data temporarily. In other words, once the EC2 instance it is attached
    to has been terminated, the instance store volume is lost as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon EFS Filesystem**: **Elastic FileSystem** (**EFS**) can only be used
    with a Linux-based EC2 instance for scalable file storage. Scalable storage implies
    that the filesystem can be scaled up or shrunk massively based on the use case.
    Applications running on multiple instances can use an EFS as their common data
    source, which means the EFS can be used simultaneously by multiple EC2 instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon S3**: Amazon S3 is one of the flagship services for AWS that is used
    for storing data on the cloud. It is highly scalable and enables us to store and
    retrieve any amount of data, at any time. Amazon EC2 uses Amazon S3 to store EBS
    snapshots and instance store-backed AMIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have an 8 GB root volume for our EC2 instance by default. For this activity,
    let''s add an additional EBS volume to the EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18034803-77fd-4841-a650-6d8366f3e799.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that within EBS, there are five different volume types that we can
    use with varying **input/output operations per second** (**IOPS**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose SSD (GP2) volumes**: A cost-effective storage solution suited
    mostly for general purpose use across a wide range of workloads. This volume can
    sustain 3,000 IOPS for an extended period of time, with a minimum of 100 IOPS
    and a maximum of 10,000 IOPS. GP2 volumes provide a very low level of latency
    and can be scaled at 3 IOPS per GB. A GP2 volume can be allocated between 1 GB
    and 16 TB of space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioned IOPS SSD (IO1) volumes**: These are much faster and provide much
    higher performance than the GP2 volumes. IO1 volumes can sustain between 100 and
    32,000 IOPS, which is more than three times as much as GP2\. This type of storage
    is designed for I/O intensive operations such as databases. AWS also allows you
    to specify a rate of IOPS when creating an IO1 volume that AWS can deliver consistently.
    IO1 volumes can be provisioned between a minimum of 4 GB and a maximum of 16 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throughput Optimized HDD (ST1)**: ST1 is a low-cost storage solution based
    on magnetic storage disks instead of SSD. These cannot be used as a bootable volume,
    and instead are best suited to store frequently accessed data, such as log processing
    and data warehousing. These volumes can only range from a minimum of 1 GB to a
    maximum of 1 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold HDD (SC1)**: SC1 or Cold HDD volumes, though similar to ST1 volumes,
    are not designed to hold frequently accessed data. These are also low-cost, magnetic
    storage volumes that cannot be used as bootable volumes. Similar to ST1, these
    volumes can only range from a minimum of 1 GB to a maximum of 1 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this tutorial, we are adding an additional 40 GB EBS volume General Purpose
    SSD (GP2) to our machine. Don't forget to check Delete on Termination, or the
    storage instance will continue to persist after you terminate your EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: We won't add any tags to our EC2 instance, so let's move on to the next section, *Security
    Group*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring firewall settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each EC2 instance is protected by its own virtual firewall known as security
    groups. This acts like a typical firewall and manages access to the EC2 instance
    by controlling inbound and outbound traffic. While setting up an EC2 instance,
    we can add rules to allow or deny traffic to the associated EC2 instance. EC2
    instances can also be grouped into a security group, which is useful when one
    firewall rule needs to be applied to multiple EC2 instances. Once the rules have
    been modified, changes take effect immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'EC2 instances that run Linux AMI images have the SSH port allowed by default
    for remote access. In the case of Windows machines, RDP is allowed by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ac1de6f-f007-409f-bd20-d0bd0bcc3206.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, since our AMI is an Ubuntu Linux image, that AWS has automatically
    configured the network rules to allow SSH (port 22) only. Let''s add a few more
    network rules to allow HTTP and HTTPS as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/300a5b19-7af9-4ef9-8bd1-b13a8330ff45.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we are all set to launch our AMI. Click on Review and Launch and then click
    on Launch.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at configuring authentication to access our
    EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring EC2 authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within AWS, all AMI Linux images are configured to authenticate any SSH session
    using a key pair authentication system instead of a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before an EC2 instance is to be launched, AWS prompts us to configure an SSH
    key pair to be able to connect. We can either create our own SSH key pair or use
    an existing one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4e6af18-7822-49db-b21b-6cb415290c17.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's create a new key pair and name it `ubuntukey`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, download the key pair and launch the instance. The key pair file we get
    is `ubuntukey.pem`. The name of the file will change based on the key name that
    was provided previously. Ensure that the key file is stored securely. In case
    the key is lost, AWS won't provide another key file and you will no longer be
    able to access your EC2 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the key file has been downloaded, AWS redirects you to the Launch Status
    page to let you know that your EC2 instance is being launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85088d9d-52a7-484b-a541-4366c8a8c12d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now go to our list of EC2 instances and find out the public IP address
    that has been assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to connect to the AWS machine, you can do so from a local Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bring up the Terminal and issue the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'However, connecting from a Windows local machine requires some more work:'
  prefs: []
  type: TYPE_NORMAL
- en: Install PuTTY on your local machine. We now have to convert the `.pem` file
    in to a `.ppk` file, since PuTTY only accepts `.ppk` (PuTTY private key).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch PuTTYgen from your start menu and click on load. Select `All files`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb960a98-9067-4410-85bc-6b50b6a9bb5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, point PuTTYgen to the `.pem` file that we have downloaded. PuTTYgen will
    then load and convert your file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2383d83-5596-4c79-aed2-5ad63a8f7400.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the `.pem` file has been loaded, click on Save private key to generate
    the `.ppk` file. PuTTY displays a warning and asks whether you want to save the
    key without a passphrase. You may select `Yes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for your `.ppk` file and click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have converted the `.pem` file in to a `.ppk` file, we can connect to
    our EC2 instance using PuTTY. Start by launching PuTTY from the start menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Host Name field, enter the hostname, `ubuntu@<<your public ip>>`. Leave
    the port at 22:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afe90e1b-9f83-4eeb-8b28-20cf457f592e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the + button next to SSH. Go to Auth and, next to the field
    named Private key file for authentication, click on Browse. Point PuTTY to the
    `.ppk` file we have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed4a6890-166f-432f-ba79-15e888eb088d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, click on Open to start your SSH session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16714ae9-6314-4408-8abf-6cdd387c20b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Since this is the first time that you are logging into the instance, you will
    receive the following alert.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Yes to continue. You will be authenticated to the Ubuntu instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03b98a4e-c61c-40f0-ac5e-880228cb4081.png)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the exercise for this chapter. We have successfully created an
    EC2 machine and learned how to create new VPCs and subnets. We have also seen
    the different types of storage volumes offered by AWS, and learned how we can
    configure firewall rules for a particular instance. Finally, we set up authentication
    and logged in to our Ubuntu machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter walked you through how to set up an EC2 instance and configure
    all the nitty-gritty of setting up an EC2 instance, such as creating a new VPC,
    configuring a new subnet within a VPC, and adding additional storage. This chapter
    explained the different types of storage that are available for use with EC2 instances,
    such as EBS and Instance Store. Furthermore, we got to know the types of storage
    volumes and what they are suited for. Subsequently, we learned how to configure
    firewall rules using the security group of an EC2 instance. This brings us to
    the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to perform real-life penetration testing
    of an AWS environment running multiple EC2 instances. Furthermore, we will learn
    how to perform automated exploits using Metasploit and perform a lateral movement
    in a network using host pivoting.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Storage**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What Is Amazon VPC?**: [https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon VPC Network Administrator Guide**: [https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html](https://docs.aws.amazon.com/vpc/latest/adminguide/Welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
