- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Deep Learning for Trading
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易的深度学习
- en: This chapter kicks off Part 4, which covers how several **deep learning** (**DL**)
    modeling techniques can be useful for investment and trading. DL has achieved
    numerous **breakthroughs in many domains**, ranging from image and speech recognition
    to robotics and intelligent agents that have drawn widespread attention and revived
    large-scale research into **artificial intelligence** (**AI**). The expectations
    are high that the rapid development will continue and many more solutions to difficult
    practical problems will emerge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章开启了第4部分，介绍了几种**深度学习**（**DL**）建模技术如何对投资和交易有用。DL在许多领域取得了许多**突破**，从图像和语音识别到机器人和智能代理，引起了广泛关注，并重新激发了对**人工智能**（**AI**）的大规模研究。人们对快速发展的期望很高，许多解决实际难题的解决方案将会出现。
- en: In this chapter, we will present **feedforward neural networks** to introduce
    key elements of working with neural networks relevant to the various DL architectures
    covered in the following chapters. More specifically, we will demonstrate how
    to train large models efficiently using the **backpropagation algorithm** and
    manage the risks of overfitting. We will also show how to use the popular TensorFlow
    2 and PyTorch frameworks, which we will leverage throughout Part 4.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将介绍**前馈神经网络**，以介绍与接下来章节中涵盖的各种深度学习架构相关的神经网络工作的关键要素。更具体地，我们将演示如何使用**反向传播算法**高效地训练大型模型，并管理过拟合的风险。我们还将展示如何使用流行的TensorFlow
    2和PyTorch框架，这将贯穿第4部分。
- en: Finally, we will develop, backtest, and evaluate a trading strategy based on
    signals generated by a deep feedforward neural network. We will design and tune
    the neural network and analyze how key hyperparameter choices affect its performance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将开发、回测和评估一个基于深度前馈神经网络生成的信号的交易策略。我们将设计和调整神经网络，并分析关键超参数选择如何影响其性能。
- en: 'In summary, after reading this chapter and reviewing the accompanying notebooks,
    you will know about:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在阅读本章并查看相关笔记本后，您将了解到：
- en: How DL solves AI challenges in complex domains
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DL如何解决复杂领域的AI挑战
- en: Key innovations that have propelled DL to its current popularity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推动DL目前流行的关键创新
- en: How feedforward networks learn representations from data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前馈网络如何从数据中学习表示
- en: Designing and training deep **neural networks** (**NNs**) in Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中设计和训练深度**神经网络**（**NNs**）
- en: Implementing deep NNs using Keras, TensorFlow, and PyTorch
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Keras、TensorFlow和PyTorch实现深度神经网络
- en: Building and tuning a deep NN to predict asset returns
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和调整深度神经网络以预测资产回报
- en: Designing and backtesting a trading strategy based on deep NN signals
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于深度神经网络信号设计和回测交易策略
- en: In the following chapters, we will build on this foundation to design various
    architectures suitable for different investment applications with a particular
    focus on alternative text and image data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将在此基础上构建各种适用于不同投资应用的架构，特别关注替代文本和图像数据。
- en: These include **recurrent neural networks** (**RNNs**) tailored to sequential
    data such as time series or natural language, and **convolutional neural networks**
    (**CNNs**), which are particularly well suited to image data but can also be used
    with time-series data. We will also cover deep unsupervised learning, including
    autoencoders and **generative adversarial networks** (**GANs**) as well as reinforcement
    learning to train agents that interactively learn from their environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包括针对序列数据（如时间序列或自然语言）量身定制的**循环神经网络**（**RNNs**），以及特别适用于图像数据但也可用于时间序列数据的**卷积神经网络**（**CNNs**）。我们还将涵盖深度无监督学习，包括自动编码器和**生成对抗网络**（**GANs**），以及强化学习，用于训练与环境进行互动学习的代理。
- en: You can find the code samples for this chapter and links to additional resources
    in the corresponding directory of the GitHub repository. The notebooks include
    color versions of the images.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的相应目录中找到本章的代码示例和其他资源的链接。笔记本包括图像的彩色版本。
- en: Deep learning – what's new and why it matters
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习-有什么新的，为什么重要
- en: The **machine learning** (**ML**) algorithms covered in *Part 2* work well on
    a wide variety of important problems, including on text data, as demonstrated
    in *Part 3*. They have been less successful, however, in solving central AI problems
    such as recognizing speech or classifying objects in images. These limitations
    have motivated the development of DL, and the recent DL breakthroughs have greatly
    contributed to a resurgence of interest in AI. For a comprehensive introduction
    that includes and expands on many of the points in this section, see Goodfellow,
    Bengio, and Courville (2016), or for a much shorter version, see LeCun, Bengio,
    and Hinton (2015).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*第2部分*涵盖的**机器学习**（**ML**）算法在解决包括文本数据在内的各种重要问题上表现良好，正如*第3部分*所示。然而，它们在解决识别语音或分类图像等中心AI问题方面表现不佳。这些局限性促使了DL的发展，最近的DL突破极大地促进了对AI的兴趣再次高涨。有关全面介绍，包括并扩展了本节中许多观点的内容，请参阅Goodfellow、Bengio和Courville（2016），或者请参阅LeCun、Bengio和Hinton（2015）的简短版本。'
- en: In this section, we outline how DL overcomes many of the limitations of other
    ML algorithms. These limitations particularly constrain performance on high-dimensional
    and unstructured data that requires sophisticated efforts to extract informative
    features.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了DL如何克服其他ML算法的许多局限性。这些局限性特别限制了在需要复杂努力提取信息特征的高维度和非结构化数据上的性能。
- en: The ML techniques we covered in *Parts 2* and *3* are best suited for processing
    structured data with well-defined features. We saw, for example, how to convert
    text data into tabular data using the document-text matrix in *Chapter 14*, *Text
    Data for Trading – Sentiment Analysis*. DL overcomes the **challenge of designing
    informative features**, possibly by hand, by learning a representation of the
    data that better captures its characteristics with respect to the outcome.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, we'll see how DL learns a **hierarchical representation of
    the data**, and why this approach works well for high-dimensional, unstructured
    data. We will describe how NNs employ a multilayered, deep architecture to compose
    a set of nested functions and discover a hierarchical structure. These functions
    compute successive and increasingly abstract representations of the data in each
    layer based on the learning of the previous layer. We will also look at how the
    backpropagation algorithm adjusts the network parameters so that these representations
    best meet the model's objective.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: We will also briefly outline how DL fits into the evolution of AI and the diverse
    set of approaches that aim to achieve the current goals of AI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical features tame high-dimensional data
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed throughout *Part 2*, the key challenge of supervised learning is
    to generalize from training data to new samples. Generalization becomes exponentially
    more difficult as the dimensionality of the data increases. We encountered the
    root causes of these difficulties as the curse of dimensionality in *Chapter 13*,
    *Data-Driven Risk Factors and Asset Allocation with Unsupervised Learning*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'One aspect of this curse is that volume grows exponentially with the number
    of dimensions: for a hypercube with edge length 10, volume increases from 10³
    to 10⁴ as its dimensionality increases from three to four. Conversely, the **data
    density for a given sample size drops exponentially**. In other words, the number
    of observations required to maintain a certain density grows exponentially.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect is that functional relationships between the features and the
    output can become more complex when they are allowed to vary across a growing
    number of dimensions. As discussed in *Chapter 6*, *The Machine Learning Process*,
    ML algorithms struggle to learn **arbitrary functions in a high-dimensional space**
    because the number of candidates grows exponentially while the density of the
    data available to infer the relationship drops simultaneously. To mitigate this
    problem, algorithms hypothesize that the target function belongs to a certain
    class and impose constraints on the search for the optimal solution within that
    class for the problem at hand.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, algorithms typically assume that the output at a new point should
    be similar to the output at nearby training points. This prior **assumption of
    smoothness** or local constancy posits that the learned function will not change
    much in a small region, as illustrated by the k-nearest neighbor algorithm (see
    *Chapter 6*, *The Machine Learning Process*). However, as data density drops exponentially
    with a growing number of dimensions, the distance between training samples naturally
    rises. The notion of nearby training examples thus becomes less meaningful as
    the potential complexity of the target function increases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: For traditional ML algorithms, the number of parameters and required training
    samples is generally proportional to the number of regions in the input space
    that the algorithm is able to distinguish. DL is designed to overcome the challenges
    of learning an exponential number of regions from a limited number of training
    points by assuming that a hierarchy of features generates the data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: DL as representation learning
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many AI tasks like image or speech recognition require knowledge about the world.
    One of the key challenges is to encode this knowledge so a computer can utilize
    it. For decades, the development of ML systems required considerable domain expertise
    to transform the raw data (such as image pixels) into an internal representation
    that a learning algorithm could use to detect or classify patterns.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 许多AI任务，如图像或语音识别，需要对世界有所了解。其中一个关键挑战是将这些知识编码，以便计算机可以利用它。几十年来，开发ML系统需要相当多的领域专业知识，以将原始数据（如图像像素）转换为学习算法可以用来检测或分类模式的内部表示。
- en: Similarly, how much value an ML algorithm adds to a trading strategy depends
    greatly on our ability to engineer features that represent the predictive information
    in the data so that the algorithm can process it. Ideally, the features capture
    independent drivers of the outcome, as discussed in *Chapter 4*, *Financial Feature
    Engineering – How to Research Alpha Factors*, and throughout *Parts 2* and *3*
    when designing and evaluating factors that capture trading signals.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，ML算法对交易策略的增值程度很大程度上取决于我们能否设计代表数据中预测信息的特征，以便算法可以处理它。理想情况下，这些特征捕捉了结果的独立驱动因素，正如*第4章*，*金融特征工程
    - 如何研究Alpha因子*中所讨论的，并在*第2*和*第3*部分中设计和评估捕捉交易信号的因子时。
- en: Rather than relying on hand-designed features, representation learning allows
    an ML algorithm to automatically discover the representation of the data most
    useful for detecting or classifying patterns. DL combines this technique with
    specific assumptions about the nature of the features. See Bengio, Courville,
    and Vincent (2013) for additional information.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与依赖手工设计的特征不同，表示学习允许ML算法自动发现对于检测或分类模式最有用的数据表示。DL将这一技术与关于特征性质的特定假设相结合。有关更多信息，请参阅Bengio，Courville和Vincent（2013）。
- en: How DL extracts hierarchical features from data
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DL如何从数据中提取分层特征
- en: The core idea behind DL is that a multi-level hierarchy of features has generated
    the data. Consequently, a DL model encodes the prior belief that the target function
    is composed of a nested set of simpler functions. This assumption permits an exponential
    gain in the number of regions that can be distinguished for a given number of
    training samples.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DL背后的核心思想是，多层次的特征层次结构生成了数据。因此，DL模型对目标函数由一组更简单函数的嵌套集合组成的先验信念进行编码。这一假设允许在给定数量的训练样本的情况下，对可以区分的区域数量进行指数级的增益。
- en: In other words, DL is a representation learning method that extracts a hierarchy
    of concepts from the data. It learns this hierarchical representation by **composing
    simple but non-linear functions** that successively transform the representation
    of one level (starting with the input data) into a new representation at a higher,
    slightly more abstract level. By combining enough of these transformations, DL
    is able to learn very complex functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，DL是一种表示学习方法，它从数据中提取概念的层次结构。它通过**组合简单但非线性的函数**来学习这种分层表示，这些函数逐步将一个层次的表示（从输入数据开始）转换为一个更高、稍微抽象的新表示。通过组合足够多的这些转换，DL能够学习非常复杂的函数。
- en: Applied to a **classification task**, for example, higher levels of representation
    tend to amplify the aspects of the data most helpful for discriminating objects
    while suppressing irrelevant sources of variation. As we will see in more detail
    in *Chapter 18*, *CNNs for Financial Time Series and Satellite Images*, raw image
    data is just a two- or three-dimensional array of pixel values. The first layer
    of representation typically learns features that focus on the presence or absence
    of edges at particular orientations and locations. The second layer often learns
    motifs that depend on particular edge arrangements, regardless of small variations
    in their positions. The following layer may assemble motifs to represent parts
    of relevant objects, and subsequent layers would detect objects as combinations
    of these parts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，应用于**分类任务**时，更高层次的表示往往会放大对于区分对象最有帮助的数据方面，同时抑制不相关的变化来源。正如我们将在*第18章*中更详细地看到，*用于金融时间序列和卫星图像的CNNs*，原始图像数据只是一个二维或三维的像素值数组。表示的第一层通常学习侧重于特定方向和位置的边缘的存在或不存在的特征。第二层通常学习依赖于特定边缘排列的图案，而不考虑它们位置的微小变化。接下来的层可能组装图案来表示相关对象的部分，随后的层将检测对象作为这些部分的组合。
- en: The **key breakthrough of DL** is that a general-purpose learning algorithm
    can extract hierarchical features suitable for modeling high-dimensional, unstructured
    data in a way that is infinitely more scalable than human engineering. It is thus
    no surprise that the rise of DL parallels the large-scale availability of unstructured
    image or text data. To the extent that these data sources also figure prominently
    among alternative data, DL has become highly relevant for algorithmic trading.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DL的**关键突破**在于，通用学习算法可以提取适合对高维、非结构化数据进行建模的分层特征，其可扩展性远远超过人类工程。因此，毫不奇怪，DL的崛起与大规模可用的非结构化图像或文本数据的可用性并驾齐驱。在这些数据源在替代数据中也占据重要地位的程度上，DL对算法交易变得非常相关。
- en: Good and bad news – the universal approximation theorem
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好消息和坏消息 - 通用逼近定理
- en: The **universal approximation theorem** formalizes the ability of NNs to capture
    arbitrary relationships between input and output data. George Cybenko (1989) demonstrated
    that single-layer NNs using sigmoid activation functions can represent any continuous
    function on a closed and bounded subset of `Rn.` Kurt Hornik (1991) further showed
    that it is not the specific shape of the activation function but rather the **multilayered
    architecture** that enables the hierarchical feature representation, which in
    turn allows NNs to approximate universal functions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: However, the theorem does not help us identify the network architecture required
    to represent a specific target function. We will see in the last section of this
    chapter that there are numerous parameters to optimize, including the network's
    width and depth, the number of connections between neurons, and the type of activation
    functions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the ability to represent arbitrary functions does not imply that
    a network can actually learn the parameters for a given function. It took over
    two decades for backpropagation, the most popular learning algorithm for NNs to
    become effective at scale. Unfortunately, given the highly nonlinear nature of
    the optimization problem, there is no guarantee that it will find the absolute
    best rather than just a relatively good solution.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How DL relates to ML and AI
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AI has a long history, going back at least to the 1950s as an academic field
    and much longer as a subject of human inquiry, but has experienced several waves
    of ebbing and flowing enthusiasm since (see Nilsson, 2009, for an in-depth survey).
    ML is an important subfield with a long history in related disciplines such as
    statistics and became prominent in the 1980s. As we have just discussed, and as
    depicted in *Figure 17.1*, DL is a form of representation learning and is itself
    a subfield of ML.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The initial goal of AI was to achieve **general AI**, conceived as the ability
    to solve problems considered to require human-level intelligence, and to reason
    and draw logical conclusions about the world and automatically improve itself.
    AI applications that do not involve ML include knowledge bases that encode information
    about the world, combined with languages for logical operations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Historically, much AI effort went into developing **rule-based systems** that
    aimed to capture expert knowledge and decision-making rules, but hard-coding these
    rules frequently failed due to excessive complexity. In contrast, ML implies a
    **probabilistic approach** that learns rules from data and aims at circumventing
    the limitations of human-designed rule-based systems. It also involves a shift
    to narrower, task-specific objectives.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The following figure sketches the relationship between the various AI subfields,
    outlines their goals, and highlights their relevance on a timeline.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_01.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: AI timeline and subfields'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to actually build a neural network.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Designing an NN
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DL relies on **NNs**, which consist of a few key building blocks, which in turn
    can be configured in a multitude of ways. In this section, we introduce how NNs
    work and illustrate their most important components used to design different architectures.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '(Artificial) NNs were originally inspired by biological models of learning
    like the human brain, either in an attempt to mimic how it works and achieve similar
    success, or to gain a better understanding through simulation. Current NN research
    draws less on neuroscience, not least since our understanding of the brain has
    not yet reached a sufficient level of granularity. Another constraint is overall
    size: even if the number of neurons used in NNs continued to double every year
    since their inception in the 1950s, they would only reach the scale of the human
    brain around 2050.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: We will also explain how **backpropagation**, often simply called **backprop**,
    uses gradient information (the value of the partial derivative of the cost function
    with respect to a parameter) to adjust all neural network parameters based on
    training errors. The composition of various nonlinear modules implies that the
    optimization of the objective function can be quite challenging. We also introduce
    refinements of backpropagation that aim to accelerate the learning process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: A simple feedforward neural network architecture
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we introduce **feedforward NNs**,which are based on the **multilayer
    perceptron** (**MLP**) and consist of one or more hidden layers that connect the
    input to the output layer. In feedforward NNs, information only flows from input
    to output, such that they can be represented as directed acyclic graphs, as in
    the following figure. In contrast, **recurrent neural networks** (**RNNs**; see
    *Chapter 19*, *RNNs for Multivariate Time Series and Sentiment Analysis*) include
    loops from the output back to the input to track or memorize past patterns and
    events.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We will first describe the feedforward NN architecture and how to implement
    it using NumPy. Then we will explain how backpropagation learns the NN weights
    and implement it in Python to train a binary classification network that produces
    perfect results even though the classes are not linearly separable. See the notebook
    `build_and_train_feedforward_nn` for implementation details.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: A feedforward NN consists of several **layers**, each of which receives a sample
    of input data and produces an output. The **chain of transformations** starts
    with the input layer, which passes the source data to one of several internal
    or hidden layers, and ends with the output layer, which computes a result for
    comparison with the sample's output value.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The hidden and output layers consist of nodes or neurons. Nodes of a **fully
    connected** or dense layer connect to some or all nodes of the previous layer.
    The network architecture can be summarized by its depth, measured by the number
    of hidden layers, or the width and the number of nodes of each layer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Each connection has a **weight** used to compute a linear combination of the
    input values. A layer may also have a **bias** node that always outputs a 1 and
    is used by the nodes in the subsequent layer, like a constant in linear regression.
    The goal of the training phase is to learn values for these weights that optimize
    the network's predictive performance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Each node of the hidden layers computes the **dot product** of the weights and
    the output of the previous layer. An **activation function** transforms the result,
    which becomes the input to the subsequent layer. This transformation is typically
    nonlinear (like the sigmoid function used for logistic regression; see *Chapter
    7*, *Linear Models – From Risk Factors to Return Forecasts,* on linear models)
    so that the network can learn nonlinear relationships; we'll discuss common activation
    functions in the next section. The output layer computes the linear combination
    of the output of the last hidden layer with its weights and uses an activation
    function that matches the type of ML problem.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The computation of the network output from the inputs thus flows through a chain
    of nested functions and is called **forward propagation**. *Figure 17.2* illustrates
    a single-layer feedforward NN with a two-dimensional input vector, a hidden layer
    of width three, and two nodes in the output layer. This architecture is simple
    enough, so we can still easily graph it yet illustrate the key concepts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: A feedforward architecture with one hidden layer'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The **network graph** shows that each of the three hidden layer nodes (not counting
    the bias) has three weights, one for the input layer bias and two for each of
    the two input variables. Similarly, each output layer node has four weights to
    compute the product sum or dot product of the hidden layer bias and activations.
    In total, there are 17 parameters to be learned.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络图**显示，每个三个隐藏层节点（不包括偏置）有三个权重，一个用于输入层偏置，两个用于两个输入变量。同样，每个输出层节点有四个权重来计算隐藏层偏置和激活的乘积和。总共有17个参数需要学习。'
- en: The **forward propagation** panel on the right of the figure lists the computations
    for an example node at the hidden and output layers, *h* and *o*, respectively.
    The first node in the hidden layer applies the sigmoid function to the linear
    combination *z* of its weights and inputs akin to logistic regression. The hidden
    layer thus runs three logistic regressions in parallel, while the backpropagation
    algorithm ensures that their parameters will most likely differ to best inform
    subsequent layers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图右侧的**前向传播**面板列出了隐藏层和输出层的一个示例节点*h*和*o*的计算。隐藏层中的第一个节点对其权重和输入的线性组合*z*应用Sigmoid函数，类似于逻辑回归。因此，隐藏层同时运行三个逻辑回归，而反向传播算法确保它们的参数很可能不同，以便最好地通知后续层。
- en: The output layer uses a **softmax** activation function (see *Chapter 6*, *The
    Machine Learning Process*) that generalizes the logistic sigmoid function to multiple
    classes. It adjusts the dot product of the hidden layer output with its weight
    to represent probabilities for the classes (only two in this case to simplify
    the presentation).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出层使用一个**softmax**激活函数（参见*第6章*，*机器学习过程*），它将逻辑Sigmoid函数推广到多个类别。它调整隐藏层输出与其权重的点积，以表示类别的概率（在这种情况下只有两个，以简化演示）。
- en: 'The forward propagation can also be expressed as nested functions, where *h*
    again represents the hidden layer and *o* the output layer to produce the NN estimate
    of the output: ![](img/B15439_17_001.png).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前向传播也可以表示为嵌套函数，其中*h*再次表示隐藏层，*o*表示输出层，以产生输出的NN估计：![](img/B15439_17_001.png)。
- en: Key design choices
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键设计选择
- en: Some NN design choices resemble those for other supervised learning models.
    For example, the output is dictated by the type of the ML problem such as regression,
    classification, or ranking. Given the output, we need to select a cost function
    to measure prediction success and failure, and an algorithm that optimizes the
    network parameters to minimize the cost.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一些神经网络设计选择类似于其他监督学习模型的选择。例如，输出由ML问题的类型决定，如回归、分类或排名。给定输出，我们需要选择一个成本函数来衡量预测的成功和失败，以及一种优化网络参数以最小化成本的算法。
- en: NN-specific choices include the numbers of layers and nodes per layer, the connections
    between nodes of different layers, and the type of activation functions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络特定的选择包括层数和每层的节点数，不同层节点之间的连接，以及激活函数的类型。
- en: 'A key concern is **training efficiency**: the functional form of activations
    can facilitate or hinder the flow of the gradient information available to the
    backpropagation algorithm that adjusts the weights in response to training errors.
    Functions with flat regions for large input value ranges have a very low gradient
    and can impede training progress when parameter values get stuck in such a range.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键问题是**训练效率**：激活函数的功能形式可以促进或阻碍梯度信息流向反向传播算法，该算法根据训练错误调整权重。对于大输入值范围具有平坦区域的函数，其梯度非常低，当参数值陷入这样的范围时，可能会阻碍训练进展。
- en: Some architectures add **skip connections** that establish direct links beyond
    neighboring layers to facilitate the flow of gradient information. On the other
    hand, the deliberate omission of connections can reduce the number of parameters
    to limit the network's capacity and possibly lower the generalization error, while
    also cutting the computational cost.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一些架构添加了**跳跃连接**，建立了超出相邻层的直接链接，以促进梯度信息的流动。另一方面，有意省略连接可以减少参数数量，限制网络的容量，可能降低泛化误差，同时也降低计算成本。
- en: Hidden units and activation functions
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐藏单元和激活函数
- en: Several nonlinear activation functions besides the sigmoid function have been
    used successfully. Their design remains an area of research because they are the
    key element that allows the NN to learn nonlinear relationships. They also have
    a critical impact on the training process because their derivatives determine
    how errors translate into weight adjustments.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Sigmoid函数之外，还有几个非线性激活函数被成功使用。它们的设计仍然是一个研究领域，因为它们是允许神经网络学习非线性关系的关键元素。它们还对训练过程有重要影响，因为它们的导数决定了错误如何转化为权重调整。
- en: A very popular activation function is the **rectiﬁed linear unit** (**ReLU**).
    The activation is computed as *g*(*z*) = max(0, *z*) for a given activation *z*,
    resulting in a functional form similar to the payoff for a call option. The derivative
    is constant whenever the unit is active. ReLUs are usually combined with an affine
    input transformation that requires the presence of a bias node. Their discovery
    has greatly improved the performance of feedforward networks compared to sigmoid
    units, and they are often recommended as the default. There are several ReLU extensions
    that aim to address the limitations of ReLU to learn via gradient descent when
    they are not active and their gradient is zero (Goodfellow, Bengio, and Courville,
    2016).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常流行的激活函数是**修正线性单元**（**ReLU**）。激活函数计算为*g*(*z*) = max(0, *z*)，对于给定的激活*z*，结果形式类似于看涨期权的回报。当单元处于活跃状态时，导数是常数。ReLU通常与需要偏置节点的仿射输入变换结合使用。它们的发现极大地提高了前馈网络的性能，与Sigmoid单元相比，它们通常被推荐为默认选择。有几种ReLU扩展旨在解决ReLU在不活跃时通过梯度下降学习时梯度为零的限制（Goodfellow，Bengio和Courville，2016）。
- en: Another alternative to the logistic function σ is the **hyperbolic tangent function
    tanh**, which produces output values in the ranges [-1, 1]. They are closely related
    because ![](img/B15439_17_002.png). Both functions suffer from saturation because
    their gradient becomes very small for very low and high input values. However,
    tanh often performs better because it more closely resembles the identity function
    so that for small activation values, the network behaves more like a linear model,
    which in turn facilitates training.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑函数σ的另一种选择是**双曲正切函数tanh**，它产生范围在[-1, 1]的输出值。它们是密切相关的，因为![](img/B15439_17_002.png)。这两个函数都存在饱和现象，因为它们的梯度在输入值非常低和高的情况下变得非常小。然而，tanh通常表现更好，因为它更接近恒等函数，因此对于小的激活值，网络的行为更像线性模型，从而有助于训练。
- en: Output units and cost functions
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出单元和成本函数
- en: 'The choice of NN output format and cost function depends on the type of supervised
    learning problem:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: NN输出格式和成本函数的选择取决于监督学习问题的类型：
- en: '**Regression problems** use a linear output unit that computes the dot product
    of its weights with the final hidden layer activations, typically in conjunction
    with mean squared error cost'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归问题**使用线性输出单元，计算其权重与最终隐藏层激活的点积，通常与均方误差成本一起使用。'
- en: '**Binary classification** uses sigmoid output units to model a Bernoulli distribution
    just like logistic regression with hidden activations as input'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制分类**使用Sigmoid输出单元来模拟伯努利分布，就像使用隐藏激活作为输入的逻辑回归。'
- en: '**Multiclass problems** rely on softmax units that generalize the logistic
    sigmoid and model a discrete distribution over more than two classes, as demonstrated
    earlier'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多类问题**依赖于softmax单元，它们概括了逻辑Sigmoid，并对两个以上的类建模离散分布，如前面所示。'
- en: Binary and multiclass problems typically use cross-entropy loss, which significantly
    improves training efficacy compared to mean squared error (see *Chapter 6*, *The
    Machine Learning Process*, for additional information on loss functions).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制和多类问题通常使用交叉熵损失，与均方误差相比，这显著提高了训练效果（有关损失函数的更多信息，请参见《机器学习过程》第6章）。
- en: How to regularize deep NNs
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何正则化深度NNs
- en: The downside of the capacity of NNs to approximate arbitrary functions is the
    greatly increased risk of overfitting. The best **protection against overfitting**
    is to train the model on a larger dataset. Data augmentation, such as creating
    slightly modified versions of images, is a powerful alternative approach. The
    generation of synthetic financial training data for this purpose is an active
    research area that we will address in *Chapter 20*, *Autoencoders for Conditional
    Risk Factors and Asset Pricing* (see, for example, Fu et al. 2019).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: NN近似任意函数的能力的缺点是过拟合的风险大大增加。最好的**防止过拟合**的方法是在更大的数据集上训练模型。数据增强，例如创建图像的略微修改版本，是一个强大的替代方法。为此目的生成合成金融训练数据是一个活跃的研究领域，我们将在《条件风险因素和资产定价的自动编码器》第20章中进行讨论（例如，Fu等人2019年）。
- en: As an alternative or complement to obtaining more data, regularization can help
    mitigate the risk of overfitting. For all models discussed so far in this book,
    there is some form of regularization that modiﬁes the learning algorithm to reduce
    its generalization error without negatively affecting its training error. Examples
    include the penalties added to the ridge and lasso regression objectives and the
    split or depth constraints used with decision trees and tree-based ensemble models.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为获取更多数据的替代或补充，正则化可以帮助减轻过拟合的风险。在本书中到目前为止讨论的所有模型中，都有某种形式的正则化，可以修改学习算法以减少其泛化误差而不会对其训练误差产生负面影响。例如，添加到岭和套索回归目标中的惩罚以及用于决策树和基于树的集成模型的分割或深度约束。
- en: Frequently, regularization takes the form of a soft constraint on the parameter
    values that trades off some additional bias for lower variance. A common practical
    finding is that the model with the lowest generalization error is not the model
    with the exact right size of parameters, but rather a larger model that has been
    well regularized. Popular NN regularization techniques that can be used in combination
    include parameter norm penalties, early stopping, and dropout.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，正则化采取对参数值的软约束的形式，以权衡一些额外的偏差以降低方差。一个常见的实际发现是，具有最低泛化误差的模型不是具有精确参数大小的模型，而是一个经过良好正则化的更大模型。可以结合使用的流行的NN正则化技术包括参数范数惩罚、提前停止和丢弃。
- en: Parameter norm penalties
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数范数惩罚
- en: We encountered **parameter norm penalties** for lasso and ridge regression as
    **L1 and L2 regularization**, respectively, in *Chapter 7*, *Linear Models – From
    Risk Factors to Return Forecasts*. In the NN context, parameter norm penalties
    similarly modify the objective function by adding a term that represents the L1
    or L2 norm of the parameters, weighted by a hyperparameter that requires tuning.
    For NN, the bias parameters are usually not constrained, only the weights.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在《线性模型-从风险因素到回报预测》第7章中遇到了用于套索和岭回归的**参数范数惩罚**，分别是**L1和L2正则化**。在NN上下文中，参数范数惩罚类似地通过添加一个代表参数的L1或L2范数的项来修改目标函数，该项由需要调整的超参数加权。对于NN，偏置参数通常不受约束，只有权重受到约束。
- en: L1 regularization can produce sparse parameter estimates by reducing weights
    all the way to zero. L2 regularization, in contrast, preserves directions along
    which the parameters signiﬁcantly reduce the cost function. Penalties or hyperparameter
    values can vary across layers, but the added tuning complexity quickly becomes
    prohibitive.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: L1正则化可以通过将权重减少到零来产生稀疏参数估计。相比之下，L2正则化保留了参数显著减少成本函数的方向。惩罚项或超参数值可以在各层之间变化，但额外的调整复杂性很快变得不可行。
- en: Early stopping
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提前停止
- en: 'We encountered **early stopping** as a regularization technique in *Chapter
    12*, *Boosting Your Trading Strategy*. It is perhaps the most common NN regularization
    method because it is both effective and simple to use: it monitors the model''s
    performance on a validation set and stops training when the performance ceases
    to improve for a certain number of observations to prevent overfitting.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Early stopping can be viewed as **efficient hyperparameter selection** that
    automatically determines the correct amount of regularization, whereas parameter
    penalties require hyperparameter tuning to identify the ideal weight decay. Just
    be careful to avoid **lookahead bias**: backtest results will be exceedingly positive
    when early stopping uses out-of-sample data that would not be available during
    a real-life implementation of the strategy.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Dropout
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Dropout** refers to the randomized omission of individual units with a given
    probability during forward or backward propagation. As a result, these omitted
    units do not contribute to the training error or receive updates.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: The technique is computationally inexpensive and does not constrain the choice
    of model or training procedure. While more iterations are necessary to achieve
    the same amount of learning, each iteration is faster due to the lower computational
    cost. Dropout reduces the risk of overfitting by preventing units from compensating
    for mistakes made by other units during the training process.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Training faster – optimizations for deep learning
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backprop refers to the computation of the gradient of the cost function with
    respect to the internal parameter we wish to update and the use of this information
    to update the parameter values. The gradient is useful because it indicates the
    direction of parameter change that causes the maximal increase in the cost function.
    Hence, adjusting the parameters according to the negative gradient produces an
    optimal cost reduction, at least for a region very close to the observed samples.
    See Ruder (2017) for an excellent overview of key gradient descent optimization
    algorithms.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Training deep NNs can be time-consuming due to the nonconvex objective function
    and the potentially large number of parameters. Several challenges can significantly
    delay convergence, find a poor optimum, or cause oscillations or divergence from
    the target:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '**Local minima** can prevent convergence to a global optimum and cause poor
    performance'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flat regions with low gradients** that are not a local minimum can also prevent
    convergence while most likely being distant from the global optimum'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steep regions with high gradients** resulting from multiplying several large
    weights can cause excessive adjustments'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep architectures or long-term dependencies in an RNN require the multiplication
    of many weights during backpropagation, leading to **vanishing gradients** so
    that at least parts of the NN receive few or no updates
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several algorithms have been developed to address some of these challenges,
    namely variations of stochastic gradient descent and approaches that use adaptive
    learning rates. There is no single best algorithm, although adaptive learning
    rates have shown some promise.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Stochastic gradient descent
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Gradient descent iteratively adjusts these parameters using the gradient information.
    For a given parameter ![](img/B15439_17_003.png), the basic gradient descent rule
    adjusts the value by the negative gradient of the loss function with respect to
    this parameter, multiplied by a learning rate ![](img/B15439_17_004.png):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_005.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: The gradient can be evaluated for all training data, a randomized batch of data,
    or individual observations (called online learning). Random samples give rise
    to **stochastic gradient descent** (**SGD**), which often leads to faster convergence
    if random samples are an unbiased estimate of the gradient direction throughout
    the training process.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are numerous challenges: it can be difficult to define a learning
    rate or a rate schedule that facilitates efficient convergence ex ante—too low
    a rate prolongs the process, and too high a rate can lead to repeated overshooting
    and oscillation around or even divergence from a minimum. Furthermore, the same
    learning rate may not be adequate for all parameters, that is, in all directions
    of change.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Momentum
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A popular refinement of basic gradient descent adds momentum to **accelerate
    the convergence to a local minimum**. Illustrations of momentum often use the
    example of a local optimum at the center of an elongated ravine (while in practice
    the dimensionality would be much higher than three). It implies a minimum inside
    a deep and narrow canyon with very steep walls that have a large gradient on one
    side and a much gentler slope towards a local minimum at the bottom of this region
    on the other side. Gradient descent naturally follows the steep gradient and will
    make repeated adjustments up and down the walls of the canyons with much slower
    movements towards the minimum.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Momentum aims to address such a situation by **tracking recent directions**
    and adjusting the parameters by a weighted average of the most recent gradient
    and the currently computed value. It uses a momentum term ![](img/B15439_17_037.png)
    to weigh the contribution of the latest adjustment to this iteration''s update
    *v*[t]:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_006.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: '**Nesterov momentum** is a simple change to normal momentum. Here, the gradient
    term is not computed at the current parameter space position ![](img/Image74692.png)
    but instead from an intermediate position. The goal is to correct for the momentum
    term overshooting or pointing in the wrong direction (Sutskever et al. 2013).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive learning rates
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choice of the appropriate learning rate is very challenging as highlighted
    in the previous subsection on stochastic gradient descent. At the same time, it
    is one of the most important parameters that strongly impacts training time and
    generalization performance.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: While momentum addresses some of the issues with learning rates, it does so
    at the expense of introducing another hyperparameter, the **momentum rate**. Several
    algorithms aim to adapt the learning rate throughout the training process based
    on gradient information.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: AdaGrad
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: AdaGrad accumulates all historical, parameter-specific gradient information
    and continues to rescale the learning rate inversely proportional to the squared
    cumulative gradient for a given parameter. The goal is to slow down changes for
    parameters that have already changed a lot and to encourage adjustments for those
    that haven't.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: AdaGrad is designed to perform well on convex functions and has had a mixed
    performance in a DL context because it can reduce the learning rate too quickly
    based on early gradient information.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: RMSProp
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: RMSProp modifies AdaGrad to use an exponentially weighted average of the cumulative
    gradient information. The goal is to put more emphasis on recent gradients. It
    also introduces a new hyperparameter that controls the length of the moving average.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: RMSProp is a popular algorithm that often performs well, provided by the various
    libraries that we will introduce later and routinely used in practice.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Adam
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Adam stands for **adaptive moment derivation** and combines aspects of RMSProp
    with Momentum. It is considered fairly robust and often used as the default optimization
    algorithm (Kingma and Ba, 2014).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Adam has several hyperparameters with recommended default values that may benefit
    from some tuning:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**: The learning rate or step size determines how much weights are updated
    so that larger (smaller) values speed up (slow down) learning before the rate
    is updated; many libraries use the 0.001 default'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta**[1]: The exponential decay rate for the first moment estimates; typically
    set to 0.9'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta**[2]. The exponential decay rate for the second-moment estimates; usually
    set to 0.999'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**epsilon**: A very small number to prevent division by zero; often set to
    1e-8'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary – how to tune key hyperparameters
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperparameter optimization aims at **tuning the capacity of the model** so
    that it matches the complexity of the relationship between the input of the data.
    Excess capacity makes overfitting likely and requires either more data that introduces
    additional information into the learning process, reducing the size of the model,
    or more aggressive use of the various regularization tools just described.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'The **principal diagnostic tool** is the behavior of training and validation
    error described in *Chapter 6*, *The Machine Learning Process*: if the validation
    error worsens while the training error continues to drop, the model is overfitting
    because its capacity is too high. On the other hand, if performance falls short
    of expectations, increasing the size of the model may be called for.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important aspect of parameter optimization is the architecture itself
    as it largely determines the number of parameters: other things being equal, more
    or wider hidden layers increase the capacity. As mentioned before, the best performance
    is often associated with models that have excess capacity but are well regularized
    using mechanisms like dropout or L1/L2 penalties.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In addition to **balancing model size and regularization**, it is important
    to tune the **learning rate** because it can undermine the optimization process
    and reduce the effective model capacity. The adaptive optimization algorithms
    offer a good starting point as described for Adam, the most popular option.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: A neural network from scratch in Python
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To gain a better understanding of how NNs work, we will formulate the single-layer
    architecture and forward propagation computations displayed in *Figure 17.2* using
    matrix algebra and implement it using NumPy. You can find the code samples in
    the notebook `build_and_train_feedforward_nn`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: The input layer
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The architecture shown in *Figure 17.2* is designed for two-dimensional input
    data *X* that represents two different classes *Y*. In matrix form, both *X* and
    *Y* are of shape ![](img/B15439_17_009.png):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_010.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: 'We will generate 50,000 random binary samples in the form of two concentric
    circles with different radius using scikit-learn''s `make_circles` function so
    that the classes are not linearly separable:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then convert the one-dimensional output into a two-dimensional array:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Figure 17.3* shows a scatterplot of the data that is clearly not linearly
    separable:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_03.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: Synthetic data for binary classification'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The hidden layer
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hidden layer *h* projects the two-dimensional input into a three-dimensional
    space using the weights W^h and translates the result by the bias vector b^h.
    To perform this affine transformation, the hidden layer weights are represented
    by a ![](img/B15439_17_011.png) matrix W^h, and the hidden layer bias vector by
    a three-dimensional vector:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_012.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: 'The hidden layer activations *H* result from the application of the sigmoid
    function to the dot product of the input data and the weights after adding the
    bias vector:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_013.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: 'To implement the hidden layer using NumPy, we first define the `logistic` sigmoid
    function:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We then define a function that computes the hidden layer activations as a function
    of the relevant inputs, weights, and bias values:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output layer
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The output layer compresses the three-dimensional hidden layer activations
    *H* back to two dimensions using a ![](img/B15439_17_014.png) weight matrix W^o
    and a two-dimensional bias vector **b**^o:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_015.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'The linear combination of the hidden layer outputs results in an ![](img/B15439_17_016.png)
    matrix **Z**^o:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_017.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'The output layer activations are computed by the softmax function ![](img/B15439_17_018.png)
    that normalizes the **Z**^o to conform to the conventions used for discrete probability
    distributions:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_019.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'We create a softmax function in Python as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As defined here, the output layer activations depend on the hidden layer activations
    and the output layer weights and biases:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we have all the components we need to integrate the layers and compute the
    NN output directly from the input.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Forward propagation
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `forward_prop` function combines the previous operations to yield the output
    activations from the input data as a function of weights and biases:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `predict` function produces the binary class predictions given weights,
    biases, and input data:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The cross-entropy cost function
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final piece is the cost function to evaluate the NN output based on the
    given label. The cost function *J* uses the cross-entropy loss ![](img/B15439_17_020.png),
    which sums the deviations of the predictions for each class *c* from the actual
    outcome:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_021.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'It takes the following form in Python:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to implement backprop using Python
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update the NN weights and bias values using backprop, we need to compute
    the gradient of the cost function. The gradient represents the partial derivative
    of the cost function with respect to the target parameter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: How to compute the gradient
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NN composes a set of nested functions as highlighted earlier. Hence, the
    gradient of the loss function with respect to internal, hidden parameters is computed
    using the chain rule of calculus.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'For scalar values, given the functions *z* = *h*(*x*) and *y* = *o*(*h*(*x*))
    = *o* (*z*), we compute the derivative of* y* with respect to *x* using the chain
    rule as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_022.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: 'For vectors, with ![](img/B15439_17_023.png) and ![](img/B15439_17_024.png)
    so that the hidden layer *h* maps from R^n to R^m and *z* = *h*(*x*) and *y* =
    *o* (*z*), we get:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_025.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: 'We can express this more concisely using matrix notation using the ![](img/B15439_17_026.png)
    Jacobian matrix of *h*:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_027.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'which contains the partial derivatives for each of the *m* components of *z*
    with respect to each of the *n* inputs *x*. The gradient ![](img/B15439_17_028.png)
    of *y* with respect to *x* contains all partial derivatives and can thus be written
    as:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_029.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: The loss function gradient
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The derivative of the cross-entropy loss function *J* with respect to each
    output layer activation *i* = 1, ..., *N* is a very simple expression (see the
    notebook for details), shown below on the left for scalar values and on the right
    in matrix notation:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_030.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'We define `loss_gradient` function accordingly:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output layer gradients
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To propagate the update back to the output layer weights, we use the gradient
    of the loss function *J* with respect to the weight matrix:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_031.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: 'and for the bias:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_032.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'We can now define `output_weight_gradient` and `output_bias_gradient` accordingly,
    both taking the loss gradient ![](img/B15439_17_033.png) as input:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The hidden layer gradients
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The gradient of the loss function with respect to the hidden layer values computes
    as follows, where ![](img/B15439_17_034.png) refers to the element-wise matrix
    product:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_035.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
- en: 'We define a `hidden_layer_gradient` function to encode this result:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The gradients for hidden layer weights and biases are:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_036.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: 'The corresponding functions are:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Putting it all together
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prepare for the training of our network, we create a function that combines
    the previous gradient definition and computes the relevant weight and bias updates
    from the training data and labels, and the current weight and bias values:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Testing the gradients
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The notebook contains a test function that compares the gradient derived previously
    analytically using multivariate calculus to a numerical estimate that we obtain
    by slightly perturbing individual parameters. The test function validates that
    the resulting change in output value is similar to the change estimated by the
    analytical gradient.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Implementing momentum updates using Python
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To incorporate momentum into the parameter updates, define an `update_momentum`
    function that combines the results of the `compute_gradients` function we just
    used with the most recent momentum updates for each parameter matrix:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `update_params` function performs the actual updates:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Training the network
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To train the network, we first randomly initialize all network parameters using
    a standard normal distribution (see the notebook). For a given number of iterations
    or epochs, we run momentum updates and compute the training loss as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Figure 17.4* plots the training loss over 50,000 iterations for 50,000 training
    samples with a momentum term of 0.5 and a learning rate of 1e-4\. It shows that
    it takes over 5,000 iterations for the loss to start to decline but then does
    so very fast. We have not used SGD, which would have likely accelerated convergence
    significantly.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_04.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Training loss per iteration'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: The plots in *Figure 17.5* show the function learned by the neural network with
    a three-dimensional hidden layer from two-dimensional data with two classes that
    are not linearly separable. The left panel displays the source data and the decision
    boundary that misclassifies very few data points and would further improve with
    continued training.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'The center panel shows the representation of the input data learned by the
    hidden layer. The network learns weights so that the projection of the input from
    two to three dimensions enables the linear separation of the two classes. The
    right plot shows how the output layer implements the linear separation in the
    form of a cutoff value of 0.5 in the output dimension:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_05.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Visualizing the function learned by the neural network'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'To **sum up**: we have seen how a very simple network with a single hidden
    layer with three nodes and a total of 17 parameters is able to learn how to solve
    a nonlinear classification problem using backprop and gradient descent with momentum.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: We will next review how to use popular DL libraries that facilitate the design
    and fast training of complex architectures while using sophisticated techniques
    to prevent overfitting and evaluate the results.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Popular deep learning libraries
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the most popular DL libraries are TensorFlow (supported by Google),
    Keras (led by Francois Chollet, now at Google), and PyTorch (supported by Facebook).
    Development is very active with PyTorch at version 1.4 and TensorFlow at 2.2 as
    of March 2020\. TensorFlow 2.0 adopted Keras as its main interface, effectively
    combining both libraries into one.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: All libraries provide the design choices, regularization methods, and backprop
    optimizations we discussed previously in this chapter. They also facilitate fast
    training on one or several **graphics processing units** (**GPUs**). The libraries
    differ slightly in their focus with TensorFlow originally designed for deployment
    in production and prevalent in the industry, while PyTorch has been popular among
    academic researchers; however, the interfaces are gradually converging.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: We will illustrate the use of TensorFlow and PyTorch using the same network
    architecture and dataset as in the previous section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging GPU acceleration
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DL is very computationally intensive, and good results often require large datasets.
    As a result, model training and evaluation can become rather time-consuming. GPUs
    are highly optimized for the matrix operations required by deep learning models
    and tend to have more processing power, rendering speedups of 10x or more not
    uncommon.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: All popular deep learning libraries support the use of a GPU, and some also
    allow for parallel training on multiple GPUs. The most common types of GPU are
    produced by NVIDIA, and configuration requires installation and setup of the CUDA
    environment. The process continues to evolve and can be somewhat challenging depending
    on your computational environment.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: A more straightforward way to leverage GPU is via the Docker virtualization
    platform. There are numerous images available that you can run in a local container
    managed by Docker that circumvents many of the driver and version conflicts that
    you may otherwise encounter. TensorFlow provides Docker images on its website
    that can also be used with Keras.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: See GitHub for references and related instructions in the DL notebooks and the
    installation directory.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: How to use TensorFlow 2
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorFlow became the leading deep learning library shortly after its release
    in September 2015, one year before PyTorch. TensorFlow 2 simplified the API that
    had grown increasingly complex over time by making the Keras API its principal
    interface.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Keras was designed as a high-level API to accelerate the iterative workflow
    of designing and training deep neural networks with computational backends like
    TensorFlow, Theano, or CNTK. It has been integrated into TensorFlow in 2017\.
    You can also combine code from both libraries to leverage Keras' high-level abstractions
    as well as customized TensorFlow graph operations.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: In addition, TensorFlow adopts **eager execution**. Previously, you needed to
    define a complete computational graph for compilation into optimized operations.
    Running the compiled graph required the configuration of a session and the provision
    of the requisite data. Under eager execution, you can run TensorFlow operations
    on a line-by-line basis just like common Python code.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Keras supports both a slightly simpler Sequential API and a more flexible Functional
    API. We will introduce the former at this point and use the Functional API in
    more complex examples in the following chapters.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: To create a model, we just need to instantiate a `Sequential` object and provide
    a list with the sequence of standard layers and their configurations, including
    the number of units, type of activation function, or name.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'The first hidden layer needs information about the number of features in the
    matrix it receives from the input layer via the `input_shape` argument. In our
    simple case, there are just two. Keras infers the number of rows it needs to process
    during training, through the `batch_size` argument that we will pass to the `fit`
    method later in this section. TensorFlow infers the sizes of the inputs received
    by other layers from the previous layer''s `units` argument:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The Keras API provides numerous standard building blocks, including recurrent
    and convolutional layers, various options for regularization, a range of loss
    functions and optimizers, and also preprocessing, visualization, and logging (see
    the link to the TensorFlow documentation on GitHub for reference). It is also
    extensible.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'The model''s `summary` method produces a concise description of the network
    architecture, including a list of the layer types and shapes and the number of
    parameters:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we compile the Sequential model to configure the learning process. To
    this end, we define the optimizer, the loss function, and one or several performance
    metrics to monitor during training:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Keras uses callbacks to enable certain functionality during training, such
    as logging information for interactive display in TensorBoard (see the next section):'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To train the model, we call its `fit` method and pass several parameters in
    addition to the training data:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See the notebook for a visualization of the decision boundary that resembles
    the result from our earlier manual network implementation. The training with TensorFlow
    runs orders of magnitude faster, though.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: How to use TensorBoard
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorBoard is a great suite of visualization tools that comes with TensorFlow.
    It includes visualization tools to simplify the understanding, debugging, and
    optimization of NNs.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: You can use it to visualize the computational graph, plot various execution
    and performance metrics, and even visualize image data processed by the network.
    It also permits comparisons of different training runs.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the `how_to_use_tensorflow` notebook, with TensorFlow installed,
    you can launch TensorBoard from the command line:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, you can use it within your notebook by first loading the extension
    and then starting TensorBoard similarly by referencing the `log` directory:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For starters, the visualizations include train and validation metrics (see the
    left panel of *Figure 17.6*).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can view histograms of the weights and biases over various
    epochs (right panel of Figure 17.6; epochs evolve from back to front). This is
    useful because it allows you to monitor whether backpropagation succeeds in adjusting
    the weights as learning progresses and whether they are converging.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'The values of weights should change from their initialization values over the
    course of several epochs and eventually stabilize:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_06.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: TensorBoard learning process visualization'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard also lets you display and interactively explore the computational
    graph of your network, drilling down from the high-level structure to the underlying
    operations by clicking on the various nodes. The visualization for our simple
    example architecture (see the notebook) already includes numerous components but
    is very useful when debugging. For further reference, see the links on GitHub
    to more detailed tutorials.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: How to use PyTorch 1.4
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch was developed at the **Facebook AI Research** (**FAIR**) group led by
    Yann LeCunn, and the first alpha version released in September 2016\. It provides
    deep integration with Python libraries like NumPy that can be used to extend its
    functionality, strong GPU acceleration, and automatic differentiation using its
    autograd system. It provides more granular control than Keras through a lower-level
    API and is mainly used as a deep learning research platform but can also replace
    NumPy while enabling GPU computation.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: It employs eager execution, in contrast to the static computation graphs used
    by, for example, Theano or TensorFlow. Rather than initially defining and compiling
    a network for fast but static execution, it relies on its autograd package for
    automatic differentiation of tensor operations; that is, it computes gradients
    "on the fly" so that network structures can be partially modified more easily.
    This is called **define-by-run**, meaning that backpropagation is defined by how
    your code runs, which in turn implies that every single iteration can be different.
    The PyTorch documentation provides a detailed tutorial on this.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: The resulting flexibility combined with an intuitive Python-first interface
    and speed of execution has contributed to its rapid rise in popularity and led
    to the development of numerous supporting libraries that extend its functionality.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how PyTorch and autograd work by implementing our simple network architecture
    (see the `how_to_use_pytorch` notebook for details).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: How to create a PyTorch DataLoader
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We begin by converting the NumPy or pandas input data to `torch` tensors. Conversion
    from and to NumPy is very straightforward:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can use these PyTorch tensors to instantiate first a `TensorDataset` and,
    in a second step, a `DataLoader` that includes information about `batch_size`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to define the neural network architecture
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyTorch defines an NN architecture using the `Net()` class. The central element
    is the `forward` function. autograd automatically defines the corresponding `backward`
    function that computes the gradients.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Any legal tensor operation is fair game for the `forward` function, providing
    a log of design flexibility. In our simple case, we just link the tensor through
    functional input-output relations after initializing their attributes:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We then instantiate a `Net()` object and can inspect the architecture as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To illustrate eager execution, we can also inspect the initialized parameters
    in the first tensor:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To enable GPU processing, you can use `net.cuda()`. See the PyTorch documentation
    for placing tensors on CPU and/or one or more GPU units.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to define a loss function and the optimizer, using some of the
    built-in options:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to train the model
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Model training consists of an outer loop for each epoch, that is, each pass
    over the training data, and an inner loop over the batches produced by the `DataLoader`.
    That executes the forward and backward passes of the learning algorithm. Some
    care needs to be taken to adjust data types to the requirements of the various
    objects and functions; for example, labels need to be integers and the features
    should be of type `float`:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The notebook also contains an example that uses the `livelossplot` package to
    plot losses throughout the training process as provided by Keras out of the box.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: How to evaluate the model predictions
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To obtain predictions from our trained model, we pass it feature data and convert
    the prediction to a NumPy array. We get softmax probabilities for each of the
    two classes:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: From here on, we can proceed as before to compute loss metrics or visualize
    the result that again reproduces a version of the decision boundary we found earlier.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Alternative options
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The huge interest in DL has led to the development of several competing libraries
    that facilitate the design and training of NNs. The most prominent include the
    following examples (also see references on GitHub).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Apache MXNet
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MXNet, incubated at the Apache Foundation, is an open source DL software framework
    used to train and deploy deep NNs. It focuses on scalability and fast model training.
    They included the Gluon high-level interface to make it easy to prototype, train,
    and deploy DL models. MXNet has been picked by Amazon for deep learning on AWS.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Cognitive Toolkit (CNTK)
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Cognitive Toolkit, previously known as CNTK, is Microsoft's contribution
    to the deep learning library collection. It describes an NN as a series of computational
    steps via a directed graph, similar to TensorFlow. In this directed graph, leaf
    nodes represent input values or network parameters, while other nodes represent
    matrix operations upon their inputs. CNTK allows users to build and combine popular
    model architectures ranging from deep feedforward NNs, convolutional networks,
    and recurrent networks (RNNs/LSTMs).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Fastai
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fastai library aims to simplify training NNs that are fast and accurate
    using modern best practices. These practices have emerged from research into DL
    at the company that makes both the software and accompanying courses available
    for free. Fastai includes support for models that process image, text, tabular,
    and collaborative filtering data.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing an NN for a long-short strategy
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In practice, we need to explore variations for the design options for the NN
    architecture and how we train it from those we outlined previously because we
    can never be sure from the outset which configuration best suits the data. In
    this section, we will explore various architectures for a simple feedforward NN
    to predict daily stock returns using the dataset developed in *Chapter 12* (see
    the notebook `preparing_the_model_data` in the GitHub directory for that chapter).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: To this end, we will define a function that returns a TensorFlow model based
    on several architectural input parameters and cross-validate alternative designs
    using the `MultipleTimeSeriesCV` we introduced in *Chapter 7*, *Linear Models
    – From Risk Factors to Return Forecasts*. To assess the signal quality of the
    model predictions, we build a simple ranking-based long-short strategy based on
    an ensemble of the models that perform best during the in-sample cross-validation
    period. To limit the risk of false discoveries, we then evaluate the performance
    of this strategy for an out-of-sample test period.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: See the `optimizing_a_NN_architecture_for_trading` notebook for details.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Engineering features to predict daily stock returns
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To develop our trading strategy, we use the daily stock returns for 995 US
    stocks for the eight-year period from 2010 to 2017\. We will use the features
    developed in *Chapter 12,* *Boosting Your Trading Strategy* that include volatility
    and momentum factors, as well as lagged returns with cross-sectional and sectoral
    rankings. We load the data as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Defining an NN architecture framework
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To automate the generation of our TensorFlow model, we create a function that
    constructs and compiles the model based on arguments that can later be passed
    during cross-validation iterations.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `make_model` function illustrates how to flexibly define various
    architectural elements for the search process. The `dense_layers` argument defines
    both the depth and width of the network as a list of integers. We also use `dropout`
    for regularization, expressed as a float in the range [0, 1] to define the probability
    that a given unit will be excluded from a training iteration:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now we can turn to the cross-validation process to evaluate various NN architectures.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Cross-validating design options to tune the NN
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `MultipleTimeSeriesCV` to split the data into rolling training and
    validation sets comprising of 24 * 12 months of data, while keeping the final
    12 * 21 days of data (starting November 30, 2016) as a holdout test. We train
    each model for 48 21-day periods and evaluate its results over 3 21-day periods,
    implying 12 splits for cross-validation and test periods combined:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, we define a set of configurations for cross-validation. These include
    several options for two hidden layers and dropout probabilities; we''ll only use
    tanh activations because a trial run did not suggest significant differences compared
    to ReLU. (We could also try out different optimizers. but I recommend you do not
    run this experiment, to limit what is already a computationally intensive effort):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To run the cross-validation, we define a function that produces the train and
    validation data based on the integer indices produced by the `MultipleTimeSeriesCV`
    as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: During cross-validation, we train a model using one set of parameters from the
    previously defined grid for 20 epochs. After each epoch, we store a `checkpoint`
    that contains the learned weights that we can reload to quickly generate predictions
    for the best configuration without retraining.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'After each epoch, we compute and store the **information coefficient** (**IC**)
    for the validation set by day:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: With an NVIDIA GTX 1080 GPU, 20 epochs takes a bit over one hour with batches
    of 64 samples, and around 20 minutes with 256 samples.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the predictive performance
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first take a look at the five models that achieved the highest median
    daily IC during the cross-validation period. The following code computes these
    values:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The resulting table shows that the architectures using 32 units in both layers
    and 16/8 in the first/second layer, respectively, performed best. These models
    also use `dropout` and were trained with batch sizes of 64 samples with the given
    number of epochs for all folds. The median IC values vary between 0.0236 and 0.0246:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '| Dense Layers | Dropout | Batch Size | Epoch | IC |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
- en: '| (32, 32) | 0.1 | 64 | 7 | 0.0246 |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.2 | 64 | 14 | 0.0241 |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.1 | 64 | 3 | 0.0238 |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
- en: '| (32, 32) | 0.1 | 64 | 10 | 0.0237 |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.2 | 256 | 3 | 0.0236 |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
- en: Next, we'll take a look at how the parameter choices impact the predictive performance.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we visualize the daily information coefficient (averaged per fold) for
    different configurations by epoch to understand how the duration of training affects
    the predictive accuracy. The plots in *Figure 17.7*, however, highlight few conclusive
    patterns; the IC varies little across models and not particularly systematically
    across epochs:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_07.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Information coefficients for various model configurations'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'For more statistically robust insights, we run a linear regression using **ordinary
    least squares** (**OLS**) (see *Chapter 7*, *Linear Models – From Risk Factors
    to Return Forecasts*) using dummy variables for the layer, dropout, and batch
    size choices as well as for each epoch:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The chart in *Figure 17.8* plots the confidence interval for each regression
    coefficient; if it does not include zero, then the coefficient is significant
    at the five percent level. The IC values on the y-axis reflect the differential
    from the constant (0.0027, p-value: 0.017) that represents the sample average
    over the configuration excluded while dropping one category of each dummy variable.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Across all configurations, batch size 256 and a dropout of 0.2 made significant
    (but small) positive contributions to performance. Similarly, training for seven
    epochs yielded slightly superior results. The regression is overall significant
    according to the F statistic but has a very low R2 value close to zero, underlining
    the high degree of noise in the data relative to the signal conveyed by the parameter
    choices.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_08.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: OLS coefficients and confidence intervals'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting a strategy based on ensembled signals
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To translate our NN model into a trading strategy, we generate predictions,
    evaluate their signal quality, create rules that define how to trade on these
    predictions, and backtest the performance of a strategy that implements these
    rules. See the notebook `backtesting_with_zipline` for the code examples in this
    section.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Ensembling predictions to produce tradeable signals
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To reduce the variance of the predictions and hedge against in-sample overfitting,
    we combine the predictions of the best three models listed in the table in the
    previous section and average the result.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: 'To this end, we define the following `generate_predictions()` function, which
    receives the model parameters as inputs, loads the weights for the models for
    the desired epoch, and creates forecasts for the cross-validation and out-of-sample
    periods (showing only the essentials here to save some space):'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We store the results for evaluation with Alphalens and a Zipline backtest.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating signal quality using Alphalens
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To gain some insight into the signal content of the ensembled model predictions,
    we use Alphalens to compute the return differences for investments into five equal-weighted
    portfolios differentiated by the forecast quantiles (see *Figure 17.9*). The spread
    between the top and the bottom quintile equals around 8 bps for a one-day holding
    period, which implies an alpha of 0.094 and a beta of 0.107:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_09.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: Signal quality evaluation'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting the strategy using Zipline
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on the Alphalens analysis, our strategy will enter long and short positions
    for the 50 stocks with the highest positive and lowest negative predicted returns,
    respectively, as long as there are at least 10 options on either side. The strategy
    trades every day.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 'The charts in *Figure 17.10* show that the strategy performs well in- and out-of-sample
    (before transaction costs):'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_10.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: In- and out-of-sample backtest performance'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: It produces annualized returns of 22.8 percent over the 36-month period, 16.5
    percent for the 24 in-sample months, and 35.7 percent for the 12 out-of-sample
    months. The Sharpe ratio is 0.72 in-sample and 2.15 out-of-sample, delivering
    an alpha of 0.18 (0.29) and a beta of 0.24 (0.16) in/out of sample.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: How to further improve the results
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The relatively simple architecture yields some promising results. To further
    improve performance, you can first and foremost add new features and more data
    to the model.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use more sophisticated architectures, including RNNs
    and CNNs, which are well suited to sequential data, whereas vanilla feedforward
    NNs are not designed to capture the ordered nature of the features.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: We will turn to these specialized architectures in the following chapter.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced DL as a form of representation learning that
    extracts hierarchical features from high-dimensional, unstructured data. We saw
    how to design, train, and regularize feedforward neural networks using NumPy.
    We demonstrated how to use the popular DL libraries PyTorch and TensorFlow that
    are suitable for use cases from rapid prototyping to production deployments.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, we designed and tuned an NN using TensorFlow and were able
    to generate tradeable signals that delivered attractive returns during both the
    in-sample and out-of-sample periods.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore CNNs, which are particularly well suited
    for image data but are also well-suited for sequential data.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
