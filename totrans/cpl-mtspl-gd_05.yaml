- en: Vulnerability Hunting with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, you learned various techniques of information gathering
    and enumeration. Now that we have gathered information about our target system,
    it''s time to check whether the target system is vulnerable and if we can exploit
    it in reality. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Metasploit database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scanning and exploiting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing NMAP and Nessus scans from within Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit auxiliaries for vulnerability detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-exploitation with `db_autopwn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Metasploitâ€™s post-exploitation capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen so far, the Metasploit Framework is a tightly coupled collection
    of various tools, utilities, and scripts that can be used to perform complex penetration
    testing tasks. While performing such tasks, a lot of data is generated in some
    form or the other. From the framework perspective, it is essential to store all
    data safely so that it can be reused efficiently whenever required. By default,
    the Metasploit Framework uses PostgreSQL database at the backend to store and
    retrieve all the required information.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how to interact with the database to perform some trivial tasks
    and ensure that the database is correctly set up before we begin with the penetration
    testing activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the initial setup, we will use the following command to set up the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will initiate the PostgreSQL database service on Kali Linux. This
    is necessary before we start with the `msfconsole` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will initiate the Metasploit Framework database instance and is
    a one-time activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/173e3333-c162-4afe-b67c-ee236704465c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`db_status`: Once we have started the PostgreSQL service and initiated `msfdb`,
    we can then get started with `msfconsole`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `db_status` command will tell us whether the backend database has been
    successfully initialized and connected with `msfconsole`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31e64658-3faf-4e47-8c13-f637cc7a05e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Work spaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's assume you are working on multiple penetration testing assignments for
    various clients simultaneously. You certainly don't want the data from different
    clients to mix together. The ideal way would be to make logical compartments to
    store data for each assignment. Workspaces in the Metasploit Framework help us
    achieve this goal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows some of the common commands related to managing workspaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Sr. no.** | **Command** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| 1. | `workspace` | This lists all previously created workspaces within the
    Metasploit Framework |'
  prefs: []
  type: TYPE_TB
- en: '| 2. | `workspace -h` | This lists help on all switches related to the `workspace`
    command |'
  prefs: []
  type: TYPE_TB
- en: '| 3. | `workspace -a <name>` | This creates a new workspace with a specified
    `name` |'
  prefs: []
  type: TYPE_TB
- en: '| 4. | `workspace -d <name>` | This deletes the specified workspace |'
  prefs: []
  type: TYPE_TB
- en: '| 5. | `workspace <name>` | This switches the context of the workspace to the
    name specified |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows the usage of the `workspace` command with various
    switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4d13bf6-98d9-41df-b630-f77fa5235dcd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Importing scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already know how versatile the Metasploit Framework is and how well it integrates
    with other tools. The Metasploit Framework offers a very useful feature to import
    scan results from other tools such as NMAP and Nessus. The `db_import` command,
    as shown in the following screenshot, can be used to import scans into the Metasploit
    Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4205f333-e060-4ca0-bc5d-3572e047feb1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `hosts` command: It''s quite possible that we have performed the NMAP scan
    for the entire subnet and imported the scan in the Metasploit Framework database.
    Now, we need to check which hosts were found alive during the scan. The `hosts`
    command, as shown in the following screenshot, lists all the hosts found during
    scans and imports:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/179f098f-5ba5-4cbc-937f-d4e59fd7b863.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `services` command: Once the NMAP scan results are imported into the database,
    we can query the database to filter out services that we might be interested in
    exploiting. The `services` command with appropriate parameters, as shown in the
    following screenshot, queries the database and filters out services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6f7a171f-8eeb-49e3-a8ff-1c22df85f078.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Backing up the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you have worked for long hours on a complex penetration testing assignment
    using the Metasploit Framework. Now, for some unfortunate reason, your Metasploit
    instance crashes and fails to start. It would be very painful to rework from scratch
    on a new Metasploit instance! This is where the backup option in the Metasploit
    Framework comes to the rescue. The `db_export` command, as shown in the following
    screenshot, exports all data within the database to an external XML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then keep the exported XML file safe in case you need to restore the
    data later after failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79480a42-ed1d-4bbe-8868-7373474bfc7e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: NMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NMAP, an acronym for Network Mapper, is an extremely advanced tool that can
    be used for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Host discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall testing and evasion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NMAP is a tool with hundreds of parameters to configure and covering it completely
    is beyond the scope of this book. However, the following table will help you to
    know some of the most commonly required NMAP switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Sr. no.** | **NMAP switch** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| 1. | `-sT` | Perform a connect (TCP) scan |'
  prefs: []
  type: TYPE_TB
- en: '| 2. | `-sU` | Perform a scan to detect open UDP ports |'
  prefs: []
  type: TYPE_TB
- en: '| 3. | `-sP` | Perform a simple ping scan |'
  prefs: []
  type: TYPE_TB
- en: '| 4. | `-A` | Perform an aggressive scan (includes stealth syn scan and OS
    and version detection plus traceroute and scripts) |'
  prefs: []
  type: TYPE_TB
- en: '| 5. | `-sV` | Perform service version detection |'
  prefs: []
  type: TYPE_TB
- en: '| 6. | `-v` | Print verbose output |'
  prefs: []
  type: TYPE_TB
- en: '| 7. | `-p 1-1000` | Scan ports only in range 1 to 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| 8. | `-O` | Perform OS detection |'
  prefs: []
  type: TYPE_TB
- en: '| 9. | `-iL <filename>` | Scan all hosts from the file specified in `<filename>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 10. | `-oX` | Output the scan results in the XML format |'
  prefs: []
  type: TYPE_TB
- en: '| 11. | `-oG` | Output the scan results in the greppable format |'
  prefs: []
  type: TYPE_TB
- en: '| 12. | `--script <script_name>` | Execute the script specified in `<script_name>`
    against the target |'
  prefs: []
  type: TYPE_TB
- en: 'For example: `nmap -sT -sV -O 192.168.44.129 -oX /root/Desktop/scan.xml`.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command will perform a connect scan on the IP address `192.168.44.129`,
    detect the version of all the services, identify which operating system the target
    is running on, and save the result to an XML file at the path `/root/Desktop/scan.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: NMAP scanning approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in the previous section that the Metasploit Framework offers a
    functionality to import scans from tools such as NMAP and Nessus. However, there
    is also an option to initiate the NMAP scan from within the Metasploit Framework.
    This will instantly store the scan results in the backend database.
  prefs: []
  type: TYPE_NORMAL
- en: However, there isn't much difference between the two approaches and is just
    a matter of personal choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scanning from `msfconsole`: The `db_nmap` command, as shown in the following
    screenshot, initiates an NMAP scan from within the Metasploit Framework. Once
    the scan is complete, you can simply use the `hosts` command to list the target
    scanned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eaeaab1f-9896-4d45-bc3b-921389569882.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nessus is a popular vulnerability assessment tool that we have already seen
    in [Chapter 1](225d5f1a-f19d-43ba-90eb-c41039afaad7.xhtml), *Introduction to Metasploit
    and Supporting Tools*. Now, there are two alternatives of using Nessus with Metasploit,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform a Nessus scan on the target system, save the report, and then import
    it into the Metasploit Framework using the `db_import` command as discussed earlier
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load, initiate, and trigger a Nessus scan on the target system directly through
    `msfconsole` as described in the next section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning using Nessus from msfconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start a new scan using Nessus, it is important to load the Nessus
    plugin in `msfconsole`. Once the plugin is loaded, you can connect to your Nessus
    instance using a pair of credentials, as shown in the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Before loading `nessus` in `msfconsole,` make sure that you start the Nessus
    daemon using the `/etc/init.d/nessusd start` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5de6d82b-e261-47e9-aaf1-8219516e1c7e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the `nessus` plugin is loaded, and we are connected to the `nessus` service,
    we need to select which policy we will use to scan our target system. This can
    be performed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also see this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/343309fc-1f37-40dd-adb1-49aa0993c8f3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After some time, the scan is completed, and we can view the scan results using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also see this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0692bbce-7b41-4a3f-93d8-870433031aae.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Vulnerability detection with Metasploit auxiliaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen various auxiliary modules in the last chapter. Some of the auxiliary
    modules in the Metasploit Framework can also be used to detect specific vulnerabilities.
    For example, the following screenshot shows the auxiliary module to check whether
    the target system is vulnerable to the MS12-020 RDP vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47cd1964-0a1b-4b72-a71b-e4843a07da9c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Auto exploitation with db_autopwn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have seen how the Metasploit Framework helps us
    import scans from various other tools such as NMAP and Nessus. Now, once we have
    imported the scan results into the database, the next logical step would be to
    find exploits matching the vulnerabilities/ports from the imported scan. We can
    certainly do this manually; for instance, if our target is Windows XP and it has
    TCP port 445 open, then we can try out the `MS08_67 netapi` vulnerability against
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Metasploit Framework offers a script called `db_autopwn` that automates
    the exploit matching process, executes the appropriate exploit if match found,
    and gives us remote shell. However, before you try this script, a few of the following
    things need to be considered:'
  prefs: []
  type: TYPE_NORMAL
- en: The `db_autopwn` script is officially depreciated from the Metasploit Framework.
    You would need to explicitly download and add it to your Metasploit instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a very resource-intensive script since it tries all permutations and
    combinations of vulnerabilities against the target, thus making it very noisy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This script is not recommended anymore for professional use against any production
    system; however, from a learning perspective, you can run it against any of the
    test machines in the lab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the steps to get started with the `db_autopwn` script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window, and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Copy the downloaded file to the `/usr/share/metasploit-framework/plugins` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart `msfconsole`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `msfconsole`, type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'List the matched exploits using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Exploit the matched exploits using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Post exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post exploitation is a phase in penetration testing where we have got limited
    (or full) access to our target system, and now, we want to search for certain
    files, folders, dump user credentials, capture screenshots remotely, dump out
    the keystrokes from the remote system, escalate the privileges (if required),
    and try to make our access persistent. In this section, we'll learn about meterpreter,
    which is an advanced payload known for its feature-rich post-exploitation capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What is meterpreter?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Meterpreter is an advanced extensible payload that uses an *in-memory* DLL
    injection. It significantly increases the post-exploitation capabilities of the
    Metasploit Framework. By communicating over the stager socket, it provides an
    extensive client-side Ruby API. Some of the notable features of meterpreter are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stealthy**: Meterpreter completely resides in the memory of the compromised
    system and writes nothing to the disk. It doesn''t spawn any new process; it injects
    itself into the compromised process. It has an ability to migrate to other running
    processes easily. By default, Meterpreter communicates over an encrypted channel.
    This leaves a limited trace on the compromised system from the forensic perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible**: Features can be added at runtime and are directly loaded over
    the network. New features can be added to Meterpreter without having to rebuild
    it. The `meterpreter` payload runs seamlessly and very fast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following screenshot shows a `meterpreter` session that we obtained by exploiting
    the `ms08_067_netapi` vulnerability on our Windows XP target system.
  prefs: []
  type: TYPE_NORMAL
- en: Before we use the exploit, we need to configure the meterpreter payload by issuing
    the `use payload/windows/meterpreter/reverse_tcp` command and then setting the
    value of the LHOST variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60d8c76a-0333-43c5-898f-f848a9c9ba56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching for content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have compromised our target system, we might want to look out for specific
    files and folders. It all depends on the context and intention of the penetration
    test. The meterpreter offers a search option to look for files and folders on
    the compromised system. The following screenshot shows a search query looking
    for confidential text files located on C drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/760e89f7-1f8a-4fd7-8379-0f3dbf2a3440.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen capture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Upon a successful compromise, we might want to know what activities and tasks
    are running on the compromised system. Taking a screenshot may give us some interesting
    information on what our victim is doing at that particular moment. In order to
    capture a screenshot of the compromised system remotely, we perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `ps` command to list all processes running on the target system along
    with their PIDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `explorer.exe` process, and note down its PID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Migrate the meterpreter to the `explorer.exe` process, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23ff19d1-d7d9-4bf4-92fb-1e541814f3fa.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have migrated meterpreter to `explorer.exe`, we load the `espia` plugin
    and then fire the `screengrab` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa71e2ae-e011-494d-aa93-1abbcbd9ca66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The screenshot of our compromised system is saved (as follows), and we can
    notice that the victim was interacting with the FileZilla Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e51dde33-39ec-4471-861d-f419819645cd.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Keystroke logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the screenshot, another very useful meterpreter feature is keylogging.
    The meterpreter keystroke sniffer will capture all the keys pressed on the compromised
    system and dump out the results on our console. The `keyscan_start` command is
    used to initiate remote keylogging on the compromised system, while the `keyscan_dump`
    command is used to dump out all the captured keystrokes to the Metasploit console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08e5b51d-944f-4646-84f8-447fc5a64443.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dumping the hashes and cracking with JTR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows stores the user credentials in an encrypted format in its SAM database.
    Once we have compromised our target system, we want to get hold of all the credentials
    on that system. As shown in the following screenshot, we can use the `post/windows/gather/hashdump`
    auxiliary module to dump the password hashes from the remote compromised system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7192bbac-1e83-4dbb-810c-025364351ec5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have a dump of credentials, the next step is to crack them and retrieve
    clear text passwords. The Metasploit Framework has an auxiliary module `auxiliary/analyze/jtr_crack_fast`
    that triggers password cracker against the dumped hashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon completion, the module displays clear text passwords, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**jtr** is an acronym for **John the Ripper,** the most commonly used password
    cracker.![](img/c90dbc0e-d442-4c43-81df-2f7b1ebb5e09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Shell command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have successfully exploited the vulnerability and obtained meterpreter
    access, we can use the `shell` command to get command prompt access to the compromised
    system (as shown in the following screenshot). The command prompt access will
    make you feel as if you are physically working on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5bc0152-5805-4f0f-bc1b-d67c3f30ad25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can exploit a vulnerability and get remote meterpreter access, but it's quite
    possible that we have limited privileges on the compromised system. In order to
    ensure we have full access and control over our compromised system, we need to
    elevate privileges to that of an administrator. The meterpreter offers functionality
    to escalate privileges as shown in the following screenshot. First, we load an
    extension called `priv`, and then use the `getsystem` command to escalate the
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then verify our privilege level using the `getuid` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc441871-c94c-4193-b515-7f2953eb99d8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up the Metasploit database and then
    explored various techniques of vulnerability scanning using NMAP and Nessus. We
    concluded by getting to know the advanced post-exploitation features of the Metasploit
    Framework. In the next chapter, we'll learn about the interesting client-side
    exploitation features of the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out and try to use any auxiliary module that can be used for vulnerability
    detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to explore various features of meterpreter other than those discussed in
    this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to find out if there is any alternative to `db_autopwn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
