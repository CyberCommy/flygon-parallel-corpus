- en: Chapter 1. Arch Linux Environment Setup How-to
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to Arch Linux Environment Setup How-to. Arch Linux is a very flexible
    distribution and this book will guide you to the point where you can get a basic
    system in place. From there on you can go in any direction you want. A simple
    server, a full-blown desktop system with all the bells and whistles. In the end,
    Arch Linux is always what you make of it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Arch Linux using the official ISO (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days the installation of Arch Linux might look like a work of insanity,
    as there is no installer available in the official media, just a guideline to
    follow. The installation without an installer is as easy as it can be. For experienced
    users, installing without an installer is even more convenient. The newest ISOs
    require that you have your machine connected to the Internet, as there are no
    longer packages available on the installation media.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get the official ISO image file from [https://www.archlinux.org/download/](https://www.archlinux.org/download/).
    On this page you will find a download link to the latest release. Depending on
    your preference, download the torrent file or the ISO image file immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing, booting, and setting keyboard layout**: We are going to get the
    ISO file from the download page of the Arch Linux website and store it on the
    preferred media of our choice. At the time of writing this book, there is a dual
    ISO image file that contains both i686 and x86-64 architectures on one disk. Start
    your PC with your preferred installation media (CD or USB stick). On most PC systems,
    you can access the boot menu by pressing one of the function keys, usually between
    *F8* and *F12* depending on the motherboard manufacturer. On older machines where
    you do not yet have a boot menu, you might need to change the boot order in the
    BIOS where the CD-ROM (or DVD/Blu-ray) has to be chosen as the first device to
    try booting from. We''ll also explain how to use a different keyboard layout than
    the default one in this recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating, formatting, and mounting partitions**: You can partition the disks
    the way you want using cfdisk (for MBR disk partitioning) or cgdisk (for GUID
    disk partitioning). After creating the partitions, we can choose to format our
    created partitions with specific filesystems. When all partitions are formatted,
    we need to mount the partitions. First we will mount the root partition to `/mnt`.
    The other partitions will be mounted later on after you have created the specific
    folders. We''ll designate our device with `/dev/sdX`; in your case this can be
    `/dev/sda`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connecting to the Internet**: To be able to continue installing the ISO you
    need to connect to the Internet, because there are no packages available for installation
    on the ISO. For a wireless network you will need to use netcfg. When connected
    to a wired network, just use dhcpcd or dhclient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing the base system and boot loader**: These days the base system
    gets installed by running a simple script **pacstrap**. Pacstrap takes multiple
    parameters, the target location, and the packages or groups you want to install.
    For people who want to develop on their machines, the best `base` install is adding
    `base-devel` to the default installation. For normal end users, just `base` will
    be sufficient to start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring the system**: In this recipe, we''ll describe the flow of what
    to do during the configuration. For more extensive information on how to configure
    your system, refer to the *Configuring your system* recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you in preparing, booting, and setting keyboard
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded the ISO image file, you should also verify its integrity
    by downloading the `sha1sums.txt` file from the download page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These days you can also check if the ISO is completely valid by verifying the
    signature of the ISO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the integrity by issuing the `sha1sum -c sha1sums.txt` command and you''ll
    see whether your download was successful or not. Also check if the signature of
    the ISO is correct by running `gpg -v archlinux-...iso.sig`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the execution of this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9724OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, the ISO's checksum is ok and the
    signature is valid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we are sure our ISO is ok, we can burn this to a CD with our favorite
    burning program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the CD into the drive, or insert the USB stick into the USB port of your
    PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the boot menu, or let your computer automatically boot from the inserted
    installation media.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the previous steps are performed correctly, you will see the following screenshot:![How
    to do it...](img/9724OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the architecture you want and press *Enter*, and we'll be on our way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search the keyboard layout desired for your region. The available keyboard layouts
    can be found at `/usr/share/kbd/keymaps/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the desired keyboard layout with `loadkeys keyboardlayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s perform the following steps to create, format, and mount partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start cfdisk or cgdisk, having the first parameter as the device you want to
    partition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create your partition scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the partition scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `mkfs` command to create a filesystem on a specific partition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount your root partition to `/mnt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Make directories under `mount` for your other partitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount the other partitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following steps are needed to connect to the Internet:'
  prefs: []
  type: TYPE_NORMAL
- en: When we need a wireless network, create a netcfg profile and run `netcfg mywireless`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use dhclient or dhcpcd to get an IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following steps should be performed for installing the base system and
    boot loader:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run pacstrap with the desired parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the desired boot loader: the best choice at this moment is Syslinux.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final installation of the boot loader will be done in a chroot during the
    initial configuration (discussed later in the book).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now list the steps to do during the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate `fstab` with `genfstab`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the root into the system location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Set your hostname in `/etc/hostname`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create `/etc/localtime symlink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your locale in `/etc/locale.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncomment the configured locale in `/etc/locale.gen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `locale-gen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `/etc/mkinitcpio.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate your initial ramdisk:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finish installation of your boot loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the root password with `passwd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the chroot environment (`exit`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more extensive information on how to configure your system, refer to the
    *Configuring your system* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We downloaded the ISO image file via torrent, or via HTTP from the mirror sites
    listed on the download page. The `sha1sum` command lets us verify the integrity
    of the downloaded ISO. On top of the checksum, we can also check the integrity
    by verifying the signature available for the ISO. So now, we can rest assured
    that the downloaded file is the real one. The ISO contains a fully working operating
    system. It also contains all the necessary tools to perform system recovery and
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard configuration set with `loadkeys` will make sure that the key you
    press on your keyboard will be translated to the correct letter on your screen.
    Using a different keyboard layout from the one on your physical keyboard might
    be confusing.
  prefs: []
  type: TYPE_NORMAL
- en: We then created a partition scheme on the selected disk with the appropriate
    tool (cfdisk or cgdisk). **Make Filesystem** (**mkfs**) is a unified frontend
    to create a filesystem. Using it we created our filesystem layout manually under
    `/mnt` by creating our default partition layout in our root, and mounting the
    specific partitions accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: You can make a connection with your wireless network (if needed), and then use
    dhcpcd or dhclient to obtain an IP address that enables you to access the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Pacstrap will run **pacman** with a modified root location to install the desired
    packages into the newly created system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, installing Syslinux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The specific configuration files will ensure we don't have to do all those steps
    over and over again on every boot.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the official ISO directly from the USB stick if you prefer. There
    might be some issues with the verification of the ISO. The next two sections discuss
    them and provide you with the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ISO from a USB drive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ISOs downloaded for Arch Linux are all ''hybrid'' images, which means you
    can put them on a USB drive and they will be bootable. So installing from a USB
    drive is also very simple. Place a USB drive in your machine (*warning: it will
    lose all its data*) and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you have `if=the correct ISO filename` and `of=/dev/sdX`, where you
    don't use a *partition* of the USB drive like `/dev/sdX1`, but the full USB drive.
    So use only `/dev/sdX`.
  prefs: []
  type: TYPE_NORMAL
- en: Having problems verifying the ISO signature?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you don''t have the signer''s public key in your `gpg keyring` you will
    get an error like **gpg: Can''t check signature: No public key**. This means you
    will first have to import the signer''s public key before verification of the
    signature is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the public key, in this case the public key of Pierre Schmitz. Then
    you can run the verification of the ISO again. The verification should now give
    you **gpg: Good signature from "Pierre Schmitz <pierre@archlinux.de>"**. When
    you have done the steps described here, you will get a warning that the key is
    not certified with a trusted signature. In the case of verifying the integrity
    of the ISO, this is of no importance. For more information about GPG and signatures,
    see [http://www.gnupg.org/](http://www.gnupg.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: The next section talks about a common sample of a good desktop partition scheme.
  prefs: []
  type: TYPE_NORMAL
- en: A good partition scheme for desktops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On a desktop system, especially Arch Linux, I personally suggest having a separate
    `/var` partition. Depending on the other goals you might have for this partition
    (for example, running a huge MySQL database, other databases, and so on), a sensible
    value would be 5 GB and above. Don't overdo it or you will have a lot of empty
    space in the `/var` partition. Why make `/var` so big? Pacman keeps its cache
    in `/var`, and you don't really want your root filesystem being deadlocked by
    a filled up disk with package cache.
  prefs: []
  type: TYPE_NORMAL
- en: '**Boot partition**: 50 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swap partition**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When your RAM is less than 4 GB: RAM + one third of RAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When your RAM is greater than 4 GB: Fix it on 4 GB (there is actually no real
    need to make it bigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root partition**: 10 GB (gamers might want to go to 50 GB here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Var partition**: 5 GB (if only used for cache) when having some data from
    databases stored on it; I would go up depending on the need'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home partition**: These days you''ll end up having 300 to 400 GB and even
    more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The netcfg tool originally developed by Arch Linux provides us with tons of
    options, which we will discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Netcfg sample configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sample configurations can be found in the `/etc/network.d/examples` folder.
    In the following table, we have given a list of sample configurations provided
    by the netcfg package:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Connection type | Example profile |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Wireless/WEP hex key | `wireless-wep` |'
  prefs: []
  type: TYPE_TB
- en: '| Wireless/WEP string key | `wireless-wep-string-key` |'
  prefs: []
  type: TYPE_TB
- en: '| Wireless/WPA-Personal (passphrase/preshared key) | `wireless-wpa` |'
  prefs: []
  type: TYPE_TB
- en: '| Wireless/WPA-Enterprise |'
  prefs: []
  type: TYPE_TB
- en: '`wireless-wpa-config` (`wpa_supplicant` configuration is external)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wireless-wpa-configsection` (`wpa_supplicant` configuration stored as a string)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Wired/DHCP | `ethernet-dhcp` |'
  prefs: []
  type: TYPE_TB
- en: '| Wired/static IP | `ethernet-static` |'
  prefs: []
  type: TYPE_TB
- en: '| Wired/iproute configuration | `ethernet-iproute` |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the more extended explanations of some parts to follow, I would refer you
    to the *Configuring your system* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Genfstab extra options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you prefer the use of UUID or label in your `fstab` file, you can pass an
    extra parameter to the `genfstab` script: `U` for UUID or `L` for labels.'
  prefs: []
  type: TYPE_NORMAL
- en: Final installation of Syslinux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final installation of Syslinux has to be done from within the chrooted environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Should the previous command fail while trying to set the boot flag, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After a successful installation of Syslinux, configure the way your system will
    boot by editing `/boot/syslinux/syslinux.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Arch Linux using the Archboot ISO (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we'll learn about the installation of Arch Linux. It might seem
    a little scary because of the manual installation process, but it is not difficult
    at all. The installation script will practically guide you all the way through
    the installation, and you can have a system capable of booting in even less than
    10 minutes. In the Arch Linux ecosystem, the installation is something that is
    usually done once and then never again because of the rolling release of packages.
    Also see the *Beginner's Guide* at [https://wiki.archlinux.org/index.php/Beginners'_Guide](https://wiki.archlinux.org/index.php/Beginners'_Guide)
    to get a grasp of what Arch Linux is all about. As Arch Linux is an ever moving
    target, the preferred method of installation is when you are connected to the
    Internet so you can fetch all the latest and greatest software available. Even
    before downloading, it is a must to read the latest news at [http://www.archlinux.org/news/](http://www.archlinux.org/news/)
    about any new developments.
  prefs: []
  type: TYPE_NORMAL
- en: When we only want a taste of Arch Linux and are probably far from sure that
    this is what we want for all day use, consider learning how the system works by
    installing it in a virtual machine. In the *Beginner's Guide* there is a useful
    section about it at [https://wiki.archlinux.org/index.php/Beginners'_Guide#Install_on_a_virtual_machine](https://wiki.archlinux.org/index.php/Beginners'_Guide#Install_on_a_virtual_machine).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can get the Archboot ISO from [http://wiki.archlinux.org/index.php/Archboot](http://wiki.archlinux.org/index.php/Archboot).
    On this page we will find a download link to the latest release. We can select
    to download the torrent files or the ISO immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing the installation media**: We are going to download the ISO file
    from the Archboot wiki page and save it on the preferred media of our choice.
    At the time of writing, there is a choice to download an architecture-specific
    ISO or a dual ISO that contains both i686 and x86-64 architectures on one disk.
    I would suggest downloading the dual ISO, which makes installing on any PC and
    any of these architectures possible without any hassle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booting the install media and starting installation**: Start your PC using
    your preferred installation media (CD or USB drive). On most PC systems, you can
    get into the boot menu by pressing one of the function keys, usually between *F8*
    and *F12* depending on the motherboard manufacturer. On older machines where you
    do not yet have a boot menu, you might need to change the boot order in the BIOS
    where the CD-ROM (or DVD/Blu-ray) has to be chosen as the first device to try
    booting from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting keyboard and console font**: When using a different keyboard layout
    than the default one, you will for sure need this recipe to configure your specific
    keyboard layout and optionally the console font you like. If you have configured
    both, the installer will also bring these settings into the configuration of our
    installed system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting date and time**: In this recipe we will also configure three small
    parts—we''ll set our time zone, the current time, and the current date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto preparing hard drive**: The **Auto-Prepare** option will guide you with
    the creation of a default partition scheme. When we can''t have our entire drive
    erased, or we want to differ from the default partition scheme chosen by the installer,
    we should skip to the steps for *Manually preparing hard drive*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Warning: the selected hard drive will be erased completely.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manually preparing hard drive**: Manual partition gives you full control
    over how many partitions you create. This can also concern multiple disks, so
    there is total freedom. Use the manual preparation when you are used to partitioning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selecting source**: We can select if we want to install from the repositories
    available on the Internet, or to install immediately from the packages available
    on the installation media. It would be best to opt for FTP/HTTP as this would
    ensure we have the latest packages available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selecting packages**: From my point of view the best way to select your packages
    is by first installing the base system. And when we are done and the system is
    booting standalone, add packages along the way as we need them. The installer
    will ask if you want to add the extra repository so you will be able to install
    everything at once. I would say the safe option here is not to include the extra
    repository and start with the base system. In general, it will be faster to install
    applications when you need them. After the installation, we should only check
    some automatically created configuration files just to make sure the installer
    created them correctly, and we will get a bootable system when rebooting after
    installing the boot loader. The more extensive configuration will be explained
    later on. If you want to change anything here during the installation procedure,
    I would suggest you skip forward to the *Configuring your system* recipe where
    the configuration is explained in depth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing boot loader**: By the end of the recipe we''ll have almost everything
    that we need. However, for our machine to be really usable, we''ll have to install
    the boot loader as this piece of software will enable us to get into Arch Linux
    when we reboot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps for preparing the installation media:'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have downloaded the ISO image file, we must verify its integrity by
    also downloading the `md5sum.txt` file from the `archboot` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will verify the integrity by issuing the `md5sum -c md5sum.txt` command and
    checking whether our download was successful:![How to do it...](img/9724OS_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, all the ISOs were downloaded but the torrent files were not.
    This leads to some successful checks and others state that the files are not found,
    but in the end we know the ISO file we downloaded is ok.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we are sure our ISO is ok, we can burn this to a CD with our favorite
    burning program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following steps will guide you in booting the install media and starting
    the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert the CD in the drive or insert the USB stick in the USB port of your PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the boot menu or let your computer automatically boot from the inserted
    installation media.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the previous steps went fine, we should see the following screenshot:![How
    to do it...](img/9724OS_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the architecture depending on whether we want to boot the **Long Term
    Supported** (**LTS**) or the default kernel. The default kernel should be fine,
    but if we want to run the LTS kernel for stability reasons, we can select it.
    Press *Enter* and we'll be on our way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation media is completely started, we get some initial information
    about the Archboot environment. When we press *Enter*, the installation scripts
    will be started:![How to do it...](img/9724OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When ready to go, press *Enter* and we will be presented with the **MAIN MENU**
    screen. The menu contains several steps that are followed in a chronological order
    for a fresh installation:![How to do it...](img/9724OS_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to set keyboard and console font:'
  prefs: []
  type: TYPE_NORMAL
- en: We are presented with the keyboard layout choice, where you get a list with
    all the possible keyboard layouts that Arch Linux supports. Select your keyboard
    layout and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, you can also select a console font of your liking. If you have no
    idea or don't want to do this, just go back to the main installer menu and continue
    with the next step. If you have a preference, then select the **Set Console Font
    option** and select your font.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s set our time zone, the current time, and the current date:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the time zone. This is something similar to Continent/Capital. For example,
    Europe/Brussels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **UTC** for your hardware clock. This will make sure the daylight saving
    changes will be applied correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your current system time. This is actually the time it is now in your time
    zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your current system date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following steps should be performed for auto preparing the hard drive:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you are presented with a choice of using the old MBR partition
    tables or the new GUID (GPT) partition tables. The choice is entirely yours; however,
    for older machines the safe choice is MBR. For newer machines and machines with
    UEFI bootups, it's recommended to use the GPT partition tables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the size you want to be used for the boot `(/boot`) partition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the size you want to be used for the swap `(/swap`) partition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the size you want to be used for the root `(/root`) partition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The remaining disk space will automatically be claimed for your home (`/home`)
    partition where all the users' data will be residing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the filesystem you want to be used for the root partition and for the
    home partition. The safest choice here is ext4\. If you are an adventurous spirit,
    you could go with Btrfs or NILFS. Do your research before making a choice for
    using a currently marked experimental filesystem, if it really is the thing you
    want to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the naming system you want to be used in the configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we are completely sure everything is ok, we continue and the installer
    will prepare the entire drive. If all goes well, the installer will state that
    the preparation was successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following steps should be performed for manually preparing the hard drive:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the partition type (MBR or GPT). For extended information see step 1
    performed for *Auto preparing hard drive*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a disk to partition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installer presents you with cfdisk or cgdisk depending on whether you have
    selected to use MBR or GPT partitioning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the partitions are created, we need to go back to the partitioning menu
    and use the **Set Filesystem Mountpoints** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First you need to select what partition you will be using as swap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installer will then ask you to select the root partition for your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After these required partitions are selected, you can keep on selecting partitions
    and set their mount points to the location you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we're doing a manual partitioning layout, we can apply the hints from the
    Auto-Prepare section in the manual section. However, by using the manual approach,
    you gain a lot of extra freedom to create a partition scheme as you please.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are needed to select your source:'
  prefs: []
  type: TYPE_NORMAL
- en: Select CD-ROM or FTP/HTTP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the mirror you want to use (this only has to be done when FTP/HTTP is
    selected).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following steps are needed to select your packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Don't enable the extra repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only select **base**; this contains all the packages needed to get a working
    system after the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the packages you want to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let the installation script do its job of installing the packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, let''s install the boot loader:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the boot loader you like the best.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The best known will be GRUB and Syslinux—those are probably also the best supported.
    There are also other boot loaders available such as LILO.
  prefs: []
  type: TYPE_NORMAL
- en: The installer will suggest you check the configuration file it has created.
    In most cases this configuration will be correct, but you should always check
    if it is correct. See if the correct devices are used in the configuration file.
    You can verify the correct devices by checking your filesystem's layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the boot loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have taken all the steps needed to install a basic working Arch
    Linux system on your computer, the only thing left in the installation procedure
    is to reboot your system and remove the installation media. Then you can enjoy
    the first boot of your freshly installed Arch Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Reboot the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We downloaded the Archboot ISO via the torrent files or directly using a web
    browser, and the `md5sum` command lets us verify the integrity of the downloaded
    ISO. So now, we can rest assured that the downloaded file is the real one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Never use an ISO where you have not verified the checksums.
  prefs: []
  type: TYPE_NORMAL
- en: The Archboot ISO contains a fully working operating system so first we boot
    that. We are automatically logged into the live system on pressing the *Enter*
    key. Next, the installation scripts are called and we get dropped in the Archboot
    installation scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The installation scripts will call the correct application to set the keyboard
    layout and the console font, and the selected date and time settings. The installation
    scripts will also keep track of the selected values to put them in the appropriate
    configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: If we have selected the **Auto-Prepare** option, then based on the configuration
    we have made, the installer will run fdisk and create the partition scheme that
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have chosen to do a manual partition of the disk, then we can select
    any layout we want. Once we are satisfied with the partition scheme, the installer
    will ask some questions (for example: Where to mount? What filesystem?), and uses
    our answers to mount the partitions we have made to the correct mount points.
    The installation scripts will also keep track of the answers given so that they
    can be used later on for the generation of a configuration file.'
  prefs: []
  type: TYPE_NORMAL
- en: The installation script will show you a list of packages that pacman has made
    available for you to install. When you have selected all the packages you want
    on your system, the installation script will pass these packages with some extra
    parameters back to pacman, which will do the actual installing.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the installation, a list of configuration files will be prepared
    for you. These configuration files are there for you to review. When you are satisfied
    with the configuration file, save it. The installation script will now use the
    configuration file to put the selected boot loader into place.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we want to divert from the default settings, we might need some extra knowledge.
    So let's discuss them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: The ISOs can be used from a USB drive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ISOs downloaded from Arch Linux are all "hybrid" images, which means you
    can save them on a USB drive and they will be bootable. Installing from a USB
    drive is also very simple. Just connect a USB drive to your machine and issue
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All information on the USB drive will be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: We need to make sure that we set the correct input file, our ISO, to the `if`
    parameter. Also the output file parameter must be the device and not some partition
    of the device, such as `of=/dev/sdX`. The `X` stands for the letter assigned by
    the system to your USB drive.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting local time versus UTC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some rare cases where the choice for local time on your hardware clock
    is the best choice. For example, when installing Arch Linux next to Windows XP,
    which is an operating system not capable of handling a different time on a hardware
    clock and system clock. More recent versions of the Windows operating system can
    handle the hardware clock being set to UTC.
  prefs: []
  type: TYPE_NORMAL
- en: A safe partition size choice for desktop systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Partitioning is a very wide topic. It can be done in an endless number of combinations.
    We will now discuss some extra information required to understand the partitioning.
    Also some nice defaults to have a system up and running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list is a selection for normal desktop use. For people wanting
    to play a lot of games, these size selections will not fit your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boot partition**: 50 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swap partition**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When your RAM is less than 4 GB: RAM + one third of RAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When your RAM is more than 4 GB: Fix it on 4 GB (there is actually no real
    need to make it bigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root partition**: 10 GB (gamers might want to go to 50 GB here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home partition**: These days you''ll end up having 300 to 400 GB and even
    more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the desired filesystem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When selecting which filesystem to use for your root and home partitions, you
    should be well informed about the possibilities of the filesystems. When you have
    no idea, the best choice is **ext4** as this is the default filesystem these days
    with modern features, nice speed, and robustness, so you don't lose any data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the desired filesystem](img/9724OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What about the filesystem on boot?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The boot partition will automatically be formatted with the ext2 filesystem.
    This is the safest choice, as all boot loaders you can find out there will be
    able to get your system to boot when you have a boot partition formatted as ext2.
  prefs: []
  type: TYPE_NORMAL
- en: Naming schemes for block devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three ways to point to a block device (partition):'
  prefs: []
  type: TYPE_NORMAL
- en: '**UUID scheme**: This is a unique ID that we can use to point to a block device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LABEL scheme**: Here we can point to a partition by using its label'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KERNEL scheme**: This is the oldest method used to point to a block device
    by directly pointing to the device node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the UUID scheme might look ugly in your configuration but this is the
    most certain way you will always point to the correct device. Say you have some
    hardware changes and the devices are ordered in a new way; with this you will
    still have the correct block device selected.
  prefs: []
  type: TYPE_NORMAL
- en: The LABEL scheme is looking very elegant and simple but there might be some
    name collisions as multiple physical disk partitions can have the same name.
  prefs: []
  type: TYPE_NORMAL
- en: The KERNEL scheme is actually the oldest and here we are just pointing to some
    device node (such as `/dev/sda1`), but this could fail someday after some hardware
    changes, which could lead to a different order of the device nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Naming schemes for block devices](img/9724OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A good partition scheme for desktops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On a desktop system, especially on Arch Linux, I suggest having a separate `/var`
    partition. Depending on the other goals you have for this partition (for example,
    running a huge MySQL database, other databases, and so on), the appropriate value
    would be 5 GB and up. Don't overdo it or you will have a lot of empty space in
    the `/var` partition. Why so big? Pacman keeps its cache in `/var` and you don't
    really want your root filesystem being deadlocked by a disk that's filled up with
    package cache.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a mirror geographically close to you
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When installing Arch Linux from the Internet, it is best to choose a mirror
    close to our home for the best download speeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting a mirror geographically close to you](img/9724OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When your network is up and running, you can select a mirror and select one
    that is as close as possible to your location. We will get the best performance
    this way. Should you be in doubt what the closest mirror is for you, you can always
    select a global mirror such as [mirrors.kernel.org](http://mirrors.kernel.org),
    which will automatically choose a server close to you.
  prefs: []
  type: TYPE_NORMAL
- en: What packages to select
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation of Arch Linux, we can select a list of packages to install.
    I will now share my own preferred way. When this is a first time installation,
    my personal preference would be to leave all the packages selected from the base
    group. If you really insist on removing some packages from the base group, go
    ahead and remove them, but you should really know what you are doing in that case.
  prefs: []
  type: TYPE_NORMAL
- en: '![What packages to select](img/9724OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Having the extra repository enabled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this is not the first install of Arch Linux, you can definitely enable the
    use of the extra repository so that you can select a whole bunch of applications,
    which you know for sure you want to have installed on your system. For example,
    you can immediately install Xorg, GNOME, XFce, KDE, and so on. For a first time
    install, I would go step-by-step and leave the extra as it is for now.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your system (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we'll explain the configuration files used to identify your system.
    Usually, these files only need to be configured once and stay the same for the
    entire life of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring hostname**: A **hostname** is a name we give to a machine that
    will make it easy to recognize which machine we are talking about. So if we are
    in a network, we can easily separate the different machines by their hostnames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring console**: We''ll also configure the virtual console, what keyboard
    layout to use, and maybe some special font and mapping for these.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring the localization**: In this task we will set up our machine with
    the correct localization. This can be done very extensively in the `locale.conf`
    file. In the most common cases, we only set `LANG` and `LC_COLLATE` in this file.
    If you want to narrow it down, you can get more information by typing `man locale.conf`.
    However, `LC_COLLATE` is the fallback when everything else fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring time zone**: Setting your time zone will make sure that your
    system clock is correct. This has to be used in combination with `/etc/localtime`.
    Actually, they have to be changed together so for your own safety change the `/etc/localtime`
    symlink, and then immediately add the new time zone to `/etc/timezone`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring module handling**: Do you want to load extra modules that are
    not getting loaded by default? In the case of "fancy" hardware or some third-party
    software such as VMware or VirtualBox, we might need this. You can add a configuration
    file in `/etc/modules-load.d/`with a list of modules. The modules have to be separated
    by newlines. When you want to add some comments in those files, you can do that
    by starting your line with `#` or `;`. The files placed in the directory only
    need one extra requirement; the name has to end with `*.conf`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following step configures the hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the hostname with `vim /etc/hostname` to configure it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to configure the console:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/etc/vconsole.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the keywords with their values. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to configure the localization:'
  prefs: []
  type: TYPE_NORMAL
- en: To indicate what locales we want to support, edit `/etc/locale.gen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we have changed the `locale.gen` file, run `locale-gen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To indicate what locale we want to use by default, edit `/etc/locale.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to configure the time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a symlink `/etc/localtime` pointing to your time zone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Copy the time zone's name into `/etc/timezone`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to configure modules:'
  prefs: []
  type: TYPE_NORMAL
- en: For loading modules, add a configuration file to `/etc/modules-load.d/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For blacklisting and passing special parameters to modules, add a configuration
    file to `/etc/modprobe.d/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready section* of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On boot, the system will read the content of the `/etc/hostname` file. This
    content will be used to identify the system to us as the user, and also to identify
    the machine in a network. The hostname is mostly for user convenience because
    it's much easier to remember than a big list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The terminal will allow you to type on your localized keyboard. The output on
    your screen will correspond with the button pressed on your keyboard. Also, the
    terminal will show you the text output in the selected font. Lastly, it will do
    a translation of text encoding where needed. In the example shown in the steps
    to configure the console, the output will be translated from ISO-8859-1 to Unicode.
  prefs: []
  type: TYPE_NORMAL
- en: All applications supporting the localization will bring you their output in
    American English, if `LANG=en_US`. When the application does not have the selected
    language, it will fall back to the "C language". The C language is the default
    language in computer systems, so this will also be in English.
  prefs: []
  type: TYPE_NORMAL
- en: The time shown on your system will be the one from your time zone. When you
    are in a time zone where you have daylight saving changes, your PC will automatically
    adjust to it.
  prefs: []
  type: TYPE_NORMAL
- en: All files residing in `/etc/modules-load.d/` ending with `*.conf` will be used
    to load extra modules. All `*.conf` files residing in `/etc/modprobe.d/` will
    be used to determine if the modules must be blacklisted, or used with some special
    options.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at some tips and tricks for easier configuration of your desired
    keymap and console font and also, an easy way to find the available time zones.
  prefs: []
  type: TYPE_NORMAL
- en: KEYMAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can get a list of all the available keyboard layout mappings by listing
    the folder `/usr/share/kbd/keymaps`. From the following screenshot, we can see
    we have found the Belgian layout so we can add `KEYMAP=be-latin1` to our configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![KEYMAP](img/9724OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CONSOLEFONT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can find a list of all the available fonts for the console by listing `/usr/share/kbd/consolefonts`.
    When we find the desired font, we can add this to our configuration file. For
    example, `CONSOLEFONT=Lat2-Terminus16.psfu.gz`.
  prefs: []
  type: TYPE_NORMAL
- en: CONSOLEMAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get a list of possible transformations, we can take a list of `/usr/share/kbd/consoletrans`.
    Optionally, we can add this to our configuration file, but this is not always
    needed. For example, `CONSOLEMAP=8859-1_to_uni`.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your time zone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finding your time zone is far from difficult as it is practically always Continent/Capital.
    We can run `ls` in the `/usr/share/zoneinfo/` folder and take it from there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Installing and removing packages (Must know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe we will see how package management in Arch Linux revolves around
    pacman. **Pacman** is just short for package manager, and not a joke that package
    management is a game. The complete guide to pacman can be found on the wiki at
    [https://wiki.archlinux.org/index.php/Pacman](https://wiki.archlinux.org/index.php/Pacman).
    Arch Linux has three official repositories: [core], [extra], and [community].
    Both [core] and [extra] are maintained by the Arch Linux Developers, while the
    [community] repository is maintained by the Trusted Users. There are also a lot
    of unofficial repositories maintained by the Arch Linux enthusiasts, which install
    specific types of software not found in the official repositories, thereby making
    your life much easier. The list of unofficial repositories can be found at [https://wiki.archlinux.org/index.php/Unofficial_User_Repositories](https://wiki.archlinux.org/index.php/Unofficial_User_Repositories).'
  prefs: []
  type: TYPE_NORMAL
- en: Arch Linux is using a complete open model, which means every piece of software
    provided in the official repositories can be rebuilt by the user. This is what
    we call the **Arch Build System** or **ABS**. Arch Linux also gives the users
    a very easy way to share buildscripts for other software not found in the repositories
    by means of the **Arch User Repository** or **AUR**. And finally, there is also
    a nice list of commonly used software on the wiki at [https://wiki.archlinux.org/index.php/Common_Applications](https://wiki.archlinux.org/index.php/Common_Applications).
    This list might help you find the ultimate application to fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring pacman**: Firstly, the default configuration of pacman is done
    in `/etc/pacman.conf`. Secondly, you also have `/etc/pacman.d/mirrorlist` installed
    on your system by default, which contains the selected mirror used during the
    installation. The mirrorlist contains all the official mirrors of Arch Linux.
    The default configuration that you get after the installation works perfectly
    fine. You can find all the information related to pacman on the wiki page at [https://wiki.archlinux.org/index.php/Pacman](https://wiki.archlinux.org/index.php/Pacman).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full system upgrade**: This is probably the most used action of all, once
    you have your system installed with all the software that suits your needs. Often
    you will only be left doing a full system upgrade from time to time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing a package from the repositories**: Installing packages with pacman
    is straightforward. We can pass multiple packages to the command to install more
    than one package, or we could even pass a groupname to install a whole group of
    packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also install a package through an update where we need to pass the package
    file to pacman in order to have some piece of software installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Searching packages in the repositories**: This will enable us to search if
    our favorite piece of software is available in the repositories so we can install
    it hassle free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing a package from a disk**: This practically behaves in the same
    way as installing from the repositories with one exception: here we pass a file
    to the command and not a package name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removing a package**: When we get tired of a package, or we have found some
    new piece of software that does the same job but suits our needs better, we could
    remove a certain package or even group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cleaning package cache**: Over time, we don''t want our disk being filled
    up with old package files, so from time to time it is a very good practice to
    clean the package cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Official and unofficial repositories**: Arch Linux provides us with a lot
    of packages by default and these can be found in the official repositories. The
    official repositories contain packages supported by the Arch Linux Developers
    and Trusted Users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Arch Build System**: The **Arch Build System** (**ABS**) is similar
    to the ports system you find in FreeBSD. All the buildscripts to create the packages
    found in the official repositories are available through the ABS. This enables
    you as a user to rebuild every package according to your own wishes, with your
    own compiler flags, and so on. If you want to fully use the ABS, you will need
    to install **base-devel** and **abs** with pacman. If you only want to check how
    things got done, you will only need to install abs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Arch User Repository**: The **Arch User Repository** (**AUR**)
    contains packages not found in the official repositories and are pure user contributed
    content. So everyone registered on the AUR website [https://aur.archlinux.org](https://aur.archlinux.org)
    can upload new packages, so other users might benefit from that work. To use the
    AUR you must install base-devel. For more details about the AUR, I will refer
    to the wiki at [https://wiki.archlinux.org/index.php/AUR](https://wiki.archlinux.org/index.php/AUR).![Getting
    ready](img/9724OS_04_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using makepkg: Makepkg is the tool used for building packages for Arch Linux.
    I will not go too deep into the usage, but will bring you up to speed to get your
    packages built from the ABS or AUR. Makepkg assumes that base-devel is installed.
    Also see [https://wiki.archlinux.org/index.php/Makepkg](https://wiki.archlinux.org/index.php/Makepkg).
    Makepkg has to be called in a directory with at least one file named `PKGBUILD`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to configure pacman:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/etc/pacman.conf` to modify options or add/remove some repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `/etc/pacman.d/mirrorlist` to change or add a mirror with the official
    repositories in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `pacman -Syu` as root for the full system upgrade.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install a package from the repositories, in a terminal run `pacman -S somepackage`
    as root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As root, run `pacman -Ss somepackage` for searching packages in the repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `pacman -U somepackage.pkg.tar.xz` as root in a terminal for installing
    a package from disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As root, run `pacman -R somepackage` for removing a package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For cleaning the package cache, run `pacman -Sc` as root and answer the questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to configure official and unofficial repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/etc/pacman.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable or enable an official repository, or add an unofficial repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to use the ABS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install base-devel and abs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Optionally edit `/etc/abs.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let abs synchronize the `abs` scripts. You must run abs as root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to use the AUR:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install base-devel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Search for your favorite application in the AUR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the tarball and start building it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to use makepkg:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to a folder with a buildscript in it (`PKGBUILD`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `makepkg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should get the package to build. If it is missing dependencies to build
    the package, you will need to install those first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The options set in `pacman.conf` will determine the behavior of pacman. These
    vary from ignoring packages or groups, from updates to extra repositories. What
    we have defined in the mirrorlist will determine where our packages come from
    (from which server).
  prefs: []
  type: TYPE_NORMAL
- en: The full system upgrade command will synchronize your local package databases
    with the remote ones, and depending on the packages you have installed it will
    ask you if you want to continue with the installation of some upgraded packages.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `pacman -S somepackage` command will look for the package name or group
    you have passed, and if it exists, it will continue to try and install it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On executing the `pacman -Ss somepackage` command, pacman will search in the
    locally synced databases if the package we are looking for is available somewhere.
    If that is the case, we will see what version is available for us to install.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On executing the `pacman -U somepackage.pkg.tar.xz` command, pacman will check
    the dependencies of the package and try to install these alongside the package
    you want to install. When all goes well, it will install the package inside the
    tarball on the correct location.
  prefs: []
  type: TYPE_NORMAL
- en: The package will be removed from the system on executing the `pacman -R somepackage`
    command. The only thing left of the package will be an entry in the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On executing the `pacman -Sc` command, pacman will look for old package files
    and ask you if you want those to be removed from the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pacman uses `pacman.conf` for the options and the repositories. All enabled
    repositories will be used for package installation now. Should we have some configuration
    mismatches, pacman will notify us.
  prefs: []
  type: TYPE_NORMAL
- en: Abs will use `rsync` to synchronize the buildscripts used in the official repositories
    to your local computer. This will facilitate you, for example, to build an officially
    supported package with other options enabled or disabled.
  prefs: []
  type: TYPE_NORMAL
- en: The AUR is actually just a website with a collection of user contributed buildscripts.
    If your favorite application is already available there, you can benefit from
    the work that someone else has already done. It is also very easy to contribute
    improvements via comments.
  prefs: []
  type: TYPE_NORMAL
- en: Makepkg will read the information described in the `PKGBUILD` file to get the
    package built correctly, and have it in the correct format for pacman to install
    it on your system.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9724OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pacman.conf` file has sections defined by `[section]`. These sections can
    have some options defined inside them. There is one special section called `[options]`
    where the global options can be configured for pacman. The other sections are
    the repositories defined by default or the user. In regards to the repositories,
    the order of the declaration is important. The repository nearest to the top of
    the file will take precedence, in descending order. This is of great importance
    for repositories that provide packages with the same name. The order is also important
    so as to understand why `[testing]` must be defined above `[core]`. Generally
    the `pacman.conf` file is very well documented by means of comments that explain
    the options provided, but here we'll try to explain them in depth.
  prefs: []
  type: TYPE_NORMAL
- en: The **mirrorlist** is a file with all official Arch Linux mirrors listed. Let's
    find a mirror closer to home so we can get the best download speeds. We can define
    more than one server here. Note that this will not give us the packages from the
    most up-to-date server, but when the first in the list is unreachable then the
    second can be used, so we are still able to update our system.
  prefs: []
  type: TYPE_NORMAL
- en: The pacman.conf options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pacman.conf` options can be found at [https://www.archlinux.org/pacman/pacman.conf.5.html](https://www.archlinux.org/pacman/pacman.conf.5.html).
    By default, everything should be working out of the box. The default should also
    be sufficient for new users.
  prefs: []
  type: TYPE_NORMAL
- en: Some repository samples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is a sample of the `[core]` repository. We can see that signature
    checking is required for the packages, and we use the mirrorlist for the configured
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following sample will use the default `SigLevel` defined in the `[options]`
    section, and when used, it will first try to use FTP, and when this is not available
    it will fall back to HTTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following sample, we have a local repository where you can see all possible
    URLs that can be used to fill in the `Server` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: More information about official and unofficial repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the official repositories are listed in `pacman.conf`. Not all of
    them are enabled by default. There is also a nice list of unofficial repositories
    where you can find some very high quality software.
  prefs: []
  type: TYPE_NORMAL
- en: For complete information about the official repositories and in what cases you
    should enable or disable them, check out [https://wiki.archlinux.org/index.php/The_Arch_Linux_Repositories](https://wiki.archlinux.org/index.php/The_Arch_Linux_Repositories).
  prefs: []
  type: TYPE_NORMAL
- en: Due to the fact that it is easy to set up your own repository, there are a lot
    of users who are building a set of specific packages and providing them as unofficial
    repositories for everyone. The complete list of unofficial repositories can be
    found on [https://wiki.archlinux.org/index.php/Unofficial_User_Repositories](https://wiki.archlinux.org/index.php/Unofficial_User_Repositories).
  prefs: []
  type: TYPE_NORMAL
- en: More information on the ABS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By using the ABS, we as users get a great deal of flexibility over our system.
    For first time users of ABS, you would want to check the ABS wiki page at [https://wiki.archlinux.org/index.php/ABS](https://wiki.archlinux.org/index.php/ABS).
    For a simplified introduction, you can also refer to [https://wiki.archlinux.org/index.php/ABS_FAQ](https://wiki.archlinux.org/index.php/ABS_FAQ).
  prefs: []
  type: TYPE_NORMAL
- en: Booting and managing services with systemd (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Systemd provides us with a more modern approach of booting. It also benefits
    from the modern multicore processors and relies on very aggressive parallelization
    to get the job done very quickly. Arch Linux provides systemd by default. Systemd
    uses "the so-called service files" to define how and when a certain service or
    "a so-called daemon" has to be started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing systemd**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting the default target**: The default target can be compared with the
    runlevel when using initscripts. It is not the same, but flows from the same idea
    that you want some stuff being started in certain cases. "A so-called runlevel"
    is called a **target** in the systemd world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starting a service manually**: Using the `systemctl` command, we can start
    and stop services on demand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling services during boot time**: Of course systemd can start services
    during boot time. It is very simple to enable or disable these services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to install systemd:'
  prefs: []
  type: TYPE_NORMAL
- en: Install both systemd and systemd-arch-units to make the installation work by
    running `pacman -S systemd systemd-arch-units`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `init=/bin/systemd` to your kernel command line by editing `/boot/syslinux/syslinux.cfg`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to set the default target:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to end up with a graphical system, enable the graphical target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When a terminal is sufficient, the multiuser target will suffice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Start a service manually by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable services during boot time by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need the systemd-arch-units package, because not all packages providing services
    are providing the service files needed to be able to use them with systemd. Due
    to the fact that we added `init=/bin/systemd` to the kernel command line, the
    system will use systemd for startup.
  prefs: []
  type: TYPE_NORMAL
- en: These days only two targets can be set automatically as the default target,
    as only `graphical.target` and `multi-user.target` provide the default target
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `systemctl start service` command, `service` is actually the name of
    a file. For example, NetworkManager has a systemd service file called `NetworkManager.service`,
    and it is this full name we need to pass to the `systemctl` command. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To be able to know what services to start during boot time, `systemctl` will
    create symlinks to the specific service files in the correct locations where systemd
    will search them during boot.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we are satisfied with systemd booting our system, we can eventually fine-tune
    it a little more.
  prefs: []
  type: TYPE_NORMAL
- en: Systemd only initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following command will provide symlinks for initscripts'' compatibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The result is that you can omit the extra parameter `init=/bin/systemd` on your
    kernel command line.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily change the desired target by changing the kernel command line
    in our boot loader configuration. This makes it easy to test if some specific
    target suits our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Set the target on the kernel command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to the appending of a number to the kernel command line when using initscripts,
    we can also do this for systemd using the `systemd.unit` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, considering Syslinux as the boot loader, open `/boot/syslinux/syslinux.cfg`
    and add `systemd.unit=multi-user.target` to the kernel command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The previous example is valid for a system with only systemd, otherwise we also
    would require `init=/bin/systemd`.
  prefs: []
  type: TYPE_NORMAL
- en: List all available services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We might want to know what services we have available on our system, and of
    course we want to know what we can do with those services.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can list all the used services or choose the list all the available services
    by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Default actions for services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default systemd supports actions such as `start`, `stop`, `restart`, `reload`,
    and `status`. There are more actions available, which can be found by issuing
    `man systemctl`.
  prefs: []
  type: TYPE_NORMAL
- en: Check if a service will be started at boot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before enabling a service, we might want to check if the service is not already
    enabled. We can check if a service is already enabled for startup during the boot
    process by using the `is-enabled` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Disable a service from starting during boot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we find some service we no longer need, we would want to disable it. Sometimes
    we no longer want some services being started during the boot process, so we need
    to disable them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Booting and managing services using initscripts (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn about initscripts. **Initscripts** is a collection
    of scripts that make sure your computer starts up fine. It also provides the necessary
    functions and tools to manage services on your system. Initscripts' services are
    often referred to as **daemons** ([https://wiki.archlinux.org/index.php/Daemon](https://wiki.archlinux.org/index.php/Daemon)).
    These days, booting using initscripts can still be used in conjunction with systemd,
    but over time the use of initscripts will be discouraged and phased out. **Systemd**
    is a daemon that controls the startup of your system and also manages the services
    running on them. The initscripts are written in **Bash**, so they are easy to
    read and modify when needed. Extended information about the boot process of Arch
    Linux can be found at [https://wiki.archlinux.org/index.php/Arch_Boot_Process](https://wiki.archlinux.org/index.php/Arch_Boot_Process).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changing runlevel**: The definition of a runlevel is somewhat abstract. The
    **runlevel** will determine what applications will be started. Arch Linux uses
    some of the runlevels globally defined, and we can find exactly what they do on
    [https://wiki.archlinux.org/index.php/Runlevels](https://wiki.archlinux.org/index.php/Runlevels).
    While the system is running, you can change the runlevel on the fly, or maybe
    you want to do some administrative actions on the machine that require you to
    change the runlevel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting the default runlevel**: By default the runlevel used is `3`. This
    is the multiuser runlevel without starting `X`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manually starting a service (daemon)**: With initscripts, all the files needed
    for starting and stopping some services are also just Bash scripts so they can
    be called directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically starting a service (daemon)**: The list of daemons that get
    started during boot time are configured in the `rc.conf` file within the `DAEMONS`
    array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following step changes the runlevel:'
  prefs: []
  type: TYPE_NORMAL
- en: Run `telinit runlevel` to change the runlevel, where `runlevel` is a number
    from `0` to `6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to set the default runlevel:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/etc/inittab`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the line where you find `id:3:initdefault:`. Here you will already see
    that the default selected runlevel is `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test if your configuration was done correctly by running `telinit q`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To manually start a service (daemon), begin by calling the script directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to automatically start a service (daemon):'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/etc/rc.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new item to the `DAEMONS` array as you please:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `telinit` command will change the runlevel and depending on what number
    you switch to, some running applications and daemons might get stopped or just
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: The default selected runlevel set in the `inittab` file determines what scripts
    will be used during the startup of your PC. This is also the reason why you always
    need to check if the configuration is correct by running `telinit q`, because
    if the `inittab` file is corrupted somehow your system will become unbootable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Bash script sitting in the `/etc/rc.d/` folder will be executable. It will
    by default also provide three actions: `start`, `stop`, and `restart`.'
  prefs: []
  type: TYPE_NORMAL
- en: During startup, the initscripts will read the `DAEMONS` array defined in the
    `rc.conf` file, and in the order they are defined all the daemons will be started
    during boot.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's talk about some general information that is relevant to this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The runlevels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The runlevels are just numbers, but for us humans it is easier to remember sentences.
    So we do some matching of an action versus the runlevel number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list defines each runlevel number:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: Poweroff'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Single-user mode (rescue mode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2` and `4`: These are user defined, but as on any other system they are the
    same as `3` by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: Multi-user mode; users can log in via a terminal or network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5`: Multi-user graphical mode; this is runlevel `3 + X` (some display manager)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6`: Reboot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`emergency`: Emergency shell (you will encounter this during boot failures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the default runlevel in the kernel command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The modification of the `/etc/inittab` file can lead to an unbootable system.
    So there are other ways to configure the default runlevel.
  prefs: []
  type: TYPE_NORMAL
- en: We can set the default runlevel we want in the kernel command line configured
    in our boot loader configuration file. This will allow us to safely switch runlevels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets perform the following step to set the default runlevel via the boot loader
    (Syslinux in this example):'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `/boot/syslinux/syslinux.cfg`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We have set the default runlevel to `5` (graphical mode).
  prefs: []
  type: TYPE_NORMAL
- en: The default actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arch Linux provides a helper application that makes it easy to start multiple
    daemons in one command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scripts that facilitate the starting of the daemons usually provide three
    actions by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: Starts the daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop`: Stops the daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: Restarts the daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another common action is `reload`, which facilitates the running daemon to actually
    reload its configuration without really stopping.
  prefs: []
  type: TYPE_NORMAL
- en: The rc.d helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arch Linux provides a helper that can start and stop multiple services in one
    command. The helper comes with a nice man page, which you can read by issuing
    `man rc.d`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The actions you can provide to `rc.d` are the same that you can pass to the
    scripts directly. So if a script provides the `reload` action, `rc.d` can use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the default way of starting the daemons is sequential. The first has to
    be started correctly before the next can be started. We can improve our boot time
    by configuring the `DAEMONS` array a little differently.
  prefs: []
  type: TYPE_NORMAL
- en: Daemons can be started in the background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we want some service to be started in parallel with the one''s following
    it, you can add `@` in front of the entry in the `DAEMONS` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Leave a daemon in the array without being started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also leave a service in the `DAEMONS` array but still disable it from
    automatically being started. For this we need to add `!` in front of the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Get a list of the available daemons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can get a list of all the available services by running `rc.d list`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GUI using Xorg (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to configure GUI using **Xorg**. When we want
    to use our system as a desktop system, we will need Xorg one way or the other.
    These days Xorg is the de facto standard for displaying and using graphical interfaces
    on Linux-based systems. Also for most single-screen setups, you don't need to
    configure anything. Multi-screen setups and setups with proprietary drivers are
    the exceptions to this rule. Some distributions provide you with tools to install
    the correct video driver; Arch Linux does not. So, eventually we will need to
    find out which driver to install. In relation to the keyboard, mouse, and a lot
    of other input devices, Xorg can find them mostly automatically. In some cases
    the input devices need an additional Xorg driver installed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list describes the main tasks that we will perform in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Xorg**: We''ll install the basic required packages to be able
    to use the Xorg graphics system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changing keyboard layout**: For most people changing the keyboard layout
    is not needed, as most use QWERTY. But for some parts of the world where other
    layouts are being used, this might come in handy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing input drivers**: When we have some special input hardware with
    us, we might need to install extra input drivers. These days everything should
    be detected automatically, but sometimes in order to meet the specific requirements
    of your input hardware we need to install input drivers. For example, laptop users
    might need to install the Synaptics driver for their touchpad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing video drivers**: First we need to find out which graphics we have
    installed in our system and what will be the best driver to use for them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the proprietary NVIDIA drivers**: The proprietary NVIDIA drivers are
    easy to install on Arch Linux, as they can be found in the official repositories.
    There is an article in the Arch Linux wiki ([https://wiki.archlinux.org/index.php/NVIDIA](https://wiki.archlinux.org/index.php/NVIDIA))
    that covers all the bits and pieces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the proprietary AMD drivers**: The reference for using the AMD (ATI)
    Catalyst drivers with Arch Linux is the following wiki page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wiki.archlinux.org/index.php/ATI_Catalyst](https://wiki.archlinux.org/index.php/ATI_Catalyst)'
  prefs: []
  type: TYPE_NORMAL
- en: On this page we find a whole bunch of information needed to get the Catalyst
    drivers working nicely on your hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A short while ago, the catalyst and catalyst-utils packages made it into the
    official repositories. So they become very easy to install.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install xorg-server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change the keyboard layout now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `setxkbmap` command followed by the desired keyboard layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the input driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to install video drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the graphics card used in your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search if there is a driver available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s list the steps required to use the proprietary NVIDIA drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install nvidia and nvidia-utils:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Create the configuration file `/etc/X11/xorg.conf.d/20-nvidia.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart and see if the driver is being used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to use the proprietary AMD drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install catalyst and catalyst-utils by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `nomodeset` parameter to the kernel command line to make sure that
    the open source drivers will not kick in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Add a default configuration file `/etc/X11/xorg.conf.d/20-catalyst.conf` so
    that Xorg knows it has to use the proprietary driver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the main tasks performed, refer to the *Getting
    ready* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pacman will download and install the xorg-server package and its minimally needed
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The `setxkbmap` command will change the selected keyboard layout. For example,
    we had a US layout by default, and after running `setxkbmap be` it will be the
    Belgian AZERTY layout.
  prefs: []
  type: TYPE_NORMAL
- en: The specific drivers get installed to your system by pacman, which will provide
    Xorg with the means to understand the input from a touchpad and handle it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NVIDIA driver should be automatically detected by Xorg, but to be sure
    you can add a file to `/etc/X11/xorg.conf.d/`, such as `/etc/X11/xorg.conf.d/20-nvidia.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You could when needed have a default configuration created by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'When having two connected screens, you can also autogenerate a twinview default
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: When we are using the AMD proprietary drivers, setting the `nomodeset` parameter
    makes sure that the built-in kernel drivers don't start to conflict with the proprietary
    driver. The Xorg configuration file will make sure that Xorg will start without
    errors. Although not entirely necessary, we make sure that Xorg uses the driver
    and serves us well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can opt to use our graphical environment directly, which will imply the installation
    of xorg-xinit, or we could use our Xorg environment with a display manager. A
    **display manager** is a graphical login screen so we can use Xorg all the way.
  prefs: []
  type: TYPE_NORMAL
- en: Directly using Xorg
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to start Xorg directly from the terminal, we first need to install
    the xorg-xinit package to facilitate this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the `startx` command will get us into the X server. When using this directly
    without configuration, X will not start as we will have some missing applications
    requested by the default configuration. So let''s go forward and install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Using Xorg with a window manager or a desktop environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our own convenience it's best to install a **window manager** (**WM**) or
    a **desktop environment**. For a complete list of window managers go to [https://wiki.archlinux.org/index.php/Window_manager](https://wiki.archlinux.org/index.php/Window_manager).
    And for a full list of desktop environments go to [https://wiki.archlinux.org/index.php/Desktop_Environment](https://wiki.archlinux.org/index.php/Desktop_Environment).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section we''ll install Xfce ([https://wiki.archlinux.org/index.php/Xfce](https://wiki.archlinux.org/index.php/Xfce)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Pacman will ask if we want to install all the packages from the Xfce group.
    We say yes as this is most convenient.
  prefs: []
  type: TYPE_NORMAL
- en: As Xfce is installed now, we can issue `startxfce4` from a started Xorg session
    or modify our `~/.xinitrc`. In the `.xinitrc` file we can uncomment the line `#
    exec startxfce4` and save the file. When logged in, we can now issue `startx`
    and enjoy the Xfce desktop environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using Xorg with a display manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For desktop users this is the common usage as they need a graphical login screen
    and continue from there to the desired desktop environment or window manager.
    There are several display managers available in Arch Linux. In this section we'll
    only describe **LXDM**, which is a fairly simple display manager. For a list of
    other display managers available for Arch Linux you can read [https://wiki.archlinux.org/index.php/Display_Manager](https://wiki.archlinux.org/index.php/Display_Manager).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install LXDM we issue pacman with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: When using initscripts, we can add LXDM at the end of our `DAEMONS` array. When
    we are using systemd, we can issue `systemctl enable lxdm.service` to enable the
    startup of LXDM on boot. When we have rebooted, the LXDM display manager shows
    up and we can select, for example, **Xfce Session** from the Desktop Session drop-down
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Setting keyboard layout in the configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we want our keyboard and mouse automatically configured every time our computer
    starts, we can set the keyboard layout in a configuration file, so we don''t have
    to run `setxkbmap` every time we come into Xorg. We already have xf86-input-evdev
    installed, so we can put our keyboard settings in the same file `10-evdev.conf`,
    such as `/etc/X11/xorg.conf.d/10-evdev.conf` (only the keyboard section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted parts are added and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`XkbModel`: What keyboard model are we using? In our example, `pc105`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`XkbLayout`: What keyboard layout are we using? In our example, `be` (Belgian
    AZERTY).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the keyboard options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can find all the possible models, layouts, and options in `/usr/share/X11/xkb/rules/evdev.lst`.
  prefs: []
  type: TYPE_NORMAL
- en: Finding what graphics card is used on your system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default we have limited support for our graphics card. To enhance our Xorg
    experience, we must find what graphics card we have, and what drivers to install
    for them. With matching drivers for our hardware, we will get far better performance
    than before.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to find which drivers to install is by using the application
    **lspci**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Example output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Now we already know that we have an ATI card. In some cases we will need the
    driver used by the kernel to determine what Xorg driver to use exactly. In this
    example we already know it will be xf86-video-ati.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the graphics driver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we can install the driver we need for our specific system. In this example
    it will be xf86-video-ati, but it can be any of the drivers available (replace
    `ati` with what you need in the following example).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: NVIDIA GUI configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NVIDIA does not really want us to struggle with the configuration of our graphics
    card. So they have provided us with a nice GUI to create a fine-tuned configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to configure your NVIDIA infrastructure is by configuring everything
    with **nvidia-settings**. You can issue this application as root so that you can
    write the global configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: '![NVIDIA GUI configuration](img/9724OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the GUI you also can store a configuration file. Do so by entering `/etc/X11/xorg.conf.d/20-nvidia.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NVIDIA GUI configuration](img/9724OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: AMD also provides us with some helpful tools to make the configuration very
    easy. Let's discuss them now.
  prefs: []
  type: TYPE_NORMAL
- en: Autogenerate an Xorg configuration file with AMD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to do some extended configuration, you can start a new configuration
    file by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new configuration file, `/etc/X11/xorg.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: AMD GUI configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can further fine-tune the working of your ATI hardware by running the AMDCCCLE
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '![AMD GUI configuration](img/9724OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
