- en: Conclusion and Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"... and this is how the app scores according to Google. As you can see, it
    hits every criteria for a Progressive Web App, which will fit well with our business
    goal of a global—"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, yeah," your friend says, waving his hand. "Very cool. Great. Good job.
    But what about the pivot?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"What?" you ask.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Didn''t you get the memo? I sent out a memo to your company email a month
    ago."'
  prefs: []
  type: TYPE_NORMAL
- en: '"I didn''t know I had a company email."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh." Your friend frowns. "I thought you were good with technology."'
  prefs: []
  type: TYPE_NORMAL
- en: '"But I didn''t know-"'
  prefs: []
  type: TYPE_NORMAL
- en: '"No matter. I can summarize. The company has pivoted. Chat is great and all,
    but what if we took it one step further? What if we made it a social network?
    Picture it--the sharability of Facebook with the video streaming of Netflix with
    the ridesharing of Uber, all in one, on the blockchain..."'
  prefs: []
  type: TYPE_NORMAL
- en: Your friend continues to talk as you head for the door.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered every step it takes to make a React application into a PWA but,
    as always, there's more to learn.
  prefs: []
  type: TYPE_NORMAL
- en: This concluding chapter is divided into four sections. First, we'll go over
    a list of useful resources to continue your PWA journey. Then, we'll cover important
    libraries that will help automate certain aspects of PWA development, or take
    your app to the next level. Third, I'll list some of my favorite articles of developing
    Progressive Web Apps. As a last note, we'll take a look at some possible stretch
    goals for you to expand and improve on Chatastrophe, if you accept the challenge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the following resources were discovered through two excellent repositiories:
    **awesome-pwa** ([https://github.com/hemanth/awesome-pwa](https://github.com/hemanth/awesome-pwa)
    ) by GitHub user *Hemanth*, and **awesome-progressive-web-apps** ([https://github.com/TalAter/awesome-progressive-web-apps](https://github.com/TalAter/awesome-progressive-web-apps)
    ) by *TalAter*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning resources to expand your knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case studies of successful PWAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example apps to get inspiration from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Must-read articles about the rise of PWAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools you can use to make building future PWAs easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretch goals for Chatastrophe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning resources are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Progressive Web Apps Documentation**: Google’s official documentation on
    Progressive Web Apps. This should be your first stop to brush on concepts or read
    about best practices. It also provides a summary of the benefits of PWAs and links
    to tools such as Lighthouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/progressive-web-apps/](https://developers.google.com/web/progressive-web-apps/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your First Progressive Web App**: A step-by-step tutorial for building your
    first Progressive Web App, or in your case, your second one. If you want to see
    what building a PWA without React will look like, check out this tutorial. This
    is nice and in depth and covers each concept thoroughly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp](https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offline Web Applications**: A free course created by Google and hosted by
    Udacity, on offline-first web applications. The content is divided into three
    parts: Why Offline First, Service Workers, and Caching. Some parts, such as the
    service worker section, will likely be review, but this course also dives into
    IndexedDB for local storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.udacity.com/course/offline-web-applications--ud899](https://www.udacity.com/course/offline-web-applications--ud899)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Worker Primer**: Google’s introduction to Service Workers. Much of
    the code will look familiar from the service worker section on this book, but
    it is a handy resource nonetheless. Matt Gaunt does a great job of explaining
    the basics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/fundamentals/getting-started/primers/service-workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Worker 101**: A more colorful guide to service workers, this lovely
    resource contains a series of diagrams to take you through the service worker
    life cycle and more. Print this out and stick it on your desk if you’re unsure
    about service workers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/delapuente/service-workers-101](https://github.com/delapuente/service-workers-101)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting Started with Progressive Web Apps**: A blog post by *Addy Osmani*,
    on the Chrome development team (we’ll see him a lot in this resource section).
    This is a great high-level introduction to the benefits of PWA and also introduces
    some boilerplates to get started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://addyosmani.com/blog/getting-started-with-progressive-web-apps/](https://addyosmani.com/blog/getting-started-with-progressive-web-apps/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Push API**: The Mozilla Developer Network guide to the Push API.
    If you want to use push notifications in your PWA without relying on Firebase
    Cloud Notifications, start here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Cache API**: The Mozilla Developer Network guide to the Cache API.
    Not much new here that we didn’t cover in the chapter on caching, but it''s good
    to refer back to, given the Cache API’s "experimental" status. The technology
    can evolve from its current status, so keep this as a reference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Increasing Engagement with App Install Banners**: The how and why of app
    install banners. A thorough FAQ answers any questions you may have. There’s also
    a great tutorial on deferring the prompt, which you can use to cement the concepts
    we covered in our [Chapter 9](part0144.html#49AH00-7dd7c66301294003b85168009fe95fa4),
    *Making Our App Installable with a Manifest*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en](https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Fundamentals- Performance**: Google’s resources on building performative
    web applications. It should be noted that Google has a specific philosophy for
    performance that falls into a PWA model, but is not necessarily the only route
    to better performance. That said, a great (if at times overly technical) resource
    for anyone interested in speed (which you should be!).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/fundamentals/performance/](https://developers.google.com/web/fundamentals/performance/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introducing RAIL: A User-Centric Model For Performance**: This article opens
    with “There’s no shortage of performance advice, is there?”. True words, though
    the advice of *Paul Irish* and *Paul Lewis* is better than most. This article
    introduces RAIL with special attention to why we should follow this metric. The
    answer? The user should come first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/](https://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Progressive Web App Newsletter**: My free newsletter to keep you up to
    date on the world of PWAs, with tutorials, articles, interesting projects, and
    more. If you ever want to get in touch, just click on "Reply" on the next issue.
    I would love to hear from you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pwa-newsletter.com/](http://pwa-newsletter.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Website Performance Optimization**: Another Google and Udacity course, this
    time on optimizing performance. It gives an introduction to DevTools and dives
    into concepts such as the critical rendering path. This course should take you
    about a week to get through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.udacity.com/course/website-performance-optimization--ud884](https://www.udacity.com/course/website-performance-optimization--ud884)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser Rendering Optimization**: Here''s another one! This course is subtitled
    "Building 60 FPS Web Apps", which (as our RAIL metric advises) is a worthy goal.
    It can be considered a more in-depth version of the preceding course. After this
    one, you can call yourself a web performance expert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.udacity.com/course/browser-rendering-optimization--ud860](https://www.udacity.com/course/browser-rendering-optimization--ud860)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Progressive Web Apps with React**: *Addy Osmani* at it again. Here, he takes
    us through building a PWA with React. Note that this tutorial is more an overview
    than a step-by-step guide, but it was an invaluable resource to me in writing
    this book. He also provides many links to additional articles and resources to
    expand your knowledge even further.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '>[https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12](https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Worker Cookbook**: Everything you could ever want to know about service
    workers. Seriously, this is an amazing resource that will make you an expert before
    you know it. If you are excited about this new technology and want to dive deeper,
    here’s your chance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://serviceworke.rs/](https://serviceworke.rs/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrofit Your Website as a PWA**: Most companies won''t be looking at building
    a PWA from scratch anytime soon. Instead, they’ll want to add PWA features to
    their existing site or app. Here''s a great starter guide for doing so, with plenty
    of screenshots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.sitepoint.com/retrofit-your-website-as-a-progressive-web-app/](https://www.sitepoint.com/retrofit-your-website-as-a-progressive-web-app/)'
  prefs: []
  type: TYPE_NORMAL
- en: Case studies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you need to convince a boss to try a Progressive Web Application? Check out
    the following case studies from big companies that embraced the PWA world (Chatastrophe
    Inc. removed from list following bankruptcy).
  prefs: []
  type: TYPE_NORMAL
- en: Building the Google I/O 2016 Progressive Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google I/O 2016 app (nicknamed IOWA) was built with Firebase and Polymer.
    This is how they did it. A much more technical guide that introduces several advanced
    concepts; this is a great way to peek into a next-level PWA.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/iowa2016](https://developers.google.com/web/showcase/2016/iowa2016)'
  prefs: []
  type: TYPE_NORMAL
- en: AliExpress case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AliExpress is the most visited e-commerce site in Russia. By switching to a
    PWA, they increased conversions from new users by 104%. They also increased time
    spent on the site by 74%. Those are big numbers, and make a compelling business
    case for PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/aliexpress](https://developers.google.com/web/showcase/2016/aliexpress)'
  prefs: []
  type: TYPE_NORMAL
- en: eXtra Electronics case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How’s this for a business improvement--100% more sales. That's what eXtra Electronics
    achieved from users arriving via web push notifications. In fact, web push notifications
    are now eXtra's biggest retention channel, beating out email. Push harder!
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/extra](https://developers.google.com/web/showcase/2016/extra)'
  prefs: []
  type: TYPE_NORMAL
- en: Jumia case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another hip hip hooray for web push notifications. Jumia increased conversions
    by 9X. They used to send an email to remind a customer about items left in their
    cart, but open rates were low. Enter notifications.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/jumia](https://developers.google.com/web/showcase/2016/jumia)'
  prefs: []
  type: TYPE_NORMAL
- en: Konga case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your users care about their data limits; don’t make them suffer. Konga reduced
    data usage by 92%, comparing their native app to their PWA. In the end, users
    needed 84% less data to complete the first transaction. Consider the barrier for
    entry lowered.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/konga](https://developers.google.com/web/showcase/2016/konga)'
  prefs: []
  type: TYPE_NORMAL
- en: SUUMO case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the addition of service workers and some other tweaks, the SUUMO team reduced
    load time by 75%. They also cashed in on the push notifications hype train, with
    a 31% open rate. The story behind the decision to try a PWA may sound familiar;
    the mobile experience was subpar, so the company pushed users toward the native
    app. Getting them to download the native app was a struggle, though, so they tried
    a PWA. Good learning--if your problem is retention, native apps are probably not
    the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/web/showcase/2016/suumo](https://developers.google.com/web/showcase/2016/suumo)'
  prefs: []
  type: TYPE_NORMAL
- en: Example applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Want to see what a real live PWA looks like? Check out any of the following.
    A few also contain links to GitHub for you to view the source code.
  prefs: []
  type: TYPE_NORMAL
- en: PWA.rocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A collection of Progressive Web Apps and source for most of the following. If
    you ever need inspiration, make this your first stop. I also encourage you to
    add any PWAs you add to the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pwa.rocks/](https://pwa.rocks/)'
  prefs: []
  type: TYPE_NORMAL
- en: Flipboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest players in the PWA space, Flipboard's PWA is slim, fast,
    and beautiful. Flipboard has a full-featured native application, but also a PWA
    in order to hedge their bets in terms of user preference. If the content-heavy
    Flipboard can manage the performance guidelines of PWAs, the sky is the limit.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://flipboard.com/](https://flipboard.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: React Hacker News
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ever-popular developer project: a clone of Hacker News, here using React.
    As an open source project, ReactHN is a great way to look into how to manage a
    complex frontend library with Progressive Web App fundamentals. Our good friend
    *Addy Osmani* is at work again. ReactHN is thus an inside look at how a Chrome
    developer will structure a PWA using a JavaScript-heavy library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://react-hn.appspot.com](https://react-hn.appspot.com/#/?_k=5kbr5v)/'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A nice and slim example of a Progressive Web App, this one is worth looking
    at for beginners. You can find a link to the GitHub directly on the site and then
    poke around the structure of *Simon Evans* app. On the desktop, there's a clear
    distinction of the application shell from the content, which makes the concept
    particularly intuitive. Best of all, the app boasts a score of 94 on Lighthouse.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://sii.im/playground/notes/](https://sii.im/playground/notes/)'
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps you've heard of this one.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter is the perfect example of a truly global application. Their application
    needs to be accessible by users on all continents, in all conditions (just look
    at the role Twitter played in organizing revolts in the Arab Spring).
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve global accessibility, the Twitter team managed to slim down their
    application to 1 MB and added all the PWA goodness discussed in this article:
    home screen installation, push notifications, and offline access.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://lite.twitter.com/](https://lite.twitter.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 2048 Puzzle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PWA implementation by *Gabriele Cirulli* of the 2048 puzzle game originally
    created by Veewo Studio. It only works on mobile/touchscreen devices, but is an
    example of a game app being made into a PWA that is fast, efficient, and installable.
    Beware--for the uninitiated, the game is highly addictive.
  prefs: []
  type: TYPE_NORMAL
- en: The open source is available on GitHub, so you can take a look at the structure
    (particularly of the JavaScript, which requires ten files to make the game run).
    The dirty secret of this app, however, is that the creator never actually beat
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://2048-opera-pwa.surge.sh/](https://2048-opera-pwa.surge.sh/)'
  prefs: []
  type: TYPE_NORMAL
- en: Articles to read
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following articles cover manifestos, tutorials, and lists, all about the
    rise of PWAs and the best ways to build them.
  prefs: []
  type: TYPE_NORMAL
- en: Native apps are doomed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript guru *Eric Elliott* impassioned declaration in favor of Progressive
    Web Apps. It's a deep dive into the costs of native applications and the benefit
    of PWAs. It's good material to convince bosses and coworkers who are debating
    building for native. The follow-up article is also excellent.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0](https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0)'
  prefs: []
  type: TYPE_NORMAL
- en: A BIG list of Progressive Web App tips & tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A grab bag of assorted PWA tips from *Dean Hume*. Check it out for fun stuff,
    such as offline Google Analytics and testing service workers (more on that as
    we go ahead).
  prefs: []
  type: TYPE_NORMAL
- en: '[https://deanhume.com/Home/BlogPost/a-big-list-of-progressive-web-app-tips-and-tricks/10160](https://deanhume.com/Home/BlogPost/a-big-list-of-progressive-web-app-tips-and-tricks/10160)'
  prefs: []
  type: TYPE_NORMAL
- en: Testing service workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers are the heart and soul of Progressive Web App functionality.
    We want to ensure that they're working right. How can we unit test them?
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/dev-channel/testing-service-workers-318d7b016b19](https://medium.com/dev-channel/testing-service-workers-318d7b016b19)'
  prefs: []
  type: TYPE_NORMAL
- en: Twitter Lite and High Performance React Progressive Web Apps at Scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the Twitter Lite engineers dives into their build process, challenges,
    and gives recommendations after developing the PWA version of Twitter. As close
    to a how-to for deploying large-scale PWA's as you will get.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3](https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3)'
  prefs: []
  type: TYPE_NORMAL
- en: Why are App Install Banners Still a thing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An excellent summary of the cost of sticking to traditional apps when you're
    not a market leader and how Progressive Web Apps aim to solve this problem. Read
    to the end for some statistics from companies that switched from native apps to
    PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/dev-channel/why-are-app-install-banners-still-a-thing-18f3952d349a](https://medium.com/dev-channel/why-are-app-install-banners-still-a-thing-18f3952d349a)'
  prefs: []
  type: TYPE_NORMAL
- en: A Progressive Web Application with Vue JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Charles Bochet* combines VueJS, Webpack, and elements of Material Design to
    build a PWA. A great chance to try out PWA concepts in a new library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.sicara.com/a-progressive-web-application-with-vue-js-webpack-material-design-part-3-service-workers-offline-ed3184264fd1](https://blog.sicara.com/a-progressive-web-application-with-vue-js-webpack-material-design-part-3-service-workers-offline-ed3184264fd1)'
  prefs: []
  type: TYPE_NORMAL
- en: Transforming an existing Angular application into a Progressive Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does it take to transform a regular Angular app into a functional Progressive
    Web App? *Coskun Deniz* takes us through the steps, one by one.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@cdeniz/transforming-an-existing-angular-application-into-a-progressive-web-app-d48869ba391f](https://medium.com/@cdeniz/transforming-an-existing-angular-application-into-a-progressive-web-app-d48869ba391f)'
  prefs: []
  type: TYPE_NORMAL
- en: Progressing the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Literally any website can ,  and should , be a progressive web app."'
  prefs: []
  type: TYPE_NORMAL
- en: '*Jeremy Keith* gives the main argument in his article as "Progressing the Web,"
    and he''s right. Making your app (or your static site) progressive is about offering
    an enhanced experienced for all your users. A good read for anyone tentative to
    jump into the world of PWAs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@adactio/progressing-the-web-9ab55f63f9fa](https://medium.com/@adactio/progressing-the-web-9ab55f63f9fa)'
  prefs: []
  type: TYPE_NORMAL
- en: Designed Degradations - UX Patterns for Hostile Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How a Chipotle restaurant can help improve your website. This article isn't
    about PWAs in particular, but fits right in with the idea of progressive enhancement,
    the concept that your website should work for everyone and then get better and
    better depending on their conditions (network speed, browser modernity, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: '[https://uxdesign.cc/designed-degradations-ux-patterns-for-hostile-environments-7f308d819e50](https://uxdesign.cc/designed-degradations-ux-patterns-for-hostile-environments-7f308d819e50)'
  prefs: []
  type: TYPE_NORMAL
- en: Instant Loading Web Apps With An Application Shell Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An in-depth explanation of the app shell pattern. A must-read if you're in the
    development phase of a PWA.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/google-developers/instant-loading-web-apps-with-an-application-shell-architecture-7c0c2f10c73](https://medium.com/google-developers/instant-loading-web-apps-with-an-application-shell-architecture-7c0c2f10c73)'
  prefs: []
  type: TYPE_NORMAL
- en: Trick users into thinking your site's faster than it is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fantastic read that starts from the user's perspective (perceived time versus
    actual time) and moves into an explanation of the basic techniques you can leverage
    to decrease the perceived load time of your app.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.creativebloq.com/features/trick-users-into-thinking-your-sites-faster-than-it-is](http://www.creativebloq.com/features/trick-users-into-thinking-your-sites-faster-than-it-is)'
  prefs: []
  type: TYPE_NORMAL
- en: Apple’s refusal to support Progressive Web Apps is a detriment to the future
    of the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A refreshingly honest look at what it's like to develop a Progressive Web Application
    at this point in time and the struggles with iOS that come along with it. Read
    this if you're considering a production PWA.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://m.phillydevshop.com/apples-refusal-to-support-progressive-web-apps-is-a-serious-detriment-to-future-of-the-web-e81b2be29676](https://m.phillydevshop.com/apples-refusal-to-support-progressive-web-apps-is-a-serious-detriment-to-future-of-the-web-e81b2be29676)'
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you'll be building (many) more Progressive Web Apps in the future.
    The following tools will make that process easier and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Workbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workbox is "a collection of JavaScript libraries for Progressive Web Apps."
    More specifically, it "makes it easy to create optimal service worker code" and
    maintain your caches in the most efficient way. It's easy to integrate into Webpack.
    Unfortunately, the documentation is not great and customization can be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Still, Workbox holds great promise as a way to automate aspects of development
    and hide away complexity that may intimidate new developers. The challenge will
    be not replacing that complexity with more complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/GoogleChrome/workbox](https://github.com/GoogleChrome/workbox)'
  prefs: []
  type: TYPE_NORMAL
- en: Sw-precache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A subset of Workbox, sw-precache is worth discussing on its own. It can be used
    to automatically generate a service worker to pre-cache your app’s assets. All
    you have to do is incorporate it into your build process (there’s a Webpack plugin)
    and register the resulting service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/GoogleChrome/sw-precache](https://github.com/GoogleChrome/sw-precache)'
  prefs: []
  type: TYPE_NORMAL
- en: Sw-toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not for beginners! Rather than a generation tool, such as the preceding one,
    sw-toolbox is a collection of helper methods. To add to the confusion, there’s
    also Workbox by the Google Chrome team, which takes a more modular approach. My
    advice to you is to get comfortable interacting with service workers directly
    and then, if you have a specific problem that can be streamlined by one of these
    tools, go ahead and adopt it. However, don’t go looking for a tool that solves
    a problem you don’t yet have, but like I said, it’s exciting to see tools emerge
    to help manage the complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/GoogleChrome/sw-toolbox](https://github.com/GoogleChrome/sw-toolbox)'
  prefs: []
  type: TYPE_NORMAL
- en: Offline-plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another plugin to make your app offline-capable. This one uses service workers,
    but falls back to the AppCache API for better support. Implemention looks simple
    and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NekR/offline-plugin](https://github.com/NekR/offline-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: Manifest-json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tool to automatically generate a web app manifest from your command line.
    I mean, I thought my chapter on manifests was pretty good, but if you prefer a
    question-and-answer approach, that’s fine too, I guess.
  prefs: []
  type: TYPE_NORMAL
- en: Joking aside, this tool may come in handy as Web App Manifests evolve and take
    on more properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/manifest-json](https://www.npmjs.com/package/manifest-json)'
  prefs: []
  type: TYPE_NORMAL
- en: Serviceworker-rails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have a Ruby on Rails project? Want your asset pipeline to use a service worker
    to cache assets? Use this gem. The documentation is an interesting overview on
    how Rails handles caching and the challenges of implementing a service worker
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/rossta/serviceworker-rails](https://github.com/rossta/serviceworker-rails)'
  prefs: []
  type: TYPE_NORMAL
- en: Sw-offline-google-analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part of the aforementioned Workbox, but with a specific use for Google Analytics
    with an offline-capable app. Use this package to send offline requests to Google
    Analytics as soon as a connection becomes available.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/sw-offline-google-analytics](https://www.npmjs.com/package/sw-offline-google-analytics)'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Service Workers (DSW)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure your service worker with a JSON file; it's a very interesting approach
    to service workers, with support for key features such as push notifications (though
    only with Google Cloud Messaging).
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/naschq/dsw](https://github.com/naschq/dsw)'
  prefs: []
  type: TYPE_NORMAL
- en: UpUp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Add two scripts to your site and have it work offline. UpUp is a beautiful implementation
    of service worker technology for simple use cases. It's not intended for advanced
    users, of course, but a great way to introduce service worker technology for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.talater.com/upup/](https://www.talater.com/upup/)'
  prefs: []
  type: TYPE_NORMAL
- en: Generator-pwa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generate a Progressive Web App file structure from your command line! This is
    still a work in progress.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/hemanth/generator-pwa](https://github.com/hemanth/generator-pwa)'
  prefs: []
  type: TYPE_NORMAL
- en: Progressive-webapp-config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another boilerplate from (you guessed it) Addy Osmani. If you’re ever building
    a non-React PWA, refer to this for project structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PolymerLabs/progressive-webapp-config](https://github.com/PolymerLabs/progressive-webapp-config)'
  prefs: []
  type: TYPE_NORMAL
- en: Stretch goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chatastrophe is up and running, but it’s still quite basic. We'll now discuss
    a few challenges, which you should choose to accept, to stretch your skills and
    improve our app.
  prefs: []
  type: TYPE_NORMAL
- en: Switch to Preact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preact is a 3 KB version of the React library. It has a similar API and functionality,
    without the bulk. Using it instead of React will improve our app’s performance.
    If you do go down this route, look into Webpack aliases as a way of streamlining
    the conversion.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/developit/preact](https://github.com/developit/preact)'
  prefs: []
  type: TYPE_NORMAL
- en: Show online status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tell other users when another user is online. The UI is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: Show when typing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common feature in chat rooms, it is used to give your users an indication
    that someone else is typing. With Chatastrophe, the challenge will be representing
    multiple users typing at once.
  prefs: []
  type: TYPE_NORMAL
- en: Include file upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: People want to share with their friends (probably memes). Give them a way to
    do so with a file uploading system.
  prefs: []
  type: TYPE_NORMAL
- en: Create chat rooms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your friend had a vision of a truly global chat room; that vision was crap.
    Let’s go ahead and make Chatastrophe much more useable by allowing user-created
    chat rooms. Is there a way to allow the user to navigate between rooms and read
    messages even while offline?
  prefs: []
  type: TYPE_NORMAL
- en: Interactive without React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the issues holding back our performance was needing React to boot up
    before showing the user an interactive site. What if we gave them a purely HTML
    interactive shell, and then swapped in the React version when it loaded? The challenge
    here will be avoiding overwriting user input, but you can win some huge performance
    points.
  prefs: []
  type: TYPE_NORMAL
- en: Building your own backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We relied on Firebase for this tutorial in order to keep the attention focused
    on the frontend, on the React development. However, there’s a huge learning opportunity
    in designing your own backend API for Chatastrophe. The biggest benefit is the
    possibility of server rendering the pages for extra performance.
  prefs: []
  type: TYPE_NORMAL
- en: Closing words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming is difficult. Learning is difficult. Programming in experimental
    technologies while learning entirely new concepts is especially difficult. If
    you completed the tutorial in this book--or even only certain sections of it--you
    should be proud of the accomplishment.
  prefs: []
  type: TYPE_NORMAL
- en: I sincerely hope what you learned here will be useful for you in your careers.
    This book has been an exciting journey for me as well. When I started, I was excited
    about the world of Progressive Web Apps, but by no means an expert. Now, having
    dived deep into the progressive web, I'm more excited than ever about the possibilities.
    I hope you share the same feeling.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever want to get in touch, I would love to hear from you--feedback, criticism,
    questions, or simply conversation. You can find me on Twitter with the handle
    `@scottdomes`, on LinkedIn, on Medium as `@scottdomes` again, or on my site, [http://scottdomes.com](http://scottdomes.com),
    where I publish web development tutorials on a wide variety of topics.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope the mentioned resources will be helpful in continuing your PWA journey.
    PWAs are an exciting corner of web development that is moving fast; keeping an
    eye on the preceding authors and creators will help you keep up with the pace
    of change.
  prefs: []
  type: TYPE_NORMAL
- en: 'We covered a lot of ground in this book: from nothing to a React app and from
    a React app to a Progressive Web App. We built an entire application from the
    ground up and deployed it so that the world could see it. We also made it fast
    and responsive and able to handle all types of connections.'
  prefs: []
  type: TYPE_NORMAL
- en: I hope you're proud of the final application and I hope this book has been useful
    to you. Good luck with all your PWAs in the future and let's keep progressing
    the web.
  prefs: []
  type: TYPE_NORMAL
