- en: Cyber Threat Intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'o far, this book has focused on the offensive side of cyber security. We have
    primarily been looking at using Python in the penetration testing domain. In this
    chapter, we will try to understand how Python can be used on the defensive side
    of cybersecurity. When we talk of defensive cyber security, what comes to mind
    is monitoring. **S****ecurity operations center** is a term commonly used for
    the monitoring team, which is responsible for the continuous monitoring of an
    organization''s security landscape. This team makes use of a tool called **Security
    Information and Event Management** (**SIEM**), which acts as an aggregator to
    collect logs from various applications and devices that need to be monitored.
    On top of aggregation, the SIEM has a rule engine in which various rules are configured
    for anomaly detection. The rules vary from organization to organization, depending
    on the business context and the logs to monitor. Nowadays, we often have many
    SIEM solutions built on top of a big data cluster that uses Machine Learning algorithms
    and are driven by AI models in conjunction with a rule engine, which makes monitoring
    more effective. So, where does cyber threat intelligence fit in all this? We will
    learn about this, along with the following topics, in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Cyber threat intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools and API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat-scoring: giving a score to each IOC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STIX and TAXII and external lookups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to cyber threat intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cyber threat intelligence** is the procedure of processing raw-gathered information
    and transforming it into actionable intelligence. Broadly, threat intelligence
    is a process that involves manual intelligence gathering as well as the use of
    automated tools to enhance the security landscape of an organization. Let''s try
    to understand both automated and manual threat intelligence in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual threat intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Manual threat intelligence** is the process of gathering intelligence manually
    and transforming it into actionable intelligence. Let''s take an example of manual
    threat intelligence that is organization specific.'
  prefs: []
  type: TYPE_NORMAL
- en: An analyst working in the cybersecurity team for organization 'X' is well aware
    of the internals of the organization in terms of the top management, the key processes,
    and the key applications. One of this employee's responsibilities, being a part
    of the cyber security and intelligence team, would be to surf the deep/dark web
    and look for potential threats that may target the organization. The range of
    threats will always vary. It could include leaked emails or traces on the dark
    web that could alarm the organization. Another threat might be a propagating ransomware
    targeting a specific industry such as the telecom industry. If the employee detects
    this, the organization gets an early heads-up and can strengthen its defense mechanisms
    against the ransomware.
  prefs: []
  type: TYPE_NORMAL
- en: Another example of manual threat intelligence is gathering information related
    to insider threats. For an organization that has a huge employee base and a large
    number of processes, it's always difficult to monitor each and every person. SIEMs
    often struggle to monitor behavioral threats. Let's say that there is a server
    X (a web server) that usually communicates with servers Y (the database) and Z
    (the application) on a daily basis. However, a few traces from the SIEM were observed
    in which server X is communicating with a server A over the SMB port `445`. This
    behavior is strange and suspicious. Now, to baseline the day-to-day communication
    across various servers and to create a rule to detect anomalies would be too difficult
    for a SIEM, as there is usually a huge number of systems within an organization.
    While there are a few solutions emerging nowadays that are built on top of the
    AI engine and big data to do this kind of anomaly detection, manual threat hunting
    currently still works best. This process of manually identifying anomalies within
    an organization is called **insider threat hunting**.
  prefs: []
  type: TYPE_NORMAL
- en: Automated threat intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have discussed, **threat intelligence** is an advanced process that enables
    an organization to constantly gather valuable cyber threat insights based on the
    analysis of contextual and situational risks. It can be tailored to the organization's
    specific threat landscape. In simple terms, threat intelligence is the output
    of analysis based on the identification, collection, and enrichment of relevant
    cyber threat data and information. The cyber threat data often includes Indicators
    of Compromise (IOCs), which are malicious IPs, URLs, file hashes, domains, email
    addresses, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: This process of gathering information and transforming it into actionable intelligence
    to be consumed by security products such as SIEM tools, IDS/IPS systems, firewall,
    proxy servers, WAF, and other security products is what we will focus on in this
    chapter. This process of gathering and contextualizing information can be done
    manually, as described previously, and it can also be automated. Automation can
    further be divided into segregated automation (at script level), or automation
    using a central orchestration engine. We will consider the advantages and disadvantages
    of both.
  prefs: []
  type: TYPE_NORMAL
- en: There are various security sites and communities that share cyber intelligence
    data openly, as a collaborative measure to fight against hacktivists and to safeguard
    organizations against emerging threats. These communities often use what are called
    threat-sharing feeds, or threat feeds. The data that is shared contains malicious
    URLs, malicious IPs, malicious files, signatures of malicious files, malicious
    domains, malicious C&C servers, and so on. All the data shared has been reported
    by an organization to have done something suspicious. This could be an SSH scanning
    activity, a horizontal scan, a phishing website, a brute-forcing IP, a malware
    signature, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: All information that is collected is shared with the SIEM and a rule is created
    on the SIEM to detect any communication within the organization against the IOCs
    tagged as malicious. If the SIEM indicates that there has been communication between
    an internal server or an asset with the IOCs gathered, it would alert the organization,
    which can then take appropriate preventive actions. While this process might seem
    straightforward, it is not actually as simple as it seems. The major challenge
    the industry faces is the quality of the IOCs. It should be noted that millions
    of IOCs have been collected. The better-quality IOCs an organization has, the
    better the detection. However, having millions of IOCs doesn't improve the detection
    by default. We can't just collect IOCs in an automated way and feed them to the
    SIEM. The IOCs that are collected from various sources in different formats such
    as JSON, CSV, STIX, XML, txt, and database files come with lots of noise. This
    means that domains and IPs that are not malicious are also flagged. If this noisy
    data is given directly to the SIEM, and rules are created on top of it, this will
    result in lots and lots of false positive alerts, thereby increasing the effort
    required by the analyst.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to remove false positives and enhance the
    quality of collected IOCs. We will write a custom Python algorithm to enhance
    the quality of the IOCs and associate a threat score to each of the IOCs collected.
    The threat scores will be on a scale of 1 to 10\. Scores at the higher end indicate
    a greater potential severity, while scores at the lower end are likely to be less
    severe This will allow us to share only quality IOCs with the SIEM, which would
    result in a better true positive rate.
  prefs: []
  type: TYPE_NORMAL
- en: Cyber threat intelligence platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed earlier, the process of intelligence gathering can be automated
    either with the help of different scripts that we can combine, or to have a central
    platform in place capable for both collecting and sharing cyber threat intelligence.
    Central platforms that have this capability are called cyber threat intelligence
    platforms. Let''s try to understand the process of semi-automation and complete
    automation of cyber threat intelligence gathering:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram represents the problem statement that a threat intelligence
    platform tries to solve. In a large organization, the SIEM tool generates 100–100,000
    events per minute, and the rule engine triggers 20–50 alerts in an hour. The analyst
    needs to validate each alert manually and check if the IP or domain in question
    is legitimate or not. The analyst has to use various security lookup sites, manually
    interpret them, and make a decision as to whether the alert qualifies to be investigated
    further or whether it''s a false positive. This is where a lot of human effort
    goes in and where we require automated cyber threat intelligence:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/abff1fea-c6c6-4c3e-8996-5ccaa5d16960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The various sources from which intelligence data is gathered include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3a94c6e2-38e5-4fef-87e0-85472ea33968.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The capabilities of a fully-fledged threat intelligence platform include the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00538934-7b26-490c-bf42-af07ecf6437f.png)'
  prefs: []
  type: TYPE_IMG
- en: Tools and API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we talk of cyber threat intelligence platform, there are many commercial
    and open source tools that are available to gather, contextualize, and share intelligence.
    Some of the most well-known commercial tools available include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: IBM X-Force Exchange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomali ThreatStream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Palo Alto Networks AutoFocus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSA NetWitness Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LogRhythm Threat Lifecycle Management (TLM) Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FireEye iSIGHT Threat Intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LookingGlass Cyber Solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AlienVault Unified Security Management (USM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The best-known open source tools available include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: MISP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenIOC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenTAXII
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yeti
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AbuseHelper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqhunter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sqhunter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the previously mentioned open source tools are very good, and have different
    capabilities to offer. I personally find that **Malware Information Sharing Platform**
    (**MISP**) is very useful both in terms of its functionality and its features.
    What makes it my favorite is its extensible architecture and its API, which allows
    it to collaborate with other programming languages. This is the open source threat
    intelligence platform that we will be focusing on in this chapter. Our objective
    is to understand what MISP offers out of the box and what additional features
    we can add in order to get a quality IOC feed to the SIEM tool. MISP exposes a
    wonderful `pymisp` API to consume the collected IOCs from Python.
  prefs: []
  type: TYPE_NORMAL
- en: MISP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MISP** is a framework written in cakePHP, which has brilliant community support.
    The objective of the framework is to collect threat intelligence form various
    feed sources that publish malicious content and store it in the backend repository.
    The same content can be retrieved for analysis later on and shared with security
    tools such as SIEM, Firewall, and IDS/IPS systems. The tool has got lots of features,
    which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a central parser, which is capable of parsing all kinds of IOC feed files
    such as free text, CSV, TSV, JSON, and XML. This is a big advantage, because it
    means we don't have to worry about the format in which the intelligence is supplied
    from the source feed. Different feed sources provide intelligence in different
    formats. The central parser parses the IOC information and transforms it in a
    consistent format to match the backend schema that MISP supports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an API that gives us the flexibility to share the intelligence directly
    with the SIEM tools (note that this is a disadvantage, however, as MISP doesn't
    yet have false positive elimination capability).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the capability to integrate with other MISP instances and have a server
    to serve threat sharing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a role-based access to the web interface, which allows analysts to understand
    and co-relate the IOC gathered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a queue-based backend worker system, in which a collection of feeds can
    be scheduled to any time/hour of the day. We can also change how often this should
    be repeated. The backend worker and queuing system is based upon Redis and CakeResque.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only is MISP very good at collecting threat information, it's also very
    good at correlating it and sharing the information in multiple formats such as
    CSV, STIX, JSON, Text, XML, and Bro-IDS signatures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete list of features offered by MISP can be found at the official
    repository: [https://github.com/MISP/MISP](https://github.com/MISP/MISP).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MISP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation instructions can be found at the previously mentioned GitHub
    repository. We have tested the code and used it on CentOS 7\. Perform the following
    instructions to set up MISP on CentOS 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]bash'
  prefs: []
  type: TYPE_NORMAL
- en: CentOS Specific
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RUN_PHP='/usr/bin/scl enable rh-php71 '
  prefs: []
  type: TYPE_NORMAL
- en: RUN_PYTHON='/usr/bin/scl enable rh-python36 '
  prefs: []
  type: TYPE_NORMAL
- en: PHP_INI=/etc/opt/rh/rh-php71/php.ini
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install a minimal CentOS 7.x system with the software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]bash'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you set your hostname CORRECTLY vs. like an brute (manually in /etc/hostname)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'sudo hostnamectl set-hostname misp.local # or whatever you want it to be'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure your system is up2date:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum update -y
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the system is installed, you can perform the following steps as root or
    with `sudo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]bash'
  prefs: []
  type: TYPE_NORMAL
- en: We need some packages from the Extra Packages for Enterprise Linux repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install epel-release -y
  prefs: []
  type: TYPE_NORMAL
- en: Since MISP 2.4 PHP 5.5 is a minimal requirement, so we need a newer version
    than CentOS base provides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software Collections is a way do to this, see https://wiki.centos.org/AdditionalResources/Repositories/SCL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install centos-release-scl -y
  prefs: []
  type: TYPE_NORMAL
- en: Install vim (optional)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install vim -y
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the dependencies:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install gcc git httpd zip redis mariadb mariadb-server python-devel
    python-pip python-zmq libxslt-devel zlib-devel ssdeep-devel -y
  prefs: []
  type: TYPE_NORMAL
- en: Install PHP 7.1 from SCL, see https://www.softwarecollections.org/en/scls/rhscl/rh-php71/
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install rh-php71 rh-php71-php-fpm rh-php71-php-devel rh-php71-php-mysqlnd
    rh-php71-php-mbstring rh-php71-php-xml rh-php71-php-bcmath rh-php71-php-opcache
    -y
  prefs: []
  type: TYPE_NORMAL
- en: Install Python 3.6 from SCL, see
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: https://www.softwarecollections.org/en/scls/rhscl/rh-python36/
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install rh-python36 -y
  prefs: []
  type: TYPE_NORMAL
- en: rh-php71-php only provided mod_ssl mod_php for httpd24-httpd from SCL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if we want to use httpd from CentOS base we can use rh-php71-php-fpm instead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo systemctl enable rh-php71-php-fpm.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl start  rh-php71-php-fpm.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo $RUN_PHP "pear channel-update pear.php.net"
  prefs: []
  type: TYPE_NORMAL
- en: 'sudo $RUN_PHP "pear install Crypt_GPG"    # we need version >1.3.0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]bash'
  prefs: []
  type: TYPE_NORMAL
- en: GPG needs lots of entropy, haveged provides entropy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install haveged -y
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl enable haveged.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl start  haveged.service
  prefs: []
  type: TYPE_NORMAL
- en: Enable and start redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo systemctl enable redis.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl start  redis.service
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]bash'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: sudo mkdir $PATH_TO_MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache $PATH_TO_MISP
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache git clone https://github.com/MISP/MISP.git
  prefs: []
  type: TYPE_NORMAL
- en: cd $PATH_TO_MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache git checkout tags/$(git describe --tags `git rev-list --tags
    --max-count=1`)
  prefs: []
  type: TYPE_NORMAL
- en: if the last shortcut doesn't work, specify the latest version manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'example: git checkout tags/v2.4.XY.The following is the one tested : (git checkout
    tags/v2.4.79)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: the message regarding a "detached HEAD state" is expected behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (you only have to create a new branch, if you want to change stuff and do a
    pull request for example)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fetch submodules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache git submodule update --init --recursive
  prefs: []
  type: TYPE_NORMAL
- en: Make git ignore filesystem permission differences for submodules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache git submodule foreach --recursive git config core.filemode false
  prefs: []
  type: TYPE_NORMAL
- en: Create a python3 virtualenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $RUN_PYTHON "virtualenv -p python3 $PATH_TO_MISP/venv"
  prefs: []
  type: TYPE_NORMAL
- en: sudo mkdir /usr/share/httpd/.cache
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /usr/share/httpd/.cache
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U pip setuptools
  prefs: []
  type: TYPE_NORMAL
- en: 'install Mitre''s STIX and its dependencies by running the following commands:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install python-importlib python-lxml python-dateutil python-six -y
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app/files/scripts
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache git clone https://github.com/CybOXProject/python-cybox.git
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache git clone https://github.com/STIXProject/python-stix.git
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app/files/scripts/python-cybox
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: UMASK=$(umask)
  prefs: []
  type: TYPE_NORMAL
- en: umask 0022
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app/files/scripts/python-stix
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  prefs: []
  type: TYPE_NORMAL
- en: install maec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U maec
  prefs: []
  type: TYPE_NORMAL
- en: install zmq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U zmq
  prefs: []
  type: TYPE_NORMAL
- en: install redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U redis
  prefs: []
  type: TYPE_NORMAL
- en: install magic, lief, pydeep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -U python-magic lief git+https://github.com/kbandla/pydeep.git
  prefs: []
  type: TYPE_NORMAL
- en: 'install mixbox to accommodate the new STIX dependencies:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app/files/scripts/
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache git clone https://github.com/CybOXProject/mixbox.git
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app/files/scripts/mixbox
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  prefs: []
  type: TYPE_NORMAL
- en: install PyMISP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: cd /var/www/MISP/PyMISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install enum34
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  prefs: []
  type: TYPE_NORMAL
- en: Enable python3 for php-fpm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: echo 'source scl_source enable rh-python36' | sudo tee -a /etc/opt/rh/rh-php71/sysconfig/php-fpm
  prefs: []
  type: TYPE_NORMAL
- en: sudo sed -i.org -e 's/^;\(clear_env = no\)/\1/' /etc/opt/rh/rh-php71/php-fpm.d/www.conf
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl restart rh-php71-php-fpm.service
  prefs: []
  type: TYPE_NORMAL
- en: umask $UMASK
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Install CakeResque along with its dependencies if you intend to use the built-in
    background jobs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]bash'
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo mkdir /usr/share/httpd/.composer
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /usr/share/httpd/.composer
  prefs: []
  type: TYPE_NORMAL
- en: cd /var/www/MISP/app
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $RUN_PHP "php composer.phar require kamisama/cake-resque:4.1.2"
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $RUN_PHP "php composer.phar config vendor-dir Vendor"
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $RUN_PHP "php composer.phar install"
  prefs: []
  type: TYPE_NORMAL
- en: CakeResque normally uses phpredis to connect to redis, but it has a (buggy)
    fallback connector through Redisent. It is highly advised to install phpredis
    using "yum install php-redis"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo $RUN_PHP "pecl install redis"
  prefs: []
  type: TYPE_NORMAL
- en: echo "extension=redis.so" |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/redis.ini
  prefs: []
  type: TYPE_NORMAL
- en: sudo ln -s ../php-fpm.d/redis.ini /etc/opt/rh/rh-php71/php.d/99-redis.ini
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl restart rh-php71-php-fpm.service
  prefs: []
  type: TYPE_NORMAL
- en: If you have not yet set a timezone in php.ini
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: echo 'date.timezone = "Europe/Luxembourg"' |sudo tee /etc/opt/rh/rh-php71/php-fpm.d/timezone.ini
  prefs: []
  type: TYPE_NORMAL
- en: sudo ln -s ../php-fpm.d/timezone.ini /etc/opt/rh/rh-php71/php.d/99-timezone.ini
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended: Change some PHP settings in /etc/opt/rh/rh-php71/php.ini'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: max_execution_time = 300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: memory_limit = 512M
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: upload_max_filesize = 50M
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: post_max_size = 50M
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: for key in upload_max_filesize post_max_size max_execution_time max_input_time
    memory_limit
  prefs: []
  type: TYPE_NORMAL
- en: do
  prefs: []
  type: TYPE_NORMAL
- en: sudo sed -i "s/^\($key\).*/\1 = $(eval echo \${$key})/" $PHP_INI
  prefs: []
  type: TYPE_NORMAL
- en: done
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl restart rh-php71-php-fpm.service
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: sudo cp -fa /var/www/MISP/INSTALL/setup/config.php /var/www/MISP/app/Plugin/CakeResque/Config/config.php
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the permissions as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]bash'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the permissions are set correctly using the following commands as
    root:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo chown -R root:apache /var/www/MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo find /var/www/MISP -type d -exec chmod g=rx {} \;
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod -R g+r,o= /var/www/MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod -R 750 /var/www/MISP
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod -R g+ws /var/www/MISP/app/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod -R g+ws /var/www/MISP/app/files
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod -R g+ws /var/www/MISP/app/files/scripts/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /var/www/MISP/app/files
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /var/www/MISP/app/files/terms
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /var/www/MISP/app/files/scripts/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /var/www/MISP/app/Plugin/CakeResque/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP/app/Config
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP/app/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/orgs
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP/app/webroot/img/custom
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a database and user as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]bash'
  prefs: []
  type: TYPE_NORMAL
- en: Enable, start and secure your mysql database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo systemctl enable mariadb.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl start mariadb.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum install expect -y
  prefs: []
  type: TYPE_NORMAL
- en: Add your credentials if needed, if sudo has NOPASS, comment out the relevant
    lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#pw="Password1234"'
  prefs: []
  type: TYPE_NORMAL
- en: expect -f - <<-EOF
  prefs: []
  type: TYPE_NORMAL
- en: set timeout 10
  prefs: []
  type: TYPE_NORMAL
- en: spawn sudo mysql_secure_installation
  prefs: []
  type: TYPE_NORMAL
- en: '#expect "*?assword*"'
  prefs: []
  type: TYPE_NORMAL
- en: '#send -- "$pw\r"'
  prefs: []
  type: TYPE_NORMAL
- en: expect "Enter current password for root (enter for none):"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Set root password?"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "y\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "New password:"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "${DBPASSWORD_ADMIN}\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Re-enter new password:"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "${DBPASSWORD_ADMIN}\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Remove anonymous users?"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "y\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Disallow root login remotely?"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "y\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Remove test database and access to it?"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "y\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect "Reload privilege tables now?"
  prefs: []
  type: TYPE_NORMAL
- en: send -- "y\r"
  prefs: []
  type: TYPE_NORMAL
- en: expect eof
  prefs: []
  type: TYPE_NORMAL
- en: EOF
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum remove tcl expect -y
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it is probably a good idea to make the database server listen
    on localhost only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: echo [mysqld] |sudo tee /etc/my.cnf.d/bind-address.cnf
  prefs: []
  type: TYPE_NORMAL
- en: echo bind-address=127.0.0.1 |sudo tee -a /etc/my.cnf.d/bind-address.cnf
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl restart mariadb.service
  prefs: []
  type: TYPE_NORMAL
- en: Enter the mysql shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: mysql -u root -p
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: MariaDB [(none)]> create database misp;
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB [(none)]> grant usage on *.* to misp@localhost identified by 'XXXXXXXXX';
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB [(none)]> grant all privileges on misp.* to misp@localhost ;
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB [(none)]> exit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]bash'
  prefs: []
  type: TYPE_NORMAL
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "create database $DBNAME;"
  prefs: []
  type: TYPE_NORMAL
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant usage on *.* to $DBNAME@localhost
    identified by '$DBPASSWORD_MISP';"
  prefs: []
  type: TYPE_NORMAL
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "grant all privileges on
    $DBNAME.* to '$DBUSER_MISP'@'localhost';"
  prefs: []
  type: TYPE_NORMAL
- en: sudo mysql -u $DBUSER_ADMIN -p$DBPASSWORD_ADMIN -e "flush privileges;"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the empty MySQL database from `MYSQL.sql` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]bash sudo -u apache cat $PATH_TO_MISP/INSTALL/MYSQL.sql | mysql -u $DBUSER_MISP
    -p$DBPASSWORD_MISP $DBNAME'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, configure your Apache server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]bash'
  prefs: []
  type: TYPE_NORMAL
- en: $ sestatus
  prefs: []
  type: TYPE_NORMAL
- en: 'SELinux status: disabled'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]bash'
  prefs: []
  type: TYPE_NORMAL
- en: Now configure your apache server with the DocumentRoot /var/www/MISP/app/webroot/
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A sample vhost can be found in /var/www/MISP/INSTALL/apache.misp.centos7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo cp /var/www/MISP/INSTALL/apache.misp.centos7.ssl /etc/httpd/conf.d/misp.ssl.conf
  prefs: []
  type: TYPE_NORMAL
- en: 'If a valid SSL certificate is not already created for the server, create a
    self-signed certificate:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo openssl req -newkey rsa:4096 -days 365 -nodes -x509 \
  prefs: []
  type: TYPE_NORMAL
- en: -subj "/C=${OPENSSL_C}/ST=${OPENSSL_ST}/L=${OPENSSL_L}/O=${OPENSSL_O}/OU=${OPENSSL_OU}/CN=${OPENSSL_CN}/emailAddress=${OPENSSL_EMAILADDRESS}"
    \
  prefs: []
  type: TYPE_NORMAL
- en: -keyout /etc/pki/tls/private/misp.local.key -out /etc/pki/tls/certs/misp.local.crt
  prefs: []
  type: TYPE_NORMAL
- en: Since SELinux is enabled, we need to allow httpd to write to certain directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo chcon -t usr_t /var/www/MISP/venv
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/terms
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/files/scripts/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Plugin/CakeResque/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t usr_t /var/www/MISP/venv
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp/logs
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/orgs
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/webroot/img/custom
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]bash'
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_sys_rw_content_t /var/www/MISP/app/tmp
  prefs: []
  type: TYPE_NORMAL
- en: Allow httpd to connect to the redis server and php-fpm over tcp/ip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo setsebool -P httpd_can_network_connect on
  prefs: []
  type: TYPE_NORMAL
- en: Enable and start the httpd service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo systemctl enable httpd.service
  prefs: []
  type: TYPE_NORMAL
- en: sudo systemctl start httpd.service
  prefs: []
  type: TYPE_NORMAL
- en: Open a hole in the iptables firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
  prefs: []
  type: TYPE_NORMAL
- en: sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
  prefs: []
  type: TYPE_NORMAL
- en: sudo firewall-cmd --reload
  prefs: []
  type: TYPE_NORMAL
- en: We seriously recommend using only HTTPS / SSL !
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add SSL support by running: sudo yum install mod_ssl'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out the apache.misp.ssl file for an example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To rotate these logs, install the supplied `logrotate` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]bash'
  prefs: []
  type: TYPE_NORMAL
- en: MISP saves the stdout and stderr of it's workers in /var/www/MISP/app/tmp/logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To rotate these logs install the supplied logrotate script:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo cp $PATH_TO_MISP/INSTALL/misp.logrotate /etc/logrotate.d/misp
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod 0640 /etc/logrotate.d/misp
  prefs: []
  type: TYPE_NORMAL
- en: Now make logrotate work under SELinux as well
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allow logrotate to modify the log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo semanage fcontext -a -t httpd_log_t "/var/www/MISP/app/tmp/logs(/.*)?"
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -R -t httpd_log_t /var/www/MISP/app/tmp/logs
  prefs: []
  type: TYPE_NORMAL
- en: Allow logrotate to read /var/www
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo checkmodule -M -m -o /tmp/misplogrotate.mod $PATH_TO_MISP/INSTALL/misplogrotate.te
  prefs: []
  type: TYPE_NORMAL
- en: sudo semodule_package -o /tmp/misplogrotate.pp -m /tmp/misplogrotate.mod
  prefs: []
  type: TYPE_NORMAL
- en: sudo semodule -i /tmp/misplogrotate.pp
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following script to configure the MISP instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]bash'
  prefs: []
  type: TYPE_NORMAL
- en: There are 4 sample configuration files in $PATH_TO_MISP/app/Config that need
    to be copied
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/bootstrap.default.php $PATH_TO_MISP/app/Config/bootstrap.php
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/database.default.php $PATH_TO_MISP/app/Config/database.php
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/core.default.php $PATH_TO_MISP/app/Config/core.php
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache cp -a $PATH_TO_MISP/app/Config/config.default.php $PATH_TO_MISP/app/Config/config.php
  prefs: []
  type: TYPE_NORMAL
- en: echo "<?php
  prefs: []
  type: TYPE_NORMAL
- en: class DATABASE_CONFIG {
  prefs: []
  type: TYPE_NORMAL
- en: public \$default = array(
  prefs: []
  type: TYPE_NORMAL
- en: '''datasource'' => ''Database/Mysql'','
  prefs: []
  type: TYPE_NORMAL
- en: //'datasource' => 'Database/Postgres',
  prefs: []
  type: TYPE_NORMAL
- en: '''persistent'' => false,'
  prefs: []
  type: TYPE_NORMAL
- en: '''host'' => ''$DBHOST'','
  prefs: []
  type: TYPE_NORMAL
- en: '''login'' => ''$DBUSER_MISP'','
  prefs: []
  type: TYPE_NORMAL
- en: '''port'' => 3306, // MySQL & MariaDB'
  prefs: []
  type: TYPE_NORMAL
- en: //'port' => 5432, // PostgreSQL
  prefs: []
  type: TYPE_NORMAL
- en: '''password'' => ''$DBPASSWORD_MISP'','
  prefs: []
  type: TYPE_NORMAL
- en: '''database'' => ''$DBNAME'','
  prefs: []
  type: TYPE_NORMAL
- en: '''prefix'' => '''','
  prefs: []
  type: TYPE_NORMAL
- en: '''encoding'' => ''utf8'','
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}" | sudo -u apache tee $PATH_TO_MISP/app/Config/database.php'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the fields in the newly created files:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'config.php : baseurl (example: ''baseurl'' => ''http://misp'',) - don''t use
    "localhost" it causes issues when browsing externally'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'core.php : Uncomment and set the timezone: `// date_default_timezone_set(''UTC'');`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'database.php : login, port, password, database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DATABASE_CONFIG has to be filled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the default values provided in section 6, this would look like:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: class DATABASE_CONFIG {
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: public $default = array(
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''datasource'' => ''Database/Mysql'','
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''persistent'' => false,'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''host'' => ''localhost'','
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''login'' => ''misp'', // grant usage on *.* to misp@localhost'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''port'' => 3306,'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''password'' => ''XXXXdbpasswordhereXXXXX'', // identified by ''XXXXdbpasswordhereXXXXX'';'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''database'' => ''misp'', // create database misp;'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''prefix'' => '''','
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '''encoding'' => ''utf8'','
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: sudo chown apache:apache /var/www/MISP/app/Config/config.php
  prefs: []
  type: TYPE_NORMAL
- en: sudo chcon -t httpd_sys_rw_content_t /var/www/MISP/app/Config/config.php
  prefs: []
  type: TYPE_NORMAL
- en: Generate a GPG encryption key.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: cat >/tmp/gen-key-script <<EOF
  prefs: []
  type: TYPE_NORMAL
- en: '%echo Generating a default key'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key-Type: default'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key-Length: $GPG_KEY_LENGTH'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subkey-Type: default'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name-Real: $GPG_REAL_NAME'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name-Comment: $GPG_COMMENT'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name-Email: $GPG_EMAIL_ADDRESS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expire-Date: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passphrase: $GPG_PASSPHRASE'
  prefs: []
  type: TYPE_NORMAL
- en: Do a commit here, so that we can later print "done"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '%commit'
  prefs: []
  type: TYPE_NORMAL
- en: '%echo done'
  prefs: []
  type: TYPE_NORMAL
- en: EOF
  prefs: []
  type: TYPE_NORMAL
- en: sudo gpg --homedir /var/www/MISP/.gnupg --batch --gen-key /tmp/gen-key-script
  prefs: []
  type: TYPE_NORMAL
- en: sudo rm -f /tmp/gen-key-script
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown -R apache:apache /var/www/MISP/.gnupg
  prefs: []
  type: TYPE_NORMAL
- en: And export the public key to the webroot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo gpg --homedir /var/www/MISP/.gnupg --export --armor $GPG_EMAIL_ADDRESS
    |sudo tee /var/www/MISP/app/webroot/gpg.asc
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown apache:apache /var/www/MISP/app/webroot/gpg.asc
  prefs: []
  type: TYPE_NORMAL
- en: Start the workers to enable background jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo chmod +x /var/www/MISP/app/Console/worker/start.sh
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $RUN_PHP /var/www/MISP/app/Console/worker/start.sh
  prefs: []
  type: TYPE_NORMAL
- en: if [ ! -e /etc/rc.local ]
  prefs: []
  type: TYPE_NORMAL
- en: then
  prefs: []
  type: TYPE_NORMAL
- en: echo '#!/bin/sh -e' | sudo tee -a /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: echo 'exit 0' | sudo tee -a /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod u+x /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: fi
  prefs: []
  type: TYPE_NORMAL
- en: sudo sed -i -e '$i \su -s /bin/bash apache -c "scl enable rh-php71 /var/www/MISP/app/Console/worker/start.sh"
    > /tmp/worker_start_rc.local.log\n' /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: Make sure it will execute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo chmod +x /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: 'echo "Admin (root) DB Password: $DBPASSWORD_ADMIN"'
  prefs: []
  type: TYPE_NORMAL
- en: 'echo "User (misp) DB Password: $DBPASSWORD_MISP"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: some misp-modules dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo yum install -y openjpeg-devel
  prefs: []
  type: TYPE_NORMAL
- en: sudo chmod 2777 /usr/local/src
  prefs: []
  type: TYPE_NORMAL
- en: sudo chown root:users /usr/local/src
  prefs: []
  type: TYPE_NORMAL
- en: cd /usr/local/src/
  prefs: []
  type: TYPE_NORMAL
- en: git clone https://github.com/MISP/misp-modules.git
  prefs: []
  type: TYPE_NORMAL
- en: cd misp-modules
  prefs: []
  type: TYPE_NORMAL
- en: pip install
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install -I -r REQUIREMENTS
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install .
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum install rubygem-rouge rubygem-asciidoctor -y
  prefs: []
  type: TYPE_NORMAL
- en: '##sudo gem install asciidoctor-pdf --pre'
  prefs: []
  type: TYPE_NORMAL
- en: 'install STIX2.0 library to support STIX 2.0 export:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache $PATH_TO_MISP/venv/bin/pip install stix2
  prefs: []
  type: TYPE_NORMAL
- en: install additional dependencies for extended object generation and extraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install maec lief python-magic pathlib
  prefs: []
  type: TYPE_NORMAL
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/pip install git+https://github.com/kbandla/pydeep.git
  prefs: []
  type: TYPE_NORMAL
- en: Start misp-modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo -u apache ${PATH_TO_MISP}/venv/bin/misp-modules -l 0.0.0.0 -s &
  prefs: []
  type: TYPE_NORMAL
- en: sudo sed -i -e '$i \sudo -u apache /var/www/MISP/venv/bin/misp-modules -l 127.0.0.1
    -s &\n' /etc/rc.local
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Threat scoring capability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once all the dependencies are resolved and the tool is set up, we will need
    to expanded by enhancing the MISP backend system by adding the IOC threat scoring
    capability on top of it. It should be noted that MISP doesn't come with the capability
    to carry out threat scoring out of the box, which is a very important feature
    for SIEM. The improvisation that we are doing to the MISP backend system/code
    base is to ensure that we have can have the IOC threat scoring capability built
    on top of the MISP. In order to accommodate this, we have created a table at the
    backend called `threat_scoring`. The table records the appropriate threat score
    of every IOC.
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the database, let''s open the MySQL console and remove the
    MISP database as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we execute these commands, we now need to add the modified database schema
    to the newly created `misp` database. It can be added to backend system as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Once the preceding command is executed, we will have the updated instance of
    the MISP backend database.The mod_schema.sql can be found at the GITHUB URL of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: MISP UI and API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MISP has a PHP-based frontend and can be accessed via a web browser. It comes
    with many important features. You can refer to the original website to get a complete
    idea of all these features: [https://www.misp-project.org/](https://www.misp-project.org/).
    In this section, let's take a look at a few key features that will give us an
    idea of how to implement threat intelligence and collect IOCs using MISP.
  prefs: []
  type: TYPE_NORMAL
- en: Once we log in to the portal, we can go to the feeds tab to see which feeds
    come configured out of the box in MISP. It should be noted that a feed is nothing
    but a web-based local source that provides IOCs in JSON, CSV, XML, or flat-file
    format. There are various feed sources pre-configured in MISP. Once we schedule
    a feed collection job, MISP's central engine visits all the feed sources configured,
    extracts IOCs from them, and places them in the central database as shown in the
    following screenshot:.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78cf1144-82b5-4ed1-82ec-ab2699255fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen in the preceding screenshot, we can go to the **Add Feeds** tab
    and configure more feeds from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the central scheduler that downloads
    feeds from configured sources and parses them. We can select any time of the day,
    week, or year to indicate when we want the feeds to be downloaded. We can also
    configure how frequently we want the scheduler to repeat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c18b6f0-82a1-4d0a-afe7-767fa9a8c0ba.png)'
  prefs: []
  type: TYPE_IMG
- en: We will focus on the highlighted rows in the preceding screenshot. On the second
    line, we have a **fetch_feeds **job. Double-clicking on the frequency and Schedule
    Time/Date fields lets us change the setting. Furthermore, it should be noted that
    the first highlighted row that says `threat_scoring` does not come with default
    installation of MISP. We have injected this by modifying the backend database
    (we covered this in the improvisation section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the feeds are downloaded and parsed, they are placed inside a virtual/logical
    entity called **Events**. An event in MISP can be thought of as a collection of
    IOCs. We can have separate events for separate feeds. Alternatively, we can have
    all IP-based IOCs going to separate events, domains, and so on. The following
    screenshot depicts event collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07d5218a-be03-4f51-a296-3f12b6af5d76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the details icon of any of the events highlighted in the previous
    screenshot, we will get to see which IOCs that particular event is actually holding.
    This is captured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51b3f11b-c2a3-4fc5-ac74-6098366115d5.png)'
  prefs: []
  type: TYPE_IMG
- en: MISP API (PyMISP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, MISP comes with a very stable API, with which we can
    fetch events and IOCs referred as attributes within MISP and share them with our
    security tools. The API expects an authentication key to be set. The authentication
    key can be found at the user interface when the user logs in through the MISP
    web portal. An example of how to get the details of a particular event from the
    MISP backend database using the MISP API is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76d37a28-0ab8-4af5-af61-4a60ac213c79.png)'
  prefs: []
  type: TYPE_IMG
- en: The complete details of the MISP API can be found at the following link: [https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples](https://github.com/MISP/PyMISP/tree/2c882c1887807ef8c8462f582415470448e5d68c/examples).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code snippet, we are simply initializing the MISP API object
    on line 31 and invoking the `get_api` API method. The preceding code can be run
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e0cc825-dda5-4853-a0bc-96239fd62a7f.png)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen in the previous screenshot, we get all the IOCs associated with
    the `1512` event ID. The output can also be saved in a JSON file if we specify
    the `out` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Threat scoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have discussed before, threat scoring forms a very important part of
    threat intelligence. There are usually millions of collected IOCs and they usually
    contain lots of false positives. If this information is directly fed to the SIEM
    tool, it will result in massive false positive alerts. In order to solve this
    problem, we have made an attempt to write an algorithm that works on top of the
    MISP-collected IOCs and associates a threat score to each. The idea is that an
    IOC with a score of five or more on a scale of 10 is more likely to be a genuinely
    malicious IOC and should be fed to the SIEM. The criteria of threat scoring on
    which this algorithm works is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date**: The date of the IOC is given 30% of the weight. If an IOC is one
    to three months old, it gets the entire 100% of the 30%, which is three points.
    If it''s four months old, it gets 90%, or 2.9 points, and so on. The complete
    details will be given in the following section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation**: The correlation count of the IOC gets 54% of the weight. What
    we mean by correlation is the frequency of occurrence across multiple events or
    multiple feeds. Let''s say that we have configured 30 feeds and the IOCs from
    each feed go to separate events, which results in 30 events. Now, if there is
    an IOC that is found in all 30 events, this indicates that the probability of
    this IOC being highly malicious is very high, as 30 different sources have cited
    it. This IOC would get the entire 100% of the 54% allocated for correlation, or
    5.4 points. If an IOC is featured in 90% of the configured feeds, it gets the
    corresponding amount of points. The actual bifurcation of the correlation weight
    will be given in the following section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: Many IOC feed sources tag the IOC with the kind of activity that
    it has been associated with, such as scanning, botnet, and phishing websites.
    The weight given to the tags is 15%. It should be noted that this section works
    on the number of tags associated with an IOC, rather than the kind of tag. The
    higher the number of tags, the higher the allocated weight out of the 15% bucket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comments**: Finally, the remaining 1% is allocated to the tags section. Some
    IOCs also come with certain comments. If an IOC has a comment associated with
    it, it gets the entire 1%, or 0.1 point, and if not, it gets 0 points in this
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat scoring weighed file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These criteria are not hardcoded within program logic, but are instead configured
    in a JSON file, so that the user can change them at any time and the code will
    pick up the updated values and allocate the scores accordingly. We have set the
    following values in our JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/daf94c06-d9c7-4e1e-bf1f-59a7146b9f92.png)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen in the previous screenshot, `Tags` is given a weight of 15%.
    This is further bifurcated in lines 8–12\. Line 8 indicates that any IOC that
    has a minimum of five tags and a maximum of 10,000 tags will be given the entire
    15%. Line 9 indicates that any IOC with four tags will be given 90% of the 15%
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '`Date` has a similar bifurcation. With a maximum of 30 points, any IOC that
    is between 0 and 90 days old gets the entire 100% of the 30 points, which is 3\.
    Any IOC which is 91–100 days old gets 90% of the 30 points, which is equal to
    2.7 and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Correlation` is given a weight of 54%, as shown in the following screenshot.
    The bifurcation in the case of correlation is little bit different. The number
    35 in line 41 does not indicate an absolute number, but rather a percentage. It
    means that out of the total number of configured feeds, if an IOC is found in
    35% of feeds or events, then it should get the entire 5.4 points. The other rows
    can be interpreted similarly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there is a weight of 1% given to whether the IOC comes with any comments
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8552eea4-487d-47b1-8bf3-826fd82b24fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Threat scoring algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following code, which we wrote in order to carry out threat
    scoring on top of the MISP IOC collection. The whole code can be found at the
    following link: [https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e737aa5e-64ba-479c-9982-6201a6a9eece.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's try to understand the code written so far. This code makes use of the
    concepts we have studied earlier in this book. The idea is to read all the IOCs
    from the MISP `attributes` backend table and give a threat score to each, according
    to the logic discussed earlier. Now, there are millions of attributes, so if we
    try to read them and score them sequentially, it will take a very long time. This
    is where the beauty of Python in terms of multiprocessing comes into the picture.
    We will read all the attributes and, depending upon the processor cores of the
    underlying machine, break the attributes into equal chunks. Each processor core
    will be given one chunk at a time to process. It will also allocate threat scores
    to the IOCs belonging to that chunk. The hardware I am using has an 8 GB RAM and
    a 4-core processor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we have a total number of 2 million attributes, these would be split
    into four chunks, each of which would hold 500,000 attributes. The scoring process
    will be carried out on that chunk by a dedicated processor core. If a sequential
    operation for 2 million chunks would have taken 4 hours, the multiprocessing approach
    would take 1 hour. The logic written between lines 40 and 51 takes care of determining
    the total number of chunks that we will use. It also contains the logic to deduce
    the chunk size as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/899cd852-6bcc-4b6e-8223-c1f7877b8d4b.png)'
  prefs: []
  type: TYPE_IMG
- en: It should be noted that the module imported at line 5, `from DB_Layer.Misp_access
    import MispDB`, represents a custom class called `MISPDB`, declared within the `MISP_access.py` module.
    This class has the raw SQL code to pull data from the `misp` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Between lines 54 and 56, we are placing the chunks in a custom list called `limit_offset`.
    Let''s assume that we have 2 million attributes in the backend database table.
    After line 56, this list would be updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Between lines 61 and 64, we are invoking a separate process for each chunk.
    The method that the process will execute is `StartProcessing()`, and we are passing
    the current chunk as an argument. In the remaining lines, 69–97, we are updating
    the status to return the status codes to the code that would have invoked the `UpdateThreatScore()` method.
    Let''s take a look at the method that the processor core executes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a234eb7-5432-4944-b272-f6f9ab167d24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The central piece of logic of the following code lies in line 186, where the
    code takes the current chunk and invokes the `self.Scoring()` method. This method
    produces a threat score by combining the tag, correlation, date, and comment threat
    score for each attribute. Finally, it updates the backend `threat_scoring` database
    table once it obtains the cumulative score. This is shown in the next snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88243024-a2ea-4d99-a1b3-49809a0ec11f.png)![](img/e9571b63-e818-4336-9f89-8ca2b9854ec3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As can be seen, the `Scoring()` method further invokes four different methods
    under lines 130-133\. It sums up the score and pushes it to the database table.
    Let''s take a look at the four methods it invokes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a03cbb7-42a3-436a-af1f-ae34bd7bcb80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As can be seen in the following screenshot, all four methods read the configuration
    values from the JSON file and pass them to a common method called `ComputeScore`,
    which finally computes the score based on the configuration values passed and
    returns the computed score:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/592aeacb-513c-4776-bd72-b49f73f883f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code attaches all the pieces together and returns the computed
    score. This code will be invoked in parallel for all the chunks on a separate
    processor core:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de53cecf-76e6-483b-b4b9-c70c13c68106.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we will create an object of the class and call the `Update` method
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Executing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The whole code can be found at the following GitHub repository, [https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python](https://github.com/PacktPublishing/Hands-On-Penetration-Testing-with-Python),
    and can be invoked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The code puts all the execution and debug messages in a `log` file, which will
    be created automatically at the same folder and will be called `TS.log`. It will
    have the following contents once the code is successfully executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/defaafd2-3eae-4c08-9347-4e6af961b15f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While the code is executing, there are four parallel read/write operations
    executing on the database, as each processor core will read and write separately.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cefea88-0164-4d30-9ca6-d8891f904035.png)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen, there are four user accounts called `misp` that are trying to
    read and write from the database simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot represents the schema of threat scoring table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c120729-2415-42ea-b26d-6cf205936074.png)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the threat-scoring of the IOC's.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3417b7fb-52d5-48a3-a3ee-f7ba1e9a448e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays few IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52963b02-1dc2-493d-8de3-dc9c158b23c1.png)'
  prefs: []
  type: TYPE_IMG
- en: STIX and TAXII and external lookups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **STIX and TAXII** is commonly used in the threat intelligence domain.
    We'll try and understand what it is here using the following example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that we have an organization A that has lots of threat intelligence
    data. The data is collected from external feeds as well as from internal threat
    intelligence data. Organization A is a banking organization and uses platform
    X to store and manage their threat intelligence data. Now, organization A wants
    to help the banking community by sharing their threat intelligence data with other
    organizations in the banking sector (such as organizations B and C). They expect
    the other organizations to share their data as well. The problem is that while
    organization A uses platform X to manage their threat intelligence data, organizations
    B and C use an entirely different platform. So how does organization A share its
    intelligence with B and C? This is where STIX and TAXII comes handy.
  prefs: []
  type: TYPE_NORMAL
- en: STIX and TAXII help to solve the problem of threat intelligence sharing by providing
    a platform that uses a common format to store and retrieve intelligence. For example,
    if an organization X needs to use a website belonging to organization Y, they
    will do so over an HTTP/HTTPS protocol served by the web server used by organization
    Y. HTTP is the mode of communication for web-based information served by a web
    server. Similarly, STIX is the protocol used to exchange threat intelligence data
    and is served by a server called a TAXII server. The TAXII server is able to understand
    the STIX content and is able to serve it to clients. On a granular level, the
    content of STIX is nothing but an XML document, which is formatted in a certain
    manner and with certain tags that comply with the STIX format so that the TAXII
    server can understand. This means that all organizations using a TAXII server
    will be able to share threat intelligence data under the STIX protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'MISP has the capability to integrate with a TAXII server as well. The content
    shared via the TAXII server within MISP is placed in the database of the TAXII
    server, as well as in the MISP database. To get the complete details of MISP and
    TAXII server integration, refer to the official URL: [https://github.com/MISP/MISP-Taxii-Server](https://github.com/MISP/MISP-Taxii-Server).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The TAXII sever has clients written in Python, which makes the integration
    seamless and very easy. Just as we have different web servers in the market, such
    as Apache, nginx, and Tomcat, there are a few different implementations of TAXII
    servers, which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/eclecticiq/OpenTAXII](https://github.com/eclecticiq/OpenTAXII)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/oasis-open/cti-taxii-server](https://github.com/oasis-open/cti-taxii-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/freetaxii/server](https://github.com/freetaxii/server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/SecurityRiskAdvisors/sra-taxii2-server](https://github.com/SecurityRiskAdvisors/sra-taxii2-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/StephenOTT/TAXII-springboot-bpmn](https://github.com/StephenOTT/TAXII-springboot-bpmn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can read more about the capabilities of each in the official GitHub repositories.
    It will be useful for you to know which implementations have which features.
  prefs: []
  type: TYPE_NORMAL
- en: External lookups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many paid and open source external lookup sites that expose APIs
    to get information about IOCs. Some of the most famous ones include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'IPvoid: [http://www.ipvoid.com/](http://www.ipvoid.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'URLvoid: [https://www.urlvoid.com/](https://www.urlvoid.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cymon: [https://api.cymon.io/v2/ioc/search/](https://api.cymon.io/v2/ioc/search/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Malware Domain: [http://www.malwaredomainlist.com/mdl.php](http://www.malwaredomainlist.com/mdl.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat Miner: [https://www.threatminer.org/](https://www.threatminer.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threatcrowd: [https://www.threatcrowd.org/](https://www.threatcrowd.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many of these have exposed APIs with which the process of the IOC lookup can
    be completely automated. For example, let''s take a look at the following code
    snippet that automates the IOC lookup with the help of the API exposed by Cymon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We can search on these websites and read the API documentation in order to automate
    the process of IOC lookup against these websites.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored the use of Python in defensive security. It
    should be noted that we have only captured a small portion of how Python can be
    used in defensive security. There are numerous other uses, including orchestration,
    automating repetitive tasks, developing correlating scripts that relate IDS/IPS
    signatures with Qualys/Nessus CVEs. This chapter has laid a foundation of how
    Python can be used and I would encourage the reader to carry out further research.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to see a few other general cyber security
    use cases in which Python comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How could we further improve the threat scoring algorithm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use the previously discussed threat scoring code with a Python-based
    scheduler?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'STIX and TAXII: [https://threatconnect.com/stix-taxii/](https://threatconnect.com/stix-taxii/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MISP: [https://github.com/longld/peda](https://github.com/longld/peda)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat Intelligence: [https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/](https://www.cisecurity.org/blog/what-is-cyber-threat-intelligence/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
