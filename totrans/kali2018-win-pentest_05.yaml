- en: Password Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anybody you meet will tell you that weak passwords are responsible for dozens
    of successful intrusions, both local and remote. As a trained network administrator,
    or security engineer, you have counselled users to make their passwords stronger
    many times. What you may not be aware of is that many technology professionals
    make weak passwords or patterns of passwords that endanger not just their own
    accounts, but the entire network that they maintain. This chapter will show you
    several tools for testing the passwords on your network, so you can help guide
    your users to the habit of better passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Password attack planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meet my friend, Johnny
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meet Johnny's dad, John the Ripper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meet the exâ€”xHydra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is the nature of hashing algorithms that all hashes should be about the
    same length, and it really doesn''t seem any more likely that someone could crack
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any quicker than they could crack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Sadly, even on a slow computer, the first hash of the password `Password` is
    going to be cracked in fewer than 20 seconds, while the second password hash for
    `GoodLuckTryingToCrackMyPassword!` may take several months to crack. The following
    list illustrates some of the passwords you will find in any of the dozens of word
    lists that you can find on the internet, and that make cracking passwords so much
    easier. Some common hashes can be cracked by [https://www.google.com](https://www.google.com),
    just by pasting the hash into the search bar. Most web applications and operating
    systems add a few characters, called `salt`, to the user's password choice, so
    as to make a simple cryptographic hash a bit more complicated and less guessable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows some examples of passwords in clear text and
    their hash values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a177e90f-92d6-4fbc-8bfb-dc7486f52ed6.png)'
  prefs: []
  type: TYPE_IMG
- en: Password attack planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords are normally the keys to any system or network. Ever since the dawn
    of computers, passwords have been used to lock system data from unwanted eyes.
    So password cracking is a much-needed skill in the hacking trade. Capture or crack
    the right password and you have the keys to the kingdom, access to anywhere, any
    time. We'll also talk a bit about creating strong passwords as we go along. If
    you are a systems administrator reading this book, you're the person we are talking
    about. It is your password an attacker is going after. Sure, typing a 12- or 14-character
    password every time you log in to something is a pain, but how important is your
    network?
  prefs: []
  type: TYPE_NORMAL
- en: Personally, we wish the word *password* hadn't been used for this function from
    the beginning. It should be called keys. Normal users of systems cry and whine
    about password-protected data. Most relate the word *password* to entry into a
    clubhouse or something. A user will have locks and burglar alarms on all his property
    but will use a four-letter password on his computer. People relate the word *key*
    to locking something important. Actually, if your password is just a *word*, you
    will be pwned in minutes. It's best to use passphrases. Something like *Mary had
    a little lamb*. is a lot better than just a word. We'll see just how important
    this is in this chapter as we think about the passwords you use.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking the NTLM code (revisited)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One method of password attacks was covered in [Chapter 4](20fa14ea-ee8e-413e-80b6-bba429512e6c.xhtml),
    *Sniffing and Spoofing*. On a Windows network running NetBIOS, capturing NTLM
    hashes is child's play. They're just floating around in the ARP cloud waiting
    to be plucked. As we have shown in the earlier chapters, when you are using Metasploit,
    you don't need to even crack this hash to a password but can just pass the hash
    to another Windows system.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you need the actual password. System admins sometimes get lazy and
    use the same password on several classes of devices. Let's say you have some Windows
    hashes and you need to get into a router or a Linux machine to which you are not
    sure of the password. There is a good chance that the passwords are the same on
    other systems, so you can crack the hashes that the NTLM protocol leaks. Lots
    of us are guilty of reusing passwords for infrastructure devices, even though
    we know better. It might be safer to use different usernames and passwords for
    routers and other infrastructure devices, and never use the domain administrator
    accounts to log in to any machines, unless it is absolutely necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker hint:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off NetBIOS and use Active Directory with Kerberos and LDAP for Window's
    logins and network functions.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at cracking passwords and not just passing
    hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Password lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any good password cracker, sometimes the fastest way to crack a password
    is by using a password list. It's even best to sometimes run a list of, say, the
    500 worst passwords against the users on your system to find those lazy *losers*
    who are using bad passwords. A bad password most of the time can be broken in
    seconds compared to hours, days, or weeks when using a strong pass-phrase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali contains many password you can fine them in the following directory `/usr/share/wordlists`.
    The following is also a link and a listing of some good password files. A Google
    search will also lead you to lists of common passwords and also lists of passwords,
    stolen from websites. When using a list of stolen passwords, only use the lists
    that have been scrubbed of the usernames. Using a full set of stolen credentials
    (username and password) could land you in trouble. With a list of just passwords,
    you just have a list of words with no link back to the original user. This is
    safe and legal to use: [https://wiki.skullsecurity.org/Passwords](https://wiki.skullsecurity.org/Passwords).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d37e5369-d28b-42f0-9ba6-e6d0ff48b941.png)'
  prefs: []
  type: TYPE_IMG
- en: Cleaning a password list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, when you get a list of passwords, the list might be tabbed columns
    in a text file or maybe have strange spaces of tabs mixed with the words in the
    file. You'll want to clean these spaces and tabs and have a single word per line
    for the word list to work with password crackers.
  prefs: []
  type: TYPE_NORMAL
- en: One of the earliest concepts of Unix was small programs within the system that
    can be piped together to perform complex tasks. Linux is the Red Headed Cousin
    of Unix and these tools are in every distribution of Linux, including Kali. This
    is old school but it works very well once you understand how to do it. We are
    going to go through each program used and then show how to string these together
    to perform this task all in a single line of commands.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a list of 500 common passwords. The words were listed in an
    HTML table and the rows were numbered so, when copied to a text file, what we
    get in the raw form is shown next. Most of the word lists you can find have approximately
    the same extremely common bad passwords, and although we are working in English,
    there are word lists in other languages. Weak passwords are not strictly the province
    of the English-speaking world.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, the next screenshot is a great example of very common, but very
    weak, English-language passwords. It would waste space to show all 500 words,
    so we are presenting the `500-common-original.txt` file on the publisher''s website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a93639c7-a6aa-4cbb-bc90-9b3603c7deb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we have the line numbers to the left which we need to discard and
    five words per line separated by tabs and spaces. We will want to move each word
    to a new line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cat` command reads a text file and prints out to the screen or to another
    file. Using it along with the `cut` command, we will strip out the line numbers
    first. The `cut` command sees the tabs as spacers between fields so the numbers
    are the first field in the line. We want to cut the numbers and leave the words
    so we cut the first field and keep the others. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the returned output return as follows. If you look, you will see that
    this is a list of the first word only in every line and not the whole list. Using
    the `-f2` flag, we have cut everything except the second field in every line.
    The following screenshot has some words scrubbed out to keep this book''s G-rating,
    but some people are vulgar by nature. Some words in the list may not be fit to
    print, but they are in the top 500 common passwords. When hacking, you are dealing
    with a person''s nature, and that is not necessarily socially correct. People
    are often found to choose rude words, when they believe nobody will ever see what
    they wrote, or where they believe themselves to be anonymous:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee8a388b-6f2a-4f71-979c-15a6321290e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we want all the words from each line, we have to include the other five
    columns in the command. Five words in a line, plus the number, is six fields to
    a line and we want to cut the first field (the number) and keep the rest, so we
    change the `-f` flag to `-f2-6`; this will cut field 1 and print out fields 2
    through 6\. We see that the return has cut out the number row but we still have
    five words per line. This will not run correctly in the password cracker; we still
    need to move all the words to their own line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command string gets rid of the line numbers, although it would not be
    a matter of more than a couple of seconds to leave the line numbers in. It wouldn''t
    be as neat, though, and sometimes neatness counts. The following screenshot is
    the output of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3d81414-1091-441c-a92e-03d04b4f6e40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get all the words on a new line, we use the `--output-delimiter` flag and
    use the value of `$''\n''`, which tells the output for every delimiter which is
    the tab space in the line to move the next field to a new line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/5096d4b3-8650-4010-9de3-bdd5b00a550d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have each word on a new line, but we also need to print this to a file
    for use. To do this, we will use the redirect command `>` to send the output to
    a new text file. Be careful, as the `>` command sends the output of the commands
    being run to a file, but if the filename exists, it will overwrite the contents
    of the file. If you want to increase the size of a file you already have, use
    the `>>` command to append the output to an already existing file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the commands sending the words to the working
    file of weak passwords, and testing the output file for content and format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89240884-a7be-49d5-998b-148d100b7551.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `ls` command to double-check that you are in the right directory, and
    that your chosen output file does not exist, and then run the following output
    to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Hacker note:'
  prefs: []
  type: TYPE_NORMAL
- en: If you accidentally run the command as `cat 500-common-orginal.txt | cut -f2-6
    --output-delimiter=$'\n' > 500-common-original.txt`, you will overwrite your original
    file and be left with nothing to recreate, in the event that your new file contents
    are not what you wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this time there is no output to the screen but, when the `ls` command
    is run again, we see the new file in the working directory. By catting the new
    file, we see our new password file ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: My friend, Johnny
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will talk about my friend, Johnny. Johnny is a GUI frontend for my
    other friend, John. For most password cracking tasks, this is an easy way to use
    John. It uses the normal defaults for most password cracking sessions. Once you
    have captured some hashes, save them to a text file and open Johnny.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot from the LxDE desktop showing where Johnny can
    be found. You can also find it on all the other desktops under the same header
    location, Applications | 05 - Password Attacks | johnny:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1b70fb3-78ff-4d0a-992e-0738285fc569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are using the password hashes from a previous exploit earlier in the book,
    where we were passing the hash. We have shortened the list to only include the
    hashes of the two accounts that we think have critical access to the networked
    systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0494d80-bd5c-4de9-ae1f-c1537e70bdb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once Johnny is open, click on the Open Passwd File button and pick the text
    file where you have saved the user's hash values. This will load the file into
    Johnny.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker note:'
  prefs: []
  type: TYPE_NORMAL
- en: It is best to delete the guest and any other user account that you do not want
    to crack. This will cut down on the length of time it takes to crack the passwords.
    As you see, we are only cracking two accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is your first view of Johnny''s interface. Very simple,
    and powerful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00de9048-f07f-4d58-9ef0-b28c4ea265a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Because this is a test network, there are only two usernames in the dialog window.
    In a production network, there would be as many usernames as people in the organization
    permitted to log into the system. It is likely that at least one of these users
    has administrative privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker''s note:'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the administrator's account is always UID 500\. Sometimes, an
    administrator will change the name of the administrator account. This does hide
    the account in some cases, but once you get the UIDs of the accounts, finding
    the administrator is as easy as 500.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3a72e5f-fd23-4dfe-afc4-f8b605d29c57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We know these hashes come from a Windows 7 system. With Windows 7, LM hashes
    are no longer used by default, so we must change the default LM hash cracking.
    You will get the following error in the Output tab if this is not changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/baa2a6ed-d7e9-4864-b02c-291725df4137.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Options tab and change the auto detect to nt2, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33e4bbf3-983d-49f3-948e-dfcf41a13b90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click the Passwords tab and then click the Start Attack button. This will
    begin the cracking process. You can see the process in the bottom tab on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a20267d6-67e1-4d0c-8fa0-ec0616c1609a.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that it now shows the format as nt2 and is running. Have a cup of coffee.
    This might take a while.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that we have a Pause Attack button. If needed, you can pause the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, open source applications have quirks. Johnny is no different. Sometimes
    when doing a cracking run, the process will run and crack the passwords but they
    will not show in the GUI window. If the Pause Attack button has grayed out and
    only the Start button can be clicked, the run has completed, and the passwords
    have been cracked. You can find the cracking information by clicking on the Options
    button. This page will also show you the length of time it took to run and that
    the passwords cracked. This the best page to get all the results of the run.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the next screenshot that it took 7 hours and 18 minutes to crack
    two passwords with six and seven characters, using the complexity of uppercase
    and lowercase letters, numbers, and special characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd94adae-ec16-4f22-a677-4b8dff46b6df.png)'
  prefs: []
  type: TYPE_IMG
- en: John the Ripper (command line)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John the Ripper is the application that underlies Johnny. You may be like us,
    and be more comfortable on the command line than in a GUI, when using password
    cracking tools, such as John the Ripper. You may go for the CLI because it uses
    fewer resources than the GUI, or because you are working through an SSH connection
    to a server without a GUI interface. It is easy to use John the Ripper, and there
    are a lot more options and ways to use John by using the command line that have
    not yet been added to Johnny.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see all the various hashing algorithms supported by John and test the
    speed of your system for cracking by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run through all the various hashing algorithms supported by John
    and give you the speed it will take for the various hashes. The following screenshot
    shows the read-out from the `test` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa2f8949-fc96-47cd-a7b5-3225742bb706.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to run John against a set of hashes obtained from an earlier exploitation
    of a system. Note the flags we are using to perform this. We are using `--format=nt2`
    and then picking the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ec663315-266f-4fcf-abf2-c54ff114df92.png)'
  prefs: []
  type: TYPE_IMG
- en: With this cracking run, we are cracking passwords that are more than six characters.
    Note the time it has taken to run this process. This shows, when it comes to passwords,
    the length is more important than the complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see that it took 1 day and 23 hours to
    crack a pretty simple seven-character password. The second password which was
    eight characters long did not crack after 4 days, 14 hours, and 56 minutes. Yes,
    each extra character makes the time it takes to crack grow exponentially:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b800440e-7b0f-49b8-bbb6-7c5c41e4f0eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By running the `-show` flag after the run, you can see the cracked word, and
    that we have one still left to crack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e46c6d9-95e8-44d0-9c42-5b17ba9787da.png)'
  prefs: []
  type: TYPE_IMG
- en: This cracking was done on a VM with one running processor. Adding processors
    will increase the number of running threads during cracking, and that makes the
    job take less time. People have built machines filled with processors and GPU
    cards that can crack passwords like we are using in a matter of hours. Some use
    Amazon AWS and set up instances with a lot of processing power, but this costs
    a lot of money. It's also known that some ingenious college students have fired
    up the college supercomputer meant for modeling the solar system and used these
    systems to crack passwords really fast. Even if your neighborhood evil hacker
    has these kinds of systems, the longer password is still better. Systems like
    these are the reason for using passwords or pass-phrases with a length over 14
    characters. Even with pass-phrases over 14 characters, this shows that if you
    have the hash, it is just a matter of time, money, and processing power before
    you have the password.
  prefs: []
  type: TYPE_NORMAL
- en: xHydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: xHydra is a GUI frontend for the password cracker called Hydra. Hydra can be
    used for both offline and online password cracking. Hydra can be used for many
    types of online attacks, including attacks against MySQL, SMB, MSSQL, and many
    types of HTTP/HTTPS logins, just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use xHydra to attack a running MySQL service on a machine running
    a WordPress site. Since the machine is running a WordPress site and a MySQL service,
    it is an easy guess that the database login's username is `wordpress`, the default
    admin account. By default, MySQL doesn't block brute-force attacks, so we know
    we stand a good chance with this attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start xHydra in Kali Version 1.x, you would go to 05 - Password Attacks
    | Online Attacks | hydra-gtk. The hydra-gtk will start xHydra. Yes, I know it''s
    confusing but they are the same. The following screenshot shows the menu from
    LxDE. (yes, that is my motorcycle in the background, and yes it is a Harley):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ffa25b9-111d-4611-a5b6-5cec03520755.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Something to remember: in Kali, as in any other Linux distribution, you can
    either open Terminal and type your command at the prompt, or you can open a command
    dialog by hitting *Alt* + *F2*. This will give you what is called the **Run Box**.
    All desktops have this function. In the following two screenshots, we are showing
    how to find xHydra, `# locate xhydra` and how to launch it from a command line
    in Terminal, with just the name `xhydra`; and how it looks when you invoke a command
    from the *Alt* + *F2* keyboard shortcut. The following is the Run Box from Gnome
    3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c86d986a-e75d-40ed-ac59-c9dff6db2724.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hacker hint:'
  prefs: []
  type: TYPE_NORMAL
- en: As we have discussed, Gnome 3 does things *they're way!* even if it is wrong
    and confusing. You type in the command you want to run, and hit *Enter* to run
    it. The Close button will just cancel your action, and bring you back to the desktop.
    With all other desktops the Run Box gives you a Run or OK button, which will run
    the command. Also, typing the command and hitting *Enter* will run the command
    in these Run Boxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also open xHydra from the command line, by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The ampersand command (`&`) tells the Bash Terminal to background the application,
    and it gives you back the Command Prompt. If you do not add the ampersand, you
    have locked up your Terminal window until you finish using xHydra. It will run,
    but if you close this Terminal window, xHydra will also shut down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the ampersand will background any command run from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5734e65-2a6f-4c89-a6ab-c54217aec61e.png)'
  prefs: []
  type: TYPE_IMG
- en: When xHydra is opened, we get the following window. The first tab, Target, is
    for setting the targets and protocols for the attack. You can attack a single
    IP address, or a target list of hosts from a text file. The Protocol field is
    to pick the type of the protocol. Note, at the bottom of the window is the command-line
    string that would be used if running the attack from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a helpful learning tool to learn the command-line options and how they
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f80b8bde-5cfd-4b3e-903c-9e5ffa3ab9bf.png)'
  prefs: []
  type: TYPE_IMG
- en: We are attacking a single host so we add the IP address, set the port to `3306`,
    the default MySQL service port, and pick mysql for the Protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that there are several nice options in the options section of this window.
    If SSL was enabled on the MySQL server, you would place a check in the box for
    SSL. This would also be checked for any other service using SSL, such as SSMTP,
    SIMAP, or SLDAP. The Be Verbose checkbox will give you a more detailed output
    while running. The Show Attempts checkbox, while running, will show you the actual
    passwords being run against the system. This is interesting to watch but produces
    a lot of output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd66bbd3-5759-4984-9a01-47aadd3479b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Passwords tab to set up the password part of the attack. Here,
    we add the user `root` and pick the Generate radio button and change the field
    to `1:8:a`. In the bottom field, you might want to check the Try login as password
    and Try empty password fields.
  prefs: []
  type: TYPE_NORMAL
- en: In the Generate field, we have added `1:8:a`. This tells Hydra to run passwords
    from one to eight characters. The lowercase `a` tells Hydra to run lowercase letters
    only. If we add the string `1:8:aA1% .`, this will generate passwords from one
    to eight, including uppercase and lowercase letters, numbers, percent signs, spaces
    (yes, there is a space between the % and the comma), and dots. Mix and match from
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here again, you will find the checkbox field for Try login for password, which
    will try the login name as the password, like `admin:admin`, and the checkbox
    for blank passwords. You will also find here a checkbox for reversing the login
    name, such as `nimda`, for the password for the `admin` login:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87cdeb43-c1f1-4c45-95b9-f98603569365.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set up the Tuning tab next:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are attacking one host, turn down the number of tasks to eight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the host is on the same network, turn down the timeout value to 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since this is one host and the attack is using one username, check the box to
    exit after first pair found
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will find later that the tasks set may be lower than the actual running
    tasks. We have set it to 8, but later we will see that the actual running tasks
    is 4\. Four running threads is all the server will handle, so that''s all we get.
    The running threads can change based on other things happening on the Kali attack
    workstation, as loads change, so it is best to set it for more than the running
    load. Be aware that setting it too high from the actual running tasks (for example,
    setting it to 16), will cause the application to hang. This number may also be
    higher or lower depending on the type of service being exploited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/201d9c41-27c3-4e03-a29f-06680e12e652.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Specific tab for the MySQL attack will stay with the defaults. Actually,
    the MySQL attack doesn''t use any of these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce0b29f1-4f5d-4e0e-bab4-67978b5308e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are ready to click on the Start tab and we see that we are running four
    threads against that one server. This might take a while:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f418e277-5979-4076-ad61-b68b45f0ea05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hacker hint:'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the authors of the software, like the writers of this book,
    ask that you don't use these tools or information for military, secret service,
    or illegal purposes. Remember to use your Jedi powers only for good.
  prefs: []
  type: TYPE_NORMAL
- en: Hmmm. We have 217,180,146,596 password combinations still to try and an estimated
    time up of 199,661,463 days and 22 hours. It may be time to get a beefier Kali
    workstation. This is going to take a while. Maybe a 546,659 year vacation is the
    best decision for the evil hackers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, the estimate is high. Following, we see that our test has now run
    for 70 hours and 39 minutes without cracking a password of five characters in
    length. During this time, the run has attempted 75,754 passwords leaving 12,280,876
    to go with an estimated runtime of 11,454 days and 13 hours. So, for the benefit
    of the book we are stopping the test here, with an estimated 32 years left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb38ebf8-99fc-48e6-af27-ab215c8a5e9e.png)'
  prefs: []
  type: TYPE_IMG
- en: The speed of this test is mainly determined by the resources and set-up of the
    victim server. Our victim server here is a low-rent VM so this is one reason for
    such a slow test. Also, at the first part of this run, we got a warning that MySQL
    doesn't like a lot of parallel connections. The speed will increase against a
    target server running more resources. Another limiting factor is that the target
    server may be so weak that a sustained brute-force attack might knock the machine
    off the network. Even a strong server with large amounts of resources available
    might experience a **denial of service** (**DoS**) condition. When doing brute-force
    attacks, you might want to aim for low and slow rates of attack speed. As an attacker,
    you do not want to alert the administrators to the attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'This test also demonstrates that capturing the hashes and cracking them offline
    is usually faster than performing the attack online. Another thing to remember:
    if any intrusion services are running on the system, your attack will be noticed
    sometime in the years it runs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s try a password list attack on the same system. Note that we have
    changed the settings from Generate to Password List and selected the `rockyou.txt`
    password list from the many password lists included in Kali. The following screenshot
    lists the directories and shows the `rockyou.txt` file compressed. You will need
    to decompress it for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed0c5474-c7d0-49b7-9c55-0861edbd23e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we have selected the uncompressed file and we
    are ready to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af59282f-a357-4752-84e0-e0ba1be76a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Through the modern miracle of Hollywood, we see we have cracked the password
    `evil1`. After 562 tries and 31 hours, we have it. This is a lot of time for the
    amount of tries. Again, the speed of the service accepting the passwords is the
    defining factor and takes a while. Software firewalls and password-attempt limits
    on the target server can make it take longer, or make it even impossible.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the correct password was farther down the password list, it would have taken
    longer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6247528-385f-4abf-8a27-b28d83faceae.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you got to use three new tools for password cracking, and also
    learned how to add a new item to the main menu. Johnny, and his progenitor, John
    the Ripper, are the most popular tools you can find on Kali, for cracking hashes
    on the local machine, so you will probably choose one of these two tools when
    you are testing your users' password decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra has many more options than basic John-based tools, but with the improved
    power comes increased complexity. Hydra is designed to attack specific devices
    over the wire, but as you discovered, the attack surface is very small and the
    tool is very noisy.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned that Hydra can use the GPU instead of the CPU, giving
    you even faster cracking times.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the ancient and broken protocols, NetBIOS
    and LLMR, and how to exploit and gain access to Windows systems using their vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More on John The Ripper: [https://www.openwall.com/john/](https://www.openwall.com/john/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More on Hashcat: [https://hashcat.net/hashcat/](https://hashcat.net/hashcat/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More on Hydra: [https://github.com/vanhauser-thc/thc-hydra/](https://github.com/vanhauser-thc/thc-hydra/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
