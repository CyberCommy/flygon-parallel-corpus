- en: Chapter 6. Using Unreal Matinee
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unreal Matinee is yet another powerful tool offered by Unreal Engine 4\. Unreal
    Matinee is used to create cinematics, cutscenes, animations, set pieces, and so
    on. It is also easy to learn, and you can use it to create amazing things. Usually,
    Matinee is used in conjunction with Blueprints. In the previous chapter, we had
    left out scripting a few things in our game, which we will be covering now. The
    following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Unreal Matinee?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unreal Matinee user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Unreal Matinee in our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Unreal Matinee?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unreal Matinee is an animating tool. It provides tools which you can use to
    animate the properties of actors during gameplay or create cinematics, cutscenes,
    set pieces, and so on. With the help of curves and key frames, you can use this
    tool to animate actors in the game, just like any other video editing software
    that professionals use. You can also use Matinee to set up Matinee events.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Matinee actors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can use Matinee, the first thing you need to do is to add a Matinee
    actor into the scene. A Matinee actor is depicted by a clapper, like the ones
    you see on movie sets, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Matinee actors](img/image00363.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have already discussed one way of adding Matinee actors in [Chapter 4](part0033.xhtml#aid-VF2I2
    "Chapter 4. Using Actors, Classes, and Volumes"), *Using Actors, Classes, and
    Volumes*, through the Modes panel. Another way of adding Matinee actors while
    keeping a check on how many of them are placed in the scene is by clicking on
    the **Matinee** button in the Viewport toolbar, which opens a drop-down menu.
    Here, at the top of the menu, under the **New** section, you have the option to
    create a new Matinee actor by clicking on **Add Matinee**. Underneath this, in
    the **Edit Existing Matinee** section, you can find a list of all the Matinee
    actors placed in the list. Double-click on any of them to edit.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a new Matinee actor or double-click on an existing one, a new
    window opens up. Let us take a closer look at it.
  prefs: []
  type: TYPE_NORMAL
- en: The Unreal Matinee user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anyone who has used Matinee in **Unreal Development Kit** (**UDK**) will find
    that the layout and the user interface are quite similar.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Unreal Matinee user interface](img/image00364.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The tab and menu bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just as in a web browser, in the tab bar, you can see how many windows are currently
    open, swap between them, rearrange them, and close any one of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![The tab and menu bar](img/image00365.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Below that is the menu bar, containing the following actions and functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File**: From here, you have the option to either import sequences from FBX
    files (since FBX files, along with the mesh, also store the animation of the object,
    importing it will import the animation sequence of that FBX file to Matinee),
    export an animation sequence, save a sequence, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: With this tab, you can undo or redo previous actions, add or remove
    key frames, edit sections, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Playback**: This gives you the options to play, pause, stop, loop, and reverse
    your animation sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: Here, you can set what you wish to view, enable grid snapping, fit
    the entire sequence in the track view panel, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Window**: This tab allows you to customize your Matinee UI by setting what
    panels and windows you want displayed in the UI, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Help**: You can access document and tutorials on Matinee from here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below the menu bar is the toolbar. Here, you can access the most commonly used
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image00366.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From left to right, the icons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add Key**: This adds a key frame on the current position of the animation
    track.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interpolation**: Interpolation means finding a point between two other points.
    In key frame animation, interpolation is an important tool, since it makes the
    animation smooth. With this, you can set the initial interpolation mode of the
    keys and curves. You can choose from linear, constant, curve auto clamped, curved
    auto, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play**: The play button plays the animation sequence you create. You can
    see the animation in the Editor Viewport. The animation only plays once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop**: If you want to view the animation multiple times, you can click on
    the **Loop** button, and it will loop the animation once it has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop**: Clicking on this will stop the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse**: This plays the animation in reverse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera**: Clicking on this will enable you to create a **Camera** group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Playback Speed**: With this option, you can set the speed at which you want
    the animation to play. You can choose from **100%**, **50%**, **25%**, **10%**,
    and **1%** of the normal play speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snap Settings**: If you have grid snapping enabled, you can set the snap
    size from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Curve**: Enabled by default, you can use this to open/close the Curve Editor
    window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snap**: Represented by a magnet, this toggles grid snapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time to Frames**: This snaps the timeline cursor to the snap size set in
    **Snap Setting**. It is enabled only if the snap size is in frames per second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed Time**: Using this, you can fix the playback speed to the framerate
    chosen in the **Snap Setting** menu. It only works if the snap setting is in frames
    per second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequence**: Click on this to zoom to fit the entire sequence you created
    in the Tracks panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selected**: This zooms to fit the selected key frames in the **Tracks** panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop**: This zooms the timeline to fit the loop sections in the animation
    sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop Sequence**: This sets the starting point of the loop section to the
    start of the animation sequence, and the end to the end of the sequence. In other
    words, clicking on this will resize and fit the loop section to the entire animation
    sequence you created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End**: If you click on the arrow at the far right corner of the toolbar,
    you will find three more icons. The first of them is **End**. This moves the Tracks
    timeline to the end of the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recorder**: This opens the **Matinee Recorder** window, which you can use
    to record sequences for your Matinee.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Movie**: Finally, we have the **Movie** option. You can use this to create
    a movie from the animation sequence you created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Curve Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next window we have is the **Curve Editor**. As with any animation software,
    you can edit your animations using curves. It is also used if you want to have
    particle systems in your animation sequence. There are other numerous uses of
    curves, but these are the most common uses. The *x* axis represents time, and
    the *y* axis is the value that you are changing in your Matinee over time. The
    curve in the Curve Editor shows that the value is changing over time. For instance,
    if the value is changing at a constant rate, the curve would be linear, if the
    value is changing exponentially, the curve would be an exponential curve, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: To view and edit curves, you first have to toggle them in the **Tracks** Panel.
    Once done, you will see the curve of the corresponding animation sequence, which
    you can then edit in order to further edit or fine-tune your animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Curve Editor](img/image00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the top is the toolbar of the Curve Editor. Let''s look at its options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Horizontal**: This option enables zooming to fit the selected curve group
    horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vertical**: This is the same as the **Horizontal** option, but it fits the
    selected curve group vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All**: It fits the curve both horizontally as well as vertically so that
    the whole curve is visible in the Curve Editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selected**: This performs the same function as **All**, but only for the
    selected points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pan**: This switches the **Curve Editor** to pan mode, meaning you can move
    around in the graph editor by holding the left mouse button and dragging it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom**: This switches to the zoom mode. You can zoom in and out by holding
    the left mouse button and dragging the mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto**: This changes the selected curves interpolation to **Auto**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto/Clamped**: Set the selected curves interpolation to **Auto/Clamped**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: This option changes the interpolation to User (if you make any change
    to the curve while it is set to **Auto** or **Auto/Clamped**, it will change the
    interpolation to User).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Break**: This changes the interpolation to **Break**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linear**: This changes the interpolation to **Linear**. This means that the
    curve between the two points will be linear, that is, a straight line between
    the two key frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constant**: This changes the interpolation to **Constant**. This means that
    the curve between the selected key frames will be a straight horizontal line.
    In other words, the value along the *Y* axis will remain constant over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flatten**: Clicking on this will flatten the selected tangent of the curve,
    making it flat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Straighten**: This option removes any irregularities from the selected tangent
    of the curve and makes it straight.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show All**: This shows all the tangents of all the curves present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: Finally, we have the **Create** tab button. You have the option
    to create multiple tabs. You can switch between tabs by clicking on the arrow
    button at the extreme right corner of the toolbar and selecting which tab to go
    to using the **Current** tab menu. You can also delete the current tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below the toolbar, on the left-hand side, is the track list. Here, you can
    see all of the tracks in the current tab. At the top is the name of the track,
    and at the bottom are buttons that you can toggle on/off. In this example, we
    have a movement track, so there are three buttons representing each axis: red
    represents the *X* axis, green the *Y* axis, and blue the *Z* axis. At the far
    right is a yellow button, which can be used to toggle the entire track on/off.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Curve Editor](img/image00368.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To its right, we have the Graph Editor, where you can see and tweak the curves.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Curve Editor](img/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see that there are three separate curves—each representing the
    buttons we just discussed. You can tweak each of the curves here to get the desired
    result. Select a point on the curve and change the tangent to alter the shape
    of the curve.
  prefs: []
  type: TYPE_NORMAL
- en: The Tracks panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Tracks** panel, you can see all of the tracks, folders, and groups
    in your animation sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Tracks panel](img/image00370.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see the timeline specifying how long the animation is, the groups
    you have created, all the components that are involved in the animation, and so
    on. At the top of the panel is the tab bar. Below it is the **Group** tab. For
    simple animations, you do not really need this, but if you have a complex animation
    sequence (such as a cinematic or a cutscene), you may want to make use of this
    feature to keep your workstation neat and organized. You can put similar actors
    in their respective tabs. For example, if you have cameras, you can place them
    in the **Camera** group. To create a group or a folder, right click on it; this
    will open a menu, from which you can create a group or a folder.
  prefs: []
  type: TYPE_NORMAL
- en: Below the **Group** tab, on the left, is the Group and Track list. All of the
    groups and tracks in your animation sequence or in the current tab are listed.
    You can also add or remove groups here.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Tracks panel](img/image00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are various tracks under a group. Each individual track
    has its own animation which you can edit. You can also toggle an entire track
    on/off by clicking on the gray box on the left of each track. On the bottom-right
    corner are two more boxes. The button on the left enables or disables the respective
    track from playing in the animation sequence. The one on the right enables or
    disables the Curve Editor for that track. Also, some tracks do not have these
    two buttons, indicating that those tracks do not have a curve.
  prefs: []
  type: TYPE_NORMAL
- en: To its right is the animation timeline.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Tracks panel](img/image00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the bottom, you can see the animation timescale. Above it, the translucent
    white box with the red edges depicts the total duration of the animation time.
    You can click on the edges and drag them left or right to decrease or increase
    the duration of the animation respectively. The light green box shows the duration
    of the loop sequence. This means that only the section inside the green segment
    will loop, the rest will be ignored. You can also increase or decrease its size
    by clicking and dragging the green arrow right or left. There is also the timeline
    slider, depicted by the white line, which you can use to jump to any frame. Finally,
    you can click anywhere on the time bar to jump to any frame. The timeline slider
    will jump to wherever you click.
  prefs: []
  type: TYPE_NORMAL
- en: The Details panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, there is the **Details** panel, wherein you can set the properties
    of certain tracks, groups, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Details panel](img/image00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the properties of the key frame of a movement
    track. You can toggle the movement track from playing in the Viewport, toggle
    the rotation on/off, set whether you want to see the track in the Editor Viewport,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Animating the door
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are acquainted with Unreal Matinee and its user interface, we can
    go ahead and add a few animations to our game. This includes animations for the
    doors opening, a small cutscene in the first room, and drawing a bridge for the
    AI character.
  prefs: []
  type: TYPE_NORMAL
- en: Room 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to actually use Matinee in our game. Select the Matinee actor
    near the door in the first room and click on **Open Matinee** in the **Details**
    panel. Once opened, the first step is to add a group. Before making a group, be
    sure that the actor or actors you want to animate are selected in the **Editor
    Viewport**; otherwise, the group will not have any actor reference in it, and
    you will get an error saying **Nothing to keyframe**, or **Selected object cant
    be keyframed on this type of track**.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the door to select it, right-click on the **Track list** in the **Tracks**
    panel, and select **Add New Empty Group**. When asked to name the group, name
    it **Door** and press *Enter*. The door will be attached to this group. This will
    create an empty group in which you can place multiple tracks (movement, visibility,
    particles, and so on). First, we will need a movement track. Right-click on **Door**
    and select **Add New Movement Track**. Once created, you will see it in the **Tracks**
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we do not want the animation to last for 5 seconds, since it is too long
    for a simple door opening animation and would unnecessarily slow the game down.
    So, decrease the animation duration to 2 seconds by left-clicking on the red arrow
    on the extreme right (which is above the 5-second mark) and move it back over
    to the 2-second mark. If you want, you can also increase the loop sequence duration
    from 1 second to 2 seconds by doing the same with the green arrow on the right
    edge of the green box.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the timeline, before the Movement track, you will see a small maroon arrow
    over the 0-second mark. This is a key frame. Since we have a simple animation,
    we only need two key frames: one at the beginning of the animation sequence and
    the other at the end (as shown in the preceding screenshot). To add the second
    key frame, move the animation slider to the end of the animation timeline and
    press *Enter*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the key frames set up, go back to the Editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00376.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice something on the top-left corner of the Viewport. Whenever you
    open Matinee, the Viewport changes to preview the corresponding Matinee animation.
    At the top left, written in white text is **Matinee**. This is basically notifying
    that the Viewport is currently set to the preview mode. Next to it, written in
    teal text is the resolution of the viewport. Below it, written in green text,
    is the number of frames in the corresponding Matinee animation. At the top-left
    corner, it reads **Matinee**. Next to it, you can see the resolution, and below
    it, the total number of frames in the animation. In this mode, you cannot save,
    open, or load a scene, nor can you play the game. In order to perform any of these
    actions, you must first close Matinee.
  prefs: []
  type: TYPE_NORMAL
- en: Now, making sure that the timeline slider is at the end of the animation timeline,
    using the transform tool, move the Door upwards or along the *z* axis. Move it
    until it is out of the way.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will see a vertical yellow line whenever you move the door. This line shows
    the path the door will follow when the animation is played. To view the animation,
    go back to Matinee and click on the **Play** button in the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing we need is to make use of the camera we added earlier. When
    the player places the key cube on the pedestal, we want to play a small cutscene
    showing what effect it has, so that the player knows what the main objective is
    in the rooms. In this cutscene, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Take the control away from the player.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch from the main camera to the camera in front of the door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give back the player control over the character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this, we will need to add a camera group. Going back to the Matinee window,
    right-click on the **Tracks** panel and click on **Add New Camera** Group (again,
    make sure that the camera is selected in the Viewport). Name this group **Camera**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A Camera group has two tracks: a **Movement** track and a **FOVAngle** angle
    track. You can use this to move the camera and set its field of view when the
    Matinee is playing. In this case, we want the camera to be stationary. So, take
    the timeline slider to the end of the timeline and hit *Enter* in the **Movement**
    track of the camera group to create a key frame.'
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need is what is called a **Director** Group. One of its uses
    is to assign which camera to switch to when playing the animation. Again, right-click
    on the **Tracks** panel and select **Create New Director Group**. A new, separate
    track will be created above the **Track** panel for the **Director** Group.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our **Director** group, we need to tell it which camera to
    switch to when the animation is playing. To do so, select it and press *Enter*.
    This will open a small window asking you which group to cut to. This window enlists
    all the groups we have created in our Matinee. Here, click on the dropdown menu,
    select **Camera**, and click **OK** (Be sure that the timeline slider is at the
    0-second mark). Once done, the **Camera** group will be assigned to the **Director**
    group.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now if you play the Matinee, you will see that in the Viewport, the camera switches
    to the one we placed in front of the door. We have our Matinee set up. Now we
    need to script in when it should play. We want it to play when the player places
    the key cube on the pedestal. So, open Blueprint, and in the sequence we created
    for the placement of the key cube, add a **Sequence** node. Attach this to the
    **Gate** node. Next, attach the **Then 0** output pin to the **Set Actor Hidden
    in Game** node.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00381.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, with the **Matinee** actor selected in the Viewport, right-click and create
    its reference. Then, drag the pin of this node and type in `Play` when the menu
    opens to create a **Play** node. Attach this to the Then 1 pin of the **Sequence**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 1](img/image00382.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you test out the level, you will see that everything is working as intended;
    when the player places the key cube on the pedestal, the camera will switch to
    the one in front of the door, and the animation of the door will start playing.
    However, there is still something left to do. You can still control the player
    (move around and shoot) while the cutscene is playing. We want the player to be
    unable to move or shoot while the animation is playing. To do so, select the **Matinee**
    actor, and in the **Details** panel, under the **Cinematic** section, check the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disable Movement Input**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Look at Input**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hide Player**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Room 1](img/image00383.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And there we have it: we have just created our very own cutscene. Let us move
    on to the large door in the second room.'
  prefs: []
  type: TYPE_NORMAL
- en: Room 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the middle of the second room, we have a large door. We want the player
    to be able to use it when they place the first key cube upon the pedestal. So
    far, it is quite similar to the previous door. The only differences here are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The door opens when the player touches it on the screen (provided it is unlocked
    first).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The door closes when the player releases their finger from the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, the Matinee part will be similar; we will create a Movement track 2 seconds
    long and animate the door going upwards. Here, since we are not creating a cut-scene,
    we do not need a **Camera** group or a **Director** group, neither do we need
    to disable the player input while the matinee is running. With that in mind, select
    the **Matinee** actor near the large door and click **Open Matinee** in the **Details**
    panel. Animate the door using the **Movement** track, as we did with the previous
    door.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, open Level Blueprint. Here, instead of the cube opening the door,
    we will make use of the Touch input node. As with the previous triggers, add an
    overlapping event for the big trigger around the door. Set up the nodes as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 2](img/image00384.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, when the player overlaps the trigger, it enables the player input and
    opens the **Gate** node. When the player now touches the screen, it will play
    the **Matinee**. The only thing we need to script is what happens when the player
    releases the screen. Here, when the player stops touching the screen, the door
    will close, that is, the **Matinee** will play in reverse.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, create another reference of the **Matinee** actor (or just duplicate
    the one already there), create a **Reverse** node, and attach the **Matinee**
    actor to its **Target** input.
  prefs: []
  type: TYPE_NORMAL
- en: '![Room 2](img/image00385.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Upon testing the game now, you will see that when you place the key cube on
    the first pedestal and click on the door (when playing in the Editor, the mouse
    button acts as a touch input), the door opens; as soon as you let go, it closes
    again. Do the same with the doors in room 4, but you do not need to unlock the
    door first; you can simply script it so that it opens when the player is close
    to it and touches on the screen, and closes when the player releases their finger
    from the screen. Let us move on to the platforms for the bridge.
  prefs: []
  type: TYPE_NORMAL
- en: A bridge for the AI character
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the room with the AI character, the player has to make a bridge for it, so
    that it can cross the pit and unlock the key cube. There are switches that draw
    a segment of the bridge. The player has to quickly draw all of the segments of
    the bridge before the AI character falls it into the pit. In the third room, the
    bridge will have three parts, each part drawn by the switches on the pedestal.
    For our bridge, we will use the Cube primitive actor. Add three Cube primitive
    actors into the scene, set their scale as `2.2`, `2.5`, `0.3` respectively, and
    place them at the bottom of the pit. Make sure to set their mobility to **Movable**.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00386.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After doing this, add three Matinee actors, one for each section. Then, in
    Matinee, set the animation time as 1 second and animate the section coming up
    by moving it so that it is aligned with the ground. Make sure that the section
    is perfectly aligned. If it is too high, the AI character will not be able to
    get on it, and if it is too low, the AI character will not be able to get to the
    other side. If you see that the upper surface of the section is green (because
    of the Nav Mesh Bounds Volume), it means that the section is walkable for the
    AI character, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00387.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do the same with the remaining two sections, ensuring that they fit perfectly
    when they are drawn.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00388.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need to do is script the Matinee into our game. We have four
    pedestals in the third room. From left to right, the first one activates the AI
    character, the second one draws the first section of the bridge, the third one
    draws the second section, and the fourth one draws the third section. So, open
    up Level Blueprint, and just as with the large door in the second room, script
    it in so that the Matinee plays when the player is close enough to the switch
    and touches on the screen. Do this for all three trigger boxes playing their respective
    Matinee.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00389.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the AI character falls into the pit, we want the sections of the bridge
    to go back down to the bottom of the pit, so that when the player starts over,
    they have to press the switches again to draw the sections. Go back to the trigger
    box which teleports the AI character back to its starting position. To the **Sequence**
    node, add a pin, creating a reference for all three Matinee actors. Create a **Reverse**
    node and connect all three actors to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00390.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now if the AI character falls into the pit, apart from being teleported back
    to its starting position, the sections of the bridge will also reset to their
    original position.
  prefs: []
  type: TYPE_NORMAL
- en: We have our puzzle set up. However, currently the puzzle has no payoff. We had
    mentioned earlier that when the AI character crosses the pit, it unlocks the key
    cube. But right now, our key cube does not seem to be locked. What we can do is
    encage our key cube, which opens when the AI character successfully crosses the
    pit. For this, place four cubes around the key cube (which act as walls of the
    cage), create a Matinee of them opening, and set up a trigger box, which plays
    the Matinee when the AI character overlaps the trigger box. So, place four cubes
    around the key cube enclosing it, and apply the door material to them (if you
    wish, you can duplicate **Door_Material**, and in the material editor, remove
    the connections to the **Refraction** expression and apply that to the walls,
    so that the key cube is properly visible from the other side of the pit). When
    placing these, ensure that the trigger box around the key cube is also enclosed
    within the walls.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00391.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now add a Matinee near this cage and place a trigger box over the Target Point
    actor. Open up Matinee so that we can create our animation. Here, we have four
    separate objects to animate. However, since they all animate together, it would
    be wasteful to create four different Matinee actors for each wall. Instead, we
    will animate all four walls in the same Matinee. For this, we will create four
    different groups—one for each wall—each with a movement track. Select the first
    wall, create an empty group (name it **Wall1**) with a Movement track, and animate
    it going downwards. Set the animation time to 1-second. Then, create another empty
    group (name it **Wall2**) with a Movement track for the second wall, and animate
    it going downwards. Do the same for the remaining two walls.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00392.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We now have four separate animated objects using the same Matinee actor. The
    last thing left is to set the overlapping event for the trigger box, which plays
    the Matinee.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bridge for the AI character](img/image00393.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From what you have learned, apply the same method when making the bridges in
    the fourth room, making sure that the AI character can cross them when they are
    drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we looked at Unreal Matinee: what it is, its UI, and what
    can be done with it. We used it to create cutscenes and animate doors and bridges.
    And with this, we have completed our little game, which demonstrates the various
    features and tools offered by UE4\. The next step is finalizing the game (adding
    in a main menu, polishing the game, and so on), packaging it into an `.apk` file,
    porting it to an Android device, and testing it there.'
  prefs: []
  type: TYPE_NORMAL
