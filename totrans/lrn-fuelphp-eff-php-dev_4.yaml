- en: Chapter 4. Demo Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are through with the introduction to the FuelPHP framework, it's
    time to build something. We will run through the Oil command-line tool migration,
    putting it all together in the example application. In this chapter we will be
    creating a simple blogging application much like WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'In their own words, WordPress is becoming the operating system of the Web.
    According to founder *Matt Mullenweg*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"WordPress now powers 18.9% of the Web, has over 46m downloads"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Visit the following link for more information on the article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/](http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, WordPress has a focus much larger than blogging or simple journals. Although
    a simple application or website, creating a simple blog will demonstrate a lot
    of the FuelPHP features—from database migrations, pivoting ideas, and code to
    full temporal models to store revisions of journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to code, let's first think about what to build and what the
    minimum viable product will be.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and running database migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Oil to create models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Oil to create controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using the HTML5 Boilerplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together to create an administration system with scaffolding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Oil command-line console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like WordPress, we're going to start small and demonstrate some of the
    FuelPHP tools that make your life easier while developing our project with FuelPHP.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating your project, first create a source control repository. In this
    example, we'll use GitHub ([https://github.com](https://github.com)), but alternatives
    such as **Bitbucket** ([https://bitbucket.org](https://bitbucket.org)) or **beanstalk**
    ([http://beanstalkapp.com](http://beanstalkapp.com)) may be more suitable for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, log in to your account and then create a new project/repository.
    For the purpose of this application we can choose the public option as it's free
    with GitHub. In this example, we'll call our project `journal`. Make sure to record
    the repository URL from the right–hand side of the page—you will need it shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create the project on our development machine, but first you need
    to navigate to your `home` folder using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, navigate to the `Sites` folder using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t have a `Sites` folder, let''s create one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once in your Sites folder, run the following Oil command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that in these examples, the $ represents the start of a new line
    in the terminal. When running the commands you should only need the text after
    the `$` for example `php oil create journal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Apache on your local development machine, the next step will
    be to create the virtual hosts (**vhosts**) for the new site and then modify the
    hosts file. You need to have an Apache configuration with a `sites-available`
    folder and a `sites-enabled` folder. Then, a small script from a friend will prove
    to be invaluable. It can be installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This script is a set of PHP functions that set up the Apache vhosts and the
    hosts file on your computer. All of the actions are simple, but they allow you
    to get it set up quicker. The code can be viewed publicly at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/maartenJacobs/quickhost](https://github.com/maartenJacobs/quickhost)'
  prefs: []
  type: TYPE_NORMAL
- en: Or or the more information can be found at [https://github.com/digitales/quickhost](https://github.com/digitales/quickhost)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scripts are installed, we will be able to run the following set of
    commands to set up Apache so that we can use a local domain `http://journal.dev`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The reason for using `sudo` is to allow Apache to be gracefully restarted and
    to modify the hosts file. This will map the domain name to the localhost IP address
    (`127.0.0.1`). In this example, we have chosen the `.dev` **top-level domain**
    (**TLD**) to differentiate it from the production and the staging environments.
    We could have chosen `.local`, but this can cause conflicts with the Active Directory
    ([http://en.wikipedia.org/wiki/Active_Directory](http://en.wikipedia.org/wiki/Active_Directory))
    on some operating systems, especially on Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This has been tested on Mac OS X and it should work on *nix, but may not work
    on Windows environments without changing the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need a data store for the journal entries, so let's configure it now.
    Load the `db.php` configuration found at `fuel/app/config/development/db.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned before, FuelPHP has the notion of environments, so we can add
    the development database configuration to source control and it won''t affect
    the other environments. Therefore, your `db.php` file should look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I tend to setup a separate database users for each project. This ensures that
    no project can touch the database of another project. In my db.php I'm using a
    dbname, username and password of journal_dev so you are welcome to change your
    version of the db.php file.
  prefs: []
  type: TYPE_NORMAL
- en: Although not recommended on the live environment, enabling `profiling` can help
    while developing the project. The example configuration has it enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the code and the repository, now let''s link them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the `<repository URL>` above with your repository URL. Now, is also
    a good time to set up a few branches for the different environments: `develop`,
    `staging`, and `production`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Continuing on the setup theme, let's set the database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating the tables in the database, let's first detail what data will
    be stored and which initial fields will be there in the tables.
  prefs: []
  type: TYPE_NORMAL
- en: For blogging, we will have blog posts or entries and these will have a published
    date. They will be categorized to enable grouping of similar themes. Each post
    will be associated with an author (user) and will have content and an excerpt.
    We can add free-form tagging later.
  prefs: []
  type: TYPE_NORMAL
- en: Entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following fields exist in the `Entries` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (int): This will be the primary identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slug` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`excerpt` (text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content` (text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`published_at` (int)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated_at` (timestamp) - This will be a timestamp of when the record was
    last updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following fields exist in the `Categories` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (int): This will be the primary indentifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slug` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following fields exist in the `Users` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (int): This will be the primary indentifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email` (varchar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_login` (timestamp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login_hash` (text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile_fields` (text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need a link table so that multiple entries can be categorized in the
    same categories.
  prefs: []
  type: TYPE_NORMAL
- en: categories_entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following fields exist in the `categories_entries` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (int): This will be the primary identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category_id` (int): This will be the primary identifier of the category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_id` (int): This will be the primary identifier of the entry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have noticed that each table has an `id`, a `created_at` table, and
    an `updated_at` field. These are automatically added by the FuelPHP Oil tool and
    can prove to be useful when linking or forming relationships between data objects.
    They do add a minimal overhead, but this should not be of concern at this stage,
    as the extra storage required is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create some migrations using the FuelPHP Oil tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will create the migrations to assemble the posts database table. There
    is no need to detail the `id`, `created_at`, or `updated_at` fields as these will
    be automatically generated. If you don't need these extra time-based fields, you
    can append `--no-timestamp` at the end of the `generate` command.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are running through migration examples here and we will use the proper entries
    table when generating the models later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Migrations and Oil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When quickly creating projects and getting the bare bones together, the FuelPHP
    Oil tool can handle some of the more repetitive tasks for you, allowing you to
    concentrate on other aspects of the project. This ranges from setting up the database
    tables (as demonstrated before) to creating models and controllers. The FuelPHP
    Oil tool can also be used to scaffold an administration system that is ready to
    be used to administer contents with a full user-authentication system. It'll provide
    the starting point; although the results won't always be pretty, it will be functional.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to test ideas quickly and iterate towards the perfect code.
    We'll run through the individual features of Oil to create models, controllers,
    and database migrations. This will give us more time to tweak and create a more
    polished project/journal.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most useful features of Oil is the ability to migrate the database
    structure. These can be used to ensure the consistency between environments. When
    deploying code, it's possible to run migrations on the database as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Migrations can be used to rename a table, add and remove fields or even tables.
    Oil has the notion of magic migrations. These start with a keyword''s prefix,
    making it easy to see what they will be doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to be aware of the keywords when creating a migration. Keywords include
    `create_`, `rename_`, `add_`, `delete_`, `rename_`, and `drop_`.
  prefs: []
  type: TYPE_NORMAL
- en: Migrations are stored in `fuel/app/migrations` and a list of performed migrations
    is stored in `fuel/app/config/<environment>/migrations.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the migration''s database table records the current state of
    the project. Running migrations is as a simple as typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can simply type `r` and `g` to run the refine and generate Oil actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to migrate up or down, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These commands can be worked into a deployment script, so that migrations can
    automatically be run when the new code is added to different environments. This
    is particularly useful for avoiding errors on the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before progressing to generating models and their database tables, let''s drop
    the posts table we created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a brief understanding of migrations and Oil, let''s put Oil
    to use. We''ll create a model along with their corresponding database table details
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create both the model and migration. Let''s open the newly created
    `entry.php` model, located at `fuel/app/classes/model/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice in the newly generated model that it is extending the ORM Model.
    For this to work, we''ll need to include the ORM package in the autoloader. This
    is a good chance to introduce the FuelPHP autoloader configuration. Load the configuration
    file located at `fuel/app/config/config.php`. Look for the `''always load''` section
    and uncomment the `''always_load''` array, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When you install new packages, simply add them in the `always_load` array to
    automatically load them. Sometimes, a package is needed only in a certain method
    or class. In this instance, however, we can load the package only when needed.
    More information on this can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/package.html#method_load](http://fuelphp.com/docs/classes/package.html#method_load)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us go back to the `entry` model. You'll notice the `$_properties` array,
    this will make it easier to call variables from the model layer. If you add a
    new database field, it'll need to be added to the `properties` array. The ORM
    package includes the notion of observers, these are actions that can execute methods
    or functions at different times. The ones used in the model are `before_insert`
    and `before_update`. These are currently being used to create the timestamps at
    the time of adding or updating entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other observers are listed in the documentation; one that will be useful
    for use is `Observer_Slug`. This observer will handle turning the entry title
    to a URL safe and avoid the need to rewrite pre-existing functionality. Let''s
    add this observer to our entry model by adding the following snippet to the `observers`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we save an entry, the slug will automatically be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some other database tables we have to create. Let''s do this now
    and then we can create relations between their models to make our lives easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For the `entry` model, add `Observer_Slug` to the new category model.
  prefs: []
  type: TYPE_NORMAL
- en: For the `user` table, we are going to use the Auth package, as it includes the
    user authentication functionality. To do this, we need to copy the default Auth
    package configuration to our application configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, we should change the salt value in the `auth.php` configuration
    file. Once this is done, we have to run the following command to create the necessary
    `auth` tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the migration tool to make sure the database is updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the database structure established, we can relate the models
    with each other. This is made possible by the ORM model, which natively supports
    the following relationships:'
  prefs: []
  type: TYPE_NORMAL
- en: '`belongs_to`: This model has the primary key for the relation and it belongs
    to a single related object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_one`: Its primary key is stored in another table that belongs to this
    model. It has a single relation only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_many`: Its primary key is saved in multiple results of another model.
    Each other model will need to belong to this one. It can have many relations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`many_to_many`: This keeps track of the many-to-many relations using a linking
    table. This table keeps a record of the primary key pairs from the tables being
    linked. It can have, and belong, many models. For example, a blog post can have
    many categories and a category can be linked to many blog posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the journal, we'll use the `belongs_to`, `has_one`, and `many_to_many` relations.
    Making full use of the relationships only needs a quick addition to the already-created
    models. Load the entry model in your favorite text editor. The model can be found
    at `fuel/app/classes/model/entry.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the model just before closing the curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t always need to include the full `$_belongs_to` declaration. In most
    situations, we can simply use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'With these additions, we are configuring the ORM model to treat the relationship
    between entries and categories as a many-to-many relationship. Instead of directly
    linking categories to entries, we are using the `category_entry` link table. This
    table is named using the singular version of the tables to be linked in an alphabetical
    order; in this case, the joining of `categories` and `entries` gives us a table
    name `category_entry`. The reason we want to use the link table is because we
    want to have the ability to assign multiple categories to each entry, so that
    the categories can be reused without requiring duplication. For example, if we
    retrieve an entry, the list of categories would be obtained in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are looking for an entry with its ID set as `1`. If this
    is found, the full entry object will be returned, otherwise it will return false.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the many-to-many relationship, let's link the users to the entries
    that they authored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we need to add the `user_id` to the entries table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add `user_id` to the entry model `$_properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the relationship maps from `user_id` to the primary `id` key in the `user`
    table, we can just define the user as a part of the `$_belongs_to` array. Everything
    else will fall into place once the reciprocal relation is added to the `Model_User`
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Talking about the `Model_User`, it needs to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Although most of the user functionality are done from within the Auth package,
    adding the user model is necessary for the `Model_Entry` relation with the user
    data. Therefore, load the `user` model `user.php` located at `fuel/app/classes/model/`
    and add the following array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `category` and `category_entry` models also need the relations creating.
    To do this, navigate to the `category.php` file located at `fuel/app/class/mode/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the listing for the `entry.php` file located at `fuel/app/classes/model/category/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the models and the migrations, it would be a good idea to add
    them in the source control. Once that's done, let's start creating the controller
    to make use of the models and then the views (including forms).
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers, like the models, can be created using Oil. The main controllers
    will be for managing entries and categories. These will come in two flavors, the
    publicly viewable site controllers and the administration system for the entries
    and categories tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our controllers probably won''t be needed to handle RESTful requests, at least
    initially. So, we should extend the `Controller_Template` and as luck would have
    it, that is the way that the Oil tool is set up to run. When we create a controller
    with Oil, it''ll be created to extend the template controller. We only need to
    think about what actions and methods we need for doing this. As we will primarily
    be displaying the entries and categories information for the blog, let''s start
    with the `index` and `view` actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This will create the controller, a template file, and the views needed for the
    methods—`index` and `view`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at `entry.php`, which is located at `fuel/app/classes/controller/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There are a few interesting things to notice in the controller generated. The
    first is that each method that relates directly to a URL is prefixed with `action_`.
    This makes it easier to see which methods relate directly to a URL and which methods
    cover other functionality within the controller
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that the active view is being passed to the view in the
    `$data` array. This is used to pass variables to the view, allowing the logic
    to be done prior to view rendering. This leaves the views purely for presentation,
    as they should be. The keys in the `data` array will be translated to variables
    in the view, for example, `$data['subnav']` will be callable via the `$subnav`
    variable in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Controller_Template` class also has a couple of other methods—`before()`
    and `after()`—which are particularly useful. The `before()` method can be used
    for user authentication for the administration system, and this will be demonstrated
    later in this chapter. We will be using it for the administration system to ensure
    that only authenticated users can access the administration system. When using
    the `before()` method in your controller, make sure you call the `parent::before()`
    method, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating the controller with the Oil tool, a template and views are also
    created. Let's have a look at one of the views, load `fuel/app/views/entry/index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice the lack of opening and closing HTML body in the view. The
    test of the presentation elements are handled by the `template.php` file found
    in the root of the views folder. Before looking at `template.php`, let''s discuss
    some of the parts of the `index.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding line of code, it is using the core FuelPHP `Arr` class,
    which is a set of helper functions for working with arrays. In this instance,
    the `get` method is used. This allows you to check for a given key in an array,
    it then returns false if the key can't be found. The view is using this functionality
    to output the `'active'` style class for the active page / view.
  prefs: []
  type: TYPE_NORMAL
- en: The second core class being used is the `Html::anchor()`. This class provides
    a large selection of HTML tags, and it ensures that all tags used are valid with
    the `Doctype` declaration. We are using the `anchor` method to output a link to
    the view. The first value is the link, while the second is the display title (the
    bit in between the `a` tags). One reason for using this helper method is to ensure
    that the links work no matter what the URL of the environment is, or whether the
    app is installed in a sub folder or subdomain. Now, let's have a quick look at
    the `template.php` file found at `fuel/app/views/template.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the template uses the Twitter bootstrap to give a quick starting
    point for your projects. FuelPHP expects a CSS and JS folder within the public
    folder of your project. Loading CSS and JavaScript files is as easy as using the
    following code in your template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As with frameworks such as Ruby on Rails, FuelPHP implements a flash session
    for passing variables and values between page loads. By default FuelPHP has two
    flash sessions, named `success` and `error` by default. You can of course add
    as many flash sessions to FuelPHP as you need. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following examples are both ways by which the flash sessions are output
    in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of `template.php` is a fairly straightforward HTML. Creating websites
    that respond to the screen size of the visitor is proving to be very a popular
    way of supporting mobile devices. So we should start thinking about the mobile-sized
    screen first before adding layouts for the desktop. To help with this, we are
    going to make use of the HTML5 Boilerplate ([http://html5boilerplate.com](http://html5boilerplate.com)).
    We''re going to customize the version of the Boilerplate and this can be done
    via the [http://www.initializr.com/](http://www.initializr.com/) companion site.
    To do this carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Initializr website, there should be 3 options: Classic H5BP, Responsive,
    and Bootstrap. Choose the **Classic H5BP** option (the gray button) and then the
    **Responsive Bootstrap** 2.3.2 template option. Finally click on **Download it!**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the resulting downloaded file to the public folder of your journal application.
    Copy the `js`, `css`, and `img` folders into your assets folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the `index.html` file in your text editor and edit it. The next step
    is a case of taking elements from the `index.html` file and adding them to your
    `template.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example of what you will end up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you are finished with the `index.html` file, make sure to delete it from
    your public folder; otherwise you may have problems loading the journal website.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the `template.php` file has been mentioned earlier, except for the `Asset::set_path()`.
    The HTML5 Boilerplate includes the vendor folder for the `modernizr` JavaScript
    file. By default, the Asset loader will look into the `css` and `js` folders located
    at `public/assets`, but it won't look at the folders within those directories.
    We are using the `set_path()` method to include the vendor folder in the JavaScript
    loading. The second variable in `set_path()` lets the Asset loader know that the
    new path is a JavaScript folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a chance to check the site in the browser, for example, `http://journal.dev/entry`
    or `http://localhost/Site/journal/entry` or `http://127.0.0.1/Site/journal/entry`,
    depending upon your development machine configuration.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, the first web page that visitors will see is the FuelPHP welcome
    page. We should change this so that the entry listing page is the first one the
    visitors see. Doing this is quick and it can easily be done with routes in FuelPHP.
    Load the `routes.php` configuration file located at `fuel/app/config/`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You can change the welcome page to the entry listing page by changing `'welcome/index'`
    to `'entry/index'`.
  prefs: []
  type: TYPE_NORMAL
- en: Back in your browser, navigate to the top level of the journal site, for example,
    `http://journal.dev` or `http://localhost/Site/journal` or `http://127.0.0.1/Site/journal`.
    You will notice that your entry index page is showing.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have covered the basic parts of the controllers and views, and we
    installed the HTML5 Boilerplate. Now, we should look at the administration of
    the entries and categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before looking at the administration system, there is one thing left to do
    on the public site—categories. Let''s generate the category index and viewing
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You're probably thinking that it's all fine and dandy to be able to display
    entries and categories, but how do we actually deal with the administration system?
    The next section will teach us how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an administration system using Oil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to use the Oil tool to quickly build an administration system for
    entries and categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with creating migrations and controllers, Oil can also be used to scaffold
    the functionality for you. This comes in two flavors: one for the frontend, like
    we''ve already seen, and the other is the administration system with full controls.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before continuing, we need to rename the `category` and `entry` models. This
    is because they will be recreated as part of the administration system scaffolding.
    We rename them so that we have a copy of the previous relations that we set up
    in those models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the administration scaffold Oil command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `-force` element is needed to rerun the shared files in the administration
    system so that the category files are created.
  prefs: []
  type: TYPE_NORMAL
- en: Oil has created a few files for you, but, unfortunately, it does not know about
    the category and entry relationship or the `Observer_Slug` Property. As such,
    we need to relate back to the `Entry and Category` models, we will also need to
    add back `Observer_Slug`. This process will be straightforward with the recently
    renamed entry and category models.
  prefs: []
  type: TYPE_NORMAL
- en: 'While editing the models, we need to remove or comment out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We also need to do the same with the references in the administration entry
    and category controllers. `Observer_Slug` that is defined in the models will handle
    the slug.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, you need to check lines 32, 66, and 86 of `category.php` located
    at `fuel/app/classes/controller/admin/;`, and also check the lines 32, 69, and
    92 of `entry.php` located at the same folder.
  prefs: []
  type: TYPE_NORMAL
- en: As a part of the scaffolding process, a couple of forms have been created and
    are shared between the creation and editing of both entry and category views.
    Load `fuel/app/views/admin/category/_form.php` and `fuel/app/views/admin/entry/_form.php`.
    In both forms, comment out the references to slug as it is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, navigate to `http://journal.dev/admin` or `http://localhost/Site/journal/admin`
    or `http://127.0.0.1/Site/journal/admin` and you will be redirected to a login
    form. We haven't set up a user account yet, but Oil comes to the rescue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load your terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This starts an interactive console, which can make use of the core FuelPHP and
    package code. In this instance, we need to call the Auth package to create a new
    user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This command will output the `user_id` of the newly created account. `100` represents
    the highest default user privilege and role in the Auth package. To exit the console
    session, simply type `exit` and run it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will be able to log in to your newly created administration system.
    From there, you will be able to add new categories and entries.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has given a brief introduction to the project structure and how
    the FuelPHP Oil command-line tool can help you get set up very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Oil acts as a scaffolding structure, but you will still need to fill in the
    gaps. For example, it's possible to retrieve the linked entries and categories
    from the blog, but we still need to build the necessary administration controls
    for setting up with the relationships.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at packages in more detail and then create
    our own package, which can be shared with the community.
  prefs: []
  type: TYPE_NORMAL
