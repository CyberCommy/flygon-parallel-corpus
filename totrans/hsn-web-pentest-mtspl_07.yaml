- en: Web Application Enumeration Using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enumeration is a subset of footprinting, which comes under the second phase
    of **Penetration Testing Execution Standard** (**PTES**) intelligence gathering.
    The main advantage of performing enumeration is to find the attack endpoints from
    where we can launch the attacks or launch a pseudo attack payload to confirm whether
    the vulnerability exists in the same endpoint. In most penetration test cases,
    the tester spends around 60-70% of their time looking for information. This information
    is used by the tester to identify some new vulnerabilities. The better the enumeration,
    the better the result of the penetration test. In this chapter, we''ll cover the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crawling and scraping with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit **Community Edition** (**CE**) with the web interface installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*nix-based systems or Microsoft Windows systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generic wordlists for the enumeration—SecLists recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the enumeration process, all of the information that we retrieved from
    the initial footprinting/reconnaissance will be in use for the first time. For
    pentesting a web application, we need to have an excellent understanding of the
    enumeration process. The better the recon and enumeration, the quicker and easier
    it is for us to find vulnerabilities in the web application. Using enumeration,
    we can find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Hidden files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup and configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subdomains and virtual hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's first look at DNS enumeration and how we can enumerate the DNS using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: DNS enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit can also be used to fetch information about a host from DNS records
    using the `dns_enum` auxiliary. This script uses DNS queries to fetch information
    such as **MX **(**mail exchanger**), **SOA **(**Start of Authority**), and **SRV **(**Service**)
    records. It can be used both inside or outside a network. Sometimes, a DNS service
    is configured to be accessible by the public; in such cases, we can use `dns_enum`
    to find internal network hosts, MAC addresses, and IP addresses. In this section,
    we will look at the usage of `dns_enum`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `enum_dns` keyword in the module search option to look for the
    auxiliary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86063e91-ef33-46fa-a9a9-0f17c3ee0ddc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Modules name will redirect us to the options page, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/576a1d83-d7e2-4755-a277-81b1de9fbe03.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can set the target details such as the DNS servers we're using, the
    domain name, and what records we want the script to fetch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on Run Module will create a new task where the output will be displayed,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9e200dc-743a-4632-9a6b-247cf1ae88ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now look at how we can improve this even further to meet our needs and
    make the module fetch more results.
  prefs: []
  type: TYPE_NORMAL
- en: Going the extra mile – editing source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `enum_dns` module in Metasploit is a bit outdated (we can check the TLD
    wordlist for updates). So, let''s customize the module to meet our needs. The
    idea is to provide `enum_dns` with the **Top** **Level Domain **(**TLD**) wordlist
    and the entries will be parsed and checked to query a record. Looking at the source
    code of the auxiliary, we can see that the TLDs it looks for do not have the new
    TLDs that were launched recently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be14fc73-abc2-4747-a2ce-8931e95ab362.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This can be seen in *line 302*, in the `modules/auxiliary/gather/enum.dns.rb` file,
    which can also be accessed online by visiting the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302](https://github.com/rapid7/metasploit-framework/blob/f41a90a5828c72f34f9510d911ce176c9d776f47/modules/auxiliary/gather/enum_dns.rb#L302)'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding source code, we can see that the TLDs are stored in the `tlds[]`
    array. Let''s edit the code to update the TLDs by performing the following steps
    . The updated TLD list can be found from the **Internet Assigned Numbers Authority**
    (**IANA**) website: [http://data.iana.org/TLD/tlds-alpha-by-domain.txt](http://data.iana.org/TLD/tlds-alpha-by-domain.txt):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the TLD file from the preceding URL and remove the first line, starting
    with `#`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4eb972f-0849-4f3e-a127-1f9e8caf708d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make a backup of the `enum_dns.rb` file using the following command before
    modifying the Metasploit module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the Metasploit framework is installed in the `/usr/local/share` directory.
    In our case, we have named the file `enum_dns.rb.bak`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `enum_dns.rb` file in any text editor of your choosing and go
    to line 29:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4bf600d0-633b-440f-816a-696a40ce9811.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add another register entry to the code so that we can provide our TLD
    wordlist to the Metasploit module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8660043-be68-4f86-bfa5-e1b19d29c204.png)'
  prefs: []
  type: TYPE_IMG
- en: In this module, the TLD enumeration is disabled by default. As we can see from
    the preceding screenshot, the `ENUM_TLD` option will perform a TLD expansion by
    replacing the TLD with the IANA TLD list (old list) when set to `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's search for the `ENUM_TLD` string to look for `function()`, which will
    be called when the TLD enumeration option is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we can see from the following screenshot, the `get_tld()` function will
    be called if `ENUM_TLD` is set to `TRUE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bda60f4-49f2-423f-b003-e8a81f296bc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now look into the `get_tld()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1e4ff33-bfa1-4b75-9f21-3b546f3eca9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now add a code section that will load the latest TLD wordlist and save
    it in the `tlds[]` array. Note that we have emptied the TLD array from the preceding
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1fe9b4a-4d97-4b51-9ea1-788638054bde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What did we do here? The following table explains the functions and code structures
    used in the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Code** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `tlds = []` | This declares an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `tld_file = datastore[''TLD_WORDLIST'']` | This saves the wordlist filename
    (with location) in the `tld_file` variable. |'
  prefs: []
  type: TYPE_TB
- en: '| `File.readlines(tld_file).each do &#124;tld_file_loop&#124;` | This reads
    the TLD wordlist line by line. |'
  prefs: []
  type: TYPE_TB
- en: '| `tlds << tld_file_loop.strip` | This strips off the `\n` from each line and
    saves it in the `tlds[]` array. |'
  prefs: []
  type: TYPE_TB
- en: 'Now, save the file and execute the `reload` command in msfconsole to reload
    the modules in the framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7934daa7-d143-4cc8-8dcf-5ed1475fc940.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use the customized `enum_dns` module now and execute `show options`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce31cf36-6ceb-43ff-b29b-d5c3d62e045d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, we have set the domain to `google.com`
    to find TLDs for Google. We have also set the `TLD_WORDLIST` option to our updated
    TLD wordlist. Let''s execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/166f726a-4d14-44e3-a1ef-da829a0e53b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Bingo! The updated Metasploit module now shows us the TLDs, which are provided
    to the module itself. Let's now move on to the next section where we will be enumerating
    files and directories using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enumerating files and directories is one of the most important steps during
    a pentest activity. A small misconfiguration on the server''s end can lead us
    to the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: Hidden files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Config files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files containing juicy information, such as credentials files, password backup,
    error logs, access logs, and debug trace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information contained in such files can help us to plan further attacks on an
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few auxiliaries that are available in the Metasploit framework
    that can help us to gather information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dir_scanner`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brute_dirs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prev_dir_same_name_file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dir_listing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy_of_file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backup_file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some examples of the aforementioned auxiliaries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look for a directory listing, as well as hidden directories, using the
    HTTP Directory Scanner module. We can use the `dir_scanner` keyword to find the
    module, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e16a2d3-9416-4d3b-a707-0b6244e8b5f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module name will take us to the options page, where we can
    specify the target IP/domain name and port number, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc888306-d73b-4752-baee-d7eb52530630.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Run Module will create a new task and we can see the output
    in the task window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4a4d35c-781d-4d7b-9f08-41497755b2c2.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the different directories discovered by the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also view the directory list once the scan is complete in the Hosts
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/766de6fd-2ccd-452e-a9ac-27610d144367.png)'
  prefs: []
  type: TYPE_IMG
- en: We go to the Analysis tab and choose the host on which we performed the scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on the Vulnerabilities tab will show us a list of all the directories
    found by the auxiliaries, as shown in the following screenshot. Similarly, we
    can use other modules listed at the beginning of this section to perform further
    enumeration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c59a87f-6d52-4f6e-9de0-5b24d8347c16.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will be learning about crawling and scraping using web
    auxiliaries.
  prefs: []
  type: TYPE_NORMAL
- en: Crawling and scraping with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also allows us to crawl and scrape the web using auxiliaries. Scraping
    is useful when we want to grab something from the source code of a website via
    a defined pattern. It could give us information such as directories mentioned
    in comments, developer emails, and API calls being made in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For crawling, we can use the `crawl` keyword to find the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4c96131-923d-4396-ab2e-430e75b4bef6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use `msfcrawler`. Clicking on the module will redirect us to the options
    page where we define our target, port, and depth. Then, click Run Module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/950e3cfa-5abf-43ed-bc6b-765f5c886045.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new task will be created and we will see the list of pages found in the task
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0745ce83-4605-4686-bfca-be33c6b6f2b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can use the HTTP Scrape module, `auxiliary/scanner/http/scraper`,
    to scrape a web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5360b1fc-bfc6-4bf5-ac85-f15c5593368f.png)'
  prefs: []
  type: TYPE_IMG
- en: The pattern field is a regex that we define to find whatever element we want.
    In our case, we want to grab everything inside the script tags on the [https://prod.packtpub.com/](https://prod.packtpub.com/) website, so
    our pattern is `<script \ type=\"text\/javascript\" \ src=\"(.*)\"><\/script>)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the module will create a new task and the auxiliary will extract all
    of the data listed in the script tags, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80c8f359-fcf1-40a1-a4bf-ba440c0c7eec.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's scan for virtual hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning virtual hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also allows us to scan for virtual hosts configured on the same
    IP. Virtual hosting is the hosting of multiple domains on a single server and
    each domain name is configured with a different service. It allows a single server
    to share resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the Metasploit console for this module. To search for the `vhost`
    module, we can use the `vhost_scanner` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/532d57b5-0f46-4d7e-8d0e-68b252ada96e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set `rhosts` and `domain`. In our case, we have used the `packtpub.com` domain and
    the `151.101.21.124` IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dd23bf9-b5be-432d-ade0-bf7ed0f1b07f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We run the module by typing `run`. The auxiliary will scan and all of the `vhosts`
    found will be printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c55d495-4b42-4ceb-b061-449f8d25b12b.png)'
  prefs: []
  type: TYPE_IMG
- en: This auxiliary can be used against internal networks as well to find different
    internal applications that are hosted on the same server, but are configured with
    different domains.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered enumeration, which is the most important part of
    a pentesting life cycle. We started with enumerating DNS with Metasploit modules
    and then moved on to enumerating files and directories. Finally, we looked at
    crawling modules as well as the `vhost` lookup module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be learning about using the web application scanning
    tool or WMAP. WMAP is a Metasploit plugin that is used to perform vulnerability
    scanning on a target web application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can we use a custom dictionary for files and directory enumeration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we customize the Metasploit payload to automate all of the enumeration in
    one go?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do we really need to provide a regular expression for scraping an HTTP page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a number of URLs that can be referred to for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://resources.infosecinstitute.com/what-is-enumeration/](https://resources.infosecinstitute.com/what-is-enumeration/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
