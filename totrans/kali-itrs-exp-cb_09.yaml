- en: Chapter 9. Privilege Escalation and Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using WMIC to find privilege-escalation vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive-information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unquoted service-path exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service permissions issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Misconfigured software installations/insecure file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at how one can exploit into the service and
    gain access to the server as a user with either a low or system privilege. In
    this chapter, we will look at how to exploit a low-privilege user to an escalated
    user - even the system user in this case. We will be covering escalation techniques
    for both Windows and Linux in this chapter. Usually in a network, when a server
    is compromised, an attacker always tries to elevate the privileges to do more
    damage. Once an attacker gains access to a higher-privilege user, he gains the
    capability to run system-level commands, steal password hashes and domain passwords,
    or even set up a backdoor and pivot the attack to target other systems in the
    network. Let us proceed to understand how these privileges are escalated.
  prefs: []
  type: TYPE_NORMAL
- en: Using WMIC to find privilege-escalation vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will understand how an attacker gains an insight of escalating
    privileges through WMIC. WMIC extends WMI for operation from several command-line
    interfaces and through batch scripts. **WMI** stands for **Windows Management
    Instrumentation**. WMIC can be used, apart from several other things, to query
    the patches that are installed on the system. To better understand it provides
    a list of all the details of the security patches installed during a Windows update
    or manual patches being put into place. They usually look like (KBxxxxx).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate this, we will require a Windows 7 machine with a minimum of two
    cores. If we are testing it in the VM, we can set the number of cores to 2\. The
    patch has to be missing as well for this recipe to work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the command prompt and execute the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We get a list of all the patches installed on the operating system. There are
    two ways to find a possible vulnerability to escalate privilege: by checking the
    KB sequence number check for the last sequence number installed and then finding
    the vulnerabilities disclosed after that patch number, or by the installed date.
    In this case, we search via the installed date and come across the following vulnerability:![How
    to do it...](img/image_09_002.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the date of discovery is around **2016-04-21** and our machine
    was last updated in December 2015\. We will take this vulnerability and find its
    patch number. A quick Google search for the patch MS16-032 gives us the path number:![How
    to do it...](img/image_09_003.jpg)![How to do it...](img/image_09_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We see that the KB number is `313991`. Let us check if this is installed on
    the system. Execute the following query in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great. There is no patch applied for it; now we will download the exploit from
    exploit-db from [https://www.exploit-db.com/exploits/39719/](https://www.exploit-db.com/exploits/39719/)
    . Once it is downloaded, rename it to `Invoke-MS16-032.ps1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open PowerShell and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bingo! We got a system level shell. From here onwards, the system is all ours
    to control; the post-exploitation phase can begin from here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wmic qfe get Caption,Description,HotFixID,InstalledOn`: This command executes
    the WMIC interface; `qfe` stands for `Quick Fix Engineering` and `get` parameter
    allows us to set the specific columns that one wants to view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`. ./ Invoke-MS16-032.ps1`: This command executes and loads the script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Invoke-MS16-032`: This command executes the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are other ways to escalate using the `wmic` command; this is not the only
    vulnerability one can find when querying for `wmic`. We may find more patches
    that might not have been installed. Let us now look at how sensitive information
    can be gathered to aid in escalating privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Sensitive-information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often there are scenarios where network admins have to write scripts to automate
    the process on thousands of computers in a corporate network. Being on each and
    every system to configure them individually is a tedious and time consuming task.
    There could be situations where, because of negligence, sensitive files just keep
    lying around in the systems. Such files may contain passwords. Once we retrieve
    hashes of a compromised system we can use them to perform **PTH** (**Pass the
    Hash**) attack and gain access to different accounts found on the system. Similary,
    if users have same passwords being used over multiple systems the same hash can
    be used on another machine to gain that users access using the PTH attack. There
    are ample places we might find sensitive information that could help us elevate
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Windows system, a Kali machine, and remote-shell access to the compromised
    machine is pretty much all that is needed for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following command to search the file system for file names containing
    certain keywords that might reveal sensitive information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To search for a certain file type matching a given keyword, use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To grep registries for keywords such as passwords, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also search for unattended or configuration files that might expose
    certain information. Have a look to see if the following files can be found on
    the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are other sample XML files that may interest us. Have a look at them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There could be files lying on the desktop, or in shared folders, containing
    passwords. There could also be schedulers with stored passwords in them. It is
    always better to scour the OS once to find sensitive information that might help
    in escalating privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Unquoted service-path exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to practice exploiting and gaining the additional
    privileges of a high-level user over an unquoted service path. First, let us understand
    what an unquoted service path is. What we are talking about is the path related
    to the service binary that is specified/configured without quotes. This specifically
    works only when a low-privilege user has been given access to the system drive.
    This generally happens in corporate networks where a user is given exception to
    add files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at the following screenshot to better understand this problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unquoted service-path exploitation](img/image_09_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we look at the path to the executable, it is specified without quotes. In
    this case, the execution method of Windows can be bypassed. When the path has
    a space in between, and is not specified in quotes, Windows basically executes
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding situation, the Foxit Cloud Safe Update Service has the path
    mentioned without quotes, which basically means it will search for the absolute
    path and cause a scenario where the `Program.exe` file will be executed. Let us
    now perform this practical example and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to get ready, we will need Metasploit and Foxit Reader, which can be
    found at [http://filehippo.com/download_foxit/59448/](http://filehippo.com/download_foxit/59448/)
    . The vulnerable version is Foxit Reader 7.0.6.1126\. Once Foxit is installed
    we can proceed with our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run a Windows cmd and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see that the binary path is not enclosed in quotation marks. Now we will
    proceed to make a reverse shell on our Kali machine, using `msfvenom` for this
    Windows framework. Open a Kali terminal and enter the following command, replacing
    the IP you have got for your Kali and the desired port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Start a reverse handler on your Kali machine using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's get this file on the Windows system. Since we are focusing on privilege
    escalation, we will simply host it on the web server and download it on the Windows
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the file is downloaded, we find a way to put it in the `C` drive so that
    the path resembles `C:\Program.exe`. This is only possible if the permissions
    are set incorrectly, or a misconfigured FTP setting points the path to the `C`
    drive, or any misconfiguration that allows us to paste our code on the path:![How
    to do it...](img/image_09_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will restart the Windows 7 system and wait for our handler, to see if
    we get a back-connection:![How to do it...](img/image_09_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully got a reverse connection on restart; this is due to the
    unquoted service-path vulnerability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let us check the user level we received the connection of:![How to do it...](img/image_09_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are in the system. Now we can perform any task on the OS without any restriction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the introduction, this is because of the execution flow of how
    Windows treats the path of service binaries. We are able to exploit any service
    that has a space in between and is not enclosed in quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us understand the `msfvenom` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, `-p` stands for the payload, `LHOST` and `LPORT` are
    the payload requirements, and `-f` states the format in which the payload is to
    be generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'More examples of unquoted service-path exploitation are available on exploit-db.
    Use the following Google dork command for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two good white papers on unquoted service-path exploitation can be found at
    [https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/](https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/)
    and [https://www.gracefulsecurity.com/privesc-unquoted-service-path/](https://www.gracefulsecurity.com/privesc-unquoted-service-path/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service permission issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to look at how to escalate privileges on weakly
    configured services. The core area of interest here is, when a service has been
    given all access. One can imagine the horrors of giving all access on a service
    when it runs with system privileges. In this recipe, we will look at a case study
    where Windows XP was shipped with vulnerable services and it was possible to execute
    system-level commands as low-privileged users. When such a case is possible, it
    is very easy to exploit and escalate privileges to a system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this activity, we will require a Windows XP machine. We will be exploiting
    the UPnP service that runs on the Windows XP OS. **UPnP** stands for **Universal
    Plug and Play** protocol. We will also need the **AccessChk** tool which is available
    in the Windows Sysinternals suite. It can be downloaded from ([https://technet.microsoft.com/en-us/bb842062](https://technet.microsoft.com/en-us/bb842062)).
    Let's go ahead and start with our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the Windows XP machine has been started, log in with a username with user
    privileges, open the command prompt in the folder where the `accesschk.exe` file
    is located, and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we know that there are two services with access rights to all the users,
    we will check the service configuration. Enter the following command in the command
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now change the binary path of the service, since the application has
    given all access. Keep a copy of the service configuration in case we need to
    revert it back to the original state. Now enter the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see that our commands have executed successfully. Now let us verify and
    restart the service by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once that is done, we see a service not responding error. However, this was
    bound to happen: since the binary path is incorrect, it will try to execute the
    binary path using the system privileges. In this scenario, it should have created
    a user. Let''s check by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `attack` user was successfully created; however, it will be a low-level
    user. Let us rewrite the binary path. Start and stop the UPnP activity again and
    get him/her admin privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's check the user details of the user attack to verify if he/she has become
    an admin user or not:![How to do it...](img/image_09_022.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What we see here is a normal user being able to create a user and make that
    user an admin as well. There are usually rights given to an admin or a system
    user; the flaw exists in the `upnphost` service, as it has given all access to
    services even to a normal user. Let us analyze the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accesschk.exe /accepteula -uwcqv "Authenticated Users" *`: The `accesschk.exe`
    file is a tool that checks the access rights of a particular service. The `/accepteula`
    command is meant to silently bypass the license-acceptance notification where
    we have to click on **I Agree** to continue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sc qc upnphost`: The `sc` is a command-line program used for communicating
    with the NT service controller and services. The `qc` command queries the configuration
    information for a service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sc config upnphost binpath= "net user attack attack@123 /add"`: The `config`
    command specifies edits to the service configurations. Here we are setting the
    binary path to create a new user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sc config upnphost obj= ".\LocalSystem" password= ""`: The `obj` command specifies
    the type with which the service binary is to be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we can see, there was one more service that was vulnerable. It is a good
    idea to see if privileges can be escalated via that service as well.
  prefs: []
  type: TYPE_NORMAL
- en: Misconfigured software installations/insecure file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we look at how an attacker can exploit misconfigured software
    installations and escalate privileges on the application. This is one of the classic
    examples where the installed setup is configured without considering the user's
    rights over the files and folders of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need to install an application called WinSMS. This
    can be downloaded from [https://www.exploit-db.com/exploits/40375/](https://www.exploit-db.com/exploits/40375/)
    and can be installed on any Windows machine running XP, Vista, 7, or 10\. For
    demo purposes, we will be using Windows 7\. Apart from this, we will need our
    Kali system up and running to take the reverse shell.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we install the application, we will execute our command prompt and check
    for the permissions on the folder where the file has installed itself. Enter the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, there is `Everyone` access, with full rights. That is a serious
    blunder, which means that anyone who has access to the system can make modifications
    to any files in that folder. An attacker can pretty much do anything. An attacker
    can place his malicious file with the executable file of WinSMS, or even replace
    a DLL file and get his commands executed. For demo purposes, we are going to place
    a reverse shell that we will create from Kali, and wait for a connection. Let''s
    begin. On your Kali Terminal, enter the following to create a reverse `exe` shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We download this executable and replace it with the `WinSMS.exe` file in the
    folder where the software is installed:![How to do it...](img/image_09_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now replace the WinSMS file with the newly created meterpreter file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_026.jpg)![How to do it...](img/image_09_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have placed the file, let''s open a listener on our Metasploit
    and wait to see what happens when a user executes the file. Enter the following
    commands in the terminal to set up the Metasploit listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all we have to do is wait for a high-level user to execute the file and,
    voilà, we will have a reverse shell of that user, complete with his privileges.
    For demo purposes, we will be executing this file as an administrator. Let's have
    a look:![How to do it...](img/image_09_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have an escalated shell to interact with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The working is very simple: the attacker exploits the insecure folder permission,
    replaces the file with his malicious one, and gets it to execute while waiting
    for a reverse connection. We have already seen how `msfvenom` works in the previous
    recipes. So, once an attacker replaces the file, he will simply wait for a connection
    from a high-privilege user.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have purposely left a scenario here for the readers: in the preceding
    case, what will happen is that the file will execute. However, it won''t launch
    the application, which will obviously raise suspicion. The reader''s task is to
    use `msfvenom` to append the backdoor on the existing executable so that when
    it''s initialized, the user will have no clue what happened, as the program will
    execute.'
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'More examples on this can be found using the dork: Insecure file permission
    site: [exploit-db.com](http://exploit-db.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will use a vulnerable OS called Stapler. The image can be
    downloaded from [https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)
    and loaded on VirtualBox. In the previous chapter, we learned how to perform a
    vulnerability assessment and gain low-level or high-level access. As part of the
    exercise, the reader can perform penetration testing and gain a shell on the Stapler
    OS. We will be continuing from the point where we receive a low-privilege shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, the reader needs to have a low-privilege shell on the vulnerable
    Stapler OS. In this scenario, we managed to get an SSH connection to one of the
    users by doing some information gathering and password bruting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have logged in to the Stapler machine with the username `SHayslett`, as shown
    in the following screenshot:![How to do it...](img/image_09_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will enumerate the OS kernel version of the system. Enter the following
    command to check the version flavor and kernel details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On searching for vulnerabilities to escalate privileges, it was observed that
    Ubuntu 16.04 had vulnerabilities:![How to do it...](img/image_09_032.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first search looks to match our kernel version and Ubuntu OS version. Let
    us proceed to download it on the machine where we want to escalate privileges.
    It can be downloaded using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we go inside folder `39772` and deflate the `exploit.tar` file. Enter the
    following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On entering the `ebpf*` folder there will be a `compile.sh` file. Let''s compile
    and execute the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great. We have successfully managed to get root privileges over the system.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This was a pretty simple and straightforward way of figuring out how to escalate
    privileges on a Linux machine. We went through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the OS and kernel version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching the Internet for flaws, if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a few exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-verifying with our available vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All vectors compiled, so we downloaded and executed the Kernel exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other ways to escalate Linux privileges, such as misconfigured services,
    insecure permissions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at how to escalate privileges with a low-level user
    by leveraging the OS-based vulnerability. There are other ways to escalate privileges
    as well. The key factor to all of this is enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to find out more, check the following for vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system and kernel version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under this one, we search for services running under high privileges, or even
    root, and if there are any flaws in the configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduled jobs and permission to access or edit them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to confidential information or files such as `/etc/passwd` or `/etc/shadow`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unattended password files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Console history/activity history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a very beautiful write-up by g0tm1lk on his website, where he has provided
    a good amount of information to understand how to enumerate and find the right
    kind of exploits:  [https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
