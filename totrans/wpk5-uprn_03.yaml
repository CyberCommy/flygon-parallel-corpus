- en: Using Configurations and Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will include practical usage of configurations and options, and
    how these interrelate and play their part in any given build. It will also elaborate
    on output management—that is to say, the output of the bundling process and asset
    management in terms of the assets made part of the dependency graph. This will
    cover subtopics such as file placement and file structure.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are used to combat the nature of JavaScript to have global functions.
    Webpack works alongside these modules and isolates the implied global nature of
    variables and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Configurations and options are necessary to get the best out of Webpack. Each
    project is bespoke, therefore each project will require specific tailoring of
    its parameters. This chapter will explore in detail the exact nature of both topics,
    the limitations of each, and when to utilize them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding asset management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding output management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Webpack 5 options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration is done in Webpack through the use of a configuration file,
    usually `webpack.config.js`, except in special circumstances where there can be
    more than one—or another—file assigned to this task. In the case of `webpack.config.js`,
    it is a JavaScript file that should be amended to alter the configuration settings
    of any particular project.
  prefs: []
  type: TYPE_NORMAL
- en: On startup, Webpack and Webpack 5 do not require a configuration file, but the
    software does recognize `src/index` as the default project input. It will also output
    the results of the build to a location named `dist/main.js`. This output will
    be "minified" and optimized for production.
  prefs: []
  type: TYPE_NORMAL
- en: '*Minified,* or *minification,* simply refers to one of Webpack''s main functions:
    to reduce the amount of code used to a minimal amount. This is done by eliminating
    duplicate, erroneous, or surplus code.'
  prefs: []
  type: TYPE_NORMAL
- en: Typically, however, a Webpack project will need to have its default configuration
    changed. The default configuration is how Webpack works without any loaders or
    special parameters assigned to it, such as described in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction
    to Webpack 5*, in the *How Webpack works* subsection. This is done through the
    use of the configuration file. The developer should create a file named `webpack.config.js`
    and place this in the root folder of the project. This file will be automatically
    detected and read by Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin our discussion by exploring the use of multiple configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Using different configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Webpack 5 gives the option of using different configuration files, depending
    on the situation. Not only that, but the files being used can be altered using
    a command-line utility. A typical situation in which you might do that is when
    working with multiple bundles inside one project—more on that topic later on in
    the guide. The following code snippet shows how the developer can alter the configuration
    file in use. In this example, a file is directed to a named `package.json` file,
    which is a common file that Webpack uses regularly. This technique is referred
    to as a *config flag*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Please note that Webpack 5 also allows for custom configuration, and, as explained
    in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction to Webpack
    5*, this is a salient advantage of using Webpack 5\. This is done via the use
    of custom configuration files. This differs from options, as these variables are
    not set using the **command-line interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Working with options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term *options* in Webpack refers to settings made from the command line
    rather than the configuration, which is done through the altering of configuration
    script.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will begin by altering the configuration file,
    simply to lay the groundwork for our options tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the following configuration, Node's **path module** is used and prefixed
    with the `_dirname` global variable. Node's path module is simply the utility
    that Node uses for working with file or directory paths. There may be file path
    problems when working between operating systems, and this prevents those problems
    from occurring and also ensures that relative paths work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file concerned in the example is called `webpack.config.js`. We will use
    it to set the mode of the project, and we need to do this before we get to the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, the chosen **mod****e** instructs Webpack to make
    use of its built-in optimizations accordingly. The **entry** path will default
    to `./src`. This is where the execution of the application begins and bundling
    will start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block will show the rest of the same file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This section of the code snippets shows options related to how Webpack emits
    results.
  prefs: []
  type: TYPE_NORMAL
- en: The target directory for all output files must be an absolute path (use the
    **Node.js** path module).
  prefs: []
  type: TYPE_NORMAL
- en: '`filename `indicates the filename template for entry chunks, and `publicPath`
    refers to the **Uniform Resource Locator** (**URL**) to the output directory,
    resolved relative to the relevant HTML page. Put simply, this means the file path
    from the HTML page you may be using to the bundled project files. The remainder
    of the code refers to the name of the exported library and the nature of the exported
    library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topic concerns configuration regarding modules. After working
    on output options, this will be the next logical step in project development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block includes rules for modules, such as parser options
    and the configuration of loaders. These are matching conditions, and each accepts
    a string or a regular expression. The term `test` has the same behavior as `include`.
    They both must be matched, but this is not the case for `exclude`. `exclude` takes
    preference over the `test` and `include` options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For best practice, `RegExp` should only be used in `test` when filenames match.
    When using arrays of paths, absolute paths should be used in preference to the `include`
    and `exclude` options. The `include` option should be preferred over the `exclude`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block includes conditions for the issuer, and the origin
    of the imported elements. The code also includes options to flag the application
    of these rules, even if they are overridden. This is an advanced option, however.
  prefs: []
  type: TYPE_NORMAL
- en: The reference to `loader` indicates which loader should be applied. This resolves
    relative to the contextual location. A loader suffix is no longer optional since
    Webpack 2, for the sake of clarity. There is also space for applying multiple
    further options and loaders.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same configuration, we will explore rules and conditions that can be
    applied within the same procedure, illustrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code block includes nested rules, all of which combine with conditions
    to be useful. By way of explanation, note each of the following commands and what
    they denote:'
  prefs: []
  type: TYPE_NORMAL
- en: '`and`option matches are only made if all conditions are also matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`or` matches apply when a condition is matched—this is the default for arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not` indicates if the condition is not matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also an option for resolving module requests; this does not apply
    to the resolving of loaders. The following example shows the use of this `resolve`
    module request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block shows the same configuration file we have been following
    up to now in this section. However, let's take a look at some key elements. Where
    it states `path.resolve`, this refers to directories in which to look for modules.
    Directly below this, where it states `], extensions:`, this refers to file extensions
    that are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this part is code that, in descending order, refers to a list of module
    name aliases. Modules'' aliases are imported relative to the current location
    context, as illustrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `devtool` configuration enhances debugging by adding metadata for the browser. Note
    that the `source-map` option can be more detailed, but this is at the expense
    of build speed, and the `web` option indicates the home directory for Webpack.
    The entry and `module.rules.loader` option is resolved relative to this directory
    and refers to the environment in which the bundle should run. The `serve` configuration
    lets you provide options for `webpack-serve` and lets you precisely control which
    bundle information gets displayed, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explain the preceding code block. Where it states `compress: true`,
    this enables **gzip** compression of contents. The `historyApiFallback: true`
    part is true for when encountering any 404 page-loading errors. The `hot: true` text
    refers to having hot module replacement permissible or not; this is subject to `HotModuleReplacementPlugin`
    being installed first. `https` should be set to `true` for self-signed objects
    or certificate-authorized objects. If the `noInfo` key is set to `true`, you will
    only get errors and warnings on hot reloads.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is done, and we can now run a build. To do this, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once the preceding code is run in the command-line environment, the user might
    be prompted to install `@webpack-cli/init`, if it is not yet installed in the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running `npx webpack-cli init`, more packages may be installed in the
    project, depending on the choices made during the configuration generation. The
    following code block shows the printout from running NPX Webpack''s CLI initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If your output in the CLI looks like the preceding code block, then your configuration
    has been successful. It's essentially an automated readout from the command line
    and should signify that all the options set in the previous code block have been
    recorded.
  prefs: []
  type: TYPE_NORMAL
- en: We have gone through configurations and options, and you should now know the
    difference and the extent to which each can be used. It's now a natural process
    to move on to asset management.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding asset management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assets are primarily managed via the dependency graph, which we covered in [Chapter
    1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction to Webpack 5.*
  prefs: []
  type: TYPE_NORMAL
- en: Before the great advent of Webpack, developers would use tools such as **grunt**
    and **gulp** to process these assets and move them from the source folder into
    the production directory or the development directory (usually named `/build`
    and `/dist`, respectively).
  prefs: []
  type: TYPE_NORMAL
- en: The same principle was used for JavaScript modules, but Webpack 5 dynamically
    bundles all dependencies. As every module explicitly states its dependencies, unused
    modules won't be bundled.
  prefs: []
  type: TYPE_NORMAL
- en: In Webpack 5, any other type of file can now be included, besides JavaScript—for
    which a loader is used. This method means that all the features possible when
    using JavaScript can also be utilized.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following subsection, we will explore practical asset management. The
    following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project for asset management configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading **Cascading Style Sheets** (**CSS**) files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding global assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, there will be a subsection on wrapping up.
  prefs: []
  type: TYPE_NORMAL
- en: Each subsection will have steps and instructional content to follow. This can
    become quite a large topic, so hold on tight! We will begin by preparing the configuration
    of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project for asset management configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set things up for asset management configurations in your project, we need
    to prepare our project index and a configuration file by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by making a minor change to the example project using the `dist/index.html` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using `webpack.config.js`, write the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding two code blocks simply show a placeholder index file that we will
    use to experiment with asset management. The latter code block shows a standard
    configuration file, with the index file set as the first entry point and names
    for the output bundle set. This will prepare our project for bundling once we
    are done with our asset management experiment.
  prefs: []
  type: TYPE_NORMAL
- en: Your project will now be set up for asset management configurations. This guide
    will now show you how to load CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: Loading CSS files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example project will now show the inclusion of CSS. This is a very easy
    thing to get to grips with, as most frontend developers beginning with Webpack
    5 should know it well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load CSS and run a build, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, install and add `style-loader` and `css-loader` to the project''s
    module configuration, using the following command-line instruction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make the following additions to the `webpack.config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the previous code block, the following additions refer to
    the use of `style-loader` and `css-loader` toward the end of the block. So that
    you don't get any errors, you should ensure that your code mirrors the example.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between `style-loader` and `css-loader` is that the former determines how
    styles will be injected into a document—such as with style tags, whereas the latter
    will interpret `@import` and `require` statements, and then resolve them.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that both loaders are used together, as almost all **CSS**
    operations involve a combination of these methods at some point in the project's
    development.
  prefs: []
  type: TYPE_NORMAL
- en: In Webpack, regular expressions are used to determine which files should be
    looked for and be served to a specific loader. This permits the import of a style
    sheet into the file that depends on it for styling. When that module is run, a `<style>` tag
    with the stringified CSS will be inserted into `<head>` of the HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, navigate to the directory structure, which we can see in the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We see from this structure that there is a style sheet named `style.css`. We
    are going to use this to demonstrate the use of `style-loader`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in `src/style.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This preceding code simply creates a color class style that we will use to attach
    a style to our frontend and show how the CSS load works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise, make the following append to `src/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code all takes place inside the `index.js` file. It essentially
    creates a JavaScript function that appends a `<div>` element inside whichever
    files call it from the browser. In this example, it will be the `index.html` file,
    aforementioned in the directory structure illustration. The preceding code will
    then "join" an **HTML** element to the web page with text stating, '`Hello, Webpack`'.
    We will use this to test whether `style-loader` and `css-loader` have been used
    correctly. As the commented part of the script states, this element appendment
    will automatically import `lodash` for use with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run the `build` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When the `index.html` file is opened in a browser window, you should see that '`Hello
    Webpack`' is now styled in blue.
  prefs: []
  type: TYPE_NORMAL
- en: To see what happened, inspect the page (not the page source, as it won't show
    the result) and look at the page's head tags. This is best done using Google's
    Chrome browser. It should contain the style block that we imported in `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: You can—and in most cases, should—minimize CSS for better load times in production.
  prefs: []
  type: TYPE_NORMAL
- en: The next natural step is to work on adding images. Images can be added to your
    project the same way as for any website application. Place these images in whatever
    desired format in an image folder. This must be in the `/src` folder, but they
    can be located anywhere in there. The next procedure is the loading of images
    with Webpack, and we will go through this now.
  prefs: []
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's try loading images and icons using the file loader, which can be
    easily incorporated into our system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the command line, install `file-loader`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the usual  `webpack.config.js` Webpack configuration file, make
    the following amendments to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, because of the code in the previous block, when you import an image, that
    image will be processed to the output directory, and the variable associated with
    that image will contain the final **URL** of that image after processing. When
    using the `css-loader`, a similar process will occur for the **URL** of the image
    file within your **CSS** file. The loader will recognize that this is a local
    file and replace the local path with the final path to the image in your output directory.
    The** `html-loader`** handles `<img src="img/my-image.png" />` in the same manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to start adding an image, you need to navigate to the project file structure,
    which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This structure seems very similar to the immediately previous project directly
    used for the *Loading CSS* *files* tutorial for the most part, except for the
    addition of the `icon.png` image file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, navigate to the JavaScript frontend file, `src/index.js`. The following
    code block shows the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It can be seen from this preceding block that the import of **lodash** will
    allow the **HTML** of your page to be appended with the `Hello Webpack` text.
    Beyond that, this code simply sets up our web page with our image, using some
    crafty JavaScript. It first creates a variable called `Icon` and gives it the
    value of the image file's **URL**. Later in the code, it then assigns this to
    the source of an element called `myIcon`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, we want to set some very basic styles to handle our image with the
    style sheet. In the `src/style.css` file, append the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: It will, of course, show your image icon as the background for `div` we assigned
    code to in the **HTML**, with the text turned **red** wherever the `.hello` class
    is applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a new build and open up the `index.html` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will create the effect of the icon repeating as a background image. There
    will also be an `img` element beside the `Hello Webpack` text.
  prefs: []
  type: TYPE_NORMAL
- en: Often, this command can go wrong, even for experienced developers. For example,
    the image might not load at all, be too large, or will not be bundled correctly.
    This can be caused by a combination of factors, including the use of the loader
    in an unusual way. Webpack may also experience code skipping when using long filenames.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the case, simply repeat the steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `file-loader` using the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter the `webpack.config.js` file, as described in the preceding example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the project file structure and index file are formatted correctly
    to load the image file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the **CSS** is also formatted the way you want it to be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, run the build using `npm` and the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the index file is loading the image correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the element is inspected, the actual filename can be seen to have changed
    to something similar to `da4574bb234ddc4bb47cbe1ca4b20303.png`. This means that
    Webpack found our file in the source folder and processed it.
  prefs: []
  type: TYPE_NORMAL
- en: That gives you a solid framework for managing images. In the next subsection,
    we will discuss the management of fonts as Webpack assets.
  prefs: []
  type: TYPE_NORMAL
- en: Loading fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will examine fonts in the context of assets. The file and URL loaders
    will take any file you load through them and output it to your build directory.
    This means we can use them for any kind of file, including fonts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by updating the Webpack configuration JavaScript file, which
    is needed to handle fonts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure the update of the configuration file is made. We are updating our usual `webpack.config.js` configuration
    file here, but you will notice toward the end that some font types, such as `.woff`,
    `.woff2`, `.eot`, `.ttf`, and `.otf`, have been added, as illustrated in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This configuration allows Webpack's `file-loader` to incorporate the font type,
    but we still have to add some font files to our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now perform the essential task of adding the font to the source directory.
    The following code block illustrates a file structure, indicating where the new
    font files can be added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note the `src` directory and the `sample-font.woff` and `sample-font.woff2`
    files. These two files should be replaced with any font files you choose. The **Web
    Open Font** (**WOFF**) format is generally recommended for use with Webpack projects.
  prefs: []
  type: TYPE_NORMAL
- en: Fonts can be incorporated in the styling of your project by using the `@font-face`
    declaration. The local URL directive will be found by Webpack the same way it
    handles images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the style sheet using the `src/style.css` file to include the sample
    font on our home page. This is done with the use of a font declaration at the
    top of the code block and a class definition below that, as shown in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note that you must change the `'SampleFont'` text to one corresponding to your
    chosen font file. The previous code shows the loading of the font via CSS and
    the setting of custom values such as `font-weight` and `font-style`. The **CSS**
    code then uses the `.hello` class to assign that font to any prospective **HTML**
    element. Note that we have already prepared our `index.html` file for this in
    the two previous tutorials, *Loading CSS* *files* and *Loading images*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run a `npm` build in development mode using the command-line utility as
    per usual, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Open up `index.html` again and see whether the `Hello Webpack` sample text we
    are using has changed to the new font. If all is well, you should see the changes.
  prefs: []
  type: TYPE_NORMAL
- en: That should serve as a simple tutorial to understand font management. The next
    section will cover data management of files such as **Extensible Markup Language**
    (**XML**) and **JavaScript Object Notation** (**JSON**) files.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another useful asset that can be loaded is data. Data is an incredibly important
    asset to be loaded. This will include files such as **JSON**, **Comma-Separated
    Values** (**CSV**), **Tab-Separated Values** (**TSV**), and **XML** files. Using
    a command such as `import Data from './data.json'` will work by default, meaning
    **JSON** support is built into Webpack 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import the other formats, a **loader** must be used. The following subsection
    demonstrates a method for handling all three. The following steps should be taken:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, you must install the `csv-loader` and `xml-loader` loaders using
    the command line, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block simply shows the command line to install two data loaders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and append the `webpack.config.js` configuration file, and ensure that
    it looks like the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, the lower portion shows the use of `csv-loader`
    and `xml-loader`. It is this amendment that will be needed this time to load the
    data into our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must add a data file to the source directory. We will be adding an
    **XML** data file to our project, shown in bold text in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the preceding `data.xml` file in the `src` directory of your **proj****ect** folders. Let''s
    take a closer look inside this file to see what the data is, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the previous block of code, the contents are a very basic
    **XML** dataset. We are going to use this to import the **XML** data into our
    project's `index.html` page, and we will need this to be formatted correctly to
    ensure that it works.
  prefs: []
  type: TYPE_NORMAL
- en: Any one of those four types of data (**JSON**, **CSV**, **TSV,** and **XML**)
    can be imported, and the data variable you import it to will contain parsed JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to amend the `src/index.js` file to expose the data file. Note the
    import of `./data.xml`, as illustrated in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The addition of the `import` function, and little else, is all we need this
    time to demonstrate the usage. Anyone familiar enough with JavaScript will also
    know how to make use of this to run their particular project very easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a build and check that the data loads correctly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once a `npm` build is run, the `index.html` file can be opened. Examining the
    console (such as under **developer tools** when using Chrome) will show the data
    being logged after import.
  prefs: []
  type: TYPE_NORMAL
- en: Something related, but more to do with project architecture, is the arrangement
    of global assets for project consumption. Let's explore that in the following
    subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Adding global assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loading assets in the aforementioned ways allows modules to be grouped together
    in a more intuitive, practical, and usable way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using a global assets directory containing every asset, assets can
    be grouped with the code that utilizes them. The following filing structure or
    tree demonstrates a very practical and usable example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example makes your code a lot more portable. If you want to place
    one component in another directory, simply copy or move it there. Alternatively,
    a base directory could be used if your development works along old-fashioned lines.
    Also, aliasing is an option.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up the tutorial with best practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's been a long tutorial and some of your code might have gone astray. It's
    good practice to clean up this code and check for anything erroneous.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up is a good habit to get into. We won't be using a lot of assets in
    the next section, *Understanding output management*, so let's start there.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin wrapping up with the project directories, **project tree**. Let''s
    check them to see whether they are right. It should something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As we are wrapping up, you should remove the files that correspond to the emboldened
    text in the preceding code block.
  prefs: []
  type: TYPE_NORMAL
- en: This should give you a good idea of what your project files and folders look
    like. Ensure that all the files we have been using are there and in the appropriate
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check the formatting of our configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A lot of work has been done on `webpack.config.js`, and we must take care that
    the contents are formatted correctly. Please refer to the following code block
    and check it against your own to ensure this is correct. It is often useful to
    count the number of `{` and beautify your code with a conventional structure to
    make this process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Notice the extensive reference to CSS, images files, fonts such as `.woff`,
    and data files in separate handlers such as `.csv` and `.xml`. All of this is
    important, and you should take the time to make sure the scripting is accurate
    as this has been an extensive topic and practical exercise, so a lot of things
    could have been overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to check the scripting of the `src/index.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we are wrapping up here so that the code is reusable after having
    followed multiple tutorials using it, so be sure to remove the emboldened text
    in your version.
  prefs: []
  type: TYPE_NORMAL
- en: We've gone through an extensive list of asset management operations and have
    concluded with the project tidying process. All of your code should look like
    the previous code blocks in the wrapping-up section for it to operate correctly.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a sound understanding of how Webpack manages these assets,
    and how to manage them when working with Webpack. With the file structure and
    code cleaned through and tidied, we are now best placed to begin output management.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding output management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The output refers to the bundles created from the source files. The source files
    are referred to as the input in Webpack. Output management refers to the management
    of these newly bundled files. Depending on the mode Webpack was running in when
    the build began, these bundles will either be development or production bundles.
  prefs: []
  type: TYPE_NORMAL
- en: The process by which Webpack produces the output or bundle from the source files
    is called compiling. Compiling is the process by which Webpack 5 assembles the
    information, including assets, files, and folders. The topic of configuration
    relates to the various options and configurations possible in Webpack, which will
    alter the style and method of compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Development bundles permit some customization (such as local testing), but production
    bundles are the finished and fully compressed versions, ready for publication.
  prefs: []
  type: TYPE_NORMAL
- en: During this chapter, assets have been manually added to the index **HTML** file.
    As the project grows, manual handling will be difficult, especially when using
    multiple bundles. That being said, a few plugins exist that make this process
    much easier.
  prefs: []
  type: TYPE_NORMAL
- en: We will now discuss those options, but begin with preparing your now very busy
    project structure, which will become an increasingly important practice as the
    project develops.
  prefs: []
  type: TYPE_NORMAL
- en: Output management tutorial preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s adjust our project file structure tree a little and make things
    easier. This process follows these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by locating the `print.js` file in the project folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note the addition to our project structure—the `print.js` file, specifically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Append the code by adding some logic to the `src/print.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You should use the `printIt()` JavaScript function, as seen in the preceding
    code block, in the `src/index.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the `src/index.js` file to import the required external files and write
    a simple function in it to allow interaction, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We've updated our `index.js` file with an import of the `print.js` file at the
    top and a new `printIt();` function button at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must update the `dist/index.html` file. This update is done in preparation
    for the entries to be split out, and is illustrated in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This preceding **HTML** script will load in the `print.bundle.js` file and,
    below that, the `bundle.js` and `app.bundle.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, ensure that the configuration of the project is in line with dynamic
    entry points. The `src/print.js` file will be added as a new entry point. The
    outputs will also be changed so that bundles'' names will be dynamically generated
    based on entry point names. In `webpack.config.js`, there is no need to change
    the directory names due to this automatic process. The following code block shows
    the content of `webpack.config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The configuration simply set up new entry points for the new files we have been
    working on, `index.js` and `print.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you perform a build. Once you run a `npm` build, you will see the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: After opening the `index.html` file in your browser, you will see that Webpack
    generated the `print.bundle.js` and `app.bundle.js` files. We should now check
    that it worked! If the entry point names are changed or new ones added, the **index
    HTML** would still reference the older names. This can be corrected with `HtmlWebpackPlugin`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the HtmlWebpackPlugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `HtmlWebpackPlugin` will allow Webpack to process HTML files that contain
    JavaScript, for instance. To start working with it, we need to install it using
    the command line, and then set the configuration correctly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the plugin using the command-line utility, and then adjust the `webpack.config.js` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block shows the installation of the `HtmlWebpackPlugin` for
    use in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have to incorporate the plugin into our configuration. Let''s take
    a look at the `webpack.config.js` file when associated with this plugin, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of the `require` expression and the `plugins:` option key, both
    of which serve to permit the use of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Before a build is run, note that the `HtmlWebpackPlugin` will generate its `index.html`
    file by default, even though there already is one in the `dist/` folder. As a
    result, the existing file will be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: For best practice, make a copy of the existing index file and name it something
    like `index2.html`.Place this new file next to the original, and then run the
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the build using your command-line utility. Once this is done, you
    will see the following result in the command-line utility window, indicating a
    successful bundling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Opening the `index.html` file in your code editor or **Notepad** will reveal
    that the plugin has created a new file, and all the bundles are automatically
    added.
  prefs: []
  type: TYPE_NORMAL
- en: Also, why not look at `html-webpack-template`, which provides a few extra features
    on top of the default template?
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our tutorial of Webpack's `HtmlWebpackPlugin`. In the following
    subsection, we will again embark on some tidying up in your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the distribution directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During this project development, the `/dist` folder will become quite cluttered.
    Good practice involves good organization, and this involves cleaning the `/dist`
    folder before each build. There is a `clean-webpack-plugin` plugin that can be
    used to do this for you, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing the `clean-webpack-plugin`. The following example shows
    you how to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Once the plugin is installed, we can delve back into the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using **`webpack.config.js`**, make the following entry in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of `CleanWebpackPlugin`, proceeding with the `const` qualifier.
    This will be the addition of the `module.export` plugin option, which creates
    a new function associated with the plugin and will make the plugin usable by Webpack
    during compilation.
  prefs: []
  type: TYPE_NORMAL
- en: You should now run an `npm` build, which will output a bundle to the`/dist` distribution
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you run a `npm` build, the `/dist` folder can be inspected. You should
    only see newly generated files and no more old ones, assuming the process behaved
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We've been generating a lot of files, and to help us keep track, there is something
    called the manifest, which we will cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing the manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack can know which files are being generated thanks to the manifest. This
    allows the software to track all output bundles and to map the modules. To manage
    outputs in other ways, it would be a good idea to utilize the manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webpack essentially categorizes code by three types: source code written by
    the developer; vendor code written by a third party; and Webpack''s runtime manifest,
    which conducts the interactions of all the modules.'
  prefs: []
  type: TYPE_NORMAL
- en: The runtime and manifest data are what Webpack needs to connect your modular
    application while it runs in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to improve performance by using browser caching, this process
    will become an important thing to get to grips with.
  prefs: []
  type: TYPE_NORMAL
- en: By using content hashes within your bundle filenames, you can indicate to the
    browser when a file's contents have changed, and are thereby invalidating the
    cache. This is caused by the injection of the runtime and manifest, which changes
    with every build.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack has `WebpackManifestPlugin` that can extract manifest data into a **JSON**
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've learned about dynamically adding bundles to your HTML, let's
    dive into the development guide. Or, if you want to dig into more advanced topics,
    we would recommend rereading the *C**ode splitting* section of this guide in the
    previous chapter, [Chapter 2](3307482e-bfac-4ad6-8d58-767063722dda.xhtml), *Working
    with Modules and Code Splitting*.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Webpack 5 options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Options are a set of variables that can be altered using the CLI. Configuration,
    on the other hand, is done by altering the file contents. Options'' settings can
    be adjusted using the configuration file, however. The following is a list of
    the options supported by Webpack 5 currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Asynchronous Module Definition** (**AMD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallelism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Records Path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Records Input Path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Records Output Path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following sections describe and illustrate each option is a bit more detail.
    We will begin with something that, after a cursory examination of Webpack''s configuration,
    might find you scratching your head: the AMD option.'
  prefs: []
  type: TYPE_NORMAL
- en: AMD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AMD** is an `object bool: false` option. It is also an acronym for Asynchronous
    Module Definition. Essentially, it is a format to provide a solution for modular JavaScript that
    developers. The format itself is a proposal for defining modules in which both
    the module and dependencies can be asynchronously loaded.'
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to set the value of `require.amd` or `define.amd`. Setting `amd` to `false` will
    disable **AMD** support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look inside the `webpack.config.js`file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Popular modules for **AMD**, such as jQuery versions 1.7.0 to 1.9.1, will only
    register as an **AMD** module if the loader indicates that special allowances are
    permitted for multiple versions being used on one page. Another similar option,
    in terms of being a Boolean variable, is **Bail**. Let's take a closer look.
  prefs: []
  type: TYPE_NORMAL
- en: Bail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bail** is a `bool` value. This will force Webpack to exit its bundling process. It
    will cause Webpack to fail out on the first error instead of tolerating it. By
    default, Webpack will log these errors in red text in the Terminal (the browser
    console also, when using **HMR**) but will continue bundling.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this option, open `webpack.config.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will be very helpful if you want Webpack to exit a bundling process in
    certain circumstances. Perhaps you only want part of a project bundled. It's really
    up to you. Next up is caching.
  prefs: []
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cache is a term that refers to a `bool` object. It will cache the generated
    Webpack modules and chunks; this improves the speed of the build. It does this
    by keeping a reference to this object between compiler calls that can be shared. Caching
    is enabled by default while in **watch mode** and development mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'In watch mode, after the initial build, Webpack will continue to watch for
    changes in any of the processed files. Essentially, the **Webpack configuration
    JavaScript** file should include the `watch: true` operand inside the `module.export`
    operator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable caching, manually set it to `true` using webpack.config.js, as in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `webpack.config.js` file shows the configuration needed to allow shared
    caching, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The two previous examples show the caching configuration set to `false` and
    `sharedCache`. These are the two Boolean values that can be set in Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning: The cache should NOT be shared between calls with different options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few more options that can be set in Webpack: Loader, Parallelism,
    Profile, Records Path, Records Input Path, Records Output Path, and Name. Let''s
    go through each one, one at a time, right now.'
  prefs: []
  type: TYPE_NORMAL
- en: Loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is expressed as `loader` and exposes custom values in the loader context,
    as illustrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You can see from the preceding code example how this option can be used in the
    configuration file. This example should look familiar to anyone following this
    guide and configuring loaders. This example uses `worker-loader` by way of example
    only. Some of these options are a Boolean or a binary, such as the `profile` option,
    described next.
  prefs: []
  type: TYPE_NORMAL
- en: Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `profile` option will capture a profile of the application, which can then
    be dissected using the **Analyze** tool, as illustrated in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is a Boolean value. You can use the `StatsPlugin` for more control
    over the profile. This can also be combined with the `parallelism` option for
    better results.
  prefs: []
  type: TYPE_NORMAL
- en: Parallelism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Parallelism will limit the number of parallel processed modules. This can be
    used to fine-tune performance or for more reliable profiling. The following example
    gives the limit number as `1`, but you can alter this as you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Webpack 5 permits the use of modules being processed in parallel as well as
    bundling in parallel. This can eat up memory, so this option should be noted on
    larger projects.
  prefs: []
  type: TYPE_NORMAL
- en: As your project gets more complex, you may want to record the compilation process,
    which can help with—among other things—tracing bugs and errors. **Records Path**
    will help you do this, and we will take a closer look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: Records Path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Records Path option is expressed as a string. This option should be used
    to generate a **JSON** file containing records. These are pieces of data used
    to store module identifiers across numerous builds. This can be used to track
    how modules alter between builds. To generate one, simply specify a location,
    as in the following example, using the `webpack.config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Records are useful if you have a complex project that uses code splitting. This
    recorded data can be utilized to ensure that caching is behaving correctly when
    working with split bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the compiler generates this file, the source control should be used
    to track it and keep a history of its usage over time.
  prefs: []
  type: TYPE_NORMAL
- en: Setting `recordsPath` will also set `recordsInputPath` and `recordsOutputPath` to
    the same location.
  prefs: []
  type: TYPE_NORMAL
- en: Records Input Path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This option is expressed as a string,`recordsInputPath`, as illustrated in
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: It will specify the file from which the last set of records is read, and can
    be used to rename a records file. Related is the Records Output Path option, and
    we will go over that now.
  prefs: []
  type: TYPE_NORMAL
- en: Records Output Path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Records Output Path is a **string** that specifies where the records should
    be written. The following code example shows how you might use this option in
    combination with `recordsInputPath` when renaming a records file. We will use `webpack.config.js`
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will set the location where records are written. If it's
    an input record, it would be written to `__dirname/records.json`. If it's an output
    record, it will be written to `__dirname/newRecords.json`.
  prefs: []
  type: TYPE_NORMAL
- en: The next option we need to discuss is the Name option.
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Name** option is expressed as a **string** and denotes the name of the
    configuration. It should be used when loading multiple configurations. The following
    example shows code that should form part of the `webpack.config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is useful when using multiple configuration files. The code
    will name this configuration file as `admin-app`. This gives you a long rundown
    of options and how to use them. Let's now take a look at what we have covered
    throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has followed the practices of configuration files, asset management,
    and options. This chapter began by taking you, the reader, through the various
    capabilities of Webpack and configuration, and exploring how to manage those assets
    and control content accordingly. You were guided through both input and output
    management, and the loading of external content such as fonts and images. From
    there, this chapter took us through options and the difference between the two,
    explaining to the reader what can be achieved using options that can be set up
    simply through configuration.
  prefs: []
  type: TYPE_NORMAL
- en: You were then guided through common option methods and how to use them. You
    are now fully versed in options and configurations. You should now know the difference
    between the two and the best methods to adopt, given any number of possibilities
    that would require either technique.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will pry into the world of APIs' loaders and plugins.
    These features of Webpack expound the capabilities of the platform, springboarding
    from configurations, and options.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn the difference between loaders and plugins, and the essential
    nature of loaders to use languages and scripts that are not supported by default.
    Much of these loaders are supplied by third-party developers, so plugins fill
    gaps in capability where a loader cannot be used—and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: The similar topic of APIs will then be expanded upon. APIs are essentially used
    to connect an application to remote applications on a network. This gives them
    a similar characteristic to loaders, and they are often used where a native script
    is not available.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To assist in your learning, here are a set of questions on the topics covered
    in this chapter (you will find the answers in the back matter of this guide):'
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference in Webpack 5 between configurations and options?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a config flag?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which loader is required for loading images into Webpack projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of data file does Webpack allow the import of without the use of a
    loader?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does Webpack's manifest record indicate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the Bail option do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the Parallelism option do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the Records Input Path option do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will setting AMD to `false` do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is compiling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
