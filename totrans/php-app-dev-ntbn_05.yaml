- en: Chapter 5. Using Code Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code tells you how, comments tell you why - Jeff Atwood
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to document our PHP source code using the NetBeans
    IDE. We will learn how to quickly document variables, methods, classes, or the
    entire project, and discuss the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Convention for source documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to document the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP project API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing great documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coding is the art of instructing machines, and when it comes to human readability,
    code should be expressive, self-explanatory, and beautiful. The code should be
    reusable and understandable, so that you can use it again a couple of months from
    now. A good practitioner makes the code as simple as possible to understand, and
    keeps the code documentation where it is really required.
  prefs: []
  type: TYPE_NORMAL
- en: Code documentation is the motivating part of coding, particularly when you are
    working in a collaborative team environment; documentation should be done in a
    sensible way, so that learning the intent of the code can be faster among collaborators.
  prefs: []
  type: TYPE_NORMAL
- en: A regular practice to document the source code is putting comments in your code
    specified by the **PHPDoc** format, so that your code becomes more meaningful
    and the external documentation generator can parse such comments.
  prefs: []
  type: TYPE_NORMAL
- en: PHPDoc—commenting standard for PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHPDoc is an adaptation of Javadoc for the PHP programming language. Since it
    is the standard for commenting the PHP code, it allows external document generators,
    such as phpDocumentor and ApiGen to generate HTML documentation for APIs. It helps
    a variety of IDEs, such as NetBeans, PhpStorm, Zend Studio, and Aptana Studio,
    to interpret variable types and provide improved code completion, type hinting,
    and debugging. According to PHPDoc, documentation is written using text blocks
    named **DocBlock**, which precede the element to be documented. As a way of describing
    programming constructs such as class, interface, functions, methods, and so on,
    tag annotations are used inside the DocBlock.
  prefs: []
  type: TYPE_NORMAL
- en: Example of a DocBlock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A DocBlock is an extended C++ style PHP comment that begins with "/**" and has
    "*" at the beginning of every line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A DocBlock contains three basic segments, in this order:'
  prefs: []
  type: TYPE_NORMAL
- en: Short description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The short description starts on the first line, and can be terminated with a
    blank line or a period. A period inside a word (for example `example.com` or `0.1
    %)` is ignored. If the short description becomes more than three lines long, then
    only the first line is taken. The long description continues for as many lines
    as required, and may contain the HTML markup for display formatting. The external
    document parser will convert all the whitespaces into a single space in the long
    description, and may use paragraph breaks to define newlines, or `<pre>`, as discussed
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The long and short description of a DocBlock is parsed for a few selected HTML
    tags, which determine additional formatting using the followings tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<b>:` This tag is used to emphasize/bold the text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<code>:` This tag is used to surround the PHP code; some converters will highlight
    it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<br>:` This tag is used to provide a hard-line break, and may be ignored by
    some converters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i>:` This tag is used to italicize/mark the text as important'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<kbd>:` This tag is used to denote the keyboard input/screen display'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<li>:` This tag is used to list items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ol>:` This tag is used to create an ordered list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ul>:` This tag is used to create an unordered list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p>:` This tag is used to enclose all the paragraphs; otherwise, content will
    be considered text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<pre>:` This tag is used to preserve line breaks and spacing, and assumes
    all tags are text (like XML''s CDATA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<samp>:` This tag is used to denote samples or examples (non-PHP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<var>:` This tag is used to denote a variable name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In rare cases when the text `"<b>"` is needed in a DocBlock, use a double delimiter,
    as in `<<b>>`. The external document generator will automatically translate that
    to the physical text `"<b>"`.
  prefs: []
  type: TYPE_NORMAL
- en: Acquainting with PHPDoc tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHPDoc tags are single words prefixed by an `@` symbol, and are only parsed
    if they are the first thing on the new line of a DocBlock. A DocBlock precedes
    before structural elements, and such elements can be programming constructs, such
    as namespaces, classes, interfaces, traits, functions, methods, properties, constants,
    and variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common lists of tags with details have been divided into groups for better
    understanding, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Data type tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tag | Usage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@param` | Type `[$varname]` description | Documents a function or method
    parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `@return` | `Type description` | Documents the return type of a function
    or method. This tag should not be used for constructors or methods defined with
    a `void` return type. |'
  prefs: []
  type: TYPE_TB
- en: '| `@var` | `Type` | Documents the data type for a class variable or constant.
    |'
  prefs: []
  type: TYPE_TB
- en: Legal tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tag | Usage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@author` | Author name `<author@email>` | Documents the author of the current
    element |'
  prefs: []
  type: TYPE_TB
- en: '| `@copyright` | `Name date` | Documents copyright information |'
  prefs: []
  type: TYPE_TB
- en: '| `@license` | `URL name` | Is used to indicate which license is applicable
    for the associated structural elements |'
  prefs: []
  type: TYPE_TB
- en: Versioning tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tag | Usage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@version` | `Version string` | Provides the version number of a class or
    method |'
  prefs: []
  type: TYPE_TB
- en: '| `@since` | `Version string` | Documents the release version |'
  prefs: []
  type: TYPE_TB
- en: '| `@deprecated` | `Version description` | Is used to indicate which elements
    are deprecated and are to be removed in a future version |'
  prefs: []
  type: TYPE_TB
- en: '| `@todo` | `Information string` | Documents things that need to be done to
    the code at a later date |'
  prefs: []
  type: TYPE_TB
- en: Other tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Tag | Usage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@example` | `/path/to/example` | Documents the location of an external saved
    example file |'
  prefs: []
  type: TYPE_TB
- en: '| `@link` | `URL link text` | Documents the URL reference |'
  prefs: []
  type: TYPE_TB
- en: '| `@see` | `Element name(s) separated by comma` | Documents any element |'
  prefs: []
  type: TYPE_TB
- en: '| `@uses` | `Name of element` | Documents how the element is used |'
  prefs: []
  type: TYPE_TB
- en: '| `@package` | `Name of a package` | Documents a group of related classes and
    functions |'
  prefs: []
  type: TYPE_TB
- en: '| `@subpackage` | `Name of sub package` | Documents a group of related classes
    and functions |'
  prefs: []
  type: TYPE_TB
- en: Among the most used tags, `@param` and `@return` can be used only for functions
    and methods, `@var` for properties and constants, `@package` and `@subpackage`
    for procedural pages or classes, while other tags, such as `@author, @version`,
    and so on, can be used for any element. Besides these tags, `@example` and `@link`
    can be used as inline tags.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the list of tags at [http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html](http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will dive into documenting our PHP source code using NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn to document functions, methods, classes, interfaces,
    global variables, constants, and so on, and discuss the benefits of using such
    a code documentation. As discussed earlier, in the collaborative development environment,
    the description of methods, classes, and so on, are very important to learn the
    intent of the code, and we will see that implemented practically in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a new PHP project named `Chapter5` in NetBeans, and use it for all
    the following tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the functions and methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn to use the NetBeans auto documentation feature
    at the beginning of a PHP function or method.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — documenting a PHP function or method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, let''s create a simple PHP function or method with some parameters
    passed into it and different types of variables declared inside it. We are just
    practicing to see how the NetBeans auto documentation generator works on such
    commonly used structural elements. Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a PHP file named `sample1.php` into the project, and type a PHP function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this function we can see that there are three parameters passed into the
    `testFunc` method—`$param1` as `DateTime, $param2` without type-hinting as it
    may have a mixed type of value, and `$param3` is optional with a default `NULL`
    value. Also, inside the body, the function contains one integer type variable
    and returns that integer type as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `/**` in the line before the `testFunc` function, and press *Enter*. You
    can see that NetBeans parses the function and generates the documentation before
    the function according to the PHPDoc standard, which looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code snippet, we can see that NetBeans generated the documentation
    mentioning the parameters and return type, which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are annotated with the `@param` tag and parameter type from the given
    type hinting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The return type is annotated with `@return`
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the type and name beside each tag are separated with a whitespace.
    In case the type hint is unavailable, then NetBeans leaves it as a simple `type`,
    such as `$param2.` The word that is usually used in documentation is `"mixed"`
    when the real data type is unknown and you can edit that `"type"` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a description of each variable in the documentation; beside the
    variable name, just put the description with a leading whitespace as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you may want to add a short description for the documentation, which
    looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how this NetBeans-generated documentation looks, while someone
    tries to call this `testFunc` from anywhere within the project. Try to type the
    function name anywhere. Say, let's start typing the function name in the `index.php`
    file inside the project, and you will see the NetBeans auto-suggestion of that
    function name with parameter hints and the documentation, as follows:![Time for
    action — documenting a PHP function or method](graphics/5801_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If documentation is available for a function or any element, then NetBeans shows
    the documentation while auto-suggestion is in process, as shown in the previous
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just learned how to use the NetBeans auto documentation generator. By typing
    `/**` and pressing *Enter* before the functions, we can parse the metadata and
    generate the documentation. We can update the documentation as well. Again, the
    external document generator can extract such DocBlocks to create the project API
    documentation. Now, we will add a documentation before a PHP class in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A document before a class is very important to learn about the class and its
    usage. A best practice is to decorate the preceding documentation with proper
    annotations, such as `@package, @author, @copyright, @license, @link`, and `@version`,
    and with a proper description of the class.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — documenting the PHP class and class variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add a PHP class using NetBeans and update the preceding
    DocBlock with class documentation tags. So let's go for it...
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Chapter5` project to choose **New | PHP Class...**, insert
    the class name as `Test` into the **File Name** box, and click on **Finish**,
    as follows:![Time for action — documenting the PHP class and class variables](graphics/5801_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Test` class should look similar to the following:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot, you can see that the opened `Test class` has an
    added DocBlock at the top with a sample class description along with the `@author`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: You may want to add PHPDoc tags before the line containing the `@author` tag;
    say you want to add the `@package` tag as soon as you type `@p`. The NetBeans
    code auto completion feature shows tags starting with `@p` to have a description
    that looks similar to the following screenshot:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the DocBlock with your own, so it looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the above documentation, you can see that corresponding tags have been added
    for the class, so that the class information is available while you try to instantiate
    the class object with code completion, as follows:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, such a class DocBlock can be extracted using the external API documentation
    generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, type a class variable named `$variable` into the `Test` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the class variable documentation, type `/**`, and hit *Enter* before
    the line in which it is declared, so that the documentation looks similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you may update the block as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to view the class hierarchy tree, at a later section, you may add
    a child class in our project named `TestChild` extending the `Test` class, which
    looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have practiced how to add documentation before PHP functions, classes, and
    its attributes using the PHPDoc format, and tested how this documented information
    becomes available throughout the project. The same style of DocBlock or appropriate
    tags can be applicable to document the PHP interfaces as well.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting TODO tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `@todo` tag for an element, to document planned changes, which
    have not been implemented yet, and the tag may be used for almost any element
    that can be documented (global variable, constant, function, method, define, class,
    and variable).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using @todo tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will learn to use `@todo` tags to document our future
    tasks, and will view the tasks list from the NetBeans task or action items window:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `TestChild` PHP class or in the preceding document block of the
    class, we can use a `@todo` tag; inside multiple line comments or DocBlock, add
    a tag similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above document block, we can see that the task has been described beside
    the tag separated by a whitespace. Also, a `@todo` tag can be added using a single
    comment line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the `TestChild` class may look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we add the tasks inside the file, the task should be visible in NetBeans'
    **Tasks** or **Action Items** window; press *Ctrl* + *6* to open the window, and
    the added task should be listed in the **Tasks** window, as shown in the following
    screenshot:![Time for action — using @todo tags](graphics/5801_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans updates the task list in the **Task** window as soon as a new task
    is added using the `TODO` task marker, and you can have all the tasks listed in
    that window for the entire project or for all the opened projects at NetBeans.
    Such tags can be used when we have something in mind that we want to implement
    and haven't got enough time to write the code, considering its future implementation.
    So, you can drop the idea in appropriate places using the `@todo` tag.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned how to use PHPDoc standard tags to document the PHP
    source elements, and also dealt with DocBlock to write source documentation. Elementary
    concepts regarding source documentation have been discussed. So, in our next section,
    we will learn to extract such DocBlocks, to generate HTML documentation for the
    entire project or API.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already discussed the significance of source documentation, the documentation
    should be presented to a general user in a well-organized way or graphically elaborated
    using HTML pages. Such API documentation, converted from source DocBlocks, can
    be the technical documentation used for learning about the source. NetBeans comes
    with the support to generate API documentation from the PHP source for the entire
    project using the **ApiGen** auto documentor tool.
  prefs: []
  type: TYPE_NORMAL
- en: ApiGen is the tool for creating API documentation using the PHPDoc standard,
    and supports the latest PHP 5.3 features, such as namespaces, packages, linking
    between documentation, cross referencing to PHP standard classes and general documentation,
    creation of highlighted source code, and support for PHP 5.4 traits. It also generates
    a page with trees of classes, interfaces, traits, and exceptions for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out the ApiGen features at `http://apigen.org/##features`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss how to install ApiGen and configure it
    with NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ApiGen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will first install ApiGen via PEAR and configure it with NetBeans, so that
    we can generate the API documentation from the IDE. We can automatically install
    ApiGen and all of its dependencies with PEAR auto-discover enabled. Enabling the
    discover feature not only automatically adds ApiGen to the system PATH, but also
    allows for an easy updating of each ApiGen component.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing ApiGen and configuring it with NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are already familiar with installing PHP libraries via PEAR (discussed in
    the previous chapter), and we may have had the PEAR configuration `auto_discover`
    set to ON. In this section, we will install and configure ApiGen with NetBeans,
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the terminal or command prompt, run the following commands to install
    ApiGen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `install` command will automatically download and install ApiGen along with
    all of its dependencies. Skip the first command if you have already enabled PEAR
    `auto_discover.`
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to add the ApiGen executable file to the IDE. Open the **IDE Options**
    window from **Tools | Options**, and choose the **PHP Tab | ApiGen** tab, then
    click on the **Search...** button to search for ApiGen scripts. The ApiGen scripts
    should be listed automatically, as shown in the following screenshot:![Time for
    action — installing ApiGen and configuring it with NetBeans](graphics/5801_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the previous screenshot, select `apigen.bat` for Windows OS or `apigen`
    for other OSes, and press **OK** to have the ApiGen script integrated with the
    IDE, as shown in the following screenshot:![Time for action — installing ApiGen
    and configuring it with NetBeans](graphics/5801_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may browse the ApiGen script path there as well.
  prefs: []
  type: TYPE_NORMAL
- en: Press **OK** to save the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up until now, we have configured the ApiGen tool with NetBeans, and this tool
    is ready to be used for PHP projects. Once you have integrated the tool with the
    IDE, you may want to use it from the IDE for the HTML documentation generation
    for your PHP projects. In our next tutorial, we will learn the usage of the tool
    from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Generating API documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will generate the HTML documentation using ApiGen for the sample PHP project
    `Chapter5`, and the tool extracts documentation from the DocBlocks available in
    the project. The generation process can be viewable in the **Output** window of
    the IDE. Finally, the generated HTML documentation opens in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — generating documentation using ApiGen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using integrated ApiGen from the IDE, we will run the documentation generator.
    Note that we need to define the target directory to store the HTML documents.
    Let''s create the HTML documentation for our sample project, according to the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `chapter5` project node. From the context menu, choose **Properties
    | ApiGen**, and the following **Project Properties** window will be displayed:![Time
    for action — generating documentation using ApiGen](graphics/5801_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the previous **Project Properties** window, define the **Target Directory**
    where the HTML pages will be stored, and uncheck the **PHP** box for excluding
    PHP's default elements from the documentation. In this project, let's create a
    directory named `doc` as the target directory inside the project, so that the
    documentation can be browsed at `http://localost/chapter5/doc/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to save the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, right-click on the `chapter5` project node. This will generate a menu,
    which will look similar to the following screenshot:![Time for action — generating
    documentation using ApiGen](graphics/5801_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the previous project context menu, choose **Generate Documentation** to
    start the HTML document generation process, from the given DocBlocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as we chose **Generate Documentation** in the previous step, the HTML
    documentation generator started to progress, and completed the HTML documentation.
    The generation process is summarized in the **Output** window, as follows:![Time
    for action — generating documentation using ApiGen](graphics/5801_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also the HTML documentation for the entire project has been opened in a browser
    that looks similar to the following:![Time for action — generating documentation
    using ApiGen](graphics/5801_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the above screenshot, we can see that the HTML documentation has been created
    for the entire project. The documentation is organized according to packages,
    classes, and functions as per the left frame.
  prefs: []
  type: TYPE_NORMAL
- en: Browse through the links created for the project, and explore how the classes
    and methods are represented over there. You may click on the **TestChild** class
    link in the previous window to get the following screenshot:![Time for action
    — generating documentation using ApiGen](graphics/5801_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the above screenshot, we can see that the class inheritance is also represented
    using a tree along with a suitably decorated documentation for the class, as per
    its DocBlock.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a professional API documentation from the source code comments block,
    and discovered how the classes were organized properly in the final documentation.
    Note that ApiGen provides a searching facility for classes, functions, and so
    on at the generated HTML interface, and also provides a customizable template
    facility to modify the overall documentation's look. We are now confident enough
    to document the PHP source code effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — reviewing tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following tags is applicable for only functions or methods?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@author`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@package`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@param`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@link`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following tags can be used to document the release version of any
    element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@version`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@since`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@deprecated`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@todo`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following tags can be used as an inline tag?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@example`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@param`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@version`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@see`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — doing more with documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time you run the NetBeans documentation generator, it wipes out the target
    directory and creates a new set of HTML documents there. Try commenting interfaces,
    constants, traits, and so on, and run the documentation generator to test the
    generated API documents.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed and practiced how to document the source
    code for PHP applications using NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have specially focused on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: PHPDoc standards and tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting PHP functions/methods, classes, and its variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting TODO tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ApiGen with NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API documentation using ApiGen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it was fun to use the auto-doc generator, and get the HTML documentation
    generated within a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: As we are going for the collaborative PHP development in our next chapter, such
    source documentation is required, in order to maintain a good practice within
    the development team. In the next chapter, we will learn to use the version control
    system (Git) from NetBeans.
  prefs: []
  type: TYPE_NORMAL
