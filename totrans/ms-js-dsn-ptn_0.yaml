- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is starting to become one of the most popular languages in the world.
    However, its history as a bit of a toy language means that developers are tempted
    to ignore good design. Design patterns are a great tool to suggest some well-tried
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is divided into two main halves, each of which contains a number of
    chapters. The first half of the book, which we'll refer to as *Part 1* , covers
    the classical design patterns, which are found in the GoF book.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](text00014.html#ch01 "Chapter 1. Designing for Fun and Profit")
    , *Designing for Fun and Profit* , introduces what design patterns are and why
    we are interested in using design patterns. We will also talk about some of the
    history of JavaScript to give you a historical context.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](text00019.html#page "Chapter 2. Organizing Code") , *Organizing
    Code* , looks at how to create the classical structures that are used to organize
    code, namespaces, or modules and classes, as JavaScript lacks these constructs
    as first class citizens.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](text00028.html#ch03 "Chapter 3. Creational Patterns") , *Creational
    Patterns* , covers the creational patterns outlined in the Gang of Four book.
    We''ll discuss how these patterns apply to JavaScript, as opposed to the languages
    that were popular at the time when the Gang of Four wrote their book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](text00035.html#page "Chapter 4. Structural Patterns") , *Structural
    Patterns* , looks at creational patterns. We''ll examine the structural patterns
    from the Gang of Four book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](text00044.html#page "Chapter 5. Behavioral Patterns") , *Behavioral
    Patterns* , discusses behavioral patterns. These are the final set of patterns
    from the Gang of Four book that we''ll examine. These patterns govern different
    ways to link classes together.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Part 2* looks at patterns that are either not covered in the GoF book or that
    are specific to JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](text00058.html#page "Chapter 6. Functional Programming") , *Functional
    Programming* , covers some of the patterns that can be found in functional programming
    languages. We''ll look at how these patterns can be used in JavaScript to improve
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](text00067.html#page "Chapter 7. Reactive Programming") , *Reactive
    Programming* , explores the problems associated with the callback model of programming
    in JavaScript. It presents Reactive programming, a stream-based approach to events,
    as a possible solution.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](text00074.html#page "Chapter 8. Application Patterns") , *Application
    Patterns* , examines the confusing variety of different patterns to create single
    page applications. We''ll provide clarity and look at how to use libraries which
    use each of the existing patterns, as well as create our own lightweight framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](text00080.html#ch09 "Chapter 9. Web Patterns") , *Web Patterns*
    , looks at a number of patterns that have specific applicability to web applications.
    We''ll also look at some patterns around deploying code to remote runtimes, such
    as the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](text00087.html#page "Chapter 10. Messaging Patterns") , *Messaging
    Patterns* , covers how messaging is a powerful technique to communicate inside
    and even between applications. In this chapter, we''ll look at some common structures
    around messaging and discuss why messaging is so useful.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](text00093.html#page "Chapter 11. Microservices") , *Microservices*
    , covers microservices, which are growing in popularity at a tremendous rate.
    This chapter examines the ideas behind this approach to programming and suggests
    a number of patterns to keep in mind when building using this approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](text00101.html#page "Chapter 12. Patterns for Testing") , *Patterns
    for Testing* , discusses how building software is hard, and how building good
    software is doubly so. This chapter provides some patterns which can make the
    testing process a little bit easier.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](text00112.html#ch13 "Chapter 13. Advanced Patterns") , *Advanced
    Patterns* , explains how some patterns such as aspect-oriented programming are
    rarely applied in JavaScript. We''ll look at how these patterns can be applied
    in JavaScript and discuss whether we should apply them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](text00119.html#page "Chapter 14. ECMAScript-2015/2016 Solutions
    Today") , *ECMAScript-2015/2016 Solutions Today* , covers some of the tools available
    to allow you to use features from future versions of JavaScript today. We''ll
    examine Microsoft''s TypeScript as well as Traceur.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no specialized software needed for this book. JavaScript runs on all
    modern browsers. There are standalone JavaScript engines written in C++ (V8) and
    Java (Rhino), and these are used to power all sorts of tools, such as Node.js,
    CouchDB, and even Elasticsearch. These patterns can be applied to any of these
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is ideal for JavaScript developers who want to gain expertise in object-oriented
    programming with JavaScript and the new capabilities of ES-2015 to improve their
    web development skills and build professional-quality web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "You''ll
    notice that we explicitly define the `name` field."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "To access them there is a menu item, which is located under **Tools** |
    **Developer Tools in Chrome** | **Tools** | **Web Developer in Firefox** ."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
