- en: Chapter 2. Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin modernizing our application, we need to make sure we have the
    necessary prerequisites in place to do the work of refactoring. These are as following:'
  prefs: []
  type: TYPE_NORMAL
- en: A revision control system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PHP version of 5.0 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An editor or IDE with multi-file search-and-replace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A style guide of some sort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revision control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revision control (also known as source control or version control) allows us
    to keep track of the prerequisites:revision control" changes we make to our codebase.
    We can make a change, then commit it to source control, make more changes and
    commit them, and push our changes to other developers on the team. If we discover
    an error, we can revert to an earlier version of the codebase to a point where
    the error does not exist and start over.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not using a source control tool like Git, Mercurial, Subversion,
    or some other revision control system, then that's the very first thing you need
    to put in place. Using source control will be a great benefit to you, even if
    you don't modernize your PHP application at all.
  prefs: []
  type: TYPE_NORMAL
- en: I prefer Mercurial in many ways, but I recognize that Git is more widely used,
    and as such I must recommend Git for new users of source control systems.
  prefs: []
  type: TYPE_NORMAL
- en: While it is beyond the scope of this book to discuss how to set up and use a
    source control system, there are some good Git books and Mercurial books available
    for free.
  prefs: []
  type: TYPE_NORMAL
- en: PHP version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to prerequisites:PHP 5.0" apply the refactorings listed in this book,
    we need at least PHP 5.0 installed. Yes, I know that PHP 5.0 is ancient, but we
    are talking about legacy applications here. It is entirely possible that the business
    owners have not upgraded their PHP versions in years. PHP 5.0 is the bare minimum,
    because that was when class autoloading became available, and we depend on autoloading
    as one of our very first improvements. (If for whatever reason we are stuck on
    PHP 4.x, then this book will be of little use.)
  prefs: []
  type: TYPE_NORMAL
- en: If we can get away with it, we should upgrade to the very latest version of
    PHP. I recommend using the most-recent version of PHP available to your chosen
    operating system. At the time of the latest update to this book, the most recent
    versions were PHP 5.6.11, 5.5.27, and 5.4.43.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing an upgrade from an older PHP version might itself entail modifying the
    application, as there are changes between minor versions in PHP. Approach this
    with care and attention to detail: check the release notes for the release and
    all intervening releases, look over the codebase, identify problems, make fixes,
    spot check locally, commit, push, and notify QA.'
  prefs: []
  type: TYPE_NORMAL
- en: Editor/IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout prerequisites: editor/IDE this book, we will be doing a lot of searching
    and modifying across the legacy codebase. We will need to have a text editor or
    IDE that allows us to find and replace text in multiple files at once. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: Emacs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SublimeText
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TextMate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are likely to be others as well.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if our CLI-fu is strong, we may wish to use grep and `sed` at
    the command line across multiple files at once.
  prefs: []
  type: TYPE_NORMAL
- en: Style Guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using a consistent prerequisites:style guide" coding style throughout the codebase
    is an important consideration. Most legacy codebases that I have seen are a mishmash
    of styles preferred by the various authors over time. One example of this kind
    of mishmash is the mixing of tabs and spaces for indenting code blocks: the developers
    early in the project used 2 spaces for indents, developers in the middle of the
    project used tabs, and recent developers used 4 spaces. This had the effect of
    putting some child blocks completely out prerequisites:style guide" of line with
    their parent blocks, either too much indented or not enough, making it difficult
    to scan for the beginning or end of a block.'
  prefs: []
  type: TYPE_NORMAL
- en: We all long for a consistent, familiar coding style. There are few urges stronger
    than the urge to reformat an unfamiliar or undesired coding style to one that
    is more preferable. But modifying the existing style, no matter how ugly or inconsistent
    it is, can give rise to subtle bugs and behavioral changes from something as simple
    as adding or removing braces in a conditional. Then again, we want the code to
    be consistent and familiar so that we can read it with a minimum of cognitive
    friction.
  prefs: []
  type: TYPE_NORMAL
- en: It is tough to give good advice here. I suggest that the only reason to modify
    the existing style is when it is inconsistent within an individual file. If it
    is ugly or unfamiliar but otherwise consistent throughout the codebase, reformatting
    is likely to cause more problems than it solves.
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to reformat, do so only as you move bits of code from one file
    to another, or as you move files from one location to another. This combines the
    large change of extraction-and-relocation with the more subtle change of style
    modification, and makes it possible to test those changes in a single pass.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you may want to convert to a completely new style, even though the
    existing one is consistent throughout the codebase. Resist that urge. If your
    desire to reformat in toto is overwhelming and cannot be ignored, use a publicly
    documented non-project-specific coding style instead of trying to create or apply
    your own personal or project-specific style. The code in this book uses the PSR-1
    and PSR-2 style recommendations as a reflection of that advice.
  prefs: []
  type: TYPE_NORMAL
- en: Test suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this is a bookprerequisites:test suite" about legacy applications, it would
    be the height of optimism to expect that the codebase has a suite of unit tests.
    Most legacy applications, especially include-oriented, page-based applications,
    are highly resistant to unit tests. There are no units to test, only a spaghetti
    mess of tightly coupled functionality.
  prefs: []
  type: TYPE_NORMAL
- en: And yet it is possible to test a legacy application. The key here is not to
    test what the system units ought to do, but what the system as a whole already
    does. The criteria for a successful test is that the system generates the same
    output after a change as it did before that change. This kind of test is called
    a *characterization test*.
  prefs: []
  type: TYPE_NORMAL
- en: It is not in the scope of this book to discuss how to write a characterization
    test suite. There are some good tools out there already for writing these kinds
    of tests, such as Selenium and Codeception. Having tests of this sort before we
    go about refactoring the codebase is invaluable. We will be able to run the tests
    after each change to make sure the application still operates properly.
  prefs: []
  type: TYPE_NORMAL
- en: I will not pretend prerequisites:test suite" that we are likely to spend the
    time writing these kinds of tests. If we were interested in testing to begin with,
    we would have a test suite of some sort already. The issue here is a very human
    one, not of doing the right thing for its own sake or even of rational expectations
    but of incentives based on rewards. The reward for writing tests is a longer-term
    one, whereas making an improvement to the codebase right now feels immediately
    rewarding, even if we have to suffer with manual checking of the application output.
  prefs: []
  type: TYPE_NORMAL
- en: If you have the time, the self-discipline, and the resources, the best option
    is to create a series of characterization tests for the parts of the application
    you know you will be refactoring. It is the most responsible and most professional
    approach. As a second-best option, if you have a QA team that already has a series
    of application-wide tests in place, you can delegate the testing process to them
    since they are doing it anyway. Perhaps they will show you how to run the test
    suite locally as you make changes to the codebase. Finally, as the least-professional
    but most-likely option, you will have to pseudo-test or spot check the application
    by hand when you make changes. This is probably what you are used to doing anyway.
    As your codebase improves, the reward for improving your own practices will become
    more evident; as with refactoring in general, the goal is to make things better
    than they were before in small increments, not to insist on immediate perfection.
  prefs: []
  type: TYPE_NORMAL
- en: Review and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point we should have all our prerequisites in place, especially our
    revision control system and a modern version of PHP. Now we can begin with our
    very first step in refactoring: adding an autoloader to the codebase.'
  prefs: []
  type: TYPE_NORMAL
