- en: Client-side Attacks with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned to use various tools such as NMAP and Nessus
    to directly exploit vulnerabilities in the target system. However, the techniques
    that we learned are useful if the attacker''s system and the target system are
    within the same network. In this chapter, we''ll see an overview of techniques
    used to exploit systems, which are located in different networks altogether. The
    topics to be covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding key terminology related to client-side attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using msfvenom to generate custom payloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Social-Engineering Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced browser-based attacks using the `browser_autopwn` auxiliary module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need of client-side attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we used the MS08_067net api vulnerability in our target
    system and got complete administrator-level access to the system. We configured
    the value of the RHOST variable as the IP address of our target system. Now, the
    exploit was successful only because the attacker's system and the target system
    both were on the same network. (The IP address of attacker's system was `192.168.44.134`
    and the IP address of target system was `192.168.44.129`).
  prefs: []
  type: TYPE_NORMAL
- en: 'This scenario was pretty straightforward as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/111651aa-ff4e-4af5-bd7d-8135a10fa6cd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, consider a scenario shown in the following diagram. The IP address of
    the attacker system is a *public* address and he is trying to exploit a vulnerability
    on a system, which is not in same network. Note, the target system, in this case,
    has a private IP address (`10.11.1.56`) and is NAT''ed behind an internet router
    (`88.43.21.9x`). So, there''s no direct connectivity between the attacker''s system
    and the target system. By setting RHOST to `89.43.21.9`, the attacker can reach
    only the internet router and not the desired target system. In this case, we need
    to adopt another approach for attacking our target system known as client-side
    attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7aade532-9f47-47be-98f0-bd7da899ecfd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What are client-side attacks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen in the preceding section, if the target system is not in the
    same network as that of the attacker, then the attacker cannot reach the target
    system directly. In this case, the attacker will have to send the payload to the
    target system by some other means. Some of the techniques for delivering the payload
    to the target system are:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker hosts a website with the required malicious payload and sends it
    to the victim.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker sends the payload embedded in any innocent looking file such as
    DOC, PDF, or XLS to the victim over email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker sends the payload using an infected media drive (such as USB flash
    drive, CD, or DVD)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, once the payload has been sent to the victim, the victim needs to perform
    the required action in order to trigger the payload. Once the payload is triggered,
    it will connect back to the attacker and give him the required access. Most of
    the client-side attacks require the victim to perform some kind of action or other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following flowchart summarizes how client-side attacks work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a115f914-bbe2-40c8-bec1-a6bd3a300dda.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What is a Shellcode?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s break the word shellcode into shell and code. In simple terms, a shellcode
    is a code that is designed to give a shell access of the target system. Practically,
    a shellcode can do lot more than just giving shell access. It all depends on what
    actions are defined in the shellcode. For executing client-side attacks, we need
    to choose the precise shellcode that will be part of our payload. Let''s assume,
    there''s a certain vulnerability in the target system, the attacker can write
    a shellcode to exploit that vulnerability. A shell code is a typically hex encoded
    data and may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is a reverse shell?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A reverse shell is a type of shell, which, upon execution, connects back to
    the attacker's system giving shell access.
  prefs: []
  type: TYPE_NORMAL
- en: What is a bind shell?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bind shell is a type of shell, which, upon execution, actively listens for
    connections on a particular port. The attacker can then connect to this port in
    order to get shell access.
  prefs: []
  type: TYPE_NORMAL
- en: What is an encoder?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `msfvenom` utility would generate a payload for us. However, the possibility
    of our payload getting detected by antivirus on the target system is quite high.
    Almost all industry leading antivirus and security software programs have signatures
    to detect Metasploit payloads. If our payload gets detected, it would render useless
    and our exploit would fail. This is exactly where the encoder comes to rescue.
    The job of the encoder is to obfuscate the generated payload in such a way that
    it doesn't get detected by antivirus or similar security software programs.
  prefs: []
  type: TYPE_NORMAL
- en: The msfvenom utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, the Metasploit Framework offered two different utilities, namely, `msfpayload`
    and `msfencode.` The `msfpayload` was used to generate a payload in a specified
    format and the `msfencode` was used to encode and obfuscate the payload using
    various algorithms. However, the newer and the latest version of the Metasploit
    Framework has combined both of these utilities into a single utility called `msfvenom`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `msfvenom` utility can generate a payload as well as encode the same in
    a single command. We shall see a few commands next:'
  prefs: []
  type: TYPE_NORMAL
- en: The `msfvenom` is a separate utility and doesn't require `msfconsole` to be
    running at same time.
  prefs: []
  type: TYPE_NORMAL
- en: '**List payloads**: The `msfvenom` utility supports all standard Metasploit
    payloads. We can list all the available payloads using the `msfvenom --list payloads`
    command as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9f513895-004b-446b-9de3-5d7c50cdf0b9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**List encoders**: As we have discussed earlier, the `msfvenom` is a single
    utility, which can generate as well as encode the payload. It supports all standard
    Metasploit encoders. We can list all the available encoders using the `msfvenom
    --list encoders` command, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c44fc94e-1cd6-47fd-aca5-51b2955c80e9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**List formats**: While generating a payload, we need to instruct the `msfvenom`
    utility about the file format that we need our payload to be generated in. We
    can use the `msfvenom --help` formats command to view all the supported payload
    output formats:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c1c55766-20fc-40f8-8ba5-8e3b051ae4b4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**List platforms**: While we generate a payload, we also need to instruct the
    `msfvenom` utility about what platform is our payload going to run on. We can
    use the `msfvenom --help-platforms` command to list all the supported platforms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a6c5332a-9617-4eb9-b1f4-c763371307d7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating a payload with msfvenom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are familiar with what all payloads, encoders, formats, and platforms
    the `msfvenom` utility supports, let''s try generating a sample payload as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9014fdb6-b1c9-4c40-a5fd-50ed1cd45567.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table shows a detailed explanation for each of the command switches
    used in the preceding `msfvenom` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Switch** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `-a x86` | Here, the generated payload will run on x86 architecture |'
  prefs: []
  type: TYPE_TB
- en: '| `--platform windows` | Here, the generated payload is targeted for the Windows
    platform |'
  prefs: []
  type: TYPE_TB
- en: '| `-p windows/meterpreter/reverse_tcp` | Here, the payload is the meterpreter
    with a reverse TCP |'
  prefs: []
  type: TYPE_TB
- en: '| `LHOST= 192.168.44.134` | Here, the IP address of the attacker''s system
    is `192.168.44.134` |'
  prefs: []
  type: TYPE_TB
- en: '| `LPORT= 8080` | Here, the port number to listen on the attacker''s system
    is `8080` |'
  prefs: []
  type: TYPE_TB
- en: '| `-e x86/shikata_ga_nai` | Here, the payload encoder to be used is `shikata_ga_nai`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-f exe` | Here, the output format for the payload is `exe` |'
  prefs: []
  type: TYPE_TB
- en: '| `-o /root/Desktop/apache-update.exe` | This is the path where the generated
    payload would be saved |'
  prefs: []
  type: TYPE_TB
- en: 'Once we have generated a payload, we need to setup a listener, which would
    accept reverse connections once the payload gets executed on our target system.
    The following command will start a meterpreter listener on the IP address `192.168.44.134`
    on port `8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/61aaa5da-67dc-4c3f-999a-ebce60a4f57f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have sent the payload disguised as an Apache update to our victim.
    The victim needs to execute it in order to complete the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/121c0525-b774-4a16-8fa2-cf66752a7b32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as the victim executes the `apache-update.exe` file, we get an active
    meterpreter session back on the listener we setup earlier (as shown in the following
    screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50a1691c-8d07-4e05-b63c-7b9c0e93b3eb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another interesting payload format is VBA. The payload generated in VBA format,
    as shown in the following screenshot, can be embedded in a macro in any Word/Excel
    document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6ede9c5-6ac3-412b-8ec6-555cd440e498.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Social Engineering with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering is an art of manipulating human behavior in order to bypass
    the security controls of the target system. Let's take the example of an organization,
    which follows very stringent security practices. All the systems are hardened
    and patched. The latest security software is deployed. Technically, it's very
    difficult for an attacker to find and exploit any vulnerability. However, the
    attacker somehow manages to befriend the network administrator of that organization
    and then tricks him to reveal the admin credentials. This is a classic example
    where humans are always the weakest link in the security chain.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux, by default, has a powerful social engineering tool, which seamlessly
    integrates with Metasploit to launch targeted attacks. In Kali Linux, the Social-Engineering
    Toolkit is located under Exploitation Tools | Social Engineering Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Generating malicious PDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Social Engineering Toolkit and select the first option Spear-Phishing
    Attack Vectors, as shown in the following screenshot. Then select the second option
    Create a File Format Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4141fff5-60fe-42f7-8991-dc871b8368d1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, select option 14 to use the `Adobe util.printf() Buffer Overflow` exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0cbdedb-ea6c-4a98-a8ae-473bc7e04dec.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select option 1 to use Windows Reverse TCP Shell as the payload for our exploit.
    Then, set the IP address of the attacker''s machine using the LHOST variable (in
    this case, it''s `192.168.44.134`) and the port to listen on (in this case, `443`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d914a2d0-231e-44d4-a00b-4c77d13392d1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The PDF file got generated in the directory `/root/.set/`. Now we need to send
    it to our victim using any of the available communication mediums. Meanwhile,
    we also need to start a listener, which will accept the reverse meterpreter connection
    from our target. We can start a listener using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other end, our victim received the PDF file and tried to open it using
    Adobe Reader. The Adobe Reader crashed however, there''s no sign that would indicate
    the victim of a compromise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b642bc1f-1c93-4e9c-afdb-3d4690c4a463.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Back on the listener end (on the attacker''s system), we have got a new meterpreter
    shell! We can see this in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d733890-4f7b-4a57-b255-0a23733c83f4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating infectious media drives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Social Engineering Toolkit and from the main menu, select option 3
    Infectious Media Generator as shown in the following screenshot. Then, select
    option 2 to create a Standard Metasploit Executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf1e1374-7e0e-46bf-afd0-0849788695c6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, select option 1 to use Windows Shell Reverse TCP as the payload for our
    exploit. Then, set the IP address in the LHOST variable and port to listen on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd7b7dda-3caf-4631-8bfc-35cd4e2381c2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Social Engineering Toolkit will generate a folder called *autorun* located
    at `/root/.set/`. This folder can be copied to the USB Flash Drive or CD/DVD ROM's
    to distribute it to our victim. Meanwhile, we would also need to set up a listener
    (as shown in the earlier section) and then wait for our victim to insert the infected
    media into his system.
  prefs: []
  type: TYPE_NORMAL
- en: Browser Autopwn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another interesting auxiliary module for performing client-side attacks is
    the `browser_autopwn`. This auxiliary module works in the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker executes the `browser_autopwn` auxiliary module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A web server is initiated (on the attacker's system), which hosts a payload.
    The payload is accessible over a specific URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker sends the specially generated URL to his victim.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The victim tries to open the URL, which is when the payload gets downloaded
    on his system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the victim's browser is vulnerable, the exploit is successful and the attacker
    gets a meterpreter shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the `msfconsole`, select the `browser_autopwn` module using the use `auxiliary/server/browser_autopwn` command
    as shown in the following screenshot. Then, configure the value of the LHOST variable
    and run the auxiliary module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f388f8bb-66f0-44f5-a5a2-ddb2d3d525da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the auxiliary module will create many different instances of exploit/payload
    combinations as the victim might be using any kind of browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/125152ae-8b2f-4627-96e1-e4ae1f3c5029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the target system, our victim opened up an Internet Explorer and tried to
    hit the malicious URL `http://192.168.44.134:8080` (that we setup using the `browser_autopwn`
    auxiliary module):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9c52092-505d-421a-9bfb-72964643e633.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back on our Metasploit system, we got a meterpreter shell as soon as our victim
    opened the specially crafted URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a2a8c5b-fc48-4c01-84f6-c71d727932da.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use various tools and techniques in order
    to launch advanced client-side attacks and bypass the network perimeter restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll deep dive into Metasploit's capabilities for testing
    the security of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Get familiar with various parameters and switches of `msfvenom`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore various other social engineering techniques provided by Social Engineering
    Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
