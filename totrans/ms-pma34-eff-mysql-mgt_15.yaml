- en: Chapter 15. Documenting the System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Producing and maintaining good documentation about data structure is crucial
    for a project's success, especially when it's a team project. Indeed, being able
    to show the current data dictionary and proposed column changes to the other team
    members provides a valuable means of communication. Moreover, a graphical display
    of the inter-table relations quickly demonstrates the inner workings of the database.
    Fortunately, phpMyAdmin has documentation features that take care of these things.
  prefs: []
  type: TYPE_NORMAL
- en: Producing structure reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the **Structure** page of either the `Database` or the `Table` view, the
    **Print view** link is available for producing reports about our database's structure.
    Moreover, a **Data Dictionary** link in `Database` view produces a different report.
    These are detailed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a printable report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When phpMyAdmin generates results, there is always a **Print view** link that
    can be used to generate a printable report of the data. The **Print view** feature
    can also be used to produce basic structure documentation. This is done in two
    steps. The first click on **Print view** displays a report on the screen, with
    a **Print** button at the end of the page. This **Print** button later generates
    a report formatted for the printer.
  prefs: []
  type: TYPE_NORMAL
- en: The database print view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clicking on **Print view** on the **Structure** page for a database generates
    a list of tables. This list contains the number of rows, storage engine, size,
    comments, and the creation date for each table, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The database print view](img/7782_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The selective database print view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, we prefer to get a report for a subset of the tables. This can be
    done from the **Structure** page for a database by selecting the tables we want,
    and then choosing **Print view** from the drop-down menu as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The selective database print view](img/7782_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The table print view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is also a **Print view** link on the **Structure** page for each table.
    Clicking on this link produces information about columns and indexes for the table,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table print view](img/7782_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Preparing a complete report with the data dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A more complete report about the tables and columns in a database is available
    from the **Structure** page of the `Database` view. We just have to click on **Data
    dictionary** link to get this report, which is partially shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing a complete report with the data dictionary](img/7782_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **MIME** column is empty until we add MIME-related information to some columns
    (as explained in [Chapter 16)](ch16.html "Chapter 16. Transforming Data using
    MIME").
  prefs: []
  type: TYPE_NORMAL
- en: Generating relational schemas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](ch10.html "Chapter 10. Benefiting from the Relational System"),
    we defined relations between the `book` and `author` tables. These relations were
    used for various foreign key functions (for example, getting a list of possible
    values in **Insert** mode). We will now examine a feature that enables us to generate
    a custom-made relational schema for our tables in the popular PDF format and other
    formats as well. This feature requires that the phpMyAdmin configuration storage
    be properly installed and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a third table to our model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get a more complete schema, we will now add another table, `country`, to
    our database. The following block of code displays the contents of its export
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will now link this table to the `author` table. First, in the **Relation
    view** for the `country` table, we specify the column that we want to display,
    and then click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a third table to our model](img/7782_15_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then add a **country_code** column (same type and size as that of the `code`
    column in the `country` table) to the `author` table, and in the **Relation view**,
    we link it to the newly-created `country` table.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We must remember to click on **Save** for the relation to be recorded.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, it's not necessary to enter any country data for an author,
    as we are interested only in the relational schema.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a third table to our model](img/7782_15_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Producing schema pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each relational schema is called a **page**. We can create or edit a page by
    clicking on **Edit or export relational schema** in the **Operations** page of
    the `Database` view.
  prefs: []
  type: TYPE_NORMAL
- en: Page planning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A relational schema cannot span multiple databases. But even working with just
    one database, the number of tables might be large. Representing the various table
    relations in a clear way could be a challenge. This is why we may use many pages,
    each showing some tables and their relations.
  prefs: []
  type: TYPE_NORMAL
- en: We must also take into account the dimensions of the final output. Printing
    on letter-size paper gives us less space to show all of our tables and still have
    a legible schema.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As there are no existing pages, we need to create one. As our most important
    table is `book`, we will also name this page **book**.
  prefs: []
  type: TYPE_NORMAL
- en: We will choose which tables we wish to see in the relational schema. We could
    choose each table individually. However, for a good start, checking the appropriate
    **Automatic layout** checkbox is recommended. Doing this puts all the related
    tables from our database onto the list of tables to be included in the schema.
    It then generates appropriate coordinates so that the tables will appear in a
    spiral layout, starting from the center of the schema. These coordinates are expressed
    in millimeters, with `(0, 0)` being located at the upper-left corner. We then
    click on **Go:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new page](img/7782_15_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Editing a page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now get a page with three different sections. The first one is the page menu,
    where we choose the page on which we want to work (from the drop-down menu). We
    can also delete the chosen page. We could also eventually create a second schema
    (page).
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing a page](img/7782_15_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next section is the table placement portion. We can now see the benefit
    of the **Automatic layout** feature—we already have our three tables selected,
    with the **X** and **Y** coordinate columns filled in. We can add a table (on
    the last line), delete a table (using the checkbox), and change the coordinates
    (which represent the position of the upper-left corner of each table on the schema):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing a page](img/7782_15_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To help set exact coordinates, a visual editor is available for JavaScript-enabled
    browsers. The editor appears when the **Toggle scratchboard** button is clicked
    once. It will disappear when this button is clicked again. We can drag and drop
    tables on the scratchboard, and the coordinates will change accordingly. The appearance
    of the tables on the scratchboard provides a rough guide to the final PDF output.
    Some people prefer to see only the table names (without every column name) on
    the scratchboard. This can be done by deselecting the **Column names** checkbox
    and then clicking on **Save**. The following image shows an example of this scratchboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing a page](img/7782_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we are satisfied with the layout, we must click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a page for display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last section of the screen is the report generation dialog. Now that we
    have created a page, the **Display relational schema** shows a dialog as seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a page for display](img/7782_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The available options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Select Export Relational Type** | Permits to choose the file format to
    export to (PDF, SVG, DIA, Visio, or EPS). |'
  prefs: []
  type: TYPE_TB
- en: '| **Show grid** | The schema will have a grid layer with the coordinates displayed.
    Useful when designing and testing the schema. |'
  prefs: []
  type: TYPE_TB
- en: '| **Show color** | The links, table names, and special columns (primary keys
    and display columns) will be in color. |'
  prefs: []
  type: TYPE_TB
- en: '| **Show dimension of tables** | The visual dimension of each table in the
    table title (for example, **32x30)** will be displayed. This is useful when designing
    and testing the schema. |'
  prefs: []
  type: TYPE_TB
- en: '| **Display all tables with the same width** | All tables will be displayed
    using the same width. (Normally, the width adjusts itself according to the length
    of the table and column names.) |'
  prefs: []
  type: TYPE_TB
- en: '| **Data Dictionary** | The data dictionary, which was covered earlier in this
    chapter, will be included at the beginning of the report. |'
  prefs: []
  type: TYPE_TB
- en: '| **Only show keys** | Does not show the columns on which there are no indexes
    defined. |'
  prefs: []
  type: TYPE_TB
- en: '| **Orientation** | Here, we choose the printed orientation of the report |'
  prefs: []
  type: TYPE_TB
- en: '| **Paper size** | Changing this option will influence the schema and the scratchboard
    dimensions. |'
  prefs: []
  type: TYPE_TB
- en: 'In `config.inc.php`, the following parameters define the available paper sizes
    and the default choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows the last page of the generated report (the schema
    page) in PDF format. The first four pages contain the data dictionary along with
    an additional feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrows point in the direction of the corresponding foreign table. If **Show
    color** checkbox has been ticked, the primary keys are shown in red and the display
    columns in blue, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a page for display](img/7782_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot provides another example generated from the same `book`
    table''s PDF page definition. This time the grid is shown, but not the colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a page for display](img/7782_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the font in PDF schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the text we see in the PDF schema is drawn using a specific font. phpMyAdmin
    uses the `DejaVuSans` font ([http://dejavu.sourceforge.net](http://dejavu.sourceforge.net)),
    which covers a wide range of characters.
  prefs: []
  type: TYPE_NORMAL
- en: For actual PDF generation, phpMyAdmin relies on the `tcpdf` library ([http://tcpdf.sourceforge.net](http://tcpdf.sourceforge.net)).
    This library has two ways of using fonts—embedded and not embedded. Embedding
    fonts will produce a bigger PDF file because the whole font is included in the
    PDF file. This is the default option chosen by phpMyAdmin because the library
    does not depend on the presence of a specific `TrueType` font in the client operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: The fonts are located in `libraries/tcpdf/fonts` under the main `phpMyAdmin`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: To use a different font file, we must first add it to the library (tools are
    present in the original `tcpdf` kit and a tutorial is available on the [http://www.fpdf.org](http://www.fpdf.org)
    website) and then modify phpMyAdmin's `libraries/schema/ Pdf_Relation_Schema.class.php`
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out a schema with the Designer feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Designer** feature (available in the `Database` view) offers a more refined
    way of moving the tables on screen, as the column links follow the table movements.
    Therefore, an interface exists between the tables' coordinates, as saved by the
    **Designer**, and the coordinates for the schema. Let us enter the **Designer**
    and click on the small PDF logo.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to a panel where we can choose the (existing) schema name and
    the action we want to perform—in our case, to export the **Designer** coordinates
    to the schema definition. We could also use the **New page name** dialog, entering
    a page name, and then clicking on **Go** to create an empty page. From here, we
    can subsequently export the coordinates saved from the **Designer** workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Laying out a schema with the Designer feature](img/7782_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a difference in the span of tables managed by the **Designer** and
    by the **Edit or export relational schema** feature. The **Designer** manipulates,
    by default, every table of a database, whereas the **Edit or export relational
    schema** panel offers us a choice of tables, enabling us to represent a subset
    of the relations if there are many tables.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the documentation features offered by phpMyAdmin—the print
    view for a database or a table and the data dictionary for a complete column list.
    The chapter also covered relational schemas. In particular, it focused on how
    to create, modify, and export a schema page, and how to use the visual editor
    (scratchboard).
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain how to apply transformations to data, in order
    to customize the data format at view time.
  prefs: []
  type: TYPE_NORMAL
