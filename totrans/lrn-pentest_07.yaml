- en: Diving into the Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit Framework is a penetration testing platform that makes exploiting
    target machines simple. It is an intuitive tool that is an integral part of any
    penetration tester's toolkit. It is maintained by Rapid7, but there are many contributors
    in the security community.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the modularity and flexibility of the Metasploit
    Framework. Since there are regular exploits being developed which can be added
    into Metasploit's already large database, you will learn how to find and import
    these. We will explore the various options that exist for payloads and the difference
    between various shells. Building skills in Metasploit can enhance your penetration
    tests, making it easy by using exploits that already exist, as opposed to writing
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following :'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit options shells and payloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with MSFvenom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit Framework version 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 3 virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit is classified as the world's most used penetration testing software.
    It is a penetration platform that enables you to work with vulnerabilities by
    finding, exploiting, and validating them. It is maintained by Rapid7 and comes
    in two editions, Metasploit Pro and the community edition called the Metasploit
    Framework. Of course there are more features in the Pro edition, but the features
    available in the community edition are not to be overlooked. The features that
    are included in the Metasploit Framework will provide you with enough knowledge
    to learn how to use the Metasploit Framework and what you can achieve by leveraging
    it in your penetration tests.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit's architecture is flexible and modular, which aids developers in
    creating working exploits as vulnerabilities are announced. The interface of Metasploit
    is intuitive and offers a way to run exploit code that has been trusted by the
    security community. Using Metasploit, as opposed to trying to write your own exploit,
    can save you time during a penetration test. As you have learned in [Chapter 1](b37fecb9-6e3e-4ce0-8937-eb376e474bf9.xhtml), *Introduction
    to Penetration Testing*, penetration tests are time-bound. So, spending time on
    crafting your own exploit can waste valuable time that could be used for other
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Not all exploits will work as designed; some might do more harm than good. It
    is important to be vigilant when using exploits that are available on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Kali Linux 2019.1, the version of the Metasploit Framework is version 5\.
    Version 5 has introduced some new features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for Go, Python, and Ruby languages, which can be used in modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New database and automation APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New `evasion` modules and libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple host capabilities in the `exploit` module using the `file://`option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read the full release notes at Rapid7's post: [https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/](https://blog.rapid7.com/2019/01/10/metasploit-framework-5-0-released/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few types of modules that exist in the Metasploit Framework, as
    defined in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploit modules**: Using the exploit module, a series of commands are executed
    on a target, leveraging a specific vulnerability. Typically, this technique uses
    an exploit that has been discovered and released publicly to obtain access to
    the objective. Examples of exploit modules include **injection of codes**, **buffer**
    **overflows**, and exploits on the web.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auxiliary modules**: There are no payloads in the `auxiliary` module. Instead,
    random measures are used that are not directly related to exploitation. For instance,
    an `auxiliary` module can perform an enumeration scan of users or shares. `Fuzzers`
    and `server capture` modules are other examples of `auxiliary` modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post-exploitation modules**: The post-exploitation module allows you to collect
    additional information or elevate your access to the target system. Some instances
    of these modules include **hash dumping** (which we will cover in [Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)*,
    Understanding Password Attacks*) and **service** and **app enumerators.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payloads**: A payload is a shellcode, executed after a system has been successfully
    compromised. The aim of the payload is to define how you want to connect to the
    target system shell and what you want to do after you obtain control. For instance,
    you can open a Meterpreter session. Meterpreter is an advanced payload with a
    DLL injection in memory, hence it never touches the disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOP generator**: Using NOP generators, you create a random byte range that
    allows you to bypass NOP sled signatures in standard intrusion detection and prevention
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started with the Metasploit Framework, with some initial configuration
    steps. The Metasploit Framework is launched from a Terminal window within Kali
    Linux using the command: `msfconsole`**.**
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the past, updating the Metasploit Framework would entail running the `msfupdate`
    command once you started the application. Now that the Metasploit Framework is
    included by default within Kali Linux, you can update it by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install the latest release of the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Linking the Metasploit Framework to a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit provides support for a backend database that supports PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'You do not have to have a database if you want to simply run the Metasploit
    Framework, but it makes it useful if you would like to view the data you have
    collected. Creating a database is done using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to start the PostgreSQL service using the `service PostgreSQL
    start`command from a Terminal window in Kali Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the service has started, we need to define the Metasploit username and
    password that will connect to the database we will create. In order to create
    a username and password for the database, we need to migrate to the PostgreSQL
    user. This is done using the `su postgres` command. You will notice that your
    prompt now changes to `postgres@kali:~#`. Now, we will create a user using the `createuser
    [name] -P` command. Follow the prompts and define a password. In my setup, I have
    used the `msf_user`username, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7433502-287d-47d4-a96e-eed9e5dac5c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Creating a user for the PostgreSQL database'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we create the database using the `created --owner=[name] [database]` command.
    In my setup, I have used the `msf_user`username and the database is called `msf_database`, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de127ba1-f830-4c6c-9a8f-03143ca52d65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Creating the database and linking the user to it'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will open the Metasploit Framework using the `msfconsole` command.
    Once everything has loaded, we will connect to the database we have just created
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we can use `db_connect msf_user:password@127.0.0.1/msf_database`, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d40e73d-3bff-4bd2-bebc-618ab365e284.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Connecting to the database that was just created'
  prefs: []
  type: TYPE_NORMAL
- en: To enable Metasploit to automatically connect to the database, we will need
    to edit the `database.yml` file, which is located at `/usr/share/metasploit-framework/config/`,
    as shown in the following screenshot*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before editing the `database.yml` file, ensure that you exit out of the Metasploit
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have the file, you can modify the sample file and add in the
    details of the database you have created, plus the user login details. Save the
    file as `database.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f462ef6-eb3b-4936-93e3-f2a102b7970f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Modifying the database.yml file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file has been modified, you can launch the Metasploit Framework again
    and check the database connection using the `db_status` command. If everything
    is in order, you will see a message displaying which database Metasploit is connected
    to, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31f420f4-b9a2-4eb3-89e0-555ae82be363.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Checking the database connection within the Metasploit Framework'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have the PostgreSQL service started before running the Metasploit
    Framework, then, when opening the Metasploit Framework, you will receive database
    connection errors.
  prefs: []
  type: TYPE_NORMAL
- en: The database allows you to store information such as host data and exploit results.
    Having Metasploit store data in a database enables you to access the results for
    future reference.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing your experience within Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `workspaces` functionality of Metasploit enables you to organize
    your movements while performing penetration tests. For example, if you are performing
    various tasks against different departments, you can create `workspace` for each
    department, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4cdd2df-d2ab-40ed-8acf-c551e45ac947.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Creating and deleting workspaces'
  prefs: []
  type: TYPE_NORMAL
- en: The command to create `workspace` is `workspace -a [name]` and to delete it,
    we use `workspace -d [name]`**. **To switch between workspaces, you can use the `workspace
    [name]` command. Notice that you can define multiple workspaces within one line
    by separating the names with a space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit enables you to import scans such as those that were run by Nmap
    or Nessus. In [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml), *Performing
    Information Gathering, *you would have exported the Nmap scan of Metasploitable
    3 to a `.xml` file. In order to import that into the Metasploit Framework, you
    can use the `db_import [path to file]` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/464dab05-5a33-4178-94dd-14700f03af84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Importing an Nmap scan'
  prefs: []
  type: TYPE_NORMAL
- en: To convert an Nmap-exported XML file into HTML, you can leverage this command: `xsltproc
    <nmap-output.xml> -o <nmap-output.html>`.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit has a Nessus bridge that can allow you to connect to your Nessus
    database and import scans directly into Metasploit. Let's perform an import using
    the scan we performed in [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml)*,
    Performing Information Gathering:*
  prefs: []
  type: TYPE_NORMAL
- en: 'From a Terminal window, open the Metasploit Framework using the `msfconsole` command.
    Once the framework has loaded, we will load the Nessus bridge plugin using the `load
    nessus` command. Next, you need to connect to your Nessus database. Ensure that
    the Nessus service is running, then connect using the `nessus_connect username:password@IP` command,
    as shown in the following screenshot. In my setup, I have the database locally
    on Kali, hence I am using the loopback address of `127.0.0.1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68ca7d22-06a1-4dee-a6e1-846d2527945f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Connecting to the Nessus database within the Metasploit Framework'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have connected to the Nessus database, you can view your list of scans
    by entering the `nessus_scan_list` command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3936bb5e-723d-4a16-94b5-316eed75cbf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Viewing a list of Nessus scans'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the scan into the Metasploit Framework is done using the `nessus_db_import scanid`
    command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69411b21-f262-44ab-9c48-bdf61b70886e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Importing the Nessus scan'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have imported your scan, you are now able to view the list of vulnerabilities
    and perform searches to find out which vulnerability is covered by Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `hosts -c address` command, `vulns` gives us a list of vulnerabilities
    per host and using the `vulns` command will display the full list of vulnerabilities
    and the IP address of the host that has them. You will notice, in the following
    screenshot, that the Metasploitable 3 virtual machine has a number of vulnerabilities,
    which were imported from Nessus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55e6f2fa-13b8-4e3c-8eab-709551e867b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Displaying vulnerabilities discovered by Nessus'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now search for a specific vulnerability against the Nessus database
    import. For example, using the `vulns -S eternalblue` command, we can search for
    a well-known vulnerability, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6c2db09-0642-4e0c-a906-8384ed90d0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Searching for vulnerabilities within the Nessus scan'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the output displays the IP address of the host and the vulnerabilities
    related to the search query.
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit to exploit a remote target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have imported data from Nessus, and we understand how to use the
    features within the Metasploit Framework, let's perform an exploit to the Metasploitable
    3 virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `ms17_010_eternalblue` exploit. We have identified that the
    Metasploitable 3 virtual machine is vulnerable to this exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Metasploit Framework from a Terminal window using the `msfconsole`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Metasploit Framework has loaded, use the `use exploit/windows/smb/ms17_010_eternalblue`
    command and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the target (which is the IP address of your Metasploitable 3 virtual
    machine) using the `set RHOSTS [IP]` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use the Meterpreter payload, as this will be used later in this chapter.
    Define the payload using the `set payload``windows/x64/meterpreter/reverse_tcp` command.
    Note all of the set options, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70ffc25d-38ef-480b-98ec-50b1a3811acf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Exploit options defined'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have defined the options, you can run the exploit using the `exploit`
    command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aab09e49-5d4c-484c-9f36-9e47efbc69ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Exploit has completed successfully'
  prefs: []
  type: TYPE_NORMAL
- en: You will now have a remote session established to the Metasploitable 3 virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: You will use this session later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finding modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you perform penetration tests on various targets, you might run into a case
    where Metasploit does not have an exploit that you can use. Perhaps you haven't
    encountered such a situation, but you want to keep your Metasploit database up
    to date. In either situation, having knowledge about **where to find** modules
    and **how to add** them into Metasploit is a useful skill to have. There are a
    number of public repositories that host modules that are available for download.
    These websites would be your number one resource for finding modules for Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit-DB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first one we will look at is the Exploit Database (commonly known as **Exploit-DB**).
    You will recognize Exploit-DB from the previous chapter *(*[Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml),
    *Performing Information Gathering)* when we worked with Google dorks. Exploit-DB
    can be accessed directly at: [https://www.exploit-db.com](https://www.exploit-db.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The website has a section called **exploits**,where you are able to find modules
    that are published by security companies and individuals. The website has features
    such as verification of the module (V), the ability to download the module (D),
    and the ability to download the vulnerable application (A) if applicable. This
    is depicted in the title bar as D, A, and V, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9854a591-396e-4a98-a2b7-6eef315dbed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Exploit-DB showing a list of exploits'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the modules span across multiple platforms and types.
  prefs: []
  type: TYPE_NORMAL
- en: Rapid7 exploit database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rapid7 is another public resource where you are able to obtain modules *(*see
    *Figure 16)*. This repository is accessible at: [https://www.rapid7.com/db/modules](https://www.rapid7.com/db/modules).
  prefs: []
  type: TYPE_NORMAL
- en: 'Rapid7''s exploit database is very similar to Exploit-DB; however, it does
    not contain additional features such as the Google Hacking Database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/118ef325-957e-43e3-9f36-fa57fe446f32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Rapid7''s exploit database'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rapid7 also lists the vulnerabilities and links them to the relevant exploits.
    The following example shows the CVE-2019-8943 Wordpress vulnerability and exploit
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/936cfac0-66c8-4467-96c9-9bc1da3456ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: A vulnerability tied to an exploit'
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the exploit, you are able to view the complete details about
    what the exploit does and its available options.
  prefs: []
  type: TYPE_NORMAL
- en: 0day.today
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '0day.today is another repository that holds a number of modules. The difference
    with 0day.today is that there are exploits available that can be purchased, as
    shown in the following screenshot. Some of the paid exploits claim to perform
    activities such as Snapchat takeover and Facebook group theft. There are other
    exploits that are available for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d3668c6-dc8e-4ebd-ae45-1bbbc6f6de39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: 0day.today exploit database'
  prefs: []
  type: TYPE_NORMAL
- en: 0day.today is accessible at [https://0day.today/](https://0day.today/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered how to find modules for the Metasploit Framework, let's
    dive into adding a module. We will use the module that covers the exploit for Wordpress
    5.0.0 — Crop-image Shell Upload (Metasploit). The direct link for this exploit
    is [https://www.exploit-db.com/exploits/46662](https://www.exploit-db.com/exploits/46662).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we download the exploit, we will verify that it does not exist currently
    in the Metasploit Framework. To do this, we can use the `search` command *(*see
    *Figure 19)*. This command allows you to search for specific modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c559a305-4b9b-44d5-89a6-9f69793b7dff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Searching for a module related to crop-image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since there are no results, we will exit the Metasploit Framework and download
    the module to add it. Using the preceding direct link, you can use the download
    function to download the actual module, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21702ef3-87a8-47c7-ac8f-abfc7049461c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Downloading the exploit from Exploit-DB'
  prefs: []
  type: TYPE_NORMAL
- en: 'All modules within the Metasploit Framework are located within `/usr/share/metasploit-framework/modules`.Since
    this is an `exploit` and it is related to `http`, I have placed it within the `/usr/share/metasploit-framework/modules/exploits/multi/http`
    path, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3b21810-b112-4e0f-a51f-b9d1046f478a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Location of the downloaded exploit'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the Metasploit Framework, performing a search will now display
    the newly added `exploit`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef87f807-ad79-471b-84a3-c1c3862544e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Exploit added to the Metasploit database'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `loadpath` command to load a newly added module, for example, `loadpath
    /usr/share/metasploit-framework/modules`.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit options, shells, and payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit has a number of options, shells, and payloads that are used when
    you select various exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Covering all possible options within all exploits is not in the scope of this
    book, but I will explain how to find the options and discuss the most common options
    that are used. It's important to understand the various shells and payload options
    that exist.
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Different modules within the Metasploit Framework make use of different options.
    For example, a login scanner module would contain options such as `userpass_file`,
    `pass_file`, and `user_file`. In the following screenshot, you will notice the
    options for the `auxiliary/scanner/ssh/ssh_login` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24125090-b412-463a-89b7-31cc92643cd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: SSH login scanner options'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the options for a specific module, you can use `show options` command.
    To set an option, you will use the `set` command. The most common options that
    you will use often are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOST**: This refers to the remote host that you want to exploit. This tells
    Metasploit which system you want to attack, so it''s a mandatory field that should
    be defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RPORT**: This defines the remote port that you want to target. Some modules
    might already have this field defined to the default value of the exploit. For
    example, using the `ms17_010_eternalblue` module will have the RPORT value defined
    to `445`. The only time you would really modify the RPORT value is if the target
    is using a custom port, such as using port `2222` for SSH, instead of port `22`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LHOST**: This is the IP address that you want the target machine to connect
    to. Keep in mind where you are located; if you are traversing a public network,
    then you will need to define your public IP and configure port forwarding so that
    the return traffic from the target machine can reach your system. Do not configure
    values such as `localhost`, `0.0.0.0`, or `127.0.0.1` as this will instruct the
    target to connect to itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LPORT**: This is the local port on your system that you want the target to
    connect to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit, being as intuitive as it is, will provide you with descriptions
    for each option that exists in the various modules. You will notice this in the
    preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two types of shells that exist within the Metasploit Framework. These
    are **bind shells** and **reverse shells**.
  prefs: []
  type: TYPE_NORMAL
- en: A **bind shell** opens a new service on the target machine and requires you
    to connect to it to obtain a shell. The problem with these shells is that firewalls
    by default block connections on random ports, hence making a bind shell not as
    effective as a reverse shell.
  prefs: []
  type: TYPE_NORMAL
- en: A **reverse shell** pushes a connection back to the attack machine instead of
    waiting for you to connect to it. It requires that a listener be set up first
    on the attack machine so that it can listen for a connection from the target machine.
    A common practice is to set up the listener on port `80` or `443`. These ports
    are directly related to `http` and `https` respectively and are linked to everyday
    web traffic. Blocking these ports is simply not feasible, therefore making them
    prime targets for reverse shell connections.
  prefs: []
  type: TYPE_NORMAL
- en: Payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit Framework has a large collection of payloads, which can be used
    for all types of scenarios. Viewing the current **payloads** can be done with
    the `show payloads` command. When you run this command, some of the payloads will
    have the same name and look as if they do the same thing; however, there is a
    difference. For example, if you look at the `windows/shell/reverse_tcp` and `windows/shell_reverse_tcp` payloads,
    the forward slash `/` tells us that it is a staged payload, and the underscore
    `_` tells us that the payload is a single one.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **staged payload** is a payload that consists of two main components. The
    components are a small loader and final stage payload. The **stagers** are responsible
    for pulling down the rest of the staged payload. Looking at the preceding example, `windows/shell/reverse_tcp`
    will perform two functions. First, it will send the loader and, once the loader
    is executed, it will request the handler (the attacker) to send over the final
    stage payload. Once that is completed, you will have a shell. An example is seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1df4881f-f232-4a62-9a70-9fb46eee4088.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: An Eternalblue staged payload'
  prefs: []
  type: TYPE_NORMAL
- en: A **single payload **is a fire-and-forget type of payload. This payload contains
    both the loader and the payload. When this type of payload is used, both the loader
    and the payload are sent at once to the target.
  prefs: []
  type: TYPE_NORMAL
- en: '**Meterpreter** is an attack payload that provides an interactive shell. Within
    this shell, the attacker can explore the target and execute code. It is deployed
    using an in-memory DLL injection. This results in Meterpreter running entirely
    in memory and not touching the target''s local disk. Meterpreter injects itself
    into other running processes, making its forensic footprint very small. It was
    designed to circumvent the drawbacks that other payloads may have, such as triggering
    alarms that might alert the target to your activities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think of a reverse shell, its purpose is relatively simple: it is to
    obtain a shell. This may be your first choice, but having a good knowledge of
    the various types of payloads will help you to select the best option for your
    penetration test. For example, using the `windows/meterpreter/reverse_tcp` payload
    is stable and it works, however, using `windows/meterpreter/reverse_https` is
    the more powerful choice. How so? The `windows/meterpreter/reverse_https` payload
    provides a lot more features, such as having an encrypted channel (making it harder
    to detect).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Meterpreter provides the ability to remotely control the filesystem. Using
    this functionality, you can upload file to the target and download files. In the
    following screenshot, I am using the **upload** functionality within Meterpreter
    to upload a malicious version of `procmon.exe`*. *The `getwd` command is used
    to show the current working directory on the target system. The `getlwd` command is
    used to show the working directory on the local system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79782167-db13-4c38-a33b-223db890ec6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: Leveraging the upload functionality of Meterpreter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Meterpreter has a number of post-exploitation modules that can be used. These
    can be found using the `search post` command. In the following screenshot, I am
    using the `post` module, which enumerates the logged-on users. Notice that it
    will save the results in the `loot` folder, so you can reference this again at
    a later stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b665ccb-eff2-450f-8317-dc943323114a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: Using a post-exploitation module within Meterpreter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature of Meterpreter is the `hashdump` command. This command dumps
    the current hashes of the system, which you can copy to a text file for offline
    password cracking, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f87cf3b4-0b20-4dc1-996a-50ddf9b2475c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: Using the hashdump command to dump the current hashes of the target
    system'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding hashes were dumped from the Metasploitable 3 virtual machine.
    Keep these, as you will use them again in [Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml)*,
    Understanding Password Attacks. *I saved them as `Meta3-hashes.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter has a long list of features. As you conduct various penetration
    tests, you will leverage different features in various scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Working with MSFvenom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, we focused on using the Metasploit Framework to exploit
    a vulnerability on a target system and take control of it. With MSFvenom, instead
    of relying on a vulnerability in the system, you are aiming to exploit the most
    common security issue in all organizations: users. This is a vulnerability that
    can never be fully patched.'
  prefs: []
  type: TYPE_NORMAL
- en: MSFvenom is essentially used to build shellcode. Shellcode can be defined as
    code that, when it is run, creates a reverse remote shell back to the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Shellcode can be used by inserting it into a file and then sending that file
    off to your target. This can be done using a phishing campaign, as we learned
    in [Chapter 4](c9af5dc8-a2f6-41a7-98db-dd300fff396a.xhtml)*, Mastering Social
    Engineering*. Once the file is run, you can obtain remote access to the target's
    computer. Real-world attackers leverage this technique too. Shellcode is not only
    limited to a file, but can also be inserted into software. This is common with
    malicious applications that you may find on app stores for mobile devices. Moving
    away from phishing and software, shellcodes can be embedded into websites that
    have been compromised. Hence, when someone browses a website, malicious software
    can be loaded onto their machine, allowing it to be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Shellcodes could be built in earlier versions of Metasploit by the `msfpayload`
    and `msfencode` commands. These services have now been combined with the `msfvenom`
    utility and replaced. If you are used to the old tools, `msfvenom` is not a problem
    because there are few modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are advantages to using MSFvenom:'
  prefs: []
  type: TYPE_NORMAL
- en: There's a single tool to generate cross-platform shellcodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line options are standardized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The increased speed when creating shellcodes gives you the ability to use applications
    as templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use MSFvenom, you will need to enter the `msfvenom` command from a Terminal
    window in Kali Linux. The application will present you with a list of available
    options. Some of the most important options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-p` is used to select the Metasploit payload. There are a number of payloads available;
    these support Windows, Linux, Mac, and more. An example of defining a payload
    is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we are using the `windows/meterpreter/reverse_tcp` payload,
    the local host and IP address are defined. The output format is defined as `.exe`
    using the `-f` option, and the output file is saved as `shell.exe` using the `-o`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '`-e` is used to select the encoder. An encoder is an algorithm that can be
    used to re-encode payloads. This is used to obfuscate the intent of the payload.
    You can find a list of encoders by using the `msfvenom -l encoders` command.An
    example of using an encoder is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example, the encoder selected is `shikata_ga_nai` and the iterations
    defined is `3` using the `-i`option.
  prefs: []
  type: TYPE_NORMAL
- en: '`-x` is used to define a custom executable file to use as a template. Using
    this option, you can take a legitimate file and create a malicious version of
    it, which can grant you a remote shell. An example of this is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `putty.exe` is being used as the template to create a malicious
    version called `evilputty.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the Metasploit Framework. We defined what it can
    be used for and explored the various types of modules included. We worked on some
    of the initial tasks of Metasploit and looked at where we can obtain new modules.
    Using the flexibility of Metasploit, we imported data from other sources such
    as Nmap and Nessus and explored the core components of Metasploit. Lastly, we
    looked at using MSFvenom in the creation of shellcode.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the ability to perform the initial configuration of the Metasploit
    Framework. You have learned how to perform some initial setup tasks such as updating
    the Metasploit Framework and linking it to a database. You have gained skills
    on how to enhance your experience within the Metasploit Framework by using workspaces
    and importing data from tools such as Nmap and Nessus. You have learned where
    to obtain new modules and how to install them. You have gained an understanding
    of the main options of Metasploit and the difference between shells and payloads.
    Finally, in this chapter, you have gained skills on how to leverage shellcodes
    using MSFvenom.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, ([Chapter 6](72d35b3e-36f2-487f-b143-d228b9e3c77f.xhtml),
    *Understanding Password Attacks*), we will look at the various types of password
    attacks and where to obtain password lists from. We will leverage built-in tools
    within Kali Linux and perform some password cracking and credential dumping.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name one key feature that has been introduced in version 5 of the Metasploit
    Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name at least three modules that exist in the Metasploit Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two external data sources that can be imported into the Metasploit Framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name at least two public repositories where additional modules can be downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a bind shell and a reverse shell?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
