- en: Chapter 8. Managing Bandwidth with IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now very much aware that IPCop is more than just a basic packet-filtering
    firewall. We have seen the built-in intrusion detection system as well as the
    powerful VPN options. Another addition we have is the ability to manage traffic
    through a couple of different technologies, traffic shaping and caching. We will
    now look at how we can use these to increase the performance of the network where
    we need it.
  prefs: []
  type: TYPE_NORMAL
- en: The Bandwidth Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most networks in use at the moment there will generally be a number of different
    services provided and used by the network and there may be multiple links to other
    networks. With so many services in place we can use up bandwidth very quickly.
    The easiest way to ensure you have enough bandwidth for all the services and users
    on your network is to buy fast links with low contention. This is a good theory,
    but the economic reality is a little bit more complex, as bandwidth can be expensive
    and can be a major overhead to a service. In order to combat this, we can work
    with the services we have and try to reduce their bandwidth usage.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing bandwidth usage can initially be accomplished by using protocols that
    conserve bandwidth where possible; sometimes, however, we have no choice and have
    to go with a particular protocol dictated by an application, a vendor, or a user.
    This is when we can look at reducing the strain put on the network by that application.
    There are a number of technologies and devices we can use to do this, each with
    varying complexity and results. IPCop itself, however, has a few simple options
    to help look after our bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most commonly used protocols, Internet-wide, is HTTP (although peer-to-peer
    filesharing applications are fast catching up). Most businesses have a website
    running on HTTP as their basic Internet presence and there are very few Internet
    users that don't use HTTP. We can be pretty confident that this is going to be
    a protocol used on our network.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP presents us with an important problem when it comes to bandwidth—users
    expect HTTP to be almost instantaneous. Introducing delays to a user's web browsing
    experience due to bandwidth congestion is far from an ideal situation and is probably
    the first place network users are going to notice (and complain!) about a lack
    of bandwidth. Luckily, IPCop provides us with very powerful options to reduce
    HTTP's impact on the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Solutions: Proxying and Caching'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While use of a proxy isn't a bandwidth-saving measure on its own, it is a feature
    related to bandwidth control and monitoring. A proxy allows you to monitor, modify,
    and control requests for web content. You can choose which traffic to log and/or
    reject as well as modify these requests as they pass through the proxy. Since
    the proxy sits between the web client and the web server, it can perform some
    other functions, such as caching.
  prefs: []
  type: TYPE_NORMAL
- en: It's common for users on the same network to access a few of the same websites.
    This means that every time a user hits the website, they will be downloading all
    the HTML and images on the page. It would obviously be beneficial for our network
    if this content was only downloaded once, and then somehow stored to be presented
    to subsequent clients requesting the same content. Our browsers do that for us
    at the local level, and so if we access the same page more than once there is
    a chance our browser has cached a local copy for us.
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly what a caching proxy would provide us, but it would cache for
    everyone. Whenever a user downloads a page and its images, the proxy will keep
    a copy in its memory (and/or write it to disk). Whenever a request for the same
    content appears, rather than passing it to the original website, the proxy provides
    the client a copy of the cached version of the file. We can reduce bandwidth dramatically,
    especially if our users are visiting many of the same sites. This does not mean
    that the information you get will be out of date; a website can request that proxies
    do not cache information that's time dependent (stock information, weather, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Squid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Squid** is one of the most useful and powerful web proxy and caching systems
    available. It''s free and open source, which is why it can be included with IPCop.
    Squid itself has quite complicated configuration files and performs a variety
    of proxying and caching functions. As we have come to expect from IPCop, it abstracts
    this complication nicely and let''s us configure Squid with some ease.'
  prefs: []
  type: TYPE_NORMAL
- en: Squid was born as a *fork* of Harvest Cached, which was a proxy/caching project
    and released its first version in 1994, therefore Squid has had a development
    timeline spanning over 10 years. This has led to a quite stable and full-featured
    proxying and caching application. The original Harvest Cached project is no longer
    under development.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Squid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Squid configuration screen in IPCop is very easy to follow and you can get
    away with clicking a couple of boxes for a basic configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Squid](img/1361_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example we have only a Green interface present; we can, however, enable
    the proxy on all other interfaces—except Red, which is the internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is quite obvious; we enable the proxy on the interfaces we need
    it on by clicking the first checkbox and then choosing the port the proxy listens
    on (800 by default in IPCop—although Squid usually runs on port 3128). We can
    also check the **Log Enabled** box, which is interface non-specific, so we either
    log all or log none. It's a good idea to enable this if we want to monitor the
    proxy at some point. We can also chain this proxy through one provided by our
    ISP for example by configuring the **Upstream** options, which would be provided
    by the ISP or other proxy service provider. The host port to connect to, and a
    user name and password may be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Transparency requires a little more explanation. Traditionally proxies listened
    on a specific port on the machine, and clients would have to be configured to
    connect to this. For example, the proxy could be on IP address 10.0.0.1 listening
    on port 800\. In this case we would configure all of our HTTP clients to connect
    to this proxy. Firefox and Internet Explorer have network settings dialogs where
    we can configure the proxy access. The Firefox proxy configuration screen is shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Squid](img/1361_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a simple method to use, but if we have to configure all of our applications
    like this it could get tedious, especially if we have a number of machines on
    the network to configure in the same way. This is where transparent proxying becomes
    useful. Instead of the proxy listening on one port and forwarding requests through,
    it monitors all traffic passing through the machine, and where it detects HTTP
    traffic, it attempts to cache. This also has a downside in that some other protocols
    may look like HTTP, and an attempt to cache these may break them. If we enable
    transparent proxying and shortly afterwards an application starts having trouble,
    it's worth switching the transparency off as an initial step. This is a rare and
    specific problem but can be quite hard to track down.
  prefs: []
  type: TYPE_NORMAL
- en: Cache Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cache size:** How much space on disk do we want the cache to take? This is
    set as a default of 50MB, which is quite sensible for most small networks. If
    we have a lot of users we may want to increase this to a few 100MB. Going beyond
    1 GB on anything but a really large network is rarely necessary. Also, if the
    number is significantly greater than the available memory on the IPCop machine,
    then we will have a lot of disk reads/writes, which could slow things down.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Min object size:** Sometimes we don''t want to cache the really small files
    as it can be inefficient. Generally, however, it''s a good idea to leave this
    at zero as the repeated HTTP overhead of these files can be a performance hit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Max object size:** Likewise we may not want overly large files to be cached
    as this will quickly fill up our cache and lead us into the disk read/write problem
    that we hope to avoid.'
  prefs: []
  type: TYPE_NORMAL
- en: The defaults for the previous two options should generally be used unless we
    have a specific need to change them, for example users continually downloading
    the same large files.
  prefs: []
  type: TYPE_NORMAL
- en: Transfer Limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also control the maximum and minimum sizes for file transfers through
    the system. This is not a good idea unless we have a specific case for doing so,
    as it can be very frustrating for the user. It's quite handy if we want to prevent
    users downloading very large files such as ISOs, as an attempt to prevent abuse
    of the network's bandwidth for personal use.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Bandwidth without a Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP is not the only protocol on our networks that we need adequate bandwidth
    for. For example if we have online games or voice and video communication on our
    network, these services usually warrant higher priority than others due to their
    time-sensitive use. You wouldn't want to have a choppy voice conversation with
    a client because one of the users on the network is downloading large files, or
    on a home network, you wouldn't want to lose your high score in your online game
    because someone decided to start listening to their online radio station. This
    is where traffic shaping comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic Shaping Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to ensure Quality of Service (QoS), we have to control traffic so that
    high priority traffic is treated as just that, high priority! With traffic shaping,
    we can use all the same parameters we use in packet filtering; however, instead
    of deciding whether to pass the traffic, we make more complicated decisions about
    which traffic is afforded the highest priority and is therefore processed first
    or given more bandwidth than the other protocols in use on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic is used commonly to control media services. Video- and audio-based services
    rely heavily on low latency and ample available bandwidth, and so it's common
    to introduce traffic shaping to a network to accommodate these services.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ISPs Capitalizing on Traffic Shaping**'
  prefs: []
  type: TYPE_NORMAL
- en: Some ISP's use traffic shaping in much the same way as we describe here, to
    provide better service to services relying on bandwidth and latency.
  prefs: []
  type: TYPE_NORMAL
- en: There is also another commercial use for this in the form of service provisions.
    ISPs can traffic shape (and some do) so that one content provider's services respond
    better than another. For example an ISP can charge for priority shaping, and if
    Google paid for this service, they would be guaranteed that their content and
    services would appear faster and more responsive to those of their competitors
    such as Yahoo! and MSN.
  prefs: []
  type: TYPE_NORMAL
- en: This is an effective way to push out the competition as the ISPs users would
    likely stick with the *better* content provider. Obviously not entirely in the
    interests of the ISP's users, but certainly a profitable venture for the ISP and
    possibly the content providers that pay for these services.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic Shaping Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The traffic shaping configuration page is very simple and could offer us more
    options, but we have the ability to shape based on port in use, which allows us
    to be specific enough to differentiate most services for traffic shaping purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Traffic Shaping Configuration](img/1361_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The checkbox next to the words **Traffic Shaping** is used to enable the service.
    This won't have any effect on the traffic, however, until we define some traffic
    shaping rules.
  prefs: []
  type: TYPE_NORMAL
- en: We also have to provide the uplink and downlink speeds. This is how fast our
    network can transfer data out and in. A quick reference to common upload and download
    speeds is given in the following table, which may not be entirely accurate for
    our setup. It's recommended we test our own speeds or consult our ISP for more
    accurate information.
  prefs: []
  type: TYPE_NORMAL
- en: '| Connection type | Uplink (kbit/sec) | Downlink (kbit/sec) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Dialup | 48 | 56 |'
  prefs: []
  type: TYPE_TB
- en: '| Cable (1 Meg) | 256 | 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| T1 | 192 | 1540 |'
  prefs: []
  type: TYPE_TB
- en: 'A more complete guide to different services with their upload and download
    speeds can be found here: [http://en.wikipedia.org/wiki/List_of_device_bandwidths](http://en.wikipedia.org/wiki/List_of_device_bandwidths).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Traffic Shaping Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Adding a Traffic Shaping Service](img/1361_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to add a service, we fill in the three required fields and then choose
    **Enabled**. Clicking **Add** adds a new line to the **Traffic shaping services**
    in the bottom pane. In this case we have added port **5060 UDP** (SIP) as **High**
    priority, which will ensure that this service is given precedence on the network.
    These are quite basic traffic shaping options and we don't have the ability to
    define port ranges or shaping by IP address. We are limited to three levels of
    priority—low, medium, and high, with ports being added one at a time. It's not
    necessary to list all ports that will pass through IPCop as those not specified
    will be handled at medium level by default. To delete this rule, we simply click
    the trash can on the right-hand side; we can also enable or disable added rules
    using the checkbox under the **Action** heading.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a Traffic Shaping Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to edit a service we have already added, we can click on the pencil
    under the action heading, which should show a screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing a Traffic Shaping Service](img/1361_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that our rule is now highlighted in yellow in order to make it clear
    which rule we are editing, and we have the original parameters in the configuration
    boxes above. The **Add** button has also changed to **Update**. We now modify
    any value we require and click the **Update** button, which will save the rules
    and take us back to the initial Traffic Shaping screen.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional modules available for IPCop that extend these capabilities
    even further, which are worth considering if you have some serious traffic shaping
    work to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered caching and traffic shaping with IPCop and how
    to configure these. This can be useful on even the smallest of networks, as we
    prioritize service access, allowing users on the network to be guaranteed the
    best possible service for any critical services in use. The options for doing
    so in IPCop are quite basic, and we are limited in the control we have. We have
    seen, however, that it is possible to make an impact on services in order to improve
    our bandwidth utilization.
  prefs: []
  type: TYPE_NORMAL
