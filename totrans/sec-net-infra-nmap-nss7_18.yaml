- en: Vulnerability Scoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about understanding the importance of correct vulnerability
    scoring. We will understand the need for standard vulnerability scoring and gain
    hands-on knowledge of scoring vulnerabilities using the **Common Vulnerability
    Scoring System** (**CVSS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for vulnerability scoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scoring using CVSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVSS calculator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements for vulnerability scoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take any modern-day network and scan it for vulnerabilities. You'll be overwhelmed
    and find tons of vulnerabilities. Now, if you keep scanning the network, say monthly,
    then your inventory of vulnerabilities will keep growing rapidly. If all these
    vulnerabilities are presented as is to the senior management, then this will not
    be of any help. Senior management is more interested in some precise information
    that would be actionable.
  prefs: []
  type: TYPE_NORMAL
- en: A typical vulnerability scanner may find 100 vulnerabilities in a particular
    system. Out of 100, 30 may be false positives, 25 may be informational, 25 may
    be low severity, 15 may be medium severity, and five may be high-severity vulnerabilities.
    Naturally, out of 100 reported vulnerabilities, the five high-severity vulnerabilities
    are to be addressed as a priority. The rest can be taken care of later as per
    resource availability.
  prefs: []
  type: TYPE_NORMAL
- en: So, unless a vulnerability is scored, it cannot be assigned a severity rating
    and hence it cannot be prioritized for fixing. The C-level executives would also
    be interested to know which are the most high-severity vulnerabilities within
    the organization. Scoring the vulnerabilities would thus help in getting the right
    attention and support from senior management in terms of project visibility and
    resource management. Without scoring, it would be impossible to prioritize vulnerability
    mitigation and closure.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scoring using CVSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability scoring is indeed a very subjective matter. It depends on the
    context and the expertise of the person scoring the vulnerability. Hence, in the
    absence of any standard system, scoring the same vulnerability can differ from
    person to person.
  prefs: []
  type: TYPE_NORMAL
- en: 'CVSS is a standard system for scoring vulnerabilities. It takes into account
    several different parameters before concluding the final score. Using CVSS has
    the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides standardized and consistent vulnerability scores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides an open framework for vulnerability scoring, making the individual
    characteristics of the score transparent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVSS facilitates risk prioritization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For simplification purposes, CVSS metrics are categorized into various groups,
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c9cae04-a146-4b6f-87b7-80c822a88fbf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll go through each of the metric categories in brief in the section ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Base metric group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The base metric group defines some trivial characteristics of a given vulnerability
    which are constant over time and with user environments. The base metric group
    is categorized into two sub-groups as discussed in the section ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitability metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, the exploitability metrics reflect the characteristics of the
    *thing* that is vulnerable, which we refer to formally as the **vulnerable component**.
    Therefore, each of the exploitability metrics listed here should be scored relative
    to the vulnerable component, and reflect the properties of the vulnerability that
    leads to a successful attack.
  prefs: []
  type: TYPE_NORMAL
- en: Attack vector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An attack vector is nothing but a path taken by the attacker in order to successfully
    exploit the vulnerability. The attack vector metric indicates the possible ways
    in which vulnerability could be exploited. The number of potential attackers for
    a vulnerability that could be exploited remotely over the Internet is comparatively
    more than the number of attackers that could exploit a vulnerability requiring
    physical access to a device, hence the metric value would be larger the more remote
    the attacker could be in order to exploit the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| Network | Vulnerability could be exploited remotely over the network. The
    vulnerable component is connected to the network and the attacker could access
    it through layer 3 (OSI). | Denial of service caused by sending a specially crafted
    TCP packet |'
  prefs: []
  type: TYPE_TB
- en: '| Adjacent | Vulnerability could be exploited within the same physical or logical
    network. It cannot be exploited beyond the network boundary. | Bluejacking attack,
    ARP flooding |'
  prefs: []
  type: TYPE_TB
- en: '| Local | The vulnerable component is not connected to the network by any means
    and the attacker has to be locally logged in in order to exploit the vulnerability.
    | Privilege escalation |'
  prefs: []
  type: TYPE_TB
- en: '| Physical | Vulnerability could only be exploited if the attacker has physical
    access to the vulnerable system/component. | Cold boot attack |'
  prefs: []
  type: TYPE_TB
- en: Attack complexity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The attack complexity metric lists all conditions and prerequisites beyond
    the attacker''s control but required in order to successfully exploit the vulnerability.
    For example, it might be possible that a particular vulnerability could only be
    exploited if a particular version of the application was deployed on a certain
    OS platform with some custom settings. If all these conditions were met, then
    only the vulnerability exploitation could be possible. For some other vulnerabilities,
    it might be possible to exploit it irrespective of the application version and
    the type of base operating system. Thus, the conditions and prerequisites add
    up to the attack complexity and vary from one vulnerability to the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| Low | No specific conditions or prerequisites exist that might hinder the
    attacker from successfully exploiting the vulnerable component repeatedly. | Denial
    of service caused by sending specially crafted TCP packet |'
  prefs: []
  type: TYPE_TB
- en: '| High | The success of the attack relies on specific conditions that are beyond
    the control of the attacker. Thus, the attacker cannot launch a successful attack
    whenever he wants and would need to put in considerable effort in preparing for
    the attack. | Attacks involving random tokens, sequence numbers, and so on |'
  prefs: []
  type: TYPE_TB
- en: Privileges required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The privileges-required metric defines the privilege level that an attacker
    must have in order to successfully exploit the vulnerability. There might be some
    vulnerabilities that could be exploited with normal privilege levels, while others
    may strictly require root or administrator-level privileges for successful exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| None | The attacker does not require any prior privileges or access in order
    to carry out the attack. |'
  prefs: []
  type: TYPE_TB
- en: '| Low | The attacker requires limited or minimum privileges in order to successfully
    execute the attack. |'
  prefs: []
  type: TYPE_TB
- en: '| High | The attacker would require significant privileges such as administrator
    or root in order to exploit the vulnerable component. |'
  prefs: []
  type: TYPE_TB
- en: User interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The user interaction metric indicates the actions that the target user needs
    to perform (apart from the attacker''s action) to successfully exploit the vulnerability.
    Some vulnerabilities could be exploited solely by the attacker while the others
    might need additional user interaction/participation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| None | The attacker can exploit the vulnerable system/component without requiring
    any interaction from the victim/user. | Denial of service caused by sending specially
    crafted TCP packet |'
  prefs: []
  type: TYPE_TB
- en: '| Required | Attacker would require the victim (user) to perform some kind
    of action in order to exploit the vulnerability. | Drive-by-wire attacks, clickjacking
    |'
  prefs: []
  type: TYPE_TB
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CVSS 3.0 permits us to capture metrics for a vulnerability in a component,
    which also impacts resources beyond its means. Scope refers to what parts of the
    vulnerable component are affected by the vulnerability or what associations are
    impacted by exploiting the vulnerability. The scope is segregated by authorization
    authorities. A vulnerability might affect components within the same authorization
    authority or within different authorization authorities. For example, a vulnerability
    in a virtual machine allowing the attacker to modify files in the base (host)
    system would include two systems in scope, while a vulnerability in Microsoft
    Word, allowing the attacker to modify system host files, would come under single
    authorization authority:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Unchanged | An exploited vulnerability would affect only the resources managed
    by the affected component |'
  prefs: []
  type: TYPE_TB
- en: '| Changed | An exploited vulnerability may impact resources beyond the boundary
    of the vulnerable component |'
  prefs: []
  type: TYPE_TB
- en: Impact metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The impact metrics indicate the various properties of the affected component
    in terms of confidentiality, integrity, and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Confidentiality impact indicates the impact on the confidentiality of the information
    after successful exploitation of the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| High | Total loss of confidentiality, resulting in the attacker having complete
    access to the resources. For example, attacks on a password and stealing private
    encryption keys could result in complete loss of confidentiality. |'
  prefs: []
  type: TYPE_TB
- en: '| Low | There is a limited loss of confidentiality. Though access to confidential
    information is obtained, the attacker doesn’t have complete control over what
    information is obtained. |'
  prefs: []
  type: TYPE_TB
- en: '| None | There is no impact on confidentiality within the impacted component.
    |'
  prefs: []
  type: TYPE_TB
- en: Integrity impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The integrity impact metric indicates the impact on the integrity of the information
    after successful exploitation of the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| High | Complete loss of integrity. For example, the attacker is able to modify
    all files protected by the affected component. If an attacker is able to partially
    modify information, this would lead to severe consequences. |'
  prefs: []
  type: TYPE_TB
- en: '| Low | Though the data may be modified, the attacker doesn''t have complete
    control over the amount or the consequences of modification. There''s no severe
    impact on the affected component. |'
  prefs: []
  type: TYPE_TB
- en: '| None | There is no impact on integrity within the impacted component. |'
  prefs: []
  type: TYPE_TB
- en: Availability impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The availability impact metric indicates the impact on the availability of
    the affected component after successful exploitation of the vulnerability. The
    loss of availability may be due to a network service stopping, such as the web,
    a database, or an email. All the attacks that tend to consume resources in the
    form of network bandwidth, processor cycles, or disk space could be indicated
    by this metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| High | Complete loss of availability, resulting in denied access to the resources
    of the affected component |'
  prefs: []
  type: TYPE_TB
- en: '| Low | Limited impact on resource availability |'
  prefs: []
  type: TYPE_TB
- en: '| None | There is no impact on availability within the impacted component |'
  prefs: []
  type: TYPE_TB
- en: Temporal metric group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The temporal metrics indicate the existing state of various exploit techniques,
    patches, or workarounds or the degree of confidence in the existence of the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit code maturity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploit code maturity metric indicates the likelihood of the vulnerability
    being exploited depending on the existing state of exploit techniques and code
    availability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some exploit codes may be publicly available, making them easily accessible
    to numerous attackers. This increases the likelihood of the vulnerability getting
    exploited. Note the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Not defined | Assigning this value to the metric will not affect the score.
    It simply indicates the scoring equation to skip this metric. |'
  prefs: []
  type: TYPE_TB
- en: '| High | Functional autonomous code exists, or no exploit is required (manual
    trigger) and details are widely available. |'
  prefs: []
  type: TYPE_TB
- en: '| Functional | Functional exploit code is available and it works in most situations.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Proof of concept | Proof of concept is distinctly available. The code may
    not be functional in all situations and may require considerable edits by a skilled
    attacker. |'
  prefs: []
  type: TYPE_TB
- en: '| Unproven | Exploit code is unavailable or the exploit is just hypothetical.
    |'
  prefs: []
  type: TYPE_TB
- en: Remediation level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The remediation level metric indicates the level of fixes, patches, or workarounds
    available in order to mitigate the vulnerability. It can help in prioritizing
    vulnerability fixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Not defined | Assigning this value to the metric will not affect the score.
    It simply indicates the scoring equation to skip this metric. |'
  prefs: []
  type: TYPE_TB
- en: '| Unavailable | No solution exists or it''s impossible to apply the solution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Workaround | An unofficial, non-vendor fix exists; this may be in the form
    of an in-house patch. |'
  prefs: []
  type: TYPE_TB
- en: '| Temporary fix | Official, yet temporary, fix exists; it may be in the form
    of quick-fix/hot-fix. |'
  prefs: []
  type: TYPE_TB
- en: '| Official fix | A complete and tested fix is available and officially released
    by the vendor. |'
  prefs: []
  type: TYPE_TB
- en: The environmental metrics are used only if the analyst needs to customize the
    CVSS score in the specific area of the impacted organization. You can read more
    about the environmental metrics at [https://www.first.org/cvss/cvss-v30-specification-v1.8.pdf](https://www.first.org/cvss/cvss-v30-specification-v1.8.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Report confidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The report confidence metric indicates the level of confidence in the existence
    of the vulnerability and the authenticity of the resources and technical details.
    It may be that a certain vulnerability is published without any additional technical
    details. In such a case, the root cause and the impact may be unknown:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Not defined | Assigning this value to the metric will not affect the score.
    It simply indicates the scoring equation to skip this metric. |'
  prefs: []
  type: TYPE_TB
- en: '| Confirmed | A comprehensive report exists or the vulnerability/issue could
    be reproduced functionally. Source code may be available to manually verify the
    outcome of the research, or the author/vendor of the impacted code has confirmed
    the existence of the vulnerability. |'
  prefs: []
  type: TYPE_TB
- en: '| Reasonable | Considerable details have been published, yet researchers don''t
    have complete confidence in the root cause. Researchers may not have access to
    source code in order to affirm the findings. |'
  prefs: []
  type: TYPE_TB
- en: '| Unknown | There are reports about the presence of the vulnerability; however,
    its cause is unknown. There is uncertainty about the true nature of the vulnerability.
    |'
  prefs: []
  type: TYPE_TB
- en: CVSS calculator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we looked at various categories of metrics that are
    taken into consideration for calculating the final CVSS score. It might appear
    overwhelming to consider so many values in calculating the score. However, this
    task is made easy by using the online CVSS calculator. It can be accessed at [https://www.first.org/cvss/calculator/3.0](https://www.first.org/cvss/calculator/3.0).
  prefs: []
  type: TYPE_NORMAL
- en: The online CVSS calculator has got all the required parameters, and you need
    to select the right ones based on your environment and vulnerability context.
    Once done, the final score is automatically populated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the CVSS calculator before selecting values
    for any of the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50108bdf-debc-41d1-8ec0-152fb541fe0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Consider a vulnerability that could be remotely exploited over the network,
    is highly complex to execute, requires high account privileges, and requires some
    kind of interaction from a target user while the impact on confidentiality, integrity,
    and availability is low. In such a case, the CVSS score would be 3.9 and rated
    as Low, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce6f7d4-8237-43b4-b26d-9ec4ef32b3bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s consider another vulnerability that could be remotely exploited over
    the network; however, it is very easy to execute. It requires low or normal account
    privileges and requires some kind of interaction from the target user, while the
    impact on confidentiality, integrity, and availability is low. In such a case,
    the CVSS score would be 5.5 and rated as Medium, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d09ccbe4-a9a3-4dc0-a499-846e3bbc64bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s consider another vulnerability that could be remotely exploited over
    the network. However, it is very easy to execute, doesn''t require any specific
    account privileges, and does not require any kind of interaction from the target
    user. If the vulnerability gets successfully exploited, the impact on confidentiality
    and integrity would be high while the impact on availability would be low. In
    such a case, the CVSS score would be 9.4 and rated as Critical, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec00a0a2-f3c9-45e5-8aa1-13ae349f8d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the importance of vulnerability scoring and
    various parameters that need to be considered for scoring any given vulnerability.
  prefs: []
  type: TYPE_NORMAL
