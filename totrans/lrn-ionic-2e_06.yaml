- en: Ionic Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to look at integrating device-specific features,
    such as network, battery status, camera, and so on into an Ionic app. To start
    exploring this, we will first look at Cordova plugins, and then work with Ionic
    Native.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a platform-specific SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Cordova plugin API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Ionic Native
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a few Ionic Native plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a platform-specific SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start interacting with the device-specific features, we need to have
    the SDK for that device's operating system set up on our local machine. Officially,
    Ionic supports iOS, Android, and Windows phone platforms. Nevertheless, Ionic
    can be used on any device, which can run HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are links on how to set up a mobile SDK on our local machine.
    Unfortunately, we cannot proceed further in this chapter (and book) without setting
    that up. Let''s look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android**: [https://cordova.apache.org/docs/en/latest/guide/platforms/android/](https://cordova.apache.org/docs/en/latest/guide/platforms/android/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS**: [https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/](https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: [https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/](https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: For other supported OS, you can check out [https://cordova.apache.org/docs/en/6.x/guide/overview/](https://cordova.apache.org/docs/en/6.x/guide/overview/).'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will work with Android and iOS only. You can follow a similar
    approach for other mobile platforms as well. Before we proceed further, we need
    to make sure the setup is completed, and is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The Android setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure you have the SDK installed and Android tools are in your path:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From anywhere on your machine in a command prompt/terminal, run: `android`.
    This will launch the Android SDK manager. Make sure that you have the latest version
    of Android, or any specific version you are targeting installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will launch the Android Virtual Device manager. Make sure you have at
    least one AVD set up. If this isn''t yet the case, you can easily do so by clicking
    on the Create button. You can fill the options as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The iOS setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure you have Xcode and the required tools installed, and also have `ios-sim`
    and `ios-deploy` installed globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: iOS setup can be done only on an Apple machine. Windows developers cannot deploy
    iOS apps from Windows machines, as Xcode is required to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how we can test the setup for Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the setup, we will scaffold a new Ionic app, and emulate that using
    the Android and iOS emulators. We will first scaffold a tabs app. Create a folder
    named `chapter6` and open a new command prompt/terminal. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To emulate the app on an Android emulator, first we need to add Android platform
    support for this project and then emulate it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Android platform, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After some time, you will see the emulator launch, and the app will be deployed
    and executed inside the emulator. If you have already worked with native Android
    apps, you know how slow the Android emulator is. If you have not, it is quite
    slow. An alternative to the Android emulator is Genymotion ([https://www.genymotion.com](https://www.genymotion.com)).
    Ionic is nicely integrated with Genymotion as well.
  prefs: []
  type: TYPE_NORMAL
- en: Genymotion has two flavors, one free and the other for commercial use. The free
    version has minimal features and is supposed to be for personal use only.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download a copy of Genymotion from: [https://www.genymotion.com/#!/store](https://www.genymotion.com/#!/store).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Genymotion, create a new virtual device with your preferred
    Android SDK. My config looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we launch the emulator and let it run in the background. Now that we
    have Genymotion running, we need to tell Ionic to emulate the app using Genymotion
    and not the Android emulator. For that we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of this: `ionic emulate android`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will deploy the app to the Genymotion emulator and you can see the app
    immediately, unlike with the Android emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure Genymotion is running in the background before you run the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If Genymotion seems a bit large for your pocket, you can simply connect your
    Android mobile phone to your machine and run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will deploy the app to the actual device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up Android USB debugging, please refer to: [https://developer.android.com/studio/run/device.html](https://developer.android.com/studio/run/device.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The earlier screenshots of Genymotion are taken from a personal edition, as
    I do not have a license for it. I generally use the iOS emulator in tandem with
    my Android mobile phone during the development phase. Once the entire development
    is completed, I purchase device time from device farms, and test on the targeted
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are facing an issue while connecting your Android mobile phone to your
    computer, please check if you are able to run `adb device` in the command prompt/terminal and
    are able to see your device listed here. You can find more information on **Android
    Debug Bridge** (**ADB**) at: [https://developer.android.com/studio/command-line/adb.html](https://developer.android.com/studio/command-line/adb.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test for iOS, we will first add iOS platform support as we did for Android,
    and then emulate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run this: `ionic emulate ios`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the default emulator launch and, finally, the app will appear
    in the emulator as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To deploy onto an Apple device, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you are able to emulate/run the app before moving further.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Cordova plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the Cordova documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '"A plugin is a package of injected code that allows the Cordova WebView within
    which the app renders to communicate with the native platform on which it runs.
    Plugins provide access to device and platform functionality that is ordinarily
    unavailable to web-based apps. All the main Cordova API features are implemented
    as plugins, and many others are available that enable features such as bar code
    scanners, NFC communication, or to tailor calendar interfaces..."'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, Cordova plugins are windows to the device-specific features.
    The Cordova team has already built the needed plugins to work with almost all
    device-specific features. There are community-contributed plugins as well that
    can provide customization wrappers around device-specific features.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can search for existing plugins here: [https://cordova.apache.org/plugins/](https://cordova.apache.org/plugins/).'
  prefs: []
  type: TYPE_NORMAL
- en: During the course of this chapter, we will be exploring a few plugins. Since
    we are focusing on Ionic-specific development, we will add plugins using the Ionic
    CLI. Under the hood, Ionic CLI calls the Cordova CLI to execute the necessary
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic plugin API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are four main commands that we will be using while dealing with plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Add a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This CLI command is used to add a new plugin to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remove a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This CLI command is used to remove a plugin from the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: List added plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This CLI command is used to list all the plugins in the project, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Search plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This CLI command is used to search plugins from the command line, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Ionic Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the lay of the land on how to work with Cordova plugins, we
    will scaffold a new project and work with integrating Cordova plugins with our
    Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic provides us a simple wrapper to work with Cordova plugins in a TypeScript
    fashion. Until all the plugins adopt the ES6/TS approach, we will need a way to
    work with these plugins inside our Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: Enter Ionic Native. Ionic Native is an ES6/TypeScript implementation of today's
    ES5 Cordova plugins, so you can import the plugins you need and use them in TypeScript.
    The Ionic team has done a great job in making the plugins available to us in the
    form of TypeScript bindings.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic Native test drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test, we will scaffold a new project and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And `cd` into the `example15` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s search for the battery status plugin and add it to our project. Run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will launch the default browser and will navigate you to: [http://cordova.apache.org/plugins/?q=battery%20status](http://cordova.apache.org/plugins/?q=battery%20status).
    Depending on what plugin name you find, you can add that plugin to the project.
    So, in our case, to add the battery status plugin to the project, we would run
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add the battery status plugin ([https://github.com/apache/cordova-plugin-battery-status](https://github.com/apache/cordova-plugin-battery-status))
    to our current project. The same can be found from the Ionic Native''s documentation
    here: [https://ionicframework.com/docs/native/battery-status/](https://ionicframework.com/docs/native/battery-status/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all the plugins that were installed, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you should see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Apart from adding the Cordova plugin, we need to add the required Ionic Native
    module for battery status. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the module, we need to mark it as a provider in `example15/src/app/app.module.ts`.
    Open `example15/src/app/app.module.ts` and update it as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can start consuming the battery status plugin. Open `example15/src/pages/home/home.ts`
    and update it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is how Ionic Native exposes `BatteryStatus`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, update the `ion-content` section of `example15/src/pages/home/home.html`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You will not see any output on the page and, if you open the development tools,
    you will see a warning in the console that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This means that we cannot run the plugins directly in the browser; they need
    an environment to execute such as Android, iOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the app (and plugin), we will add either an Android platform or an
    iOS platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then execute any one of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ionic emulate android`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ionic emulate ios`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ionic run android`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ionic run ios`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running any one of the preceding command would display the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to add Cordova plugins to your Ionic app and test them. In
    the next section, we will be working with a few more plugins. The preceding screenshots
    from Genymotion are from my personal use license. These images are for illustration
    purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: The Cordova whitelist plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go ahead and start working with Ionic Native, we are going to spend
    a moment on one of the key Cordova plugins -- the whitelist plugin: [https://github.com/apache/cordova-plugin-whitelist](https://github.com/apache/cordova-plugin-whitelist).'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Cordova documentation on the whitelist plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Domain whitelisting is a security model that controls access to external domains
    over which your application has no control. Cordova provides a configurable security
    policy to define which external sites may be accessed."'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we want to have more control over how our app should behave when dealing
    with content from other sources, we should be working with the whitelist plugin.
    As you may have noticed, this plugin is already added to our Ionic app. If this
    plugin is not added to the Ionic/Cordova app, you can do so easily by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Once the plugin is added, you can update the `config.xml` file with the navigation
    whitelist -- the links that your app is allowed to open inside WebView to allow
    links to `example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want your WebView to link to any website, you need to add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add an Intent whitelist, where you can specify the list of links
    that are allowed to be browsed on the device. For instance, open the SMS app from
    our custom app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Or simple web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also enforce a **Content Security Policy** (**CSP**) ([http://content-securitypolicy.com/](http://content-securitypolicy.com/))
    on your app as well using this plugin. All you need to do is add a `meta` tag
    to the `www/index.html` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This was a quick tour of the Whitelist plugin. This plugin is applicable to:'
  prefs: []
  type: TYPE_NORMAL
- en: Android 4.0.0 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 4.0.0 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do remember to add this plugin and configure it; otherwise, external links will
    not work.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Cordova plugins using Ionic Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the earlier example, we have already seen how we can integrate a device feature
    such as battery status with our Ionic app. Now, we are going to explore a few
    more such plugins and see how we can implement them.
  prefs: []
  type: TYPE_NORMAL
- en: Device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first plugin we are going to look at in this section is the device plugin.
    This plugin describes the device's hardware and software specifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can know more about this plugin here: [https://github.com/apache/cordova-plugin-device](https://github.com/apache/cordova-plugin-device)
    or [https://ionicframework.com/docs/native/device/](https://ionicframework.com/docs/native/device/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us scaffold a new blank app and then add the device plugin to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is scaffolded, `cd` into the `example16` folder. Now we will add
    the device plugin, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add the device plugin. Once that is done, we will add the Ionic native
    device module. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the module is added, we need to mark it as a provider in `example16/src/app/app.module.ts`.
    Update `example16/src/app/app.module.ts` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add either the iOS or the Android platform by running `ionic platform
    add ios` or `ionic platform add android`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add the code relevant to the device plugin. Open `example16/src/pages/home/home.ts`
    and update the class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update `example16/src/pages/home/home.html` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and, finally, run `ionic emulate ios` or `ionic emulate
    android`. We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.gif)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, the device is a Nexus 6P.
  prefs: []
  type: TYPE_NORMAL
- en: Toast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next plugin we are going to work with is the Toast plugin. This plugin shows
    text popups that do not block the user's interaction with the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about this plugin here: [https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin)
    or [https://ionicframework.com/docs/native/toast/](https://ionicframework.com/docs/native/toast/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will scaffold a new blank app using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is scaffolded, `cd` into the `example17` folder. Now we will add
    the Toast plugin, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will add the Ionic Native Toast module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add Toast as a provider in `example17/src/app/app.module.ts`.
    Update `example17/src/app/app.module.ts` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the code relevant to the Toast plugin. Open `example17/src/pages/home/home.ts`
    and update as the file shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To know more about the Toast plugin API methods, refer to: [http://ionicframework.com/docs/native/toast/](http://ionicframework.com/docs/native/toast/).'
  prefs: []
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next plugin we are going to work with is the dialogs plugin. This triggers
    the alert, confirm, and prompt windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the plugin from here: [https://github.com/apache/cordova-plugin-dialogs](https://github.com/apache/cordova-plugin-dialogs)
    and [https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, scaffold a new blank app for the dialogs plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is scaffolded, `cd` into the `example18` folder. Now we will add
    the dialogs plugin, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will add the Ionic Native module for dialogs. Run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add Dialogs as a provider. Update `example18/src/app/app.module.ts` as
    mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the code relevant to the Dialog plugin. Open `example18/src/pages/home/home.ts`
    and update as the file with the code mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update `example18/src/pages/home/home.html` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and, finally, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To learn more about the dialogs plugin API methods, refer to: [https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Local notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next plugin we are going to work with is the local notification plugin.
    This plugin is primarily used to notify or remind users about an activity related
    to an app. Sometimes, notifications are also shown when a background activity
    is going on such as, a large file upload.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the plugin from here: [https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications)
    and [https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, scaffold a new blank app for the local notification plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is scaffolded, `cd` into the `example19` folder. Now, we will
    add the local notification plugin, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the Ionic Native module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'And update the providers in `example19/src/app/app.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the code relevant to the local notifications plugin. Open
    `example19/src/pages/home/home.ts` and update as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update `example19/src/pages/home/home.html` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when we look at that notification bar, we should see the local notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To learn more about the dialogs plugin API methods, refer to: [https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/).'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final plugin we are going to take a look at is the Geolocation plugin, which
    helps to fetch the coordinates of the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can know more about the plugin from here: [https://github.com/apache/cordova-plugin-geolocation](https://github.com/apache/cordova-plugin-geolocation)
    and [https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, scaffold a new blank app for the Geolocation plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is scaffolded, `cd` into the `example20` folder. Now we will add
    the Geolocation plugin, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the following command to add the Ionic Native module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we register the provider. Update `example20/src/app/app.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the code relevant to the Geolocation plugin. Open `example20/src/pages/home/home.ts`
    and update with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update `example20/src/pages/home/home.html` as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and finally run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the permission is provided, we should see the values as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'My Google Nexus 6P runs Android Nougat, which has a new feature called runtime
    permissions. This allows a user to give permission at runtime rather than while
    installing the app. You can learn more about that feature here: [https://developer.android.com/training/permissions/requesting.html](https://developer.android.com/training/permissions/requesting.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the Geolocation plugin API methods, refer to: [https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/).'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding examples should have provided a good insight into how you can
    use Ionic Native.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen what Cordova plugins are, and how they can be
    used in an existing Ionic app. We started off by setting up a local development
    environment for Android and iOS, and then we learned how to emulate and run an
    Ionic app. Next, we explored how to add Cordova plugins to an Ionic project and
    use them. Finally, with the aid of Ionic Native, we injected plugins in our Ionic
    app and worked with them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to use the knowledge we have gained so far
    in building an app named Riderr. Using the public API exposed by Uber, we will
    be building an app using which a rider can book an Uber ride.
  prefs: []
  type: TYPE_NORMAL
