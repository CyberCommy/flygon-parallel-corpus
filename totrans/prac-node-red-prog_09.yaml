- en: '*Chapter 7*: Calling a Web API from Node-RED'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, let's call a web API from Node-RED. Basically, in Node-RED,
    processing is performed as per the created flow, but it is JSON data that connects
    processing. In that sense, it is very compatible with web APIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the following four topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the RESTful API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about the input/output parameters of a node
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to call the web API on a node
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the IBM Watson API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to call any type of web
    API from Node-RED.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress through this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED (v1.1.0 or above)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter07` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the RESTful API
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of you reading this book may already be familiar with web APIs. However,
    let's review the RESTful API in order to call a web API with Node-RED.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**REST** stands for **Representational State Transfer**. RESTful API basically
    refers to the invocation interface in HTTP of a web system that is implemented
    according to "REST principles." So, in a broad sense, it''s safe to say that the
    REST API and RESTful API are the same things. So, what exactly is the RESTful
    API? We will learn the outline and principles of the RESTful API, and the advantages
    and disadvantages of using the RESTful API, in this section.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'REST was proposed by Roy Fielding, one of the HTTP protocol creators, around
    the year 2000, and is a set (or way of thinking) of design principles suitable
    for linking multiple software when building a distributed application. In addition,
    the RESTful API is an API designed according to the following four REST principles:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**Addressability**: It has the property of being able to directly point to
    a resource through a URI. All information should be represented by a unique URI
    so that you can see at a glance the API version, whether to acquire data, update,
    and so on.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Statelessness**: All HTTP requests must be completely separated. State management
    such as sessions should not be performed.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connectivity**: This refers to the ability to include a "link to other information"
    in one piece of information. By including a link, you can "connect to other information."'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unified interface**: Use HTTP methods for all operations such as information
    acquisition, creation, update, and deletion. The HTTP methods, in this case, are
    acquisition ("GET"), creation ("POST"), update ("PUT"), and deletion ("DELETE").'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the four principles. As you can see from these four principles, a
    major feature of REST is that it makes more effective use of HTTP technology and
    has a high affinity with web technology. Therefore, it is currently used for developing
    various web services and web applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: With the recent widespread use of smartphones, it is becoming more obvious that
    business systems can be used not only on PCs but also on mobiles. In addition,
    not just one system but a system that can be linked with multiple systems and
    various web services will not be selected by users. RESTful APIs are receiving
    a great deal of attention as an indispensable tool for solving these problems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'As the following figure shows, a web API can be called from anywhere via the
    internet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – RESTful API diagram'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.1_B16353.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – RESTful API diagram
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's recall what Node-RED is. Its workflow tool-like style is like a standalone
    tool, but Node-RED is certainly one of web applications too. In other words, it's
    an application that works very well with the RESTful API described here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's cover again what kinds of parameters Node-RED nodes have.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the input/output parameters of a node
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of the many nodes that Node-RED has, not many are suitable for calling web APIs
    (REST APIs). A typical node used when calling the web API is the `http request`
    node.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To call an external API on Node-RED, simply set the endpoint URL of the API
    to the URL property of the `http request` node.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: For example, when it is necessary to set a parameter in the endpoint URL when
    calling an API, it is possible to set the output value of the previous node connected.
    The method is very easy. Instead of a literal string, you can just set the `{{payload}}`
    variable in the value setting part of the parameter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In `{{payload}}`, the character string inherited from the previous processing
    node is entered.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following example (note that this URL does not exist): `http://api-test.packt.com/foo?username={{payload}}&format=json`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Setting the API endpoint URL with {{payload}} as a parameter'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.2_B16353.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Setting the API endpoint URL with {{payload}} as a parameter
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The process of the `http request` node cannot be executed by the `http request`
    node alone. Before the `http request` node, it is necessary to connect the trigger
    process, such as the `inject` node. At that time, if there is a parameter you
    want to pass to the API call, that is, the `http request` node, please set it
    in `msg.payload`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: If the API you want to call in the `http request` node is `POST`, the JSON data
    to be included in the request will be satisfied as a request parameter by creating
    it in the preprocessing node, storing it in `msg.payload` as it is, and connecting
    it to the `http request` node.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: By using the `http request` node like this, API cooperation can be easily realized.
    API calls are important for linking multiple services on Node-RED. For example,
    the **function** node of Node-RED is basically processed by JavaScript, but by
    making a program developed in other development languages, such as Java, into
    an API, it can be used by calling from Node-RED.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: How to call the web API on a node
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've learned what a RESTful API is and which node is appropriate for
    an API call.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: In this part, let's create a flow that actually calls the API from Node-RED
    and learn how to call the API and how to handle the result value from the API.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things to think about first, such as which API to call. Fortunately,
    various APIs are published on the internet.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, I would like to use the OpenWeatherMap API. In OpenWeatherMap, for
    example, the following APIs for data acquisition are prepared:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Current weather data
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hourly forecast 4 days
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily forecast 16 days
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Climatic forecast 30 days
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weather alerts
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And more...
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information, please see the official website of OpenWeatherMap: [https://openweathermap.org/](https://openweathermap.org/).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's prepare to use the OpenWeatherMap API.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the OpenWeatherMap API, we need to create an account. Please access
    the following URL: [https://openweathermap.org/](https://openweathermap.org/).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: If you already have an account, please log in without taking the following steps.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'For those who are using it for the first time, please click the **Sign In**
    button, and then click the **Create an Account** link. It is easy to register.
    Just follow the guidance and confirm the email sent to you by OpenWeatherMap after
    registration. This is what the creating an account page looks like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Creating an OpenWeatherMap account'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.3_B16353.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Creating an OpenWeatherMap account
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's create an API key.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API key
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you log in to OpenWeatherMap, you can see the **API keys** tab, so please
    click it. You already have a default API key but please create a specific API
    key for this tutorial. Enter any key string and click the **Generate** button.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that the API keys shown in this book are created by me as a sample
    and cannot be used. Be sure to create a new API key in your account:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Generating API key'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.4_B16353.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Generating API key
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: After creating the API key, the key will not be activated for 10 minutes to
    a couple of hours. If a web response error such as 401 is returned even when you
    access the API endpoint URL described in the next section, the specified API key
    may not have been activated, so please wait and try again.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Checking the API endpoint URL
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check your API endpoint URL, follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Click the **API** button on the menu bar. You can see some APIs there.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this tutorial, we will use **Current Weather Data**, so please click the
    **API doc** button under **Current Weather Data**:![Figure 7.5 – Opening API doc
    of Current Weather Data
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.5_B16353.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Opening API doc of Current Weather Data
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: This API has some types of parameters such as **By city**, **By city ID**, **By
    zip code**, and so on. Please select **By city name** with the parameter city
    name and API key.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**API doc**, **city name**, **state code**, and **country code** are from ISO
    3166\. The URLs under the **API call** area are endpoint URLs for using this API.
    Please copy this URL to the clipboard:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – API endpoint URL with parameters'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.6_B16353.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – API endpoint URL with parameters
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see whether we can run this API or not.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Checking that the API can run
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try to use this API. You just have to open your browser, paste the URL,
    and replace the city name and API key with yours. You can choose any city name,
    but the API key is the specific one you created in the previous section:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.7_B16353.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Calling the API and getting the result
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: I have now confirmed that this API works correctly. Now let's call this API
    from Node-RED and use it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Creating the flow calling the API
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s create a flow that calls the OpenWeatherMap API on Node-RED. Start
    Node-RED in your environment. You can use either standalone Node-RED or Node-RED
    on IBM Cloud:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The flow to use the API'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.8_B16353.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – The flow to use the API
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, the flow is very simple and easy to make. Please follow these steps
    to make the flow:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Place one **inject** node and two **debug** nodes on the palette. These nodes
    can be used as default. No change in the settings is required here.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the **http request** node on the palette, then open the settings panel
    of the **http request** node and set the API endpoint URL with your parameters
    (city name and API key) in the **URL** textbox of the settings panel, as shown
    in the following figure:![Figure 7.9 – Setting the API endpoint URL with your
    parameters
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.9_B16353.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Setting the API endpoint URL with your parameters
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Place a **json** node on the palette. This node can be used with the defaults.
    No changes in the settings are required here. But, just in case, let's make sure
    that the **Action** property of the **json** node is set to **Convert between
    JSON String & Object**. This is an option that will convert the JSON data passed
    as the input parameter into a JavaScript object:![Figure 7.10 – Checking the Action
    property
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B16353.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Checking the Action property
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Wire all nodes as shown in the following figure:![Figure 7.11 – Wiring all nodes
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B16353.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – Wiring all nodes
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Please wire the **timestamp** node and the **http request** node. The **http
    request** node output is wired to the **json** node and the **debug** node. Lastly,
    please wire the **json** node output to another **debug** node.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'After changing the settings and wiring all the nodes, you need to deploy and
    click the switch of the **inject** node. You can now see the data on the **debug**
    window in the right-side panel:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Result data (JSON) on the debug window'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B16353.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Result data (JSON) on the debug window
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the result data as a JSON object on the same **debug** window
    as in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在与以下屏幕截图相同的**调试**窗口上查看结果数据的JSON对象：
- en: '![Figure 7.13 – Result data (object) on the debug window'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13 – 调试窗口上的结果数据（对象）'
- en: '](img/Figure_7.13_B16353.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.13_B16353.jpg)'
- en: Figure 7.13 – Result data (object) on the debug window
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 – 调试窗口上的结果数据（对象）
- en: 'Congratulations! You have succeeded in making a sample flow by calling the
    OpenWeatherMap API. If you didn''t succeed in making this flow completely, you
    can also download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/open-weather-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/open-weather-flows.json).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功通过调用OpenWeatherMap API创建了一个示例流程。如果您没有完全成功创建此流程，您也可以在此处下载此流程定义文件：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/open-weather-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/open-weather-flows.json)。
- en: In the next section, we will learn about the convenience of using the IBM Watson
    API with Node-RED on IBM Cloud.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习在IBM Cloud上使用Node-RED的便利性以及IBM Watson API。
- en: How to use the IBM Watson API
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用IBM Watson API
- en: In the previous section, you learned how to call the API and handle the resulting
    values from the API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您学习了如何调用API并处理API的结果值。
- en: In this section too, we will create a flow that actually calls the API from
    Node-RED, but we will learn how to call the Watson API provided by IBM. We will
    also create a flow that actually calls the API from Node-RED, but we will learn
    how to call the Watson API provided by IBM.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个实际从Node-RED调用API的流程，但我们将学习如何调用IBM提供的Watson API。我们还将创建一个实际从Node-RED调用API的流程，但我们将学习如何调用IBM提供的Watson
    API。
- en: Why Watson? Watson is a brand of artificial intelligence services and APIs provided
    by IBM.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用Watson？Watson是IBM提供的人工智能服务和API的品牌。
- en: All Watson APIs can be used from IBM Cloud. So, by running Node-RED on IBM Cloud,
    you can effectively use Watson's services. This has advantages such as when calling
    the Watson API from Node-RED, implementation of authentication can be omitted.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Watson API都可以从IBM Cloud上使用。因此，通过在IBM Cloud上运行Node-RED，您可以有效地使用Watson的服务。这样做的好处是，当从Node-RED调用Watson
    API时，可以省略身份验证的实现。
- en: 'Watson can be called from environments other than IBM Cloud, so it can be called
    directly from a Raspberry Pi or can be used from either cloud platforms such as
    AWS and Azure or on-premises environments. See the following figure, showing what
    a Watson API looks like:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Watson可以从IBM Cloud以外的环境调用，因此可以直接从树莓派调用，也可以从AWS和Azure等云平台或本地环境中使用。请参见下图，显示Watson
    API的外观：
- en: '![Figure 7.14 – Watson API diagram'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.14 – Watson API图表'
- en: '](img/Figure_7.14_B16353.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.14_B16353.jpg)'
- en: Figure 7.14 – Watson API diagram
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 – Watson API图表
- en: 'For more information, see the IBM Watson official website: [https://www.ibm.com/watson](https://www.ibm.com/watson).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅IBM Watson官方网站：[https://www.ibm.com/watson](https://www.ibm.com/watson)。
- en: Okay, let's see how easy it is to use the Watson API on Node-RED on IBM Cloud.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看在IBM Cloud上使用Node-RED上的Watson API有多容易。
- en: Logging in to IBM Cloud
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录IBM Cloud
- en: If you've followed the steps from the first chapter, you should already have
    an IBM Cloud account. Just log in to IBM Cloud ([https://cloud.ibm.com](https://cloud.ibm.com)).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经按照第一章的步骤进行操作，您应该已经有了IBM Cloud帐户。只需登录IBM Cloud ([https://cloud.ibm.com](https://cloud.ibm.com))。
- en: 'If you do not have an IBM Cloud account, create one from the following URL
    and log in to IBM Cloud. See [*Chapter 6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073),
    *Implementing Node-RED in the Cloud*, for detailed instructions: [http://ibm.biz/packt-nodered](http://ibm.biz/packt-nodered).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有IBM Cloud帐户，请从以下网址创建一个并登录IBM Cloud。有关详细说明，请参阅[*第6章*](B16353_06_ePub_AM.xhtml#_idTextAnchor073)，*在云中实现Node-RED*：[http://ibm.biz/packt-nodered](http://ibm.biz/packt-nodered)。
- en: Starting Node-RED on IBM Cloud
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在IBM Cloud上启动Node-RED
- en: In the previous section, we created a sample flow using standalone Node-RED
    or Node-RED on IBM Cloud. Of course, you can use the standalone version of Node-RED
    to call the Watson API, but some benefits will be lost. So, we will work with
    Node-RED on IBM Cloud in this part.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用独立的Node-RED或IBM Cloud上的Node-RED创建了一个示例流程。当然，您可以使用独立版本的Node-RED来调用Watson
    API，但会丢失一些好处。因此，在本部分中，我们将使用IBM Cloud上的Node-RED。
- en: As in the previous step, if you have not used Node-RED on IBM Cloud yet, please
    return to [*Chapter 6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073), *Implementing
    Node-RED in the Cloud*, and run through it to activate Node-RED on IBM Cloud before
    moving on to the next step.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一步一样，如果您还没有在IBM Cloud上使用Node-RED，请返回到[*第6章*](B16353_06_ePub_AM.xhtml#_idTextAnchor073)，*在云中实现Node-RED*，并按照其中的步骤激活IBM
    Cloud上的Node-RED，然后再进行下一步。
- en: Creating the Watson API
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Watson API
- en: Next, create Watson's service on IBM Cloud. Strictly speaking, this means creating
    an instance as a service so that you can call the Watson API service provided
    on IBM Cloud as your own API.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在IBM Cloud上创建Watson的服务。严格来说，这意味着创建一个作为服务的实例，以便您可以调用IBM Cloud上提供的Watson API服务作为您自己的API。
- en: Watson has several APIs, such as voice recognition, image recognition, natural
    language analysis, sentiment analysis, and so on. This time, I would like to use
    the sentiment analysis API.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Watson有几个API，例如语音识别、图像识别、自然语言分析、情感分析等。这次，我想使用情感分析API。
- en: 'Follow these steps to create a Watson Tone Analyzer API service:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建Watson Tone Analyzer API服务：
- en: Search for Watson from the catalog. On the dashboard, please click the `tone
    analyzer`, and then select the **Tone Analyzer** panel:![Figure 7.15 – Searching
    Watson services
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从目录中搜索Watson。在仪表板上，请单击`tone analyzer`，然后选择**Tone Analyzer**面板：![图7.15 – 搜索Watson服务
- en: '](img/Figure_7.15_B16353.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.15_B16353.jpg)'
- en: Figure 7.15 – Searching Watson services
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15 – 搜索Watson服务
- en: 'Please refer to the following list and *Figure 7.16* to fill in each property:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考以下列表和*图7.16*填写每个属性：
- en: a. `Default` (you can modify this to any name you want to use)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: a. `默认`（您可以将其修改为任何您想要使用的名称）
- en: 'd. **Resource group**: **Default** (you can''t select anything else for a Lite
    account)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: d. **资源组**：**默认**（对于Lite账户，您无法选择其他内容）
- en: 'e. **Tags**: N/A'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: e. **标签**：N/A
- en: After entering/selecting all the properties, click the **Create** button:![
    Figure 7.16 – Creating a Tone Analyzer service
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入/选择所有属性后，点击**创建**按钮：![图7.16 – 创建Tone Analyzer服务
- en: '](img/Figure_7.16_B16353.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.16_B16353.jpg)'
- en: Figure 7.16 – Creating a Tone Analyzer service
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16 – 创建Tone Analyzer服务
- en: You can see the status as **Active** on the **Tone Analyzer** instance dashboard
    when it is created and activated. Please check the API key and URL. API keys and
    URLs are used when the API is called from any application. However, these are
    not used in this tutorial because Node-RED on IBM Cloud can call the Watson API
    without authentication coding.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当创建并激活时，您可以在**Tone Analyzer**实例仪表板上看到状态为**活动**。请检查API密钥和URL。API密钥和URL在从任何应用程序调用API时使用。但是，在本教程中不使用这些，因为IBM
    Cloud上的Node-RED可以在不需要认证编码的情况下调用Watson API。
- en: 'You can check the API key and URL from the **Manage** menu on this screen:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从此屏幕上的**管理**菜单中检查API密钥和URL：
- en: '![ Figure 7.17 – Checking your credentials'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.17 – 检查您的凭证'
- en: '](img/Figure_7.17_B16353.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.17_B16353.jpg)'
- en: Figure 7.17 – Checking your credentials
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17 – 检查您的凭证
- en: In the next section, we will connect Node-RED and the Tone Analyzer service.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将连接Node-RED和Tone Analyzer服务。
- en: Connecting Node-RED and the Tone Analyzer service
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接Node-RED和Tone Analyzer服务
- en: 'As you already know, Node-RED can call the Watson API without coding for authentication.
    We need to connect Node-RED and the Watson API instance before using Node-RED
    with the Watson API. In the last step, we created the **Tone Analyzer** API instance,
    so let''s connect these two instances as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经知道的，Node-RED可以在不需要认证编码的情况下调用Watson API。在使用Node-RED与Watson API之前，我们需要连接Node-RED和Watson
    API实例。在上一步中，我们创建了**Tone Analyzer** API实例，所以让我们按照以下步骤连接这两个实例：
- en: Click the **IBM Cloud** logo button at the top left to move to the main dashboard.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左上角的**IBM Cloud**标志按钮，转到主仪表板。
- en: Click the **View all** button on the **Resource summary** panel.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**资源摘要**面板上的**查看全部**按钮。
- en: Click the Node-RED instance (application) name in the **Cloud Foundry apps**
    area:![ Figure 7.18 – Selecting the Node-RED service you created
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Cloud Foundry应用**区域点击Node-RED实例（应用）名称：![图7.18 – 选择您创建的Node-RED服务
- en: '](img/Figure_7.18_B16353.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.18_B16353.jpg)'
- en: Figure 7.18 – Selecting the Node-RED service you created
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18 – 选择您创建的Node-RED服务
- en: Click the **Connections** menu and then the **Create connection** button:![Figure
    7.19 – Creating a connection for Node-RED and Watson
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接**菜单，然后点击**创建连接**按钮：![图7.19 – 为Node-RED和Watson创建连接
- en: '](img/Figure_7.19_B16353.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.19_B16353.jpg)'
- en: Figure 7.19 – Creating a connection for Node-RED and Watson
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19 – 为Node-RED和Watson创建连接
- en: Check the **Tone Analyzer** service and click the **Next** button:![Figure 7.20
    – Clicking the Next button to select the connecting service
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**Tone Analyzer**服务并点击**下一步**按钮：![图7.20 – 点击下一步按钮选择连接服务
- en: '](img/Figure_7.20_B16353.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.20_B16353.jpg)'
- en: Figure 7.20 – Clicking the Next button to select the connecting service
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20 – 点击下一步按钮选择连接服务
- en: No modification is needed for the access role and service ID. Click the **Connect**
    button:![ Figure 7.21 – Clicking the Connect button to complete the connection
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于访问角色和服务ID，无需进行修改。点击**连接**按钮：![图7.21 – 点击连接按钮完成连接
- en: '](img/Figure_7.21_B16353.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.21_B16353.jpg)'
- en: Figure 7.21 – Clicking the Connect button to complete the connection
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21 – 点击连接按钮完成连接
- en: We need to restage Node-RED to activate the connection. Click the **Restage**
    button:![Figure 7.22 – Clicking the Restage button to start restaging the Node-RED
    service
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要重新启动Node-RED以激活连接。点击**重新启动**按钮：![图7.22 – 点击重新启动按钮开始重新启动Node-RED服务
- en: '](img/Figure_7.22_B16353.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.22_B16353.jpg)'
- en: Figure 7.22 – Clicking the Restage button to start restaging the Node-RED service
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22 – 点击重新启动按钮开始重新启动Node-RED服务
- en: 'Please wait until the restaging of your Node-RED instance is completed. Once
    completed, you will get a successful connection with the **Running** status. After
    that, please open the Node-RED flow editor via the **Visit App URL** link:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请等待直到您的Node-RED实例的重新设置完成。完成后，您将获得**运行**状态的成功连接。之后，请通过**访问应用URL**链接打开Node-RED流程编辑器：
- en: '![Figure 7.23 – Checking the status of the Node.js runtime for the Node-RED
    service'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.23 – 检查Node-RED服务的Node.js运行时状态'
- en: '](img/Figure_7.23_B16353.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.23_B16353.jpg)'
- en: Figure 7.23 – Checking the status of the Node.js runtime for the Node-RED service
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23 – 检查Node-RED服务的Node.js运行时状态
- en: You have succeeded in preparing the Node-RED and Watson API flow. Next, let's
    create the flow by calling the Tone Analyzer API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功准备好Node-RED和Watson API流程。接下来，让我们通过调用Tone Analyzer API来创建流程。
- en: Creating the flow by calling the Tone Analyzer API
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过调用Tone Analyzer API创建流程
- en: Now, let's create a flow that calls the Watson Tone Analyzer API on Node-RED.
    You already started Node-RED on IBM Cloud. Either standalone Node-RED or Node-RED
    on IBM Cloud can be used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个在Node-RED上调用Watson Tone Analyzer API的流程。您已经在IBM Cloud上启动了Node-RED。可以使用独立的Node-RED或IBM
    Cloud上的Node-RED。
- en: 'To proceed with this tutorial, you need to install the following two nodes:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本教程，您需要安装以下两个节点：
- en: '**node-red-node-twitter**: This is a node that acquires and posts tweets to
    Twitter:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**node-red-node-twitter**：这是一个获取和发布推文到Twitter的节点。'
- en: '![Figure 7.24 – Installing node-red-node-twitter'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.24 – 安装node-red-node-twitter'
- en: '](img/Figure_7.24_B16353.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.24_B16353.jpg)'
- en: Figure 7.24 – Installing node-red-node-twitter
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24 – 安装node-red-node-twitter
- en: '`msg.payload`. It is used when passing parameters to the Watson Tone Analyzer
    API:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msg.payload`。在向Watson Tone Analyzer API传递参数时使用：'
- en: '![Figure 7.25 – Installing node-red-node-sentiment'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.25 – 安装node-red-node-sentiment'
- en: '](img/Figure_7.25_B16353.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.25_B16353.jpg)'
- en: Figure 7.25 – Installing node-red-node-sentiment
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for these nodes in the palette and install them to your Node-RED flow
    editor. After that, make a flow as shown in the following figure:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – The flow to use the Tone Analyzer API'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.26_B16353.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.26 – The flow to use the Tone Analyzer API
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: In this flow, the function node processes the text, tone, and sentiment included
    in the result value obtained from Twitter so that they are output as separate
    debugs. This is to make the results easier to see.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'This flow is a little more complicated than the flow you created in the previous
    step. Please follow these steps to make the flow:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Make a Twitter ID (Twitter account) and create an application on your Twitter
    Developer account to authenticate for accessing tweets via your Twitter account.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access **Overview** under **Projects & Apps** on Twitter Developer, and then
    click the **Create an app** button:![Figure 7.27 – Creating an app on Twitter
    Developer
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.27_B16353.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.27 – Creating an app on Twitter Developer
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Set the **App name** with any strings, and click the **Complete** button.![Figure
    7.28 – Setting a name of your app
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.28_B16353.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.28 – Setting a name of your app
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: After that, please check the **Access token & access token secret** area.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the tokens. Please note and save your access token and access
    token secret. These will be used for the setting of the **twitter in** node too:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Note your token and token secret'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.29_B16353.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.29 – Note your token and token secret
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Place the **twitter in** node on your workspace, and double-click it to open
    the settings window:![Figure 7.30 – Placing the twitter in node
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.30_B16353.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.30 – Placing the twitter in node
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Click the edit (pencil icon) button on the settings window to edit your Twitter
    information:![Figure 7.31 – Editing the Twitter properties
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.31_B16353.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.31 – Editing the Twitter properties
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Set your Twitter ID, API key, and token.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The values for **API key**, **API key secret**, **Access token**, and **Access
    token secret** should be taken from your text editor from *step 8*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: After setting these settings, please click the **Add** button to return to the
    main settings window of the **twitter in** node:![Figure 7.32 – Configuring your
    Twitter information
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.32_B16353.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.32 – Configuring your Twitter information
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Select `#nodered` as the hashtag. You can set any name for **Name**.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the **Done** button to finish adding these settings and close
    the window:![Figure 7.33 – Finalizing the settings of the twitter in node
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.33_B16353.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.33 – Finalizing the settings of the twitter in node
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Place the **sentiment** node on your workspace. It will be wired after the **twitter
    in** node.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this node, no properties are needed to be set or changed:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.34 – Placing the sentiment node'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.34_B16353.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.34 – Placing the sentiment node
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Place the **tone analyzer v3** node after the **sentiment** node sequentially
    on your workspace:![Figure 7.35 – Placing the tone analyzer v3 node
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.35_B16353.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.35 – Placing the tone analyzer v3 node
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the settings panel of the **tone analyzer v3** node and set the **Method**
    and **URL** properties as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'a. **Name**: Any string you want to name'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'b. **Method**: **General Tone**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'c. **version_date**: **Multiple Tones**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'd. **Tones**: **All**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'e. **Sentences**: **True**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'f. **Content type**: **Text**:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.36 – Configuring the tone analyzer v3 node properties'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.36_B16353.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.36 – Configuring the tone analyzer v3 node properties
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Place the **function** node after the **tone analyzer v3** node sequentially
    on your workspace:![Figure 7.37 – Placing the function node
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.37_B16353.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.37 – Placing the function node
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the settings panel of the **function** node and code JavaScript with the
    following source code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**function**节点的设置面板，并使用以下源代码编写JavaScript：
- en: '[PRE0]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Please refer to the following screenshot for the coding for the **function**
    node:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 有关**function**节点的编码，请参考以下屏幕截图：
- en: '![Figure 7.38 – JavaScript source code for the function node'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.38 - 功能节点的JavaScript源代码'
- en: '](img/Figure_7.38_B16353.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.38_B16353.jpg)'
- en: Figure 7.38 – JavaScript source code for the function node
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.38 - 功能节点的JavaScript源代码
- en: 'You can get the code here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/format-payload.js](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/format-payload.js).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里获取代码：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/format-payload.js](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/format-payload.js)。
- en: 'Finally, put three `msg.payload.text`: For the `msg.payload.tone`: For the
    `msg.payload.sentiment`: For the **debug** tab'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，放置三个`msg.payload.text`：对于`msg.payload.tone`：对于`msg.payload.sentiment`：对于**调试**选项卡
- en: See *Figure 7.26* for the wiring instructions. We have finished making configurations
    for the nodes of the flow.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有关布线说明，请参阅*图7.26*。我们已经完成了流程节点的配置。
- en: Testing the flow
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试流程
- en: The flow is now complete. When you click the `twitter in` node connects to Twitter
    using your account, it will automatically retrieve the tweets that meet your criteria
    and process the subsequent flow.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 流程现在已经完成。当您点击`twitter in`节点连接到您的Twitter帐户时，它将自动检索符合您标准的推文并处理后续流程。
- en: This is done automatically, so you don't have to take any special action.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自动完成的，因此您无需采取任何特殊操作。
- en: Here, it is set to get all tweets that have `#nodered` as a hashtag. If you
    don't get many tweets, it means that a tweet that contains the specified hashtag
    has not been created, so please change the hashtag set in the `twitter in` node
    and try again.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，它被设置为获取所有具有`#nodered`作为标签的推文。如果您没有收到很多推文，这意味着没有创建包含指定标签的推文，请更改`twitter in`节点中设置的标签并重试。
- en: All the processing results of this flow will be displayed in the **debug** tab.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此流程的所有处理结果将显示在**调试**选项卡中。
- en: 'It is `msg.payload.text` that extracts the tweet body from the acquired tweets
    and displays it:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 从获取的推文中提取推文正文并显示的是`msg.payload.text`：
- en: '![Figure 7.39 – Result of getting the tweet body'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.39 - 获取推文正文的结果'
- en: '](img/Figure_7.39_B16353.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.39_B16353.jpg)'
- en: Figure 7.39 – Result of getting the tweet body
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.39 - 获取推文正文的结果
- en: 'It is `msg.payload.tone` that extracts and displays emotions detected in the
    acquired tweets:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 从获取的推文中提取和显示检测到的情绪的是`msg.payload.tone`：
- en: '![Figure 7.40 – Result of tone analysis from the tweet'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.40 - 从推文中的语调分析结果'
- en: '](img/Figure_7.40_B16353.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.40_B16353.jpg)'
- en: Figure 7.40 – Result of tone analysis from the tweet
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.40 - 从推文中的语调分析结果
- en: 'It is `msg.payload.sentiment` that judges whether the sentiment is positive
    or negative in the acquired tweets:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从获取的推文中判断情感是积极还是消极的是`msg.payload.sentiment`：
- en: '![Figure 7.41 – Result of the sentiment of a tweet'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.41 - 推文情感的结果'
- en: '](img/Figure_7.41_B16353.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.41_B16353.jpg)'
- en: Figure 7.41 – Result of the sentiment of a tweet
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.41 - 推文情感的结果
- en: 'Congratulations! You have succeeded in making a sample flow by calling the
    Watson API. If you didn''t succeed in making this flow completely, you can also
    download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/get-sentiment-twitter-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/get-sentiment-twitter-flows.json).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功调用Watson API创建了一个示例流。如果您没有完全成功创建此流程，您也可以在此处下载此流程定义文件：[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/get-sentiment-twitter-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter07/get-sentiment-twitter-flows.json)。
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create a sample flow (application) that calls
    two types of web APIs. We are gradually getting used to creating complicated flows.
    Use cases for calling web APIs are frequently found in Node-RED. The flow creation
    methods we learned about here will help us to create more complex flows in the
    future.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建调用两种类型的Web API的示例流（应用程序）。我们逐渐习惯于创建复杂的流程。在Node-RED中经常发现调用Web API的用例。我们在这里学到的流程创建方法将帮助我们将来创建更复杂的流程。
- en: In the next chapter, let's learn about a project feature that can be integrated
    with repositories such as GitHub, which is a function added from Node-RED version
    1.0.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们了解一个可以与GitHub等存储库集成的项目功能，这是从Node-RED版本1.0添加的功能。
