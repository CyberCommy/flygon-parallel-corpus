- en: Setting Up a Pentesting Lab on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter aims to help penetration testers who don't have direct access to
    targets for penetration testing set up a vulnerable lab environment within AWS.
    This lab will allow testers to practice various exploitation techniques using
    Metasploit and rudimentary scanning and vulnerability assessment using multiple
    tools within Kali. This chapter focuses on setting up a vulnerable Linux VM and
    a generic Windows VM on AWS, putting them on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a personal pentesting lab for hacking on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and securing the virtual lab to prevent unintended access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to use the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Damn Vulnerable Web Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Very Secure File Transfer Protocol Daemon** (**vsftpd**) version 2.3.4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a vulnerable Ubuntu instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the first of the two vulnerable machines that we will be creating, the vulnerable
    instance of Ubuntu will contain a single vulnerable FTP service, as well as some
    other services.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning an Ubuntu EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first step in setting up our vulnerable lab in the cloud will be to
    provision an instance that will be running a vulnerable operating system. For
    this purpose, we can use an Ubuntu LTS version. This can be accessed from the
    AWS Marketplace for quick deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use Ubuntu 16.04 for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fc1fba3-0bfd-4d8f-b9ca-cf0a3c67344a.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we click on the Continue to Subscribe button, we are prompted to configure
    the instance that we are going to launch. Since this is a pretty standard image,
    we will proceed with the default settings except for Region and VPC settings.
  prefs: []
  type: TYPE_NORMAL
- en: For Region, you can use the AWS Region that is closest to yourself. However,
    keep in mind that all the other instances you create on AWS need to be hosted
    in the same region or they cannot be a part of the same network.
  prefs: []
  type: TYPE_NORMAL
- en: 'For VPC, make sure you note down the VPC and the subnet IDs that you are using
    to set up this instance. We will need to reuse them for all the other hosts in
    the lab. In this case, I will be using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8af80f17-d919-4eda-88bb-47208f2797e0.png)'
  prefs: []
  type: TYPE_IMG
- en: It should be noted that the VPC IDs and the subnet IDs will be unique for everyone.
    Once done, we can proceed to deploy the EC2 instance by clicking on the Launch
    with the 1-Click button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, the next step is to SSH into the newly created VM using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These commands will update the repository listing and all the packages installed
    on the instance, so we don't have to deal with any old packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a vulnerable service on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this Ubuntu host, we will be installing a vulnerable version of an FTP server,
    `vsftpd`. Version 2.3.4 of this FTP software was found to be backdoored. In this
    chapter, we will be installing this backdoored version and then will attempt to
    identify it using a pentesting box we will set up in the next chapter, and finally
    we will exploit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things easier, the backdoored version of `vsftpd 2.3.4` is archived
    on GitHub. We shall be using that code base to install the vulnerable software.
    To start with, we need to clone the `git` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to install packages for setting up a primary build environment.
    To do this, we run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we `cd` into the `vsftpd` folder to build it from source. However, before
    doing that, we need to make a small change to the `Makefile`. The `-lcrypt` value
    needs to be added as a linker flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9b46007-7258-4dc3-91a4-16178cba3cdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Once done, save the file and just run `make`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, we should see a `vsftpd` binary in the same folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1551d0e-a19f-4364-b5a5-7f538385bb6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set up some prerequisites before installing `vsftpd`. Namely,
    we need to add a user called `nobody` and a folder called `empty`. To do that,
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, we can run the installation by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With that done, we need to execute the `vsftpd` binary to confirm whether we
    can connect to the `localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/274a3cfc-db75-4b33-bd04-dcbee35055e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to set up anonymous access to the FTP server. To do this,
    we need to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, enable local login to the `vsftpd` server by making the following
    change to `/etc/vsftpd.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d445a60-e1fc-4b35-9e1e-3bfacf67df75.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a vulnerable Windows instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a vulnerable Linux Server set up, we now set up an attack vector through
    a Windows server that's running a vulnerable web application. This application
    shall provide two environments that readers without an actual test environment
    can try their hand at.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a vulnerable Windows server instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purpose of this lab host, we will be using a Server 2003 instance from
    the AWS Marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1470f873-c326-4b00-be42-5ffb48a7a4d5.png)'
  prefs: []
  type: TYPE_IMG
- en: The provisioning steps are pretty much identical to what we used to set up the
    Linux instance earlier. Care should be taken that the VPC settings are similar
    to what we used for the previous instance. This will later allow us to configure
    the VMs to be on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: 'After verifying the VPC settings and the region, we proceed to launch the instance—precisely
    as we did earlier. Finally, we set the key-pair that we have been using all along
    and we are good to go. Once the instance has been launched, we need to follow
    a slightly different process to access a Windows instance remotely. Since **Remote
    Desktop Protocol** (**RDP**) doesn''t support certificate-based authentication,
    we need to provide the private key to decrypt and get the password using which
    we can log in. This is done by simply right-clicking on the instance and selecting
    Get Windows Password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7064e60-0172-49da-a088-44fba472bd8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the following screen, we are required to upload the private key that was
    downloaded earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c197943-5ce7-43cc-9968-133dd87b66ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Once done, simply clicking on Decrypt Password will provide us with the password
    that we can use to RDP into our Windows server instance. Once done, it's a simple
    matter of firing up Remote Desktop and connecting to the IP address using the
    displayed credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are logged in, the next step is to set up XAMPP on the Windows server
    so we can host a vulnerable website on the server. But before we proceed, we need
    to install the latest version of Firefox on the server, since the Internet Explorer
    version that comes packaged with Windows Server 2003 is pretty old and doesn''t
    support some website configurations. To download XAMPP, just access [https://www.apachefriends.org/download.html](https://www.apachefriends.org/download.html)
    and download the version that''s built for XP and Windows Server 2003:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20733b18-76c1-46df-92ba-fcdf3274caf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that you will need to scroll down and download the correct version of
    XAMPP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c4e5bef-6397-4283-824d-8d4363d17b6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we need to follow the default installation process, and we will be
    set up with a working installation of PHP, Apache, and MySQL, along with a few
    necessary utilities that we need to manage a website.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a vulnerable web application on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be setting up an extremely vulnerable web application
    for the pentesting lab. To begin with, let's clear up the XAMPP hosting folder
    by accessing `C:\xampp\htdocs`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `_bak` and cut and paste all the existing files into
    that folder. Now, let's download the vulnerable website's source code. For this,
    we will use one of the many vulnerable PHP samples that are available on GitHub: [https://github.com/ShinDarth/sql-injection-demo/](https://github.com/ShinDarth/sql-injection-demo/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The fastest way to get the files is to directly download the ZIP file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cce34f3c-df63-4dd5-a15b-79b9479b626f.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading the source code
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, it''s simply a matter of copying the contents of the ZIP file
    into the `C:\xampp\htdocs` folder. If done correctly, this is what the file structure
    should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a2f430b-c1ea-4781-9409-508b8dcc8cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: The file structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Once completed, the next step is to create a database for the application and
    import the data into it. To achieve this, you need to access the phpMyAdmin interface,
    which is accessible at `http://127.0.0.1/phpmyadmin`. Once here, select the New option
    under Recent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04d6b2bd-31fb-4f05-9aea-618a3deb561c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we create a new database called `sqli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c751633d-f942-4efe-a228-639e79c9621d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, to import data into the newly created database, we go into the Import
    tab and browse to the `database.sql` file that we just extracted into the `htdocs`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47b3d1b6-a89c-411f-aca1-f680a9f70d7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click on Go we will see a success message. Now, if we browse to `http://127.0.0.1` in
    our browser, we will be able to access the vulnerable website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b766f5a-38ed-4ee6-934f-6ed16af1c008.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have successfully configured a vulnerable web application
    on the Windows server! The next step will be to set up the networking rules within
    our VPC so that the vulnerable hosts are accessible from the other EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring security groups within the lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up two vulnerable servers, the next step is to configure
    network so that our web application isn't accessible to outsiders and, at the
    same time, so that the other lab machines can communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring security groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We had originally set all of the EC2 instances to be on the same VPC. This implied
    that the EC2 instances would be on the same subnet and would be able communicate
    with each other through internal IP addresses. However, AWS doesn't want to allow
    all 4,096 addresses on the same VPC to be communicating with each other. As a
    result, the default security groups don't allow communication between EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow connectivity from the Ubuntu instance to the Windows instance (you
    can repeat these steps for the Kali instance that will be set up in the next chapter),
    the first step is to get the Private IP address of the Ubuntu host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36e57154-2299-4e2e-8adc-d85ed0430062.png)'
  prefs: []
  type: TYPE_IMG
- en: Description tab showing the Private IPs
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to modify the security group rules for the first Windows instance.
    This is as simple as clicking on the security Group Name in the summary pane to
    get to the Security Group screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cfc515d-07d6-450c-89c2-a57b0260a197.png)'
  prefs: []
  type: TYPE_IMG
- en: Security Group screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we simply need to click on the Edit button and add the rule allowing all
    traffic from the Kali Linux instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5dbb1c7-34b4-4f58-8c68-79ad2f1c46c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, just save this configuration. To confirm that Kali can now communicate
    with the Windows server, let''s run a `curl` command to see if the site is accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure to replace the IP address with your IP address for Windows. If all
    is well, there should be a bunch of JavaScript in response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef9ce96e-d12c-490a-9fbc-215004ce5fc1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next chapter, once the Kali PentestBox has been set up, the preceding
    steps can be used to whitelist the Kali Linux IP address on both the Ubuntu and
    the Windows server instances so we can get started with hacking the lab environment!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have set up a lab that can prove useful to beginner penetration
    testers who do not have access to a test environment or hands-on exposure to a
    lab. In our lab, we have set up one Ubuntu host with a vulnerable service running
    on it, and we also set up a Windows server host that is running a vulnerable web
    application. This represents the two biggest surface areas for an attack in any
    environment. Additionally, we also went through the process of establishing a
    network connection between the various instances that we have set up so far. With
    these steps taken care of, the user can set up any operating system instances
    in the cloud, set up security groups to configure networking, and protect against
    unauthorized access as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at setting up a Kali PentestBox, using
    which we can perform scanning, enumeration, and exploitation of the two vulnerable
    EC2 instances that we have set up.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vulnerability and Exploit Database: [https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor](https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Virtual Private Cloud (User Guide): [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
