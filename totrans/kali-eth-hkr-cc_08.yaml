- en: Have Shell Now What?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Spawning a TTY shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for weakness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node hopping: pivoting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerSploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling plaintext passes with mimikatz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping other saved passwords from the machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivoting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backdooring executables for persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is privilege escalation, as described on Wikipedia, **privilege escalation**
    is the act of exploiting a bug, design flaw, or configuration oversight in an
    operating system or software application to gain elevated access to resources
    that are normally protected from an application or user. This results in unauthorized
    access to resources. Two types of privilege escalation are possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Horizontal**: This occurs in conditions where we are able to execute commands
    or functions that were not originally intended for the user access we currently
    have'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vertical**: This kind of exploitation occurs when we are able to escalate
    our privileges to a higher user level, for example, getting root on the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will learn the different ways of escalating our privileges
    on Linux and Windows systems as well as gaining access to the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: Spawning a TTY Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered different types of privilege escalation. Now let's look at some
    examples on how to get a TTY shell on this system. A TTY showcases a simple text
    output environment, that allows us to type commands and get the output.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the following example, where we have a web application running
    zenPHOTO:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1df99474-bae8-444e-8ce4-f6499ccf736c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The zenPHOTO already has a public exploit running, which we get access to via
    a limited shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71dccab9-1325-45e2-a316-cfc79f2add44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this is a limited shell, we try to escape it and get a reverse connection
    by first uploading `netcat` on the system and then using `netcat` to gain a backconnect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/97b42970-b8ee-49ba-b65b-0227a40cc547.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can backconnect using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/0a0a6460-ac7c-438d-a887-d2fa62a4247a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at our Terminal window, where we had our listener setup, we will see
    a successful connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/bc9d7e89-ab1b-4d7a-9621-957fb743e7e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s get a more stable TTY shell; assuming it''s a Linux system, we already
    have Python installed on it and we can get a shell using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8c23665a-29d9-4849-a7ec-802f1bf37808.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a much better way to execute commands. Sometimes, we may find ourselves
    in a situation in which the shell we gain access to via ssh or another method
    is a limited shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'One very famous limited shell is `lshell`, which allows us to run only a few
    commands, such as `echo`, `ls`, `help`, and so on. Escaping `lshell` is easy as
    all we have to do is type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And we have access to a command shell with no more limits.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65dfc583-757e-412e-a60a-a1183fa69944.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various other ways to spawn a TTY shell using Ruby, Perl, and so on.
    This can be seen at [http://netsec.ws/?p=337](http://netsec.ws/?p=337).
  prefs: []
  type: TYPE_NORMAL
- en: Looking for weakness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a stable shell, we need to look for vulnerabilities, misconfigurations,
    or anything that will help us in escalating privileges on the system. In this
    recipe, we will look at some of the ways in which privileges can be escalated
    to get the root of the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic step I would recommend to all of you after we have a shell on a server
    is to do as much enumeration as possible: the more we know, the better we have
    a chance of escalating privileges on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The key steps to escalating privileges, as mentioned on `g0tmi1k`, on a system
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collect**: Enumeration, more enumeration, and some more enumeration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process**: Sort through data, analyze, and prioritize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search**: Know what to search for and where to find the exploit code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adapt**: Customize the exploit so it fits. Not every exploit works for every
    system **out of the box**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Try**: Get ready for (lots of) trial and error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look at some of the most common scripts available on the internet, which
    makes our job easier by printing out whatever we need in a formatted manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is `LinEnum`, which is a shell script created by the reboot user.
    It performs over 65 checks and shows us everything we need to start with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d29200d8-3f51-4a14-b4dc-db057accc486.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Seeing the source code, we will see that it will display information such as
    kernel version, user info, world-writable directories, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08dce2a5-5474-409e-b68c-18bfd4255676.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next script we can use is `LinuxPrivChecker`. It is made in Python. This
    script also suggests privilege escalation exploits that can be used on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d03ff64c-e5ae-4e94-b522-4c1fd0a70475.png)'
  prefs: []
  type: TYPE_IMG
- en: These scripts are easy to find on Google; however, more information about this
    or the manual commands we can use to do the job ourselves can be found at [http://netsec.ws/?p=309](http://netsec.ws/?p=309)
    and G0tmilk's blog [https://blog.g0tmi1k.com/](https://blog.g0tmi1k.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'One more great script was created by `Arr0way` ([https://twitter.com/Arr0way](https://twitter.com/Arr0way)).
    He made it available on his blog, [https://highon.coffee/blog/linux-local-enumeration-script](https://highon.coffee/blog/linux-local-enumeration-script).
    We can read the source code available on the blog to check everything the script
    does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/327c2d7c-9460-4a11-887a-608870ebaa09.png)'
  prefs: []
  type: TYPE_IMG
- en: Horizontal escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned how to spawn a TTY shell and perform enumeration. In
    this recipe, we will look at some of the methods where horizontal escalation can
    be done to gain more privileges on the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we have a situation where we have got a reverse shell as `www-data`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `sudo –-list`, we find that the user is allowed to open a configuration
    file as another user, `waldo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c5959ab-2e97-4ca8-b4fb-2be36f170a12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we open up the config file in VI Editor, and to get a shell in VI, we type
    this in the VI’s command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b33d99b3-60fb-4f4f-850e-8b208272bdda.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a shell with the user `waldo`. So, our escalation was successful.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, we may also find authorized keys in the `ssh` directory or saved
    passwords, that help us perform horizontal escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Vertical escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at some examples using which we can gain access
    to a root account on a comprised box. The key to a successful escalation is to
    gather as much information as possible about the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step of rooting any box would be to check whether there are any publically
    available local root exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use scripts such as **Linux Exploit Suggester**. It is a script built
    in Perl where we can specify the kernel version and it will show us the possible
    publicly-available exploits we can use to gain root privileges. The script can
    be downloaded from [https://github.com/PenturaLabs/Linux_Exploit_Suggester](https://github.com/PenturaLabs/Linux_Exploit_Suggester):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/6688998f-d1ca-4c5b-940d-20901bbaeb2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we go to the directory using the `cd` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It is simple to use, and we can find the kernel version by command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use the enumeration scripts that we saw in the previous recipe.
    Once we have the version, we can use it with our script with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/aa614691-c993-4446-9340-45bbc2d8d136.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's us try using one of the exploits; we will be using the latest one that
    came out, that is, **dirty cow**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the definition of dirty cow as explained by RedHat: a race condition
    was found in the way the Linux kernel''s memory subsystem handled the **copy-on-write**
    (**COW**) breakage of private read-only memory mappings. An unprivileged local
    user could use this flaw to gain write access to otherwise read-only memory mappings
    and thus increase their privileges on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The exploit code can be seen on exploit DB at [https://www.exploit-db.com/exploits/40839/](https://www.exploit-db.com/exploits/40839/).
    This particular exploit adds a new user to `etc/passwd` with root privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6238552-2c9f-40e2-8261-4c1a6da7fb62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We download the exploit and save it on the server''s `/tmp` directory. It''s
    written in C language, so we can compile it using `gcc` on the server itself using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/eeea674d-3c1d-42ff-9815-f2baa6145502.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We `chmod` (change file permissions) the file using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And then we run it using `./dirty`. We will lose our backconnect access, but
    if everything goes well, we can now `ssh` into the machine as the root with the
    username `firefart` and password `firefart`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We try the `ssh` using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f5371878-fc1d-4a48-b4d2-925e4c4a0021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, dirty cow is a bit unstable, but we can use this workaround to make it
    stable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's execute the command ID; we will see that we are now root on the system!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eb13a53-9176-429a-9cf2-217c4ec14cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's look at another method to achieve the root. In this situation, we
    will assume that we have a shell on system and the enumeration scripts we ran
    showed us that MySQL process is running as the root on the system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21e973d7-e52a-4aef-8722-b3765333bfc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'MySQL has a feature called **User Defined Functions** (**UDF**); let''s look
    at a way to get root via UDF injection. Now we have two options: either download
    the code and compile on the compromised system or download a precompiled code
    from [https://github.com/mysqludf/lib_mysqludf_sys/blob/master/lib_mysqludf_sys.so](https://github.com/mysqludf/lib_mysqludf_sys/blob/master/lib_mysqludf_sys.so).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d3ff962-4dc2-4858-b2a6-1caa42393401.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it has been downloaded, we log in to the database. Usually, people leave
    the default root password blank; or, we can get one from the config files of the
    web application running on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we create a table and insert our file into the table using these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1b701a67-b90d-4d76-bc93-cb5affcf3b9a.png)'
  prefs: []
  type: TYPE_IMG
- en: For Windows systems, the commands are the same; only the path to MySQL would
    be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a `sys_eval` function, that will allow us to run system commands
    as the root user. For Windows, we run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux, we run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use `sys_eval` for anything we want; for example, to backconnect,
    we can use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/61944af5-d653-46a7-9f81-e8248a267d63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will give us a reverse shell as the root on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4775e23-2507-4246-846b-476e26bb1e4b.png)'
  prefs: []
  type: TYPE_IMG
- en: There are other ways too, such as adding our current user to the sudoers file.
    It's all up to our imagination.
  prefs: []
  type: TYPE_NORMAL
- en: Node hopping – pivoting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we are in one system on the network, we need to now look for other machines
    on the network. Information gathering is the same as what we learned in the previous
    chapters. We can start by installing and using nmap to look for other hosts and
    the application or services running. In this recipe, you will learn about a few
    tricks to get access to the port in the network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume we have shell access to a machine. We run `ipconfig` and find
    that the machine is connected to two other networks internally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb14066b-f091-45eb-9d44-af27a6ddd740.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we nmap scan the network and find some machines with a couple of ports open.
    You learned about a cool way of pivoting into the networks so that we can access
    the applications running behind other network on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do a `ssh` port forward using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2617ef3b-2b5b-449a-85a1-41035e7fae03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is done, we open the browser and go to the port number we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6cf79ba-cab5-4f8b-824f-69386eb625b0.png)'
  prefs: []
  type: TYPE_IMG
- en: We will have access to the application running on the remote host.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other ways to port forward; for example, using proxychains will help
    you dynamically forward the ports running on a server inside a different network
    subnet. Some of the techniques can be found at [https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/](https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/).
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn a few ways to get the administrator account on
    the Windows Server. There are multiple ways to get administrator rights on a Windows
    system. Let's look at a few ways in which this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have meterpreter on the system, Metasploit has an inbuilt module to
    try three different methods to get admin access. First, we will see the infamous
    `getsystem` of Metasploit. To view the help, we type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e92de5f2-c7e9-4472-8afb-11e88200294f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To try and get admin, we type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2e094e87-7be3-4f53-a2d8-8b35b8723e0f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see we are now `NT AUTHORITY\SYSTEM`. Sometimes, this technique may not
    work, so we try another way to get the system on the machine. We will look at
    some ways to reconfigure Windows services.
  prefs: []
  type: TYPE_NORMAL
- en: We will use **sc** ( known as **service configuration**) to configure Windows
    services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the `upnphost` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/fa564bc4-6c7b-405c-9bd2-8aa28218926f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we upload our `netcat` binary on the system. Once that''s done, we can
    change the binary path of a running service with our binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b59a25ff-43c7-4173-a313-82648ff44bad.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/9ddf4f36-b113-4963-8ed5-102aed8ec42c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We confirm whether the changes have been made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a822e9e-5c54-4991-9127-ac454fa66dcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to restart the service, and once that''s done, we should have a
    back connection with admin privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Instead of `netcat`, we can also use the `net user add` command to add a new
    admin user to the system, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s try another method: Metasploit has a lot of different local exploits
    for Windows exploitation. To view them, we type in `msfconsole` use `exploit/windows/local
    <tab>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc312fcc-7799-46e1-a741-911fb28187b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use `kitrap0d` to exploit. Use `exploit/windows/local/ms10_015_kitrap0d`.
    We set our meterpreter session and payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e3e7c94-a9ec-41e6-8a1f-96e33ded9024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d28ad678-55b4-4171-9343-b2217ac25924.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the admin. Let''s use one more exploit: the infamous `bypassuac`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We now set the session of our current meterpreter, which we have on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We run and see a second meterpreter with admin privileges open for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac14da81-870b-4d29-8768-f508439e0996.png)'
  prefs: []
  type: TYPE_IMG
- en: Using PowerSploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the launch of PowerShell, new ways to exploit Windows machine also came
    in. As described by Wikipedia, PowerShell (including Windows PowerShell and PowerShell
    Core) is a task automation and configuration management framework from Microsoft,
    consisting of a command-line shell and associated scripting language built on
    the .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use PowerSploit, which is a PowerShell-based post exploitation
    framework to gain access to meterpreter on a system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps to use PowerSploit:'
  prefs: []
  type: TYPE_NORMAL
- en: We will now assume a situation in which we have a Windows-based environment
    in which we have managed to gain shell access. We do not have admin rights on
    the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at a cool way of getting a meterpreter without actually downloading
    a file on the system using PowerSploit. It comes inbuilt with Kali in Menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6b724c1-e4f8-4097-916e-51b3db0773bd.png)'
  prefs: []
  type: TYPE_IMG
- en: The trick here will be to download a PowerShell script and load it into memory,
    and as it is never saved on HDD, the antivirus will not detect it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We first check whether PowerShell is installed by running `powershell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b53aad5b-05ae-465e-a69a-5f0ce4a0fed5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the command. Using single quotes is important; else, we may get
    a missing parenthesis error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4d7c0558-ad8f-413e-b3ff-cfcea063b805.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should not see any error. Now that our script is all set, we invoke the
    module and see help with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2757b763-17ef-4760-abee-66ab407f67ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we run the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/116bd076-38a2-4350-9eca-30768454a207.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we run the preceding script, we start our handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9913d29d-37d8-420b-841c-f5dfca462aca.png)'
  prefs: []
  type: TYPE_IMG
- en: We should have a meterpreter now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fdfd3d3-ef51-4d81-ae8c-b6f921f9cdc7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now since we have meterpreter, we can use any of the recipes mentioned earlier
    to get system rights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerSploit has lots of PowerShell modules that can be used for further exploitation,
    such as gaining privileges, bypassing antivirus, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can read all about this at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PowerShellMafia/PowerSploit](https://github.com/PowerShellMafia/PowerSploit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://null-byte.wonderhowto.com/how-to/hack-like-pro-use-powersploit-part-1-evading-antivirus-software-0165535/](https://null-byte.wonderhowto.com/how-to/hack-like-pro-use-powersploit-part-1-evading-antivirus-software-0165535/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling plaintext passwords with mimikatz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a meterpreter, we can use it to dump passwords from the memory.
    Mimikatz is a great tool for this. It tries and dumps the password from the memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'As defined by the creator of mimikatz himself:'
  prefs: []
  type: TYPE_NORMAL
- en: '"It is made in C and considered as some experiments with Windows security"
    It''s now well known to extract plaintexts passwords, hash, and PIN code and kerberos
    tickets from memory. Mimikatz can also perform pass-the-hash, pass-the-ticket
    or build Golden tickets."'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps to use mimikatz:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the meterpreter and system privileges, we load up mimikatz using
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7ba7c432-17a8-4279-9f90-4cef0716354e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view all the options, we type this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in order to retrieve passwords from the memory, we use the built-in command
    of Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/87681445-ca9e-4233-9c80-ba146c5f044b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the NTLM hashes are shown on the screen. To view Kerberos credentials,
    we type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d70e780e-2227-4730-957c-cfaaf24b1324.png)'
  prefs: []
  type: TYPE_IMG
- en: If there were any credentials, they would have been shown here.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping other saved passwords from the machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned about dumping and saving plaintext passwords from the
    memory. However, sometimes, not all passwords are dumped. Not to worry; Metasploit
    has other post-exploitation modules, using which we can gather saved passwords
    of different applications and services running on the server we compromised.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s check what applications are running on the machine. We use this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ff6942b5-241e-46c5-917e-fe396078b127.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We see the options; now all we need is our session, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run it and we will see the list of applications installed on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/234124c9-8966-4486-8fa9-a031062c78c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know what applications are running, let's try to collect more information.
  prefs: []
  type: TYPE_NORMAL
- en: We will use use `post/windows/gather/enum_chrome`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will gather all the browsing history, saved passwords, bookmarks, and so
    on. Again, we set our session and run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f4b85ab-ab5b-42e7-8600-578df6489795.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see that all the gathered data has been saved in a txt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c057e89-cc1e-42ac-a26a-f9b8b7fad9e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will try to gather the stored configuration and credentials of the FileZilla
    server (the FTP server that can be used to transfer files) that is installed on
    the machine. We will use the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/aff3af56-4a31-4124-9421-b5564b25a1a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the session and run it, and we should see the saved credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef4538d4-e0d0-4caf-bd74-dee2e44610f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use another post-exploitation module to dump the database passwords.
    We will use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/a8b33af3-02bd-47b5-a2d7-b2afbb83d4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the session and run this using `run -j`. We will see the credentials
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/373ecab6-9bf2-41ae-ab91-97b88b5d5d5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Pivoting into the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have complete control over a computer in the system, our next step should
    be to pivot into the network and try exploiting and getting access to as many
    machines as possible. In this recipe, you will learn the easy way to do that with
    Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit has an inbuilt meterpreter script, that allows us to add a route
    and enables us to attack other machines in the network using the current one.
    The concept is really simple; all we have to do is execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/bc51fae7-726a-4ce6-8e27-ef366d72e28b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once this is done, we can simply exploit the machines using the same methods
    that we covered in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Backdooring for persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of successful exploitation is to be able to keep access to
    the compromised machine. In this recipe, you will learn about an amazing tool
    known as the Backdoor Factory. The main goal of Backdoor Factory is to patch Windows/Linux
    binaries with our shell code so that the executable runs normally, along with
    executing our shell code every time it executes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Backdoor Factory comes installed with Kali. And it can be run using `backdoor-factory`.
    To view all the features of this tool, we will use the help command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f2bb2db5-4ffb-4402-a66b-ee117982ed5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Usage of this tool is not too hard; however, it is recommended that the binaries
    be tested before being deployed on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view what options are available for a particular binary we choose to backdoor,
    we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then use `iat_reverse_tcp_stager_threaded`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/a65a4970-36ad-4ef9-b3b5-61f1cfb336c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we choose the cave we want to use for injecting our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a944b432-52de-461f-95fb-32b4f38b2a4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Our binary has been created and is ready to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now all we need to do is to run a handler that will accept the reverse connection
    from our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3b2866d-9401-481b-b5ab-72826746f7f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now when the `.exe` is executed on the victim machine, we will have our meterpreter
    connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a28c4ee-e63c-4c2b-bd73-875bad8e59bf.png)'
  prefs: []
  type: TYPE_IMG
