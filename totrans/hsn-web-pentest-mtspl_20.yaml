- en: Writing Penetration Testing Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we all know, a good report must contain all the necessary details regarding
    the vulnerabilities of a system. All the penetration testing standards emphasize
    writing a well-structured report. In this chapter, we will learn about a few tools
    that we can use to make a good report.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key points that must be included in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: Details of the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CVSS score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The impact the bug has on the organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations for patching the bug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The reports should be divided into two parts: one for the technical team and
    another for management.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics. These topics will cover
    the tools that are commonly used in the report generation process:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to report writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Dradis Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Serpico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Dradis ([https://github.com/dradis](https://github.com/dradis))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serpico ([https://github.com/SerpicoProject/Serpico](https://github.com/SerpicoProject/Serpico))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database server (MariaDB/MySQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis Server ([https://redis.io/download](https://redis.io/download))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby ([https://www.ruby-lang.org/en/downloads/](https://www.ruby-lang.org/en/downloads/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to report writing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reporting is one of the most important phases of a penetration test since the
    reported vulnerabilities are not just for the technical team to use, but also
    management. There are generally two types of reports that need to be presented
    to the client – an **executive report** and a **Detailed Technical Report** (**DTR**).
  prefs: []
  type: TYPE_NORMAL
- en: 'An executive report is for the top management of the organization/company so
    that they can make decisions based on the business impact mentioned in the report.
    On the other hand, the DTR, as its name suggests, is a detailed report that outlines
    all the vulnerabilities that were found. This includes the suggested steps to
    help the technical (internal security operations and developers team) team patch
    the vulnerabilities. Overall, the report should contain the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: Purpose and scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approach and methodology used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common vulnerability scoring system (CVSS)** version used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executive summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of findings (A list of found vulnerabilities)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have had a quick introduction to report writing, let's understand
    how we can write a good executive report.
  prefs: []
  type: TYPE_NORMAL
- en: Writing executive reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in the introduction, an executive report is for the C-level
    executives and management to use in order to understand risks based on the risk
    assessment that was carried out (this includes vulnerability assessment and penetration
    testing). Since the C-level executives are busy people, the report should be as
    crisp as possible and contain all the information they need in order to make informed
    decisions. Let's take a look at the generic structure of an executive report.
  prefs: []
  type: TYPE_NORMAL
- en: Title page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, the title page contains information regarding the project,
    the vendor, and the client.
  prefs: []
  type: TYPE_NORMAL
- en: Document version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection is also defined in the DTR report. When the penetration test
    is performed, the report is not finalized in one go. A lot of changes need to
    be made by both sides so that a balanced report is created that is acceptable
    to the client and the tester. An initial draft of the report will be made and
    sent to the client. This subsection logs the number of changes that were made
    to the report from the time of its initial draft. Each change defines a new version.
    When the report is finalized, the version number is also mentioned in the report.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection is one of the most important parts of the report. The **table
    of contents** (**ToC**) structures the report document so that the C-level executives
    can understand it with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection introduces the executives to the penetration test project and
    the defined timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Defined scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this subsection of the report, all the defined in-scope URLs, IPs, endpoints,
    and so on should be mentioned. This information helps the C-level executives quickly
    notice the affected asset, which could have a business-critical impact on the
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Key findings (impact)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection of the report lists the impact of each vulnerability; that is,
    what an attacker can do to the organization's assets. These pointers help the
    organization assess the level of security that the business asset has. The C-level
    executives will know what assets of the organization need critical fixes right
    away.
  prefs: []
  type: TYPE_NORMAL
- en: Issue overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection gives top management insight into the severity of the vulnerabilities
    that were found. A nice-looking pie chart or a bar chart can be used here to show
    the found vulnerabilities, categorized based on severity.
  prefs: []
  type: TYPE_NORMAL
- en: Strategic recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection provides top management with recommendations they can follow
    to fix the vulnerabilities that are critical in nature and, if exploited, could
    cause problems for the business.
  prefs: []
  type: TYPE_NORMAL
- en: All the details in the report should be mentioned in a brief manner since the
    main objective of the executive report is to provide an overview of the assessment
    to top management. Anything unnecessary should be removed from the report. Now,
    let's look at DTR reports.
  prefs: []
  type: TYPE_NORMAL
- en: Writing detailed technical reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the technical details regarding the vulnerabilities are to be included in
    this report. A DTR is for the technical team from the client's end. Let's take
    a look at the generic structure of a DTR.
  prefs: []
  type: TYPE_NORMAL
- en: Title page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, the title page contains information regarding the project,
    the vendor, and the client.
  prefs: []
  type: TYPE_NORMAL
- en: Document version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection is also defined in the executive report and the details that
    are included are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection is one of the most important parts of the report. The ToC structures
    the report document so that the client's technical team can understand it easily.
  prefs: []
  type: TYPE_NORMAL
- en: Report summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection of the report provides an overview of the penetration testing
    project and shows the client the total count of vulnerabilities that were found,
    displayed in the order of their severity level. We can add some vulnerability
    statistics such as a pie chart or an area chart and define the vulnerabilities
    as Critical, High, Medium, Low, or Informational. As a pentester, we can add an
    attack narrative that tells us how an attacker can find these vulnerabilities
    and to what extent the attacker can exploit them. The report summary helps the
    technical team, as well as the C-level executives, see the overall success of
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Defined scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the kick-off meeting with the client, the scope of the project and the in-scope
    targets will have been defined. In this subsection of the report, all the defined
    in-scope URLs, IPs, endpoints, and so on should be mentioned. This information
    helps the technical team quickly manage the vulnerability at hand and communicate
    with the developer/administrator team that's responsible for the URLs/IPs mentioned
    in the scope.
  prefs: []
  type: TYPE_NORMAL
- en: There's another reason for adding the scope to the report – it makes for a smooth
    project flow for the penetration tester. In a scenario where the scope is undefined,
    the pentester won't be able to gauge the amount of work that needs to be done,
    or the number of days it will take to finish the project. As we all know, one
    of the core entities that is responsible for calculating the penetration testing
    project value is man-days.
  prefs: []
  type: TYPE_NORMAL
- en: When a penetration testing project is in its initial phase, that is, project
    discussion with the client, the project's value will be calculated based on the
    scope shared by the client and the number of man-days it will take to perform
    the tests for that given scope. Please note that these are not the only elements
    that define the value of the project – the assets, the timeline, the number of
    resources allocated for the project, the travel expenses (if any), and the initial
    requirements by the penetration tester are some of the key elements as well.
  prefs: []
  type: TYPE_NORMAL
- en: This defined scope helps the pentester allocate the resources of their team
    to the project and define the timeline to ensure there's a smooth project flow.
    If there are many subprojects, such as internal network or external network penetration
    testing being performed with the same client, defining the scope ensures both
    sides have the same expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Methodology used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subsection of the report should contain the methodology the penetration
    tester followed during the security assessment. It's better to show this process
    using a diagram and explain each process to the client so that the technical team
    on the client side will know how their organizational assets are being tested.
  prefs: []
  type: TYPE_NORMAL
- en: Whether the penetration tester follows the NIST-800 standard, the PTES standard,
    or their own company's standard, they have to explain the process in this subsection.
  prefs: []
  type: TYPE_NORMAL
- en: CVSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CVSS is a free and open industry standard for determining the severity of
    a vulnerability. When defining the vulnerability in the context of its severity,
    we need to categorize the vulnerability based on the CVSS score calculation. This
    subsection will introduce the client to the CVSS and the version we'll be using
    in the report. At the time of writing, CVSS is at version CVSS v3.1, which was
    released in June 2019.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A penetration tester should add the vulnerability description, CVSS score, vulnerability
    severity, affected endpoints/IPs, **proof of concept** (**PoC**), steps to reproduce,
    impact, recommendations, and references in this subsection of the report.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this subsection, the penetration tester concludes the report with the project's
    overall difficulty from an attacker's point of view. Any extra recommendations
    are added to this subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any other information such as screenshots, the service enumeration, the CVSS
    calculation formulas, and anything else that the client might need is added to
    this subsection of the report.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you know how to write an executive report, as well as a DTR. The main issue
    that arises during reporting is gathering all the technical details. As a pentester,
    we have to make sure we collect all the screenshots, URLs, payloads used, and
    so on during the penetration test so that we can feed those details into the DTR
    report.
  prefs: []
  type: TYPE_NORMAL
- en: There won't be an issue if the scope is a few IPs or URLs, but if the project
    is huge, then collecting data sometimes becomes a nuisance. To sort out these
    issues, we can always opt for reporting frameworks that are openly available on
    GitHub. These frameworks can automatically parse the output scan files and Nmap
    port scanning results and give us a report based on the details that were fed
    to it. In the next section, we'll discuss one such framework – Dradis.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Dradis Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dradis is an open source browser-based application that can be used to aggregate
    output from different tools and generate a single report. It can be connected
    to over 15 tools, including Burp Suite, Nessus, Acunetix, and Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-installation configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Dradis, there are a few dependency packages we need to install. It
    is extremely easy to use and comes preinstalled with Kali Linux. So, we will reinstall
    it and then learn how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the dependencies by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will be proceeding with the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can download the GitHub repository for the Community Edition of Dradis using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db02843b-4c63-466d-b8da-cb3bd7520d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c281912f-51bd-4891-8f65-e13d06a819b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to move to the Dradis folder. To install Dradis, we need to run
    the setup file in the bin folder by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is complete, we can run the following command to start
    the Dradis server, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a5f247-0437-4688-b2de-735d8e2cc02e.png)'
  prefs: []
  type: TYPE_IMG
- en: Dradis can be accessed by going to `https://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: We can even use a Docker image for Dradis to avoid the installation steps and
    any errors that may arise during this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to set up our password so that we can access the framework and
    log in, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6a5efda-4682-4c27-bc0c-72a346ebbfb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's get started with Dradis.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we''ve successfully logged in, we will be redirected to the dashboard,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d2ffbd4-c32e-44c6-abfb-7aa872e9c622.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The free version of Dradis Framework supports plugins for various tools, such
    as Nmap, Acunetix, Nikto, and Metasploit. It also allows us to create methodologies
    that can be used during penetration testing activities. On the left pane of the
    platform, we can see three main sections that can help with the report development
    process – All Issues, Methodologies, and Trash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/240619ec-26c5-4ec1-93d2-baf92b417262.png)'
  prefs: []
  type: TYPE_IMG
- en: '**All issues**: This page allows us to create an issue that was found during
    a penetration test activity either manually or by importing the output from different
    tools such as Nmap, Nikto, and Nessus. Clicking on this option will redirect us
    to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f40e953-febd-453d-90c1-89d39b44f13f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's learn how to import third-party reports into Dradis.
  prefs: []
  type: TYPE_NORMAL
- en: Importing third-party reports into Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To import issues from the output of a tool, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the third option Upload the output of a tool, which will take us to
    the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bde2701-2093-4f90-a9dc-a64270db224c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling down will reveal a list of plugins that have been installed, along
    with the names of their tools, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67f2410f-b1bd-4f90-b328-dc82c69b2ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Uploading a report will show us the parsed output, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a1769ed-66c8-40db-ad5c-c36f0193bce1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we''ve finished importing, we will see the results in the left-hand pane,
    under plugin.output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/721235f8-ba4e-499e-aaba-efbdf8f4c4cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of the scan results we just imported is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac577801-d5ad-4de5-b556-1188df933c08.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we need to define the security testing methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the security testing methodology in Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Methodology** section allows us to define the methodology we will follow
    during the activity. The most commonly used methodologies are the **Open Source
    Security Testing Methodology Manual** (**OSSTMM**), **Penetration Testing Execution
    Standard** (**PTES**), and the National Institute of Standards and Technology.
    We can even create our own methodology by defining a checklist, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a checklist, go to Methodologies and click on Add new. You will see
    the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b221f185-d14a-4f51-9d96-28d9ca63eb8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we need to assign it a name and click on Add to Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f64441a-f50b-45e0-a0c9-0bb62679759b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should see that a sample list has been created for us. This can be edited
    by clicking on the Edit button on the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4011674d-bcce-4514-9bd7-cc49bf458ea8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see that the list is in an XML file. We can edit and save it by
    clicking on Update methodology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fde0e4f-24f1-496f-a74e-48fbb60d317c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's organize our reports.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing reports using Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s learn how to organize our scan reports. **Nodes** allow us to create
    individual sections for different subnets, networks, and office locations and
    then place all the issues or screenshots there. Let''s quickly look at how to
    create a node:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Nodes option in the left-hand menu and click on the + sign; a pop-up
    box will open where we add a network range. After doing so, click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79aa12d4-a985-4931-b924-9a702a39c101.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a new subnode, we need to select Node from the left-hand side pane and
    then choose the Add subnode option. Subnodes are used for further organization
    of the network. We can even add notes and screenshots as evidence of the bugs
    we may find in that specific node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49c7b1bc-1f38-426d-8aef-edb05ac284b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, let's learn how to export reports in Dradis.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting reports in Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Different scans can be imported, combined, and exported as one single report
    using Dradis Framework, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a935c425-709f-468a-b888-240169ab1636.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: More information on Dradis can be found on their official website at [https://dradisframework.com/](https://dradisframework.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned how to install and set up Dradis Framework. We also
    looked at importing, organizing, and exporting reports in Dradis. In the next
    section, we will look at another tool called Serpico.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Serpico**, or the **SimplE RePort wrIting and COllaboration** tool, is a
    tool that is developed in Ruby and is used to speed up the process of report writing.
    It''s open source, platform-independent, and available on GitHub. In this section,
    we will go through the basic installation and usage of Serpico.'
  prefs: []
  type: TYPE_NORMAL
- en: Installation and setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For 64-bit Linux systems, installation is easy – we just download and install
    the file from the releases section of the tool, at [https://github.com/SerpicoProject/Serpico/releases](https://github.com/SerpicoProject/Serpico/releases).
  prefs: []
  type: TYPE_NORMAL
- en: Since Serpico has a Docker image, we will use it for our use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to set up a database and username and password. To do this,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30a3f279-2f70-4984-bcb9-d709f69c1872.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we run the tool using `ruby serpico.rb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be1e42a6-3f88-4bda-aa31-72c4e68c77f7.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it – now, we are all set to start using the tool, which will now be accessible
    at `http://127.0.0.1:8443`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot shows the login screen of Serpico:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b71b7e6f-48c8-42b2-b946-f0b54541abe7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you''ve logged in with your username and password, you will see a dashboard
    that''s similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e857bb5-7dfc-4321-a8af-a851d9267382.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we've logged in, we will see various options available such as add user,
    add template, and so on, as shown in the left-hand side pane of the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new report, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the New Report option from the top menu. We will be redirected to
    the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77b21d0a-e39f-4230-927b-66c86f270d72.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can fill in various details, such as Full Company Name, Assessment
    Type, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the Save button will take us to the next page, where we can fill
    in the rest of the details, such as contact email, and so on. All this information
    will be printed on the final report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to add our template database findings to the tool. We can
    either choose to Add finding from templates if we want to follow a common findings
    template such as SQLi and XSS, or we can choose to Create new findings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d556a103-31de-4d30-a1bc-bb5847674f3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on a template will download the respective Word document. It should
    look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84f1fa16-4c80-43c4-a379-114f9265276d.png)'
  prefs: []
  type: TYPE_IMG
- en: To add a template for a particular bug, we just tick the checkbox and choose
    the Add button, which is located at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we keep populating the report with bugs, we will see our structure taking
    form and that the graphs are now making much more sense. We can even add attachments
    and manage hosts directly from the Metasploit database.
  prefs: []
  type: TYPE_NORMAL
- en: Later, this can be exported as a single report using the Export report feature.
    Serpico also supports various plugins that can be used to import data from different
    tools such as Burp Suite and Nessus.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data from Metasploit to Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to connect Serpico to Metasploit to import data. First,
    we need to edit the report that we want to connect to Metasploit. We will be redirected to
    a new page. From the left menu, choose Additional Features. The following page
    will open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55bb86fc-89e6-4121-9fce-70d67b5cf122.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s start our Metasploit RPC service, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92b50ff4-842f-434d-a635-2e82c044ac1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After doing this, we need to switch back to Serpico in the browser and click
    on Configure Metasploit RPC connection, which will take us to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2cec21b-1790-416f-8bb9-d71f800ea704.png)'
  prefs: []
  type: TYPE_IMG
- en: Filling in the connection details and saving these settings will connect Serpico
    to Metasploit. By doing this, all the findings will be added to the report.
  prefs: []
  type: TYPE_NORMAL
- en: Importing third-party reports into Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to Dradis, we can also import findings from other tools into Serpico's
    report. Let's quickly learn how to import findings from Nessus, as well as Burp
    Suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Additional Features page, while editing the report, we can choose the Auto
    Add Findings from a Nessus XML option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cfd86c9-db4a-4cf0-926c-66995780e889.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be redirected to a new page where we can upload the XML file for Nessus,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd61f909-cdf4-4255-b672-5f65c8fc9e9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When choosing the Auto Add Findings from Burp scanner report option, we have
    the option to upload the Burp scanner''s report, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56c513b5-159e-4c43-a07e-5af29341ecee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Burp Suite report will then be parsed into Serpico format and the results
    from the report will be displayed on the main panel of Serpico, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07986d3f-da78-447c-9082-df984c636bd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to import scan reports from third-party tools into Serpico,
    let's learn how to manage users.
  prefs: []
  type: TYPE_NORMAL
- en: User management in Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'User management is necessary for the organization, especially when the penetration
    testing team is large. Serpico also allows us to manage users, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc291ef0-f3a5-455e-87d1-819216523775.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two types of user authorization supported by Serpico: **Local authorization**
    and **Active Directory (AD)-based authorization. **Once the user has been added,
    the current list of users can be viewed by clicking the List Users link from the
    left-hand side pane, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b792e1df-e99f-4b15-b18b-e63af884092d.png)'
  prefs: []
  type: TYPE_IMG
- en: Apart from user management, Serpico also allows us to manage the reporting templates.
  prefs: []
  type: TYPE_NORMAL
- en: Managing templates in Serpico
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Serpico also allows us to create custom report templates using the metalanguage
    that''s derived from Microsoft Word. We can define and upload custom report templates
    from the Add Report Template page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43adedaf-b399-4148-897a-3fe188ad2b64.png)'
  prefs: []
  type: TYPE_IMG
- en: There are also a lot of pre-built templates available on the internet that have
    been created and shared by other users.
  prefs: []
  type: TYPE_NORMAL
- en: Generating reports in multiple formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Serpico allows us to generate reports in different formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text-only format**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSV format**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASCII Doc format **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Presentation format (including PDF) **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML format **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This concludes our quick walkthrough of Dradis Framework and Serpico.
  prefs: []
  type: TYPE_NORMAL
- en: More information about Serpico can be found at [https://github.com/SerpicoProject/SerpicoPlugins/wiki/Main-Page](https://github.com/SerpicoProject/SerpicoPlugins/wiki/Main-Page).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced report writing and its two types. We also worked
    with two tools – Dradis and Serpico. Now that you are familiar with their frameworks,
    you can generate and organize reports using them.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of another amazing journey. We hope you have enjoyed
    this book. We always welcome feedback from you as it helps us improve and create
    better content. Feel free to reach out to us for any further queries and don't
    forget to recommend this book to your friends!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the metalanguage supported by Serpico?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What necessary items should be included in a penetration testing report?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What other tools can be used for automated report writing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are Dradis and Serpico supported by Microsoft Windows?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following links provide more information about Dradis and Serpico:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dradisframework.com/ce/](https://dradisframework.com/ce/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/SerpicoProject/Serpico](https://github.com/SerpicoProject/Serpico)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/SerpicoProject/Serpico/wiki/Serpico-Meta-Language-In-Depth](https://github.com/SerpicoProject/Serpico/wiki/Serpico-Meta-Language-In-Depth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/SerpicoProject/SerpicoPlugins/wiki/Main-Page](https://github.com/SerpicoProject/SerpicoPlugins/wiki/Main-Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
