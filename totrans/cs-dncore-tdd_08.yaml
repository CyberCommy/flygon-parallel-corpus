- en: Creating Continuous Integration Build Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous feedback, frequent integration, and timely deployment, which all
    result from the practice of continuous integration, can greatly reduce the risks
    associated with the software development process. A development team can improve
    productivity, reduce the amount of time required to deploy, and benefit tremendously
    from CI.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](499224f3-b0cc-4ba3-87ef-a7c92b85070d.xhtml), *Continuous Integration
    and Project Hosting*, we set up TeamCity, a robust continuous integration tool,
    that simplifies and automates the process of managing source code check-ins and
    changes, testing, building, and deploying the software project. We walked through
    the creation of build steps in TeamCity and connected it to our `LoanApplication`
    project in GitHub. TeamCity has in-built features that allow it to connect to
    software projects hosted on GitHub or Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: The CI process brings many different steps together into an easily repeatable
    process. These steps vary based on the software project type, but there are steps
    that are common and applicable to most projects. These steps can be automated
    using a build automation system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will configure TeamCity to use a cross-platform build-automation
    system, called **Cake**, to clean, build, and restore package dependencies, and
    test the `LoanApplication` solution. Later in the chapter, we will explore the
    build-step creation with a Cake task in **Visual Studio Team Services**. We will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Cake Bootstrapper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing build scripts in C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cake extension for Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Cake tasks to build steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI with Visual Studio Team Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Cake Bootstrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cake** is a cross-platform build-automation framework. It is a build-automation
    framework for compiling codes, running tests, copying files and folders, as well
    as running build-related tasks. Cake is open source with the source code hosted
    on GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: Cake has the feature to make working with file system paths easy and has functionality
    for manipulating XML, starting processes, I/O operations, and parsing Visual Studio
    Solutions. Using Cake build-related activities can be automated using C# domain-specific
    language.
  prefs: []
  type: TYPE_NORMAL
- en: It employs a dependency-based programming model for build automation, through
    which tasks are declared alongside dependencies between the tasks. The dependency-based
    model is ideal and suitable for build automation because the majority of automation
    build steps are idempotent.
  prefs: []
  type: TYPE_NORMAL
- en: Cake is truly cross-platform; its NuGet package, Cake.CoreCLR, allows it to
    run on Windows, Linux, and Mac using .NET Core. It has a NuGet package that can
    be used to run on Windows relying on .NET Framework 4.6.1\. Also, it can use the
    Mono framework to run on Linux and Max, with Mono Version 4.4.2 recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Irrespective of the CI tool being used, Cake has consistent behavior across
    all supported tools. It has wide support for most tools used during builds, which
    include **MSBuild**, **ILMerge**, **Wix**, and **Signtool**.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use the Cake Bootstrapper, Cake needs to be installed. The easy
    approach to install Cake and test run the installation is to clone or download
    a `.zip` file, which is the Cake build example repository located at: [https://github.com/cake-build/example](https://github.com/cake-build/example).
    The example repository contains a simple project and all the files necessary to
    run the Cake script.'
  prefs: []
  type: TYPE_NORMAL
- en: In the example repository, there are certain files of interest—`build.ps1` and
    `build.sh`. They are the bootstrapper scripts that ensure that the needed dependencies
    by Cake together with Cake and the necessary files are installed. These scripts
    make invoking Cake easier. The `build.cake` file is the build script; the build
    script can be renamed, but the bootstrapper will locate the `build.cake` file
    by default. The `tools.config`/`packages.config` file is the package configuration
    that instructs the bootstrapper script which NuGet packages to install in the
    `tools` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Extract the downloaded example repository archive file. On Windows, open a PowerShell
    prompt and execute the bootstrapper script by running `.\build.ps1`. On Linux
    and Mac, open the terminal and run `.\build.sh`. The bootstrapper script will
    detect that Cake is not installed on the computer and automatically download it
    from NuGet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the bootstrapper script execution, upon completion of Cake download,
    the downloaded sample `build.cake` script will run, which will clean up the output
    directory, and restore referenced NuGet packages before building the project.
    When the `build.cake` file runs, it should clean the test project, restore the
    NuGet packages, and run the unit tests in the project. The `Run Settings` and
    `Test Run Summary` will be presented as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9b68fa6-ed2f-4c07-9fa0-ec76e1c8f5a3.png)'
  prefs: []
  type: TYPE_IMG
- en: The Cake Bootstrapper can be installed by downloading it from the *Cake Resources*
    repository hosted on GitHub ([https://github.com/cake-build/resources](https://github.com/cake-build/resources)),
    which contains configuration files and bootstrappers. The bootstrapper will download
    Cake and the necessary tools required by the build script, thereby avoiding storing
    binaries in the source code repository.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, PowerShell can prevent the running of the `build.ps1` file. You can get
    an error on the PowerShell screen that `build.ps1` cannot be loaded because running
    scripts is disabled on the system. This restriction in running the file is due
    to the default security settings available in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the PowerShell window and change the directory to the folder of the Cake
    build example repository that was downloaded earlier, and run the `.\build.ps1` command.
    If the execution policy on the system has not been changed from the default, this
    should give you the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08df4a59-479c-4116-b56b-2ac333187ca5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the current execution policy configurations on the system, run the
    `Get-ExecutionPolicy -List` command on the PowerShell screen; this command will
    present a table with the available scopes and execution policies, like in the
    following screen. Based on the way you run PowerShell, you might have different
    settings on your instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b30ec57-3e5b-4581-b016-e25dc5028bdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To change the execution policy to allow the scripts to run subsequently, run
    the `Set-ExecutionPolicy RemoteSigned -Scope Process` command, which is intended
    to change the process scope from undefined to `RemoteSigned`. Running the command
    will display a warning with a prompt on the PowerShell screen stating your PC
    might be exposed to security risks. Type *Y* for Yes and press *Enter*. The following
    screenshot shows what is displayed on the PowerShell screen when the command is
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46d76460-53de-4899-90e8-9fd74d557941.png)'
  prefs: []
  type: TYPE_IMG
- en: This will change the execution policy of the PC and allow PowerShell scripts
    to be run.
  prefs: []
  type: TYPE_NORMAL
- en: Cake Bootstrapper installation steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The steps to install Cake Bootstrapper are similar for the platforms with little
    differences. Perform the following steps to set up the boostrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the Cake resource repository to download the boostrapper. For Windows,
    download the PowerShell `build.ps1` file and for Mac and Linux, download the `build.sh`
    bash file.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, open a new PowerShell window and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On Mac, run the following command from a new shell window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux, open a new shell to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Step 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a Cake script to test the installation. Create a `build.cake` file;
    which should be placed in the same location as the `build.sh` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Step 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cake script created in *Step 2* can now be run by invoking the Cake Bootstrapper.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, you need to instruct PowerShell to allow running scripts, this is
    done by changing the Windows PowerShell script execution policy. The PowerShell
    script execution can fail due to the execution policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the Cake script, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux or Mac, you should run the following command to give the current owner
    permission to execute the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command has been run, the bootstrapper can be invoked to run the Cake
    script created in *Step 2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Writing build scripts in C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating the build and deployment tasks using Cake allows you to avoid issues
    and headaches associated with project deployments. A build script usually contains
    the steps and logic required to build and deploy the source code alongside configuration
    files and other artifacts of a project.
  prefs: []
  type: TYPE_NORMAL
- en: Using the sample `build.cake` file available on the Cake resource repository
    can be a starting point for writing a build script for a project. However, to
    achieve more, we will walk through some basic Cake concepts that can facilitate
    writing robust scripts for automating build and deployment tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the core of the build automation with Cake is the task. A **task** in Cake
    is a simple unit of work that is used to carry out a specific action or activity
    in a desired defined order. Tasks in Cake can have specified criteria, associated
    dependencies, and error handling.
  prefs: []
  type: TYPE_NORMAL
- en: 'A task can be defined by using the `Task` method, with the task name or caption
    passed into it as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the `build` task in the following snippet cleans the `debugFolder`
    folder to delete the contents. When the task is run, the `CleanDirectory` method
    will be invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Cake allows you to use C# to use the async and await features in a task to create
    asynchronous tasks. Essentially, a task itself will run synchronously with a single
    thread, but the code contained in a task can benefit from the asynchronous programming
    features and utilize asynchronous APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cake has the `DoesForEach` method that can be used to add a collection of items
    or a delegate that yields a collection of items as actions to a task. When a delegate
    is added to a task, the delegate will be executed after the task is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define `DoesForEach` by chaining it to the `Task` method, as in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: TaskSetup and TaskTeardown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`TaskSetup` and `TaskTeardown` are used to wrap code to execute actions that
    you want the build to perform before and after the execution of each task. These
    methods are especially useful when performing actions such as configuration initializations
    and custom logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to `TaskSetup` and `TaskTeardown` for task, Cake has the `Setup` and
    `Teardown` methods that can be used to execute actions that are intended to run
    before the first task and after the last task, respectively. These methods are
    useful in a build automation, with a good use case being, for example, when you
    intend to start up some server and services before running tasks and for the cleanup
    activities afterwards. The `Setup` or `Teardown` methods are to be called before
    `RunTarget` to ensure they work correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Configuration and preprocessor directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cake operations can be controlled through the use of environment variables,
    configuration files, and by passing arguments into the Cake executable file. This
    is based on a specified priority in which the configuration file overrides the
    environment variables and arguments passed into Cake, and then overrides entries
    defined in both environment variables and the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you intend to specify the tool path, which is the directory
    that cake checks when restoring tools, you can create the `CAKE_PATHS_TOOLS` environment
    variable name and set the value to the Cake tools folder path.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using configuration file, the file should be placed in the same directory
    as the `build.cake` file. The Cake tools path can be specified in the configuration
    file, like in the following snippet, which overrides whatever is set in the environment
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The Cake tools path can be passed directly into Cake, which will override what
    is set in both the environment variable and configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Cake has values that are used by default for the configuration entries, if
    they are not overridden using any of the methods for configuring Cake. The available
    configuration entries are shown here with their default values and how to configure
    them using the configuration methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b93d2441-cac2-4442-87b4-81d5c56b2bcb.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Preprocessor directives* are used in Cake to reference assemblies, namespaces,
    and scripts. The preprocessor line directives run before the script is executed.'
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, you will create tasks whose execution will depend on the completion
    of other tasks; to achieve this, you use the `IsDependentOn` and `IsDependeeOf`
    methods. To create a task that is dependent on another task, use the `IsDependentOn`
    method. In the following build script, Cake will execute `Task1` before `Task2`
    is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `IsDependeeOf` method, you can define task dependencies with reversed
    relationships. This implies that where the tasks that depend on a task are defined
    in that task. The preceding build script can be refactored to use the reversed
    relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When criteria is used in the Cake script, it allows you to control the flow
    of the execution of the build script. A **criteria** is a predicate that must
    be fulfilled for the task to execute. The criteria does not affect the execution
    of the succeeding task. Criteria is used to control task execution based on specified
    configurations, environmental states, repository branches, and any other desired
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the simplest form, you can use the `WithCriteria` method to specify the
    criteria of the execution of a particular task. For example, if you want to clean
    the `debugFolder` folder only in the afternoon, you can specify the criteria as
    in the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have a task whose execution is dependent on another task; in the following
    script, the criteria for the `CleanFolder` task will be set when the task is created,
    while the criteria for the `ProcessCsv` task evaluation will be done during task
    execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A more useful use case will be to write a Cake script with criteria that checks
    a local build and executes some actions that will clean, build, and deploy a project.
    Four tasks will be defined, one for each of the actions to be performed and the
    fourth to chain the actions together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Cake's error handling and finally block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cake has error handling techniques that you can use to recover from errors or
    graciously handle exceptions whenever they occur during the build process. Sometimes
    build steps call external services or processes; invocation of these external
    dependencies might cause errors that can cause the overall build to fail. A robust
    build should handle such exceptions without stopping the entire build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OnError` method is a task extension that is used when you need to act
    on an exception generated in the build. Instead of forcefully terminating the
    script, you can write code to handle the error in the `OnError` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes you might want to ignore the error thrown and just continue the execution
    of a task that generates the exception; you can use the `ContinueOnError` task
    extension to achieve this. When using the `ContinueOnError` method, you cannot
    use the `OnError` method with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to report the exception generated in a task, and still allow the
    exception to propagate and take its course, use the `ReportError` method. If,
    for any reason, an exception is thrown inside the `ReportError` method, it is
    swallowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can use the `DeferOnError` method to defer any thrown exception till
    the task being executed is completed. This will ensure that the task executes
    all actions specified in it before the exception is thrown and the script fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, you can use the `Finally` method to execute any action, irrespective
    of the outcome of the task''s execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: LoanApplication build script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate the power of Cake, let's write a Cake script to build the `LoanApplication`
    project. The Cake script will clean the project folder, restore all package references,
    build the entire solution, and run unit test projects in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script sets arguments to be used throughout the script, defines
    the directories and the tasks to clean the `bin` folder of the `LoanApplication.Core`
    project, and restores packages using the `DotNetCoreRestore` method. NuGet packages
    can be restored by using the `DotNetCoreRestore` method, which in turn uses the
    `dotnet restore` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The later portion of the script contains tasks to build the entire solution
    using the `DotNetCoreBuild` method, which builds the solution using the `dotnet
    build` command, using settings provided in the `DotNetCoreBuildSettings` object.
    The test projects are executed using the `DotNetCoreTest` method, which runs the
    tests in all the test projects in the solution using `dotnet test` and the settings
    provided in the `DotNetCoreTestSettings` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The Cake Bootstrapper can be used to run the Cake `build` file by invoking
    the bootstrapper from the PowerShell window. When the bootstrapper is invoked,
    Cake will use the task definition available in the `build` file to commence execution
    of the defined build tasks. When the execution begins, the progress and status
    of the execution is presented in the PowerShell window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8e37ddb-c164-41c2-abe8-970cd23436d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The progress of the execution of each task will be displayed on the PowerShell
    window with all the activities that Cake is currently undergoing. When the build
    execution completes, the duration of the execution of each task in the script
    will be displayed along with the total execution time of all the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3ff87ae-4cca-4ff6-af6d-349cca93578a.png)'
  prefs: []
  type: TYPE_IMG
- en: Cake Extension for Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Cake Extension for Visual Studio Add-in** brings language support for
    Cake build scripts to Visual Studio. The extension supports new templates, a task
    runner explorer, and the ability to bootstrap Cake files. **Cake Extension** for
    Visual Studio can be downloaded at **Visual Studio Market Place** ([https://marketplace.visualstudio.com/items?itemName=vs-publisher-1392591.CakeforVisualStudio](https://marketplace.visualstudio.com/items?itemName=vs-publisher-1392591.CakeforVisualStudio)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.vsix` file downloaded from the marketplace is essentially a `.zip` file.
    This file contains the contents of the Cake extensions to be installed in Visual
    Studio. When the downloaded `.vsix` file is run, it will install Cake support
    for Visual Studio 2015 and 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44266f77-d110-417f-802c-419f313badbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Cake templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After installing the extension, a **Cake template** will be added to the available
    options in Visual Studio when creating new projects. The extension will add four
    different Cake project templates types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cake Addin**: This is a project template for creating Cake Addin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cake Addin Unit Test Project**: This is the project template for creating
    unit tests for Cake Addin and it includes samples that serve as guidelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cake Addin Unit Test Project (empty)**: This is the project template for
    creating unit tests for Cake Addin but without the sample included'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cake Module**: This template is used to create the Cake module and it comes
    with samples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows the different Cake project templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/420aa26e-2963-4359-9099-9b91652d4bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Task Runner Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a Visual Studio solution that uses a Cake script for build automation, the
    Cake task runner will be triggered when the `build.cake` file is discovered. Cake
    Extension activates the **Task Runner Explorer** integration, which allows you
    to run Cake tasks with the bindings included directly in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the Task Runner Explorer, right-click the Cake Script (`build.cake`
    file) and select Task Runner Explorer from the displayed context menu; it should
    open the Task Runner Explorer with all the tasks available in the Cake script
    listed in the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90fca57a-1b4f-4e76-9030-19108af3d10f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, Task Runner Explorer might not be displayed in the context menu
    when you right-click the Cake Script. If so, click on View menu, select Other
    Windows, and select Task Runner Explorer to bring it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e34532d-c3e6-44fb-b723-90f17796f45a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a result of the Cake Extension installation, the Build menu of Visual Studio
    will now have an entry for Cake Build, which can be used to install the Cake config
    file, PowerShell bootstrapper, and Bash bootstrapper if they are not already configured
    in the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f14889e-ae82-4070-814c-8b7b4d65276e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now execute each task directly from Task Runner Explorer by double-clicking
    it or through right-clicking it and selecting Run. The progress of the task execution
    will be displayed on Task Runner Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5eee7748-df49-4e1b-af88-28164eb99a52.png)'
  prefs: []
  type: TYPE_IMG
- en: Syntax highlighting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cake extension adds a syntax highlighting feature to Visual Studio. This is
    a common feature of IDEs, where source code are presented in different formats,
    colors, and fonts. The source code highlighting is done based on defined groups,
    categories, and sections.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation of the extension, any file with the `.cake` extension
    can be opened in Visual Studio with complete task and syntax highlighting. There
    is currently no IntelliSense support for the `.cake` script files in Visual Studio;
    this feature is expected to come later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the syntax highlighting of a `build.cake` file
    in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91d2d1b8-f0c5-4f95-9dfb-35315eea0dde.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Cake tasks to build steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Task Runner Explorer to run build tasks written in Cake scripts is easier
    and more convenient. This is usually done through Cake Extension for Visual Studio
    or by directly invoking the Cake bootstrapper file. However, there is an alternative
    that is more efficient, which is to run the Cake build script using the TeamCity
    CI tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TeamCity build steps can be used to execute Cake scripts as part of the
    build steps execution processes. Let''s create a build step that executes the
    Cake script for the `LoanApplication` project by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Add Build Step to open a New Build Step window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Runner type, select PowerShell, since the Cake bootstrapper file will
    be invoked by PowerShell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give the build step a descriptive name in the text field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Script option, select File. This is because it is a `.ps1` file that
    will be invoked and not a direct PowerShell script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To select the Script file, click on the tree icon; this will load the available
    files and folders available in the project hosted on GitHub. Select the `build.ps1`
    file in the list of displayed files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the Save button to save the changes and create the build step:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/55758bfb-c70e-49d9-b120-f950f7425b29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The new build step should appear in the list of available build steps configured
    for the project in TeamCity. In the Parameters Description tab, information about
    the build step will be displayed showing the runner type and PowerShell file to
    be executed, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8d97cca-24a1-4f19-a4b8-dfd909135d89.png)'
  prefs: []
  type: TYPE_IMG
- en: CI with Visual Studio Team Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft Visual Studio Team Services** (**VSTS**) is the cloud version of
    the **Team Foundation Server** (**TFS**). It provides great features that allow
    developers to collaborate on software project development. Similar to TFS, it
    provides an easy and simplified server management experience with enhanced connectivity
    with remote sites.'
  prefs: []
  type: TYPE_NORMAL
- en: VSTS provides great experience for development teams practicing CI and **Continuous
    Delivery** (**CD**). It has support for Git repositories for source control, easy-to-understand
    reports, and customizable dashboards for monitoring the overall progress of software
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it has in-built features and tools for build and release management, planning
    and tracking projects, managing code defects, and issues using the *Kanban* and
    *Scrum* methods. It equally has an in-built wiki for information dissemination
    with a development team.
  prefs: []
  type: TYPE_NORMAL
- en: You connect to VSTS through the internet, using Microsoft accounts that need
    to have been created by the developers. However, development teams in an organization
    can configure VSTS authentication to work with **Azure Active Directory** (**Azure
    AD**), or set up Azure AD with security features, such as IP address restrictions
    and multi-factor authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project in VSTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with VSTS, navigate to [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/)
    to create a free account. You can sign in with a Microsoft account, if you have
    created one, or using your organization''s Active Directory authentication. You
    should be redirected to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47bff39b-f14e-4e83-9638-d90678de1ded.png)'
  prefs: []
  type: TYPE_IMG
- en: In VSTS, each account has it own customized URL, which contains a team project
    collection, for example, [https://packt.visualstudio.com](https://packt.visualstudio.com).
    You should specify the URL; in the field and select the Version control to use
    with the projects. VSTS currently supports Git and Team Foundation Version Control.
    Click continue to proceed with the account creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the account creation, click on the Projects menu to navigate to the Projects
    page, and then click on New Project to create a new project. This will load the
    project creation screen where you will specify the project name, description,
    the Version control to use, and the work item process. Click on the Create button
    to complete the project creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c166cb04-a50b-43a5-98a5-8cc789625d85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the project creation is completed, you will be presented with the getting
    started screen. The screen provides options of cloning existing projects or pushing
    an existing project to it. Let''s import the `LoanApplication` project we created
    earlier on GitHub. Click on the Import button to begin the import process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6116c3a9-7bff-45d9-9b4a-07044998d00d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the Import screen, specify the source type, and URL to the GitHub repository,
    and provide the GitHub login credentials. Click on the Import button to begin
    the import process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc0bb721-bf03-4094-b64d-2cfc5089e6bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be presented with a screen showing the import progress. The import
    process might take some time based on the size of the project to be imported.
    When the process completes, an Import successful message will be displayed on
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6aa3a2ed-e618-4606-a49b-2ba51a47b5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Click here to navigate to code view to view the files and folders
    imported by VSTS. The Files screen will present the available files and folders
    in the project with the commits and date details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edcc131d-73b7-4004-bfc3-7e2884dc8ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Cake into VSTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cake has a VSTS extension that allows you to run the Cake script directly from
    the VSTS build task relatively easily. With the extension installed into VSTS,
    the Cake script would not have to be run using PowerShell, like when running Cake
    scripts in TeamCity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Cake Build URL on Visual Studio Marketplace: [https://marketplace.visualstudio.com/items/cake-build.cake](https://marketplace.visualstudio.com/items/cake-build.cake).
    Click on the Get it free button to begin the installation of the Cake extension
    into VSTS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d34143d-ba22-49af-8745-47065a3df190.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the Get it free button will redirect to the VSTS Visual Studio | Marketplace
    integration page. On this page, select the account where you intend to install
    Cake and click the Install button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/947534b0-a686-443c-988a-be18ff447e97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the installation is successful, you will be presented with a message stating
    that all is set, similar to what is in the following screenshot. Click on Proceed
    to account button to redirect you to your VSTS account page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b070cbca-7837-40dd-9ccf-6833033490e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a build task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the successful installation of Cake into VSTS, you can proceed to configure
    how your code will be built and how the software will be deployed. VSTS provides
    easy approaches for building your source code and shipping your software.
  prefs: []
  type: TYPE_NORMAL
- en: To create a VSTS build that is powered by Cake, click on Build and Release and
    select the Builds submenu. This will load the build definition page; click the
    +New button on this page to begin the build-creation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screen will be displayed, where the repository is selected, see the following
    screenshot. The screen provides options of selecting the repository from different
    sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/544cb5b4-077e-422e-a531-7cc654d56472.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the repository source, click on the Continue button to load
    the template screen. On this screen, you can choose the build template to use
    for configuring the build. VSTS has featured templates for the various supported
    project types. Each template is configured with build steps related to the template
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e63b9142-6916-4a5f-8188-5cd14f45db18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down to the bottom of the template list or simply type `Empty` in the
    search box to select the Empty template. Hover the mouse over the template to
    activate the Apply button, and click on the button to proceed to the task creation
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ba64504-80ab-4d87-b810-054e4f38e9c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the Tasks screen loads, click on the + button to add a task to the build.
    Scroll through the list of displayed task templates to select Cake or use the
    search box to filter the list to Cake. Click the Add button to add the Cake task
    to the list of tasks available on the phase of the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d407e556-07ea-4bd5-876c-d191b8a749c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding the Cake task, click on the task to load the property screen.
    Click on the Browse button to select the `build.cake` file containing the build
    scripts for the `LoanApplication` project to be associated with the build task.
    You can modify the Display name and change the Target and Verbosity properties.
    Also, if there are arguments to be passed to the Cake script, you can supply them
    in the provided field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e46ff1de-a080-497a-ab65-c83afea895a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Save & queue menu and select Save & queue to ensure the build
    created will be queued on the hosted agent. This will load up the build definition
    and queue screen where you can specify the comment and the Agent queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e95a8519-58e3-4077-9499-e3ae3f19339a.png)'
  prefs: []
  type: TYPE_IMG
- en: A hosted agent is the software that runs the build job. Using a hosted agent
    is the simplest and easiest way for build execution. The hosted agent is managed
    by the VSTS team.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the build is queued successfully, you should get a notification on the screen
    showing the build number stating that the build has been queued:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/396d581f-b7cd-45c5-9965-d83a83a5448c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the build number to navigate to the build execution page. The hosted
    agent will process the queue and execute the configured tasks for the build in
    the queue. The build agent will show the progress of build execution. After the
    completion of the execution, the success or failure of the build will be reported:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ddaec63-edb0-41ea-96a6-8b422da65ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: VSTS offers great benefits and simplifies the CI and CD processes. It provides
    tools and features that allow different IDE to easily integrate with it and makes
    end-to-end development and project testing relatively easy.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the Cake build automation in detail. We walked
    through the steps of installing Cake and the Cake Bootstrapper. Later, we explored
    the process of writing Cake build scripts and task creation with sample tasks
    that can be used for various build activities.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we created a build script for the `LoanApplication` project, with the
    build script containing tasks to clean, restore, and build all projects in the
    solution and build the unit test projects contained in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: We later created a build step in TeamCity that executes the Cake script by using
    PowerShell as the runner type. Later in the chapter, we walked through setting
    up Microsoft Visual Studio Team Services, installing Cake into VSTS, and configuring
    a build step with the Cake task.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we will explore how to execute xUnit.net tests with Cake
    scripts. Later in the chapter, we will explore .NET Core versioning, .NET Core
    packaging, and metapackages. We will package the `LoanApplication` project for
    NuGet distribution.
  prefs: []
  type: TYPE_NORMAL
