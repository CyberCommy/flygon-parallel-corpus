- en: Chapter 1. Responsive Elements and Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Resizing an image using percent width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive images using the cookie and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your video respond to your screen width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizing an image using media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing your navigation with media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a responsive padding based on size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a CSS3 button glow for a loading element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The responsiveness website design and media is one of the most exciting things
    to happen to web development since ASCII art appeared on bulletin boards back
    when I was a school boy. The new cool features of HTML5, CSS3, and jQuery have
    brought new life to the old web in ways that have brought back the fun and really
    gets the Web audiences excited for using your applications. This chapter contains
    several recipes that will help you create responsive HTML elements and different
    media.
  prefs: []
  type: TYPE_NORMAL
- en: Some recipes are easy and some are more challenging. All of the code used for
    the **responsive web design** elements is provided inside the book, therefore
    nothing inside will be impossible to accomplish. Each and all of the responsive
    web design recipes will help you optimize your website's presentation to create
    an amazing responsive web experience for your audience no matter what device type
    or size you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing an image using percent width
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method relies on client-side coding for resizing a large image. It serves
    only one image to the client and asks it to render the image according to the
    size of the browser's window. This is usually the preferable method when you are
    confident that the clients have the bandwidth to download the image without causing
    the page to load slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First you will need an image. To find a high-quality image, use Google Image
    Search. A search for `robots`, for example, the search gives me 158,000,000 results,
    which is pretty good. However, what I really want is a large image, so I click
    on **Search tools**, and then click on **Any Size**, which I change to **Large**.
    I still have 4,960,000 images to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: The image should be resized to match the largest scale viewable. Open it in
    your image-editing software. If you don't have an image-editing software already,
    there are many free ones, go get one. Gimp is a powerful image-editing software
    and it's open source, or free to download. Go to [http://www.gimp.org](http://www.gimp.org)
    to get this powerful open source image-editing software.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have your image-editing software, open the image in it and change the
    image's width to 300px. Save your new image and then move or upload the image
    to your web directory.
  prefs: []
  type: TYPE_NORMAL
- en: Your HTML should contain your image and some text to demonstrate the responsive
    effect. If you do not have time to write your life story, you can go back to the
    Internet and get some sample text from an Ipsum generator. Go to [http://www.lipsum.com](http://www.lipsum.com)
    and generate a paragraph of Ipsum text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Your CSS should include a class for your paragraph and one for your image and
    an image wrapper. Float the paragraph to the left and give it a width of `60%`,
    and the image wrapper with a width of `40%`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This creates a fluid layout, but does not yet do anything to create a responsive
    image. The image will stay at a static width of 300px until you add the following
    CSS. Then, add a new class to the CSS for the image. Assign it a `max-width` value
    of `100%`. This allows the width to adjust to the browser width changes. Next,
    add a dynamic `height` property to the class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This creates an image that responds to the browser window's width with an optimized
    version of that image for the audience.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `responsive` property of the image CSS forces it to take 100 percent of
    its parent element. When the parent element''s width changes, the image changes
    to fill in that width. The `height: auto` property acts to preserve the aspect
    ratio of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Responsive images using the cookie and JavaScript* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making a responsive padding based on size* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive images using the cookie and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A responsive image's width can be delivered through complicated server logic.
    Sometimes because of the requirements you cannot achieve the desired results through
    the easiest method. The percent-width method relies on the client side for image
    resizing of a large image file. This method provides a server-side delivery of
    the properly sized image you request. It may reduce the server load and bandwidth
    and help you with long loading, if you are concerned with slow loading affecting
    the performance of your website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These methods require your server to perform some sort of logic function on
    it. Firstly, it requires PHP on your server. It also requires you to create three
    different sized versions of the image and serve them to the client as requested.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript is simple. It creates a cookie based on your device's screen
    dimensions. When the client makes a request to the server for an image, it fires
    the PHP code to deliver the appropriate image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on your server, create an `images` folder in the web directory and create
    a PHP file (`index.php`) with the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now with your image-editing software, open your large image and create two smaller
    versions of it. If the original version is 300px, then make the next two copies
    200px and 100px. Then, name them `robot.png`, `robot-med.png`, and `robot-low.png`
    respectively. Upload these three images into the `images` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, but not least, put the following HTML file in your server''s document
    root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the recipe in action in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While this method is limited to delivering a specific image for each screen
    size, and is not fluidly dynamic, it does provide the same functionality on the
    server side as a CSS media query. You can style the served image with CSS or animate
    it with JavaScript. It can be used with a combination of methods to provide responsive
    content.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this recipe was originally created by the clever folks at [http://www.html.it/articoli/responsive-images-con-i-cookie/](http://www.html.it/articoli/responsive-images-con-i-cookie/).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML file first creates a cookie describing your device's screen dimensions.
    When the image element calls the PHP file it works like an `include` statement
    in PHP. The PHP file first checks for the file to exist, then reads the cookie
    for the screen width, and delivers the appropriate-sized version of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Making your video respond to your screen width
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The streaming of video can also be responsive. You can easily embed an HTML5
    video in your page and make it responsive. The `video` tag easily supports using
    a percent width. However, it requires that you have the video source on your website's
    host. If you have this available, this is easy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, using a video-hosting site, such as YouTube or Vimeo, has many advantages
    over hosting it yourself. First, there is the bandwidth issue, you may have bandwidth
    or disk space limits on your hosting server. Additionally, video-hosting sites
    make the upload conversion to a usable web video surprisingly easy, compared to
    using only your own resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The video-hosting sites allow you to embed an iFrame or object code snippet
    in your page to stream the video on your site. This won't work inside the `video`
    tag. So, to make it responsive, there is a more complex, but still easy method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wrap the video-source snippet in an HTML containing the `div` element and give
    it a 50 to 60 percent padding on the bottom and relative positions. Then give
    its child element, the video iFrame object, a `100%` width and `100%` height,
    and an `absolute` position. This makes the iFrame object completely fill in the
    parent element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the HTML code that uses an `iframe` tag to get a video from
    Vimeo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the HTML code using the older YouTube object with markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Both video types use the same CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You might not want the video to take up the entire width of the page. In this
    case, you can limit the width of the video using `width` and `max-width`. Then,
    wrap the `video-wrap` element with the another `div` element and assign a fixed
    `width` value and `max-width:100%`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This recipe will work on all modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method is called Intrinsic Ratios for Videos, created by Thierry Koblentz
    on A List Apart. You wrap the video inside an element that has an intrinsic aspect
    ratio, and then give the video an absolute position. This locks the aspect ratio,
    while allowing the size to be fluid.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing an image using media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The media query is another useful and highly customizable method for responsive
    images. This is different than responsive fluid width achieved by the percent-width
    method. Your design may require some specific image widths for different screen
    size ranges and a fluid width would break your design.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method only requires one image, and makes the client's browser resize the
    image instead of the server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML code is simple, using the standard image tag, create an image element,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To start with a simple version, create a media query that will detect the browser
    window's size and deliver a larger image for browser screens larger than `1024px`,
    and a smaller image for smaller browser windows. First the media query, it looks
    for the media type `screen`, and then the screen size. When the media query is
    satisfied the browser will render the CSS inside the brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add a class to your image tag. The class will respond differently in different
    media queries, as shown in the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adding the CSS class to each media query with a different size will make the
    browser render the desired image size to each differently sized browser window.
    The media query can coexist with other CSS classes. Then, outside of the media
    queries, add a CSS class for the image with `height:auto`. This will work for
    both media queries with only adding one line of CSS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To make the image respond to multiple ranges you can combine the `max-width`
    and `min-width` media queries. To specify an image size for browser windows, sized
    between `1024px` and `1280px`, add a media query for screen, `1024px` as `min-width`,
    and `1280px` as `max-width`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can specify many different image sizes for many different browser window
    sizes with the media query method.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The media query of CSS3 gives your CSS logical conditions based on the browser's
    viewport properties, and can render different styles based on the browser's window
    properties. This recipe takes advantage of this by setting a different image width
    for many different browser's window sizes. Thus delivering a responsive image
    size, you can control with a high degree of granularity.
  prefs: []
  type: TYPE_NORMAL
- en: Changing your navigation with media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The media query can do more than just resizing images. You can use the media
    query to deliver a much more dynamic web page to your viewers. You can display
    a responsive menu based on different screen sizes using media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make a responsive menu system, using two different menus we will display
    a dynamic menu for three different browser window sizes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the smaller browser windows, and especially for mobile devices and tablets,
    create a simple `select` menu that only takes up a small amount of vertical space.
    This menu uses an HTML `form` element for the navigation options that fires a
    JavaScript code to load the new page on selection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For the larger browser window sizes, create a simple `ul` list element that
    can be styled through CSS. This menu will receive a different layout and look
    from the different media queries. This menu is added to the same page following
    the `select` menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To make the menu responsive, create a media query for the target browser window
    sizes. For browser windows smaller than `800px`, the CSS will display only the
    `select` form inside the `div` element with the `small-menu` class, for all larger
    browser windows, the CSS will display the `ul` list inside the `div` element with
    the `large-menu` class. This creates an effect where the page will shift between
    menus when the browser window crosses width of `801px`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For the larger screen sizes, you can use the same `ul` list and use the media
    query even further to deliver a different menu by simply switching out the CSS
    and using the same HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the medium-sized menu, use CSS to display the list items as a horizontal
    list, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This turns the list into a horizontal list. We want this version of the navigation
    to appear on the medium-sized browser windows. Place it inside the media query
    ranging between `801px` and `1024px`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To further utilize the responsive navigation elements in the best way possible,
    we want the menu list version to move to a different layout location when the
    screen's width changes. For the middle width, `801px` to `1024px`, the menu stays
    on top of the page and has a `100%` width. When the screen is wider than `1025px`,
    the menu will float to the left-hand side of its parent element. Add to the `801px`
    to `1024px` media query a `100%` width to the `large-menu` class, and to the `1025px`
    media query, add a `20%` width and a `float:left` value to the `large-menu` class.
  prefs: []
  type: TYPE_NORMAL
- en: To fill out the page we will also add a paragraph of text wrapped in a `div`
    element. You can go back to the Lorem Ipsum text generator to create filler text
    ([http://lipsum.com/](http://lipsum.com/)). In the medium-width media query give
    the element containing the paragraph a `100%` width. In the largest media query,
    give the element containing the paragraph a width of `80%` and float it to the
    right-hand side of its parent element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And your style should look as shown in following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result is a page with three different versions of the navigation.
    Your audience will be amazed when given an optimized version of the menu for each
    particular browser window size. You can see the navigation elements in all their
    glory in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each version of the navigation utilizes the media query CSS3 property to maximize
    the space available for the menu and the content. In the smallest window, below
    `1024px`, the navigation is packed neatly inside a `select` form element. The
    medium window, ranging from `1025px` to `1280px`, the navigation is inline and
    spans across the top of the page, and is followed by the content. Finally, in
    the widest browser widths, the menu floats on the left-hand side and takes only
    20 percent of the horizontal screen space, while the content is maximized on the
    remaining 80 percent (right-hand side) of the wide-browser window. This technique
    requires more planning and effort, but is well worth it to deliver the best possible
    viewing to your audience.
  prefs: []
  type: TYPE_NORMAL
- en: Making a responsive padding based on size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complement a responsive width image element, relative padding can be added.
    With a static width padding, the image padding may appear too thick in smaller
    browser windows and overcrowd any other elements nearby, or may push the image
    off the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good place to start is with some understanding of the calculation of the box
    model properties. The total width an object takes is its actual width plus its
    padding, border, and margin on both sides, or *2 x (margin + border + padding)
    + content = total width*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For an image that is 200px wide in its normal non-responsive state, your typical
    padding may be 8px, therefore using the previous box model, the formula can be
    framed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 x ( 0 + 0 + 8px ) + 200px = 216px`'
  prefs: []
  type: TYPE_NORMAL
- en: To find the percentage of padding, divide the padding by the total width, `8
    / 216 = 0.037%` rounded to `4%`.
  prefs: []
  type: TYPE_NORMAL
- en: We created this CSS and HTML earlier when we created the responsive percent-width
    image. Add to the image class a padding of `4%`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To help you see the actual padding width change as you change the browser window''s
    size, add a background color (`background-color: #cccccc;`) to your image CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The image padding set at 100 percent will stick to the edge of its parent element.
    As the parent element size changes, the image padding adjusts accordingly. If
    you have done your box model math properly, your layout will successfully respond
    to your browser window's changing width.
  prefs: []
  type: TYPE_NORMAL
- en: Making a CSS3 button glow for a loading element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your website, like many others, may cater to impatient people. If your site
    has a submitable form, your users may find themselves clicking the "submit" button
    a number of times impatiently if your page does not load the new content quick
    enough. This can be a problem when it causes multiple form submissions with the
    same data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can stop this behavior by adding some simple visual cues that tell the user
    something is happening behind the scenes and to be a little patient. If it's a
    little bit flashy, it might even bring a little sunshine into their otherwise
    hurried lives. This recipe does not require any images, we are going to create
    a handsome gradient submit button using CSS only. You may want to pause and go
    get a cup of coffee, as this is the longest recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can start by creating a form with some text boxes and a submit button. Then,
    make the form really cool, use the HTML5 placeholder property for the label. Even
    with the placeholders, the form is pretty boring.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is not yet supported in Internet Explorer 9.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding CSS properties we can start giving the button some life:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The button can become even more shiny when we add a CSS3 gradient effect. To
    accomplish this, there must be a different line of CSS for each browser rendering
    engine: Opera, Internet Explorer, WebKit (Chrome and Safari), and Firefox. You
    can add as many gradient shifts as you like, simply by adding a `color` phase
    and the `%` location from the top, each shift separated by a comma, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This effect is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another effect can be added to the button by CSS, the `hover` effect. With
    this property, when the pointer moves over the button, it looks like it is being
    pressed in. The following CSS will help you add that dark border to the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using CSS3 Box Shadows and jQuery we can make a simple animation of a pulsing
    halo around the **Submit** button after you pushed it. Create an event listener
    with jQuery that listens for the button's `click` event, and on that `click` event
    a series of class changes on the form button element. The `partial-fade` class
    will be added by the script to the button element.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Don''t forget to add a link in your `head` tag to the jQuery source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, insert the following script after the form closes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To finish making the button glow when you click it, add the new class `partial-fade`,
    to your CSS file and give it a CSS3 Box Shadow Property, and change the border
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the **Submit** button will give a flash of blue when pressed. The following
    screenshot shows the final product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whew! This button was a lot of work for such a small detail, but the details
    like this will really help make a great-looking website. This happens to be one
    of my favorite details to surprise my audience with.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CSS3 background gradient is an easy way to make a great-looking button consistently
    across browsers. The gradient is complicated and each browser currently requires
    its own line for CSS. You can control the gradient breakpoints by adding the percentage
    and colors manually. Adding box shadow, borders, and jQuery make fun effects on
    the button when the event is fired.
  prefs: []
  type: TYPE_NORMAL
