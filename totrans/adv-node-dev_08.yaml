- en: The Join Page and Passing Room Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked into styling our chat page more like a real
    web application and less like an unstyled HTML page. In this chapter, we'll continue
    our discussion about the chat page and look into join page and passing room data.
    We are going to update our HTML file and add form-fields for the chat page.
  prefs: []
  type: TYPE_NORMAL
- en: We'll take the name and room values and pass them from the client to the server
    so the server can keep track of who's in which room and we can set up a private
    communication. We'll also create test cases for the validation of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a join page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal for this section is to add a join page like the one you see in the
    following screenshot, where you provide a name and you provide the room name you
    want to join.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll then be able to join a given room, talk to anybody else in that room
    and you won''t be able to communicate with other people in other rooms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13a6462b-6214-4811-b331-1b509ca069cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that when you click on this form, you''re going to click on Join and
    we''re going to have some custom information passed into the URL into the chat
    application as we know it, the one that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15da8e1e-84ed-4ddf-8efb-59d94f548451.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating the HTML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now in order to get that done, the first thing we're going to do is tweak the
    current HTML file. Right now, `index.html` is going to load first. We actually
    don't want that to be the case, when we go to `localhost:3000` we want to show
    our new join page. So what I'm going to do instead is move this page by renaming
    it. We're going to rename `index.html` to `chat.html`. I'm going to do the exact
    same thing with `index.js`, renaming it to `chat.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, I''m going to update the reference in the script where
    we load in `index.js`; instead, we''ll load in `chat.js`. Now that we have this
    in place; we no longer have an HTML page that''s going to load when you visit
    the site. If I try to go to `localhost:3000`, we''re going to get an error saying
    we cannot get that route, nothing''s coming back from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eccf88c4-5aa8-4a28-807b-e41bfc8705c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix this, we''re going to create our brand new page as `index.html`. This
    is going to be the one that loads when a user visits the app. Now we''ll start
    off with a very basic template specifying things we''ve done before like `DOCTYPE`,
    setting it equal to HTML5, and then we''re going to add our `html` tag. Inside
    here, we can then add our `head` and `body` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding the head tag in the HTML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to add my `head` tag first, and then I can go ahead and add my `body`
    tag. We''ll then kick things off by adding a few tags into the head such as `meta`,
    so we can set our charset, and it is going to have a value of `utf-8`. We''re
    also going to set a few other properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to set a `title` tag, this is going to show up inside of the tab
    as the tab''s `title`, we can set ours to `Join` then we can add a space, a vertical
    line by using `|`, and the name of our app, something like `ChatApp`: This will
    show up any tab title. Then we can go ahead and link in our style sheet just like
    we did for `chat.html`. I''m going to grab that style sheet reference from `chat.html`,
    copy it into the head:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to add a `title` tag to `chat.html`. In `chat.html` we can specify
    title, just like we did over inside `index.html`. We can give this one a page
    of `Chat`, with a bar surrounded by spaces, and we''re also going to give it the
    same app name, `ChatApp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have this in place there is one more thing I want to do before we
    start updating `body`, this is set a `viewport` tag. The `viewport` tags let you
    specify certain things about how your site should be rendered. The `viewport`
    tag I'm about to add is going to make our website display much better on mobile.
    Instead of being really zoomed out, it's going to fit to the width of your phone,
    tablet, or any other device.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to copy this tag from `index.html` to `chat.html` when we're done,
    but for now we'll kick things off by adding a `meta` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time around instead of specifying charset like we''ve done in the past,
    we''re going to give it a name equal to `viewport`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and add a few options about what we want to do to that
    `viewport`. All of this is going to happen inside content. This is going to be
    a comma-separated list of key-value pairs, for example is `width` will be `device-width`.
    This tells your browser to use the device''s `width` as the web page''s `width`,
    and then we can add a comma, a space, and specify our next key-value pair. I''m
    going to use `initial-scale` and set that equal to `1`. This is going to scale
    the website appropriately so it doesn''t look all zoomed out, and finally `user-scalable` will
    be set equal to `no`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have styles in place to make the text bigger and to make sure that a user
    can always see everything, so there's no reason to give users the ability to scale.
    Now as mentioned, we're going to take this `meta` tag, copy it to the clipboard,
    and add it for `chat.html` as well. Now that we have our `head` tags, set up for
    `index.html` we can move on to the body.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the body tag in the HTML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to be using a similar set of classes designed to work with this
    page. To kick things off on, the `body` tags, we''re going to add a class of `centered-form`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to center that form in the screen and give the entire website
    that blue background with the gradient. Next up, we can go ahead and provide the
    little box. This is going to be the centered white box that has our form in it.
    That''s going to be via `div` and we''re going to give this `div` a class. We''re
    going to set that class equal to, inside quotes, `centered-form__form`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have these two classes in place we are ready to move on actually
    adding some of the fields that are going to go in that white box, starting with
    that title, `Chat`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the form-fields for the chat page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this, we''re going to create a few divs. They''re all going to look identical
    so we''ll make them once and duplicate them. We''re going to add a class equal
    to `form-field`. Now we''ll use this four times: title, name, room name, and button.
    In order to get that done, what we''re going to do is simply copy the line and
    paste it four times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all of this needs to go inside a `form` tag. The whole goal of this page
    is to take that data and submit it, redirecting the user to the chat page where
    we can then bring them into a specific chat room using the name they provided.
    That means we want to wrap these `form` fields inside a `form` tag, by opening
    it just above the `div` tags and closing it down below, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now previously we saw the default behavior for a `form` tag is to reload the
    current page, posting the data as a query string. What we're going to do instead
    is specify an `action` attribute which, lets us customize which page to go to.
    In this case, we're going to go to `/chat.html`, the page that we set up just
    now. This means that when someone's done filling out the form field, they're going
    to get redirected to the `chat` page and the data down below will get passed along
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the title `div` is easy, what we''re going to do is add an `h3` tag with
    whatever title you want; you could say `Chat` or `Join a Chat`. And then, I can
    go ahead and close my `h3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I can move on to the next form field which is going to be the display
    name. I am going to use a label, a label is going to describe a field, this one
    will be `Display name` so we''ll open and close the `label` tag like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we can add an `input`. We''re going to add an `input` just like we
    did for the `input` on our message `form`. We''re going to specify `type` equal
    to `text`. We want the user to be able to enter some text. We''re also going to
    give it a `name` equal to `name`. We are going to use `autofocus`; once again,
    this is going to make sure that when a user first visits the app, their cursor
    is placed inside the Name field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up is the field for the room name, which is going to look pretty similar
    to the one above, we are going to start with `label` once again. This `label`
    is going to be a string, something like `Room name`, and we''re also going to
    add an input so the user can specify the room name, `type="text"`, and the `name`
    will equal `room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There is no need for `autofocus` on this one since we already have an `autofocus`
    input in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have this in place, we can go ahead and fill out the final `form`
    field, which is going to be the Submit button for our form by simply creating
    the `button` tag, and giving it a text value. We can have ours set to `Join`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place our `index.html` file is actually done. We can load it over
    inside the browser. Our server had automatically restarted, so a quick refresh
    should show our page Join a Chat app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26257300-edb9-4e62-81dc-4055bf712bf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The goal is to set this up to take a name like `Andrew`, and a room name like
    `Node Course Students`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0ae6d89-5856-48e0-8c54-f6b816faf0c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You click Join and it joins you into this room with this name. Now currently,
    all it''s going to do is redirect us to `chat.html`, but as you''ll see it does
    indeed pass the data along:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4023c7d9-d23b-4a47-b57c-8548e94102a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we have `name` equal to `Andrew` and we have `room` name equal to `Node
    Course Students`, just like we specified over inside of `index.html`. With this
    in place, we are now ready to start talking about how we can join specific rooms
    inside `Socket.io`, making sure the events we emit only go to other people connected
    to that room. We have the stuff in place to get this done, so we're going to get
    started with all of that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: For now we have a pretty great-looking join page, this is where we can join
    a room. Let's wrap this up with a commit, committing our changes.
  prefs: []
  type: TYPE_NORMAL
- en: Committing the changes in index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If I run `git status` you''re going to see that we have a modified file `index.html`,
    and it also thinks we deleted `index.js`, although we add something down below,
    when we run `git add .` and rerun `git status` it''s going to understand exactly
    what happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a6673e4-c139-4351-9b90-e8ee157367b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can see we copied `index.html` to `chat.html`, we then modified `index.html`
    and renamed `index.js` to `chat.js`, which is exactly what we did. I''m going
    to go ahead and actually make the commit using `git commit` with the `-m` flag,
    `Add join page that submits to chat.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can then make the commit, push it up to GitHub, and that is it for this one.
  prefs: []
  type: TYPE_NORMAL
- en: Passing room data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last section, we created a little chat page. We can type in a name like
    `Andrew` and a room like `Node Course`, and we can go ahead and join that room:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cccfec12-a277-45fc-a5aa-c258db76d241.png)'
  prefs: []
  type: TYPE_IMG
- en: Now when we do, we're brought to the chat page, but nothing is actually happening
    behind the scenes to use any of these values, they're showing up in the URL but
    that's about it. The goal in this section is to take these values and pass them
    from the client to the server so the server can keep track of who's in which room,
    and we can set up that private communication. Currently, if user one is in the
    Node course and user two is in the React course, both of them are going to be
    able to talk to each other because this data is not used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data to the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now the first step in getting this data to the server is figuring out where
    it lives; this actually lives in the `location` object. We're going to use the
    console to just play around with it.
  prefs: []
  type: TYPE_NORMAL
- en: The `location` is a global object that's provided by your browser, and on it
    we have a whole bunch of really interesting things like `host`, `hostname`, `href`,
    `origin`, and `pathname`. What we're going to be using is `search`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, `search` is the query string, everything
    from the question mark to the end of the word course, what I have highlighted
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28150972-f55b-4e60-8e14-94e3d04d190f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The goal is to get this into a more useful format. Right now we have just the
    string, we''re going to need to parse this. We''re actually going to use a library
    to do that now that we know where it lives. We can access `window.location.search`
    to get this value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21e7de6c-5955-45b2-8db4-22cf6e39d7b8.png)'
  prefs: []
  type: TYPE_IMG
- en: I'm adding window upfront the `location.search` just to make sure we're accessing
    the global location property as opposed to a local variable, which may or may
    not exist called location. This is going to be the most foolproof way to fetch
    the query string.
  prefs: []
  type: TYPE_NORMAL
- en: The params and deparams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now the next thing we''re going to do is talk about params and deparams. Inside
    jQuery, we actually have access to a function, we can access it by calling `jQuery.param`,
    and we can pass in an object. We''ll set `name` equal to your first name, I''m
    going to set it equal to `Andrew`, and we''ll set `age` equal to something like
    `25`. Now when I run this statement, jQuery is going to take that object and convert
    it into a set of parameters that could be added on to a URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9709f06-0212-47f8-9d94-6351292dbf53.png)'
  prefs: []
  type: TYPE_IMG
- en: Here you can see we have `name=Andrew` and `age=25`. This is similar to the
    format we had up in the URL, minus the question mark. All we'd have to do is add
    one at to the beginning and we would have a complete search string. Now the problem
    with jQuery is that it cannot do it in the other direction; meaning it cannot
    take the string and convert it back into an object, which is kind of what we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to be able to access this data easily, currently that is just not possible.
    There are also quirks like encoding and `+` characters. This was originally a
    space but it got converted to `a +` by the form. We''re going to want to decode
    all of that too. Luckily, there is a simple library we can include and we can
    grab it by going to [links.mead.io/deparam](https://gist.github.com/andrewjmead/b71e03d8df237983285892f9a265d401):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d67ce9e6-0fa2-4edc-96dc-4752a4bb593f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `param` takes your object and returns the string, `deparam` takes the string,
    and returns an object. Here in the preceding screenshot, we have a simple Gist.
    It''s a really short function that we''re going to be adding to our project. Let''s
    go to the Raw version of this page. We''re going to save it using right-click, Save
    as, and we''re going to add it right into a project. We have our `public`, `js`,
    and `libs` folder. Right in the `libs` folder, we''ll simply save it as `deparam.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc454a75-b0c3-4253-967e-b46b6e778649.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now once we have that file saved, we can actually include it. This is going
    to make it much easier to work with the search data. Inside Atom, I''m going to
    head over to `chat.html`. We''re not going to need this in `index.html` but inside, `chat.html`
    we are going to load it in down below the `mustache.js` script. We''ll make a
    new `script` tag, and we''re going to go ahead and set the `src` equal to, inside
    quotes, `/js/libs/deparam.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we save `chat.html` and head back into the browser, we can actually
    refresh the page and play around with this in the console before ever adding it
    to our code. We now have access to `jQuery.deparam`. If I run this statement,
    we''re going to get our function back, confirming that it does exist, and all
    we need to do is pass in the string, this is the search string, `window.location.search`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/409b3993-4bb1-4699-865c-eb4f4f12c408.png)'
  prefs: []
  type: TYPE_IMG
- en: So we're taking that search string, passing it into `deparam`, and the resulting
    object is exactly what we want. We have a `name` property equal to `Andrew` and
    we have a `room` property equal to `Node Course`. All those special characters
    like the `&` symbol, the question mark, and the `+` character, have all been removed
    and replaced with this nicely formatted object. This is what we're going to use
    inside of our client-side code to get the values and pass them to the server,
    which is what we're going to do right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside Atom this is all going to happen in `chat.js`. In this file, we have
    our `connect` callback function. This happens when we first connect and right
    away when we connect, we''re going to emit an event that''s going to start the
    process of joining a room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now `Socket.io` has built-in support for the idea of rooms, creating the little
    isolated areas where only certain people can emit and listen to events. All of
    that gets set up on the server though, which means right in this function. When
    we connect to the server, all we're going to do is emit an event called join;
    this is going to start the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, let''s go ahead and grab our parameters, the ones that we just learned
    how to `deparam` over inside the console, `var params = jQuery.deparam`, and we''re
    going to pass in `window.location.search`, just like we did before in the Developers
    Console. Now we have our object and we can go ahead and emit an event. Next, we''re
    going to call `socket.emit` and the event that we''re going to emit will be a
    custom event we''ll be creating, it''s going to be called `join`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to get emitted from the client and it''s going to get listened
    to by the server. When the server hears this `join` event, it''s going to go through
    the process of setting up the room. Now not all of that''s going to happen in
    this section, but we can get started. The data that we''re going to send across
    is just going to be the `params` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It may or may not include everything we need. We'll be doing a little validation
    on the server, and last but not least, we are going to set up acknowledgments
    for this one.
  prefs: []
  type: TYPE_NORMAL
- en: 'If someone does join the room we want to know that. We also want to if someone
    doesn''t. This is because if they don''t join the room, it''s most likely because
    they provided invalid data, which means that we want to kick them back to that
    join form forcing them to provide both a name and a room name. We can go ahead
    and set up our `function`, and this `function` could take an argument. We''re
    going to be setting it up ourselves, so we can decide if it takes an argument,
    and it definitely does make sense for it to take one. In this case, we''re going
    to go ahead and provide any errors. If there is an error, that''s fine we''ll
    be able to handle it. If there is no error, that''s great too; we''ll go ahead
    and do something else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the function, we can do something if an error exists using `if (err)`. We
    can go ahead and add an `else` clause too; if there is no error we want to do
    a different thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now we're not going to fill this out at the moment, what we're going to do at
    this point in time is go ahead and actually set up the listener inside `server.js`
    for join.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up listener in server.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That is going to happen over in `server.js`. We can make that the very first
    event just above `createMessage`, `socket.on(''join'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now as we already know we are going to be taking some arguments in the callback
    function. We''re going to get our parameters. We can call these `params`, and
    get that `callback` function since we are setting up acknowledgments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `join` function, the first thing that we want to do is actually validate
    the data that came through, both the name and the room. These are both potential
    properties on `params`. All we really care is that they are non-empty strings;
    meaning that it's not just a space, not just an empty string, and not a non-string
    type like a number or an object.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the isRealString function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to set up this validation, which we're going to be doing in other places
    too like `createMessage`, we're going to create a separate `utils` file. In here,
    I'm going to call this `validation.js` and this is where we can put some validators
    that we're going to need throughout the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section we''re going to create one called `isRealString`. This is going
    to verify that a value is of a type string and that it''s not just a bunch of
    spaces; it actually has real characters inside it. We''re going to set this equal
    to a function that takes a string. This is going to be the string we validate,
    and it''s actually not going to be terribly difficult. We''re going to `return`
    and we''re going to `return` the following conditions. It''ll return `true` if
    it is a real string and `false` if it''s not. First up, we''ll use `typeof`. This
    is going to get the type of the string variable, this needs to equal, in quotes,
    `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now currently, this is going to return `true` for any string and `false` for
    any non-string value, but it does not take into account the spaces. What we''re
    going to do is use the `trim` method available on strings which takes a string
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'and converts it into a string like this, trimming all whitespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you pass in a string like, this it''s going to convert it into a string
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'trimming leading and trailing whitespace only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s not going to trim any interior spacing, so if I have `f` space `r` like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'I am still going to get that space between `f` and `r`, but all of the leading
    and trailing spaces are removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to use that like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After we call `trim`, we do need a length greater than `0`, otherwise we have
    an empty string. This is going to be our `isRealString` function, and we''re going
    to go ahead and export it real quickly, `module.exports`, setting it equal to
    an object where we set `isRealString` equal to the `isRealString` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now I can go ahead and save this file. I'm also going to go ahead and inside
    `server.js` call the function.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the isRealString function in server.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to import the `isRealString` function first before we can actually
    validate those two properties. We can make a `const` just below the `generateMessage`
    constant and use ES6 destructuring to grab `isRealString`, and we''re going to
    grab it using `require`. We require a local file `./`. It''s in that `utils` directory
    and the file name is `validation`, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can call `isRealString` inside `join`; that''s exactly what we''re going
    to do. We''re going to check if either of them are not real strings. If one or
    more are not real strings, we''re going to call the `callback` passing in the
    error. We''ll add `if (params.name)` as the first one and pass that into `isRealString(params.name)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to check if it''s not a real string. So we''re going to flip that,
    or (`||`), and then we''re going to check if the other property, the room name,
    is not a real string. Now inside the query string, the room name property is called
    `room`. So if it''s not `isRealString` passing in the correct value `params.room`,
    then that''s going to be an error too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can handle that error by adding error handler function. For this,
    I''m going to do is call the `callback` with a little string message, `Name and
    room name are required`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if that''s not the case we do still want to call the `callback` but we
    don''t want to pass any arguments in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Because remember that first argument we set that up to be the error argument
    in `chat.js`, and if both things are valid, we do not want to pass any errors
    back. Over inside `server.js`, we now have some pretty basic validation set up,
    and before we actually do anything in here, which is going to be in the upcoming
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding error handler case in chat.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to do is add a few cases right here, in `chat.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is an error that''s a pretty big problem, and we''re going to want to
    send the user back to the root of the application by changing one of the properties
    under location, `window.location.href`. Here we can manipulate which page the
    user''s on, essentially we''re going to be redirecting them back to that root
    page by having the forward slash (`/`) value set to the `href` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now before we do that we can do whatever we like, maybe we want to display
    a modal using our framework of choice, whether it''s Foundation, Bootstrap, or
    anything else. To keep things simple here, all we''re going to do is call `alert`
    passing in the error, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'So a user will see a little alert box, they''ll then click on OK, and they''ll
    be redirected back to the home page. Now if there is no error, all we''re going
    to do for the moment is use `console.log` to print `No error`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, let''s go ahead and test that things are working as expected.
    Over inside the browser I''m going to give my current page a refresh. Now here,
    we do have a valid name and a valid room, so when I click on the Refresh button,
    we should see No error printing in the console, and that''s exactly what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84b02b1b-6c69-4845-a736-442b7d24d817.png)'
  prefs: []
  type: TYPE_IMG
- en: The data that we passed through was indeed valid. Now we can go ahead and go
    to the root of the page and try some invalid data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, all I''m going to do is click on Join without providing
    either value. This is going to bring us to the chat app and you can see we get
    our little alert box, Name and room name are required. We click on OK which is
    all we can do, and we''re immediately redirected back to Join a Chat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2530d755-cad7-4355-b267-a8fb0c7a11da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I do provide some valid data, like a display name of `Mike` and a room name
    of `Developers`, we are going to be brought to the chat page and we''ll see no
    error shows up, which is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82923f89-75b4-43d5-83ac-fce4dfcc6858.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now one last test real quick! If we have just spaces, I''m going to change
    the room name to a bunch of spaces. Now we click on Join, we are going to still
    get the error even though we do have a bunch of plus signs for spaces up above
    in the URL space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca5407a8-f054-496a-9207-319cfef805c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are going to be swapped out for spaces when we run our code through `deparam`
    and the error is still going to occur. Now that we have this in place, we are
    in a pretty good spot to actually integrate rooms in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding test cases for the new validation function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to do would be to write some test cases for the brand new validation
    function we just created, which means we're going to make a new test file called
    `validation.test.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside there, we''re going to load in an expect making a variable called `expect`.
    We could also make it a constant. We''re going to set that equal to `require`
    and we''re going to `require` the `expect` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we''re going to load in `RealString`, import `isRealString`, and we''re
    going to add three test cases. The `describe` blocks should be something like
    `isRealString`, and the three test cases will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one, `should reject non-string` values, in this case I want you to
    pass a number object or anything else into the `isRealString` function, you should
    get false back.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next up, `should reject strings with only spaces`. If I have a string that's
    just a bunch of spaces that should not pass the `isRealString` function validation.
    That's also going to fail; trim is going to remove all of those spaces and the
    length will be 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last up, `should allow strings with non-space characters`. In this case you
    can pass in whatever you like, some sort of valid value. You could have space
    space LOTR for Lord of the Rings, the beginning spaces are going to get trimmed
    out so it's not important. You could add the letter a, any valid string is going
    to pass this one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go ahead and set up those three test cases, making sure the right Boolean value
    comes back from `isRealString`. When you're done run `npm test` from the Terminal,
    make sure all of your three tests passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do is import `isRealString` by making a variable.
    We can make this a constant or a variable, I''m going to go with a constant, and
    we''re going to use ES6 destructuring to grab `isRealString`, and we''re going
    to grab it off of the require call to our local file, `./validation`, which is
    just alongside the current file `validation.test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now we can add the things we have down below starting with our `describe` block.
  prefs: []
  type: TYPE_NORMAL
- en: Test case 1 – should reject non-string values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to `describe` the `isRealString` function. Then we can add our
    arrow function (`=>`), and inside there, we can go ahead and provide our individual
    test cases, `it`, and I''m going to copy it directly, `should reject non-string
    values`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to be a synchronous test, so there''s no reason to add the `done`
    argument. Inside here, we''re going to pass in a non-string value. I''ll make
    a variable called response, which will store the return result from `isRealString`.
    We''re going to call it passing in some sort of non-string value. Anything would
    work, I''m going to use a number, `98`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now down below we can use expect to assert that the response variable equals
    false, which should be the case. We''re expecting response `toBe(false)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Test case 2 – should reject string with only spaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, `it(''should reject string with only spaces'')`. I''m going to copy
    that text exactly, pasting it inside of our `it` name. Then we can go ahead and
    add our arrow function (`=>`), and for this case what we''re going to do is create
    a variable called response, passing in some sort of string with just spaces. We''re
    still going to be calling `isRealString`, and we''ll pass in a bunch of spaces.
    Now we''re going to assert that response is `false`, `expect(res).toBe(false)`,
    which it should be because we do not have a valid string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Test case 3 – should allow strings with non-space characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, last test case, `it (''should allow strings with non-space characters'')`.
    I''m going to paste that in the `it` function and then we can actually set up
    the test case. You could have provided a bunch of different values as the argument
    to `isRealString`. We''re still going to make that response variable. We''re still
    going to call `isRealString`, but right here, I''m going to choose to pass in
    `('' Andrew '')`, which is valid. The `trim` function is going to remove those
    spaces in the validation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Down below we can `expect` that response is true, `toBe(true)`. That''s all
    you needed to do, we can go ahead and remove the comments since we have the actual
    code in place, and the last thing to do is run the test case to make sure our
    code actually works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The `npm test` is going to get that done. This is going to run our test suite
    and right here we have our three test cases for `isRealString`, and all of them
    are passing, which is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2074612-7fc1-4cb8-b48c-2a1ea811e3a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now as I mentioned you could pretty much pass anything in here. The letter `D`
    would work as a valid room name or username. If I rerun the test suite with `D`
    as my string, the test case still passes. It doesn't really matter what you passed
    into here as long as it had a real non-space character. Now that we have this
    in place we are done. We're not going to make a commit just yet we're kind of
    halfway through a feature, we'll commit once we have a little more in place.
  prefs: []
  type: TYPE_NORMAL
- en: Socket.io rooms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we set up an event listener on the server listening for
    that join event, and we did some validation. This at least makes sure we have
    the `name` and the `room` name, both of which are going to be required.
  prefs: []
  type: TYPE_NORMAL
- en: The real next step is to actually use the `Socket.io` library to join rooms,
    and this is not going to let us just join rooms but it's also going to give us
    a different set of methods. We can choose to `emit` to everybody connected to
    the server or just to people in specific rooms, and that's exactly what we're
    going to be doing. We want to `emit` chat messages just to other people who are
    also in the `room`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in order to join, what you do is you call `socket.join`. The `socket.join`
    takes a string `name`, and we have that `name` under `params.room`, just like
    we used in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: We now have a special place for people to talk who are in the same `room`. Now
    this is a string so it would be something like `The Office Fans`, or anything
    else, and you have to join by the string value. Right now, though, `params.room`
    will get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can also choose to leave a room using `socket.leave`. The `socket.leave`,
    leaving the room by its name, `The Office Fans` for example, is going to kick
    you out of that group and you''re not going to get those private messages, the
    messages sent specifically to the group. Now the next step in the process is to
    figure out how to actually take advantage of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Targeting the specific user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding the user to the room is great, but if we can't target them specifically
    and others in that room, it's not very useful. Well it turns out we have a couple
    of ways to do just that. In order to illustrate how we're going to target specific
    users, let's look at all the ways we've emitted events on the server.
  prefs: []
  type: TYPE_NORMAL
- en: We've used `io.emit`. This emits it to every single connected user, and that's
    currently what we're doing for things like `createMessage`. A new message comes
    in and we emit it to everyone connected. Next up, we have used `socket.broadcast.emit`.
    We use that with `newMessage` and as we know this sends the message to everyone
    connected to the socket server except for the current user. The last one we used
    inside `server.js` is `socket.emit`. This emits an event specifically to one user.
    Now we can take these events and we can convert them over to their room counterpart.
    In order to send it to a specific room, we're going to be chaining on the to method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to look a little something like this. Let''s say we want to emit
    an event to every single person connected to a room, and let''s just call this
    room `The Office Fans` for the moment. To do that, we''re going to call `io.to`.
    The `.to` is a method and it takes the room name exactly as it was provided in
    the call to join. In our case, that is going to be `The Office Fans`, just like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we would chain on a call to `emit`. This is going to send an event to
    everybody connected to a room, `The Office Fans`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can also do the same thing with broadcast, meaning that we want to send
    an event to everybody in a room except for the current user. In order to do that
    we would use `socket.broadcast.to`. This works just like the to the method defined
    previously, `The Office Fans` would get passed in, and on here we would call `emit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This is going to send an event to everybody in `The Office Fans` room except
    for the current user, the one who's actually calling `socket.broadcast`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the last way we''ve used `emit` is `socket.emit`. We''re still going to
    use that when we want to send something to a specific user. There is no reason
    to target them by rooms since we just want to target them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This are the two ways we''re going to emit to specific rooms. Now in order
    to actually start wiring some of that up what we can do is take the following
    two calls and we can move them down inside `join`, meaning that we''re not going
    to tell someone that someone joined a room until they''ve actually joined the
    room by calling `join`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re also not going to tell a user that they have joined a room until the
    call has actually gone through. It might not go through if the data, like the
    name or the room name, are invalid. Let''s take both of these calls and cut them
    out, and we''re just going to take them as they are and move them down into join.
    For the moment we can move them down below our comments; I''m going to leave the
    comments in place so you have these as a reference down the line. Now right below
    the `socket.join` line, we call `socket.emit` and we `emit` a new message, `Welcome
    to the chat app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: And this line it is actually going to stay the same, we still just want to target
    any specific user.
  prefs: []
  type: TYPE_NORMAL
- en: The next line is going to change though. Instead of broadcasting to every connected
    user, we're going to broadcast to just users inside the room we just joined, using
    `socket.broadcast.to`, passing in `params.room`. We're going to emit a new message
    and this is going to let everyone know that a new user has joined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of new user, we can actually specify the name. We have access to that.
    Right here, I''m going to use a template string injecting the name first, `params.name`,
    followed by `has joined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Testing the specific user set up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have this in place we can actually test things out. What we''re
    going to do is join a room, then we''re going to have a second user join, and
    we should see the message right there: **Their name has joined**. We''re also
    going to add a third user into the mix to make sure it''s actually sending the
    message to just one room.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Over inside the browser, let''s get started by creating a user called `User
    One`. This user is going to join a room called uppercase `A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbc9d5a9-d57d-4e30-b99c-0f152a558b90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we''re going to go ahead and create a second user by going to `localhost:3000`.
    This one can be called `User Two` and we''re going to join room `B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88fb428b-e5e2-4724-b10f-f7f279403992.png)'
  prefs: []
  type: TYPE_IMG
- en: And if I go between room `A` and room `B` you can see that no join message printed
    because we haven't joined the same room. We're on completely separate rooms so
    we should not be getting those messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up we''re going to add a third user, this user is also going to join room
    `A`, `User Three`, room name, room `A`, and we are going to hit Join. When we
    hit Join, we can go through the tabs and see what data we get back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93e024a2-cb7e-4fe9-bec3-1688522c665e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we get Welcome to the chat app as expected. This is only happening because
    we''ve successfully joined the room:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7b1515a-4cf7-4cb2-b8f2-46eca485cc81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then in the second tab we get Welcome to the chat app too. There is no message
    greeting that other user because the other user joined room `A`, and the first
    tab has our User Three has joined message. This is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11002b86-87b7-48e9-81fc-3af3a987f7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Both users are in room `A` so this user should get a message when a new user
    joins, and we've injected the name right here as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into adding a chat page. We'll built an HTML file
    and defined `head` and `body` tags as per our requirements. Then, we go ahead
    with passing the room data. We looked into the concept of `params` and `deparams`
    and created test cases for validating the data. In the last section, we discussed
    the `socket.io` rooms. We targeting a specific user for the chat room and tested
    the set up.
  prefs: []
  type: TYPE_NORMAL
- en: Things were relatively easy for our `join` event listener because we had access
    to both the name variable and the room variable. They were actually passed in
    as arguments. It's going to be a lot more difficult for `createMessage` and `createLocationMessage`.
    We'll need to figure out a way to get the room back for the given socket so we
    can `emit` to just that room.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to set up that People list on the left-hand sidebar. We'll need
    to figure out how to use that `io` object to get a list of all the people by room
    and their names. All of that is going to be super important because currently
    the messages we `emit`, some message(s), for example, will show up to all users
    regardless of what room they're in. To get this working, to get those private
    rooms in place, we'll be persisting that data, which we are going to discuss in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
