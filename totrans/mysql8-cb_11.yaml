- en: Managing Tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the number or size of InnoDB REDO log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizing the InnoDB system tablespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating file-per-table tablespaces outside the data directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying file-per-table tablespaces to another instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing UNDO tablespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing general tablespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing InnoDB tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you begin this chapter, you should understand the basics of `InnoDB`.
  prefs: []
  type: TYPE_NORMAL
- en: As per the MySQL documentation,
  prefs: []
  type: TYPE_NORMAL
- en: '**System Tablespace (Shared tablespace)** <q class="calibre48">"The InnoDB
    system tablespace contains the InnoDB data dictionary (metadata for InnoDB-related
    objects) and is the storage area for the doublewrite buffer, the change buffer,
    and undo logs. The system tablespace also contains table and index data for any
    user-created tables that are created in the system tablespace. The system tablespace
    is considered a shared tablespace since it is shared by multiple tables.</q>'
  prefs: []
  type: TYPE_NORMAL
- en: <q class="calibre48">The system tablespace is represented by one or more data
    files. By default, one system data file, named ibdata1, is created in the MySQL
    data directory. The size and number of system data files is controlled by the
    innodb_data_file_path startup option."</q>
  prefs: []
  type: TYPE_NORMAL
- en: '**File-per-table tablespace**'
  prefs: []
  type: TYPE_NORMAL
- en: A file-per-table tablespace is a single-table tablespace that is created in
    its own data file rather than in the system tablespace. Tables are created in
    file-per-table tablespaces when the `innodb_file_per_table` option is enabled.
    Otherwise, `InnoDB` tables are created in the system tablespace. Each file-per-table
    tablespace is represented by a single `.ibd` data file, which is created in the
    database directory by default.
  prefs: []
  type: TYPE_NORMAL
- en: File-per-table tablespaces support `DYNAMIC` and `COMPRESSED` row formats, which
    support features such as off-page storage for variable length data and table compression.
  prefs: []
  type: TYPE_NORMAL
- en: To know the advantages and disadvantages of file-per-table tablespaces, refer
    to [https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html)
    and [https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table).
  prefs: []
  type: TYPE_NORMAL
- en: '**General tablespace**'
  prefs: []
  type: TYPE_NORMAL
- en: A general tablespace is a shared `InnoDB` tablespace created using `CREATE TABLESPACE`
    syntax. General tablespaces can be created outside of the MySQL `data directory`
    , are capable of holding multiple tables, and support tables of all row formats.
  prefs: []
  type: TYPE_NORMAL
- en: '**UNDO tablespace**'
  prefs: []
  type: TYPE_NORMAL
- en: An undo log is a collection of undo log records associated with a single transaction.
    An undo log record contains information about how to undo the latest change by
    a transaction to a clustered index record. If another transaction needs to see
    the original data (as part of a consistent read operation), the unmodified data
    is retrieved from the undo log records. Undo logs exist within undo log segments,
    which are contained within rollback segments. Rollback segments reside in the
    system tablespace, temporary tablespace, and undo tablespaces.
  prefs: []
  type: TYPE_NORMAL
- en: An `UNDO` tablespace comprises one or more files that contain undo logs. The
    number of undo tablespaces used by `InnoDB` is defined by the `innodb_undo_tablespaces`
    configuration option.
  prefs: []
  type: TYPE_NORMAL
- en: These logs are used to roll back transactions and also for multi-version concurrency
    control.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data dictionary**'
  prefs: []
  type: TYPE_NORMAL
- en: The `data dictionary` is metadata that keeps track of database objects such
    as tables, indexes, and table columns. For the MySQL `data dictionary`, introduced
    in MySQL 8.0, metadata is physically located in `InnoDB` file-per-table tablespace
    files in the MySQL database directory. For the `InnoDB data dictionary`, metadata
    is physically located in the `InnoDB` system tablespace.
  prefs: []
  type: TYPE_NORMAL
- en: '**MySQL data dictionary**'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL server incorporates a transactional `data dictionary` that stores information
    about database objects. In previous MySQL releases, dictionary data was stored
    in metadata files, nontransactional tables, and storage engine-specific `data
    dictionaries`.
  prefs: []
  type: TYPE_NORMAL
- en: In previous MySQL releases, dictionary data was partially stored in metadata
    files. Issues with file-based metadata storage included expensive file scans,
    susceptibility to filesystem-related bugs, complex code for handling of replication
    and crash recovery failure states, and a lack of extensibility that made it difficult
    to add metadata for new features and relational objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Benefits of the MySQL `data dictionary`  include:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity of a centralized `data dictionary`  schema that uniformly stores
    dictionary data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of file-based metadata storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactional, crash-safe storage of dictionary data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform and centralized caching for dictionary objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simpler and improved implementation for some `INFORMATION_SCHEMA` tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atomic DDL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The metadata files listed as follows are removed from MySQL. Unless otherwise
    noted, data previously stored in metadata files is now stored in `data dictionary`
    tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.frm` files: Table metadata files for table definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.par` files: Partition definition files. `InnoDB` stopped using the `.definition` partition files
    in MySQL 5.7 with the introduction of native partitioning support for `InnoDB`
    tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.trn` files: Trigger namespace files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.trg` files: Trigger parameter files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.isl` files: The `InnoDB` symbolic link files containing the location of file-per-table
    tablespace files created outside of the MySQL `data directory` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.opt` files: Database configuration files. These files, one per database
    directory, contain database default character set attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The limitations of MySQL `data dictionary` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual creation of database directories under the `data directory`  (for example,
    with `mkdir`) is unsupported. Manually created database directories are not recognized
    by the MySQL server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving data stored in MyISAM tables by copying and moving MyISAM data files
    is unsupported. Tables moved using this method are not discovered by the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple backup and restore of individual MyISAM tables using copied data files
    is unsupported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DDL operations take longer due to writing to storage, undo logs, and redo logs
    instead of `.frm` files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transactional storage of dictionary data**'
  prefs: []
  type: TYPE_NORMAL
- en: The `data dictionary` schema stores dictionary data in transactional (`InnoDB`)
    tables. `data dictionary` tables are located in the `mysql` database together
    with `non-data dictionary` system tables.
  prefs: []
  type: TYPE_NORMAL
- en: '`data dictionary` tables are created in a single `InnoDB` tablespace named
    `mysql.ibd` in the MySQL `data directory` . The `mysql.ibd` tablespace file must
    reside in the MySQL `data directory` and its name cannot be modified or used by
    another tablespace. Previously, these tables were created in individual tablespace
    files in the MySQL database directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the number or size of InnoDB redo log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ib_logfile0` file and `ib_logfile1` are the default `InnoDB` redo log files
    created inside the `data directory`, with 48 MB each. If you wish to change the
    size of the redo log files, you can simply change it in the configuration file
    and restart MySQL. In previous versions, you had to do a slow shutdown of MySQL
    server, remove the redo log files, change the config file, and then start MySQL
    server.
  prefs: []
  type: TYPE_NORMAL
- en: As of MySQL 8, `InnoDB` detects that the `innodb_log_file_size` differs from
    the redo log file size. It writes a log checkpoint, closes and removes the old
    log files, creates new log files at the requested size, and opens the new log
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check the sizes of the current files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the MySQL server and make sure that it shuts down without errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify what MySQL did in the log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also see the new log files created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Resizing the InnoDB system tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ibdata1` file in the `data directory`  is the default system tablespace.
    You can configure `ibdata1` using the `innodb_data_file_path` and `innodb_data_home_dir`
    configuration options. The `innodb_data_file_path` configuration option is used
    to configure the `InnoDB` system tablespace data files. The value of `innodb_data_file_path`
    should be a list of one or more data file specifications. If you name two or more
    data files, separate them by semicolon (`;`) characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a tablespace containing a fixed-size 50 MB data file named `ibdata1`
    and a 50 MB auto-extending file named `ibdata2` in the `data directory`, it can
    be configured like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the `ibdata` files become so big, especially when `innodb_file_per_table`
    is not enabled and the disk becomes full, you might want to add another data file
    on another disk.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Resizing the `InnoDB` system tablespace is one topic that you would love to
    know more and more about. Let's get into its details.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing the InnoDB system tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assuming that `innodb_data_file_path` is `ibdata1:50M:autoextend`, the size
    has reached 76 MB, and your disk is just 100 MB, you can add another disk and
    configure to add another tablespace onto the new disk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the size of the existing `ibdata1` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount the new disk. Assuming it is mounted on `/var/lib/mysql_extend`, change
    the ownership to `mysql`; make sure that the file is not already created. If you
    are using AppArmour or SELinux, make sure you set the alias or context correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `my.cnf` and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the existing size of `ibdata1` is 76 MB, you have to choose a maxvalue
    of at least 76 MB. The next `ibdata` file will be created on the new disk mounted
    on `/var/lib/mysql_extend/`. The `innodb_data_home_dir` option should be specified;
    otherwise, `mysqld` looks at a different path and fails with an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the new file. Since you have mentioned it as 50 MB, the initial size
    of the file would be 50 MB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Shrinking the InnoDB system tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not using `innodb_file_per_table`, then all of the table data is
    stored in system tablespace. If you drop a table, the space is not reclaimed.
    You can shrink the system tablespace and reclaim the disk space. This requires
    a major downtime, so it is recommended to perform the task on a slave by taking
    it out of rotation and then promoting it to master.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the free space by querying the `INFORMATION_SCHEMA` tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the writes to the database. If it is a master, `mysql> SET @@GLOBAL.READ_ONLY=1;`;
    if it is a slave, stop the replication and save the binary log coordinates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a full backup using `mysqldump` or `mydumper`, excluding the `sys` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove all the `*.ibd`, `*.ib_log`, and `ibdata` files. If you are using only
    `InnoDB` tables, you can wipe off the `data directory` and all the locations where
    system table spaces are stored (`innodb_data_file_path`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize `data directory`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the temporary password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Start MySQL and change the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore the backup. Use the temporary password to connect to MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If it is a master, enable writes by
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mysql> SET @@GLOBAL.READ_ONLY=0;`. If it is a slave, restore the replication
    by executing the `CHANGE MASTER TO COMMAND` and `START SLAVE;`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating file-per-table tablespaces outside the data directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you understood how to create a system tablespace in
    another disk. In this section, you will learn how to create an individual tablespace
    in another disk.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can mount a new disk with particular performance or capacity characteristics,
    such as a fast SSD or a high-capacity HDD, onto a directory and configure `InnoDB`
    to use that. Within the destination directory, MySQL creates a subdirectory corresponding
    to the database name, and within that, a `.ibd` file for the new table. Remember,
    you cannot use the `DATA DIRECTORY` clause with the `ALTER TABLE` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mount the new disk and change the permissions. If you are using AppArmour or
    SELinux, make sure you set the alias or context correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the `.ibd` file created in the new device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Copying file-per-table tablespaces to another instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Copying the tablespace file (the `.ibd` file) is the fastest way of moving
    data around, rather than exporting and importing through `mysqldump` or `mydumper`.
    The data is available immediately rather than having to be reinserted and the
    indexes rebuilt. There are many reasons why you might copy an `InnoDB` file-per-table
    tablespace to a different instance:'
  prefs: []
  type: TYPE_NORMAL
- en: To run reports without putting extra load on a production server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set up identical data for a table on a new slave server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To restore a backed-up version of a table or partition after a problem or mistake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have busy tables on an SSD device, or large tables on a high-capacity HDD
    device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The outline is: you create the table on the destination with the same table
    definition and execute the `DISCARD TABLESPACE` command on the destination. Execute
    `FLUSH TABLES FOR EXPORT` on the source, which ensures that changes to the named
    table have been flushed to disk, and so a binary table copy can be made while
    the instance is running. After that statement, the table is locked and does not
    accept any writes; however, reads can happen. You can copy the `.ibd` file of
    that table to the destination, execute `UNLOCK` tables on source, and finally
    execute the `IMPORT TABLESPACE` command, which accepts the copied `.ibd` file.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, you want to copy the `events_history` table in a test database
    from one server (source) to another server (destination).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `event_history` if not created already and insert a few rows for the
    demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Copy full table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**On destination**: Create the table with the same definition as on the source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination**: Discard the tablespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**On source**: Execute `FLUSH TABLES FOR EXPORT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**On source**: Copy all the table-related files (`.ibd`, `.cfg`) from the `data
    directory` directory of the source to the `data directory`  of the destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**On source**: Unlock the table for writes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination**: Make sure that the ownership of the files is set to `mysql`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination**: Import the tablespace. You can ignore the warnings as long
    as the table definitions are the same. If you have copied the `.cfg` files as
    well, the warnings won''t occur:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination**: Verify the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you are doing it on a production system, to minimize downtime, you can copy
    to the files locally, which is very fast. Immediately execute `UNLOCK TABLES`
    and then copy the files to the destination. If you cannot afford downtime, you
    can use Percona XtraBackup, back up the single table, and apply the redo logs,
    which generate the `.ibd` files. You can copy them to the destination and import.
  prefs: []
  type: TYPE_NORMAL
- en: Copying individual partitions of a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You added a new partition of the `events_history` table on the source and you
    wish to copy only the new partitions to the destination. For the sake of your
    understanding, create new partitions on the `events_history` table and insert
    a few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Suppose you want to copy the newly created partition to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: '**On destination**: Create the partitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination:** Discard only the partitions you want to import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**On source:** Execute `FLUSH TABLE FOR EXPORT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**On source:** Copy the `.ibd` files of the partitions to the destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination:** Make sure that the `.ibd` files of the required partitions
    are copied and have the owner as `mysql`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination:** Execute `IMPORT PARTITION TABLESPACE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You can ignore the warnings as long as the table definitions are the same.
    If you have copied the `.cfg` files also, the warning won''t occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**On destination:** Verify the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html](https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html)
    to find out more about the limitations of this procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Managing UNDO tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can manage the size of an `UNDO` tablespace through the dynamic variable
    `innodb_max_undo_log_size`, which is 1 GB by default, and the number of `UNDO`
    tablespaces through `innodb_undo_tablespaces`, which is 2 GB by default and dynamic
    from MySQL 8.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: By default, `innodb_undo_log_truncate` is enabled. Tablespaces that exceed the
    threshold value defined by `innodb_max_undo_log_size` are marked for truncation.
    Only undo tablespaces can be truncated. Truncating undo logs that reside in the
    system tablespace is not supported. For truncation to occur, there must be at
    least two undo tablespaces.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Verify the size of the `UNDO` logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose you want to reduce the files that are more than 15 MB. Remember, only
    one undo tablespace can be truncated. Selection of an undo tablespace for truncation
    is performed in a circular fashion to avoid truncating the same undo tablespace
    every time. After all the rollback segments in the undo tablespace are freed,
    the truncate operation runs and the undo tablespace is truncated to its initial
    size. The initial size of an undo tablespace file is 10 MB:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the `innodb_undo_log_truncate` is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `innodb_max_undo_log_size` to 15 MB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'An undo tablespace cannot be truncated until its rollback segments are freed.
    Normally, the purge system frees rollback segments once every 128 times that purge
    is invoked. To expedite the truncation of undo tablespaces, use the `innodb_purge_rseg_truncate_frequency`
    option to temporarily increase the frequency with which the purge system frees
    rollback segments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually on a busy system, at least one purge operation might have initiated
    and the truncation would have started. If you are practicing on your machine,
    you can initiate the purge by creating a big transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'While the delete is in progress, you can watch the growth of the `UNDO` log
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that `undo_001` is truncated to 10 MB while `undo_002` is growing,
    accommodating the deleted rows of the `DELETE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'After some time, you can notice that `unod_002` is also truncated to 10 MB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve achieved the reduction of the `UNDO` tablespace, set the `innodb_purge_rseg_truncate_frequency`
    to a default of `128`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Managing general tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until MySQL 8, there were two types of tablespaces: system tablespace and individual
    tablespace. There are advantages and disadvantages of both types. To overcome
    the disadvantages, general tablespaces are introduced in MySQL 8\. Similar to
    system tablespaces, general tablespaces are shared tablespaces that can store
    data for multiple tables. But you have fine control over a general tablespace.
    Multiple tables in fewer general tablespaces consume less memory for tablespace
    metadata than the same number of tables in separate file-per-table tablespaces.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The limitations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly to the system tablespace, truncating or dropping tables stored in
    a general tablespace creates free space internally in the general tablespace `.ibd`
    data file, which can only be used for new `InnoDB` data. Space is not released
    back to the operating system as it is for file-per-table tablespaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transportable tablespaces are not supported for tables that belong to a general
    tablespace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you will learn how to create a general tablespace and add and
    remove the tables from it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Practical usage:**'
  prefs: []
  type: TYPE_NORMAL
- en: Initially, `InnoDB` maintains a `.frm` file, which contains table structure.
    MySQL needs to open and close the `.frm` file, which degrades performance. With
    MySQL 8, the `.frm` files are removed and all of the metadata is handled using
    a transactional `data dictionary`. This enables the use of the general tablespace.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you are using MySQL 5.7 or earlier for SaaS or multi-tenant, where you
    have a separate schema for each customer and each customer has hundreds of tables.
    If your customers grow, you will notice the performance issues. But with the removal
    of `.frm` files from MySQL 8, the performance is greatly improved. Moreover, you
    can create a separate tablespace for each schema (customer).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started with creating it, first.
  prefs: []
  type: TYPE_NORMAL
- en: Create a general tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create a general tablespace either in the MySQL `data directory` or
    outside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create one in a MySQL `data directory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the tablespace outside it, mount the new disk on `/var/lib/mysql_general_ts`
    and change the ownership to `mysql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Adding tables to a general tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add a table to a tablespace while creating it, or you can run the `ALTER`
    command to move a table from one tablespace to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose you want to move the `employees` table to `TABLESPACE ts2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You can notice the increase in the `ts2.ibd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Moving non-partitioned tables between tablespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can move tables as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: This is how to move tables from one general tablespace to another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you want to move the `employees` table from `ts2` to `ts1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This is how to move tables to file-per-table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you want to move the `employees` table from `ts1` to file per table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: This is how to move tables to the system tablespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you want to move the `employees` table from file per table to the system
    tablespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Managing partitioned tables in a general tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a table with partitions in multiple tablespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: You can add a new partition in another tablespace, or if you do not mention
    anything, it will be created in table's default tablespace. An `ALTER TABLE tbl_name
    TABLESPACE tablespace_name` operation on a partitioned table only modifies the
    table's default tablespace. It does not move the table partitions. However, after
    changing the default tablespace, an operation that rebuilds the table (such as
    an `ALTER TABLE` operation that uses `ALGORITHM=COPY`) moves the partitions to
    the default tablespace if another tablespace is not defined explicitly using the
    `TABLESPACE` clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to move the partitions across a tablespace, you need to do `REORGANIZE` on
    the partition. For example, you want to move partition `p3` to `ts2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Dropping general tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `DROP TABLESPACE` command to drop the tablespace. However,
    all the tables inside that tablespace should be either dropped or moved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to move the partitions `p2` and `p3` of table `table_gen_part_ts1`
    in the `ts2` tablespace to other tablespace before dropping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can drop the tablespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Compressing InnoDB tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create tables where the data is stored in compressed form. Compression
    can help to improve both raw performance and scalability. Compression means less
    data is transferred between disk and memory, and it takes up less space on disk
    and in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the MySQL documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: <q class="calibre48">"Because processors and cache memories have increased in
    speed more than disk storage devices, many workloads are disk-bound. Data compression
    enables smaller database size, reduced I/O, and improved throughput, at the small
    cost of increased CPU utilization. Compression is especially valuable for read-intensive
    applications, on systems with enough RAM to keep frequently used data in memory.
    The benefits are amplified for tables with secondary indexes, because index data
    is compressed also."</q>
  prefs: []
  type: TYPE_NORMAL
- en: To enable compression, you need to create or alter the table with the `ROW_FORMAT=COMPRESSED
    KEY_BLOCK_SIZE` option. You can vary the `KEY_BLOCK_SIZE` parameter, which uses
    a smaller page size on disk than the configured `innodb_page_size` value. Compression
    won't work if the table is in system tablespace.
  prefs: []
  type: TYPE_NORMAL
- en: To create a compressed table in a general tablespace, `FILE_BLOCK_SIZE` must
    be defined for the general tablespace, which is specified when the tablespace
    is created. The `FILE_BLOCK_SIZE` value must be a valid compressed page size in
    relation to the `innodb_page_size` value, and the page size of the compressed
    table, defined by the `CREATE TABLE` or `ALTER TABLE KEY_BLOCK_SIZE` clause, must
    be equal to `FILE_BLOCK_SIZE/1024`.
  prefs: []
  type: TYPE_NORMAL
- en: In the buffer pool, the compressed data is held in small pages, with a page
    size based on the `KEY_BLOCK_SIZE` value. For extracting or updating column values,
    MySQL also creates an uncompressed page in the buffer pool with uncompressed data.
    Within the buffer pool, any updates to the uncompressed page are also rewritten
    back to the equivalent compressed page. You might need to size your buffer pool
    to accommodate the additional data of both compressed and uncompressed pages,
    although uncompressed pages are evicted from the buffer pool when space is needed
    and then uncompressed again on the next access.
  prefs: []
  type: TYPE_NORMAL
- en: '**When to use compression?**'
  prefs: []
  type: TYPE_NORMAL
- en: In general, compression works best on tables that include a reasonable number
    of character string columns and where data is read far more often than it is written.
    Because there are no guaranteed ways to predict whether or not compression benefits
    a particular situation, always test with a specific workload and dataset running
    on a representative configuration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to choose the parameter `KEY_BLOCK_SIZE`. `innodb_page_size` is 16,000;
    ideally, half of that is 8,000, which is a good start. To tune compression, refer
    to [https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Compression for file_per_table Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure that `file_per_table` is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify the `ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8` in the create statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'If the table already exists, you can execute `ALTER`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to compress a table that is in the system tablespace, you will get
    an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Disabling Compression for file_per_table Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To disable compression, execute the `ALTER` table and specify `ROW_FORMAT=DYNAMIC`
    or `ROW_FORMAT=COMPACT`, followed by `KEY_BLOCK_SIZE=0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you do not want compression on the `event_history` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Enabling Compression for General Tablespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you need to create a compressed tablespace by mentioning `FILE_BLOCK_SIZE`;
    you cannot alter the tablespace's `FILE_BLOCK_SIZE`.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to create a compressed table, you need to create the table in the
    general tablespace, where the compression is enabled; moreover `KEY_BLOCK_SIZE`
    must be equal to `FILE_BLOCK_SIZE/1024`. If you do not mention `KEY_BLOCK_SIZE`,
    the value will be automatically taken from `FILE_BLOCK_SIZE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create multiple compressed general tablespaces with different `FILE_BLOCK_SIZE` values
    and just add the tables to the desired tablespace:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a general compressed tablespace. You can create one with `FILE_BLOCK_SIZE` 
    of 8k and other with `FILE_BLOCK_SIZE` of 4k, and move all the tables with `KEY_BLOCK_SIZE`
    of 8 to 8k and 4 to 4k:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Create compressed tables in those tablespaces by mentioning the `ROW_FORMAT=COMPRESSED`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not mention `ROW_FORMAT=COMPRESSED,` you will get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can mention the `KEY_BLOCK_SIZE=FILE_BLOCK_SIZE/1024`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'If you mention anything other than `FILE_BLOCK_SIZE/1024`, you will get an
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'You can move the tables from the `file_per_table` tablespace to the compressed
    general tablespace only if the `KEY_BLOCK_SIZE` matches. Otherwise, you will get
    an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
