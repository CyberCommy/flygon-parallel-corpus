- en: Chapter 3. Live Streaming of a Surveillance Camera from the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will connect a camera to Raspberry Pi and stream a live
    video from it. We will then be able to watch the streaming of this content from
    our Android device. This chapter will move us closer to usage and away from administration
    of Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware and software configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming video to an Android device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The surveillance mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use a standard camera developed for the Pi that costs about $30 in many
    major electronics stores.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software configurations](img/image00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Pi camera
  prefs: []
  type: TYPE_NORMAL
- en: Pi has a camera port where you can plug in the camera cable. The plug on the
    Pi can be opened by pulling it upwards. If you have problems connecting the camera
    to the Pi, you can find many videos on the Internet showing how to do it. You
    can watch one from Raspberry Pi Foundation at [https://www.raspberrypi.org/help/camera-module-setup/](https://www.raspberrypi.org/help/camera-module-setup/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure the Pi and enable the camera hardware. This is
    done using the Pi configuration program accessed by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the menu provided, select **Enable Camera** and hit *Enter*. Then click on
    **Finish** where you'll be prompted to reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming video to an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to stream from the Pi to Android is using the **RaspiCam Remote**
    app that logs in to the Pi and executes the necessary commands. It then automatically
    gets the stream from the Pi. Download and open the app, where you will get an
    initial view to provide login details, such as the IP address, username, and password.
    Note that by default, it uses the default login account details and SSH port.
    You will only need the IP address if you have the default installation in place.
    You can even access your camera from the Internet if you enable port forwarding
    for port `22`, as described in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Make
    a Remote Desktop Connection to Your Pi from Anywhere"), *Make a Remote Desktop
    Connection to Your Pi from Anywhere*. The following screenshot displays the login
    settings of the RaspiCam Remote app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Streaming video to an Android device](img/image00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Initial view for RaspiCam Remote app
  prefs: []
  type: TYPE_NORMAL
- en: 'After waiting a few seconds, you should see the first picture taken by the
    Raspberry Pi camera on your Android device. On pressing the camera icon, the camera
    will start streaming as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Streaming video to an Android device](img/image00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Streaming from Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to get better streaming quality using the **H.264** setting.
    After connecting to the RaspiCam Remote app, you should open settings and check
    the **H.264** checkbox. However, before connecting through the app again, we need
    to install a VLC server on the Pi using the following command. You may experience
    problems with the `install` commands from time to time, but running it once again
    almost always solves the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to install a better VLC client on the Android. We will use
    the **VLC for Android beta** app. After installing it, open RaspiCam Remote app
    again, and then start streaming by clicking on the camera icon. At this point,
    Android will ask you to select the standard video player or the newly installed
    VLC for Android beta. Choose the latter and you will experience a much better
    streaming quality. Do not forget to add port `8080` to the port forwarding settings
    on your router to get access to the streaming video over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Manual VLC configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The RaspiCam Remote app automatically configures VLC on the Pi before it streams
    video content. Some of you might want to connect to the video stream directly
    from the VLC app and skip RaspiCam on Android. The following command is the same
    as the one that RaspiCam issues from the account that you provide before you start
    streaming using RaspiCam on your Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you issue the preceding command, you will be able to view the streaming content
    from the VLC app. You can initiate a connection by clicking on the antenna-like
    icon on the action bar of the VLC app. It will prompt for the stream address,
    which is `http://PI_IP_ADDRESS:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: The surveillance mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is cool to see the streaming from your camera, but it is much more useful
    to be able to run it in surveillance mode. We want the camera to react to motion
    and save images or videos whenever motion is detected, so that we can check them
    later instead of keeping an eye on the video. For this purpose, we will begin
    installing a motion recognition software on our Pi, which is called for apparent
    reasons, `motion`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the `motion` software and the following command will add
    the necessary packages to the kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It is a good idea to put this in the `/etc/rc.local` file so that it can be
    run at startup. You should put it before the `exit 0` line, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will even make some configuration changes to be able to access the streaming
    and control features that `motion` provides. Edit the configuration file of motion
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the web access to motion is restricted to the localhost, which
    means that you cannot access it from another computer other than the Pi itself.
    We will change this behavior by finding the following lines in the `motion.conf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that these are not consequent lines in the file. Also, if you use **nano**
    as your editor, you can press *Ctrl*+*W* to put it into the search mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will turn off the localhost-only access behavior by replacing the preceding
    lines of code with the following ones, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, we want the `motion` service to execute in the background mode
    as well being run as `daemon`. For this purpose, we should locate the following
    line of code in the same file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We should replace it with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we start `motion` now, we will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To get rid of this error, we can create this folder that `motion` is complaining
    about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that this directory might get deleted at startup, so it is a good idea
    to add this command in the `/etc/rc.local` file as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can finally start and stop your Pi camera in the surveillance mode,
    issuing the following commands, preferably using the **ConnectBot** app or any
    other SSH client that we discussed in the previous chapter. The following command
    will start `motion`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop motion, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you always want to run it on startup, which I would not recommend as you
    can run out of storage space on your Pi, you should edit the `/etc/default/motion`
    file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this file, you will find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should replace it with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You may either use the following command to start the service or reboot your
    Pi, which will start the service automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the status of all the services as well as the motion service, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Motion software comes in two parts. The first part is where you can watch streaming
    videos, and the second part is where you can see image/video files when motion
    is detected. You can see the stream from the motion software by opening the `http://IP_ADRESS_OF_THE_PI:8081`
    web page. For some reason, this part of the motion software only works in Firefox,
    but the surveillance part discussed in the next section will work with other browsers.
    Note that you cannot start both the motion server and VLC through the RaspiCam
    app at the same time as they use the same port. The following screenshot shows
    the streaming of a motion video:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The surveillance mode](img/image00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A motion streaming video on port 8081
  prefs: []
  type: TYPE_NORMAL
- en: You can log on to Pi using **AndFTP** as discussed in the previous chapter and
    navigate to the `/tmp/motion` folder to see images saved whenever motion is detected.
    Restarting the motion service will empty the contents of the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add ports `8080`, `8081`, and FTP port `21` to your port forwarding settings
    inside your router to access these services from outside your network.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing surveillance images on the Web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In almost all scenarios where surveillance is involved, we want to access saved
    images from when motion was detected through the Internet. To do this, we will
    connect the directory to which `motion` saves images to the Apache Server we have
    already installed in the previous chapter. Running the following command will
    do this trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also add this directory to which `motion` saves images and videos
    into the `motion.conf` file using the following line in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, open the `http://IP_ADRESS_OF_THE_PI/motion` link in a browser and you
    will see the image listing that `motion` has saved whenever motion is detected
    in front of the camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you may get an access forbidden fault from the web browser if `motion`
    has not yet detected any motion and created the `/tmp/motion/` directory. The
    following screenshot illustrates the image listing that motion has saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing surveillance images on the Web](img/image00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image and video files when motion detected accessed through the Web
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have moved away from administration of Pi to more real-life projects and
    installed a camera on the Pi; thereby, viewing streams from the Pi on both an
    Android device and the Web. We have even learned how to use the Pi as a surveillance
    camera and see motion detected by it.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue using the Pi in an even more interesting scenario in the next
    chapter and turn it into a media center.
  prefs: []
  type: TYPE_NORMAL
