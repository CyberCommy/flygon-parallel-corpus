- en: Chapter 4. Turn Your Pi into a Media Center
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have been administering our Pi and implementing useful projects in the previous
    chapters. In this chapter, we will use our Pi more as a source of entertainment
    and turn it into a media center. The topics covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up a media center on the Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a media center via remote control from Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting more from your media center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a media center using NOOBS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and setting up a media center on Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The media center software we've chosen for the purpose of this project is **Kodi**,
    formerly known as XBMC. It is open source and widely used with lots of add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, we will start by installing the necessary software on our Pi using
    the `apt-get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, we'll run the `kodi-standalone` executable, which will start Kodi and
    show its user interface on the HDMI port of the Pi. It is, therefore, important
    that you connect the Pi to a screen using the HDMI port instead of a remote desktop
    to see Kodi's user interface. Now, you can connect a USB keyboard or mouse to
    navigate inside Kodi.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Kodi on boot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We definitely do not want to run a command to start the media center, no matter
    how easy it is to run commands from Android, as discussed in previous chapters.
    For this reason, we need to start the command on startup using the `crontab -e`
    command. Add the following line at the end of the file the `crontab` command command
    opens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever you restart the Pi, Kodi will be restarted automatically. Note
    that, here, you access the media center through the HDMI port of the Pi, but you
    will also be able to access via remote desktop using the tools discussed in [Chapter
    1](part0014.xhtml#aid-DB7S1 "Chapter 1. Make a Remote Desktop Connection to Your
    Pi from Anywhere"), *Make a Remote Desktop Connection to Your Pi from Anywhere*.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the media center via remote control from Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main problem with the current setup is that you can only control the media
    center using a connected keyboard or mouse, making it not as comfortable to use
    as a media center should be. However, there is a remote control for Kodi on Android,
    called **Kore**, that makes it really easy to remotely control the media center.
    You can download it from Google Play. Its official name is **Kore, Official Remote
    for Kodi** and it is published by the **XBMC Foundation**, which is a nonprofit
    organization that operates the Kodi Media Center project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can connect the remote control application on Android to the Kodi
    installation on the Pi, you need to make some setup changes on Kodi. Go to the
    **SYSTEM** menu in Kodi, and then **Settings**, **Services**, and **Webserver**.
    Here, you should select **Allow control of Kodi via HTTP**. Then go to the **Remote
    control** settings in same menu and enable the **Allow programs on this system
    to control XBMC** and **Allow programs on other systems to control XBMC** settings.
    Now open Kore on Android and let it search for the media center. If both the phone
    and media center are on the same network, Kore should be able to find it. When
    succeeded with the search, you will see a view similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the default HTTP port for Kodi collides with the motion server's default
    HTTP port, which we saw in the previous chapter. You should either change the
    port setting in Kodi or stop the motion server before making these changes in
    Kodi's settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the media center via remote control from Android](img/image00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Kore has found the media center
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the newly found media center to connect and start controlling
    it remotely. If it does not identify the media center automatically, you can press
    the **Next** button and enter the parameters manually. Port `8080` is the default
    port and `kodi` is the default username you should use if you haven't changed
    these parameters inside Kodi.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the media center via remote control from Android](img/image00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Manual settings in Kore
  prefs: []
  type: TYPE_NORMAL
- en: Getting more from your media center
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many things a media center can be used for. You can, for example,
    download add-ons that give you access to lots of online content, such as YouTube,
    Khan Academy, and TED Talks.
  prefs: []
  type: TYPE_NORMAL
- en: Watching videos using Kodi on an Android device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another interesting thing you can do is to upload video from your phone to the
    Pi using the previously discussed AndFTP app from [Chapter 2](part0021.xhtml#aid-K0RQ1
    "Chapter 2. Server Management with Pi"), *Server Management with Pi*, and then
    watch movies using the media center. You need to add a directory on to the Pi
    where you will upload these files as a media location in Kodi. Go to **Videos**
    | **Files** | **Files**, and then navigate to **Add Videos...**. Here, you should
    first select **Browse**, and then **Root filesystem**. Note that we were using
    `/home/pi` as the target for uploads in [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Server
    Management with Pi"), *Server Management with Pi*. It should work even in this
    case. Browse down to this location and click on **OK** on all three pop ups. You
    should now see the Pi in the list of **Videos** on Kodi. You can even add this
    folder to favorites for easy access. Open the Kore remote control app and browse
    to the `pi` folder once again under **Videos**. When the `pi` folder is highlighted
    in Kodi, press the properties button in the Kore remote control app. Then select
    **Add to favorites** by scrolling down using the arrows on Kore.
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching videos using Kodi on an Android device](img/image00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The button that lists the choices in Kore, that is, the properties button
  prefs: []
  type: TYPE_NORMAL
- en: Next open AndFTP from [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Server
    Management with Pi"), *Server Management with Pi*, and connect to the Pi or select
    the connection that is already saved from previous sessions. You should now see
    the contents of the `/home/pi` directory, which is the default location for the
    user `pi` we have used. This is the target location. Then, select the mobile phone
    image on the action bar in AndFTP to select a video located on your mobile phone
    and upload it to Kodi.
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching videos using Kodi on an Android device](img/image00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The AndFTP interface to select the upload location from the phone to the Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'Recorded videos are generally located under `DCIM/Camera`. Select the videos
    you want to upload. Then, click on the upload icon in the action bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching videos using Kodi on an Android device](img/image00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The AndFTP interface to begin upload from the phone to the Pi
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can browse down to the `pi` directory in Kodi that we have added to
    the **Videos** section and see the videos you have just uploaded on your media
    center.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming the Android display to Kodi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another very interesting thing you can do is to stream your Android screen and
    make Kodi show this stream. For this purpose, we will first download an app from
    Google Play that will stream an Android display and publish it using a URL on
    your internal network. The app we will use for this purpose is called **Screen
    Stream** **Mirroring** and comes both as a free and a paid version. For the sake
    of this project, it is enough to download the free version. After starting the
    app, you will need to close a few advertisements and press the **Start Now** button
    on the pop-up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Streaming the Android display to Kodi](img/image00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screen Stream Mirroring
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will see the address that the streaming is published to. We will now
    save this `rtsp://YOUR_ANDROID_IP_ADRESS:5000/screen` link in a file we will call
    `stream.strm` on the Pi under the `home` directory of the user `pi`, which is
    `/home/pi`. Then, browse to the `pi` directory in Kodi, find this file, and open
    it. Remember that we have saved this directory under the **Videos** section in
    Kodi and as a favorite as well. Now, you should be able to see whatever you do
    on the Android device's screen attached to the Pi's HDMI port used by Kodi. Another
    option here is to show the Android camera capture through this channel. The Screen
    Stream Mirroring app we use has a notification in the Android notification area.
    If you expand it, you will see an option named **CAMERA**. By pressing this button,
    you will be able to start the camera and see the camera capture as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Streaming the Android display to Kodi](img/image00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Screen Stream Mirroring notification with the camera option
  prefs: []
  type: TYPE_NORMAL
- en: Installing the media center using NOOBS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another option for installing the media center onto the Pi is using NOOBS. This
    way, users can very easily install the media center without worrying about details
    related to Raspbian OS, as we did in this chapter. We have already covered the
    NOOBS installation in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Make a
    Remote Desktop Connection to Your Pi from Anywhere"), *Make a Remote Desktop Connection
    to Your Pi from Anywhere*. However, in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Make
    a Remote Desktop Connection to Your Pi from Anywhere"), *Make a Remote Desktop
    Connection to Your Pi from Anywhere*, we used the offline installation option.
    We can use the online installation option instead. You should download the online
    NOOBS installer from [http://downloads.raspberrypi.org/NOOBS_lite_latest](http://downloads.raspberrypi.org/NOOBS_lite_latest).
    This ZIP file is much smaller but you need to connect the Pi to an Ethernet network
    before you begin installation. Extract the contents of the file to an SD card
    and restart your Pi with this SD card inserted. Now, you will see a list of operating
    systems to install. The list contains two media centers as well. These are **OpenELEC**
    and **OSMC**. Both are based on Kodi, which we've already covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was short, but fun. We have learned to install on our Pi and set
    up one of the most widely used media centers and control it remotely from our
    Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get our hands dirty and begin some Python and Android
    programming, and make use of even more connection possibilities between the Pi
    and Android.
  prefs: []
  type: TYPE_NORMAL
