- en: Chapter 13\. Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you now know, Nest.js is based on the same principles as Angular, so it is
    a good idea to have a similar structure as Angular’s.
  prefs: []
  type: TYPE_NORMAL
- en: Before going into the file structure, we will see some guidelines about the
    naming and about how to structure our different directories and files in order
    to have an easy and more readable project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take a look at the architecture for two different type of projects:'
  prefs: []
  type: TYPE_NORMAL
- en: A server application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more complete app using `Angular universal` with Nest.js and Angular 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you should know how to structure your app either
    for a server application or a complete app with a client front-end.
  prefs: []
  type: TYPE_NORMAL
- en: Style guide of naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will see the naming conventions that we can use in order to
    have better maintainability and readability. For each decorator, you should use
    the name with a hyphen for a composed name, followed by a dot and the name of
    the decorator or object to which it corresponds.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the controller should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***user.controller.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the service should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***user.service.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the module should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***user.module.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the middleware should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***authentication.middleware.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exception filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the exception filter should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***forbidden.exception.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pipe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the pipe should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***validation.pipe.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Guard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the guard should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***roles.guard.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Interceptor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the interceptor should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***logging.interceptor.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Custom decorator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the custom decorator should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***comment.decorator.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the gateway should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***comment.gateway.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the adapter should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***ws.adapter.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the unit test should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***user.service.spec.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: E2E test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The naming of the e2e test should respect the following principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '***user.e2e-spec.ts***'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have overviewed the tools provided by Nest.js and have put in place some
    naming guidelines. We can now move onto the next part.
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to have a project with a well-structured directory file in order
    for it to be much more readable, understandable, and easy to work with.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s see how we can structure our directory in order for it to be more
    clear. You will see in the following example the directory file architecture used
    for the repository, which has been created for this book using the naming convention
    described in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Server architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the server architecture, you will see a proposed architecture used for the
    repository to have clean directories.
  prefs: []
  type: TYPE_NORMAL
- en: Complete overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'See the base file structure without entering into too much detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We have four folders for this server that contain all of the files that we
    need for a complete server:'
  prefs: []
  type: TYPE_NORMAL
- en: '`artillery` directory, if you need this it can contain all of the scenarios
    to test some end points of your API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts` directory will contain all of the scripts that you need to use in
    your application. In our case the script to wait for the port used by `RabbitMQ`
    to open in order that the Nest.js application waits before starting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`migrations` A directory exists because we use `sequelize` and we have written
    some migration files that are stocked in this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src` directory, which will contain all of the code for our server application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the repository, we also have a `client` directory. In this case, however,
    this one is only used as a sample of web socket usage.
  prefs: []
  type: TYPE_NORMAL
- en: The `src` directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `src` directory will contain all of the application modules, configurations,
    gateways and more. Let’s take a look at this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This directory will also have to be well-structured. For this, we have created
    three sub-directories that correspond to the web socket gateways, which have all
    been put in the `gateways` directory. The `modules` will contain all of the modules
    needed for the application. Finally, `shared` will contain all of the shared content
    as its name suggests, corresponding with all of the `adapters`, `config` files,
    and `decorators` for the custom decorators and elements that can be used everywhere
    without belonging to any module in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will dive into the modules directory.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The main part of your application will be structured as a module. This module
    will contain many different files. Let’s have a look at how a module can be structured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In our repository, we have many modules. Some of them also implement the `cqrs`,
    and it is in the same directory as the module, because it concerns the module
    and is part of it. The `cqrs` parts are separated into the `commands` and `events`
    directories. A module can also define some interfaces and these are put into a
    separate `interfaces` directory. Separate directories allow us to have something
    that is much more readable and clear without having lots of different files mixed
    together. Of course, all of the tests concerning the modules are also included
    in their own directory `tests` and separated into the `unit` and `e2e`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the main files defining the module itself, including the injectables,
    the controllers, and the entity, are in the root of the module `directory`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have seen how to structure our server application in a way
    to keep it clearer and much more readable. You now know where to put all of your
    modules and how to structure a module, as well as where to put your gateways or
    your shared files if you used them.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Universal architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular Universal part of the repository is a standalone application, using
    the Nest.js server and Angular 6\. It will be composed of just two main directories:
    `e2e` for the end-to-end tests and the `src`, which contains the server and the
    client.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by seeing an overview of this architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `src` directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory will contain the `app` directory in order to put our client content
    with the Angular architecture using modules. Also, we will find the `environments`,
    which define if we are in production mode or not exporting constant. This environment
    will be replaced by the production environment config for the production mode,
    and then the `server` and `shared` directories. The shared directory allows us
    to share some files as an interface, for example, and the server directory will
    contain all the server applications as we have seen in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'But in this case, the server has changed a bit and now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The modules directory will contain all of the Nest.js modules, exactly as we
    have seen in the previous section. One of the modules is the `client` module and
    will serve the Universal app and all of the required assets, as well as setting
    up the initializer to set the engine and provide some Angular configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the `environments`, this one will contain all of the configuration
    paths related to the Angular application. This configuration references the project
    configured into the `angular.json` file seen in the base of the previous section’s
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter allows you to set up the architecture of your application in a
    way that is much more understandable, readable and easier to work with. We have
    seen how to define the architecture’s directories for a server application, but
    also for a complete application using Angular Universal. With these two examples,
    you should be able to build your own project in a clearer way.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter shows how to use testing in Nest.js.
  prefs: []
  type: TYPE_NORMAL
