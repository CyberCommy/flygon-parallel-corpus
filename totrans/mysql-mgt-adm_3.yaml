- en: Chapter 3. Data Management with Navicat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, some of us would work with a database and its contents the hard
    way, typing commands in a console window or using primitive GUI tools with limited
    functionality. When it came to migrating a database from one server to another
    or even a simple restore from a backup, such stunts could become tedious tasks.
    In this chapter, we will see how easy and less time-consuming it is to perform
    all these tasks with Navicat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we will manipulate big chunks of data using Navicat''s sophisticated
    tools, and you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Import and export data using a variety of formats, such as XML, Excel files,
    `.csv`, and `.sql`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct data transfer between different databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronize data and structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back up a database for restoring later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and schedule batch jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with an existing database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From this point on, we''ll work with an existing sample database called Sakila.
    Apart from being the name of the dolphin in the MySQL logo, Sakila is an example
    of a movie database developed by Mike Hillyer—a former member of the MySQL AB
    documentation team—and is intended to provide a standard schema that can be used,
    for example in books, tutorials, and articles. It also serves to highlight the
    features introduced in MySQL 5.x, including views, stored procedures, and triggers.
    The default installation of MySQL 5.5 Community Edition includes a copy ofSakila
    along with another sample database named World. If you already have a version
    of the MySQL server (earlier than 5.5) installed on your computer and do not want
    to upgrade for specific reasons, we have included a copy of the dump file of the
    Sakila database in the example code for this book. You can also download it from
    [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html).
    Once you arrive at the page, select the **Other Docs** tab and look in the **Example
    Databases** section. There you can find other sample databases too, with which
    you can experiment and apply what you will have learned through this chapter,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with an existing database](img/7461EN_03_01_download-sakila-example.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have downloaded Sakila's compressed archive (either in `.zip` or `.tgz`
    format) and extracted its contents, you will find three files, which are called
    SQL dump files, in a folder called `sakila-db`. We need only two of them—`sakila-schema.sql`
    and `sakila-data.sql`. We'll use `sakila-schema.sql` in order to generate the
    Sakila database on our MySQL server; all the tables, views, functions, and stored
    procedures, which constitute the database structure, will be created. The other
    file, `sakila-data.sql`, will populate the data of the Sakila database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database schema from a SQL dump file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, to generate the Sakila database on your server, I need you to right-click
    on **localhost** (or whatever server you defined a connection for) from the **Connections**
    pane of Navicat''s main window and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Execute SQL file...** from the contextual menu that pops up, as shown
    in the following screenshot:![Creating the database schema from a SQL dump file](img/7461EN_03_2_localhost-execute-sql.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new, smaller window will then open up with two tabs, where you will specify
    the SQL file to execute action queries from, in this case, SQL commands, to create
    the database and its objects. While under the **General** tab of the **Execute
    SQL File** window, click on the small, square-shaped button at the right end of
    the field labeled **File**, to choose `sakila-schema.sql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the other settings in this window look like what you see in the screenshot,
    such as the **Encoding** which should be **65001 (UTF-8)**, you can directly proceed
    to click on the **Start** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, you could uncheck **Continue on error** to make sure your settings
    are correct before Sakila is generated on your machine as it's supposed to be;
    and if not, the operation will be broken and you will know in advance that you
    need to recheck the settings regarding your database server installation and connection
    properties. In other words, the operation should go just fine with the default
    settings, but in the event of any error during the execution of the queries—probably
    resulting from a possible misconfiguration—it's best to stop creating the database
    and revise the settings by referring to the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can leave the **Continue on error** option checked and execute
    all the queries in the SQL file. In the case of any error, you can refer to the
    **Message Log**, which is under the second tab of this window. Refer to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the database schema from a SQL dump file](img/7461EN_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you finish executing the SQL file, you will automatically be switched
    to the **Message Log** tab, as shown in the following screenshot:![Creating the
    database schema from a SQL dump file](img/7461EN_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, there's the option of starting over by clicking on the **Start**
    button again, or by closing the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Going back to Navicat's main window, there appears to be no change. Now what?
    Nothing to worry about; we just need to refresh the view to see our newly created
    Sakila database and its objects. Right-click on **localhost** again, and select
    **Refresh** from the pop-up menu (On the Mac, it's labeled as **Refresh Connection**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is one of the most powerful features of Navicat. In just a few seconds,
    we executed a SQL dump file to recreate a database without having to type commands
    in a console window or having to go through complicated screens, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the database schema from a SQL dump file](img/7461EN_03_04_sakila_schema_created.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All the **Tables**, **Views**, **Functions**, and stored procedures are now
    listed in the main window. Click on **Tables** to see what we've got. We have
    almost every element that we would find in a typical relational movie database
    such as film, actor, category, staff, and some association tables, which are also
    called junction tables, such as **film_actor** and **film_category**. Double-click
    on some of them to see what they look like in Navicat. There are some custom views
    as well, such as **nicer_but_slower_film_list** and **sales_by_film_category**.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you will notice, however, is that these **Tables** and **Views**
    are all empty, without data. It's because the `.sql` file we executed contains
    only the database structure. So we have only created the blank database schema,
    and we need to repeat the steps in the beginning of this section to execute the
    other SQL dump file called `sakila-data.sql`, which contains the data to populate
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the full database, with a complete structure, at our disposal,
    it's time to fill it with some data.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **sakila** database from the tree view in the left pane,
    make sure it's connected by verifying if its little cylinder-like icon is green,
    and then select **Execute SQL file** from the pop-up menu. This time, choose `sakila-data.sql`
    and click on **Start**. The title of the auxiliary window should become something
    like **Execute SQL file**, and the **Message Log** tab should read **[Msg] Finished
    - 56 queries executed successfully**.
  prefs: []
  type: TYPE_NORMAL
- en: Importing and exporting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have actually imported the **sakila** database by
    using SQL dump files. In this section, we'll cover import/export capabilities
    of Navicat in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'As our first exercise, we will export **our_first_db**, the database that we
    created in [Chapter 2](ch02.html "Chapter 2. Working with Databases"), *Working
    with Databases*, in a `.sql` file, so that it can be regenerated on another MySQL
    server or as another instance of the database on the same server. To export **our_first_db**,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **our_first_db** and choose **Dump SQL file...** from the pop-up
    menu. (If that menu item is dimmed and therefore inactive, you can first select
    **Open Database** from the same pop-up menu and then proceed with the intended
    step by right-clicking on it again.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, indicate the path where you want the SQL dump file to be created and
    by what name you want it to be saved in the **Save as** dialog box, and click
    on **Save**. Your database will be exported or dumped into a `.sql` file, which,
    when executed as described in the previous section, will be regenerated exactly
    with the same structure and data you created, as shown in the following screenshot:![Importing
    and exporting data](img/7461EN_03_5_dump_sql_file.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous procedure is one step away from exporting an entire database, although
    there are other variants of data exporting methods in Navicat, which will be covered
    in a moment, in this chapter. The **sakila** database, for example, came in two,
    separate, `.sql` files—one for the schema and the other for the data. If you export
    **sakila** using the same method, which is, by running the **Dump SQL file** command,
    Navicat will export the entire database in a single dump file.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to know about Navicat's way of exporting SQL dump files is that Navicat
    does not include a command to create the database, such as `CREATE` `DATABASE`
    `db_name`, in the file.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, before executing dump files created by Navicat, you should first
    select a database or create a new one, and then proceed with the execution to
    generate the schema and to populate the data, if any.
  prefs: []
  type: TYPE_NORMAL
- en: If you are going to use the exported `.sql` dump file in a different administration
    tool, such as phpMyAdmin or MySQL Workbench, you should manually add the SQL command
    that would create the database. For example, you could add a line with the code
    `CREATE` `DATABASE` `our_first_db` in the beginning of the file, using a text
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: Another one of Navicat's most acclaimed features is its ability to export data
    to a variety of formats. Some of the major ones will be covered in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are a database administrator or some sort of an IT analyst, you might
    often receive business requests to provide your client with an output of a table
    or a query from a database on the company intranet, typically in the Microsoft
    Excel format. In such cases, Navicat comes extremely handy for exporting the needed
    data and in a wide range of exporting options.
  prefs: []
  type: TYPE_NORMAL
- en: You can open any **Table**, **View**, or **Query**, and then click on the **Export
    Wizard** button on the toolbar of the window. When you do that, Navicat asks you
    if you want to export all the data in the table (in the Windows version).
  prefs: []
  type: TYPE_NORMAL
- en: Now this part is a bit tricky. First of all, *the table* in the expression **all
    the data in the table** refers to what kind of database object you're dealing
    with. When you're exporting the results of a **View** or **Query**, then **export
    all the data in the table** means all the data in the result list of the **View**
    or the **Query** you have been working on. Secondly, **all the data** means all
    the records in the database table, even if you displayed a limited amount of data.
    Please note that Navicat displays, at most, a thousand rows by default, when displaying
    the contents of a **Table**, **View**, or **Query**, in order to prevent a heavy
    workload on the database server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This limit can be changed or removed by clicking on a tiny toolset icon at
    the bottom-right of the results window, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting in detail](img/7461EN_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see this in action, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Tables** in the **sakila** database, and double-click on the table
    named **film**. You should see a list of movies with details such as the **title**,
    **description**, **release_year**, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the toolset icon at the bottom-right to set the limit for the number
    of results shown in the previous screenshot. The database, **sakila**, contains
    a thousand titles in the films table anyway, so set the limit to `500` before
    you test how many rows will be exported in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Export Wizard** button on the toolbar (alternatively an
    **Export Wizard** command is also available in the **File** menu), and then click
    on **Yes** when you are prompted with **Do you want to export all data in the
    table?**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the **Export Wizard** window, where you will need
    to specify the export file format with options ranging from the **Dbase** file
    format to **MS Access database** or **Excel spreadsheet** to **XML**.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the Windows version of Navicat provides a plethora of file format options
    to choose from, the Mac version presents fewer options for the export file format
    (which explains why the Mac version is slightly cheaper). To be specific, CSV,
    plain text, XML, Dbase file (`.dbf`), and Excel formats are the file formats.
    You can refer to the following screenshot, which contains screenshots from both
    the Mac and the Windows versions of Navicat. This screenshot compares the differences
    of the user interface elements, such as the toolbar and the icons as well as file
    exporting options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting in detail](img/7461EN_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another point to be aware of when exporting to Excel is that the version of
    the spreadsheet that will be created depends on which version of Microsoft Excel
    is installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: After you select the desired output file format, you can click on **Next** in
    Windows (or simply the **Continue** button in the Mac version) for the next step,
    where you will be setting the destination filename, the encoding, and a few more
    options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Even if you started the export operation on a single table output, this step
    lets you choose other tables in the database to export to separate files (unless
    you clicked **No** when prompted to export **all the data,** in the first place);
    that is, you can export each table to a separate file, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting in detail](img/7461EN_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What's more is you can even export more than one table (or all) to a single
    file. This is done simply by specifying the same filename (and path) for each
    source table in the corresponding field under the **Export to** column. This approach
    has different consequences depending on the file format you have chosen in the
    first place. For example, if you choose to export two or more tables to a single
    Excel file (`.xlsx`), each will be a separate spreadsheet in the same file.
  prefs: []
  type: TYPE_NORMAL
- en: To set the encoding of the file that will be exported, click on the **Advanced**
    button to display a little pop-up dialog window. The default **Encoding** is pertinently
    **65001 (UTF-8)**, which you can change from the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Encoding** selection box, there is also a checkbox to add a timestamp
    as a suffix to the exported filename. This is very useful to distinguish between
    the files in cases where you perform this task very often and end up accumulating
    a stack of exported files in a folder with identical names. You can even choose
    between different date patterns, such as **YYYY-MM-DD-HHNNSS** and **MM-DD-YYYY**
    for the time stamp, which will add a suffix to the output filename.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Windows version of Navicat, you have two options for exporting to Excel.
    One of them is **Excel spreadsheet (*.xls)**, which is also the only available
    option in the Mac version. The second is **Excel file (2007 or later) (*.xlsx)**.
    With the former option, you cannot successfully export more than one source table
    into a single destination file, whereas the latter lets you achieve this as it
    uses some component on your computer installed with Microsoft Office. The Excel
    files you export using this option are created more slowly, but their version
    exactly matches the version of Office installed on your PC.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is selecting the columns (or fields) for exporting by checking
    all the checkboxes of table, view, or query, by default. In order to omit some
    of them, simply uncheck **All Fields** first, and then uncheck the (un)desired
    fields listed under **Available Fields**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are exporting more than one table and want to specify a different selection
    of columns for each, you will need to repeat this step for each table you are
    exporting, by choosing from the drop-down list labeled **Source Table** and then
    checking/unchecking the field names in the list below it, which updates itself
    as you switch between tables.
  prefs: []
  type: TYPE_NORMAL
- en: In the next screen, you can specify whether or not you want an additional row
    at the top of the exported file containing the column titles. Also, you can opt
    to append exported records to an existing file. Also, you can check the option
    **Continue on error**, which will prevent the operation from halting in the event
    of an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could be presented with additional options if you were exporting some other
    file format such as in the case of XML or text files, for example, where you specify
    settings, such as row and field delimiters, text qualifiers, and the format for
    date, time, and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the best and foolproof ways to transfer or exchange data between MySQL
    and an Oracle or Microsoft SQL Database is by using the XML format when exporting
    data from a table.
  prefs: []
  type: TYPE_NORMAL
- en: When done, click on **Next** to go to the final step and start the export process.
    If you have chosen the `.xls` format instead of `.xlsx`, the exporting should
    be completed in a matter of seconds. When the operation is complete, you can perceive
    it from the progress bar and the **Message Log**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing a file into a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same variety of file formats available for exporting a **Table**, **View**,
    or **Query** are also valid for importing data into a table. Excel spreadsheets,
    XML, and CSV files are among the most popular file formats used as data sources.
  prefs: []
  type: TYPE_NORMAL
- en: A business unit periodically sending an Excel spreadsheet to the IT department,
    with a request to update the corporate database with the information in its contents
    is one of the most common scenarios at work. And in some situations, the person
    who makes the spreadsheet often neglects to keep the column names consistent,
    for example, SALES_REP can become SALES_PERSON the next time and SALES_REP_NAME
    at another. Fortunately, Navicat prompts you to match the source columns with
    target fields, also giving you the flexibility to omit some or add additional
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: When importing data from an Excel or CSV file, remember to correctly set field
    name row and first data row, which, typically, should not be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example given in the screenshot, you can see the way additional actors
    are imported to the actor table from an Excel file, but some column names had
    to be manually matched for naming differences, such as **actor_id**–**actor_no**
    and **first_name**–**name**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing a file into a table](img/7461EN_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to the popular data formats mentioned earlier, it is possible to
    import data from an ODBC data source in the Windows version of Navicat. This requires
    some knowledge of ODBC settings so as to be able to specify connection parameters.
    You can find detailed information for the ODBC import in Navicat's official manual.
  prefs: []
  type: TYPE_NORMAL
- en: Direct data transfer between two databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another flagship feature of Navicat is its capability to transfer database objects
    (**Tables**, **Views**, **Functions**, and **Events**) from one database to another,
    or to a SQL dump file. The target database can be on the same server or on another
    server. All you need to do is to have defined a connection to it as described
    in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*. The
    data transfer settings can also be saved as a profile for later retrieval or can
    be scheduled as a job.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start a data transfer process either by choosing **Data Transfer...**
    from **Tools** in the main menu bar, or by right-clicking on a database in the
    left navigation pane and selecting **Data Transfer...**. Once you initiate it,
    you can start specifying the settings in the **Data Transfer** window, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Direct data transfer between two databases](img/7461EN_03_10_data_transfer1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the interface here is fairly intuitive, with two main areas under the
    **General** tab categorized as **Source** and **Target** simply letting you choose
    which objects to transfer where, there are a few points to know before you get
    started, unless you want to learn how to use it by the hard way of trial and error.
    First, you need to have the target database ready beforehand, which means you
    need to at least have created a blank database as the target to receive the database
    objects, as Navicat (at the time of writing this) does not create the database
    itself but rather copies the objects to the specified target. You can also choose
    to transfer to an existing database already containing some objects, but in this
    case, you might want to make sure that they don't have the same names as those
    in the source unless you wish them to be overwritten or skipped.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, you can prefer to export to a SQL dump file, which is, in a way, similar
    to what I showed in the beginning of the chapter, except that on this screen,
    you are able to specify the SQL format ranging from MySQL 3.23 to 6.0 through
    file encoding.
  prefs: []
  type: TYPE_NORMAL
- en: If the target server version is different from that of your source, the direct
    transfer might fail, and you might have to resort to exporting a SQL file in this
    way.
  prefs: []
  type: TYPE_NORMAL
- en: The **Advanced** tab is where you can specify some additional settings, such
    as continuing on error and dropping target objects before creating. This means
    that any existing ones with the same name from the source will have been overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: As with all the other utility windows of Navicat, click on **Start** to begin
    the process when you're done configuring the settings. The process can last from
    seconds to minutes, or even hours, depending on the size of the database, the
    amount of data, the distance between two servers, and your connection speed. I
    personally do not usually have to wait for a long time to transfer my blog's database
    from the server of my web hosting company, which is on another continent, and
    my blog has some 2,860 posts including comments.
  prefs: []
  type: TYPE_NORMAL
- en: Data and structure synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have multiple instances of your database across different servers, for
    example, one for development, one for testing, and one other for production, it
    can be challenging that, for consistency, sometimes making a change in one (most
    likely in development) requires applying the exact same changes to the others.
    We as humans often make the mistake of neglecting one or more changes on all of
    the servers and end up with unexpected errors after deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Navicat comes to the rescue in this area as well, with its structure and data
    synchronization wizards accessible from the **Tools** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Another situation where the synchronization tools could be useful is in cases
    where a previously performed data transfer operation is not successfully completed.
    The target database can be retouched using structure and data synchronization
    afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage of both tools is more or less identical to the **Data Transfer**
    interface, where you can thoroughly designate which source and target database
    objects you want to be compared and in what detail. For example, in **Structure
    Synchronization**, you can opt to compare tables along with primary keys, foreign
    keys, and indexes, but also choose to exclude triggers, character set, and the
    auto-increment value under the **General** (**General Settings** on the Mac) tab.
    As such, you can specify your choice of the type of SQL commands to be executed
    by clicking on the appropriate checkboxes, as you have CREATE, ALTER, and DROP
    to choose from. You can even check an option to compare again after execution
    of the process. In the Windows version of Navicat, there is a button labeled **Compare**
    at the lower-right corner of the window. On the Mac version, the button is on
    the upper left-hand side in the window''s toolbar with a scales icon. Click on
    it to begin the comparison of the structure of the source and target databases.
    Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data and structure synchronization](img/7461EN_03_11_structure_sync.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will need to go to the second tab named **Comparison** (**Compare Result**
    on the Mac), which will give us a sort of preview of what differences exist between
    the source and the target, and the SQL queries for synchronization will be listed
    as per the required modification in the second half of the window. You can individually
    select which queries are to be executed by clicking on their corresponding checkboxes,
    or click anywhere in the list to display a pop-up menu, which will allow you to
    select/unselect all, as well as copy the SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: When you're done with it, click on **Run Query** to proceed. Then, you can watch
    the **Message Log** to see the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Data Synchronization** is slightly simpler where you simply select the
    source and target databases. Navicat automatically lists and matches the tables
    from both sides, so that you can verify if there''s a correspondence for each
    table on both sides. Under the **Advanced** tab, you can specify whether or not
    you want to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show synchronization detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, you can click on **Preview** to see how data is going to get synchronized
    and then click on the **Start** button to let it actually happen, and see the
    executed commands in the **Message Log**.
  prefs: []
  type: TYPE_NORMAL
- en: Backup and restore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case of a disaster, be it an electricity outage leading to a disk failure
    causing corruption of the database, or simply a user error of deletion of the
    wrong objects or data rows ending in data loss, it is crucial to back up your
    database. Navicat lets you back up all **Tables** (and their records), **Views**,
    **Functions**, and **Events** of your database for restoring later.
  prefs: []
  type: TYPE_NORMAL
- en: There's a big **Backup** button with a tape cassette icon on the toolbar of
    Navicat's main window, which will take you to a special view for managing backups,
    where a smaller toolbar appears under the main toolbar. This smaller toolbar has
    smaller buttons for creating a new backup, restoring a backup, or deleting it,
    plus a button for extracting SQL from the backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new backup, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New Backup** button from the object pane toolbar (in the Windows
    version), or right-click anywhere in the object pane itself and select **New Backup**
    from the pop-up menu (Windows & Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window that appears, enter the properties of the backup you want to make,
    such as your own comment for the backup and the objects to be included in the
    backup. (All of the objects are selected by default.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on **Start** to perform the backup with the specified settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navicat also provides some advanced options here, such as compression, table
    locking, and the ability to use a single transaction for InnoDB tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you choose to use compression in the **Advanced** tab, a backup file with
    a `.psc` extension or with a `.psb` extension will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Right-clicking on a backup and selecting **Object Information** from the pop-up
    menu will open an additional pane at the bottom of the window where you can see
    the size and full path of the file, as well as the last modification date. The
    backups are saved as single files in a hierarchy of subfolders under **My Documents**,
    by default. For example, my backups were stored in `C:\Users\GO\Documents\Navicat\MySQL\servers\localhost\sakila\sakila_bu.psc`.
    You can copy or move a backup file in the `.psc` or `.psb` format to another computer
    just like working with any other file on Windows Explorer or Macintosh Finder.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring a backup is even simpler. You can right-click on a backup from the
    list of your backups, and click on **Restore Backup** from the pop-up menu. To
    restore a backup that is created on another machine and copied to the computer
    you're using, click on the **Restore Backup** button on the toolbar. Otherwise,
    right-click on an empty area of the object pane and select **Restore Backup**
    from the pop-up menu, and select the backup file using the open file dialog box.
    Make sure you have the necessary privileges for the create, drop, and insert operations
    unless you're connected to the database with the **root** user.
  prefs: []
  type: TYPE_NORMAL
- en: For deleting an unwanted backup, you can also right-click on it and select **Delete**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Backups can also be created from the command-line interface running the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Navicat Object | Command and parameter | File Extension |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Backup | `Navicat.exe /backup ConnectionName DatabaseName` | `.psc` (compressed)/`.psb`
    (uncompressed) |'
  prefs: []
  type: TYPE_TB
- en: '| Backup Server | `Navicat.exe /backupserver ConnectionName` |'
  prefs: []
  type: TYPE_TB
- en: '| Backup Database | `Navicat.exe /backupdatabase ConnectionName DatabaseName`
    |'
  prefs: []
  type: TYPE_TB
- en: Creating and scheduling batch jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The execution of a series of tasks on a computer or server without manual intervention
    is known as **batch processing**, and it is something that most DBAs do daily
    if not all the time. These tasks are called **jobs** , which are set up so that
    they run in the background unattended, with all the input data preselected through
    scripts or command-line parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Navicat provides a similar functionality allowing you to create batch jobs and
    set schedules, which can be executed at defined intervals or at a specific date
    and time, or both.
  prefs: []
  type: TYPE_NORMAL
- en: Batch jobs can be created for query, report printing, backup, data transfer,
    data synchronization, and data import and export. You can define a list of actions
    to be executed within a single batch job, which can be run manually at will, or
    scheduled to run at a specified time or even periodically.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch to the view related with batch jobs and schedules by choosing
    **View** | **Schedule** from the menu bar or pressing the button with the calendar
    icon in the main toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new batch job, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the empty area in the object pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **New Batch Job** from the pop-up menu, or click on the
    **New Batch Job** button from the object pane toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the properties for the job that basically consists of selecting the actions
    to be performed, by selecting them from available jobs, putting them in the desired
    order, and specifying some advanced settings such as configuring e-mail notification,
    as shown in the following screenshot:![Creating and scheduling batch jobs](img/7461EN_03_12_batch_job.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can set the timing of the execution of this job by pressing the **Set Task
    Schedule** button on the toolbar. This brings in another pop-up window, where
    you can set the periods or frequency of the job under the **Schedule** tab, or
    specify the start date and the optional end date as well as the number of repetitions.
  prefs: []
  type: TYPE_NORMAL
- en: The **Advanced** tab lets you configure e-mail so that a user or a group of
    users can be notified of the results after the batch job is automatically run.
    It is even possible to attach a file output from Export Wizard or Data Transfer
    with the e-mail automatically generated and sent.
  prefs: []
  type: TYPE_NORMAL
- en: To create a batch job based on an existing one, select a job and then click
    on **Design Batch Job**, either on the object pane toolbar, or select it from
    the pop-up menu triggered by right-clicking on the job. After you finish your
    modifications, you can click on the **Save As** button on the toolbar of the editor
    window or Select **File** | **Save as...** from the menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: Another quick and easy way of achieving the same result is by simply copying
    and pasting the job after selecting it and then performing the desired modifications
    on the duplicated job.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have dealt with different techniques of data manipulation,
    transferring data from one database to another, and converting it to and from
    various file formats.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned to synchronize two instances of a database by means of
    both structure and data.
  prefs: []
  type: TYPE_NORMAL
- en: Backup and restore operations, as well as batch job creation and scheduling,
    are also essential in the lifecycle of a database (and in the life of a DBA) and
    you have learned how to use the fast and easy tools Navicat provides to accomplish
    these kinds of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will step into data modeling with Navicat.
  prefs: []
  type: TYPE_NORMAL
