- en: Part II. Module 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Spring MVC Cookbook**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Over 40 recipes for creating cloud-ready Java web applications with Spring
    MVC*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Chapter 1. Setup Routine for an Enterprise Spring Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter correspond to this four-step routine:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Eclipse for JEE developers and Java SE 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Eclipse for Java SE 8, Maven 3, and Tomcat 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the project structure with Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Spring, Spring MVC, and a web structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into this routine for initializing the developments, we are going
    to answer, as an introduction, a couple of questions that should help you understand
    the routine better.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the result of this chapter will also constitute the minimal starting
    point for all the further chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Let''s do it with fun!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this book, we will be acting on behalf of the ZipCloud company.
    ZipCloud aims to build different products in the social and financial industry.
    We are going to build the first product of the company: `cloudstreetmarket.com`
    which will be a wonderful stock exchange platform with social capabilities. This
    project must be an optimal beginning for this little ZipCloud start-up!'
  prefs: []
  type: TYPE_NORMAL
- en: Why such a routine?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whatever your initial objectives may be, it is necessary to make sure that the
    design will not suffer from early stage failures. This routine should cover you
    against this risk.
  prefs: []
  type: TYPE_NORMAL
- en: The idea beyond the routine itself is to share a bootstrap methodology to kick
    off the project base that you need now and that will support your needs tomorrow.
    The routine is also a key to drive your product thoughts toward a sustainable
    architecture which will be easy to refactor and to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new project for an enterprise-level architecture will not kill
    the excitement and creativity!
  prefs: []
  type: TYPE_NORMAL
- en: Why making use of the Eclipse IDE?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is competition in the domain, but Eclipse is popular among the Java community
    for being an active open source solution; it is consequently accessible online
    to anyone with no restrictions. It also provides, among other usages, a very good
    support for web implementations and particularly to MVC web implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Why making use of Maven?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Maven** is a *software project management and comprehension tool*. It is
    an open source project supported by the Apache community and the Apache Software
    Foundation. For nearly 10 years, Maven has given massive benefits. It has also
    shaped a standard structure for Java projects. With its **Project Object Model**
    (**POM**) approach, it provides, to anyone and potentially to any third-party
    software, a uniform and radical way of understanding and building a Java project
    hierarchy with all its dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In early stage architectures, it is critical to consider the following decisions:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening the project definition to potentially different development environments
    and continuous integration tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the dependencies and maybe securing their access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imposing a uniform directory structure within the project hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a self-tested software with self-tested components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing Maven secures these points and fulfills our project's need to make
    our project reusable, secure, and testable (under automation).
  prefs: []
  type: TYPE_NORMAL
- en: What does the Spring Framework bring?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring Framework and its community have contributed to pulling forward the
    Java platform for more than a decade. Presenting the whole framework in detail
    would require us to write more than a book. However, the core functionality based
    on the principles of **Inversion of Control** (**IOC**) and **Dependency Injection**
    (**DI**) through a performant access to the bean repository allows considerable
    reusability. Staying lightweight, it secures great scaling capabilities and could
    probably suit all modern architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Eclipse for JEE Developers and Java SE 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following recipe is about downloading and installing the Eclipse IDE for
    JEE developers and downloading and installing JDK 8 Oracle Hotspot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This first recipe could appear redundant or unnecessary in regard to your education
    or experience. However, having a uniform configuration all along this book will
    provide you with many benefits.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you will certainly avoid unidentified bugs (integration or development).
    You will also experience the same interfaces as seen in the presented screenshots.
    Also, because the third-party products are living, you will not have the surprise
    of encountering unexpected screens or windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The whole first chapter in general requires a step by step cooperation. From
    the next chapter, we will be using GIT and your active involvement will be lightened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download a distribution of the Eclipse IDE for Java EE developers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using an Eclipse Luna distribution in this book. We recommend that
    you install this version in order to match our guidelines and screenshots completely.
    Download a Luna distribution for the OS and environment of your choice from [https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1](https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product to download is not a compiled installer but a zip archive.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel confident enough to use another version (more recent) of the Eclipse
    IDE for Java EE Developers, all of them can be found at [https://www.eclipse.org/downloads](https://www.eclipse.org/downloads).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For upcoming installations, on Windows, a few target locations are suggested
    to be in the root directory (`C:\`). To avoid permission-related issues, it would
    be better if your Windows user is configured to be a Local Administrator. If you
    can't be part of this group, feel free to target installation directories you
    have write access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the downloaded archive into an `eclipse` directory from the steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`C:\Users\{system.username}\eclipse`: Extract it here if you are on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/usr/{system.username}/eclipse`: Extract it here if you are on Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Users/{system.username}/eclipse`: Extract it here if you are on Mac OS X'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select and download JDK 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We suggest that you download the Oracle Hotspot JDK. Hotspot is a performant
    JVM implementation originally built by Sun Microsystems. Now owned by Oracle,
    the Hotspot JRE and JDK are downloadable for free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, choose the product corresponding to your machine through the Oracle website's
    link [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid a compatibility issue later on, do stay consistent with the architecture
    choice (32 or 64 bits) that you have made earlier for the Eclipse archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install JDK 8 on the operating system of your choice using the following instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows, this is a monitored installation initiated with an executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the downloaded file and wait until you reach the next installation step
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the installation-step window, pay attention to the destination directory
    and change it to `C:\java\jdk1.8.X_XX` (`X_XX` refers to the latest current version
    here. We will be using jdk1.8.0_25 in this book. Also, it won't be necessary to
    install an external JRE, so uncheck the public JRE feature.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Linux/Mac, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `tar.gz` archive corresponding to your environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the current directory to where you want to install Java. For easier instructions,
    let's agree on the `/usr/java` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the downloaded `tar.gz` archive to this current directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unpack the archive with the following command line targeting the name of your
    archive: `tar zxvf jdk-8u25-linux-i586.tar.gz` (this example is for a binary archive
    corresponding to a Linux x86 machine)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must end up with the `/usr/java/jdk1.8.0_25` directory structure that contains
    the `/bin`, `/db`, `/jre`, `/include` subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we are going to provide more insights about the version of Eclipse
    we used and about how we chose this specific version of JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse for Java EE developers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have successfully installed the Eclipse IDE for Java EE developers here.
    Comparatively to Eclipse IDE for Java Developers, there are some additional packages
    coming along such as *Java EE Developer Tools*, *Data Tools Platform*, and *JavaScript
    Development Tools*. This version is appreciated for its ability to manage development
    servers as part of the IDE itself, its capability to customize project facets,
    and its ability to support JPA. The Luna version is officially Java SE 8 compatible;
    this has been a decisive factor at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a JVM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choice of the JVM implementation could be discussed over performance, memory
    management, garbage collection, and optimization capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of different JVM implementations, including couple of open source
    solutions such as OpenJDK and IcedTea (RedHat). The choice of JVM really depends
    on the application's requirements. We have chosen *Oracle Hotspot* from experience
    and from reference implementations deployed in production; this JVM implementation
    can be trusted for a wide range of generic purposes. *Hotspot* also behaves very
    well if you have to run Java UI applications. Eclipse is one of them.
  prefs: []
  type: TYPE_NORMAL
- en: Java SE 8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you haven't already played with Scala or Clojure, it is time that you took
    the functional programming train with Java! With Java SE 8, *Lambda expressions*
    reduce the amount of code dramatically providing improved *readability and maintainability*.
    We won't implement this Java 8 feature, but since it is probably the most popular,
    it must be highlighted as it has given a massive credit to the paradigm change.
    It is important, nowadays, to be familiar with these patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Eclipse for Java 8, Maven 3, and Tomcat 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe entails configuration technics to develop efficiently on Eclipse
    with Java, Maven, and Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the different products are installed, there are a couple of steps that
    we need to follow, mainly to make Eclipse work properly with Java SE 8, Maven
    3, and Tomcat 8\. In this recipe, we will also look at how to customize the Eclipse
    configuration file (`Eclipse.ini`) in order to make the most of the platform that
    runs Java and to make sure that it will cope with any significant growth of the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following steps to configure Eclipse on your desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start by creating a shortcut on your desktop to point to the Eclipse
    executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, the executable file is `Eclipse.exe` and is located at the `eclipse`
    directory root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux/Mac, the file is named `Eclipse` and is also is located at the `eclipse`
    directory root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we need to customize the `eclipse.ini` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Eclipse directory, where you have previously extracted the Eclipse archive,
    you can find the `eclipse.ini` file. *It is a text file that contains a few command-line
    options in order to control the Eclipse startup*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Eclipse community recommends to specify the path to our JVM here. Hence,
    depending on your system, add the following two lines at the top of the file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Windows, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux/Mac, add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an optional setting that you can consider:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your development machine has at least 2 GB of RAM, you can enter the following
    options to make Eclipse run faster than the default settings. *This section is
    optional because Eclipse''s default settings are already optimized to suit most
    users'' environment*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If your machine has less than 2 GB of RAM, you can still enter this set of options
    without overriding the default `–Xms` and `–Xmx` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the options under `-vmargs` are arguments that will be passed to the JVM
    at startup. It is important not to mess up the Eclipse options (the top part of
    the file) with the VM arguments (the bottom part).
  prefs: []
  type: TYPE_NORMAL
- en: 'After this we will go through the following steps to start Eclipse and set
    the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the executable described in the Step *2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our project, specify the path: `<home-directory>/workspace`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This path is different for each Operating System:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Users\{system.username}\workspace`: This is the path on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/usr/{system.username}/workspace`: This is on Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Users/{system.username}/workspace`: This is on Mac OS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **OK** and let the Eclipse program start
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The workspace is the place from where you manage your Java projects. It can
    be specific to one application, but not necessarily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to check the JRE definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, a couple of settings need to be verified in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Preferences** menu under **Window** (on Mac OS X the **Preference**
    menu is under the **Eclipse** menu).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the navigation panel on the left-hand side, open the Java hierarchy and click
    on **Installed JREs** under **Java**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the central screen, remove any existing JREs that you may already have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add…** button to add a standard JVM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `C:\java\jdk1.8.0_25` (or `/usr/java/...`) as **JRE home**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And enter `jdk1.8.0_25` as **JRE name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We tell Eclipse to use the Java Runtime Environment of JDK 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing these steps, you should end up with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00798.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will check the compiler compliance level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the navigation panel, click on **Compiler** under **Java**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the **Compiler compliance level** is set to **1.8** in the drop-down
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, we need to check the Maven configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still in the navigation panel of the **Preferences** menu, open the Maven hierarchy
    and navigate to **Maven** | **Installations**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will specify here which Maven installation we plan to use. For the purpose
    of this book, the embedded Maven will be perfect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the navigation panel, go to **Maven** | **User Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the local repository to `<home-directory>/.m2/repository`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this local repository, our local cached versions of the required artefacts
    will reside. It will prevent our environment from having to download them on each
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the **User Settings** field, create a `settings.xml` file in the `.m2`
    directory: `<home-directory>/.m2/settings.xml`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `settings.xml` file and add the following block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '(You can also copy/paste it from the `chapter_1/source_code/.m2` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are *not* on a Windows machine, change `JAVA_HOME` in this file to your
    JDK installation directory (`/usr/java/jdk1.8.0_25`).
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the navigation panel and click on **Maven**. Follow the configuration
    given in this screenshot:![How to do it...](img/image00799.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to save these configuration changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will install Tomcat 8 in the Eclipse IDE. For this, go through these
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download a ZIP archive for the latest Core version of Tomcat8 from the Tomcat
    website: [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the downloaded archive to the following directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, extract the archive at `C:\tomcat8`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux, extract the archive at `/home/usr/{system.username}/tomcat8`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Mac OS X, extract the archive at `/Users/{system.username}/tomcat8`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Depending on your system, you must be able to access the bin directory from
    the hierarchy: `C:\tomcat8\bin, /home/usr/{system.username}/tomcat8/bin or /Users/{system.username}/tomcat8/bin`.'
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, select the **Preferences** menu under **Windows**, and in the navigation
    panel on the left-hand side, open the **Server** hierarchy and then select **Runtime
    Environments**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the central window, click on the **Add…** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step (the **New Server** environment window), navigate to **Apache**
    | **Apache Tomcat v8.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, check this option: **Create a New Local Server**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the details in the window as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00800.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are on Linux (or Mac OS X), replace `C:\tomcat8` with your Tomcat installation
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to review in this section the different elements and concepts that
    this recipe took us through.
  prefs: []
  type: TYPE_NORMAL
- en: The eclipse.ini file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we've already seen, the `eclipse.ini` file controls the Eclipse startup.
    It is an extra component that makes the Eclipse platform very configurable. You
    can find the list of command-line arguments that can be used in their documentation
    at
  prefs: []
  type: TYPE_NORMAL
- en: '[http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html](http://help.eclipse.org/luna/topic/org.eclipse.platform.doc.isv/reference/misc/runtime-options.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to acknowledge the following warnings that this documentation
    mentions:'
  prefs: []
  type: TYPE_NORMAL
- en: All lines after `-vmargs` are passed as arguments to the JVM; all arguments
    and options for Eclipse must be specified before `-vmargs` (just like when you
    use arguments on the command line)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This explains why we have inserted the `–vm` option at the top of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Any use of `-vmargs` on the command line replaces all `-vmargs` settings in
    the `.ini` file unless `--launcher.appendVmargs` is specified either in the `.ini`
    file or on the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the –vm option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting the `-vm` option allows us to be sure of the JVM implementation on which
    Eclipse runs as a program. You might have noticed that we've targeted the JVM
    as a library (`*.dll / *.so`). It has better performance on startup and also identifies
    the program process as the Eclipse executable and not just as the Java executable.
  prefs: []
  type: TYPE_NORMAL
- en: If you wonder which JVM Eclipse uses when a `–vm` option is not set, be aware
    that Eclipse *DOES NOT* consult the `JAVA_HOME` environment variable. (Eclipse
    wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Instead, Eclipse executes the Java command that parses your path environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing JVM arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The suggested JVM argument list comes from Piotr Gabryanczyk''s work on the
    Java memory management model. Initially, for JetBRAINS IntelliJ settings, this
    configuration is also useful for an Eclipse environment. It helps in the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Preventing the garbage collector from pausing the application for more than
    10 ms (`-XX:MaxGCPauseMillis=10`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lowering the level from which the garbage collector starts to 30% of the occupied
    memory (`-XX:MaxHeapFreeRatio=70`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imposing the garbage collector to run as a parallel thread, lowering its interference
    with the application (`-XX:+UseConcMarkSweepGC`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the incremental pacing mode for the garbage collector, which generates
    breaks in the GC job so that the application can definitely stop freezing (`–XX:+CMSIncrementalPacing`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The instantiated objects throughout the program''s life cycle are stored in
    the Heap memory. The suggested parameters define a JVM startup Heap space of 128
    mb (`-Xms`) and an overall 512 mb maximum heap space (`–Xmx`). The heap is divided
    in two subspaces, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Young generation**: New objects are stored in this area. For the leading
    Hotspot or OpenJDK JVMs, the young memory space is divided in two:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Eden`: New objects are stored in this subdivision area. Objects with short
    lives will be deallocated from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Survivor`: This is a buffer between the young and old generation. The survivor
    space is smaller than the Eden and it is also divided in two (the `FROM` and `TO`
    areas). You can adjust the ratio between `Eden` and `Survivor` objects with `-XX:SurvivorRatio`
    (here, `-XX: SurvivorRatio=10` means `YOUNG = 12`, `EDEN = 10`, `FROM = 1` and
    `TO =1`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The minimum size of the young area can be adjusted with `-XX:NewSize`. The maximum
    size can be adjusted with `-XX:MaxNewSize`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Old generation**: When objects in `Eden` or `Survivor` spaces are still referenced
    after enough garbage collections, they are moved here. It is possible to set the
    `Young` area size as a ratio of the `Old` area size with `-XX:NewRatio`. (That
    is, `-XX:NewRatio=2` means `HEAP = 3, YOUNG = 1` and `OLD =2`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The maximum size for the new generation space `-XX:MaxNewSize` must always remain
    smaller than half the heap space (`-Xmx/2`) because the garbage collector may
    move all the `Young` space to the `Old` space.
  prefs: []
  type: TYPE_NORMAL
- en: With Hotspot or OpenJDK, the permanent generation space was used to store information
    related to the classes' definition (structure, fields, methods, and so on.). You
    may have already encountered a `PermGen space OutOfMemoryError` exception when
    the loaded structure becomes too big. In this situation, the solution is to increase
    the `-XX:MaxPermSize` argument. *It is no longer necessary with JDK8*.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, the **Permanent Generation** (**PermGen**) space has been
    replaced by a metadata space that is not part of the heap but of the native memory.
    The default maximum size of this space is unlimited. However, we can still restrict
    it with `-XX:MetaspaceSize` or `-XX:MaxMetaspaceSize`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the JDK compliance level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Downgrading a compliance level allows us to run a lower version of a Java compiler
    than the one the JDK is natively identified to. It impacts the Eclipse builds,
    errors, and warnings and also the JavaDocs. It is obviously not possible to set
    a higher compilation version than the native version of a compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inside Eclipse, most of the Maven configuration comes from the `m2eclipse` plugin
    (also called Maven integration for Eclipse). This plugin is included, by default,
    in Eclipse Luna. It is then not necessary to download it manually. After the Maven
    configuration that we went through, m2eclipse is also very helpful to trigger
    Maven operations from the IDE context and to provide assistance to create Java
    Maven projects. You will learn more about m2eclipse in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: We then installed a basic `settings.xml` file. This file is used to configure
    Maven without being bound directly to any projects. The most common uses of `settings.xml`
    are probably profile definition and credential storage to access the repository
    manager(s).
  prefs: []
  type: TYPE_NORMAL
- en: With Maven profiles, you have the possibility to run a build for a specific
    environment and to match a specific configuration (variable values, set of dependencies,
    and so on.). Maven profiles can be cumulated with each other. They can be activated
    through a command line, declaratively in the Maven settings or from the environment
    configuration such as files being present or missing on the filesystem, the used
    JDK, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our `settings.xml` file, we have defined a compiler profile with its own
    `JAVA_HOME` property. The compiler profile is activated by default to be declaratively
    defined in the `<activeProfiles>` section. Maven will consult the `settings.xml`
    file before looking up the system variables.
  prefs: []
  type: TYPE_NORMAL
- en: A repository manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A repository manager is a third-party application that manages all the required
    binaries and dependencies that a developed application may need. Acting as a buffering
    proxy between development environments and public repositories, a repository manager
    provides control of critical parameters such as build time, availability of dependencies,
    visibility and access restriction, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Famous solutions include *Apache Archiva*, *Artifactory*, *Sonatype Nexus*.
    In the context of our application, we won't make use of a repository manager.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat 8 inside Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eclipse for JEE developers allows the integration of Tomcat with other application
    servers within the development environment. This is made possible through the
    provided **Web Tools Platform** (**WTP**) plugins that can manage web artefacts,
    their compilation, and their deployment into the web server.
  prefs: []
  type: TYPE_NORMAL
- en: In the `servers` tab (made visible earlier), double-clicking on the created
    Tomcat v8.0 server, opens a configuration window and enables the possibility of
    setting up parameters that are normally defined in the `server.xml` Tomcat file,
    which is located in the `tomcat8\conf` directory.
  prefs: []
  type: TYPE_NORMAL
- en: By default, WTP abstracts this configuration and doesn't impact the genuine
    `server.xml` file. This behavior can be changed by activating the **Publish module
    contexts to separate XML files** option in the **Server configuration** window.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more about the Eclipse installation at [http://wiki.eclipse.org/Eclipse/Installation](http://wiki.eclipse.org/Eclipse/Installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about the `Eclipse.ini` file at [http://wiki.eclipse.org/Eclipse.ini](http://wiki.eclipse.org/Eclipse.ini)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about the m2eclipse plugin at [https://maven.apache.org/plugins/maven-eclipse-plugin/](https://maven.apache.org/plugins/maven-eclipse-plugin/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand how to use a repository manager, refer to [http://maven.apache.org/repository-management.html](http://maven.apache.org/repository-management.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Piotr Gabryanczyk article about the garbage collection optimization for
    IDEs can be found at [http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection](http://piotrga.wordpress.com/2006/12/12/intellij-and-garbage-collection)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can know more about memory optimization in general at [http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html](http://pubs.vmware.com/vfabric52/topic/com.vmware.vfabric.em4j.1.2/em4j/conf-heap-management.html)
    and [https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection](https://blog.codecentric.de/en/2012/08/useful-jvm-flags-part-5-young-generation-garbage-collection)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the project structure with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will focus on defining, with Maven, the project structure
    we need for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will initially create two Eclipse projects: one for the application and
    one for the components that ZipCloud as a company could share later on with other
    projects. Take a look at the following image which presents the project components
    that we are going to build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00801.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The application project **cloudstreetmarket-parent** will have three modules.
    Two of them will be packaged as web archives (**war**): the main web application
    and the REST API. One of them will be packaged as a **jar** dependency (cloudstreetmarket-core).'
  prefs: []
  type: TYPE_NORMAL
- en: The company-specific project **zipcloud-parent** will have only one submodule—**zipcloud-core**,
    which will be packaged as **jar**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us create a Maven parent project:'
  prefs: []
  type: TYPE_NORMAL
- en: From Eclipse, navigate to **File** | **New** | **Other**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **New** wizard opens up wherein you can select the type of project within
    a hierarchy. Then, open the **Maven** category, select **Maven Project**, and
    click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The New Maven Project wizard opens as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00802.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to check the **Create a simple project** option. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill up the next wizard as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`edu.zipcloud.cloudstreetmarket` as **Group Id**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloudstreetmarket-parent` as **Artifact Id**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0.0.1-SNAPSHOT` as **Version**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pom` as **Packaging**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CloudStreetMarket Parent` as **Name**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, click on the **Finish** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parent project must appear in the package explorer on the left-hand side
    of the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00803.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We now have to tell m2eclipse which Java compiler version you plan to use in
    this project so that it automatically adds the right JRE system library to the
    submodules we are about to create. This is done through the `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `pom.xml` file to specify the Java compiler version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **pom.xml** file. The **m2eclipse** **Overview** tab shows
    up by default. You have to click on the last tab, **pom.xml**, to access the full
    XML definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this definition, add the following block at the end but still as part of
    the **<project>** node. (*You can also copy/paste this piece of code from the
    cloudstreetmarket-parent's* `pom.xml` *of the* `chapter_1` *source code):*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have probably noticed the **maven-surefire-plugin** declaration as well.
    We will review it soon; it allows us to run unit tests during the build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create submodules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As submodules of the Parent project, we have seen that we needed one web module
    to handle and render the site''s screens, one web module for the REST API, and
    one other module that will be used to package all the business logic (services,
    data access, and so on.) specific to the first product `cloudstreetmarket.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main Webapp module:in Eclipse, navigate to **File** | **New** | **Other**.
    A **New** wizard opens up through which you can select the type of project within
    a hierarchy. Open the **Maven** category, select **Maven Module**, and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The New Maven Module wizard opens up after this; fill it up as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check Create a simple project.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-webapp` as **Module Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00804.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Next** button after which the next step shows up. Enter the
    following entries in that new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **war** as **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `CloudStreetMarket Webapp` as **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Then click on the **Finish** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will go ahead to create and REST API module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are going to repeat the previous operation with different parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'From Eclipse, navigate to **File | New** | **Other**. The selection wizard
    pops up when you go there. After this, open the **Maven** category, select **Maven
    Module**, and click on **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **New Maven Module** wizard, enter the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a simple project** option.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-api` as **Module Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Next** button to proceed to the next step. Enter the following
    entries in that window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **war** as **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `CloudStreetMarket API` as **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Then click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create the core module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this, navigate to **File** | **New** | **Other**. The selection wizard pops
    up when you do so. Open the **Maven** category, select **Maven Module**, and click
    on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **New Maven Module** wizard, enter the following entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a simple project** option.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-core` as **Module Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `cloudstreetmarket-parent` as **Parent project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Next** button to go to the next step. Fill in the fields with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `edu.zipcloud.cloudstreetmarket` as **Group Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  prefs: []
  type: TYPE_NORMAL
- en: This time, select **jar** as **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `CloudStreetMarket Core` as **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Then click on the Finish button.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have the Java perspective activated (in the top-right corner), you should
    see the overall created structure matching the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00805.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will create a company-specific project and its module(s):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's assume that many different categories of dependencies (core, messaging,
    reporting, and so on…) will be part of the company-business project later.
  prefs: []
  type: TYPE_NORMAL
- en: We need a parent project, so from Eclipse, navigate to **File** | **New** |
    **Other**. The selection wizard pops up. Open the Maven category, select Maven
    Project, and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first step of the New Maven Project wizard, as for the Parent project
    we created earlier, only check the **Create a simple Project** and **Use default
    workspace location** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Next** button and fill in the next wizard as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `edu.zipcloud` as **Group Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `zipcloud-parent` as **Artifact Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **pom** as **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `ZipCloud Factory Business Parent` as **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, in the created `pom.xml` file, add the following block inside the `<project>`
    node to create the underlying modules properly and to enable automatic test execution.
    (*You can also copy/paste this piece of code from the zipcloud-parent''s pom.xml
    file of the chapter_1 source code*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are going to create one company-business core module, which will be
    a sub module of the parent project we just created.
  prefs: []
  type: TYPE_NORMAL
- en: For this, navigate to **File** | **New** | **Other**. The selection wizard pops
    up. Open the **Maven** category, select **Maven Module**, and click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **New Maven Module** wizard, enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a simple project** option.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `zipcloud-core` as **Module Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `zipcloud-parent` as **Parent project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Next** button and go to the next step. Here, enter the following
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `edu.zipcloud` as **Group Id**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `0.0.1-SNAPSHOT` as **Version**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **jar** as **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: Select `ZipCloud Factory Core Business` as **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build the two projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the structure is correct, the following Maven command could be successfully
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This command can be launched in the terminal if Maven is installed on the development
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our study case, we will, for now, launch it using the m2eclipse modified
    **Run As** menu: Right click on the zipcloud-parent project and click on **Run
    As** | **Maven Clean**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the Maven console, you should now see this beautiful line at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[INFO] BUILD SUCCESS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, repeat the operation for the install build phase. You should now see the
    following output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Ok, now you should be able to build `cloudstreetmarket-parent` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, right-click on the **cloudstreetmarket -parent** project and click
    on **Run As** | **Maven Clean**. The Maven console should print the following
    after this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, right-click on the **cloudstreetmarket** -parent project and click on
    **Run As** | **Maven Install**. The Maven console should now print the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Scrolling up a bit should display the following trace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maven here, with the help of the maven-surefire-plugin, which we manually added,
    parses all the classes encountered in the `src/test/java` directories. Again,
    this path can be customized.
  prefs: []
  type: TYPE_NORMAL
- en: In the detected test classes, Maven will also run the methods annotated with
    the JUnit `@Test` annotation. A JUnit dependency is required in the project.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going through quite a few concepts about Maven so that
    you can better understand its standards.
  prefs: []
  type: TYPE_NORMAL
- en: New Maven project, new Maven module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The project creation screens we just went through also come from the m2eclipse
    plugin. These screens are used to initialize a Java project with a preconfigured
    `pom.xml` file and a standard directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: The m2eclipse plugin also provides a set of shortcuts to run Maven build phases
    and some handy tabs (already seen) to manage project dependencies and visualize
    the `pom.xml` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The standard project hierarchy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Navigating through the created projects, you should be able to notice a recurring
    hierarchy made of the following directories: `src/main/java`, `src/main/resource`,
    `src/test/java`, and `src/test/resource`. This structure is the default structure
    that Maven drives us through. *This model has become a standard nowadays*. But,
    we can still override it (in the `pom.xml` files) and create our own hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember the **maven-compiler-plugin** definition added in the `pom.xml`
    files of the parent projects, there were the following four lines of code that
    we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These lines allow Maven to use an external JDK for the compiler. It is better
    to have control over which compiler Maven uses, especially when managing different
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, there were the following two lines that might look like an over configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: From a strict Maven point of view, these lines are optional when an external
    JDK is defined with a specified compilerVersion. Initially, with these two lines,
    we can control which Java version we want the default code to be compiled in.
    When maintaining older systems, the existing code might still compile in a previous
    version of Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, m2eclipse specifically expects these two lines in order to add `JRE
    System Library [JavaSE-1.8]` to the build path of the `jar` and `war` modules.
    Now, with these lines, Eclipse compiles these projects in the same way Maven does:
    in Java SE 8.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this dependency still shows up as a different version of Java, you may need
    to right-click on the module and then navigate to **Maven** | **Update Project**.
  prefs: []
  type: TYPE_NORMAL
- en: The project's structure in the IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: About the parent projects in the Eclipse project hierarchy; did you notice that
    the created submodules seem duplicated as standalone projects and as direct children
    of the parent? This is due to the fact that Eclipse doesn't handle hierarchies
    of projects yet in Luna. For this reason, the modules appear as separated projects.
    It might be slightly confusing because the source code appears to be located beside
    the parent projects. *This is not the case in reality, it is only the way they
    are rendered, so we can have all the tools normally bound to the project level*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this time, JetBRAINS IntelliJ IDEA already supports visual hierarchies of
    the projects.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you open a parent project's `pom.xml` file, you should see the `<modules>`
    node populated with the created submodules. This has been done automatically as
    well by m2eclipse. We recommend that you keep an eye on this feature because m2eclipse
    doesn't always update these `<modules>` nodes depending on which way you alter
    the project hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Maven's build life cycles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A build life cycle in Maven is a specific sequence (and a group) of predefined
    operations called phases. There are three existing life cycles in Maven: default,
    clean, and site.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at all the phases that include the default and clean life
    cycles (probably the life cycles the most commonly used by developers).
  prefs: []
  type: TYPE_NORMAL
- en: The clean life cycle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Maven **clean** phase plays a central role. It resets a project build from
    Maven''s perspective. It is usually about deleting the target directory that is
    created by Maven during the build process. Here are some details about the phases
    included in the **clean** life cycle. These details come from the Maven documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Phases | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `pre-clean` | This executes processes that are needed prior to the actual
    project cleaning |'
  prefs: []
  type: TYPE_TB
- en: '| `clean` | This removes all files generated by the previous build |'
  prefs: []
  type: TYPE_TB
- en: '| `post-clean` | This executes processes that are needed to finalize the project
    cleaning |'
  prefs: []
  type: TYPE_TB
- en: The default life cycle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the default life cycle, you can find the most interesting build phases that
    deal with source generation, compilation, resource handling, tests, integration
    tests, and artefact deployment. Here are some details about the phases included
    in the default life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Phases | Descriptions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `validate` | This validates whether the project is correct and all necessary
    information is available. |'
  prefs: []
  type: TYPE_TB
- en: '| `initialize` | This initializes the build state, for example, setting properties
    or creating directories. |'
  prefs: []
  type: TYPE_TB
- en: '| `generate-sources` | This generates source code for inclusion in compilation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `process-sources` | This processes the source code, for example, to filter
    any values. |'
  prefs: []
  type: TYPE_TB
- en: '| `generate-resources` | This generates resources to be included in the package.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `process-resources` | This copies and processes the resources into the destination
    directory, which is ready for packaging. |'
  prefs: []
  type: TYPE_TB
- en: '| `compile` | This compiles the source code of the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `process-classes` | This post processes the generated files from compilation,
    for example, to perform bytecode enhancement on Java classes. |'
  prefs: []
  type: TYPE_TB
- en: '| `generate-test-sources` | This generates any test source code to be included
    in compilation. |'
  prefs: []
  type: TYPE_TB
- en: '| `process-test-sources` | This processes the test source code, for example,
    to filter any values. |'
  prefs: []
  type: TYPE_TB
- en: '| `generate-test-resources` | This creates resources for testing. |'
  prefs: []
  type: TYPE_TB
- en: '| `process-test-resources` | This copies and processes the resources into the
    test destination directory. |'
  prefs: []
  type: TYPE_TB
- en: '| `test-compile` | This compiles the test source code into the test destination
    directory. |'
  prefs: []
  type: TYPE_TB
- en: '| `process-test-classes` | This post processes the generated files from test
    compilation, for example, to perform bytecode enhancement on Java classes. For
    Maven 2.0.5 and above. |'
  prefs: []
  type: TYPE_TB
- en: '| `test` | This runs tests using a suitable unit testing framework. These tests
    should not require the code to be packaged or deployed. |'
  prefs: []
  type: TYPE_TB
- en: '| `prepare-package` | This performs the operations necessary to prepare a package
    before the actual packaging. This often results in an unpacked, processed version
    of the package. (Maven 2.1 and above) |'
  prefs: []
  type: TYPE_TB
- en: '| `package` | This takes the compiled code and packages it in its distributable
    format, such as JAR. |'
  prefs: []
  type: TYPE_TB
- en: '| `pre-integration-test` | This performs actions required before integration
    tests are executed. This may involve things such as setting up the required environment.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `integration-test` | This processes and deploys the package if necessary
    into an environment where integration tests can be run. |'
  prefs: []
  type: TYPE_TB
- en: '| `post-integration-test` | This performs the actions required after integration
    tests have been executed. This may include cleaning up the environment. |'
  prefs: []
  type: TYPE_TB
- en: '| `verify` | This runs checks to verify that the package is valid and meets
    the quality criteria. |'
  prefs: []
  type: TYPE_TB
- en: '| `install` | This installs the package into the local repository to be used
    as a dependency in other projects locally. |'
  prefs: []
  type: TYPE_TB
- en: '| `deploy` | This copies the final package to the remote repository to share
    it with other developers and projects (done in an integration or release environment).
    |'
  prefs: []
  type: TYPE_TB
- en: Plugin goals
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the concept of plugins, Maven acquires a much wider dimension. Maven natively
    provides built-in plugins, but external plugins can be introduced just as other
    dependencies (identified by groupIds and artefactIds).
  prefs: []
  type: TYPE_NORMAL
- en: Each build phase can be attached to zero, one, or more plugin goals. A goal
    represents a specific and concrete task responsible for building or handling a
    project in a certain manner. Some phases have goals bound to them, by default,
    through native plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in life cycle bindings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we have seen the purpose of each phase in the presented two life cycles,
    we must say that, for the default life cycle, depending upon which module packaging
    type we are choosing, only some of these phases are potentially activated for
    goal execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the phases that we skipped in the default life cycle for different
    packaging types:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Default life cycle |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Packaging type | jar/war/ejb/ejb3/rar | ear | maven-plugin | pom |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Activated phases |   | generate-resources | generate-resources |   |'
  prefs: []
  type: TYPE_TB
- en: '| process-resources | process-resources | process-resources |   |'
  prefs: []
  type: TYPE_TB
- en: '| compile |   | compile |   |'
  prefs: []
  type: TYPE_TB
- en: '| process-test-resources |   | process-test-resources |   |'
  prefs: []
  type: TYPE_TB
- en: '| test-compile |   | test-compile |   |'
  prefs: []
  type: TYPE_TB
- en: '| test |   | test |   |'
  prefs: []
  type: TYPE_TB
- en: '| package | package | package | package |'
  prefs: []
  type: TYPE_TB
- en: '| install | install | install | install |'
  prefs: []
  type: TYPE_TB
- en: '| deploy | deploy | deploy | deploy |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 9](part0123.xhtml#aid-3L9L61 "Chapter 9. Testing and Troubleshooting"),
    *Testing and Troubleshooting*, we will practically bind external plugins goals
    to identified build phases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, calling: mvn clean install on a jar packaged-module will result
    in executing the following phases: clean, process-resources, compile, process-test-resources,
    test-compile, test, package, and install.'
  prefs: []
  type: TYPE_NORMAL
- en: About Maven commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When Maven is told to execute one or more phases targeting a specific project's
    `pom.xml` file, it will execute the requested phase(s) for each of its modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for every single requested phase, Maven will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify which life cycle the phase belongs to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look for the packaging of the current module and identify the right life cycle
    binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute all the phases in the hierarchy of the identified life cycle bindings,
    which are located before the requested phase in the hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the term execute all the phases, we mean execute all the underlying detected
    and attached plugin goals (native plugins or not).
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, calling `mvn clean install` on a `jar` packaged module will execute
    the following phases: `clean`, `process-resources`, `compile`, `process-test-resources`,
    `test-compile`, `test`, `package`, and `install`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may wonder why we have created these projects and modules in regard to our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: How did we choose the jar module's name?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: About the Maven structure, the best names for nondeployable modules often emphasize
    a functional purpose, a specific concept created by the business, or are driven
    by the product (cloudstreetmarket-chat, cloudstreetmarket-reporting, cloudstreetmarket-user-management,
    and so on.). This strategy makes the dependency management easier because we can
    infer whether a new module requires another module or not. Thinking about controllers,
    services, and DAO layers at a macro scale doesn't really make sense at this stage,
    and it could lead to design interference or circular dependencies. These technical
    subcomponents (service, DAO, and so on) will be present or not, as needed, in
    each functional module as Java packages but not as JAR-packaged dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: How did we choose the names for deployable modules?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choosing a name for a deployable module (`war`) is a bit different different
    from choosing a name for a JAR-packaged module. The deployable archive must be
    thought of as scalable and potentially load balanced. It is fair to assume that
    the requests that will target the application to retrieve HTML contents can be
    distinguished from the ones that will return REST contents.
  prefs: []
  type: TYPE_NORMAL
- en: With this assumption, in our case it has been our wish to split the `war` into
    two. Doing so may raise the question of how the *web sessions* are maintained
    between the two webapps. We will answer this point later on.
  prefs: []
  type: TYPE_NORMAL
- en: Why did we create core modules?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created the core modules, firstly, because it is certain that, in the `cloudstreetmarket`
    application and also in the company-shared project, we will have POJOs, exceptions,
    constants, enums, and some services that will be used horizontally by almost all
    the modules or applications. If a concept is specific to a created functional
    module, it must not be part of core modules.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it is probably better to *start big grained* to *refine later* rather
    than thinking about modules that may be implemented differently or even not implemented
    at all. In our case, we are a start-up, and it is not silly to say that the 5
    to 10 features we are going to implement can constitute the core business of this
    application.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also recommend that you install **Code Style Formatters**. Triggered from
    the **Save Event**, we have, with these formatters, the ability to restyle our
    code automatically with a uniform predefinition. Having such formatters in a team
    is much appreciated since it guarantees the same rendering while comparing two
    files with a versioning tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Spring, Spring MVC, and a web structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add third-party dependencies to our `pom.xml` files
    using inheritance. We will load `Spring application contexts` and create the first
    controller of our application. Finally, we will deploy and start the web app in
    Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have Eclipse ready and Maven configured properly, the fun can begin.
    We need to specify all the necessary Spring dependencies in our `pom.xml` files,
    and we need to set up Spring so that it loads and retrieves its context for every
    module.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to organize and optionally expose web resources, such as JSPs,
    JavaScript files, CSS files, and so on. If you've completed this configuration,
    we should end up with a static welcome page provided by the Tomcat server, started
    without exceptions!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first set of changes relate to the parent projects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will define dependencies and build options for those parent projects. Let’s
    do it with the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the cloudstreetmarket-parent `pom.xml` from the `chapter_1` source code
    directory and select the **pom.xml** tab (underneath the main window).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste into the cloudstreetmarket-parent's **pom.xml** file the `<properties>`,
    `<dependencyManagement>`, and `<build>` blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Now, repeat the operation for zipcloud-parent.
  prefs: []
  type: TYPE_NORMAL
- en: Open the zipcloud-parent's `pom.xml` file from the **chapter_1** source code
    and click on the **pom.xml** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste into your zipcloud-parent's **pom.xml** the `<properties>` and
    `<dependencyManagement>` blocks. You should already have copied over the `<build>`
    section in the *third recipe*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will define dependencies and build options for web modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the cloudstreetmarket-api's `pom.xml` from the **chapter_1** source code
    and select the **pom.xml** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste into your cloudstreetmarket-api's `pom.xml` the `<build>` and
    `<dependencies>` blocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, repeat the operation for cloustreetmarket-webapp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the cloudstreetmarket-webapp's `pom.xml` from the **chapter_1** source
    code directory and click on the **pom.xml** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste into your cloudstreetmarket-webapp's **pom.xml** file the `<build>`
    and `<dependencies>` blocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, we define dependencies for jar modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the cloudstreetmarket-core's `pom.xml` from the **chapter_1** source code
    and click on the **pom.xml** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste into your cloudstreetmarket-core's **pom.xml** the entire `<dependencies>`
    block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we place the web resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **chapter_1** source code, copy and paste the entire **src/main/webapp/***
    directory into your **cloudstreetmarket-webapp** project. You need to end up with
    the same **webapp** directory structure as the **chapter_1** source code:![How
    to do it...](img/image00806.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, perform the same operation for **cloudstreetmarket-api**. Copy and paste
    from the **chapter_1** source code the entire **src/main/webapp/*** branch into
    your **cloudstreetmarket-api** project. You need to end up with the same webapp
    node and children as the **chapter_1** source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00807.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we target a runtime for the web modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Eclipse, right-click on the **cloudmarket-api** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Properties** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the navigation panel, select **Targeted Runtimes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the central window, check the **Server Apache Tomcat v8.0** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** and repeat the fifth operation on **cloudstreetmarket-webapp**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A few Eclipse warnings in the **index.jsp** files must have disappeared after
    this.
  prefs: []
  type: TYPE_NORMAL
- en: If you still have Warnings in the project, your Eclipse Maven configuration
    may be out of synchronization with the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'This step should clean your existing project warnings (if any):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select all the projects in the project hierarchy, except the servers, as follows:![How
    to do it...](img/image00808.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click somewhere in the selection and click on **Update Project** under
    **Maven**. The **Warnings** window at this stage should disappear!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s deploy the `wars` and start Tomcat:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the **servers** view in Eclipse. To do so, perform the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Show view** | **Other**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Server** directory and select servers. You should see the following
    tab created on your dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00809.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To deploy the web archives, go through the following operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the view we just created, right-click on the **Tomcat v8.0 Server at
    localhost** server and select **Add and Remove…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, which is the **Add and Remove** window, select the two available
    archives and click on **Add** and then on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start the application in Tomcat, we need to complete these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Servers** view, right-click on the **Tomcat v8.0 Server at localhost**
    server and click on **Start**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Console** view, you should have the following at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you scroll up through these logs, you shouldn't have any exceptions!
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you try to reach `http://localhost:8080/portal/index.html` with
    your browser, you should receive the following HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00810.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A static access to an HTML page remains a modest visual achievement for this
    chapter. All along this book, you will discover that we haven't diminished the
    importance of the environment and the context Spring MVC acts in.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through this recipe, we have been moving across web resources and Maven dependencies
    related to Spring, Spring MVC, and the web environment. Now, we will go through
    the way that Maven dependency and plugin management are performed. We will then
    talk about the Spring web application context and finally about the organization
    and packaging of web resources.
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance of Maven dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two strategies concerning the inheritance of dependencies between
    parent projects and children modules. They both are implemented from the parent
    project. On the one hand, we can choose to define these dependencies directly
    from the `<dependencies>` node, shaping a basic inheritance in this way. On the
    other hand, to set up a managed inheritance, we can define the `<dependencies>`
    node as a child node of `<dependencyManagement>`. Let's have a look at the differences
    between the two.
  prefs: []
  type: TYPE_NORMAL
- en: Basic inheritance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With a basic inheritance, all the dependencies specified in the parent's `pom.xml`
    file are automatically inherited into the child module with the same attributes
    (scope, version, packaging type, and so on) unless you override them (redefining
    these dependencies with the same couple `groupId`/`artifactId`).
  prefs: []
  type: TYPE_NORMAL
- en: On the one hand, it provides the option of using the versions of the dependencies
    we want in the modules we want. On the other hand, we can end up with a very complex
    dependencies schema and huge `pom.xml` files in the children modules. Also, managing
    version conflicts with external transitive dependencies can be a pain.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A transitive dependency is a required dependency with the needed dependency.
    Transitive dependencies have been automatically imported since Maven 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: There are no standards in this inheritance type for external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Managed inheritance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the `< dependencyManagement>` mechanism, dependencies defined in the parent
    `pom.xml` are not automatically inherited in children modules. However, the dependency
    attributes (scope, version, packaging type, and so on) are pulled from the parent
    dependency's definition, and therefore, the redefinition of these attributes is
    made optional.
  prefs: []
  type: TYPE_NORMAL
- en: This process drives us towards a centralized dependency definition where all
    the children modules use the same versions of dependencies unless a specific dependency
    requires a custom one.
  prefs: []
  type: TYPE_NORMAL
- en: Including third-party dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Among the dependencies copied over, you might have noticed a few Spring modules,
    some test, web, logging, and utility dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The idea has been to start with a basic web development tool box, which is enhanced
    with all the Spring modules. We will visit most of the dependencies actually included
    when we face a particular situation.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Framework dependency model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As presented in the following diagram taken from the [spring.io](http://spring.io)
    website, these days, the Spring Framework is currently made of 20 modules that
    are grouped in different areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Spring Framework dependency model](img/image00811.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These modules have been included in the parent POMs as managed dependencies.
    This will allow us, later on, to quickly cherry-pick the needed ones, narrowing
    down a selection for our `wars`.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring MVC dependency
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Spring MVC module is self-contained in the `spring-webmvc` jar. Spring MVC
    in a web application is a fundamental element, as it handles incoming client requests
    and smoothly monitors the business operations from controllers. It finally offers
    a number of tools and interfaces capable of preparing responses in the format
    the clients expect them in.
  prefs: []
  type: TYPE_NORMAL
- en: All this workflow comes along with the spring-webmvc jar output HTML content
    or web services.
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC is entirely integrated in the Spring Framework, and all its components
    are standard with regard to the Spring architecture choices.
  prefs: []
  type: TYPE_NORMAL
- en: Using Maven properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In each parent `pom.xml` file, we have defined a `<properties>` block as part
    of the `<project>` section. These properties are user-defined properties bound
    to a project, but we can also define such properties within a **Maven Profile**
    option. Like variables, properties are referenced in the POMs with their name
    surrounded by **${…}**.
  prefs: []
  type: TYPE_NORMAL
- en: There is a standard on defining property names using periods as word separators.
    More than a standard, it is a uniform notation to access both user-defined variables
    and attributes of objects that constitute the Maven model. The Maven model is
    the public interface of Maven and starts from the project level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The POM **XML Schema Definition** (**xsd**) is generated from this Maven model.
    It can sound abstract but in the end, the Maven model is only a set of POJOs with
    getters and setters. Have a look at the JavaDoc of the Maven model from the URL
    below, to identify concepts, specific to pom.xml files (Build, Dependency, Plugin,
    and so on.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, we can retrieve a node value defined in a POM and navigate the
    Maven model hierarchy using a period-based expression language that targets the
    getters.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `${project.name}` references the current `project.getName()`, `${project.parent.groupId}`,
    the current `project.getParent().getGroupId()`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Defining user properties that match an existing path of the Maven model is a
    way of overriding its value. That's what we have done for `project.build.sourceEncoding`.
  prefs: []
  type: TYPE_NORMAL
- en: Maven also offers the possibility to reach properties defined in the `settings.xml`
    files such as `${settings.localRepository}`; but also environment variables such
    as `${env.JAVA_HOME}`; and Java System properties such as `${java.class.path}`,
    `${java.version}`, `${user.home}`, or `${user.name}`.
  prefs: []
  type: TYPE_NORMAL
- en: The web resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you remember, we copied/pasted the entire `src/main/webapp` directory from
    the `chapter_1` source code. The `webapp` directory name is a Maven standard.
    The `webapp` folder in Eclipse doesn't need to be tagged as a source folder for
    the build path, as it would create a complex and useless package hierarchy for
    static files. Preferably, it appears as a plain directory tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `webapp` directory must be seen as the document root of the application
    and positioned at the root level of the WAR. The public static web resources under
    `webapp`, such as HTML files, Javascript, CSS, and image files, can be placed
    in the subdirectories and structure of our choice. However, as described in the
    *Servlet 3.0 Specification*, the `WEB-INF` directory is a special directory within
    the application hierarchy. All its contents can never be reached from outside
    the application; its content is accessible from the servlet code calling for `getResource`
    or `getResourceAsStream` on `ServletContext`. The specification also tells us
    that the content of a `WEB-INF` directory is made up of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `/WEB-INF/web.xml` deployment descriptor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/WEB-INF/classes/` directory for servlet and utility classes. The classes
    in this directory must be available to the application class loader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/WEB-INF/lib/*.jar` area for Java ARchive files. These files contain servlets,
    beans, static resources, and JSPs packaged in a JAR file and other utility classes
    useful to the web application. The web application class loader must be able to
    load classes from any of these archive files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is good practice to create a `jsp` directory inside the `WEB-INF` folder
    so that the `jsp` files cannot be directly targeted without passing through an
    explicitly defined controller.
  prefs: []
  type: TYPE_NORMAL
- en: JSP applications do exist, and by definition, they will not follow this practice.
    These type of applications may be suited to certain needs, but they also don't
    specifically promote the use of an MVC pattern nor a great separation of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: To use JSPs in a web application, the feature must be enabled in `web.xml` with
    the definition of a servlet of the `org.apache.jasper.servlet.JspServlet` type
    mapped to the JSP files location.
  prefs: []
  type: TYPE_NORMAL
- en: The target runtime environment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have experienced warnings in the `index.jsp` files. We have sorted them
    out by adding a target runtime to our projects. We also saw that Tomcat comes
    with the Eclipse Compilator for Java as a JAR library. To perform the JSP compilation,
    the `tomcat8\lib` directory must include the following JAR libraries: `jsp-api`,
    `servlet-api` and `el-api`, and so on. Specifying a target runtime for a project
    in Eclipse emulates and anticipates situation where the application will be run
    from an external Tomcat container (setup with those libraries). This also explains
    why the `jsp-api` and `el-api` dependencies are defined in the parent POMs with
    a *provided* scope.'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring web application context
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `web.xml` files, we defined a special type of Servlet, the Spring MVC
    `DispatcherServlet`, and we named it `spring`. This servlet covers the widest
    `/*` URL pattern. We will revisit the `DispatcherServlet` in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A `DispatcherServlet` has its own discovery algorithm that builds up `WebApplicationContext`.
    An optional `contextConfigLocation` initialization parameter is provided that
    points to a `dispatcher-context.xml` file. This parameter overrides the default
    expected filename and path (`/WEB-INF/{servletName}-servlet.xml`) for the `WebApplicationContext`
    defined in the `DispatcherServlet` discovery logic.
  prefs: []
  type: TYPE_NORMAL
- en: With the `load-on-startup` attribute set to `1`, as soon as the servlet container
    gets ready, a new `WebApplicationContext` gets loaded and scoped only for the
    starting servlet. Now, *we don't wait for the first client request to load WebApplicationContext*.
  prefs: []
  type: TYPE_NORMAL
- en: A Spring `WebApplicationContext` file usually defines or overrides the configuration
    and beans that Spring MVC offers to the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Still in the `web.xml` file, an `org.sfw.web.context.ContextLoaderListener`
    listener is set up. The purpose of this listener is to start and shut down another
    Spring `ApplicationContext`, which will be the root one following the container's
    life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load more than one spring context file easily, the trick here is to use
    the classpath notation (which is relative) and the star (`*`) character in the
    resource path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Doing so allows us to *load all the context files encountered in the classpath
    that match a standard notation and location*. This approach is appreciated for
    the consistency it imposes but also for the way it targets context files in underlying
    jars.
  prefs: []
  type: TYPE_NORMAL
- en: The aggregation of all the matching context files creates an `ApplicationContext`
    root with a much broader scope, and the `WebApplicationContext` inherits it. The
    beans we define in the root context become visible to the `WebApplicationContext`
    context. We can override them if needed. However, the `DispatcherServlet` context's
    beans are not visible to the root context.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Maven is, above all, a plugin's execution framework. Every task run by Maven
    corresponds to a plugin. A plugin has one or more goals that are associated individually
    to life cycle phases. Like the dependencies, the plugins are also identified by
    a `groupId`, an `artifactId`, and a version. When Maven encounters a plugin that
    is not in the local repository, it downloads it. Also, a specific version of Maven
    targets, by default, a number of plugins that match the life cycle phases. These
    plugins are frozen on fixed versions and therefore on a defined behavior—you need
    to override their definition to get a more recent version or to alter their default
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven compiler plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The maven-compiler-plugin is a Maven core plugin. The core plugins are named
    as such because their goals are triggered on Maven core phases (clean, compile,
    test, and so on.). Noncore plugins relate to packaging, reporting, utilities,
    and so on. It is good practice to redefine the maven-compiler-plugin to control
    which version of the compiler is to be used or to trigger some external tools'
    actions (the m2eclipse project management tool, actually).
  prefs: []
  type: TYPE_NORMAL
- en: 'As its name suggests, the maven compiler plugin compiles the Java sources.
    For that, it uses the `javax.tools.JavaCompiler` class and has two goals: `compiler:compile`
    (triggered as part of the compile phase to compile the `java/main` source classes)
    and `compiler:testCompile` (triggered as part of the test-compile phase to compile
    the `java/test` source classes).'
  prefs: []
  type: TYPE_NORMAL
- en: The Maven surefire plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The maven-surefire-plugin is also a Maven core plugin that has only one goal:
    `surefire:test`. This is invoked as part of the default life cycle (the test phase)
    to run unit tests defined in the application. It generates reports `(*.txt` or
    `*.xml`), by default, under the `${basedir}/target/surefire-reports` location.'
  prefs: []
  type: TYPE_NORMAL
- en: The Maven enforcer plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The maven-enforcer-plugin is very useful to define environmental conditions
    as *critical* for the project. It has two goals: `enforcer:enforce` (bound, by
    default, to the validate phase, where it executes each defined rule once per module)
    and `enforcer:display-info` (it displays the detected information on execution
    of the rules).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting standard rule is probably `DependencyConvergence`: it
    analyzes all the used dependencies (direct and transitive) for us. In case of
    divergence of a version, it highlights it and stops the build. When we face this
    kind of conflict, it is amazingly easy to decide between the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Excluding the lowest version from the classpath
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not upgrading the dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also quickly talked about the `<pluginManagement>` section, which was associated
    to the maven-enforcer-plugin. In this case, this is because m2eclipse doesn't
    support this plugin. Thus, to avoid a warning in Eclipse, it is necessary to add
    this section so that m2eclipse skips the enforce goal.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven war plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Using the maven-war-plugin, we redefined in our web POMs. We have again overridden
    the default behavior of this plugin that is used to package web modules. This
    is definitely necessary if you have a non-Maven standard project structure.
  prefs: []
  type: TYPE_NORMAL
- en: We may want to package our web resources in a different way that how it is organized
    in our IDE. We may need, for some reason, to exclude some resources from the war
    packaging or we may even want to give a name to the built war so that it can be
    used by the servlet container that matches a specific context path in the application
    URLs `(/api`, `/app`, and so on). Filtering, moving web resources around, and
    managing the generated war is the purpose of this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the web resources are copied to the WAR root. To override the default
    destination directory, specify the target path `*`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This has been quite a broad overview about concepts that naturally require
    deeper interest:'
  prefs: []
  type: TYPE_NORMAL
- en: 'About the way Maven manages its dependencies, we would suggest you to go through
    the Maven documentation on this topic at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sonatype ebook talks nicely about Maven properties. You can find this ebook
    at: [https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties](https://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html#resource-filtering-sect-settings-properties)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Maven model API documentation can again be found at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html](http://maven.apache.org/ref/3.0.3/maven-model/apidocs/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Concerning the servlet 3.0 specification that we mentioned earlier, more information
    can be found about the `web.xml` file definition and about the structure of a
    WebArchive at: [http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf](http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, for more information about Maven plugins; we absolutely recommend you
    visit the Maven listing at [http://maven.apache.org/plugins](http://maven.apache.org/plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [spring.io](http://spring.io) website from Pivotal, and especially the
    Spring Framework overview page, can also refresh, or introduce a few key concepts.
    Follow the address: [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Maven checkstyle plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One other interesting enough plugin which could also be highlighted here is
    the maven-checkstyle-plugin. When a team is growing, we sometimes need to guarantee
    the maintenance of certain development practices or we may need to maintain specific
    security-related coding practices. Like the maven-enforcer-plugin, the maven-checkstyle-plugin
    makes our builds assertive against this type of violation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find out more about this plugin, again in the Maven documentation, at: [http://maven.apache.org/plugins/maven-checkstyle-plugin](http://maven.apache.org/plugins/maven-checkstyle-plugin).'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2. Designing a Microservice Architecture with Spring MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a controller with simple URL mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a fallback controller using the ViewResolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and customizing a responsive single page webdesign with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a model in the View using the JSTL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a common WebContentInterceptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a client-side MVC pattern with AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to complete the first chapter before starting this new one. The first
    chapter installs the basics for the trading platform we are building. It also
    creates a modular toolkit that every recipe will be using.
  prefs: []
  type: TYPE_NORMAL
- en: This second chapter sets the product on an acceleration ramp. It will shape
    the whole chain of responsibilities and draft the big picture of the Microservice
    architecture. Once more, we will establish a necessary structure for the chapters
    to come, but on another level.
  prefs: []
  type: TYPE_NORMAL
- en: The User eXperience paradigm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a couple of years now, we've assisted an amazingly active frontend revolution.
    Since the rise of HTML 5 and CSS3, with the common development platforms for mobile
    (iOS, Android, and so on), and with the amount of connected devices, so many doors
    and opportunities have been opened to the developer communities. The frequency
    of new JavaScript libraries popping-up in the open source field has made it quite
    difficult to follow.
  prefs: []
  type: TYPE_NORMAL
- en: But it's a revolution for good! It targets the customer and user experience.
    The customer nowadays wants to interact with a brand or a product from the desktop,
    laptop, TV, tablet, mobile, and soon the car. Network connection speeds vary as
    well from more than 150 megabytes per second to very few bytes per second. The
    customer can also expect offline features or at least a decent user experience.
    It's obvious that new challenges have come out of this complexity to improve the
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: As our reachability through different means has largely increased, our level
    of exposure to spam, direct solicitations, advertising, and marketing in general
    has never been higher. Interestingly, we are now far more sensitive and assertive
    to every single message that retains our attention online. As it takes us a fraction
    of second to decide whether something is worth it or not, we reject a poor design
    for the same reason. We are more demanding and saturated targets, and every brand
    has to follow the latest UX standards to make us interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: Microservice architectures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen already the massive benefits in terms of communication, image,
    and development that Internet organizations have generated by opening their APIs
    to the public (Facebook, Twitter, Amazon, and so on). Such radical changes in
    IT infrastructures are now becoming the norm for smaller companies and start-ups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern architectures provide documented Public APIs and device-specific installation
    packages for their clients: mobile apps or responsive HTML contents delivered
    under specific shots. REST APIs are also a navigable dimension for more autonomous
    modules of the **Internet of** **Things** (**IoT**).'
  prefs: []
  type: TYPE_NORMAL
- en: Maybe the main concern remains how to handle the load on the server side, but
    more computation is transferred to client devices and REST architectures are by
    definition stateless and consequently a good support for scalability.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a controller with simple URL mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe introduces the Spring MVC controller with its simplest implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discover later on, and especially in [Chapter 3](part0091.xhtml#aid-2MP361
    "Chapter 3. Working with Java Persistence and Entities"), *Working with Java Persistence
    and Entities,* that Spring MVC is a great tool to build a REST API. Here, we will
    focus on how to create a controller that prints some content in the response.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with this recipe, we will be using GIT to follow each iteration that
    has been made to develop the `cloudstreetmarket` application. After the initial
    setup, you will appreciate how smoothly you can upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe comes with two initial sections for installing and configuring GIT.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing GIT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To download GIT, go to the GIT download page at [https://git-scm.com/download](https://git-scm.com/download).
    Select the right product corresponding to your environment (Mac OS X, Windows,
    Linux, or Solaris).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install GIT for Linux and Solaris, execute the suggested installation commands
    using the system's native package manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Mac OS X, double-click on the downloaded `dmg` file to extract the package
    on your hard drive. Navigate to the extracted directory and double-click on the
    `pkg` file. Select all the default options, one step after an other, up to the
    **Successful Installation** screen. Close the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, execute the downloaded program and follow the default options
    for every step up to these screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjusting your PATH environment**: Select the **Use Git from the Windows
    Command Prompt** option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Choosing the SSH executable**: Select the **Use OpenSSH** option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring the line endings conversions**: Select the **Checkout Windows-style**
    and **commit Unix-style line endings** options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring the terminal emulator to use Git Bash**: Select **Use Windows''
    default console window**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring experimental performance tweaks**: Don''t tick the **Enable file
    system caching** checkbox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let the installation finish and click on the **Finish** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'For verification, open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command should display the installed version. The presented installation
    guidelines were associated with `GIT 2.6.3`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GIT in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will first initialize the local repository from the terminal. Go to your
    workspace location: `cd <home-directory>/workspace`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `<home-directory>` with your own home path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command to create a local Git repository at this location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then, enter the `git fetch` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select both your parent projects and right-click on one of them. Go to **Team**
    | **Add to index**:![Configuring GIT in Eclipse](img/image00812.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-right panel, click on the **Git** **perspective**:![Configuring
    GIT in Eclipse](img/image00813.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this perspective with the ![Configuring GIT in Eclipse](img/image00814.jpeg)
    button if you don't have it yet.
  prefs: []
  type: TYPE_NORMAL
- en: From the left hierarchy (the **Git** perspective), select **Add an existing
    local Git repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A contextual window opens. Target the location of the local Git repository we
    just created (it should be the current workspace directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new repository should now appear in **Git** perspective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, right-click and select **Checkout** to
    see the latest version of the branch **origin/v1.x.x**.![Configuring GIT in Eclipse](img/image00815.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted, Checkout as **New Local Branch**:![Configuring GIT in Eclipse](img/image00816.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The actual workspace should now be synchronized with the branch v1.x.x. This
    branch reflects the state of the environment at the end of [Chapter 1](part0079.xhtml#aid-2BASE1
    "Chapter 1. Setup Routine for an Enterprise Spring Application"), Setup *Routine
    for an Enterprise Spring Application.*![Configuring GIT in Eclipse](img/image00817.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **zipcloud-parent** to execute **Run as | Maven clean** and **Run
    as | Maven install**. Then, do the same operation on `cloudstreetmarket-parent`.
    You will observe `BUILD SUCCESS` each time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, right-click on one project and go to **Maven** | **Update Project**.
    Select all the projects of the workspace and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you still have a red warning in one of your projects (as shown in the previous
    screenshot), you will probably have to reattach a target runtime environment to
    **cloudstreetmarket-api** and **cloustreetmarket-webapp** (as per [Chapter 1 ,](part0012.xhtml#aid-BE6O1
    "Chapter 1. Getting Started with Spring Core") *Setup Routine for an Enterprise
    Spring Application*, *2nd recipe, 7th step*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the terminal, go to the local GIT repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Reiterate steps 13 and 14\. (Be prepared to repeat these two steps every time
    after pulling new changes.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **cloudstreetmarket-webapp** module, a new package is now present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this package, an `InfoTagController` class has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Make sure the two `wars` are deployed in the Tomcat server. Start the Tomcat
    server and access the `http://localhost:8080/portal/info/helloHandler` URL with
    your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should see a simple hello displayed as HTML content*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `cloudstreetmarket-webapp/src/main/webapp/WEB-INF/dispatcher-context.xml`
    file, the following bean definition is added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following method and members in the `InfoTagController` class are also
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, access the `http://localhost:8080/portal/info/server` URL with your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should see the following content rendered as an HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to draft an overview of Spring MVC as a Framework. We will then
    review how a Controller is configured from the `DispatcherServlet`, the controller-level
    annotations, and from the method-handler signatures.
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring MVC implements two common design patterns: the front controller design
    pattern and the MVC design pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: Front controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A system designed as a Front controller exposes a single entry point for all
    incoming requests. In Java Web environments, this entry point is usually a servlet—a
    unique servlet that dispatches and delegates to other components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of Spring MVC, this unique servlet is the `DispatcherServlet`.
  prefs: []
  type: TYPE_NORMAL
- en: Servlets are standards in the Java web. They are associated to predefined URL
    paths and are registered in deployment descriptors (the `web.xml` files). Parsing
    deployment descriptors, the servlet-container (such as Apache Tomcat) identifies
    the declared servlets and their URL mapping. At runtime, the servlet-container
    intercepts every HTTP client request and creates a new Thread for each one of
    them. Those Threads will call the matching relevant servlets with Java-converted
    request and response objects.
  prefs: []
  type: TYPE_NORMAL
- en: MVC design pattern
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The MVC design pattern is more of an architectural style. It describes the
    application as a whole. It encourages a clear separation of concerns between three
    different layers that the request thread has to pass through: the **Model**, the
    **View**, and the **Controller**—the Controller, the Model, and then the View
    to be accurate.'
  prefs: []
  type: TYPE_NORMAL
- en: '![MVC design pattern](img/image00818.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When a client request is intercepted by the servlet-container, it is routed
    to the `DispatcherServlet`. The `DispatcherServlet` sends the request to one Controller
    (one controller method-handler), which has a configuration matching the request
    state (if a match is found).
  prefs: []
  type: TYPE_NORMAL
- en: The Controller orchestrates the business logic, the model generation and ultimately
    chooses a View for the model and the response. In this perspective, the model
    represents a populated data structure handled by the controller and given to the
    view for visualization purposes.
  prefs: []
  type: TYPE_NORMAL
- en: But the three components (Model, View, and Controller) can also be visualized
    at a Macro scale as independent static layers. Each of these components is a layer
    and a placeholder for every individual constituent, part of the category. The
    **Controller layer** contains all the registered controllers as well as the Web
    Interceptors and converters; the Model generation layer (and Business logic layer)
    contains the business services and data access components. The View layer encloses
    the templates (JSPs for example) and other web client-side components.
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC flow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Spring MVC flow can be represented with the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring MVC flow](img/image00819.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We previously mentioned that Spring MVC implements a front controller pattern.
    The entry point is the `DispatcherServlet`. This `DispatcherServlet` relies on
    a `HandlerMapping` implementation. With different strategies and specificities,
    the `HandlerMapping` resolves a Controller method-handler for the request.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `DispatcherServlet` has a Controller method-handler, it dispatches
    the request to it. The method-handler returns a View name (or directly the View
    itself) and also the populated model object to the `DispatcherServlet`.
  prefs: []
  type: TYPE_NORMAL
- en: With a View name, the `DispatcherServlet` asks a `ViewResolver` implementation
    to find and select a View.
  prefs: []
  type: TYPE_NORMAL
- en: With the request, a View, and a Model, the `DispatcherServlet` has everything
    to build the client response. The view is processed with all these elements and
    the response is finally returned to the servlet-container.
  prefs: []
  type: TYPE_NORMAL
- en: DispatcherServlet – the Spring MVC entrypoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained, the `DispatcherServlet` is quite a central piece in Spring MVC.
    It intercepts the client requests that target predefined URL paths for the application.
    It maps them to handlers that belong to business logic operators (Controllers,
    Interceptors, Filters, and so on). It also provides a set of tools, available
    as beans for solving recurring web development issues and techniques such as serving
    a centralized and modular View layer, handling internationalisation, themes, handing
    exceptions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before everything, the `DispatcherServlet` is a servlet and is defined as such
    in the `web.xml` file with a servlet configuration and its servlet-mapping. The
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In our application, in the **cloudstreetmarket-webapp**, the `DispatcherServlet`
    is named spring and covers the full context-path of the application: `/*`.'
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen that each `DispatcherServlet` has a restricted-scope `WebApplicationContext`
    that inherits the beans from the root `ApplicationContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, for the `WebApplicationContext`, Spring MVC looks in the `/WEB-INF`
    directory for a configuration file named `{servletName}-servlet.xml`. We have,
    however, overridden this default name and location through the initialization
    parameter `contextConfigLocation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the `web.xml`, you can see that the root application context (`classpath*:/META-INF/spring/*-config.xml`)
    starts with the `ContextLoaderListener`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Annotation-defined controllers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spring MVC controllers are the place where client requests really start to be
    processed by the business-specific code. Since *Spring 2.5*, we have been able
    to use annotations on controllers so we don't have to explicitly declare them
    as beans in configuration. This makes their implementation much easier to extend
    and understand.
  prefs: []
  type: TYPE_NORMAL
- en: '@Controller'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A `@Controller` annotation tags a class as a Web controller. It remains a Spring
    Stereotype for presentation layers. The main purpose of defining a Spring Stereotype
    is to make a target type or method discoverable during the Spring classpath scanning
    which is activated by package with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There is not much custom logic related to this annotation. We could run a Controller
    with other Stereotype annotations (`@Component` or `@Service`) if we don't bother
    making the application a cleaner place.
  prefs: []
  type: TYPE_NORMAL
- en: '@RequestMapping'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `@RequestMapping` annotations define handlers onto Controller classes and/or
    onto controller methods. These annotations are looked-up among stereotyped classes
    by the `DispatcherServlet`. The main idea behind the `@RequestMapping` annotations
    is to define a primary path mapping on the class-level and to narrow HTTP request
    methods, headers, parameters, and media-types on the methods.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this narrowing, the `@RequestMapping` annotation accepts comma-separated
    parameters within parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Available parameters for `@RequestMapping` are summarized in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter and type | Use/description (from JavaDoc) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name (String)` | Assign a name to the mapping. |'
  prefs: []
  type: TYPE_TB
- en: '| `value (String[])` | The path mapping URIs (for example, `/myPath.do`). Ant-style
    path patterns are also supported (for example, `/myPath/*.do`). |'
  prefs: []
  type: TYPE_TB
- en: '| Path mapping URIs may contain placeholders (for example, `/${connect}`) against
    local properties and/or system properties and environment variables. |'
  prefs: []
  type: TYPE_TB
- en: '| A path implements URI templates that give access to selected parts of a URL
    through patterns, variables, placeholders, and matrix variables (see section URI
    Templates). |'
  prefs: []
  type: TYPE_TB
- en: '| At the method level, relative paths (for example, `edit.do`) are supported
    within the primary mapping expressed at the type level. |'
  prefs: []
  type: TYPE_TB
- en: '| `method``(RequestMethod[])` | GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE,
    TRACE. |'
  prefs: []
  type: TYPE_TB
- en: '| `params (String[])` | A sequence of `myParam=myValue` style expressions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Expressions can be negated using the `!=` operator,as in `myParam!=myValue`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `headers (String[])` | A sequence of `My-Header=myValue` style expressions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Specifying only the header name (for example, `My-Header`) is supported (allowed
    to have any value). |'
  prefs: []
  type: TYPE_TB
- en: '| Negating a header name (for example, "!My-Header") is also supported (the
    specified header is not supposed to be present in the request). |'
  prefs: []
  type: TYPE_TB
- en: '| Also supports media type wildcards (`*`), for headers such as Accept and
    Content-Type. |'
  prefs: []
  type: TYPE_TB
- en: '| `consumes (String[])` | The consumable media types of the mapped request.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Only mapped if the `{@code Content-Type}` matches one of these media types.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Negating an expression (for example, `!text/xml`) is also supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `produces (String[])` | The producible media types of the mapped request.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Only mapped if the `{@code Accept}` matches one of these media types. |'
  prefs: []
  type: TYPE_TB
- en: '| Negating an expression (for example, `!text/plain`) is also supported. It
    matches all requests with a `{@code Accept}` other than "text/plain". |'
  prefs: []
  type: TYPE_TB
- en: All these parameters can be used both at the type and method level. When used
    at the type level, all method-level parameters inherit the parent-level narrowing.
  prefs: []
  type: TYPE_NORMAL
- en: Controller method-handler signatures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several constituents make a Controller method-handler. Here''s another example
    of such a handler with Spring MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We have just talked about how to use the `@RequestMapping` annotation. With
    regard to the method signature, this annotation can only be placed before the
    return-type.
  prefs: []
  type: TYPE_NORMAL
- en: Supported method arguments types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Declaring specific types of arguments for handler methods can get Spring to
    automatically inject in them references to external objects. Objects related to
    the request lifecycle, the session, or to the application configuration. With
    the benefit of being scoped for the method, those argument types are presented
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Supported arguments | Use/description | Packages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ServletRequest /``HttpServletRequest` | Injects the servlet request/response.
    | `javax.servlet.http.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `ServletResponse /``HttpServletResponse` |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpSession` | Injects the HTTP session bound to the servlet request. If
    null, Spring creates a new one.`synchronizeOnSession` must be set on an `AbstractController`
    or in `RequestMappingHandlerAdapter` if sessions should be sharedconcurrently
    across multiple requests. |'
  prefs: []
  type: TYPE_TB
- en: '| `WebRequest / NativeWebRequest` | Injects a wrapper for access to request
    parameters and request/session attributes only. | `org.springframework.web.context.request.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Locale` | Injects the local e of the request using the configured `LocaleResolver`.
    | `java.util.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputStream / Reader` | Provides a direct access to the request/response
    payload. | `java.io.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `OutputStream / Writer` |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpMethod` | Injects the current method of the request. | `org.springframework.http.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Principal` | Using the Spring security context, it injects the authenticated
    account. | `java.security.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpEntity<?>` | Spring converts and injects the inbound request to a custom
    type using `HttpMessageConverter`. It also provides access to the request headers.
    | `org.springframework.http.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `Map` | Instantiates for us a `BindingAwareModelMap` to be used in the view.
    | `java.util.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `Model` | `org.springframework.ui.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `ModelMap` |'
  prefs: []
  type: TYPE_TB
- en: '| `RedirectAttributes` | Injects and repopulates a map of attributes and flash
    attributes maintained over request redirection | `org.springframework.web.servlet.mvc.support.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Errors` | Injects the validation results of the argument located just before
    in the argument list. | `org.springframework.validation.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `BindingResult` |'
  prefs: []
  type: TYPE_TB
- en: '| `SessionStatus` | Allows tagging with `setComplete`(Boolean), the completion
    of a session. This method clears the session attributes defined at the type level
    with @SessionAttributes. | `org.springframework.web.bind.support.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `UriComponentsBuilder` | Injects a Spring URL builder UriComponentsBuilder.
    | `org.springframework.web.util.*` |'
  prefs: []
  type: TYPE_TB
- en: Supported annotations for method arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A set of native annotations for method-handler arguments has been designed.
    They must be seen as handles that configure the web behavior of controller methods
    in regard to incoming requests or the response yet to be built.
  prefs: []
  type: TYPE_NORMAL
- en: They identify abstractions for handy Spring MVC functions such as request parameter
    binding, URI path variable binding, injection-to-argument of request payloads,
    HTML form-parameter binding, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '| Supported annotation arguments | Use/description | Package |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@PathVariable` | Injects an URI Template variable into an argument. | `org.springframework.web.bind.annotation.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@MatrixVariable` | Injects name-value pairs located in URI path segments
    into an argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `@RequestParam` | Injects a specific request parameter into an argument.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@RequestHeader` | Injects a specific request HTTP Header into an argument.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@RequestBody` | Allows direct access to the request payload injecting it
    into an argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `@RequestPart` | Injects the content of a specific part (meta-data, file-data…)
    of a multipart/form-data encoded request into an argument of the matching type
    (MetaData, MultipartFile…) |'
  prefs: []
  type: TYPE_TB
- en: '| `@ModelAttribute` | Populates automatically an attribute of the Model using
    the URI template.This binding is operated before the method handler processing.
    |'
  prefs: []
  type: TYPE_TB
- en: 'These annotations have to be placed just before the method argument to be populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Supported return Types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Spring MVC, with different possible controller method return Types, allows
    us to specify either the response sent back to the client or the necessary configuration
    for targeting or populating with variables an intermediate View layer. Depending
    upon what we want to do or the actual application state, we have the choice among
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Supported return Types | Use/description | Packages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Model` | Spring MVC creates an implementation of the Model Interface for
    the handler method.The Model objects are populated manually within the handler-
    method or with `@ModelAttribute`.The view to render needs to be mapped to the
    request with RequestToViewNameTranslator. | `org.springframework.ui.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `ModelAndView` | A wrapper object for the Model with a View and a view name.
    If a view name is provided, Spring MVC will attempt to resolve the associated
    View. Otherwise, the embedded View is rendered.The Model objects are populated
    manually within the method or with `@ModelAttribute`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Map` | Allows a custom Model implementation.The view to render needs to
    be mapped to the request with `RequestToViewNameTranslator`. | `java.util.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `View` | Allows the rendering of a custom View object.Spring MVC creates
    an implementation of the Model interface for the handler method.The objects of
    the model are populated manually within the method or with the help of `@ModelAttribute`.
    | `org.springframework.web.servlet.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `String` | If a `@ResponseBody` annotation is not specified on the handler
    method, the returned String is processed as a View name (View identifier). | `java.lang.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpEntity<?> / ResponseEntity<?>` | Two wrapper objects to easily manage
    the response headers and converted-by-Spring body (with `HttpMessageConverters`).
    | `org.springframework.http.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `HttpHeaders` | Provides a wrapper object for HEAD responses. | `org.springframework.http
    .*` |'
  prefs: []
  type: TYPE_TB
- en: '| `Callable<?>` | Can produce asynchronously a typed object when the Thread
    is controlled by Spring MVC. | `java.util.concurrent.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `DeferredResult<?>` | Can produce asynchronously a Typed object when the
    Thread is not controlled by Spring MVC. | `org.springframework.web.context.request.async.*`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ListenableFuture<?>` | `org.springframework.util.concurrent.*` |'
  prefs: []
  type: TYPE_TB
- en: '| `void` | When the view is externally resolved with `RequestToViewNameTranslator`
    or when the method prints directly in the response. |   |'
  prefs: []
  type: TYPE_TB
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `InfoTagController.infoTagServer()` method-handler, we have used the
    `@ResponseBody` annotation before the return Type. This annotation has been borrowed
    from the REST-specific tools. When you don't need to process a View, the `@ResponseBody`
    directive will use the registered Spring converters to marshal the returned object
    into the expected format (XML, JSON, and so on). It will then write the marshalled
    content to the Response body (as the Response payload).
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a String object with no more configurations, it is printed out
    as such in the Response body. We could have used the `ResponseEntity<String>`
    return Type to achieve the same goal.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a fallback controller using ViewResolver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe introduces some more advanced concepts and tools related to Controllers
    such as `ViewResolvers`, URI Template Patterns, and Spring MVC's injection-as-argument.
    The recipe is quite simple but there is more to talk about.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will keep working from the same codebase state as the previous recipe where
    we have pulled the v2.2.1 tag from the remote repository. It will only be about
    creating one Controller with its handler method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **cloudstreetmarket-webapp** module and in the package `edu.zipcloud.cloudstreetmarket.portal.controllers`,
    the following `DefaultController` has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will explain in detail how this method-handler serves as a fallback interceptor.
  prefs: []
  type: TYPE_NORMAL
- en: Access the `http://localhost:8080/portal/whatever` or `http://localhost:8080/portal/index`
    URL with your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should also receive the HTML content we saw earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00820.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This second recipe revisits the use of the `@RequestMapping` annotation. With
    no longer a fixed URI as a path value but with an opened-pattern (fallback). The
    recipe also makes use of the configured View resolver that we didn't use before.
  prefs: []
  type: TYPE_NORMAL
- en: URI template patterns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The template word is recurring in the Spring terminology. It usually refers
    to generic support Spring APIs to be instantiated in order to fill specific implementations
    or customisations (REST template to make REST HTTP requests, JMS template to send
    JMS messages, WS template to make SOAP webservices requests, JDBC template, and
    so on). They are bridge the developer needs to Spring core features.
  prefs: []
  type: TYPE_NORMAL
- en: Under this light, URI templates allow configuring generic URIs with patterns
    and variables for controller end points. It is possible to instantiate URI builders
    that will implement URI templates but developers probably mostly use URI templates
    in the support they provide to `@RequestMapping` annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Ant-style path patterns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have made use of these types of pattern to define the path value for our
    fallback handler method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This specific case, with the `*` wildcard, allows whichever request URI starts
    with a `/` after the application display name to be eligible for being handled
    by this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The wildcard can match a character, a word, or a sequence of words. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'A limitation would be to use another slash in the last sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember the difference with the table here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/*` | All resources and directories at the level |'
  prefs: []
  type: TYPE_TB
- en: '| `/**` | All resources and directories at the level and sublevels |'
  prefs: []
  type: TYPE_TB
- en: We have been using the single wildcard on purpose in the `cloudstreetmarket-webapp`
    application. It might be more suited for other types of applications to redirect
    every unmatched URI to a default one. In our case of a single page application
    that will be strongly REST oriented, it is nicer to inform the client with a `404`
    error when a resource hasn't been found.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not the only option to use wildcards at the end of path patterns. We
    could have implemented the following type of pattern if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: (not for fallback purposes, though).
  prefs: []
  type: TYPE_NORMAL
- en: We will see that Spring MVC, to select one handler compares, all the matching
    Path patterns and selects the most specific of them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the Controller type-level, we haven't specified a `@RequestMapping`. If we
    had done so, the specified path for the method-level would have been concatenated
    to type-level one (implementing a narrowing).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following definition would have defined the path pattern `/portal/default/*`
    for our fallback controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Path pattern comparison
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A pathpattern comparison is done by Spring MVC when a given URL matches more
    than one registered path-pattern, to choose which handler the request will be
    mapped to.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pattern considered the most specific will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first criterion is the number of counted variables and wildcards in the
    compared path patterns: the pattern having the lowest number of variables and
    wildcards is considered the most specific.'
  prefs: []
  type: TYPE_NORMAL
- en: To discriminate two path-patterns that have the same cumulated number of variables
    and wildcards, remember that the one with the lowest number of wildcards will
    be the most specific and then the longest path will be the most specific.
  prefs: []
  type: TYPE_NORMAL
- en: Finally a pattern with double wildcards is always less specific than a pattern
    without any.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this selection, let''s consider the following hierarchy going
    from the most to the least specific:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/foo`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/{foo}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/{foo}/{bar}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/default/*/{foo}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/{foo}/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/**/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/**`'
  prefs: []
  type: TYPE_NORMAL
- en: ViewResolvers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In `dispatcher-context.xml` of **cloudstreetmarket-webapp**, we have defined
    the `viewResolver` bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: A `viewResolver` bean is a specific instance of a predefined class used to serve
    an organized and uniform set of view layers. In the case that we have configured,
    the `viewResolver` bean is an instance of `InternalResourceViewResolver`, which
    can serve JSP pages, handle the JSTL and tiles. This class also inherits `UrlBasedViewResolver`
    that can navigate the application resources and can bind a logical view name to
    a View resource file. This capability prevents the creation of extramappings.
  prefs: []
  type: TYPE_NORMAL
- en: In our configuration, we have defined the view repository `(/WEB-INF/jsp/*.jsp)`
    and we can directly refer to `index.jsp` with the String `index`.
  prefs: []
  type: TYPE_NORMAL
- en: It is better practice to set up the JSP repository under `/WEB-INF` so those
    JSPs cannot be targeted publicly. Rather than a JSP templating, we could have
    used Velocity or Freemarker respectively using the view resolvers `VelocityViewResolver`
    or `FreeMarkerViewResolver`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will talk about the `ContentNegotiatingViewResolver` later on when
    we build the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section highlights particularly the @PathVariable annotation. This annotation
    is an annotation for controller method-handler arguments (we have introduced all
    of them in the previous recipe).
  prefs: []
  type: TYPE_NORMAL
- en: '@PathVariable to read variables in URI template patterns'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will find later, on several examples, the method-level `@RequestMapping`
    annotations . Those annotations will sometimes be related to `@PathVariable` annotations
    on the method-handler arguments. For now, let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As announced before, `@PathVariable` tells Spring MVC where and how to realize
    its injection-as-argument from the request URI. The framework will parse the current
    URI Template pattern to extract the variable named `param` and will inject the
    matching value in the current URI into the targeted method-argument.
  prefs: []
  type: TYPE_NORMAL
- en: We also declare an `HTTPEntity` to be returned as a response. This `HTTPEntity`
    will be a wrapper of a String generic type. Inside the method-handler, we instantiate
    this wrapper with the necessary String element.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we would call for the `/portal/example/foo` URI, it would be displayed as
    a response from the body of the returned `HTTPEntity`: the String `foo`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With another interesting feature, we could have built this last scenario with
    the following declaration for `@PathVariable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not providing a value to the annotation, Spring MVC will by default look in
    the URI Template pattern for a variable of the same name as the targeted argument.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore other features with regard to `@RequestMapping` and `@PathVariable`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and customizing a responsive single page webdesign with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is a UI Framework initially created by Mark Otto and Jacob Thornton
    at Twitter. It is an amazing source of styles, icons, and behaviors, abstracted
    to define and enrich components. Bootstrap offers an easy, rational, and unified
    set of patterns for defining styles. It had no equivalent before. If you have
    never used it, you will be excited to get so much visual feedback from a quick
    definition of the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In June 2014 it was the number 1 project on GitHub with over 73,000 stars and
    more than 27,000 forks. Their documentation is very fluid and easy to go through.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use Bootstrap to set up the web-design basics for our
    CloudStreet Market project from an existing Bootstrap theme. We will remake the
    `index.jsp` page to render a better looking welcome page that can be previewed
    with the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00821.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three major steps in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Bootstrap theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing a Bootstrap theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating responsive content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the Git Perspective in Eclipse, checkout the latest version of the branch
    `v2.x.x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00822.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing a Bootstrap theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `chapter_2` directory, you can find a `freeme.zip` archive. It is a responsive
    Bootstrap template downloadable for free. This zip comes from the [bootstrapmaster.com](http://bootstrapmaster.com)
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this archive, you'll see a `css` directory, a `js` directory, an `img`
    directory, and finally an `index.html` file. Opening the `index.html` file with
    a web browser should render the following home page:![Installing a Bootstrap theme](img/image00823.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are using this template as a base for the webapp module.
  prefs: []
  type: TYPE_NORMAL
- en: All the JavaScript files located in the `freeme/js` directory have been copied
    over to the `/cloudstreetmarket-webapp/src/main/webapp/js` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the CSS files located in the `freeme/css` directory have been copied over
    to the `/cloudstreetmarket-webapp/src/main/webapp/css` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the pictures located in `freeme/img` have been copied over to the `/cloudstreetmarket-webapp/src/main/webapp/img`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The content of the `freeme/index.html` file has been copied and pasted into
    the `/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp/index.jsp` file, as
    UTF-8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, the `freeme/licence.txt` has been copied and pasted to the `/cloudstreetmarket-webapp/src/main/webapp/WEB-INF/jsp`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, calling `http://localhost:8080/portal/index` with a web browser
    displayed exactly the same visual you saw earlier, but served by our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customising a Bootstrap theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will detail in this section what has been done in order to adapt the downloaded
    template to our use case.
  prefs: []
  type: TYPE_NORMAL
- en: All the images previously located in `cloudstreetmarket-webapp\src\main\webapp\img\logos`
    have been removed and replaced with six new images representing brands of technical
    products that we have been using through out this application and this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `index.jsp` file located in the `cloudstreetmarket-webapp` module has
    been implemented the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following two lines have been added to the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<!-- start: Meta -->` section has been replaced with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<!--start: Logo -->` section has been replaced with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The navigation menu definition has been changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<!-- start: Hero Unit -->` and `<!-- start: Flexslider -->` sections have
    been removed and `<div class="row">` coming after the navigation menu (`<!--end:
    Navigation-->`) has been emptied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<!-- start: Row -->` section to the `<!-- end: Row -->` section, which
    is located after the `<!-- end Clients List -->`, has been removed along with
    the `<hr>` just after it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The footer section `<!-- start: Footer Menu -->` to `<!-- end: Footer Menu
    -->` has been replaced with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The section: `<!-- start: Photo Stream -->` to `<!-- end: Photo Stream -->`
    has been replaced with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As a last change in the `index.jsp` file, the copyright section has been adapted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the previously copied `cloudstreetmarket-webapp/src/main/webapp/css/style.css`
    file, the following classes have been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: At this point, after all these changes, restarting Tomcat and calling the same
    URL `http://localhost:8080/portal/index` resulted in the following state:![Customising
    a Bootstrap theme](img/image00824.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating responsive content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will focus in this section on the changes that have been made to fill the
    welcome page with responsive content. By responsive, understand that the content
    will be rendered under a style appropriate for the device size and orientation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.jsp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `<div class="row">` has been added the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previously added *landingGraphContainer*, we have inserted a generated
    graph that renders the evolution of specific markets during the last opened day.
    The graph uses the `morris.js` library ([http://morrisjs.github.io/morris.js](http://morrisjs.github.io/morris.js)),
    which also relies on the `raphael.js` library ([https://cdnjs.com/libraries/raphael](https://cdnjs.com/libraries/raphael)).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the file, the `<!-- start: Java Script -->` section to the
    `<!-- end: Java Script -->` section has been added the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the`cloudstreetmarket-webapp\src\main\webapp\js` directory, the `morris.min.js`
    and `raphael.js` libraries have been copied and pasted from their respective websites.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back to the `index.jsp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The previously created `<div id=''containerCommunity''>` has been filled with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The section here uses the feedEk jQuery plugin. It comes with its own CSS and
    JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `cloudstreetmarket-webapp\src\main\webapp\js` directory includes the `FeedEk.js`
    file related to the feedEk jQuery plugin. This plugin can be found online ([http://jquery-plugins.net/FeedEk/FeedEk.html](http://jquery-plugins.net/FeedEk/FeedEk.html)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `cloudstreetmarket-webapp\src\main\webapp\css` directory also has the related
    `FeedEk.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Still in `index.jsp`, under the `<!-- start: CSS -->` comment, the `FeedEk
    css` document has been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `style.css` file, before the first media query definition `(@media only
    screen and (min-width: 960px)`), the following style definitions have been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Finally, two new images (profile pictures) have been added to `cloudstreetmarket-webapp\src\main\webapp\img`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to dynamically resize a browser window that renders: `http://localhost:8080/portal/index`.
    You should observe a responsive and adaptive style as in the following picture:![Creating
    responsive content](img/image00825.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand our Bootstrap deployment, we are going to review now how it has
    been installed as a predesigned theme. We will then discover some key features
    of the Bootstrap Framework—not only the implemented features because, logically
    enough, only a few features of the Framework can visually be used on one single
    page example.
  prefs: []
  type: TYPE_NORMAL
- en: The theme installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The theme we have obtained is no more than a classical static theme, as you
    can find thousands of them over the Internet. They are made by web designers and
    distributed for free or commercially. This one is made with the basic structure
    of HTML files, a JS directory, a CSS directory, and an IMG directory.
  prefs: []
  type: TYPE_NORMAL
- en: The theme installation is quite straightforward to understand, since we have
    just placed the JavaScript files, CSS files, and images in their expected locations
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Bootstrap core features are self-contained in `bootstrap.js`, `bootstrap.css`,
    and `bootstrap-responsive.css`. You should not really have to tweak these files
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap highlights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The implemented theme (FreeME) uses Bootstrap 2\. We are going to review a couple
    of features that have been implemented in the template and for the needs of our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap scaffolding
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Bootstrap scaffolding helps with designing the HTML structure usually built
    from a grid model. The Bootstrap strategy on this topic is described in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Grid system and responsive design
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Bootstrap offers a styleframe to handle a page-specific grid system. The key
    point is in the default grid-system made up of 12 columns and designed for a 940px
    wide nonresponsive container.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap responsive features are activated with the use of `<meta name="viewport"…>`
    tag and with the import of the `boostrap-responsive.css` file. The container width
    can extend from 724px to 1170px in that case.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also, below 767px, the columns become fluid and stack vertically.
  prefs: []
  type: TYPE_NORMAL
- en: These Bootstrap specifications define quite a drastic set of constraints but
    Bootstrap somehow creates an easy-to-understand design uniformity for its implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of our template, the viewport metatag is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are not familiar with this tag, its main purpose is to define device-specific
    sizes in the document. From these sizes, rules are defined for orientation-specific
    and device-specific rendering. These rules that are bound to style definitions
    are called mediaqueries. You can find an example of a mediaquery in the style.css
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This media query overrides the style that is specific to the id footer menu
    only where the device presents a width greater than 960px.
  prefs: []
  type: TYPE_NORMAL
- en: Defining columns
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To define columns within the grid system, Bootstrap drives us towards the use
    of a `row` div tagged as a `row` class element. Then, the idea is to define subdivs
    marked with custom `span*` class elements where the `*` characters represents
    subdivisions of the 12-column grid we have to deal with.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following two possible designs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining columns](img/image00826.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The two columns on the left example can be rendered from the DOM definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The two columns on the right example can be rendered from the DOM definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in mind, the grid of our welcome page is actually the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining columns](img/image00827.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Offsetting and nesting
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Offsetting a column allows you to create a fixed-sized decay corresponding
    to one or more invisible columns. For example, consider the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This DOM definition will correspond to the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Offsetting and nesting](img/image00828.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A column can also be nested inside another column redefining a new row. The
    sum of the newly created columns must correspond to the parent''s size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Fluid gridding
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We were saying earlier that, with Boostrap2, below 767px *the columns become
    fluid and stack vertically*. The template gridding can be changed from static
    to fluid turning `.row` classes to `.row-fluid`. Rather than fixed pixels sized
    columns, this system will use percentages.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap CSS utilities
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Bootstrap also provides a few pre-designed elements such as buttons, icons,
    tables, forms and also utilities to support typography or images.
  prefs: []
  type: TYPE_NORMAL
- en: Uniform Buttons
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Default styled buttons can be created from the `<a>` and `<button>` tags with
    only addition of the `.btn` class element. The created default gray button with
    a gradient can then be declined in different colour variations. For example, **by
    default**, the following classes combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.btn .btn-primary`: This produces an intense ultramarine blue button to identify
    the primary action among other buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-info`: This produces a moderate turquoise blue button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-success`: This produces a positive green button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-warning`: This produces a warning orange button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-danger`: This produces a dangerous red button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-inverse`: This produces a black button with white text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.btn .btn-link`: This produces a link while maintaining a button behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These buttons are also resizable declaratively by adding a `.btn-large` class,
    adding a `.btn-small` class, or adding a `.btn-mini` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uniform Buttons](img/image00829.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A button can be disabled by adding it as a **disabled** attribute. Similarly,
    a `<a>` tagged button can be disabled with the addition of a `.disabled` class.
    We didn't make use of buttons yet, but it is a great feature to be presented at
    this point.
  prefs: []
  type: TYPE_NORMAL
- en: Icons
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Bootstrap 2 comes with an impressive set of 140 dark gray icons available as
    sprites and provided by Glyphicons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Icons](img/image00830.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These icons are normally available commercially but they are also usable for
    free as part of the Bootstrap product. However Bootstrap asks us to provide an
    optional backlink to [http://glyphicons.com](http://glyphicons.com).
  prefs: []
  type: TYPE_NORMAL
- en: All these icons can be pulled from the DOM with a simple class within a `<i>`
    tag such as `<i class="icon-search"></i>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amazing thing is that you can actually embed these icons in every suitable
    Bootstrap component. For example, the button definition: `<a class="btn btn-mini"
    href="#"><i class="icon-star"></i> Star</a>`, produces the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Icons](img/image00831.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tables
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'We have implemented a Bootstrap table for the market activity overview. We
    have basically shaped the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way as we can define a button class overridden with customization
    classes, we have defined a generic Bootstrap table with the class `.table`, and
    then we have made use of the following customization classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.table .table-hover`: This enables a hover state on table rows within a `<tbody>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.table .table-condensed`: This makes tables more compact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.table .table-bordered`: This adds borders and rounded corners to the table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.table .table-striped`: This adds zebra-striping to any table row within the
    `<tbody>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap components
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The framework has other pre-designed elements identified as Components. Among
    them, dropdowns, button groups, breadcrumbs, pagination, Navbars, labels and badges,
    thumbnails, alerts, progress bars, and so on. Here we only present some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Navbars
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The Bootstrap navigation bars provide support for a basic navigation menu.
    They are not by default fixed to the top of the page; they must be included in
    a `.container`. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The most basic feature in the navbar is the activable link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navbars](img/image00832.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The example above can be designed from the following DOM definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We strongly recommend reading the Bootstrap documentation. More details can
    be found on how to implement other features. For example, Bootstrap provides tools
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: Form elements such as input texts, search fields, and submit buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different positioning variations such as fixed-to-top (with `.navbar-fixed-top`),
    fixed-to-bottom (with `.navbar-fixed-bottom`), at the opposite of the full-width
    navbar that scrolls away with the page (with `.navbar-static-top`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collapsible responsive navbars (`.nav-collapse.collapse`) that allow significant
    space savings. With the use of the data-toggle HTML5 attribute, dynamic handling
    is performed with no extra JavaScript configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero units
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There was a hero unit defined in the provided template. We've just moved it
    a bit to suit our responsive needs.
  prefs: []
  type: TYPE_NORMAL
- en: It is a lightweight, flexible component to showcase key content on your site.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hero units](img/image00833.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The example above can be designed from the following DOM definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Alerts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Bootstrap alerts are great to quickly generate a predefined style for a warning
    message or another contextual message. A Bootstrap alert comes with an **optional**
    dismiss button (which will hide the alert with no extraJavaScript configuration).
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This definition produces the output presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alerts](img/image00834.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An Alert is defined with the class `.alert` on a `<div>` tag , from which contextual
    color variations can be set up, providing extra overriding classes such as `.alert-success`,
    `.alert-info`, or .`alert-error`.
  prefs: []
  type: TYPE_NORMAL
- en: Badges and labels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Bootstrap labels are very nice for enriching content. They render particularly
    well in list or in tables. Find here an overview of the possible contextual variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Badges and labels](img/image00835.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The labels here would be defined with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The badges would be defined with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is much more to Bootstrap than this *tiny* overview for enriching official
    documentation. Again, the official documentation is very well done and very comprehensible.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://getbootstrap.com](http://getbootstrap.com) for the documentation
    related to the latest supported version of the framework. Go to [http://getbootstrap.com/2.3.2](http://getbootstrap.com/2.3.2)
    for the documentation related to the version we use in our project.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement more features in the coming chapters and care will be taken
    to highlight them wherever possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you like Bootstrap and feel you want to use it in your projects, you must
    consider Version 3.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap 3 is not directly retro-compatible with Bootstrap 2 but it implements
    a very similar gridding system and slightly different markups.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bootstrap 3 new features**: Here''s a preview of important changes from Bootstrap
    2 to Bootstrap 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New flat-styled design**: The new design is easily noticeable with the end
    of 3D and textures on buttons, navbars and other menus. They have now gone for
    a new flat style with no gradients. It certainly goes along with the actual global
    design trend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Column naming span* renamed to col-***: In addition to the row-fluid class
    that is no longer available as such (all rows are now fluid automatically) for
    less confusion, the column naming pattern has been rethought for more consistency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile-first**: The responsive features of the framework are now natively
    included in the `bootstrap.js` and `bootstrap.css` files (there is no more `bootstrap-responsive.js`
    or `bootstrap-responsive.css`). It is now possible to drive media-query duties
    directly from the DOM using a set of new device-specific classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a model in the View, using the JSTL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to populate the Spring MVC View with data and how to render
    this data within the View.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we don't have any real data to be displayed in our View. For
    this purpose, we have created three DTOs and two service layers that are injected
    from their Interface into the controller.
  prefs: []
  type: TYPE_NORMAL
- en: There are two dummy service implementations that are designed to produce a fake
    set of data. We will use the **Java Server Tags Library** (**JSTL**) and the **JSP
    Expression Language** (**JSP EL**) to render the server data in the right places
    in our JSP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After checking out the `v2.x.x` branch (in the previous recipe), a couple of
    new components are now showing-up in the **cloudstreetmarket-core** module: two
    interfaces, two implementations, one enum, and three DTOs. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see they refer to the three created DTOs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'This last DTO refers to the `Action` enum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the previously created `DefaultController` in `cloudstreetmarket-webapp`
    has been altered to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'And there are the two dummy implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.jsp` has been altered with the addition of the following section
    below the graph container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The market overview table, especially the body, has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The container for the community activity has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'At the bottom of the file, a hardcoded set of JavaScript data is now populated
    from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These changes don't produce fundamental UI improvements but they shape the data
    supply for our View layer.
  prefs: []
  type: TYPE_NORMAL
- en: The approach to handle our data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are going to review here the server side of the data-supply implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Injection of services via interfaces
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Forecasting application needs to feed the frontpage in dynamic data, the choice
    has been made to inject two service layers `marketService` and `communityService`
    into the controller. The problem was that we don't yet have a proper Data Access
    layer. (This will be covered in [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building
    a REST API for a Stateless Architecture"), *Building a REST API for a Stateless
    Architecture*!). We need the controller to be wired to render the front page though.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring the controller needs to be loosely coupled to its service layers. With
    the idea of creating dummy Service implementations in this chapter, the wiring
    has been designed using interfaces. We then rely on Spring to inject the expected
    implementations in the service dependencies, typed with the relevant Interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Note the types `IMarketService` and `ICommunityService`, which are not `DummyCommunityServiceImpl`
    nor `DummyMarketServiceImpl`. Otherwise, we would be tied to these types when
    switching to real implementations.
  prefs: []
  type: TYPE_NORMAL
- en: How does Spring choose the dummy implementations?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It chooses these implementations in the **cloudstreetmarket-core** Spring context
    file: `csmcore-config.xml`. We have defined the beans earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Spring scans all the types matching the root package `edu.zipcloud.cloudstreetmarket.core`
    to find stereotypes and configuration annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way that `DefaultController` is marked with the `@Controller` annotation,
    our two dummy implementation classes are marked with `@Service`, which is a Spring
    Stereotype. Among the detected stereotypes and beans, the dummy implementations
    are the only ones available for the injection configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: With only one respective match per field, Spring picks them up without any extra-configuration.
  prefs: []
  type: TYPE_NORMAL
- en: DTOs to be used in View layer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have made use of DTOs for the variables fetched in our JSPs. Exposed DTOs
    can be particularly useful in web services when it comes to maintaining several
    versions simultaneously. More generally, DTOs are implemented when the target
    and destination objects differ significantly.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement **Entities** later. It is better not to make use of these
    **Entities** in the rendering or version-specific logic, but instead defer them
    to a layer dedicated to this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Although, it must be specified that creating a DTO layer produces a fair amount
    of boilerplate code related to type conversion (impacting both sides, other layers,
    tests, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Dummy service implementations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `DummyMarketServiceImpl` implementation with the `getLastDayMarketActivity`
    method builds an activity map (made of static daily times associated to values
    for the market, the index). It returns a new `DailyMarketActivityDTO` instance
    (built from this map), it is in the end a wrapper carrying the daily activity
    for one single market or Index such as DAX 30.
  prefs: []
  type: TYPE_NORMAL
- en: The `getLastDayMarketsOverview` method returns a list of `MarketOverviewDTOs`
    also constructed from hardcoded data. It emulates an overview of daily activities
    for a couple of markets (indices).
  prefs: []
  type: TYPE_NORMAL
- en: The `DummyCommunityServiceImpl` implementation with its `getLastUserPublicActivity`
    method returns a list of instantiated `UserActivityDTO`, which simulates the last
    six logged user activities.
  prefs: []
  type: TYPE_NORMAL
- en: Populating the Model in the controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Presenting the possible method-handler arguments in the first recipe of this
    chapter, we have seen that it can be injected-as-argument a Model. This Model
    can be populated with data within the method and it will be transparently passed
    to the expected View.
  prefs: []
  type: TYPE_NORMAL
- en: That is what we have done in the `fallback` method-handler. We have passed the
    three results from the Service layers into three variables `dailyMarketActivity`,
    `dailyMarketsActivity`, and `recentUserActivity` so they can be available in the
    View.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering variables with the JSP EL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JSP Expression Language allows us to access application data stored in **JavaBeans
    components**. The notation `${…}` used to access variables such as `${recentUserActivity}`
    or `${dailyMarketActivity.marketShortName}` is typically a JSP EL notation.
  prefs: []
  type: TYPE_NORMAL
- en: An important point to remember when we want to access the attributes of an object
    (like `marketShortName` for `dailyMarketActivity`) is that the object class must
    offer JavaBeans standard getters for the targeted attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, `dailyMarketActivity.marketShortName` refers in the `MarketOverviewDTO`
    class to an expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Implicit objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The JSP EL also offers implicit objects, usable as shortcuts in the JSP without
    any declaration or prepopulation in the model. Among these implicit objects, the
    different scopes pageScope, requestScope, sessionScope, and applicationScope reflect
    maps of attributes in the related scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'These could respectively be accessed in the JSP with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Other useful implicit objects are the map of request headers: `header` (that
    is, `${header["Accept-Encoding"]}`), the map of request cookies: `cookies` (that
    is, `${cookie["SESSIONID"].value}`), the map of request parameters: `param` (that
    is, `${param["paramName"]}`) or the map of context initialization parameters (from
    `web.xml`) `initParam` (that is, `${initParam["ApplicationID"]}`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the JSP EL provides a couple of basic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arithmetic**: `+`, `-` (binary), `*`, `/` and `div`, `%` and `mod`, `-` (unary).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logical**: `and`, `&&`, `or`, `||`, `not`, `!`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relational**: `==`, `eq`, `!=`, `ne`, `<`, `lt`, `>`, `gt`, `<=`, `ge`, `>=`,
    `le`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparisons can be made against other values, or against Boolean, String, integer,
    or floating point literals.
  prefs: []
  type: TYPE_NORMAL
- en: '**Empty**: The empty operator is a prefix operation that can be used to determine
    whether a value is null or empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conditional**: `A ? B : C`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate `B` or `C`, depending on the result of the evaluation of `A`.
  prefs: []
  type: TYPE_NORMAL
- en: This description of operators comes from the JavaEE 5 tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering variables with the JSTL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **JSP Standard Tag Library** (**JSTL**) is a collection of tools for JSP
    pages. It is not really a brand new feature of Java web but it is still used.
  prefs: []
  type: TYPE_NORMAL
- en: The tags the most used are probably Core and I18N when we need a display logic,
    or when we need to format data or to build a hierarchy in the View layer.
  prefs: []
  type: TYPE_NORMAL
- en: '| Area | Function | Tags | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Core` | `Variable support` | `c:set``c:remove` | Set/unset a variable from
    a scope. |'
  prefs: []
  type: TYPE_TB
- en: '| `Flow control` | `c:choose``c:when``c:otherwise` | Implements a conditional
    block IF/THEN/ELSE. |'
  prefs: []
  type: TYPE_TB
- en: '| `c:if` | Implements a conditional IF block. |'
  prefs: []
  type: TYPE_TB
- en: '| `c:forEach` | Iterates over collection types. |'
  prefs: []
  type: TYPE_TB
- en: '| `c:forTokens` | Iterates over tokens, separated by provided delimiters. |'
  prefs: []
  type: TYPE_TB
- en: '| `URL management` | `c:import``c:param` | Resolves a URL, imports its content
    into a page, a variable (var) or a variable reader (varReader). Can pass parameters
    to the underlying resource with param. |'
  prefs: []
  type: TYPE_TB
- en: '| `c:redirect``c:param` | Redirects to a URL. Can pass parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `c:url``c:param` | Creates a URL. Can assign parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `Miscellaneous` | `c:catch` | Catches any throwable that happens in its block.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `c:out` | Fetches an expression or a variable. |'
  prefs: []
  type: TYPE_TB
- en: '| `I18N` | `Setting Locale` | `fmt:setLocale``fmt:requestEncoding` | Stores
    a Locale in a specific scope.Sets the Encoding type for the HTTP requests of the
    page. |'
  prefs: []
  type: TYPE_TB
- en: '| `Messaging` | `fmt:bundle``fmt:message``fmt:param``fmt:setBundle` | Sets
    bundles for a specific tag or scope.Retreives a message, output its content, pass
    optional parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| `Number and Date Formatting` | `fmt:formatNumber``fmt:formatDate``fmt:parseDate``fmt:parseNumber``fmt:setTimeZone``fmt:timeZone`
    | Outputs different contents in different formats. Parse dates and number.Sets
    timezone for a specific tag or scope. |'
  prefs: []
  type: TYPE_TB
- en: 'These presented tags are not the only capabilities of the JSTL, visit the Java
    EE tutorial for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Taglib directives in JSPs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If we plan to make use of one or the other of the above tags, we first need
    to include the suited directive(s) in the JSP page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More about JSP EL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is more features covered by the JSP EL. Feel free to read the Oracle tutorials
    such as [http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html).
  prefs: []
  type: TYPE_NORMAL
- en: More about the JavaBeans standard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have talked about the expected JavaBean standard when using the JSP EL.
    More information about JavaBeans can be found in the Oracle tutorial again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnair.html)'
  prefs: []
  type: TYPE_NORMAL
- en: More about the JSTL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As announced, you can discover more modules of the JSTL on the Java EE tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html](http://docs.oracle.com/javaee/5/tutorial/doc/bnakc.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a common WebContentInterceptor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will highlight how we have implemented a `WebContentInterceptor`
    superclass for Controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are about to present a Controller superclass having the specificity of being
    registered as a `WebContentInterceptor`. This superclass allows us to globally
    control sessions and to manage caching options.
  prefs: []
  type: TYPE_NORMAL
- en: It will help us understanding the request lifecycle throughout the Framework
    and through other potential interceptors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Registering a default `WebContentInterceptor` with its specific configuration
    can be done entirely with the configuration approach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our application, we have registered custom `WebContentInterceptors` to override
    the behaviors of the default one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the codebase, still from the previously checked-out `v2.x.x` branch, a new
    `cloudstreetApiWCI` class can be found in `cloudstreetmarket-api`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'A similar `CloudstreetWebAppWCI` is also present in **cloudstreetmarket-webapp**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'In **cloudstreetmarket-webapp**, `DefaultController` and `InfoTagController`
    now both inherit `CloudstreetWebAppWCI`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'In **cloudstreetmarket-webapp** the `dispatcher-context.xml` context file registers
    the interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'In the **cloudstreetmarket-api**, `dispatcher-context.xml`, the other interceptor
    has also been registered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in both `dispatcher-context.xml`, the `RequestMappingHandlerAdapter`
    bean has been given the `synchronizeOnSession` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In each web module, we have created a superclass for Controllers. In the **cloudstreetmarket-webapp**
    module for example, both `InfoTagController` and `DefaultController` now inherit
    the `CloudstreetWebAppWCI` superclass.
  prefs: []
  type: TYPE_NORMAL
- en: Common behaviors for Controllers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beyond the `WebContentInterceptor` capabilities, it is more than a good practice
    to share common logic and attributes between controllers if they relate to configuration
    (application or business); the idea is to avoid creating another service layer.
    We will see with further implementations that it is a good place for defining
    user contexts.
  prefs: []
  type: TYPE_NORMAL
- en: A `WebContentInterceptor` through its `WebContentGenerator` superclass offers
    useful request and session management tools that we are going to present now.
    As an interceptor, it must be registered declaratively. This is the reason why
    we have added two `<mvc:interceptors>` entries in our context files.
  prefs: []
  type: TYPE_NORMAL
- en: Global session control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `WebContentInterceptor`, handling requests provides the ability to control
    how the application should react with HTTP sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring sessions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `WebContentInterceptor` through `WebContentGenerator` offers the `setRequireSession(boolean)`
    method. This allows defining whether or not a session should be required when
    handling a request.
  prefs: []
  type: TYPE_NORMAL
- en: If there is no session bound to the request (if the session has expired for
    example), the controller will throw a `SessionRequiredException` method. In such
    cases, it is good to have a global `ExceptionHandler` defined. We will set up
    a global exception mapper when we will build the REST API. By default, the sessions
    are not required.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing sessions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another interesting feature comes with the `synchronizeOnSession` property that
    we have set to true in the `RequestMappingHandlerAdapter` definition. When set
    it to true, the session object is serialized and access to it is made in a synchronized
    block. This allows concurrent access to identical sessions and avoids issues that
    sometimes occur when using multiple browser windows or tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Cache-header management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the `setCacheSeconds(int)` method that we have used in the constructors
    of `CloudstreetWebAppWCI` and `CloudstreetApiWCI`; the `WebContentInterceptor`
    with `WebContentGenerator` can manage a couple of HTTP response headers related
    to caching.
  prefs: []
  type: TYPE_NORMAL
- en: Set to zero, it adds the extra headers in the response such as Pragma, Expires,
    Cache-control, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also defined custom caching for static files at the configuration level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: All our static resources are cached in this way for 24 hours, thanks to the
    native `WebContentInterceptor.preHandle` method.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP method support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have also defined a high-level restriction for HTTP methods. It can be narrowed
    down by the `@RequestMapping` method attribute at the Controller level. Accessing
    a disallowed method will result in `405 HTTP error: Method not supported`.'
  prefs: []
  type: TYPE_NORMAL
- en: A high-level interceptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Interceptor registration in `dispatcher-context.xml`, we haven't defined
    a path mapping for the interceptor to operate on. It is because by default Spring
    applies the double wildcard operator `/**` on such standalone interceptor definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not because we have made `DefaultController`, extending an interceptor,
    that the interceptor is acting on the Controller `@RequestMapping` path. The interceptor''s
    registration is only made through configuration. If the covered path mapping needs
    to be modified, we could override our registration in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: We have also overridden the `WebContentInterceptor` method's `preHandle`, `postHandle`,
    and `afterCompletion`. It will allow us later to define common business related
    operations before and after the Controller request handling.
  prefs: []
  type: TYPE_NORMAL
- en: Request lifecycle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Throughout the interceptor(s), each request is processed according to the following
    lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the request's context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate the Controller's handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute interceptor's preHandle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke the Controller's handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute interceptor's `postHandle` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle the Exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process the View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute interceptor's `afterCompletion` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand the sequence, especially when Exceptions occur, the following
    workflow is very useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Request lifecycle](img/image00836.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '*Reference: Spring And Hibernate by Santosh Kumar K.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'From this diagram, you can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: The controller handler is invoked, unless one of the interceptors' `preHandle`
    methods throws an exception.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interceptor's `postHandle` method is called when the controller's handler
    finishes without throwing an exception and if no preceding `postHandler` method
    has thrown an exception.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interceptor's `afterCompletion` is always called, unless a preceding `afterCompletion`
    throws an exception.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obviously, if no Interceptor is registered, the same sequence applies, skipping
    the interceptors' steps.
  prefs: []
  type: TYPE_NORMAL
- en: There is more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is more to say about the `WebContentGenerator` class.
  prefs: []
  type: TYPE_NORMAL
- en: More features offered by WebContentGenerator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Again, `WebContentGenerator` is a superclass of `WebContentInterceptor`. From
    its JavaDoc page: [http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html)
    you can find the following for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Three constants (String) `METHOD_GET`, `METHOD_POST`, and `METHOD_HEAD` refer
    to the values `GET`, `POST`, and `HEAD`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some caching specific methods such as `setUseExpiresHeader`, `setUseCacheControlHeader`,
    `setUseCacheControlNoStore`, `setAlwaysMustRevalidate`, and `preventCaching`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, with `WebApplicationObjectSupport`, `WebContentGenerator` provides:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to `ServletContext` out of the request or response object through `getServletContext()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the temporary directory for the current web application, as provided
    by the servlet container through `getTempDir()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the `WebApplicationContext` through `getWebApplicationContext()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, a couple of tools to set and initialize the `ServletContext` and the `WebApplicationContext`,
    even if these tools are initially intended for use within the Framework itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We quickly passed through web caching. There are a lot of customizations and
    standards in this domain. Also, a new `RequestMappingHandlerAdapter` has been
    created with Spring MVC 3.1\. It will be helpful to understand the change.
  prefs: []
  type: TYPE_NORMAL
- en: Web caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Find out more about web caching through this very complete caching tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mnot.net/cache_docs](https://www.mnot.net/cache_docs)'
  prefs: []
  type: TYPE_NORMAL
- en: New support classes for @RequestMapping since Spring MVC 3.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have used the `RequestMappingHandlerAdapter` with its bean definition in
    `dispatcher-context.xml`. This bean is a new feature with Spring MVC 3.1 and has
    replaced the former `AnnotationMethodHandlerAdapter`. Also, the support class
    `DefaultAnnotationHandlerMapping` has now been replaced by `RequestMappingHandlerMapping`.
  prefs: []
  type: TYPE_NORMAL
- en: We will go deeper into `RequestMappingHandlerAdapter` in [Chapter 4](part0095.xhtml#aid-2QJ5E1
    "Chapter 4. Building a REST API for a Stateless Architecture"), *Building a REST
    API for a Stateless Architecture*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the meantime, you can read the official change note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30](http://docs.spring.io/spring-framework/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-31-vs-30)'
  prefs: []
  type: TYPE_NORMAL
- en: Designing a client-side MVC pattern with AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains the installation and the configuration of AngularJS to
    manage a single-page web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we explain how we got rid of the rendering logic introduced
    previously in the JSPs to build the DOM. We will now rely on AngularJS for this
    job.
  prefs: []
  type: TYPE_NORMAL
- en: Even if we don't have yet a REST API that our frontend could query, we will
    temporarily make the JSP build the needed JavaScript objects as if they were provided
    by the API.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS is an open source Web application Framework. It provides support for
    building single-page applications that can directly accommodate microservice architecture
    requirements. The first version of AngularJS was released in 2009\. It is now
    maintained by Google and an open source community.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS is a whole topic in itself. As a Framework, it's deep and wide at
    the same time. Trying to present it as a whole would take us beyond the scope
    of this book and wouldn't really suit our approach.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we are going to highlight details, features, and characteristics
    of the Framework that we can use to our advantage for the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up the DOM and creating modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Still from the previously checked-out `v2.x.x` branch, the `index.jsp` file
    has been added an Angular directive to the HTML tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The AngularJS JavaScript library (angular.min.js from [https://angularjs.org](https://angularjs.org))
    has been placed in the `cloudstreetmarket-webapp/src/main/webapp/js` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `index.jsp` file has been added a wrapper `landingGraphContainerAndTools`
    div around `landingGraphContainer`, a select box and an `ng-controller="homeFinancialGraphController"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole tableMarketPrices div has been reshaped in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `<div id="divRss3">` div has received significant refactoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph generation section has disappeared, and it is now replaced with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'This graph generation has been externalized in one of the three custom JavaScript
    files, included with the declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: We are going to see those three custom JavaScript files next.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the module's components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As introduced, three custom JavaScript files are located in the `cloudstreetmarket-webapp/src/main/webapp/js`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first one, `home_financial_graph.js`, relates to the graph. It creates
    a factory whose ultimate role is to pull and provide data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'This same file also creates a controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The second file: `home_financial_table.js` relates to the markets overview
    table. Just like `home_financial_graph.js`, it creates a factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'The `home_financial_table.js` file also have its own controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'The third and last file, `home_community_activity.js` relates to the community
    activity table. It defines a factory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'And its controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand better how our AngularJS deployment works, we will see how AngularJS
    is started and how our Angular module (app) is started. Then, we will discover
    the AngularJS Controllers and factories and finally the implemented Angular directives.
  prefs: []
  type: TYPE_NORMAL
- en: One app per HTML document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AngularJS is automatically initialized when the DOM is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Document Object Model** (**DOM**) is the cross-platform convention for
    interacting with HTML, XHTML objects. When the browser loads a web page, it creates
    a Document Object Model of this page.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS looks up the DOM for an `ng-app` declaration in order to bind a module
    against a DOM element and start (autobootstrap) this module. Only one application
    (or module) can be autobootstrapped per HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: We can still define more than one application per document and bootstrap them
    manually, though, if required. But the AngularJS community drives us towards binding
    an app to an HTML or BODY tag.
  prefs: []
  type: TYPE_NORMAL
- en: Module autobootstrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our application is autobootstrapped because it''s referenced in the HTML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, because the module has been created (directly in a `<script>` element
    of the HTML document):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the empty array in the module creation; it allows the injection of dependencies
    into the module. We will detail the AngularJS dependency injection shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Manual module bootstrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As introduced before, we can bootstrap an app manually, especially if we want
    to control the initialization flow, or if we have more than one app per document.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: AngularJS Controllers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AngularJS controllers are the central piece of the Framework. They monitor all
    the data changes occurring on the frontend. A controller is bound to a DOM element
    and corresponds to a functional and visual area of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, we have defined three controllers for the market graph, the markets
    list, and for the community activity feed. We will also need controllers for the
    menus and for the footer elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![AngularJS Controllers](img/image00837.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The DOM binding is operated with the directive''s ng-controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Each controller has a scope and this scope is being passed as a function-argument
    on the controller''s declaration. We can read and alter it as an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Bidirectional DOM-scope binding
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The scope is synchronized with the DOM area the controller is bound to. AngularJS
    manages a bidirectional data-binding between the DOM and the controller's scope.
    This is probably the most important AngularJS feature to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AngularJS model is the controller's scope object. Unlike Backbone.js, for
    example, there is not really a view layer in Angular since the model is directly
    reflected in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: The content of a scope variable can be rendered in the DOM using the `{{…}}`
    notation. For example, the `$scope.example` variable can be fetched in the DOM
    with `{{example}}`.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS directives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The directives are also a famous feature of AngularJS. They provide the ability
    of attaching directly to the DOM some. We can create our own directives or use
    built-in ones.
  prefs: []
  type: TYPE_NORMAL
- en: We will try to visit as many directives as we can along this book. For the moment,
    we have used the following.
  prefs: []
  type: TYPE_NORMAL
- en: ng-repeat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to iterate the `communityActivities` and `financialMarkets` collections,
    we define a local variable name as part of the loop and each item is accessed
    individually with the `{{…}}` notation. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: ng-if
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This directive allows removing, creating, or recreating an entire DOM element
    or DOM hierarchy depending on a condition.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the `{{value.defaultProfileImage}}` variable only renders
    the CSS class `".ico-user"` when the user doesn't have a custom profile image
    (in order to display a default generic profile picture).
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user has a profile picture, the `value.urlProfilePicture` variable
    is therefore populated, the `ng-if` condition is satisfied, and the `<img>` element
    is created in the DOM. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: AngularJS factories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Factories are used to obtain new object instances. We have used factories as
    data generator. We will also use them as services coordinator and intermediate
    layer between the services and Controller. The Services will pull the data from
    the server APIs. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'In this factory, we define two functions: `pull()` and `fetchData()` that populate
    and retrieve the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Once the controller is loaded, it will `pull()` and `fetchData()` into the `$scope.communityActivities`.
    These operations are in this case executed only once.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our factories are injected as dependencies into our controller declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: cloudStreetMarketApp.controller(`'homeCommunityActivityController'`, function
    `($scope`, `communityFactory`)
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In our factories, controllers, and module definitions, we use AngularJS Dependency
    Injection to handle the components' lifecycle and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'AngularJS uses an injector to perform the configured injections. There are
    three ways of annotating dependencies to make them eligible for injection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the inline array annotation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `$inject` property annotation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the implicit annotation mode from the function parameter names:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: While we have been using mostly the implicit annotation style and the inline
    array annotation style, we have to highlight the fact that the implicit annotation
    dependency injection will not work using JavaScript minification.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may imagine, this has been a quick introduction of AngularJS. We will
    discover more of it in-situ when we have a REST API and more features in our application.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS is becoming very popular and an active community is supporting it.
    Its core idea and implementation, based on an explicit DOM, provide a radical
    and simplified way of getting in touch with an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation is very detailed: [https://docs.angularjs.org](https://docs.angularjs.org).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are loads of tutorials and videos on the web:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3schools.com/angular](http://www.w3schools.com/angular)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tutorials.jenkov.com/angularjs](http://tutorials.jenkov.com/angularjs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://egghead.io](https://egghead.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 3. Working with Java Persistence and Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the **Java Persistence API** (**JPA**) in Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining useful EJB3 entities and relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making use of the JPA and Spring Data JPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Java Persistence API** (**JPA**) is a specification that has been produced
    in different releases from 2006 (JPA 1.0) to 2013 (JPA 2.1) by a group of various
    experts. Historically, it is one of the three pieces of the EJB 3.0 specification,
    which has come along with JEE5.
  prefs: []
  type: TYPE_NORMAL
- en: More than an upgrade of **Enterprise JavaBeans** (**EJB**), JPA was pretty much
    a complete redesign. At the time, the leading providers of Object Relational Mapping
    solution (such as Hibernate) and of J2EE application servers (such as WebSphere,
    JBoss) have been involved, and the global result has been unarguably simpler.
    All the types of EJBs (stateful, stateless, and entities) are now simple **Plain
    Old Java Objects** (**POJOs**) that are enriched with specific metadata that is
    nicely presented as annotations.
  prefs: []
  type: TYPE_NORMAL
- en: The Entities' benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Entities play a key role in the EJB3 model. As simple POJOs, they can be used
    in every single layer of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, an entity represents an identifiable functional unit within a business
    domain. The norm is to make an entity representing a database table row. As simple
    POJOs, entities can rely on inheritance (the IS-A relationship) and can have attributes
    (the HAS-A relationship), just as a database schema is normally be described with.
    Through these relationships, an entity establishes connections with other Entities.
    These connections are described with `@Annotations`, which make the entity metadata.
  prefs: []
  type: TYPE_NORMAL
- en: An entity must be seen as the application-equivalent element of a database table
    row. JPA allows to operate this element and its whole ecosystem as a Java object
    hierarchy and to persist it as such.
  prefs: []
  type: TYPE_NORMAL
- en: Entities have brought an amazing radicalization of the persistence layer (by
    decreasing the number of hardcoded SQL queries to be maintained), and also the
    simplification of the service and transformation layers. Being able to pass through
    all the levels (they are used even in views), they dramatically drive the domain-specific
    names and concepts used within the application (methods, classes, and attributes).
    They indirectly focus on the essentials, and impose consistency between application
    concepts and database concepts.
  prefs: []
  type: TYPE_NORMAL
- en: It is obviously a plus to have a solid and well-thought schema from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JPA brings amazing performance and maintainability results on UI applications.
    However, it may not always suit performance expectations if it is used to accomplish
    batches or bulk database operations. It can sometimes be sensible to instead consider
    direct JDBC accesses.
  prefs: []
  type: TYPE_NORMAL
- en: The Entity manager and its persistence context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that an entity can have relations with other entities. In order
    for us to be able to operate on an entity (read from a database, update, delete,
    and persist), there is a background API that generates the preparation of SQL
    queries. This API in a persistence provider (Hibernate, Toplink, and so on) is
    the EntityManager. Once it loads the object for the purpose of the application,
    we can trust it to manage its life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of concepts attached to the EntityManager that we need to
    review before moving forward. An entity is managed once the EntityManager gets
    an instance of it from a database read (explicit or implicit). The JPA persistence
    context is formed by the conceptual aggregation of the whole set of managed entities.
    A persistence context will always carry no more than one instance of an entity
    discriminated by its identifier (`@Id` or a unique ID class).
  prefs: []
  type: TYPE_NORMAL
- en: If, for some reason, an entity is not managed, it is said to be detached (understand
    detached from the persistence context).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Java Persistence API in Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have introduced JPA, its role, and the benefits of using Entities,
    we can now focus on how to configure our Spring application to handle them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we said earlier, the JPA is a specification. Choosing a persistence provider
    (Hibernate, OpenJPA, TopLink, and so on) or a database provider for an application
    won't be a commitment as long as they match the standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see that our JPA configuration in Spring is done by defining two beans:
    **datasource** and **entityManagerFactory**. Then, the optional `Spring Data JPA`
    library offers a `JPA` repository abstraction that is able to surprisingly simplify
    some database operations.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, check out the latest version of the
    `v3.x.x` branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As previously introduced, we have added a couple of beans to the Spring configuration
    file (in the core module) `csmcore-config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the following dependencies have been added to the parent and core
    projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`org.springframework.data:spring-data-jpa` (1.0.2.RELEASE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.hibernate.javax.persistence:hibernate-jpa-2.0-api` (1.0.1.Final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.hibernate:hibernate-core` (4.1.5.SP1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding this dependency causes the Maven enforcer plugin to raise a version
    conflict with `jboss-logging`. This is why jboss-logging has been excluded from
    this third-party library and referenced as a dependency on its own:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.hibernate:hibernate-entitymanager` (4.1.5.SP1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jboss-logging` has also been excluded from this third-party library because,
    it is now referenced as a dependency on its own:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.jboss.logging:jboss-logging` (3.1.0.CR1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.hsqldb:hsqldb` (2.3.2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.javassist:javassist` (3.18.2-GA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons:commons-dbcp2` (2.0.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to review these three configuration points: the **dataSource**
    bean, the **entityManagerFactory** bean, and Spring Data JPA.'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring-managed DataSource bean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because creating a database connection is time consuming, especially through
    the network layers, and because it is sensible to share and reuse an opened connection
    or a connection pool, a **datasource** has the duty of optimizing the use of these
    connections. It is a scalability indicator and also a highly configurable interface
    between the database and the application.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, Spring manages the datasource just as for any other bean. The
    datasource can be created through the application or can be accessed remotely
    from a JNDI lookup (if the choice is made of giving up the connection management
    to the container). In both cases, Spring will manage the configured bean, providing
    the proxy that our application needs.
  prefs: []
  type: TYPE_NORMAL
- en: Also in our example, we are making use of the Apache Common DBCP 2 datasource
    (released in 2014).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a production environment, it might be a good idea to switch to a JNDI-based
    datasource, such as the native Tomcat JDBC pool.
  prefs: []
  type: TYPE_NORMAL
- en: The Tomcat website clearly suggests a significant gain in performance when using
    the Tomcat JDBC pool instead of DBCP1.x on highly concurrent systems.
  prefs: []
  type: TYPE_NORMAL
- en: The EntityManagerFactory bean and its persistence unit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As its name suggests, the `EntityManagerFactory` bean produces entity managers.
    The configuration of `EntityManagerFactory` conditions the entity manager behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration of the `EntityManagerFactory` bean reflects the configuration
    of one persistence unit. In a Java EE environment, one or more persistent units
    can be defined and configured inside a `persistence.xml` file, which is unique
    in the application archive.
  prefs: []
  type: TYPE_NORMAL
- en: In a Java SE environment (our case), the presence of a `persistence.xml` file
    is made optional with Spring. The configuration of the `EntityManagerFactory`
    bean almost completely overrides the configuration of the persistence unit.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration of a persistence unit, and, therefore, of an `EntityManagerFactory`
    bean, can either declare the covered Entities individually or scan packages to
    find them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A persistence unit can be seen as a subarea among the horizontal scaling ecosystem.
    A product can be broken down into wars (web archives) for each the functional
    area. Functional areas can be represented with a selection of Entities that are
    delimited by a persistence unit.
  prefs: []
  type: TYPE_NORMAL
- en: The main point is to avoid creating Entities that overlap different persistence
    units.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Data JPA configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are about to use some very useful tools from the Spring Data JPA project.
    These tools aim to simplify the development (and maintenance) of the persistence
    layers. The most interesting tool is probably the repository abstraction. You
    will see that providing implementations for some database queries can be optional.
    An implementation of the repository interface will be generated at runtime from
    the method signatures if they match a standard in their declarations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, Spring will infer the implementation of the following method `signature`
    (if the `User` entity has a `String userName` field):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'A more extended example of our bean configuration on Spring Data JPA could
    be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Spring Data JPA contains a custom namespace that allows us
    to define the following repository beans. This namespace can be configured as
    follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing a `base-package` attribute in this namespace is mandatory to restrict
    the lookup for Spring Data repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing an `entity-manager-factory-ref` attribute is optional if you have
    only one `EntityManagerFactory` bean configured in `ApplicationContext`. It explicitly
    wires `EntityManagerFactory`, which is to be used with the detected repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a `transaction-manager-ref` attribute is also optional if you have
    only one `PlatformTransactionManager` bean configured in `ApplicationContext`.
    It explicitly wires `PlatformTransactionManager`, which is to be used with the
    detected repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More details can be found about this configuration on the project website at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html](http://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**HikariCP DataSource**: HikariCP (from its BoneCP ancestor) is an open source
    Apache v2 licensed project. It appears to perform better in speed and reliability
    than any other DataSource. This product should probably be considered considered
    when choosing a datasource nowadays. Refer to [https://brettwooldridge.github.io/HikariCP](https://brettwooldridge.github.io/HikariCP)
    for more information on this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining useful EJB3 entities and relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic is critical because a well-designed mapping prevents errors, saves
    a lot of time and has a big impact on performance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to present most of the Entities that we needed
    for the application. A couple of implementation techniques (from inheritance types
    to relationship cases) have been chosen here and highlighted for example purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The *How it works…* section will explain why and how things are defined in the
    way they are and what were the thoughts that drove us toward the Entities' definitions
    we made.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help you create Entities in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the changes from this recipe are located in the new package `edu.zipcloud.cloudstreetmarket.core.entities`.
    First, created three simple entities as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `User` entity:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Transaction` entity:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `Market` entity:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have created some more complex entity Types such as the abstract `Historic`
    entity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'We have also created the two Historic subtypes, `HistoricalIndex` and `HistoricalStock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we also created the `Product` entity with its StockProduct subtypes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'In reality, in the financial world, an index (S&P 500 or NASDAQ) cannot be
    bought as such; therefore, indices haven’t been considered as products:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `Quote` abstract entity with its two subtypes, `StockQuote` and
    `IndexQuote`, have created (indices are not products, but we can still get instant
    snapshots from them, and the Yahoo! financial data provider will later be called
    to get these instant quotes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to go through some basic and more advanced concepts that we have
    used to build our relational mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Entity requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An entity, to be considered as such by the API requires the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: It has to be annotated on The type level with the `@Entity` annotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to have a defined **identifier** with either a basic or a complex type.
    In most cases, a basic identifier is sufficient (the `@Id` annotation on a specific
    entity field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be defined as public and not declared as final.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to have a default constructor (implicit or not).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping the schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both databases and Java objects have specific concepts. The metadata annotations
    for Entities, along with the configuration by default, describe the relational
    mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping tables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An entity class maps a table. Not specifying a `@Table(name="xxx")` annotation
    on the Type level will map the entity class to the table named with the entity
    name (this is the default naming).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Java's class-naming standard is CamelCased with a capital case for the first
    letter. This naming scheme doesn't really match the database table-naming standards.
    For this reason, the `@Table` annotation is often used.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Table` annotation also has an optional `schema` attribute, which allows
    us to bind the table to a schema in the SQL queries (for example `public.user.ID`).
    This `schema` attribute will override the default schema JPA property, which can
    be defined on the persistence unit.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with the table names, the column name to map a field to is specified with
    the `@Column(name="xxx")` annotation. Again, this annotation is optional, and
    not specifying it will make the mapping fall back to the default naming scheme,
    which is literally the cased name of the field (in case of single words, it is
    often a good option).
  prefs: []
  type: TYPE_NORMAL
- en: The fields of an entity class must not be defined as public. Also keep in mind
    that you can almost persist all the standard Java Types (primitive Types, wrappers,
    Strings, Bytes or Character arrays, and enumerated) and large numeric Types, such
    as `BigDecimals` or `BigIntegers`, but also JDBC temporal types (`java.sql.Date`,
    `java.sql.TimeStamp`) and even serializable objects.
  prefs: []
  type: TYPE_NORMAL
- en: Annotating fields or getters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The fields of an entity (if not tagged as `@Transient`) correspond to the values
    that the database row will have for each column. A column mapping can also be
    defined from a getter (without necessarily having a corresponding field).
  prefs: []
  type: TYPE_NORMAL
- en: The `@Id` annotation defines the entity identifier. Also, defining this `@Id`
    annotation on a field or getter defines whether the table columns should be mapped
    by a field or on a by getters.
  prefs: []
  type: TYPE_NORMAL
- en: When using a getter access mode, and when a `@Column` annotation is not specified,
    the default naming scheme for the column name uses the JavaBeans property naming
    standard (for example, the `getUser()` getter would correspond to the `user` column).
  prefs: []
  type: TYPE_NORMAL
- en: Mapping primary keys
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we have seen already, the `@Id` annotation defines the entity's identifier.
    A persistence context will always manage no more than one instance of an entity
    with a single identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Id` annotation on an entity class must map the persistent identifier for
    a table, which is the primary key.
  prefs: []
  type: TYPE_NORMAL
- en: Identifier generation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A `@GeneratedValue` annotation allows ID generation from the JPA level. This
    value may not be populated until the object is persisted.
  prefs: []
  type: TYPE_NORMAL
- en: A `@GeneratedValue` annotation has a `strategy` attribute that is used to configure
    the generation method (to rely, for example, on existing database sequences).
  prefs: []
  type: TYPE_NORMAL
- en: Defining inheritance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have defined entity inheritance for subtypes of `Products`, `Historics`,
    and `Quotes`. When two Entities are close enough to be grouped into a single concept,
    and if they actually can be associated with a parent entity in the application,
    it is worth using the JPA inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Depending upon the persistence strategy for specific data, different storage
    options can be considered for inheritance mapping.
  prefs: []
  type: TYPE_NORMAL
- en: The JPA allows us to configure an inheritance model from different strategies.
  prefs: []
  type: TYPE_NORMAL
- en: The single-table strategy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This strategy expects or creates one big table with a discriminator field on
    the schema. This table hosts the parent-entity fields; these are common to all
    subentities. It also hosts all the fields of subentity classes. Consequently,
    if an entity corresponds to one subtype or another, it will populate the specific
    fields and leave the others blank.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table represents the `Historic` table with its `HISTORIC_TYPE`
    discriminator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The single-table strategy](img/image00838.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The table-per-class strategy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This strategy uses specific tables for concrete Entities. There is no discriminator
    involved here, just specific tables for subtypes. These tables carry both common
    and specific fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have, for example, implemented this strategy for the `Quote` entity and
    its concrete `StockQuote` and `IndexQuote` Entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table-per-class strategy](img/image00839.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Defining relationships
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Entities have the capability to reflect database foreign keys and table to table
    relationships in their class attributes.
  prefs: []
  type: TYPE_NORMAL
- en: On the application side, because these relationships are built transparently
    by the entity managers, a huge amount of developments are bypassed.
  prefs: []
  type: TYPE_NORMAL
- en: How relationships between entities have been chosen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before talking about relationships between entities, it is necessary to understand
    what we plan to do in the *cloudstreet-market* application.
  prefs: []
  type: TYPE_NORMAL
- en: As introduced in [Chapter 1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine
    for an Enterprise Spring Application"), Setup *Routine for an Enterprise Spring
    Application*, we will pull financial data from providers that open their APIs
    (Yahoo! actually). To do so, there are always limitations to keep in mind in terms
    of call frequency per IP or per authenticated user. Our application will also
    have its community inside of which financial data will be shared. For financial
    data providers, when talking about a given stock, the historical view of a stock
    and an instant quote of a stock are two different things. We had to deal with
    these two concepts to build our own data set.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our application, `Users` will be able to buy and sell `Products` (stock,
    fund, option, and so on) by executing `Transactions`:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's consider the User(s)/Transaction(s) relationship with the following
    screenshot:![How relationships between entities have been chosen](img/image00840.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `User` entity can have many `Transactions` Entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the User class, the second part of the `@OneToMany` relationship annotation
    (the `Many` element) drives the Type of attribute we are creating. Specifying
    `Many` as the second part declares that the origin entity (`User`) can have several
    target Entities (`Transactions`). These targets will have to be wrapped in a collection
    type. If the origin entity cannot have several targets, then the second part of
    the relationship has to be `One`.
  prefs: []
  type: TYPE_NORMAL
- en: A `Transaction` can have only one `User` entity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Still in the User class, the first part of the `@OneToMany` relationship (the
    `@One` element) is the second part of the relationship annotation defined in the
    target entity (if defined). It is necessary to know whether the target entity
    can have several origins or not, in order to complete the annotation in the origin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then deduce the two annotations: `@OneToMany` in `User` and `@ManyToOne`
    in `Transactions`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we are not in the case of a `@ManyToMany` relationship, we are talking about
    a unidirectional relationships. From a database's point of view, this means that
    one of the two tables having a join column that targets the other table. In the
    JPA, the table that has this join column is the relationship's **owner**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The entity, which is the relationship's owner has to be specified by a `@JoinColumn`
    annotation on the relationship. The entity that is not the owner, has to provide
    for its relationship annotation a `mappedBy` attribute that targets the corresponding
    Java field name in the opposite entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can now explain the relationship in `Transaction`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: The `user_name` column is expected (or automatically added) in the transaction
    table. We will talk about the fetch type later in the *There’s more… section*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relationship in the `User` entity is defined as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@OrderBy` annotation tells the JPA implementation to add an `ORDER BY`
    clause to its SQL query.
  prefs: []
  type: TYPE_NORMAL
- en: An `Index` entity has one `Market` entity. We have decided that a market is
    the geographical area (Europe, the US, Asia, and so on). A market has several
    concrete indices.
  prefs: []
  type: TYPE_NORMAL
- en: This looks like a `@OneToMany`/`@ManyToOne` relation again. The relationship's
    owner is the `Index` entity because we expect to have a `Market` column in the
    `Index` table (and not an `Index` column in the `Market` table).
  prefs: []
  type: TYPE_NORMAL
- en: It is the same story between the concrete `Product` (such as `StockProduct`)
    and `Market` entities, except that, since it doesn't look mandatory in the application
    to retrieve stocks directly from `Market`, the relationship has not been declared
    on the `Market` entity side. We have kept only the owner side.
  prefs: []
  type: TYPE_NORMAL
- en: About the concrete `Quotes` entity (such as `StockQuote`) and the concrete `Products`
    entity (such as `StockProduct`), one quote will have one product. If we were interested
    in retrieving `Quote` from a `Product` entity, one product would have many quotes.
    The owner of the relationship is the concrete `Quote` entity.
  prefs: []
  type: TYPE_NORMAL
- en: It is the same logic as the previous point for `IndexQuote` and `Index`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Between `Index` and `StockProduct`, in reality, indices (S&P 500, NASDAQ, and
    so on) have constituents, and the sum of the constituents'' values makes the index
    value. Thus, one `Index` entity has several potential `StockProduct` entities.
    Also one `StockProduct` can belong to several `Indices`. This looks like a bidirectional
    relationship. We present here the `Index` side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: This relationship is specified an extra join table (expected or generated by
    the JPA). It is basically a table with two join columns pointing to the `@Ids`
    fields of the respective entities.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to visit two metadata attributes that we didn’t explain yet: the
    `FetchType` attribute and the `Cascade` attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: The FetchType attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have seen that the relationship annotations `@OneToOne`, `@OneToMany`, and
    `@ManyToMany` can be specified in a fetch attribute, which can either be `FetchType.EAGER`
    or `FetchType.LAZY`.
  prefs: []
  type: TYPE_NORMAL
- en: When a `FetchType.EAGER` attribute is chosen, relationships are automatically
    loaded by the `entityManager` when the entity gets managed. The overall amount
    of SQL queries executed by JPA is significantly increased, especially because
    some related entities that may not be required each time are loaded anyway. If
    we have two, three, or more levels of entities bound to a root entity, we should
    probably consider switching some fields locally to `FetchType.LAZY`.
  prefs: []
  type: TYPE_NORMAL
- en: A `FetchType.LAZY` attribute specifies the JPA implementation not to populate
    a field value on the entity-loading SQL query. The JPA implementation generates
    extra-asynchronous SQL queries to populate the `LAZY` fields when the program
    specifically asks for it (for example, when `getStock()` is called in the case
    of a `HistoricalStock` entity). When using Hibernate as an implementation, `FetchType.LAZY`
    is taken as the default fetch type for relationships.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to think about lightening the relationship loading, especially
    on collections.
  prefs: []
  type: TYPE_NORMAL
- en: The Cascade attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another attribute to be mentioned in relationship annotations is the Cascade
    attribute. This attribute can take the values `CascadeType.DETACH`, `CascadeType.MERGE`,
    `CascadeType.PERSIST`, `CascadeType.REFRESH`, `CascadeType.REMOVE`, and `CascadeType.ALL`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute specifies how the JPA implementation should process the related
    Entities when asked to perform an operation (such as persist, update, delete,
    find, and so on.) on the main Entity. It is an optional attribute which is usually
    defaulted to **no-cascaded operations**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a third strategy to define Entity inheritance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The joined-table inheritance strategy**: We haven''t implemented it yet,
    but this strategy is a bit similar to the table-per-class strategy. It differs
    from it in the fact that, instead of repeating the parent-entity fields (columns)
    in the concrete tables, the JPA creates or expects an extra table with only the
    parent-entity columns and manages the joins transparently with this table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making use of the JPA and Spring Data JPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to wire the business logic we need for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Because we have set up the configuration for the JPA and Spring Data JPA, and
    because we have defined our entities and their relationships, we can now use this
    model for time and energy-saving.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `edu.zipcloud.cloudstreetmarket.core.daos` package, we can find the
    following two interfaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'These two interfaces come with their respective implementations. The `HistoricalIndexRepositoryImpl`
    implementation out of the two is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `TransactionRepositoryImpl` implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: All the other interfaces in the `dao` package don't have explicitly defined
    implementations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following bean has been added to the Spring configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: This last configuration allows the application to execute the created `init.sql`
    file **on startup**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that the `cloudstreetmarket-core` module has been added in its
    `pom.xml` file, a dependency to `zipcloud-core` for the `DateUtil` class that
    we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To replace the two dummy implementations that we created in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Designing
    a Microservice Architecture with Spring MVC*, the `CommunityServiceImpl` and `MarketServiceImpl`
    implementations have been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have injected repository dependencies in these implementations using `@Autowired`
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also,we have tagged these two implementations with the Spring `@Service` annotations
    using a declared `value` identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: In the `cloudstreetmarket-webapp` module, the `DefaultController` has been modified
    in its `@Autowired` field to target these new implementations and no longer the
    dummy ones. This is achieved by specifying the `@Qualifier` annotations on the
    `@Autowired` fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting the server and calling the home page URL, `http://localhost:8080/portal/index`,
    should log a couple of SQL queries into the console:![How to do it...](img/image00841.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, the **Welcome** page should remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see the breakdown of this recipe with the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting an EntityManager instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We saw in the first recipe of this chapter that the configuration of the `entityManagerFactory`
    bean reflects the persistence unit's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Historically created by the container, EntityManagers need to handle transactions
    (user or container-manager transactions).
  prefs: []
  type: TYPE_NORMAL
- en: The `@PersistenceContext` annotation is a JPA annotation. It allows us to inject
    an instance of EntityManager, whose lifecycle is managed by the container. In
    our case, Spring handles this role. With an EntityManager, we can interact with
    the persistence context, get managed or detached entities, and indirectly query
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Using JPQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using **Java Persistence Query Language** (**JPQL**) is a standardized way of
    querying the persistence context and, indirectly, the database. JPQL looks like
    SQL in the syntax, but operates on the JPA-managed entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must have noticed the following query in the repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'The select part of the query is optional. Parameters can be injected into the
    query and this step is managed by the persistence providers’ implementation. Those
    implementations offer protections against SQL injection (using Prepared Statements)
    With the example here, take a look at how practical it is to filter a subentity
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'It avoids declaring a join when the situation is appropriate. We can still
    declare a `JOIN` though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: A couple of keywords (such as `ORDER`) can be used as part of JPQL to operate
    functions that are usually available in SQL. Find the full list of keywords in
    the JPQL grammar from the JavaEE 6 tutorial at [http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html).
  prefs: []
  type: TYPE_NORMAL
- en: JPQL has been inspired from the earlier-created **Hibernate Query Language**
    (**HQL**).
  prefs: []
  type: TYPE_NORMAL
- en: Reducing boilerplate code with Spring Data JPA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have discussed in the *How to do it…* section that some of our repository
    interfaces don't have explicitly defined implementations. This is a very powerful
    feature of Spring Data JPA.
  prefs: []
  type: TYPE_NORMAL
- en: Query creation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our `UserRepository` interface is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: We have made it extend the `JpaRepository` interface, passing through the generic
    types `User` (the entity type this repository will relate to) and `String` (the
    type of the user's identifier field).
  prefs: []
  type: TYPE_NORMAL
- en: By extending `JpaRepository`, `UserRepository` gets from Spring Data JPA capability
    to define query methods from Spring Data JPA by simply declaring their method
    signature. We have done this with the methods `findByUserName` and `findByUserNameAndPassword`.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data JPA transparently creates an implementation of our `UserRepository`
    interface at runtime. It infers the JPA queries from the way we have named our
    methods in the interface. Keywords and field names are used for this inference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following keywords table from the Spring Data JPA doc:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query creation](img/image00842.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Without specifying anything in the configuration, we have fallen back to the
    configuration by default for JPA repositories, which injects an instance of our
    single `EntityManagerFactory` bean and of our single `TransactionManager` bean.
  prefs: []
  type: TYPE_NORMAL
- en: Our custom `TransactionRepositoryImpl` is an example that uses both custom JPQL
    queries and a `JpaRepository` implementation. As you might guess, the `TransactionRepositoryJpa`
    implementation , which is autowired in `TransactionRepositoryImpl`, inherits several
    methods for saving, deleting, and finding, `Transaction` Entities.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use interesting paging features offered with these methods. The
    `findAll()` method, which we have pulled, is one of them.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting Entities
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Spring Data JPA also specifies the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Saving an entity can be performed via the `CrudRepository.save(…)` method. It
    will persist or merge the given entity using the underlying JPA EntityManager.
    If the entity has not been persisted yet, Spring Data JPA will save the entity
    via a call to the `entityManager.persist(…)` method; otherwise, the `entityManager.merge(…)`
    will be called.
  prefs: []
  type: TYPE_NORMAL
- en: This is interesting behavior that we will use to prevent again, a significant
    amount of boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more aspects that can be explored around this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Using native SQL queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We haven't made use of native SQL queries yet, but we will. It is important
    to know how to implement them because bypassing the JPA layer can sometimes be
    a better option performance-wise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link points to an article from the Oracle website, which is interesting
    as it relates to native SQL queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html](http://www.oracle.com/technetwork/articles/vasiliev-jpql-087123.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We haven't applied any specific transaction configuration to our repository
    implementations. Refer to [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*,
    for more details about transactions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Custom implementations for Spring Data repositories**: With the `TransactionRepositoryImpl`
    example, by redefining the methods we need from `TransactionRepositoryJpa`, we
    present a pattern for creating custom implementations of data repositories. It
    somehow forces us to maintain an intermediate proxy. The related Spring document
    proposes a different technique that solves this issue. This technique is detailed
    online at [http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations](http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.custom-implementations).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 4. Building a REST API for a Stateless Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will present the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Binding requests and marshalling responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the content-negotiation (`json`, `xml`, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding pagination, filters, and sorting capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling exceptions globally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting and exposing an API with Swagger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, quite a few changes will be implemented. In fact, this chapter
    really sets our application development on an acceleration ramp.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the code, we need to brush up on a few concepts about REST.
  prefs: []
  type: TYPE_NORMAL
- en: A definition of REST
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'REST is an architecture style. Its name is an abbreviation for Representational
    State Transfer. The term was invented by Roy Fielding, one of the principal authors
    of the HTTP specification. A REST architecture is designed around a few markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identifiable resources**: Resources define the domain. A resource must be
    identifiable by a URI. This URI must be as self-explanatory as possible using
    resource categories and hierarchies. Our resources will be indices snapshots,
    stock snapshots, historical index data, historical stock data, users, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP as a communication protocol**: We interact with resources using a limited
    number of HTTP methods (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, and `OPTIONS`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource representation**: A resource is visualized under a specific representation.
    A representation usually corresponds to a media type (`application/json`, `application/xml`,
    `text/html`) and/or a file extension (`*.json`, `*.xml`, `*.html`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stateless conversations**: The server must not keep traces of a conversation.
    The use of HTTP sessions must be forbidden and replaced by navigating through
    the links provided with resources (hypermedia). The client authentication is repeated
    on every single request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Stateless design implies easy scalability. One request can
    be dispatched to one or another server. This is the role of the load balancers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hypermedia**: As we just mentioned, with resources come links, and those
    links drive conversation transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful CloudStreetMarket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From this chapter on, all of the implemented data retrievals are now handled
    with REST using AngularJS. We use Angular routing to complete single-page application
    design (loaded once from the server).There are also a couple of new services that
    support three new screens about stocks and indices.
  prefs: []
  type: TYPE_NORMAL
- en: The REST implementation is still partial though. We have only implemented data
    retrievals (`GET`); we haven't got an effective authentication yet, and hypermedia
    will also be introduced later on.
  prefs: []
  type: TYPE_NORMAL
- en: Binding requests and marshalling responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to configure Spring MVC for REST handlers to be as
    integrated as possible with their business domain. We focus on designing self-explanatory
    method handlers, externalized type conversions, and abstracted response marshalling
    (serialization to specific formats such as `json`, `xml`, `csv`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to review the configuration changes applied to the `cloudstreetmarket-api`
    webapp in order to set up a Type conversion from either a request parameter or
    a URI template variable.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to configure automatic marshalling (for responses) into `json`.
    We will focus on two very simple method handlers created for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe the codebase changes that relate to the request
    binding and the response marshalling configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, check out the latest version of the
    branch `v4.x.x`. Then run a `maven clean install` command on the `cloudstreetmarket-parent`
    module. To do this, right-click on the module, select **Run as…** | **Maven Clean**,
    then select **Run as…** | **Maven Install** again. After this, select **Maven
    Update Project** to synchronize Eclipse with the Maven configuration. To do so,
    right-click on the module and then select **Maven** | **Update Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The main configuration changes are in the `dispatcher-context.xml` file (in
    the **cloudstreetmarket-api** module). The `RequestMappingHandlerAdapter` bean
    has been defined the three `webBindingInitializer`, `messageConverters` and `customArgumentResolvers`
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Maven dependencies have been added to the parent project (and
    indirectly to the core and API projects):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'In our controllers'' superclass `CloudstreetApiWCI`, the `allowDateBinding`
    method has been created with an `@InitBinder` annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'All this configuration allows us to define self-explanatory and logic-less
    method handlers such as the `getHistoIndex()` method in `IndexController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Now deploy the `cloudstreetmarket-api` module and restart the server. To do
    so, start by right-clicking on the Tomcat server in the **Servers** tab:![How
    to do it...](img/image00843.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select **Add and Remove…**from the right-click menu. In the Add and Remove…
    window, make sure you have the following configuration set up, and start the server.![How
    to do it...](img/image00844.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to call the URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This URL targets the presented `getHistoIndex` method handler and produces the
    following `json` output:![How to do it...](img/image00845.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s have a look at `StockProductController`. It hosts the following
    method handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are no explicit calls to any service layer here. Also, the return. Type
    of the method handler, which is `StockProductOverviewDTO`, is a simple POJO. The
    marshalling of the response body is done transparently.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **cloudstreetmarket-core** module, the `StringToStockProduct` converter
    must be presented because it was required to achieve the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This converter was registered earlier (*step 2*) in `conversionService`.
  prefs: []
  type: TYPE_NORMAL
- en: Try to call the URL `http://localhost:8080/api/products/stocks/NXT.L.json`.
    This should target the presented `getByCode` handler and produce the following
    `json` response:![How to do it...](img/image00846.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how the preceding elements work together, we must introduce the
    key role of `RequestMappingHandlerAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: A super RequestMappingHandlerAdapter bean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We briefly introduced `RequestMappingHandlerAdapter` in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Designing
    a Microservice Architecture with Spring MVC*. This bean implements the high-level
    `HandlerAdapter` interface, which allows custom MVC core-workflow implementations.
    `RequestMappingHandlerAdapter` is the native implementation that comes with the
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned that `RequestMappingHandlerAdapter` and `RequestMappingHandlerMapping`
    respectively are two replacement classes for the now deprecated `AnnotationMethodHandlerAdapter`
    and `DefaultAnnotationHandlerMapping`.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, `RequestMappingHandlerAdapter` provides better centralization for all
    the method handlers. Also, some new capabilities have been opened for `HandlerInterceptors`
    and `HandlerExceptionResolver`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Practically, the handler argument that can be found in the `preHandle`, `postHandle`,
    and `afterCompletion` methods’ signature (`WebContentInterceptors`) can be casted
    into `HandlerMethod` objects. The `HandlerMethod` Type offers interesting examination
    methods such as `getReturnType`, `getMethodAnnotation`, `getMethodParameters`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, in regard to `RequestMappingHandlerAdapter` and `RequestMappingHandlerMapping`,
    the Spring documentation specifies that:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"The new support classes are enabled by default by the MVC namespace
    and the MVC Java config but must be configured explicitly if using neither."*
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*JavaDoc* |'
  prefs: []
  type: TYPE_TB
- en: In both our web apps, we make use of the MVC namespace specifically with the
    `<mvc:annotation-driven/>` element.
  prefs: []
  type: TYPE_NORMAL
- en: This element is enjoyable from the configuration-by-default feature it activates
    on a couple of web features. However, in a lot of situations, different behaviors
    might still be expected.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, custom definitions are made either on the namespace itself or
    on with `RequestMappingHandlerAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: Broad support for @RequestMapping annotations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The main role of `RequestMappingHandlerAdapter` is to provide support and customization
    for handlers of the Type `HandlerMethod`. These handlers are bound to `@RequestMapping`
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"A HandlerMethod object encapsulates information about a handler method
    consisting of a method and a bean. Provides convenient access to method parameters,
    the method return value, method annotations."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*JavaDoc* |'
  prefs: []
  type: TYPE_TB
- en: The `RequestMappingHandlerAdapter` gets most of its support methods from the
    historical `DefaultAnnotationHandlerMapping`. Let's take a closer look at the
    methods that particularly interest us.
  prefs: []
  type: TYPE_NORMAL
- en: setMessageConverters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `messageConverters` template can be registered through the `setMessageConverters`
    setter as `List<HttpMessageConverter>`. Spring will perform the unmarshalling
    of an HTTP request's body for us into Java object(s) and the marshalling of a
    Java resource into an HTTP response's body.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember that the framework provides converter implementations
    for the main media types. These are registered by default with `RequestMappingHandlerAdapter`
    and `RestTemplate` (on the client side).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the native converters we can make use of:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Provided implementations | Supported media types by default | (Default) behavior
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `StringHttpMessageConverter` | `text/*` | Writes with a `text/plain` content
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| `FormHttpMessageConverter` | `application/x-www-form-urlencoded` | Form data
    is read from and written into `MultiValueMap<String, String>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `ByteArrayHttpMessageConverter` | `*/*` | Writes with an `application/octet-stream`
    content type (can be overridden). |'
  prefs: []
  type: TYPE_TB
- en: '| `MarshallingHttpMessageConverter` | `text/xml and application/xml` | Requires
    `org.springframework.oxm` and a `Marshaller` /`Unmarshaller`. |'
  prefs: []
  type: TYPE_TB
- en: '| `MappingJackson2HttpMessageConverter` | `application/json` | JSON mapping
    can be customized with Jackson annotations. If specific types need to be mapped,
    a custom `ObjectMapper` property has to be injected. |'
  prefs: []
  type: TYPE_TB
- en: '| `MappingJackson2XmlHttpMessageConverter` | `application/xml` | XML mapping
    can be customized with JAXB or Jackson annotations. If specific types need to
    be mapped, a custom `XmlMapper` property has to be injected into the `ObjectMapper`
    property. |'
  prefs: []
  type: TYPE_TB
- en: '| `SourceHttpMessageConverter` | `text/xml and application/xml` | Can read
    and write `javax.xml.transform`.`Source` from the HTTP request and response. Only
    `DOMSource`, `SAXSource`, and `StreamSource` are supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `BufferedImageHttpMessageConverter` |   | Can read and write `java.awt.image.BufferedImage`
    from the HTTP request and response. |'
  prefs: []
  type: TYPE_TB
- en: 'Have a look at the following address to get information on remoting and web
    services using Spring: [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we have overridden the definition of the two native `MappingJackson2HttpMessageConverter`
    and `MarshallingHttpMessageConverter` classes.
  prefs: []
  type: TYPE_NORMAL
- en: setCustomArgumentResolvers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `setCustomArgumentResolvers` setter provides to `RequestMappingHandlerAdapter`
    a support for custom arguments. If you remember back in [Chapter 2](part0084.xhtml#aid-2G3F81
    "Chapter 2. Designing a Microservice Architecture with Spring MVC"), *Using Spring
    MVC to Support Responsive Designs*, the very first recipe talks about supported
    annotations for arguments. At the time, we saw `@PathVariable`, `@MatrixVariable`,
    `@RequestBody`, `@RequestParam`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: All these annotations are built-in `ArgumentResolver`. They are mapped to registered
    implementations to externally prepopulate arguments from different sources.
  prefs: []
  type: TYPE_NORMAL
- en: We have the possibility to define our own annotations and prepopulate our method
    arguments following the required business logic. These resolvers must implement
    the `HandlerMethodArgumentResolver` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The development of our application didn''t specifically require the development
    of `customArgumentResolver`. However, we have registered two of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`net.kaczmarzyk.spring.data.jpa.web.SpecificationArgumentResolver`: This resolver
    is a third-party library that we are going to explain in the 3rd recipe of this
    chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.web.PageableHandlerMethodArgumentResolver`: This
    will allow the automatic resolution of pagination parameters in order to use the
    native Spring Data pagination support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setWebBindingInitializer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A `WebBindingInitializer` interface is a callback interface to globally initialize
    `WebDataBinder` and perform data binding in the context of web requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going forward, we must stop and revisit the 4th step of the recipe that
    defined the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: We define this method in a controller to register an abstracted Date conversion
    binding using a `PropertyEditor`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's focus on the `WebDataBinder` argument. In this section, we are talking
    about the initialized part. The `WebDataBinder` interface provides a couple of
    interesting methods. These methods are mostly validation-related (`validate`,
    `setRequiredFields`, `isAllowed`, `getErrors`, and so on) and conversion-related
    (`getTypeConverter`, `registerCustomEditor`, `setBindingErrorProcessor`, `getBindingResult`,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: A `WebDataBinder` argument can also be set as a `ConversionService` object.
    Rather than doing this locally in our `allowDateBinding` method (with the `WebDataBinder.setConversion`
    setter), we are going to use a global and declarative initialization.
  prefs: []
  type: TYPE_NORMAL
- en: The `WebBindingInitializer` implementation we have chosen is the Spring `ConfigurableWebBindingInitializer`
    bean. It is indeed a convenient class for declarative configurations in a Spring
    application context. It enables the reusability of preconfigured initializers
    over multiple controllers/handlers.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the `WebBindingInitializer` will be useful to globally initialize
    registered Type converters such as `StringToStockProduct`, but also to achieve
    the global exception handling we are aiming for.
  prefs: []
  type: TYPE_NORMAL
- en: The ConversionService API
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The 11th step defines a `StringToStockProduct` converter that allows the definition
    of a lean and clean `getByCode` method handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: These converters can be used broadly among the Spring application for any conversion
    without being restricted to a request scope. Their use of Generics can be very
    beneficial. They are bound to a `conversionService` bean and there is no specific
    way to avoid their individual declaration.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between PropertyEditors or converters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `PropertyEditors` and the converters from `ConversionService` might appear
    as an alternative to each other in their String-to-type use.
  prefs: []
  type: TYPE_NORMAL
- en: Spring heavily uses the concept of `PropertyEditors` to set properties for beans.
    In Spring MVC, they are meant to parse HTTP requests. Their declaration in Spring
    MVC is bound to the request scope.
  prefs: []
  type: TYPE_NORMAL
- en: Even if they can be initialized globally, you must see `PropertyEditors` as
    initially restricted scope elements. Seeing them this way legitimates their attachment
    to `@InitBinder` methods and `WebBinderData`. They are less generic than converters.
  prefs: []
  type: TYPE_NORMAL
- en: When using `PropertyEditors` for enums, Spring offers a naming convention that
    can avoid the individual declaration of enums. We will make use of this handy
    convention later on.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to look at other `RequestMappingHandlerAdapter` properties in the
    next recipes. For now, there is more to discuss about `PropertyEditors` and especially
    the built-in ones.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in PropertyEditor implementations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following `PropertyEditors` implementations come natively with Spring. They
    can be applied manually in all controllers for the purpose of binding. You will
    probably recognize `CustomDateEditor`, which has been registered in `CloudstreetApiWCI`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Provided implementations | Default behavior |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ByteArrayPropertyEditor` | This is the editor for byte arrays. Strings will
    simply be converted to their corresponding byte representations. It is registered
    by default by `BeanWrapperImpl`. |'
  prefs: []
  type: TYPE_TB
- en: '| `ClassEditor` | Parses strings represent classes to actual classes and the
    other way around. When a class is not found, an `IllegalArgumentException` exception
    is thrown. It is registered by default by `BeanWrapperImpl`. |'
  prefs: []
  type: TYPE_TB
- en: '| `CustomBooleanEditor` | This is a customizable property editor for Boolean
    properties. It is registered by default by `BeanWrapperImpl`, but it can be overridden
    by registering a custom instance of it as a custom editor. |'
  prefs: []
  type: TYPE_TB
- en: '| `CustomCollectionEditor` | This is the property editor for collections, converting
    any source collection to a given target collection type. |'
  prefs: []
  type: TYPE_TB
- en: '| `CustomDateEditor` | This is a customizable property editor for `java.util.Date`,
    and supports a custom `DateFormat`. It is not registered by default. The user
    must register it as required in the appropriate format. |'
  prefs: []
  type: TYPE_TB
- en: '| `CustomNumberEditor` | This is a customizable property editor for any number
    subclass such as `Integer`, `Long`, `Float`, or `Double`. It is registered by
    default by `BeanWrapperImpl`, but it can be overridden by registering a custom
    instance of it as a custom editor. |'
  prefs: []
  type: TYPE_TB
- en: '| `FileEditor` | This editor is capable of resolving strings to `java.io.File`
    objects. It is registered by default by `BeanWrapperImpl`. |'
  prefs: []
  type: TYPE_TB
- en: '| `InputStreamEditor` | This is a one-way property editor capable of taking
    a text string and producing `InputStream` (via an intermediate `ResourceEditor`
    and `Resource`). The `InputStream` properties may be directly set as strings.
    The default usage will not close the `InputStream` property. It is registered
    by default by `BeanWrapperImpl`. |'
  prefs: []
  type: TYPE_TB
- en: The Spring IO reference document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Find more details about Type conversion and `PropertyEditors` in the Spring
    IO Reference document, check out: [http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/validation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring content-negotiation (JSON, XML, and so on)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to configure the way we want the system to decide
    which format to render depending upon the client expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are mostly going to review the XML configuration here. Then, we will test
    the API with different requests to ensure support is provided to the XML format.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `RequestMappingHandlerAdapter` configuration has been altered in `dispatcher-context.xml`.
    A `contentNegotiationManager` property has been added, as well as an `xmlConverter`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'A Maven dependency has been added to `XStream` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the URL: `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.json`
    should target the `getHistoIndex()` handler the same way as before and you should
    receive the same `json` response:![How to do it...](img/image00845.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, calling the URL `http://localhost:8080/api/indices/EUROPE/^GDAXI/histo.xml`
    should now generate the following XML formatted response:![How to do it...](img/image00847.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have added support for XML using the `MarshallingHttpMessageConverter` bean,
    defined a default media type (`application/json`), and defined a global content
    negotiation strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Support for XML marshalling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we said in the previous recipe, `MarshallingHttpMessageConverter` comes
    with the framework, but it requires the `spring-oxm` dependency, as well as a
    definition for a marshaller and unmarshaller. `spring-oxm` is the Maven artefact
    to reference here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: The XStream marshaller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We chose `XStreamMarshaller` as the provider for the XML marshalling operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: The `XStream` marshaller is part of the `spring-oxm` project. Even if it is
    *not recommended* for external source parsing (which is *not* what we intend to
    do), it is very good and requires very few configuration by default (no specific
    class registration or initial mapping strategy required).
  prefs: []
  type: TYPE_NORMAL
- en: 'Types and fields can be annotated to customize the default behavior. You can
    find some examples here from their documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@XStreamAlias`: Used on the type, field, or attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@XStreamImplicit`: Used in collections or arrays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@XStreamAsAttribute`: Used to mark a field as an attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@XStreamConverter`: Targets a specific converter for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, we have applied a minimal marshalling customization in DTOs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information about `XStream` on their official website: [http://xstream.codehaus.org](http://xstream.codehaus.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Negotiation strategies with ContentNegotiationManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, we are talking about the way we configure the system to choose one media
    type over another, for responses. The client shows expectations in its request
    and the server tries to satisfy them at best from the available resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: There are three ways for the client to specify its media type expectations.
    We discuss them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Accept header
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The client request specifies a mime type or a list of mime types (`application/json`,
    `application/xml`, and so on) as a value of the `Accept` header. It is the default
    choice for Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers can send various `Accept` headers though, and it would be risky
    to rely entirely on these headers. Therefore, it is good to support at least one
    alternative.
  prefs: []
  type: TYPE_NORMAL
- en: These headers can even be completely ignored with the `ignoreAcceptHeader` Boolean
    property in `ContentNegotiationManager`.
  prefs: []
  type: TYPE_NORMAL
- en: The file extension suffix in the URL path
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Allowing the specification of a file extension suffix in the URL path is one
    alternative. It is the discriminator option in our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The `favorPathExtension` Boolean property in `ContentNegotiationManager` has
    been set to true for this purpose and our AngularJS factories actually request
    `.json` paths.
  prefs: []
  type: TYPE_NORMAL
- en: The request parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can define a specific query parameter if you dislike the path extension
    option. The default name of this parameter is `format`. It is customizable with
    the `parameterName` property, and the potential expected values are the registered
    format suffixes (`xml`, `html`, `json`, `csv`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: This option can be set as the discriminator option with the `favorParameter`
    Boolean property.
  prefs: []
  type: TYPE_NORMAL
- en: Java Activation Framework
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Setting the `useJaf` Boolean property to true configures to rely on the Java
    Activation Framework, rather than Spring MVC itself, for the suffix to-media type
    mappings (`json` to correspond to `application/json`, `xml` to correspond to `application/xml`,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: '@RequestMapping annotations as ultimate filters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, the controller with the `@RequestMapping` annotations and especially
    the `produces` attribute should have the final word on which format will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will look at the implementation of JAXB2 as an XML parser and the `ContentNegotiationManagerFactoryBean`
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Using a JAXB2 implementation as an XML parser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JAXB2 is the current Java specification for XML bindings. Our example with
    `XStream` was just an example and another XML marshaller can of course be used.
    Spring supports JAXB2\. It even provides a default JAXB2 implementation in the
    `spring-oxm` package: `org.springframework.oxm.jaxb.Jaxb2Marshaller`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using JAXB2 annotations in DTOs is probably a better choice for portability.
    Visit the `Jaxb2Marshaller` JavaDoc for more details about its configuration:
    [http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html](http://docs.spring.io/autorepo/docs/spring/4.0.4.RELEASE/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The ContentNegotiationManagerFactoryBean JavaDoc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The full possible configuration for `ContentNegotiationManagerFactoryBean`
    is accessible again in its JavaDoc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding pagination, filters, and sorting capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have introduced the basis for a REST configuration of Spring MVC, we
    will improve our REST services by adding pagination, filtering, and sorting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pagination is a concept developed in the Spring Data project. To add pagination,
    we will introduce the `Pageable` interface for wrapper implementations populated
    from the request. These are further on recognized and handled by Spring Data.
  prefs: []
  type: TYPE_NORMAL
- en: The `Page` interface and specifically the `PageImpl` instances can be produced
    by Spring Data to format its results. We will use them, as they are perfectly
    suited to REST rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will detail two data-binding tools used here to abstract filtering
    and pagination from our controllers' logic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To the method handlers, we have added the parameters we want them to support.
    The following handler in `IndexController` now offers pagination and sorting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'In the corresponding service layer implementation, the `pageable` instance
    is passed to the Spring Data JPA abstracted implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s pretty much all about the pagination and sorting pattern! All the boilerplate
    code is transparent. It allows us to magically retrieve a resource wrapped in
    a page element that carries the tools that the front end may need for pagination.
    For our specific method handler, calling the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue`,`asc`
    results in the following JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00848.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have also applied this pattern to dynamically retrieve indices with pagination
    even though it is almost the same method handler definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We also applied the same pattern again to retrieve user activities (in `CommunityController`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Now we have adapted the AngularJS layer (detailed in the *See also...* section
    of this recipe), we have been able to entirely rewire our welcome page to use
    REST services with also an infinite scrolling for user activities:![How to do
    it...](img/image00849.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To fully use the REST service's capabilities, there is now a new screen called
    *INDICES BY MARKET* accessible from the **Prices and markets** menu:![How to do
    it...](img/image00850.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The table presented here is entirely autonomous since it features the fully
    angularized (AngularJS) and asynchronous pagination/sorting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `StockProductController` object, in its `search()` method handler, has
    implemented the pagination and sorting pattern, but also a filtering feature that
    allows the user to operate `LIKE` SQL operators combined with `AND` restrictions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'The `productService` implementation, in its `getProductsOverview` method (as
    shown), refers to a created `nameStartsWith` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'The `nameStartsWith` method is a specification factory located in the core
    module inside the `ProductSpecifications` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Overall, the `search()` REST service is extensively used over three new screens
    related to stocks retrieval. These screens are accessible through the **Prices
    and markets** menu. Here is the new **ALL PRICES SEARCH** form:![How to do it...](img/image00851.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot corresponds to the **SEARCH BY MARKET** form:![How
    to do it...](img/image00852.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, find the following new **Risers and Fallers** screen:![How to do it...](img/image00853.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Again, this recipe is mostly about Spring Data and how to make Spring MVC support
    Spring Data for us.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data pagination support (you will love it!)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We already looked at some of the benefits of the Spring Data repository abstraction
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how Spring Data supports the pagination concepts
    in its abstracted repositories. A very beneficial extension of that, is offered
    to Spring MVC with a specific argument-resolver to prevent any custom adaption
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination and sorting in repositories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can notice the use of Pageable arguments in the methods of our repository
    interfaces. For example below is the `IndexRepositoryJpa` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Spring Data recognizes the `org.springframework.data.domain.Pageable` Type as
    the method argument. It also recognizes the `org.springframework.data.domain.Sort`
    Type when a full `Pageable` instance is not necessary. It applies pagination and
    sorting to our queries dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see more examples here (taken from the Spring reference document):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bear in mind that sorting options are also handled through `Pageable`. Incidentally,
    this is the way we sort in the application.
  prefs: []
  type: TYPE_NORMAL
- en: From these extra examples, you can see that Spring Data can return a `Page`
    `(org.springframework.data.domain.Page)`, a `Slice` `(org.springframework.data.domain.Slice)`
    or simply a `List`.
  prefs: []
  type: TYPE_NORMAL
- en: 'But here is the amazing part: a `Page` object contains everything we need to
    build powerful pagination tools at the front end! Earlier, we saw the `json` response
    provided with one `Page` of elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With With the following request: `http://localhost:8080/api/indices/US.json?size=2&page=0&sort=dailyLatestValue,asc`,
    we have asked for the first page and received a `Page` object telling us whether
    or not this page is the first or the last one (`firstPage: true/false`, `lastPage:
    true/false`), the number of elements within the page (`numberOfElements: 2`),
    the total number of pages, and the total number of elements (`totalPages: 2`,
    `totalElements: 3`).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means that Spring Data first executed the query we wanted it to execute,
    and then executed transparently a count query without the pagination filters.
  prefs: []
  type: TYPE_NORMAL
- en: A `Slice` object is a super interface of `Page`, which does not carry the counts
    for `numberOfElements` and `totalElements`.
  prefs: []
  type: TYPE_NORMAL
- en: PagingAndSortingRepository<T,ID>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If a repository does not already extend `JpaRepository<T,ID>`, we can make
    it extend `PagingAndSortingRepository<T,ID>`, which is an extension of `CrudRepository<T,ID>`.
    It will provide extra methods to retrieve Entities using the pagination and sorting
    abstraction. These methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: The web part – PageableHandlerMethodArgumentResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As introduced earlier, we have added the `org.springframework.data.web.PageableHandlerMethodArgumentResolver`
    bean to our `RequestMappingHandlerAdapter` as a `customArgumentResolver`. Doing
    so has allowed us to rely on the Spring data binding to transparently prepopulate
    a `Pageable` instance available as a method handler argument (highlighted in bold
    in the 1st step of this recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some more information about the request parameters we can use for the
    binding:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter name | Purpose / usage | Default values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `page` | The page we want to retrieve. | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | The size of the page we want to retrieve. | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| `sort` | The properties that should be sorted in the format `property,property(,ASC&#124;DESC)`.We
    should use multiple `sort` parameters if we want to switch directions, for example:
    `?sort=firstname&sort=lastname,asc`. | The default sort direction is ascending.
    |'
  prefs: []
  type: TYPE_TB
- en: 'As implemented in our first step, default values can be customized in cases
    where specific parameters are missing. This is achieved with the `@PageableDefault`
    annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The page, size, and sort parameter names can be overridden by setting the appropriate
    `PageableHandlerMethodArgumentResolver` properties in the Spring configuration.
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason we don't make use of `PageableHandlerMethodArgumentResolver`,
    we can still catch our own request parameters (for pagination) and build a `PageRequest`
    instance from them (for example, `org.springframework.data.domain.PageRequest`
    is a `Pageable` implementation).
  prefs: []
  type: TYPE_NORMAL
- en: A useful specification argument resolver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before introducing this useful specification argument resolver, we must introduce
    the concept of specification.
  prefs: []
  type: TYPE_NORMAL
- en: The JPA2 criteria API and Spring Data JPA specifications
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Spring Data reference document tells us that JPA 2 has introduced a criteria
    API that can be used to build queries programmatically. When writing `criteria`,
    we actually define the where clause of a query for a domain class.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Data JPA takes the concept of specification from Eric Evans's book
    *Domain Driven Design*, following the same semantics and providing an API to define
    such specifications using the JPA criteria API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To support specifications, we can extend our repository interface with the
    `JpaSpecificationExecutor` interface, as we did in our `ProductRepository` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: In our example, the `findByNameStartingWith` method retrieves all the products
    of a specific Type (`StockProduct`) that have a name starting with the `param`
    argument and that match the `spec` specification.
  prefs: []
  type: TYPE_NORMAL
- en: SpecificationArgumentResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we said earlier, this `CustomArgumentResolver` is not bound to an official
    Spring project (yet). Its use can fit some use cases such as local search engines
    to complement Spring Data dynamic queries, pagination, and sorting features.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way we build a `Pageable` instance from specific parameters, this
    argument resolver also allows us to transparently build a `Specification` instance
    from specific parameters.
  prefs: []
  type: TYPE_NORMAL
- en: It uses `@Spec` annotations to define `where` clauses such as `like`, `equal`,
    `likeIgnoreCase`, `in`, and so on. These `@Spec` annotations can then be combined
    with each other to form groups of `AND` and `OR` clauses with the help of `@And`
    and `@Or` annotations. A perfect use case is to develop our search features as
    a complement to the pagination and sorting function.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should read the following article which is an introduction to the project.
    This article is entitled *"an alternative API for filtering data with Spring MVC
    & Spring Data JPA"*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data](http://blog.kaczmarzyk.net/2014/03/23/alternative-api-for-filtering-data-with-spring-mvc-and-spring-data)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, find with the following address the project’s repository and its documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/tkaczmarzyk/specification-arg-resolver](https://github.com/tkaczmarzyk/specification-arg-resolver)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As useful as it can be, do bear in mind that the number of users of this library
    is still much lower than the Spring community.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have been focusing on Spring MVC so far. However with the presented new screens,
    there are also changes at the front end (AngularJS).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about Spring Data capabilities, check out the official reference
    document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html](http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html)'
  prefs: []
  type: TYPE_NORMAL
- en: Angular routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you navigate between the **Home** and **Prices and Market** menus, you will
    see that the whole page is never entirely refreshed. All the content is loaded
    asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we used the AngularJS routing. The `global_routes.js` file
    has been created for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined a mapping table between routes (URL paths that the application
    queries, as part of the navigation through the `href` tags) and HTML templates
    (which are available on the server as public static resources). We have created
    an `html` directory for these templates.
  prefs: []
  type: TYPE_NORMAL
- en: Then, AngularJS asynchronously loads a template each time we request a specific
    URL path. As often, AngularJS operates transclusions do to this (it basically
    drops and replace entire DOM sections). Since templates are just templates, they
    need to be bound to controllers, which operate other AJAX requests through our
    factories, pull data from our REST API, and render the expected content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/portal/index` is a route, that is, a requested path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/portal/html/home.html` is the mapped template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`homeMainController` is the target controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can read more about AngularJS routing at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.angularjs.org/tutorial/step_07](https://docs.angularjs.org/tutorial/step_07)'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap pagination with the Angular UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have used the pagination component of the UI Bootstrap project ([http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap))
    from the AngularUI team ([http://angular-ui.github.io](http://angular-ui.github.io)).
    This project provides a `Boostrap` component operated with and for AngularJS.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of pagination, we obtain a `Bootstrap` component (perfectly integrated
    with the Bootstrap stylesheet) driven by specific AngularJS directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of our pagination components can be found in the `stock-search.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: The `page`, `ng-model`, `items-per-page`, `total-items`, and `ng-change` directives
    use variables (`paginationCurrentPage`, `pageSize` and `paginationTotalItems`),
    which are attached to the `stockSearchController` scope.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about this project, visit its documentation at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://angular-ui.github.io/bootstrap](http://angular-ui.github.io/bootstrap)'
  prefs: []
  type: TYPE_NORMAL
- en: Handling exceptions globally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe presents a technique for handling exception globally in a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different ways to handle exceptions in Spring MVC. We can choose to
    define controller-specific `@ExceptionHandler` or we can choose to register `@ExceptionHandler`
    globally in the `@ControllerAdvice` classes.
  prefs: []
  type: TYPE_NORMAL
- en: We developed the second option in our REST API, even if our `CloudstreetApiWCI`
    super-class could have shared `@ExceptionHandler` among its controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see how to automatically map custom and generic exception types
    to HTTP status codes, and how to wrap the right error messages in a generic response
    object that can be used by any client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a wrapper object to be sent back to the client when an error occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a `RestExceptionHandler` class annotated with `@ControllerAdvice`.
    This `RestExceptionHandler` class also inherits the `ResponseEntityExceptionHandler`
    support class, which gives us access to a default mapping exception/response status
    ready to be overridden:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both the `ErrorInfo` wrapper and this `RestExceptionHandler` will support internationalization.
    It will be demonstrated in [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created the two following property editors for the MarketCode and QuotesInterval
    Enums:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These two property editors are automatically registered because they are satisfying
    a naming and location convention. Since `MarketCode` and `QuotesInterval` are
    enum values, Spring looks for `MarketCodeEditor` (Editor suffix) and `QuotesIntervalEditor`
    in the Enums’ packages.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You can test it by providing an incorrect market code in the `getHistoIndex`
    method of the AngularJS factory (in the `home_financial_graph.js` file). Change
    the call from `$http.get("/api/indices/"+market+"wrong/"+index+"/histo.json")`
    to `$http.get("/api/indices/"+market+"/"+index+"/histo.json")`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After restarting the whole application (**cloudstreetmarket-webapp** and **cloudstreetmarket-api**),
    the call to `http://localhost:8080/portal/index` will induce the **Ajax GET**
    request for the index loading to result in a **400** status code:![How to do it...](img/image00854.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More details about this failed request will show up in the `json` response:![How
    to do it...](img/image00855.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The received error message—**The provided value for the market variable is invalid!**
    is acceptable for now.
  prefs: []
  type: TYPE_NORMAL
- en: You can reset the `home_financial_graph.js` file after getting this result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are focusing on the way we handle exceptions in a REST environment.
    The expectations are slightly different than in a pure web app because the direct
    user may not necessarily be a human. For this reason, a REST API has to maintain
    standard, consistent, and self-explanatory communication even if a process has
    generated an error or has been unsuccessful.
  prefs: []
  type: TYPE_NORMAL
- en: This consistency is achieved by always returning an appropriate HTTP status
    code feedback to the client from the server about the request treatment, and by
    always returning a response body in a format that is expected by the client (a
    format that matches one of the mime types listed in the **Accept** header of the
    HTTP request).
  prefs: []
  type: TYPE_NORMAL
- en: Global exception handling with @ControllerAdvice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spring 3.2 has brought a solution that is much more suitable to REST environments
    than the previous exception handling mechanisms. With this solution, classes annotated
    with `@ControllerAdvice` can be registered in a different locations of the API.
    These annotations are looked-up by classpath scanning and are auto-registered
    in a common repository to support all of the controllers (by default) or subsets
    of controllers (using the annotation options).
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we defined one single `@ControllerAdvice` to monitor this entire
    API. The idea is to define, in the `@ControllerAdvice` annotated `class(es)`,
    the relevant methods that can match match specific exception Type(s) to specific
    ResponseEntity(ies). A ReponseEntity carries a body and a response status code.
  prefs: []
  type: TYPE_NORMAL
- en: These methods to define are annotated with `@ExceptionHandler`. The options
    of this annotation allow you to target specific exception Types. A common pattern
    when defining a `@ControllerAdvice` is to make it extend the support class `ResponseEntityExceptionHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: The support ResponseEntityExceptionHandler class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The support `ResponseEntityExceptionHandler` class provides a predefined mapping
    between native exceptions (such as `NoSuchRequestHandlingMethodException`, `ConversionNotSupportedException`,
    `TypeMismatchException`, and so on) and HTTP status codes.
  prefs: []
  type: TYPE_NORMAL
- en: The `ResponseEntityExceptionHandler` implements a common pattern for response
    rendering. It invokes case-specific rendering methods declared as protected, such
    the following `handleNoSuchRequestHandlingMethod`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: These methods are obviously fully overridable in the `@ControllerAdvice` annotated
    class(es). The important thing is to return the `handleExceptionInternal` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `handleExceptionInternal` method is also defined as protected and then
    overridable. This is what we have done—returned a uniform `ErrorInfo` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: A uniform error response object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are no specific standard practices about the fields that the uniform
    error response object should expose. We decided to offer the following structure
    for the `ErrorInfo` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Using two different levels of messages (the global error message coming from
    the exception Type and the case-specific message) allows the client side to choose
    the more appropriate one (or even both!) to be rendered in the application for
    each situation.
  prefs: []
  type: TYPE_NORMAL
- en: As we already said, this `ErrorInfo` object doesn't support internationalization
    yet. We will improve it later in the [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing
    CRUD Operations and Validations"), *Developing CRUD Operations and Validations*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We provide here a collection of resources related to exception handling in
    a web environment:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Status Codes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **World** **Wide Web Consortium** specifies explicit response status codes
    for HTTP/1.1\. More important than the error messages themselves, it is critical
    for a REST API to implement them. You can read more about this at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec010.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The official article about exception handling in Spring MVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An article from in the spring.io blog is a very interesting resource. It is
    not limited to the REST use case. It can be accessed from this address: [http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc).'
  prefs: []
  type: TYPE_NORMAL
- en: JavaDocs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here we provide for configuration or simply usage, the URL for two JavaDoc
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ExceptionHandlerExceptionResolver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'ResponseEntityExceptionHandler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check out the official demo website, which exposes how the different Types
    of Spring MVC exceptions can be rendered: [http://mvc-exceptions-v2.cfapps.io](http://mvc-exceptions-v2.cfapps.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting and exposing an API with Swagger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section details how to provide and expose metadata about the REST API using
    Swagger.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are often required to document APIs for users and customers. When documenting
    an API, depending on the tools we use, we often get a few extras such as the ability
    to generate client code from the API metadata or even the generation of integrated
    test harnesses for the API.
  prefs: []
  type: TYPE_NORMAL
- en: There isn't yet a recognized and universal standard for the format of the API
    metadata. This lack of standards leads to a quite a few different solutions on
    the market for the REST documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We have chosen Swagger here because it has the largest and the most active community.
    It has existed since 2011, and it offers a very nice UI/test harness and great
    configuration by default.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section details what can be done and also what we have done in the code
    base of the checked-out v4.x.x branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have added a Maven dependency for the `swagger-springmvc` project (version
    0.9.5) to **cloudstreetmarket-core** and **cloudstreetmarket-parent**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'The following swagger `configuration` class has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'The following configuration has been added to the `dispatch-context.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the previous configuration, a swagger.properties file has been added
    at the path `src/main/resources/META-INF/properties` with the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Our three controllers have been added a basic documentation. See the following
    documentation annotations added to `IndexController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: We have downloaded the swagger UI project from [https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui).This
    is a collection of static files (JS, CSS, HTML, and pictures). It has been pasted
    in the webapp directory of our **cloudstreetmarket-api** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, the following mvc namespace configuration has been added to `dispatch-context.xml`
    again in order for the Spring MVC to open access to static files in the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: When we have this configuration, accessing the following URL on the server `http://localhost:8080/api/index.html`
    brings up the Swagger UI documentation portal:![How to do it...](img/image00856.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'More than just a REST documentation repository, it is also a handy test harness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00857.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Swagger has its own controller that publishes the metadata of our API. The Swagger
    UI targets this metadata, parses it, and represents it as a usable interface.
  prefs: []
  type: TYPE_NORMAL
- en: An exposed metadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the server side, with the `com.mangofactory/swagger-springmvc` dependency
    added to the `swagger-springmvc` project and with the presented `SwaggerConfig`
    class, the library creates a controller on the root path: `/api-docs` and publishes
    the entire metadata there for the REST API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you visit `http://localhost:8080/api/api-docs`, you will reach the root
    of our REST API documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An exposed metadata](img/image00858.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This content is the exposed metadata that implements the Swagger specification.
    The metadata is a navigable structure. Links to other parts of the metadata can
    be found in the `<path>` nodes of the XML content.
  prefs: []
  type: TYPE_NORMAL
- en: The Swagger UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Swagger UI is only made of static files (CSS, HTML, JavaScript, and so on).
    The JavaScript logic implements the Swagger specification and recursively parses
    the entire exposed metadata. It then dynamically builds the API documentation
    website and test harness that we have presented, digging out every single endpoint
    and its metadata.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we suggest you to look further into Swagger and its Spring
    MVC project implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The Swagger.io
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the framework''s website and its specification: [http://swagger.io](http://swagger.io).'
  prefs: []
  type: TYPE_NORMAL
- en: The swagger-springmvc documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The swagger-springmvc project is changing as it is becoming part of a bigger
    project named SpringFox. SpringFox now also supports the second version of the
    Swagger specification. We recommend you to visit their current reference document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://springfox.github.io/springfox/docs/current](http://springfox.github.io/springfox/docs/current)'
  prefs: []
  type: TYPE_NORMAL
- en: 'They also provide a migration guide to move from the swagger specification
    1.2 (that we have implemented here) to the swagger specification 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md](https://github.com/springfox/springfox/blob/master/docs/transitioning-to-v2.md)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section guides you toward alternative tools and specification to Swagger:'
  prefs: []
  type: TYPE_NORMAL
- en: Different tools, different standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have mentioned that there isn''t a common standard yet that would clearly
    legitimize one tool over another. Thus, it is probably good to acknowledge tools
    other than Swagger because things are moving quite fast in this domain. Here,
    you can find two great comparison articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php](http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://apiux.com/2013/04/09/rest-metadata-formats](http://apiux.com/2013/04/09/rest-metadata-formats)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 5. Authenticating with Spring MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Apache HTTP to proxy your Tomcat(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting users and roles to fit Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating over a BASIC scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing credentials in a REST environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with a third-party OAuth2 scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorizing on services and controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, developing the `CloudStreetMarket` application, we cover two
    ways of authenticating in a Spring environment.
  prefs: []
  type: TYPE_NORMAL
- en: We believe that only providing Security annotations to restrict controllers
    and services wouldn't be sufficient to give a big picture of Spring Authentication.
    It's clearly not possible to feel confident about the Security tools that can
    be used with Spring MVC, without a few key concepts such as the role of the `Authentication`
    object, the Spring Security filter-chain, the `SecurityInterceptor` workflow,
    and so on. As it is necessary for configuring OAuth, we will also show you how
    to set up an Apache HTTP proxy and a host alias on your machine to emulate the
    `cloudstreetmarket.com` domain locally.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Apache HTTP to proxy your Tomcat(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to access the application using a local alias `cloudstreetmarket.com`
    (on the port `80`) rather than the former `localhost:8080`. Implementing the configuration
    for that is sometimes a mandatory step, when developing third-party integrations.
    In our case, the third-party will be Yahoo! and its OAuth2 authentication servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It will mostly be about configuration. We will install an Apache HTTP server
    and stick to the Apache Tomcat How-To. This will drive us to update our Tomcat
    connector and to create a virtual host in the Apache configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: You will discover how this configuration can allow a great flexibility and simply
    serve web content to the customers with an advanced and scalable architecture.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On MS Windows, download and install Apache HTTP Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The easiest way is probably to download directly the binaries from an official
    distributor. Select and download the appropriated latest Zip archive from one
    of the following URLs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a directory `C:\apache24` and unzip the downloaded archive into this
    location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.apachelounge.com/download](http://www.apachelounge.com/download)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apachehaus.com/cgi-bin/download.plx](http://www.apachehaus.com/cgi-bin/download.plx)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should be able to reach the bin directory through this form: `C:\apache24\bin`.'
  prefs: []
  type: TYPE_NORMAL
- en: On Linux / Mac OS, download and install Apache HTTP Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the latest sources (compressed in a `tar.gz` archive) from the apache
    website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/download.cgi#apache24](http://httpd.apache.org/download.cgi#apache24)'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the downloaded archive, extract the sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `NN` command being the current version of Apache HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Autoconfigure the arborescence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the arborescence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: On MS Windows, add a new alias in the hosts file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit with Notepad the file that can be found at the following path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This file has no extension, Notepad 'doesn't complain about that when you want
    to save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following entry at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Save the modification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Linux/Mac OS, add a new alias in the hosts file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the file that can be found at the following path: `/etc/hosts`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following entry at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Save the modification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For all Operation Systems, edit the `httpd.conf` Apache configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This file can either be found at `C:\apache24\conf` (on Windows) or at `/usr/local/apache2/conf`
    (on Linux or Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncomment the following two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block at the very bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A sample of a modified `httpd.conf` file (for Apache HTTP 2.4.18) can be found
    in the `chapter_5/source_code/app/apache` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `server.xml` Tomcat configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This file can either be found at `C:\tomcat8\conf` (on Windows) or at `/home/usr/{system.username}/tomcat8/conf`
    (on Linux or Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `<Connector port"="8080"" protocol"="HTTP/1.1""... >` definition and
    edit it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A sample of a modified `server.xml` file (for Apache Tomcat 8.0.30) can be found
    in the `chapter_5/source_code/app/tomcat` directory.
  prefs: []
  type: TYPE_NORMAL
- en: On MS Windows, start the Apache HTTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command prompt window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Install an Apache service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux/Mac OS, start the Apache HTTP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Now start the Tomcat server and open your favorite web browser. Go to `http://cloudstreetmarket.com`,
    you should obtain the following landing-page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00859.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apache HTTP configuration we made here is somehow a standard nowadays. It
    supplies an infinite level of customization on a network. It also allows us to
    initiate the scalability.
  prefs: []
  type: TYPE_NORMAL
- en: DNS configuration or host aliasing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's revisit how web browsers work. When we target a URL in the web browser,
    the final server is accessed from its IP, to establish a TCP connection on a specific
    port. The browser needs to resolve this IP for the specified name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, it queries a chain of Domain Name Servers (on the Internet, the chain
    often starts with the user''s **Internet** **Service Provider** (**ISP**). Each
    DNS basically works this way:'
  prefs: []
  type: TYPE_NORMAL
- en: It tries to resolve the IP by itself, looking-up in its database or its cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If unsuccessful, it asks another DNS and waits for the response to cache the
    result and sends it back to the caller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DNS managing one specific domain is called a **Start Of Authority** (**SOA**).
    Such DNS are usually provided by registrars, and we usually use their services
    to configure records (and our server IP) for a domain zone.
  prefs: []
  type: TYPE_NORMAL
- en: Around the web, each DNS tries to resolve the ultimate SOA. The top hierarchy
    of DNS servers is called **root name** **servers**. There are hundreds of them
    bound to one specific **Top-Level Domain** (**TLD** such as .com, `.net`, `.org`…).
  prefs: []
  type: TYPE_NORMAL
- en: When the browser gets the IP, it tries to establish a TCP connection on the
    specified port (it defaults to 80). The remote server accepts the connection and
    the HTTP request is sent over the network.
  prefs: []
  type: TYPE_NORMAL
- en: In production – editing DNS records
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As soon as we approach the production stage, we need the real domain name to
    be configured for DNS records, online, with a domain-name provider. There are
    different types of records to edit. Each one serves a specific purpose or resource
    type: host, canonical names, mail-exchanger, name server, and others. Specific
    guidance can usually be found on the domain name provider website.'
  prefs: []
  type: TYPE_NORMAL
- en: An alias for the host
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before contacting any kind of DNS, the operating system may be able to resolve
    the IP by itself. For this purpose, the host file is a plain-text `registry`.
    Adding aliases to this registry defines proxies to whatever final server. Doing
    so is a common technique for development environments but isn't restricted to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Each line represents an IP address followed by one or more host names. Each
    field is separated by white space or tabs. Comments can be specified at the very
    beginning of a line with a `#`character. Blank lines are ignored and IPs can be
    defined in *IPv4* or *IPv6*.
  prefs: []
  type: TYPE_NORMAL
- en: This file is only for hosts aliasing, we don't deal with ports at this stage!
  prefs: []
  type: TYPE_NORMAL
- en: Alias definition for OAuth developments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this chapter, we will authenticate with an OAuth2 protocol. In OAuth, there
    is an **Authentication** **Server (AS)** and a **Service Provider** (**SP**).
    In our case, the authentication server will be a third-party system (Yahoo!) and
    the service provider will be our application (`cloudstreetmarket.com`).
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth2 authentication and authorization happen on the third-party side.
    As soon as these steps are completed, the authentication Server redirects the
    HTTP request to the service provider using a call-back URL passed as a parameter
    or stored as a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Third-parties sometimes block call-back URLs that are pointing to `localhost:8080`.
    Testing and developing OAuth2 conversations locally remains a necessity.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a proxy for the hostname (in the hosts file) and a virtual host
    in an HTTP server to manage ports, URL rewriting, and redirections is a good solution
    for the local environment but also for a production infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Apache HTTP configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Apache HTTP server uses the TCP/IP protocol and provides an implementation
    of HTTP. TCP/IP allows computers to talk with each other throughout a network.
  prefs: []
  type: TYPE_NORMAL
- en: Each computer using TCP/IP on a network (Local Network Area or Wide Network
    Area) has an IP address. When a request arrives on an interface (an Ethernet connection
    for example), it is attempted to be mapped to a service on the machine (DNS, SMTP,
    HTTP, and so on) using the targeted port number. Apache usually uses the port
    80 to listen to. This is a situation when Apache HTTP takes care of one site.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual-hosting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This feature allows us to run and maintain more than one website from a single
    instance of Apache. We usually group in a `<VirtualHost...>` section, a set of
    Apache directives for a dedicated site. Each group is identified by a **site ID**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different sites can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'By IP (you will still have to define a `ServerName` inside the block):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'By port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Our current configuration with one machine and one Tomcat server is not the
    ideal scenario to demonstrate all the benefits of virtual hosting. However, we
    have delimited one site with its configuration. It's a first step towards scalability
    and load-balancing.
  prefs: []
  type: TYPE_NORMAL
- en: The mod_proxy module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This Apache module offers proxy/gateway capabilities to Apache HTTP server.
    It's a central feature as it can turn an Apache instance into a unique interface
    able to manage a complex set of applications balanced across multiple machines
    on the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'It pushes Apache beyond its initial purpose: exposing a directory on the filesystem
    via HTTP. It depends on five specific sub-modules: `mod_proxy_http`, `mod_proxy_ftp`,
    `mod_proxy_ajp`, `mod_proxy_balancer`, and `mod_proxy_connect`. Each of them,
    when needed, requires the main `mod_proxy` dependency. Proxies can be defined
    as forward (`ProxyPass`) and/or as reverse (`ProxyPassReverse`). They are often
    used to provide internet-access to servers located behind firewalls.'
  prefs: []
  type: TYPE_NORMAL
- en: The `ProxyPass` can be replaced with `ProxyPassMatch` to offer regex-matching
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: ProxyPassReverse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Reverse-proxies handle responses and redirections exactly as if they were webservers
    on their own. To be activated, they are usually bound to a `ProxyPass` definition
    as in our use case here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Workers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Proxies manage the configuration of underlying servers and also the communication
    parameters between them with objects called **workers** (see them as a set of
    parameters). When used for a reverse-proxy, these workers are configured using
    `ProxyPass` or `ProxyPassMatch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'Some examples of worker-parameters are: `connectiontimeout` (in seconds), `keepalive`
    (On/Off), `loadfactor` (from 1 to 100), `route` (bound to `sessionid` when used
    inside a load balancer), `ping` (it sends CPING requests to ajp13 connections
    to ensure Tomcat is not busy), `min/max` (number of connection pool entries to
    the underlying server), `ttl` (expiry time for connections to underlying server).'
  prefs: []
  type: TYPE_NORMAL
- en: The mod_alias module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This module provides URL aliasing and client-request redirecting. We have used
    this module for redirecting (by default) the requests to `cloudstreetmarket.com`
    to the index page of the portal web application (`cloudstreetmarket.com/portal/index`).
  prefs: []
  type: TYPE_NORMAL
- en: Note that, in the same way `ProxyPassMatch` improves `ProxyPass`, `RedirectMatch`
    improves `Redirect` with regex-matching capability.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat connectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A **connector** represents a process unit that: listens to a specific port
    to receive requests, forwards these requests to a specific engine, receives the
    dynamic content generated by the engine and finally sends back the generated content
    to the port. Several connectors can be defined in a `Service` component, sharing
    one single *engine*. One or more *service(s)* can be defined for one Tomcat instance
    (`Server`). There are two types of connectors in Tomcat.'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP connectors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This connector is setup by default in Tomcat on the 8080 port. It supports the
    HTTP1/1 protocol and allows Catalina to work as a standalone webserver. HTTP connectors
    can be used behind a proxy. Tomcat supports `mod_proxy` as a load balancer. This
    is our intended configuration. When implemented behind a proxy, the attributes
    `proxyName` and `proxyPort` can be set so the servlets bind the specified values
    to the request attributes `request.getServerPort()` and `request.getServerName()`.
  prefs: []
  type: TYPE_NORMAL
- en: '*"This connector features the lowest latency and best overall performance."*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tomcat documentation also states the following about HTTP proxying:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"It should be noted that the performance of HTTP proxying is usually lower
    than the performance of AJP."*'
  prefs: []
  type: TYPE_NORMAL
- en: However, configuring an AJP clustering adds an extra layer on the architecture.
    The necessity for this extra-layer is arguable for a stateless architecture.
  prefs: []
  type: TYPE_NORMAL
- en: AJP connectors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: AJP connectors behave as HTTP connectors except that they support the AJP protocol
    instead of HTTP. **Apache JServ Protocol** (**AJP**) is an optimized binary version
    of HTTP connector.
  prefs: []
  type: TYPE_NORMAL
- en: It allows Apache HTTP to balance effectively requests among different Tomcats.
    It also allows Apache HTTP to serve the static content of web applications while
    Tomcat focuses on the dynamic content.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Apache HTTP side, this connector requires `mod_proxy_ajp`. Our configuration
    would probably have been:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will provide a few links for a deeper understanding on
    the topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DNS and the distributed system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://computer.howstuffworks.com/dns.htm](http://computer.howstuffworks.com/dns.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Root_name_server](https://en.wikipedia.org/wiki/Root_name_server)'
  prefs: []
  type: TYPE_NORMAL
- en: 'How the domain name system works:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://wiki.bravenet.com/How_the_domain_name_system_works](http://wiki.bravenet.com/How_the_domain_name_system_works)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache HTTP:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/trunk/getting-started.html](http://httpd.apache.org/docs/trunk/getting-started.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The modules we have used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/2.2/mod/mod_alias.html](http://httpd.apache.org/docs/2.2/mod/mod_alias.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html](http://httpd.apache.org/docs/2.2/en/mod/mod_proxy.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tomcat connectors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tomcat.apache.org/tomcat-8.0-doc/connectors.html](http://tomcat.apache.org/tomcat-8.0-doc/connectors.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.apache.org/tomcat/FAQ/Connectors](http://wiki.apache.org/tomcat/FAQ/Connectors)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mulesoft.com/tcat/tomcat-connectors](https://www.mulesoft.com/tcat/tomcat-connectors)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In proxy mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support](http://tomcat.apache.org/tomcat-8.0-doc/proxy-howto.html#Apache_2.0_Proxy_Support)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using an AJP connector, the ProxyPassReverse definition is slightly different
    from an HTTP connector:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.apachetutor.org/admin/reverseproxies](http://www.apachetutor.org/admin/reverseproxies)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.humboldt.co.uk/the-mystery-of-proxypassreverse](http://www.humboldt.co.uk/the-mystery-of-proxypassreverse)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to implement an AJP Cluster, go through the following URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/](http://www.richardnichols.net/2010/08/5-minute-guide-clustering-apache-tomcat/)'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Apache HTTP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of Apache HTTP can be argued on very high traffic, especially because
    the default configuration can lead the program to create a new process for every
    single connection.
  prefs: []
  type: TYPE_NORMAL
- en: If we only look for a proxy and load-balancer, we should also consider HAProxy.
    HAProxy is a high-availability load-balancer and proxy server. It is a free and
    open source (GPL v2) product used in references such as GitHub, StackOverflow,
    Reddit, Twitter, and others ([http://haproxy.org](http://haproxy.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Nginx is probably (and currently) the most adopted alternative to Apache HTTP.
    Being focused on high concurrency and low memory usage, its license is a 2-clause
    BSD license ([http://nginx.org](http://nginx.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Adapting users and roles to Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have thought interesting to split apart this section, since users and roles
    are usually borderline between the application and Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will install the Spring Security dependencies and update
    the `User` Entity. We will also create an `Authority` entity that is based on
    a custom `Role` enum that we created. Finally, we update the `init.sql` script
    to add a set of existing users.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v5.x.x`. Then, run a `maven clean install` command on the `cloudstreetmarket-parent`
    module (right-click on the module, go to **Run as…** | **Maven Clean**, and then
    navigate to **Run as…** | **Maven Install**). Execute a `Maven Update Project`
    to synchronize Eclipse with the maven configuration (right-click on the module
    and then navigate to **Maven** | **Update Project…)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will notice a few changes both in the frontend and backend of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Security comes with the following dependencies, added in `cloudstreetmarket-parent`,
    `cloudstreetmarket-core` and `cloudstreetmarket-api`::'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'The `User` entity has been updated. It now reflects the `users` table (instead
    of the previous `user` table). It also implements the `UserDetails` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: This `User` Entity has a relationship with `SocialUser`. `SocialUser` comes
    into play with the OAuth2 authentication, and we will develop this part later.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Authority Entity has been created and maps a `authorities` table. This Entity
    also implements the `GrantedAuthority` interface. The class is the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'For a more readable code, we have created a `Role` Enum in the `cloudstreetmarket-core`
    module, for the different roles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we have made a few changes in the `init.sql` file. The existing pre-initialization
    scripts related to users, have been adapted to suit the new schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Start the application. (No exceptions should be observed).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **login** button (on the right-hand side of the main menu). You
    will see the following popup that allows entering a username and a password to
    log in:![How to do it...](img/image00860.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also have the option to create a new user. In the previous popup, click
    on the **Create new account** link that can be found at the bottom right. This
    will load the following pop-up content:![How to do it...](img/image00861.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a new user with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the profile picture, you must create on your file system, the directory
    structure corresponding to the property `pictures.user.path` in `cloudstreetmarket-api/src/main/resources/application.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on the user icon in order to upload a profile picture.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00862.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, hit the **Sign up** button and the popup should disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, call the following URI: `http://cloudstreetmarket.com/api/users/marcus`.
    The application should fetch the following persisted data for the Marcus user:![How
    to do it...](img/image00863.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe at this stage preconfigures our entities so they comply with Spring
    Security. A couple of concepts about Spring Security are mentioned in this part
    and developed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Spring Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring Security is built around three core components: the `SecurityContextHolder`
    object, the `SecurityContext`, and the `Authentication` object.'
  prefs: []
  type: TYPE_NORMAL
- en: The `SecurityContextHolder` object allows us to define and carry for one JVM
    a `SecurityContextHolderStrategy` implementation (focused on storing and retrieving
    a `SecurityContext`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `SecurityContextHolder` has the following `static` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: By default, and in most of the designs, the selected-strategy uses `Threadlocals`
    (`ThreadLocalSecurityContextHolderStrategy`).
  prefs: []
  type: TYPE_NORMAL
- en: ThreadLocal context holders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A Tomcat instance manages a Spring MVC servlet (like any other servlet) with
    multiple threads as the multiple HTTP requests come in. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Each thread allocated to a request on Spring MVC has access to a copy of the
    `SecurityContext` carrying an `Authentication` object for one user (or one other
    identifiable thing).
  prefs: []
  type: TYPE_NORMAL
- en: Once a copy of the `SecurityContext` is no longer referred, it gets garbage-collected.
  prefs: []
  type: TYPE_NORMAL
- en: Noticeable Spring Security interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a bunch of noticeable interfaces in Spring Security. We will particularly
    visit `Authentication`, `UserDetails`, `UserDetailsManager`, and `GrantedAuthority`.
  prefs: []
  type: TYPE_NORMAL
- en: The Authentication interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Spring `Authentication` object can be retrieved from the `SecurityContext`.
    This object is usually managed by Spring Security but applications still often
    need to access it for their business.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the interface for the `Authentication` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'It provides access to the `Principal` (representing the identified user, entity,
    company or customer), its credentials, its authorities and to some extra-details
    that may be needed. Now let''s see how, from the `SecurityContextHolder`, a user
    can be retrieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: The `Principal` class can be cast into the Spring `UserDetails` Type, which
    is exposed by the core framework. This interface is used as a standard bridge
    in several extension-modules (*Spring Social*, *Connect*, *Spring Security SAML*,
    *Spring Security LDAP*, and so on.).
  prefs: []
  type: TYPE_NORMAL
- en: The UserDetails interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UserDetails` implementations represent a Principal in an extensible and
    application-specific way.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must be aware of the one-method `UserDetailsService` interface that provides
    the key-method `loadUserByUsername` for account-retrieval within the core framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Security offers two implementations for this interface: `CachingUserDetailsService`
    and `JdbcDaoImpl`, whether we want to benefit from an in-memory `UserDetailsService`
    or from a JDBC-based `UserDetailsService` implementation. More globally, what
    usually matters is where and how users and roles are persisted so Spring Security
    can access this data on itself and process authentications.'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication providers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The way Spring Security accesses the user and role data is configured with the
    selection or the reference of an authentication-provider in the Spring Security
    configuration file with the security namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are two examples of configuration when using the native `UserDetailsService`
    implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: This first example specifies a JDBC-based `UserDetailsService`. The next example
    specifies an in-memory `UserDetailsService.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we have registered our own `UserDetailsService` implementation
    (`communityServiceImpl)` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: We thought more appropriate to continue accessing the database layer through
    the JPA abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: The UserDetailsManager interface
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Spring Security provides a `UserDetails` implementation `org.sfw.security.core.userdetails.User`,
    which can be used directly or extended. The User class is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Managing users (create, update, and so on) can be a shared responsibility for
    Spring Security. It is usually mainly performed by the application though.
  prefs: []
  type: TYPE_NORMAL
- en: 'Guiding us towards a structure for `UserDetails`, Spring Security also provides
    a `UserDetailsManager` interface for managing users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Spring Security has two native implementations for non-persistent (`InMemoryUserDetailsManager`)
    and JDBC-based (`JdbcUserDetailsManager`) user-managements.
  prefs: []
  type: TYPE_NORMAL
- en: When deciding not to use a built-in authentication-provider, it is a good practice
    to implement the presented interfaces, especially for guaranteeing backward compatibility
    on the coming versions of Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: The GrantedAuthority interface
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Within Spring Security, `GrantedAuthorities` reflects the application-wide permissions
    granted to a `Principal`. Spring Security guides us towards a role-based authentication.
    This kind of authentication imposes the creation of groups of users able to perform
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unless there is a strong business meaning for a feature, do prefer for example
    `ROLE_ADMIN` or `ROLE_GUEST` to `ROLE_DASHBOARD` or `ROLE_PAYMENT`…
  prefs: []
  type: TYPE_NORMAL
- en: Roles can be pulled out of the `Authentication` object from `getAuthorities()`,
    as an array of `GrantedAuthority` implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GrantedAuthority` interface is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: The `GrantedAuthority` implementations are wrappers carrying a textual representation
    for a role. These textual representations are potentially matched against the
    configuration attributes of secure objects (we will detail this concept in the
    *Authorizing on services and controllers* recipe).
  prefs: []
  type: TYPE_NORMAL
- en: The `Role` embedded in a `GrantedAuthority`, which is accessed from the `getAuthority()`
    getter, is more important to Spring Security than the wrapper itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created our own implementation: the `Authority` that entity that has
    an association to `User`. The framework also provides the `SimpleGrantedAuthority`
    implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: In the last recipe, we will talk about the Spring Security authorization process.
    We will see that Spring Security provides an `AccessDecisionManager` interface
    and several `AccessDecisionManager` implementations. These implementations are
    based on voting and use `AccessDecisionVoter` implementations. The most commonly
    used of these implementations is the `RoleVoter` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `RoleVoter` implementation votes positively for the user authorization when
    a configuration attribute (the textual representation of an Authority) starts
    with a predefined prefix. By default, this prefix is set to `ROLE_`.
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spring Security authentication and authorization process will be covered
    in depth in the Authorizing on services and controllers recipe. This section introduces
    more details from the Spring Security reference document.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Spring Securitysecurity reference is an amazing source of theoretical and
    practical information.
  prefs: []
  type: TYPE_NORMAL
- en: Technical overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The technical overview is a great introduction to the Spring Security Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html](http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Sample applications
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Spring Security reference provides many Spring Security examples on different
    authentications types (*LDAP*, *OPENID*, *JAAS*, and so on.). Other role-based
    examples can also be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/sample-apps.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Core services
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Find out more about the built-in `UserDetailsService` implementations (in-memory
    or JDBC) at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html](http://docs.spring.io/spring-security/site/docs/3.1.5.RELEASE/reference/core-services.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating over a BASIC scheme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authenticating through a BASIC scheme is a popular solution for stateless applications
    like ours. Credentials are sent over with HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we complete the Spring Security configuration. We make it support
    the BASIC authentication scheme required for the application.
  prefs: []
  type: TYPE_NORMAL
- en: We slightly customize the generated response-headers, so they don't trigger
    the browser to show-up a native BASIC authentication form (which is not an optimal
    experience for our users).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use the Spring security namespace, we add the following filter
    to the `cloudstreetmarket-api web.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'A Spring configuration file has been created specifically for Spring Security
    in the `cloudstreetmarket-api` module. This file hosts the following bean definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'This new configuration refers to the `CustomBasicAuthenticationEntryPoint`
    class. This class has the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: 'A new `@ExceptionHandler` has been added to catch authentication Exceptions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: That's pretty much it! We have made our backend support a BASIC authentication.
    However, we haven't restricted our services (as secure objects) yet. We will do
    that now.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the example purpose, please do update the `IMarketService` interface in
    `cloudstreetmarket-core`. Add the `@Secured("ROLE_BASIC")` annotation to the `Type`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Now restart the Tomcat server (doing this will drop your previous user creation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your favorite web browser, open the developer-tab and observe the AJAX queries
    when you refresh the home page. You should notice that two AJAX queries have returned
    a `403` status code (`FORBIDDEN`).![How to do it...](img/image00864.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These queries have also returned the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the login feature/popup, do log in with one of the previously created
    users that have a `BASIC` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the page and observe the same two AJAX queries. Amongst the request
    headers, you can see that our frontend has sent a special **Authorization** header:![How
    to do it...](img/image00865.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This Authorization header carries the value: `Basic dXNlckM6MTIzNDU2`. The
    encoded `dXNlckM6MTIzNDU2` is the base64-encoded value for `userC:123456`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's have a look at the response to these queries:![How to do it...](img/image00866.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The status is now `200 (OK)` and you should also have received the right JSON
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00867.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Server sent back a `WWW-Authenticate` header in the response to the value:
    **CSM_Basic realm"="cloudstreetmarket.com"**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, do revert the change you made in `IMarketService` (in the 5th step).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to explore the concepts behind a BASIC authentication with Spring
    Security:'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Security namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As always, a Spring configuration namespace brings a specific syntax that suits
    the needs and uses for a module. It lightens the overall Spring configuration
    with a better readability. Namespaces often come with configuration by default
    or auto configuration tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Spring Security namespace comes with the spring-security-config dependency
    and can be defined as follows in a Spring configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'The namespace stages three top-level components: `<http>` (about web and HTTP
    security), `<authentication-manager>,` and `<global-method-security>` (service
    or controller restriction).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, other concepts are referenced by those top-level components as attribute
    or as child element: `<authentication-provider>`, `<access-decision-manager>`
    (provides access decisions for web and security methods), and `<user-service>`
    (as `UserDetailsService` implementations).'
  prefs: []
  type: TYPE_NORMAL
- en: The <http> component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `<http>` component of the namespace provides an `auto-config` attribute
    that we didn''t use here. The `<http auto-config"="true">` definition would have
    been a shortcut for the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: It isn't worth it for our REST API because we didn't plan to implement a server-side
    generated view for a form login. Also, the `<logout>` component would have been
    useless for us since our API doesn't manage sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `<http-basic>` element creates underlying `BasicAuthenticationFilter`
    and `BasicAuthenticationEntryPoint` to the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We have made use of our own `BasicAuthenticationFilter` in order to customize
    the `WWW-Authenticate` response's header value from `Basic base64token` to `CSM_Basic
    base64token`. This because the AJAX HTTP responses (from our API) containing a
    `WWW-Authenticate` header with a value starting with a **Basic** keyword automatically
    trigger the web-browser to open a native Basic-form popup. It was not the type
    of user experience we wanted to set up.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Security filter-chain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the very first step of the recipe, we have declared a filter named `springSecurityFilterChain`
    in `web.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Here, `springSecurityFilterChain` is also a Spring bean that is created internally
    by the Spring Security namespace (specifically the `http` component). A `DelegatingFilterProxy`
    is a Spring infrastructure that looks for a specific bean in the application context
    and invokes it. The targeted bean has to implement the `Filter` interface.
  prefs: []
  type: TYPE_NORMAL
- en: The whole Spring Security machinery is hooked-up in this way through finally
    one single bean.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration of the `<http>` element plays a central-role in the definition
    of what the filter-chain is made of. It is directly the elements it defines, that
    create the related filters.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Some core filters are always created in a filter chain and others will
    be added to the stack depending on the attributes and child elements which are
    present."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Spring Security* |'
  prefs: []
  type: TYPE_TB
- en: It is important to distinguish between the configuration-dependant filters and
    the core filters that cannot be removed. As core filters, we can count `SecurityContextPersistenceFilter`,
    `ExceptionTranslationFilter,` and `FilterSecurityInterceptor`. These three filters
    are natively bound to the `<http>` element and can be found in the next table.
  prefs: []
  type: TYPE_NORMAL
- en: This table comes from the Spring Security reference document and it contains
    all the core filters (coming with the framework) that can be activated using specific
    elements or attributes. They are listed here in the order of their position in
    the chain.
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Filter Class | Namespace Element or Attribute |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CHANNEL_FILTER` | ChannelProcessingFilter | http/intercept-url@requires-channel
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURITY_CONTEXT_FILTER` | SecurityContextPersistenceFilter | http |'
  prefs: []
  type: TYPE_TB
- en: '| `CONCURRENT_SESSION_FILTER` | ConcurrentSessionFilter | session-management/concurrency-control
    |'
  prefs: []
  type: TYPE_TB
- en: '| `HEADERS_FILTER` | HeaderWriterFilter | http/headers |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_FILTER` | CsrfFilter | http/csrf |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGOUT_FILTER` | LogoutFilter | http/logout |'
  prefs: []
  type: TYPE_TB
- en: '| `X509_FILTER` | X509AuthenticationFilter | http/x509 |'
  prefs: []
  type: TYPE_TB
- en: '| `PRE_AUTH_FILTER` | AbstractPreAuthenticatedProcessingFilter Subclasses |
    N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `CAS_FILTER` | CasAuthenticationFilter | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| `FORM_LOGIN_FILTER` | UsernamePasswordAuthenticationFilter | http/form-login
    |'
  prefs: []
  type: TYPE_TB
- en: '| `BASIC_AUTH_FILTER` | BasicAuthenticationFilter | http/http-basic |'
  prefs: []
  type: TYPE_TB
- en: '| `SERVLET_API_SUPPORT_FILTER` | SecurityContextHolderAwareRequestFilter |
    http/@servlet-api-provision |'
  prefs: []
  type: TYPE_TB
- en: '| `JAAS_API_SUPPORT_FILTER` | JaasApiIntegrationFilter | http/@jaas-api-provision
    |'
  prefs: []
  type: TYPE_TB
- en: '| `REMEMBER_ME_FILTER` | RememberMeAuthenticationFilter | http/remember-me
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANONYMOUS_FILTER` | AnonymousAuthenticationFilter | http/anonymous |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_MANAGEMENT_FILTER` | SessionManagementFilter | session-management
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EXCEPTION_TRANSLATION_FILTER` | ExceptionTranslationFilter | http |'
  prefs: []
  type: TYPE_TB
- en: '| `FILTER_SECURITY_INTERCEPTOR` | FilterSecurityInterceptor | http |'
  prefs: []
  type: TYPE_TB
- en: '| `SWITCH_USER_FILTER` | SwitchUserFilter | N/A |'
  prefs: []
  type: TYPE_TB
- en: 'Remember that custom filters can be positioned relatively, or can replace any
    of these filters using the `custom-filter` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Our <http> configuration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'We have defined the following configuration for the `<http>` ''namespace''s
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Here, we tell Spring not to create sessions and to ignore incoming sessions
    using `create-session=="stateless"`. We have done this to pursue the stateless
    and scalable Microservices design.
  prefs: []
  type: TYPE_NORMAL
- en: We have also disabled the **Cross-Site Request Forgery** (**csrf**) support
    for now, for the same reason. This feature has been enabled by default by the
    framework since the Version 3.2.
  prefs: []
  type: TYPE_NORMAL
- en: It has been necessary to define an `entry-point-ref` because we didn't implement
    any authentication strategy preconfigured by the namespace (`http-basic` or `login-form`).
  prefs: []
  type: TYPE_NORMAL
- en: We have defined a custom filter `BasicAuthenticationFilter` to be executed after
    the theoretical position of the core `BASIC_AUTH_FILTER`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to see which roles play the three references made to: `authenticationEntryPoint`,
    `authenticationManager`, and `basicAuthenticationFilter`.'
  prefs: []
  type: TYPE_NORMAL
- en: The AuthenticationManager interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, `AuthenticationManager` is a single-method interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Security provides one implementation: `ProviderManager`. This implementation
    allows us to plug in several `AuthenticationProviders`. The `ProviderManager`
    tries all the `AuthenticationProviders` in order, calling their `authenticate`
    method. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: The `ProviderManager` stops its iteration when it finds a non-null `Authentication`
    object. Alternatively, it fails the `Authentication` when an `AuthenticationException`
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the namespace, a specific `AuthenticationProviders` can be targeted using
    the `ref` element as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, here is our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no `ref` element in our configuration. The namespace will by default
    instantiate a `DaoAuthenticationProvider`. It will also inject our `UserDetailsService`
    implementation: `communityServiceImpl`, because we have specified it with `user-service-ref`.'
  prefs: []
  type: TYPE_NORMAL
- en: This `DaoAuthenticationProvider` throws an `AuthenticationException` when the
    password submitted in a `UsernamePasswordAuthenticationToken` doesn't match the
    one which is loaded by `UserDetailsService` (making use of the `loadUserByUsername`
    method).
  prefs: []
  type: TYPE_NORMAL
- en: It exists a few other `AuthenticationProviders` that could be used in our projects,
    for example,, `RememberMeAuthenticationProvider`, `LdapAuthenticationProvider`,
    `CasAuthenticationProvider`, or `JaasAuthenticationProvider`.
  prefs: []
  type: TYPE_NORMAL
- en: Basic authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have said using a BASIC scheme is a great technique for REST applications.
    However when using it, it is critical to use an encrypted communication protocol
    (HTTPS) as the passwords are sent in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: As demonstrated in the *How to do it* section, the principle is very simple.
    The HTTP requests are the same as usual with an extra header `Authentication`.
    This header has the value made of the keyword `Basic` followed by a space, followed
    by a String encoded in base 64.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find online a bunch of free services to quickly encode/decode in base
    64 a String. The String to be encoded in base 64 has to be in the following form:
    `<username>:<password>`.'
  prefs: []
  type: TYPE_NORMAL
- en: BasicAuthenticationFilter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To implement our Basic authentication, we have added `BasicAuthenticationFilter`
    to our filter chain. This `BasicAuthenticationFilter` (`org.sfw.security.web.authentication.www.BasicAuthenticationFilter`)
    requires an `authenticationManager` and optionally an `authenticationEntryPoint`.
  prefs: []
  type: TYPE_NORMAL
- en: The optional configuration of an `authenticationEntryPoint` drives the filter
    towards two different behaviours presented next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both starts the same way: the filter is triggered from its position in the
    chain. It looks for the authentication header in the request and delegates to
    the `authenticationManager`, which then relies on the `UserDetailsService` implementation
    to compare it with the user credentials from the database.'
  prefs: []
  type: TYPE_NORMAL
- en: With an authenticationEntryPoint
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This is our configuration, which behaves in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: When the authentication succeeds, the filter-chain stops, and an `Authentication`
    object is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the authentication fails, the `authenticationEntryPoint` method is invoked
    in an interruption of the filter-chain. Our authentication entry-point sets a
    custom `WWW-Authenticate` response header and a `401` status-code (`FORBIDDEN`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This type of configuration provides a preauthentication where the `Authentication
    Header` in the HTTP Request is checked to see whether or not the business services
    require an authorization (Secure Object).
  prefs: []
  type: TYPE_NORMAL
- en: This configuration allows a quick feedback with a potential native BASIC form
    prompted by the web browser. We have chosen this configuration for now in our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Without an authenticationEntryPoint
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Without an authenticationEntryPoint, the filter behaves as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: When the authentication succeeds, the filter-chain stops, and an `Authentication`
    object is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the authentication fails, the filter chain continues. After that, if another
    authentication succeeds in the chain, the user is authenticated accordingly. But,
    if no other authentication succeeds in the chain, then the user is authenticated
    with an anonymous role and this may or may not suit the services access levels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Spring Security reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section has been largely inspired from the Spring rsecurity reference,
    which is again a great resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
  prefs: []
  type: TYPE_NORMAL
- en: 'An appendix provides a very complete guide to the Spring Security namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html](http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-namespace.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The remember-me cookie/feature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We passed over the `RememberMeAuthenticationFilter` that provides different
    ways for the server to remember the identity of a Principal between sessions.
    The Spring Security reference provides extensive information on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with a third-party OAuth2 scheme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the Spring social project in order to use the OAuth2 protocol
    from a client perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We won't create an OAuth2 **Authentication Server** (**AS**) here. We will establish
    connections to third-party Authentication servers (Yahoo!) to authenticate on
    our application. Our application will be acting as a **Service Provider** (**SP**).
  prefs: []
  type: TYPE_NORMAL
- en: We will use Spring social whose first role is to manage social connections transparently
    and to provide a facade to invoke the provider APIs (Yahoo! Finance) using Java
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two Maven dependencies have been added for Spring social:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to handle an OAuth2 connection to Twitter or Facebook, we would
    have to add the following dependencies as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'After the BASIC authentication section, the Spring Security configuration file
    hasn''t changed much. A few interceptors can be noticed in the `http` bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following `SocialUserConnectionRepositoryImpl`, we have created our
    own implementation of `org.sfw.social.connect.ConnectionRepository`, which is
    a `Spring Social` c`ore` interface with methods to manage the social-users connections.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In reality, this custom implementation extends and adapts the work from [https://github.com/mschipperheyn/spring-social-jpa](https://github.com/mschipperheyn/spring-social-jpa)
    published under a GNU GPL license.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, `SocialUserConnectionRepositoryImpl` makes use of a custom
    Spring Data JPA `SocialUserRepository` interface whose definition is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'This Spring Data JPA repository supports a `SocialUser` entity (social connections)
    that we have created. This Entity is the direct model of the `UserConnection`
    SQL table that `JdbcUsersConnectionRepository` would expect to find if we would
    use this implementation rather than ours. The `SocialUser` definition is the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SocialUserConnectionRepositoryImpl` is instantiated in a higher-level
    service layer: `SocialUserServiceImpl`, which is an implementation of the Spring
    `UsersConnectionRepository` interface. This implementation is created as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'This higher level `SocialUserServiceImpl` is registered in the `cloudstreetmarket-api`
    Spring configuration file (`dispatcher-context.xml`) as a factory-bean that has
    the capability to produce `SocialUserConnectionRepositoryImpl` under a request-scope
    (for a specific social-user profile). The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'Three other beans are defined in this `dispatcher-context.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'The The `SignInAdapterImpl` signs in a user in our application after the OAuth2
    authentication. It performs what we want it to perform at this step from the application
    business point of view. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'The `connectionFactoryLocator` can also refer to more than one connection factories.
    In our case, we have only one: `YahooOAuth2ConnectionFactory`. These classes are
    the entry points of social providers APIs (written for Java). We can normally
    find them on the web (from official sources or not) for the OAuth protocol we
    target (OAuth1, OAuth1.0a, and OAuth2).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are few existing OAuth2 adaptors right now for Yahoo! We've had to do
    it ourselves. That's why these classes are available as sources and not as jar
    dependencies (in the Zipcloud project).
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to controllers'' declarations, the `dispatcher-context.xml` configures
    a `ProviderSignInController`, which is completely abstracted in `Spring Social
    Core`. However, to register a OAuth2 user in our application (the first time the
    user visits the site), we have created a custom `SignUpController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: It's time to try it now. To proceed, we suggest you to create a Yahoo! account.
    We are not actually sponsored by Yahoo! It is only for the strategy of our great
    Zipcloud company which is oriented on financial services. It is not only for Marissa
    Mayer's blue eyes! ([https://login.yahoo.com](https://login.yahoo.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start your Tomcat server and click on the login button (at the far right of
    the main menu). Then hit the **Sign-in with Yahoo!** button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be redirected to the Yahoo! servers in order for you to authenticate
    on their side (if you are not logged-in already):![How to do it...](img/image00868.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged-in, agree that Cloudstreet Market will be able to access your profile
    and your contacts. We won't make use of contacts; however, we have the Java adaptors
    to access them. If it's too scary, just create an empty new Yahoo! account:![How
    to do it...](img/image00869.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Agree** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yahoo! should now redirect to the local `cloudstreetmarket.com` server and specifically
    to the `/api/signin/yahoo` handler with an authorization code as URL parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application detects when in the `Cloudstreet Market` database there isn't
    any `User` registered for the `SocialUser`. This triggers the following popup
    and it should come back to the user until the account actually gets created:![How
    to do it...](img/image00870.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill the form with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Also, click on the user icon in order to upload a profile picture (if you wish).
    While doing so, make sure the property `pictures.user.path` in `cloudstreetmarket-api/src/main/resources/application.properties`
    is pointing to a created path on the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Once this step is done, the new public activity **Marcus registers a new account**
    should appear on the welcome page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, bound to each REST response from the API, the extra-headers **Authenticated**
    and **WWW-Authenticate** must be present. This is proof that we are authenticated
    with OAuth2 capability in the application.![How to do it...](img/image00871.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We perform in this recipe a social integration within our application. An OAuth2
    authentication involves a service provider (cloudstreetmarket.com) and an identity
    provider (Yahoo!).
  prefs: []
  type: TYPE_NORMAL
- en: This can only happen if a user owns (or is ready to own) an account on both
    parties. It is a very popular authentication protocol nowadays. As most of Internet
    users have at least one account in one of the main Social SaaS providers (Facebook,
    Twitter, LinkedIn, Yahoo!, and so on), this technique dramatically drops the registration
    time and login time spent on web service providers.
  prefs: []
  type: TYPE_NORMAL
- en: From the application point of view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the sign in with Yahoo! button is clicked by the user, a HTTP POST request
    is made to one of our API handler `/api/signin/yahoo`. This handler corresponds
    to `ProviderSignInController`, which is abstracted by `Spring Social`.
  prefs: []
  type: TYPE_NORMAL
- en: This handler redirects the user to the Yahoo! servers where he can authenticate
    and give the right for the application to use his social identity and access some
    of his Yahoo! data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo! sends an authorization-code to the application as a parameter of the
    redirection to the callback URL it performs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application processes the callback with the authorization code as parameter.
    This callback targets a different method-handler in the abstracted `ProviderSignInController`.
    This handler completes the connection recalling Yahoo! in order to exchange the
    authorization code against a **refresh token** and an **access token**. This operation
    is done transparently in the `Spring Social` background.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The same handler looks-up in database for an existing persisted social connection
    for that user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If one connection is found, the user is authenticated with it in `Spring Security`
    and redirected to the home page of the portal with the Yahoo! user-ID as request
    parameter (parameter named `spi`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no connection is found, the user is redirected to the `SignupController`
    where his connection is created and persisted. He is then authenticated in Spring
    Security and redirected to the portal's home page with the Yahoo! user ID as request
    parameter (named `spi`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the portal home page is loaded, the Yahoo! user ID request parameter is
    detected and this identifier is stored in the HTML5 `sessionStorage` (we have
    done all this).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From now on, in every single AJAX request the user makes to the API, the `spi`
    identifier will be passed as a request header, until the user actually logs out
    or closes his browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the Yahoo! point of view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Yahoo! APIs provide two ways of authenticating with OAuth2\. This induces
    two different flows: the Explicit OAuth2 flow, suited for a server-side (web)
    application and the Implicit OAuth2 flow that particularly benefits to frontend
    web clients. We will focus on the implemented explicit flow here.'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2 explicit grant flow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here''s a summary picture of the communication protocol between our application
    and Yahoo!. This is more or less a standard OAuth2 conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth2 explicit grant flow](img/image00872.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters marked with the `*` symbol are optional in the communication.
    This flow is also detailed on the OAuth2 Yahoo! guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.yahoo.com/oauth2/guide/flows_authcode](https://developer.yahoo.com/oauth2/guide/flows_authcode)'
  prefs: []
  type: TYPE_NORMAL
- en: Refresh-token and access-token
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The difference between these two tokens must be understood. An access-token
    is used to identify the user (Yahoo! user) when performing operations on the Yahoo!
    API. As an example, below is a GET request that can be performed to retrieve the
    Yahoo! profile of a user identified by the Yahoo! ID abcdef123:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: To provide identification to this call, the **access-token** must be passed
    in as the value of the `Authorization` request header with the `Bearer` keyword.
    In general, access-tokens have a very limited life (for Yahoo!, it is an hour).
  prefs: []
  type: TYPE_NORMAL
- en: A refresh-token is used to request new access-tokens. Refresh-tokens have much
    longer lives (for Yahoo!, they actually never expire, but they can be revoked).
  prefs: []
  type: TYPE_NORMAL
- en: Spring social – role and key features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The role of Spring social is to establish connections with **Software-as-a-Service**
    (**SaaS**) providers such as Facebook, Twitter, or Yahoo! Spring social is also
    responsible for invoking APIs on the application (Cloudstreet Market) server side
    on behalf of the users.
  prefs: []
  type: TYPE_NORMAL
- en: These two duties are both served in the spring-social-core dependency using
    the Connect Framework and the OAuth client support, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, Spring social is:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Connect Framework` handling the core authorization and connection flow with
    service providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Connect Controller` that handles the OAuth exchange between a service provider,
    consumer, and user in a web application environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Sign-in Controller` that allows users to authenticate in our application,
    signing in with their Saas provider account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social connection persistence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Spring social core provides classes able to persist social connections
    in database using JDBC (especially with `JdbcUsersConnectionRepository`). The
    module even embeds a SQL script for the schema definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: When an application (like ours) uses JPA, an Entity can be created to represent
    this table in the persistence context. We have created the `SocialUser` Entity
    for this purpose in the *sixth step* of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this table Entity, you can see the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`userId`: This field matches the `@Id` (username) of the `User` when the user
    is registered. If the user is not yet registered, `userId` is the GUID (Yahoo!
    user ID, also called `spi` on the web side)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providerId`: This field is the lowercase name of the provider: Yahoo, Facebook
    or Twitter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providerUserId`: This field is the GUID, the unique identifier in the provider''s
    system (Yahoo! user ID or **spi**.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accessToken, secret, refreshToken, and expireTime`: These are the OAuth2 tokens
    (credentials) for the connection and their related information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two interfaces come with the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConnectionRepository`: This manages the persistence of one user connection.
    Implementations are request-scoped for the identified user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UsersConnectionRepository`: This provides access to the global store of connections
    across all users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you remember, we created our own `UsersConnectionRepository` implementation
    (`SocialUserServiceImpl`). Registered in the `dispatcher-servlet.xml` file, this
    implementation acts as a factory to produce request-scope `connectionRepository`
    implementations (`SocialUserConnectionRepositoryImpl`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Those two custom implementations both use the Spring Data JPA `SocialUserRepository`
    that we have created for finding, updating, persisting, and removing connections.
  prefs: []
  type: TYPE_NORMAL
- en: In the `SocialUserServiceImpl` implementation of the `UsersConnectionRepository`
    interface, a `ConnectionFactoryLocator` property is `autowired` and a `TextEncryptor`
    property is initialized with a default `NoOpTextEncryptor` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default `TextEncryptor` instance can be replaced with a proper encryption
    for the SocialUser data maintained in the database. Take a look at the spring-security-crypto
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html](http://docs.spring.io/spring-security/site/docs/3.1.x/reference/crypto.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Provider-specific configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The provider-specific configuration (Facebook, Twitter, Yahoo!) starts with
    definitions of the `connectionFactoryLocator` bean.
  prefs: []
  type: TYPE_NORMAL
- en: One entry-point – connectionFactoryLocator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `connectionFactoryLocator` bean that we have defined in the `dispatcher-servlet.xml`
    plays a central role in Spring Social. Its registration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: With this bean, Spring social implements a `ServiceLocator` pattern that allows
    us to easily plug-in/plug-out new social connectors. Most importantly, it allows
    the system to resolve at runtime a provider-specific connector (a `connectionFactory`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The specified Type for our `connectionFactoryLocator` is `ConnectionFactoryRegistry`,
    which is a provided implementation of the `ConnectionFactoryLocator` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'We have an example of the `connectionFactory` lookup in the `ProviderSignInController.signin`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `providerId` argument is a simple String (yahoo in our case).
  prefs: []
  type: TYPE_NORMAL
- en: Provider-specific ConnectionFactories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ConnectionFactory` such as `YahooOAuth2ConnectionFactory` are registered
    in `ConnectionFactoryRegistry` with the OAuth2 consumer key and consumer secret,
    which identify (with authorization) our application on the provider's side.
  prefs: []
  type: TYPE_NORMAL
- en: We have developed the `YahooOAuth2ConnectionFactory` class, but you should be
    able to find your `ProviderSpecificConnectionFactory` either from official `Spring
    Social` subprojects (`spring-social-facebook`, `spring-social-twitter`, and so
    on) or from open sources projects.
  prefs: []
  type: TYPE_NORMAL
- en: Signing in with provider accounts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to perform the OAuth2 authentication steps, Spring social provides
    an abstracted Spring MVC Controller: `ProviderSignInController`.'
  prefs: []
  type: TYPE_NORMAL
- en: This controller performs the OAuth flows and establishes connections with the
    provider. It tries to find a previously established connection and uses the connected
    account to authenticate the user in the application.
  prefs: []
  type: TYPE_NORMAL
- en: If no previous connection matches, the flow is sent to the created `SignUpController`
    matching the specific request mapping`/signup`. The user is not automatically
    registered as a CloudStreetMarket `User` at this point. We force the user to create
    his account manually via a `Must-Register` response header when an API call appears
    OAuth2 authenticated without a bound local user. This `Must-Register` response
    header triggers the **create an account now** popup on the client side (see in
    `home_community_activity.js`, the `loadMore` function).
  prefs: []
  type: TYPE_NORMAL
- en: It is during this registration that the connection (the `SocialUser` Entity)
    is synchronized with the created `User` Entity (see the `CommunityController.createUser`
    method).
  prefs: []
  type: TYPE_NORMAL
- en: The `ProviderSignInController` works closely with a `SignInAdapter` implementation
    (that we had to build as well) which actually authenticates the user into CloudStreetMarket
    with Spring Security. The authentication is triggered with the call to `communityService.signInUser(user)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the method that creates the `Authentication` object
    and stores it into the `SecurityContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: 'We register and initialize a Spring bean for `ProviderSigninController` with
    the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have specified the `signUpUrl` request mapping to redirect
    to our custom `SignupController` when no previous connection is found in database.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the specified `postSignInUrl` allows the user to be redirected
    to the home page of the portal when the `ProviderSignInController` resolves an
    existing connection to reuse.
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at other features of Spring social.
  prefs: []
  type: TYPE_NORMAL
- en: Performing authenticated API calls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we focused on presenting the OAuth2-client authentication process.
    In the next chapter, we will see how to use Spring social to perform requests
    to Yahoo! APIs on behalf of the users. We will see how can be used existing libraries
    in this purpose and how they work. In our case, we had to develop API connectors
    to Yahoo! financial APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring social ConnectController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring social web provides another abstracted controller which allows social
    users to directly interact with their social connections to connect, disconnect,
    and obtain their connection status. The `ConnectController` can also be used to
    build an interactive monitoring screen for managing connections to all the providers
    a site could possibly handle. Check out the Spring social reference for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#connecting)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SocialAuthenticationFilter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a filter to be added to Spring Security so that a social authentication
    can be performed from the Spring Security filter-chain (and not externally as
    we did).
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code](http://docs.spring.io/spring-social/docs/current/reference/htmlsingle/#enabling-provider-sign-in-with-code-socialauthenticationfilter-code)'
  prefs: []
  type: TYPE_NORMAL
- en: The list of Spring social connectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will find a list of implemented connectors to Saas-providers from the main
    page of the project: [http://projects.spring.io/spring-social](http://projects.spring.io/spring-social)'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an OAuth2 authentication server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the Spring Security OAuth project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://projects.spring.io/spring-security-oauth](http://projects.spring.io/spring-security-oauth)'
  prefs: []
  type: TYPE_NORMAL
- en: The harmonic development blog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The articles about Spring social have inspired this recipe. Feel free to visit
    this blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring](http://harmonicdevelopment.tumblr.com/post/13613051804/adding-spring-social-to-a-spring-mvc-and-spring)'
  prefs: []
  type: TYPE_NORMAL
- en: Storing credentials in a REST environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe presents a solution for storing credentials in RESTful applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution is a compromise between temporary client-side storage and permanent
    server-side storage.
  prefs: []
  type: TYPE_NORMAL
- en: On the client side, we are using HTML5 session storage to store temporarily
    the usernames and passwords encoded in base 64\. On the server side, only hashes
    are stored for passwords. Those hashes are created with `passwordEncoder`. This
    `passwordEncoder` is registered in Spring Security, autowired, and used in the
    `UserDetailsService` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Client side (AngularJS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have made use of the HTML5 `sessionStorage` attribute. The main change has
    been the creation of a `httpAuth` factory. Presented in the `http_authorized.js`
    file, this factory is a wrapper around `$http` to take care transparently of client-side
    storage and authentication headers. The code for this factory is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: This factory is invoked everywhere (or almost) in the former place of `$http`
    to pass and handle transparently the credentials or identification headers required
    for AJAX requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have avoided dealing directly with the `sessionStorage` attribute from the
    different controllers, in order to prevent being tightly coupled with this storage
    solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `account_management.js` file regroups different controllers (`LoginByUsernameAndPasswordController`,
    `createNewAccountController`, and `OAuth2Controller`) that store credentials and
    provider IDs in `sessionStorage` through `httpAuth`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A couple of factories have also been modified to pull and push data through
    the `httpAuth` factory. For example, the `indiceTableFactory` (from `home_financial_table.js`)
    requests the indices of a market with credentials handled transparently:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Server side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have declared a `passwordEncoder` bean in `security-config.xml` (in the
    `cloudstreetmarket-core` module):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: In `security-config.xml`, a reference to the password-encoder is made, as follows,
    in our `authenticationProvider` to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: 'The `passwordEncoder` bean is autowired in `CommunityServiceImpl` (our `UserDetailsService`
    implementation). Passwords are hashed here with `passwordEncoder` when accounts
    are registered. The stored hash is then compared to the user-submitted password
    when the user attempts to log in. The `CommunityServiceImpl` code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Our `ConnectionFactory` implementation `SocialUserConnectionRepositoryImpl`
    is instantiated in `SocialUserServiceImpl` with an instance of the Spring `TextEncryptor`.
    This gives the possibility to encrypt the stored connection-data for OAuth2 (most
    importantly, the access-tokens and refresh-tokens). At the moment, this data is
    not encrypted in our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, wetried to maintain the statelessness of our RESTful API for
    the benefits it provides (scalability, easy deployment, fault tolerance, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating for Microservices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Staying stateless matches a key concept of Microservices: the self-sufficiency
    of our modules. We won''t be using sticky sessions for scalability. When a state
    is maintained, it is only by the client, keeping for a limited time the user''s
    identifier and/or his credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: Another key concept of Microservices is the concept of limited and identified
    responsibilities (horizontal scalability). Our design supports this principle
    even if the size of the application doesn't require domain segmentation. We can
    fully imagine splitting our API by domains (community, indices and stocks, monitoring,
    and so on). Spring Security, which is located in the core-module, would be embedded
    in every API war without any problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s focus on how a state is maintained on the client side. We offer to our
    users two ways of signing-in: using a BASIC scheme or using OAuth2.'
  prefs: []
  type: TYPE_NORMAL
- en: A user can register his account for a BASIC authentication and then later decide
    to sign-in using OAuth2 (to do so, he has to bind his social account to his existing
    account).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, a user can register his account with OAuth2 and later sign in
    with a BASIC form. His OAuth2 credentials will naturally be bound to his authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the BASIC authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user registers an account, he defines a username and a password. These
    credentials are stored using the `httpAuth` factory and the `setCredentials` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `account_management.js` file and especially in the `createNewAccountController`
    (invoked through the `create_account_modal.html` modal), the `setCredentials`
    call can be found in the success handler of the `createAccount` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now, this method uses HTML5 `sessionStorage` as storage device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: The `window.btoa(...)` function encodes in base 64 the provided String. The
    `$httpProvider.defaults.headers` configuration object is also added a new header
    which will potentially be used by the next AJAX request.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user signs in using the BASIC form (see also the `account_management.js`
    and especially the `LoginByUsernameAndPasswordController` that is invoked from
    the `auth_modal.html` modal), the username and password are stored using the same
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Now with the `httpAuth` abstraction layer the angular `$http` service, we make
    sure that the **Authorization** header is set in each call to the API that is
    made using `$http`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the BASIC authentication](img/image00873.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using OAuth2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Initiated from `auth_modal.html`, signing in using OAuth2 creates a POST HTTP
    request to the API handler `/api/signin/yahoo` (this handler is located in the
    abstracted `ProviderSignInController`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The sign in request is redirected to the Yahoo! authentication screens. The
    whole page goes to Yahoo! until completion. When the API ultimately redirects
    the request to the home page of the portal, a `spi` request parameter is added:
    `http://cloudstreetmarket.com/portal/index?spi=F2YY6VNSXIU7CTAUB2A6U6KD7E`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This `spi` parameter is the Yahoo! user ID (GUID). It is caught by the `DefaultController`
    (`cloudstreetmarket-webapp`) and injected into the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.jsp` file renders the value directly in the top menu''s DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `menuController` (bound to the top menu) initializes itself, this
    value is read and stored in `sessionStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `httpAuth` factory (`http_authorized.js`), the `refresh()` method that
    is invoked before every single call to the API checks if this value is present
    and add two extra headers: `Spi` with the GUID value and the **OAuthProvider**
    (yahoo in our case). The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot here shows those two headers for one of our an AJAX requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using OAuth2](img/image00874.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 SessionStorage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We used the SessionStorage as storage solution on the client side for user credentials
    and social identifiers (GUIDs).
  prefs: []
  type: TYPE_NORMAL
- en: In HTML5, web pages have the capability to store data locally in the browser
    using the Web Storage technology. Data in stored Web Storage can be accessed from
    the page scripts' and values can be relatively large (up to 5MB) with no impact
    on client-side performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Web Storage is per origin (the combination of protocol, hostname, and port
    number). All pages from one origin can store and access the same data. There are
    two types of objects that can be used for storing data locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '`window.localStorage`: This stores data with no expiration date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window.sessionStorage`: This stores data for one session (data is lost when
    the tab is closed).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These two objects can be accessed directly from the window object and they
    both come with the self-explanatory methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: 'As indicated by [http://www.w3schools.com/](http://www.w3schools.com/), localStorage
    is almost supported by all browsers nowadays (between 94% and 98% depending upon
    your market). The following table shows the first versions that fully support
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 SessionStorage](img/image00875.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We should implement a fallback option with cookies for noncompliant web browsers,
    or at least a warning message when the browsers seem outdated.
  prefs: []
  type: TYPE_NORMAL
- en: SSL/TLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An encrypted communication protocol must be setup when using a BASIC authentication.
    We have seen that the credentials username:password and the Yahoo! GUID are sent
    as request headers. Even though those credentials are encoded in base 64, this
    doesn't represent a sufficient protection.
  prefs: []
  type: TYPE_NORMAL
- en: BCryptPasswordEncoder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the server side, we don't store the `User` passwords in plain text. We only
    store an encoded description of them (a hash). Therefore, a hashing function is
    supposedly not reversible.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"A hash function is any function that can be used to map digital data
    of arbitrary size to digital data of fixed size".* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s have a look at the following mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BCryptPasswordEncoder](img/image00876.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This diagram shows a hash function that maps `names` `to` `integers` from 0
    to 15.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used a `PasswordEncoder` implementation invoked manually while persisting
    and updating `Users`. Also `PasswordEncoder` is an Interface of Spring Security
    core:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Security provides three implementations: `StandardPasswordEncoder`,
    `NoOpPasswordEncoder`, and `BCryptPasswordEncoder`.'
  prefs: []
  type: TYPE_NORMAL
- en: We used `BCryptPasswordEncoder` as it is recommended on new projects. Instead
    of implementing a MD5 or SHA hashing algorithm, `BCryptPasswordEncoder` uses a
    stronger hashing algorithm with randomly generated `salt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows the storage of different HASH values for the same password. Here''s
    an example of different `BCrypt` hashes for the `123456` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting HTTP headers with AngularJS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have set Headers, check out the following page for more information about
    headers management with AngularJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.angularjs.org/api/ng/service/$http](https://docs.angularjs.org/api/ng/service/%24http)'
  prefs: []
  type: TYPE_NORMAL
- en: Browser support for localStorage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Get an insight about the overall support per bbrowser version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://caniuse.com/#search=localstorage](http://caniuse.com/#search=localstorage)'
  prefs: []
  type: TYPE_NORMAL
- en: About SSL and TLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have installed a SSL certificate on our production server. To buy and get
    issued a SSL certificate, we have had to provide our web server type (Apache 2)
    and a **Certificate Signing Request** (**CSR**) generated from the keytool program
    (embedded in the JDK).
  prefs: []
  type: TYPE_NORMAL
- en: '[http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/](http://arstechnica.com/information-technology/2012/11/securing-your-web-server-with-ssltls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Certificate_signing_request](http://en.wikipedia.org/wiki/Certificate_signing_request)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool](https://www.namecheap.com/support/knowledgebase/article.aspx/9422/0/tomcat-using-keytool)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorizing on services and controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we restrict the access to services and controllers depending
    upon the authorities that are granted to users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to install interceptors on specific URL paths and method-invocations,
    which will trigger a predefined authorization workflow: the `AbstractSecurityInterceptor`
    workflow.'
  prefs: []
  type: TYPE_NORMAL
- en: In order for us to test these services' restrictions, we also slightly customized
    the Swagger UI to use it over a BASIC authentication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We updated our `CustomBasicAuthenticationEntryPoint` class for this new version
    that allows the browser native BASIC-form to be prompted when the call is made
    from Swagger UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: We created a `MonitoringController` (a `RestController`) that offers the possibility
    to manage users for an administration purpose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `GET` method returns `User` objects directly (and not the `UserDTO`), which
    provides all the data about the users. Also, a `delete` method shows up at this
    location. The `MonitoringController` code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `communityService` implementation, the two used methods (`findAll`,
    `delete` ) have been secured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: 'As a reminder, we have set a global method-security in `security-config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Let's try it now. Restart your Tomcat and open a new window in your favorite
    browser. Open **Swagger UI** (`http://cloudstreetmarket.com/api/index.html`) as
    shown here:![How to do it...](img/image00877.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **monitoring** tab. Try to call the **GET /monitoring/users** method
    in order to list user accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your web browser should prompt a BASIC authentication form as follows:![How
    to do it...](img/image00878.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you cancel this form, you should receive a **401 (Unauthorized)** response
    code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For test purpose, there is a `delete` method in `communityController` that
    is not secured by any annotation. Also, remember that there is no specific URL
    interceptor defined for the `communityController` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Without sign in, try to call this handler from Swagger UI. As shown in the following
    screenshot, try to delete the user named **other10**.![How to do it...](img/image00879.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should receive a **403 (Forbidden)** response status because the underlying
    service-method is secured!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that you haven't been prompted a BASIC login form. Also, take a
    look at the response headers. You shouldn't see any **WWW-Authenticate** header,
    which could have triggered this popup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An `AuthenticationEntryPoint` is called if the user is not authenticated and
    if the requested HTTP resource appears to be secured. Securing the service alone
    is not sufficient for Spring Security to consider the Controller method-handler
    as secured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to `GET` the users again in the **monitoring** tab. You should see again
    the BASIC authentication form. Fill it with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now receive the following response with a **200 status code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00880.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Swagger UI cannot beautify the body when we request a JSON response but everything
    is there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice the response code: **WWW-Authenticate: CSM_Basic realm"="cloudstreetmarket.com"**.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see how the Spring Security authorization process works and how to configure
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security authorities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An `AuthenticationManager` implementation stores `GrantedAuthorities` into an
    `Authentication` object in the `SecurityContext`. These `GrantedAuthorities` are
    read by the `AccessDecisionManager` in an attempt to match them against accesses'
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The `AccessDecisionManager` implementations can be native or external and this
    explains why the infrastructure forces the authorities to be rendered as Strings.
  prefs: []
  type: TYPE_NORMAL
- en: If a `getAuthority()` method is not able to represent the `GrantedAuthority`
    as a String, then it should return `null`, indicating to the `AuthenticationManager`
    that it has to support this type of `Authority`.
  prefs: []
  type: TYPE_NORMAL
- en: This mechanism constraints the different `getAuthority()` implementations into
    limited responsibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have mentioned the Configuration attributes when we were introducing the
    `GrantedAuthority` objects (*Authenticating over a BASIC scheme* recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuration attributes play a key role in `SecurityInterceptor` and indirectly
    in `AccessDecisionManager` implementations, since `SecurityInterceptor` delegates
    to `AccessDecisionManager`. Configuration attributes implement the one-method
    `ConfigAttribute` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuration attributes are specified as annotations on secured methods or
    as access attributes on secured URLs (intercept-urls).
  prefs: []
  type: TYPE_NORMAL
- en: 'We have defined the following instruction in our `security-config.xml` file
    as a way to tell Spring Security to expect the configuration attributes `ROLE_BASIC`
    on web requests matching the `/basic.html` pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: With the default `AccessDecisionManager` implementation, any user having a matching
    `GrantedAuthority` will be granted the access.
  prefs: []
  type: TYPE_NORMAL
- en: For a voter-based `AccessDecisionManager` implementation, a configuration attribute
    beginning with `ROLE_` the prefix will be considered as a role and should be examined
    by a `RoleVoter`. We will see more about `AccessDecisionManager` in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'SecurityInterceptor protecting Secure objects are objects or actions that require
    a security examination. There are two types of secure objects that are handled
    by the Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Web resources such as `ServletRequest` or `ServletResponse.` Those are checked
    by **FilterSecurityInterceptor**: a core Filter positioned almost at the end of
    the filter chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method invocations, which are implementations of `org.aopalliance.intercept.MethodInvocation`.
    Those are checked by **MethodSecurityInterceptor**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security interceptor (method or HTTP request) intercepts asynchronously (event-based)
    every single secure object invocations before they actually reach the resource.
    Spring Security always applies a simple pattern when handling those invocations.
    This pattern comes from the use of `AbstractSecurityInterceptor` subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AbstractSecurityInterceptor` examinations impose a consistent workflow
    to Secure Objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Looking up the **configuration attributes** associated with the .secure object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting the secure object, current authentication object, and configuration
    attributes to the `AccessDecisionManager` interface for an authorization decision.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally changing the `Authentication` object under which the invocation takes
    place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing the secure object invocation to proceed (assuming access was granted).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling the `AfterInvocationManager` interface if configured, once the invocation
    has returned. If the invocation raised an exception, the `AfterInvocationManager`
    will not be invoked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This workflow can be summarized with the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuration attributes](img/image00881.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The original graph for this picture comes from the Spring Security reference.
    It is interesting because it highlights the different elements that `SecurityInterceptor`
    can use when examining a secure object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main idea is the delegation to an `AccessDecisionManager` interface and
    then optionally to an `AfterInvocationManager` interface, using the pulled attributes
    from `SecurityMetadaSource` and eventually the `AuthenticationManager` capability
    to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `RunAsManager` dependency can optionally be added to `SecurityInterceptor`
    on rare occasions where the `SecurityContext Authentication` object may need to
    be altered (*step 3* of the workflow). The interface is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: If no dependency is set for `RunAsManager`, the `SecurityInterceptor` will run
    a `NullRunAsManager` implementation. An `AfterInvocationManager` interface may
    optionally be configured and used to alter the `statusToken` object returned by
    the invocation (*step 5* of the workflow).
  prefs: []
  type: TYPE_NORMAL
- en: Pre-invocation handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An `AccessDecisionManager` decides whether an access must be allowed or not.
  prefs: []
  type: TYPE_NORMAL
- en: AccessDecisionManager
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `AccessDecisionManager` interface is called by the `SecurityInterceptor`
    (in *step 2* of its workflow) and is responsible for making the final access control
    decision.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface is made of the following three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the method names are pretty explicit:'
  prefs: []
  type: TYPE_NORMAL
- en: The `decide` method resolves an access control decision for the provided arguments.
    The `Authentication` object represents the caller invoking the method, the object
    is the Secured Object to be examined, the `configAttributes` are the configuration
    attributes associated with the secured object. Also, it throws an `AccessDeniedException`
    when access is denied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `supports(ConfigAttribute attribute)` method is called at an early stage
    of the examination to determine whether the `AccessDecisionManager` can process
    a specific `ConfigAttribute`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `supports(Class<?> clazz)` method is called prior the invocation to ensure
    the configured `AccessDecisionManager` supports the type of Secure Object that
    will be presented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using a namespace configuration, Spring Security automatically registers
    a default instance of `AccessDecisionManager` for assessing method invocations
    and web accesses, based on the access attributes which are specified in the intercept-url
    and protect-pointcut declarations (and in annotations if using annotations to
    secure methods).
  prefs: []
  type: TYPE_NORMAL
- en: 'A specific or custom `AccessDecisionManager` can be specified in the following
    cases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **http** Namespace when handling web resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'On the **global-method-security** Namespace when handling method invocations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Security includes three `AccessDecisionManager` implementations (`AffirmativeBased`,
    `ConsensusBased`, and `UnanimousBased`) that are based on voting. Voters are eligible
    `AccessDecisionVoter` implementations. The interface is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: A few `AccessDecisionVoter` implementations come along with the Framework (`AuthenticatedVoter`,
    `Jsr250Voter`, `PreInvocationAuthorizationAdviceVoter`, `WebExpressionVoter`,
    `RoleVoter`, and so on). During the examination, eligible `AccessDecisionVoters`
    are polled on the authorization decision. Voters' eligibility depends on the voters'
    registration in the `AccessDecisionManager.decisionVoters` property. It also depends
    on the voters' supports methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `AccessDecisionManager` decides whether or not it should be thrown an `AccessDeniedException`
    based on its assessment of the votes. Each `AccessDecisionVoter` assesses the
    Secure Object against different criteria.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"The most commonly used AccessDecisionVoter provided with Spring Security
    is the simple RoleVoter, which treats configuration attributes as simple role
    names and votes to grant access if the user has been assigned that role"."* |
      |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Spring Security reference* |'
  prefs: []
  type: TYPE_TB
- en: After invocation handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is only one `AfterInvocationManager` implementation in Spring Security:
    `AfterInvocationProviderManager`. This class aligns all the eligible `AfterInvocationProvider`
    implementations to give them the opportunity to alter the `SecurityInterceptor`
    result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `AccessDecisionManager` interface, the `AfterInvocationProvider`
    interface looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: Expression-based access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since Spring Security 3, it is now possible to use Spring **Expression Language**
    (**EL**) in order to define the Web security and methods security.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Expressions are evaluated with a root object as part of the evaluation
    context. Spring Security uses specific classes for web and method security as
    the root object, in order to provide built-in expressions and access to values
    such as the current principal."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Spring Security reference* |'
  prefs: []
  type: TYPE_TB
- en: 'The base class for expression root objects is `SecurityExpressionRoot`. This
    abstract class gives access to the following methods and properties which represent
    the common built-in expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Expression | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hasRole([role])` | Returns `true` if the current principal has the specified
    role. By default if the supplied role does not start with `ROLE_` it will be added.
    This can be customized by modifying the `defaultRolePrefix onDefaultWebSecurityExpressionHandler`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hasAnyRole([role1,role2])` | Returns `true` if the current principal has
    any of the supplied roles (given as a comma-separated list of strings). By default,
    if the supplied role does not start with `ROLE_` it will be added. This can be
    customized by modifying the `defaultRolePrefix` on `DefaultWebSecurityExpressionHandler`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hasAuthority([authority])` | Returns `true` if the current principal has
    the specified authority. |'
  prefs: []
  type: TYPE_TB
- en: '| `hasAnyAuthority([authority1,authority2])` | Returns `true` if the current
    principal has any of the supplied roles (given as a comma-separated list of strings).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `principal` | Allows direct access to the principal object representing the
    current user. |'
  prefs: []
  type: TYPE_TB
- en: '| `authentication` | Allows direct access to the current `Authentication` object
    obtained from the `SecurityContext`. |'
  prefs: []
  type: TYPE_TB
- en: '| `permitAll` | Always evaluates to `true.` |'
  prefs: []
  type: TYPE_TB
- en: '| `denyAll` | Always evaluates to `false.` |'
  prefs: []
  type: TYPE_TB
- en: '| `isAnonymous()` | Returns `true` if the current principal is an anonymous
    user. |'
  prefs: []
  type: TYPE_TB
- en: '| `isRememberMe()` | Returns `true` if the current principal is a remember-me
    user. |'
  prefs: []
  type: TYPE_TB
- en: '| `isAuthenticated()` | Returns `true` if the user is not anonymous. |'
  prefs: []
  type: TYPE_TB
- en: '| `isFullyAuthenticated()` | Returns `true` if the user is not an anonymous
    or a remember-me user. |'
  prefs: []
  type: TYPE_TB
- en: '| `hasPermission(Object target, Object permission)` | Returns `true` if the
    user has access to the provided target for the given permission. For example,
    `hasPermission(domainObject, ''read'').` |'
  prefs: []
  type: TYPE_TB
- en: '| `hasPermission(Object targetId, String targetType, Object permission)` |
    Returns `true` if the user has access to the provided target for the given permission.
    For example, `hasPermission(1,''com.example.domain.Message'', ''read'')`. |'
  prefs: []
  type: TYPE_TB
- en: Web Security expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the Spring Security namespace, the `<http>` block has a `use-expression`
    attribute that defaults to true. This property makes the access attributes in
    the `intercept-url` elements expecting expressions as values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Web security, the base class for expression root objects is `WebSecurityExpressionRoot`,
    which inherits the methods of `SecurityExpressionRoot` and provides one extra
    method: `hasIpAddress(…)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, `WebSecurityExpressionRoot` exposes in the evaluation context the `HttpServletRequest`
    object accessible under the name `request`.
  prefs: []
  type: TYPE_NORMAL
- en: If expressions are being used, a `WebExpressionVoter` will be added to the `AccessDecisionManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Method security expressions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Expressions for methods security have been introduced with Spring Security
    3.0\. Four security annotations support the use of expressions: `@PreAuthorize`,
    `@PostAuthorize`, `@PreFilter`, and `@PostFilter`.'
  prefs: []
  type: TYPE_NORMAL
- en: Access control using @PreAuthorize and @PostAuthorize
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The use of these annotations has to be activated in the global security bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '`@PreAuthorize` is commonly used to allow or disallow methods'' invocations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have implemented this annotation on the `MonitoringController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: The specified Expression `hasRole('ADMIN')` meant that the accesses to the controller
    will only be allowed to users within the role `ROLE_ADMIN`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can note the automatic prefixing of `ROLE`_ that avoids a word repetition.
    This nice feature can be used in Expressions, both in web security (intercept-url:
    access attribute) and methods security.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also consider this example from the Spring security reference documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Here, a method argument is passed into the expression to decide whether the
    current user has the `admin` permission for the given contact.
  prefs: []
  type: TYPE_NORMAL
- en: The `@PostAuthorize` is less commonly used but can perform an access-control
    check after the method has been invoked. To access the `AccessDecisionManager`
    return value in the Expression, use the built-in name `returnObject`.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering collections using @PreFilter and @PostFilter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It is now possible to rely on Spring Security to filter collections (using expressions)
    that may be returned from a method invocation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example from the reference document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: Spring Security iterates through the returned collection and removes any elements
    for which the supplied expression is false. The name filter object refers to the
    current object in the collection. You can also filter before the method call,
    using `@PreFilter`, though this is a less common requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, in order to use `hasPermission()` in expressions, it is necessary
    to explicitly configure a `PermissionEvaluator` in the application context. The
    following code is a example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: 'With `myPermissionEvaluator` being a `PermissionEvaluator` implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: JSR-250 and legacy method security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JSR-250 is a Java specification request that has been released in 2006\. It
    specifies a set of annotations to address common semantic patterns. Among these
    annotations, some relate to security:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Annotation name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `RolesAllowed` | Specifies the security roles permitted to access method(s)
    in an application |'
  prefs: []
  type: TYPE_TB
- en: '| `PermitAll` | Specifies that all security roles are permitted to access the
    annotated method, or all methods in the annotated class |'
  prefs: []
  type: TYPE_TB
- en: '| `DenyAll` | Specifies that no security roles are allowed to invoke the specified
    method(s) |'
  prefs: []
  type: TYPE_TB
- en: '| `DeclareRoles` | Used to specify the security roles by the application |'
  prefs: []
  type: TYPE_TB
- en: 'Spring Security supports these annotations but this support has to be activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Security also supports its legacy `@Secured` annotations, if enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Domain Object Security (ACLs)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some more complex applications may require authorization decisions to be taken,
    depending upon the actual domain object that is subject to method invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls)'
  prefs: []
  type: TYPE_NORMAL
- en: Spring EL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might need to find extra information about the Spring EL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Security reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Spring and Security reference and the Spring JavaDoc have been the main
    source of information for this recipe. We hope you have enjoyed our information
    selection, analysis, and point of view.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/apidocs/](http://docs.spring.io/spring-security/site/docs/current/apidocs/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hierarchical Roles and role nesting appear to be recurring requirements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authz-hierarchical-roles)'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6. Implementing HATEOAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Turning DTOs into Spring HATEOAS resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building links for a Hypermedia-driven API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a strategy to expose JPA entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from a third-party API with OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is HATEOAS? If you have never seen this word before, it can appear to be
    difficult to pronounce. Some pronounce it hate-ee-os; others say hate O-A-S. The
    important point is to remember that this abbreviation stands for **Hypermedia
    as the Engine of Application State** (**HATEOAS**). At the very least, you should
    remember Hypermedia. Hypermedia as a resource's capability to embed nodes that
    target external resources. Being connected to other resources, a hypermedia resource
    is also constrained to its domain, as it can't technically develop (as part of
    itself) other resources' domains.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it as **Wikipedia**. If we create a page whose sections are not self
    contained in the page title (domain), and if one of these sections is already
    covered in an external page, there are few chances that this situation will be
    raised by an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: HATEOAS is a constraint applicable to a REST architecture. It imposes on its
    resources a domain consistency, and at the same time, it imposes an explicit self
    documentation that the owner has to maintained for the sake of the whole cohesion.
  prefs: []
  type: TYPE_NORMAL
- en: The Richardson Maturity Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Richardson Maturity Model (by Leonard Richardson) provides a way to grade
    and qualify a REST API by its level of REST constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Richardson Maturity Model](img/image00882.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The more REST-compliant an API is, the higher its grade.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial state in this model is **Level 0**: **The Swamp of POX**. Here,
    the protocol (usually HTTP) is only used for its transport capabilities (not for
    its state description features). Also, there are no resource-specific URIs here,
    just one endpoint is used for one method (normally, `POST` in HTTP).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 1: Resources** is characterized by the implementation of resource-specific
    URIs. The resource identifiers can be found in URIs. However, still, only one
    method of the protocol is used (POST for HTTP again).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 2: HTTP Verbs** reflects an improved use of the protocol properties.
    For HTTP, this actually means that the API is making use of the HTTP methods for
    their purpose (`GET` to read, `POST` to create, `PUT` to edit, `DELETE` to delete,
    and so on). Also, the API provides response codes that reliably inform the user
    about the operation state.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 3: Hypermedia Controls** is the highest level in this model. It indicates
    the use of HATEOAS, which provides API-discovery features to the client.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more on the Richardson Maturity Model on Martin Fowler''s blog
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://martinfowler.com/articles/richardsonMaturityModel.html](http://martinfowler.com/articles/richardsonMaturityModel.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Turning DTOs into Spring HATEOAS resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe presents how to create Spring HATEOAS resources. Even if the emphasis
    here is on one specific resource—`IndexResource` (in place of the former `IndexOverviewDTO`),
    feel free to browse **cloudstreetmarket-api** and **cloudstreetmarket-core** to
    discover more changes.
  prefs: []
  type: TYPE_NORMAL
- en: The HATEOAS principle has been applied at this stage to all the resources that
    make the core of our business, which strongly reflects the financial data structure
    of Yahoo! (indices, quotes, products, historical data, graphs, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    `v6.x.x` branch. Then, run a `maven clean install` command on the **cloudstreetmarket-parent**
    module (right-click on the **Maven Clean** menu under **Run as…** and then again
    on **Maven Install** under **Run as…**) followed by a click on **Maven Update
    Project** menu to synchronize Eclipse with the Maven configuration (right-click
    on the module and then navigate to **Maven** | **Update Project…**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This branch includes SQL scripts that prepopulate the database with real financial
    data coming from Yahoo!.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the pulled changes, a new `/app` configuration directory shows up at
    the same level as `cloudstreetmarket-parent` and `zipcloud-parent`. This `/app`
    directory has to be copied to your system''s home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy it to `C:\Users\{system.username}\app` if you are on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy it to `/home/usr/{system.username}/app` if you are on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are on Mac OS X, copy it at `/Users/{system.username}/app`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring HATEOAS comes with the following dependency. This dependency has been
    added to **cloudstreetmarket-parent**, **cloudstreetmarket-core**, `and` **cloudstreetmarket-api**`:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: As the recipe title suggests, the goal is to get rid of the existing DTOs that
    were exposed with the REST API. We have, for now, removed IndexOverviewDTO, MarketOverviewDTO,
    ProductOverviewDTO, and StockProductOverviewDTO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Those DTOs have been replaced by these classes: IndexResource, StockProductResource,
    ChartResource, ExchangeResource, IndustryResource, and MarketResource.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown with IndexResource, which is presented as follows, all these new classes
    inherit the Spring HATEOAS Resource class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, with IndexResource, resources are created from JPA entities
    (here, Index.java). These entities are stored in the Resource supertype under
    the content property name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have transformed the JPA entities, abstracting their @Id in an implementation
    of the Identifiable interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the details of the ProvidedId class, which is one of our Identifiable
    implementations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One new Spring dependency, a few new resource objects (Resource subclasses),
    and finally some modifications to our Entities so that they implement the `Identifiable`
    interface. Let's debrief all this in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Spring HATEOAS resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As introduced at the beginning of this chapter, HATEOAS is about links. It is
    fair to say that we can expect, as part of the Framework, an existing Type that
    supports and standardizes the representation of links.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the role of the `ResourceSupport` class (part of Spring HATEOAS): to
    support the collection and management of links attached to a resource.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, a REST resource is also a content. The Framework also offers
    a `Resource` class that already inherits `ResourceSupport`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, using Spring HATEOAS, we can decide to model our resource objects
    (`IndexResource`, `StockProductResource`, and so on) in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: We can model them either by making them inherit `ResourceSupport` directly.
    By doing so, we have to manage the resource-content as part of the wrapper object
    by ourselves. The content here is out of control for the Framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also model them by making them inherit the generic `Resource<T>` class
    whose Type `T` corresponds to the Type of the `POJO` content for the resource.
    This is the strategy we have chosen. The Framework offers goodies for our resource-object
    (`Inde3xResource`) on content binding, link creation, and even at the controller's
    level. We will see all this soon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ResourceSupport class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ResourceSupport` class is an object that implements `Identifiable<Link>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a sample from the `ResourceSupport` JavaDoc, which will provide
    you with an insight on its constructors and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Constructors | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ResourceSupport()` | This creates a new `ResourceSupport` class |'
  prefs: []
  type: TYPE_TB
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Void add(Iterable<Link> links)` | This adds all the given links to the resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Void add(Link... links)` | This adds all the given links to the resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Void add(Link link)` | This adds the given link to the resource |'
  prefs: []
  type: TYPE_TB
- en: '| `Link getId()` | This returns the link with `rel` of `Link.REL_SELF` |'
  prefs: []
  type: TYPE_TB
- en: '| `Link getLink(String rel)` | This returns the link with the given `rel` |'
  prefs: []
  type: TYPE_TB
- en: '| `List<Link> getLinks()` | This returns all the links contained in this resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean hasLink(String rel)` | This returns whether the resource contains
    a link with the given `rel` |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean hasLinks()` | This returns whether the resource contains links at
    all |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean removeLinks()` | This removes all the links added to the resource
    so far |'
  prefs: []
  type: TYPE_TB
- en: '| `Boolean equals(Object obj)` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `int hashCode()` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `String toString()` |   |'
  prefs: []
  type: TYPE_TB
- en: As introduced earlier, this class is all about links! We will see that Spring
    HATEOAS provides a small machinery around links.
  prefs: []
  type: TYPE_NORMAL
- en: The Resource class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `Resource` class is a wrapper for a `POJO`. The `POJO` is stored in a `content`
    property of this class. A `Resource` class natively extends `ResourceSupport`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample from the `Resource` JavaDoc that provides an insight into
    its constructors and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Constructors | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Resource(T content, Iterable<Link> links)` | This creates a new resource
    with the given content and links |'
  prefs: []
  type: TYPE_TB
- en: '| `Resource(T content, Link... links)` | This creates a new resource with the
    given content and links (optional) |'
  prefs: []
  type: TYPE_TB
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `TgetContent()` | This returns the underlying entity |'
  prefs: []
  type: TYPE_TB
- en: '| `void add(Iterable<Link> links)` | This adds all the given links to the resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `void add(Link... links)` | This adds all the given links to the resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `void add(Link link)` | This adds the given link to the resource |'
  prefs: []
  type: TYPE_TB
- en: '| `Link getId()` | This returns the link with a `rel` of `Link.REL_SELF` |'
  prefs: []
  type: TYPE_TB
- en: '| `Link getLink(String rel)` | This returns the link with the given `rel` |'
  prefs: []
  type: TYPE_TB
- en: '| `List<Link> getLinks()` | This returns all the links contained in this resource
    |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean hasLink(String rel)` | This returns whether the resource contains
    a link with the given `rel` |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean hasLinks()` | This returns whether the resource contains links at
    all |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean removeLinks()` | This removes all the links added to the resource
    so far |'
  prefs: []
  type: TYPE_TB
- en: '| `Boolean equals(Object obj)` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `int hashCode()` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `String toString()` |   |'
  prefs: []
  type: TYPE_TB
- en: Two handy constructors, one getter for the content, and all the link-related
    helpers, this is what the Resource class is made of.
  prefs: []
  type: TYPE_NORMAL
- en: The Identifiable interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Identifiable` interface plays a central role in Spring HATEOAS, since the
    key classes `Resource`, `ResourceSupport`, `Resources`, and `PagedResources` classes,
    which we'll present later on, are all `Identifiable` implementations. We will
    present later on, all these key classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Identifiable` interface is a Spring HATEOAS one-method interface (a generic
    interface) that is used to define an `Id` in an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: Consequently, the Framework uses this method to retrieve the ID with very few
    requirements about the nature of the passed-in object. With the capability of
    a class to implement several interfaces, it is costless to add such a qualifier
    to an object. Also, the contract of this interface is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: The most important use of this interface (and method) by the framework is to
    build links out of a `Resource` object. Have a look at the `slash` method of `LinkBuilderSupport`.
    You will note that, if `ID` is not an instance of `Identifiable` (this is what
    it usually ends up with), the `Link` is appended with the `toString()` representation
    of the `ID` type.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bear this behavior in mind if you are thinking of implementing custom ID types.
  prefs: []
  type: TYPE_NORMAL
- en: Abstracting the Entities' @Id
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you plan to stick with Spring HATEOAS without extending it to Spring Data
    REST, it is probably not an absolute necessity to decouple the base entities from
    their `@Id`. At least not in the way we did it.
  prefs: []
  type: TYPE_NORMAL
- en: Here, this practice comes from Oliver Gierke, in his `Spring RestBucks` application.
    Spring RestBucks is a showcase application for several modern Spring REST features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Oliver Gierke is the Spring Data lead developer at Pivotal Software, Inc.. He
    has also been involved in Spring HATEOAS. Spring Data is an amazing project and
    product. We can trust Oliver Gierke for his vision and decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In his `AsbtractId` implementation, O. Gierke defines the `Id` property as private
    and annotates it as `@JsonIgnore`. He drives us toward the nonexposure of the
    `Id` attribute as part of the resource-content. In REST, the ID of a resource
    should be its URI.
  prefs: []
  type: TYPE_NORMAL
- en: If you have the chance to take a look at Spring Data REST, this approach fully
    makes sense as part of the Framework, which strongly correlates REST resources
    to Spring Data repositories.
  prefs: []
  type: TYPE_NORMAL
- en: We have made the choice of not covering Spring Data REST as part of this book.
    However, not exposing entity IDs is not critical for our application. For these
    reasons, and also because we wish to maintain conventionality on this point in
    regard to the [Chapter 7](part0113.xhtml#aid-3BOFI1 "Chapter 7. Developing CRUD
    Operations and Validations"), *Developing CRUD Operations and Validati* *ons*,
    IDs will be exposed as resource-attributes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If our HATEOAS introduction wasn''t clear enough to give you an idea of the
    principle, do read this presentation from Pivotal ([Spring.io](http://Spring.io))
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://spring.io/understanding/HATEOAS](https://spring.io/understanding/HATEOAS)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We recommend that you visit O. Gierke's Spring REST showcase application, which
    presents both Spring HATEOAS in practice coupled or not to Spring Data REST, at
    [https://github.com/olivergierke/spring-restbucks](https://github.com/olivergierke/spring-restbucks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find a few discussions about ID exposure at [https://github.com/spring-projects/spring-hateoas/issues/66](https://github.com/spring-projects/spring-hateoas/issues/66).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We advise you to read more about Spring Data REST since we have only introduced
    a little bit of it. Spring Data REST builds REST resources on top of Spring Data
    repositories and automatically publishes their CRUD services. You can learn more
    about it at [http://docs.spring.io/spring-data/rest/docs/current/reference/html](http://docs.spring.io/spring-data/rest/docs/current/reference/html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building links for a hypermedia-driven API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will focus on how to create links with Spring HATEOAS and
    how to bind them to resources.
  prefs: []
  type: TYPE_NORMAL
- en: We will detail the resource assemblers, which are reusable transition components
    used to pass from entities (such as `Index`) to their resources (`IndexResource`).
    These components also provide support for link creation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The created resources (IndexResource, ChartResource, ExchangeResource, IndustryResource,
    MarketResource, and so on) are created from their associated Entity (Index, ChartIndex,
    ChartStock, Exchange, Industry, Market, and so on) using resource assemblers registered
    as `@Component`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've used these assemblers to generate the links that come with a resource.
    They use static methods from `ControllerLinkBuilder` (`linkTo` and `methodOn`)
    and explicit labels defined as constants in the resources themselves (`EXCHANGE`,
    `CHART`, and `COMPONENTS`).
  prefs: []
  type: TYPE_NORMAL
- en: We have altered our previous SwaggerConfig class so that this class can be used
    for annotation-based configuration in other domains that Swagger. This class has
    been renamed to AnnotationConfig.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have also added to this AnnotationConfig class the following two annotations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: (`Because these two annotations don't have an XML equivalent yet`).
  prefs: []
  type: TYPE_NORMAL
- en: All the targeted controllers in these converters have been annotated with the
    @ExposesResourceFor annotation (on the class level).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These controllers now also return the created resources or pages of resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have made CloudstreetApiWCI generic. In this way, CloudstreetApiWCI
    can have a generic PagedResourcesAssembler @Autowired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since it is not the legacy purpose of a `WebCommonInterceptor` class to be used
    as a super controller sharing properties and utility methods, we will create an
    intermediate component between controllers and `WebCommonInterceptor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to @Autowire the PagedResourcesAssemblers, as we did, we have registered
    a PagedResourcesAssembler bean in dispatcher-servlet.xml:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: As a result, now calling the API for a ^GDAXI index code (http://cloudstreetmarket.com/api/indices/%5EGDAXI.xml)
    produces the following output:![How to do it…](img/image00883.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As links, we have expressed endpoints and URI paths. From those links we can
    retrieve other Entities in relationship with an index (if we want to expose them
    obviously).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section specifically details the links creation.
  prefs: []
  type: TYPE_NORMAL
- en: Resource assemblers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This kind of specialized converters (Resource assemblers) are thought for reusability.
    Their main functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating the resource and hydrating it with content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the resource's links from the Entity state or from the static global
    design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Framework provides a `ResourceAssemblerSupport` super-class whose role is
    to reduce boilerplate code in the assemblers' duties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ResourceAssemblerSupport` class is an abstract generic class. It enriches
    an assembler by providing a couple of extra methods. With `T` being a controller''s
    class or super. Type, its signature is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'The table here provides a glimpse of the `ResourceAssemblerSupport` JavaDoc:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `List<D> toResources(Iterable<? extends T> entities)` | This converts all
    the given entities into resources |'
  prefs: []
  type: TYPE_TB
- en: '| `protected D createResourceWithId(Object id, T entity)` | This creates a
    new resource with a self link to the given ID |'
  prefs: []
  type: TYPE_TB
- en: '| `D createResourceWithId(Object id, T entity, Object... parameters)` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `protected D instantiateResource(T entity)` | This instantiates the resource
    object. The default implementation will assume a `no-arg` constructor and use
    a reflection. However it can be overridden to manually set up the object instance
    initially (for example, to improve performance if this becomes an issue) |'
  prefs: []
  type: TYPE_TB
- en: 'The `ResourceAssemblerSupport` class also implements `ResourceAssembler`, which
    is the one-method interface presented here that forces the assembler to provide
    a `toResource(T entity)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: It can be noticed that we have overridden the `instantiateResource` method in
    our assemblers. As specified in the JavaDoc, not overriding it causes the Framework
    to instantiate the resource by reflection, looking for a `no-arg` constructor
    in the resource.
  prefs: []
  type: TYPE_NORMAL
- en: We have preferred here to avoid such constructors in our resources, as they
    can be a bit of an overhead.
  prefs: []
  type: TYPE_NORMAL
- en: PagedResourcesAssembler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This amazing, generic super assembler is used to build link-based pages of resources
    for the client. With an incredibly small amount of configuration, Spring HATEOAS
    builds for us a complete and out-of-the-box, fully populated page of typed-resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on our presented configuration, you can try calling the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://cloudstreetmarket.com/api/indices.xml](http://cloudstreetmarket.com/api/indices.xml)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this, you should obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PagedResourcesAssembler](img/image00884.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Can you see the **next rel** link and how it has been built by reflection from
    our method-handler annotations and their default and used values? Try to follow
    the **next** link to see how the navigation gets updated and incremented smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `IndexController.getSeveral()` method-handler (shown in the following
    snippet), we make sure that every single resource is built properly (content and
    links) by making the `PagedResourcesAssembler` using our custom `IndexResourceAssembler`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Building links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's have a look at the way we build resource links in assemblers. The presented
    `toResource()` method in `IndexResourceAssembler` uses two different techniques.
  prefs: []
  type: TYPE_NORMAL
- en: The first technique through **EntityLinks** uses JPA Entities; the second one,
    through the `ControllerLinkBuilder` static methods, uses `Controllers` directly.
  prefs: []
  type: TYPE_NORMAL
- en: EntityLinks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By declaring the `@EnableEntityLinks` annotation in a configuration class,
    an `EntityLinks` implementation gets registered: `ControllerEntityLinks`. All
    the Spring MVC controllers of **ApplicationContext** are looked up to search for
    the ones carrying a `@ExposesResourceFor(xxx.class)` annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: The `@ExposesResourceFor` annotation on a Spring MVC controller exposes the
    model Type that the controller manages. This registration enables the required
    mapping between the controller and a JPA entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'It must also be noted that the registered `ControllerEntityLinks` implementation
    assumes a certain `@RequestMapping` configuration on controllers. The `@RequestMapping`
    configuration is made as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: For a collection of resources, a class-level `@RequestMapping` annotation is
    expected. The controller then has to expose a method-handler mapped to an empty
    path, for example, `@RequestMapping(method = RequestMethod.GET)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For individual resources, those are exposed with the `id` of the managed JPA
    Entity, for example, `@RequestMapping("/{id}")`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Acknowledging these points, the `EntityLinks` implementation (`ControllerEntityLinks`)
    is used from `@Autowiring` to generate `Links` using the collection of methods
    it provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: ControllerLinkBuilder
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As introduced, Spring HATEOAS provides the `ControllerLinkBuilder` utility,
    which allows the creation of links by pointing to controller classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: As specified in the Spring HATEOAS reference, `ControllerLinkBuilder` uses Spring's
    `ServletUriComponentsBuilder` under the hood to obtain the basic URI information
    from the current request.
  prefs: []
  type: TYPE_NORMAL
- en: If our application runs at `http://cloudstreetmarket/api`, then the Framework
    builds `Links` on top of this root URI, appending it with the root controller
    mapping (`/indices`) and then with the subsequent method-handler specific path.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of regular expressions in @RequestMapping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `IndexController`, `StockProductController`, `ChartStockController`, and
    `ChartIndexController`, the `GET` method-handlers to retrieve single resources
    have a special `@RequestMapping` definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the IndexController''s `get()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: We ended up with this option because the Yahoo! Index codes appeared a bit more
    complex than simple strings. Especially considering the fact that these codes
    can carry one or more dots.
  prefs: []
  type: TYPE_NORMAL
- en: This situation caused Spring MVC not to be able to distinguish correctly the
    `@PathVariable` index from `extension` (stripping them out half the way).
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Spring MVC allows us to define URI template patterns with regular expressions.
    The syntax is `{varName:regex}`, where the first part defines the variable name
    and the second defines the regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will note the regular expression we defined for our indices:'
  prefs: []
  type: TYPE_NORMAL
- en: The `[a-zA-Z0-9^.-]+` expression, which specifically allows the `^` and `.`
    characters, is commonly used in the index code by Yahoo!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To know more about Spring HATEOAS, refer to [http://docs.spring.io/spring-hateoas/docs/current/reference/html/](http://docs.spring.io/spring-hateoas/docs/current/reference/html/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The introduced HATEOAS representation implements the **Hypertext Application
    Language** (**HAL**). HAL is supported by Spring HATEOAS as the default rendering.
    Learn more about the HAL specification at [https://tools.ietf.org/html/draft-kelly-json-hal-06](https://tools.ietf.org/html/draft-kelly-js)
    and [http://stateless.co/hal_specification.html](http://stateless.co/hal_specification.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a strategy to expose JPA Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `content` object(s) exposed in resources are JPA Entities. The interesting
    point about wrapping a JPA Entity in a resource comes with the low-level nature
    of an Entity itself, which supposedly represents a restricted identifiable domain
    area. This definition should ideally be entirely translated to the exposed REST
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: So, how do we represent an Entity in REST HATEOAS? How do we safely and uniformly
    represent the JPA associations?
  prefs: []
  type: TYPE_NORMAL
- en: This recipe presents a simple and conservative method to answer these questions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have presented one entity used as a resource (`Index.java`). Here is another
    entity that is used: `Exchange.java`. This entity presents a similar strategy
    to expose its JPA associations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Exchange.java` Entity references two custom utility classes that are used
    to transform the way external Entities are fetched as part of the main entity
    rendering (JSON or XML). Those utility classes are the following `IdentifiableSerializer`
    and the `IdentifiableToIdConverter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `IdentifiableSerializer` class is used for JSON marshalling:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: 'The `IdentifiableToIdConverter` class is used for XML marshlling and is built
    with XStream dependencies:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's understand how this strategy works.
  prefs: []
  type: TYPE_NORMAL
- en: The REST CRUD principle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One REST architectural constraint is to present a uniform interface. A uniform
    interface is achieved by exposing resources from endpoints that can all be targeted
    from different HTTP methods (if applicable).
  prefs: []
  type: TYPE_NORMAL
- en: Resources can also be exposed under several representations (`json`, `xml`,
    and so on), and information or error messages must be self-descriptive. The implementation
    of HATEOAS provides a great bonus for the self-explanatory character of an API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In REST, the more intuitive and inferable things are, the better. From this
    perspective, as a web/UI developer, I should be able to assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the object I receive from the `GET` call on an endpoint will
    be the expected structure that I have to send back with a `PUT` call (the edition
    of the object)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, the same structure should be used for the creation of a new object
    (the `POST` method)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This consistency of payload structures among different HTTP methods is a *SOLID*
    and conservative argument that is used when it is time to defend the API interests.
    *It's pretty much always the time to defend the API interests*.
  prefs: []
  type: TYPE_NORMAL
- en: Exposing the minimum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exposing the minimum amount of information has been the core idea during the
    refactoring for this chapter. It's usually a great way to ensure that one endpoint
    won't be used to expose information data that would be external to the initial
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: A JPA Entity can have associations to other Entities (`@OneToOne`, `@OneToMany`,
    `@ManyToOne`, or `@ManyToMany`).
  prefs: []
  type: TYPE_NORMAL
- en: Some of these associations have been annotated with `@JsonIgnore` (and `@XStreamOmitField`),
    and some other associations have been annotated with `@JsonSerialize` and `@JsonProperty`
    (and `@XStreamConverter` and `@XStreamAlias`).
  prefs: []
  type: TYPE_NORMAL
- en: If the Entity doesn't own the relationship
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this situation, the database table of the Entity doesn't have a foreign key
    to the table of the targeted second Entity.
  prefs: []
  type: TYPE_NORMAL
- en: The strategy here is to completely ignore the relationship in REST to reflect
    the database state.
  prefs: []
  type: TYPE_NORMAL
- en: The `ignore` instructions depend on the supported representations and the chosen
    implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `json`, we are using `Jackson`, the solution has been: `@JsonIgnore`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `xml`, we are using `XStream`, the solution has been: `@XstreamOmitField`.'
  prefs: []
  type: TYPE_NORMAL
- en: If the Entity owns the relationship
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, the database table of the Entity has a foreign key the table of the targeted
    second Entity.
  prefs: []
  type: TYPE_NORMAL
- en: If we plan to update an entity of this table, which depends on an entity of
    the other table, we will have to provide this foreign key for the entity.
  prefs: []
  type: TYPE_NORMAL
- en: The idea then is to expose this foreign key as a dedicated field just as all
    the other columns of the database table. Again, the solution to implement this
    depends on the supported representations and the configured marshallers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `json` and `Jackson`, we have done it with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we rename the attribute to suggest that we are presenting (and
    expecting) an ID. We have created the `IdentifiableSerializer` class that extracts
    the `ID` from the entity (from the `Identifiable` interface) and places only this
    `ID` into the value of the attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `xml` and `XStream`, it has been:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: In the same way, we rename the attribute to suggest that we are presenting an
    `ID`, and we target the custom converter `IdentifiableToIdConverter` that also
    chooses only the **ID** of the Entity as a value for the attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the `xml` representation example of the `^AMBAPT` index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![If the Entity owns the relationship](img/image00885.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Separation of resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This strategy promotes a clear separation between resources. The displayed fields
    for each resource match the database schema entirely. This is a standard practice
    in web developments to keep the HTTP request payload unchanged for the different
    HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: When HATEOAS is adopted, we should then fully encourage the use of links to
    access related entities instead of nested views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous recipe *Building links for a Hypermedia-Driven API* features examples
    to access (using links) the Entities that are associated with `@...ToOne` and
    `@...ToMany`. Below is an example of these links in an exposed Entity as it is
    achieved in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Separation of resources](img/image00886.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We detail here official sources of information for the implemented marshallers.
  prefs: []
  type: TYPE_NORMAL
- en: Jackson custom serializers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the official wiki page guide for these serializers at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.fasterxml.com/JacksonHowToCustomSerializers](http://wiki.fasterxml.com/JacksonHowToCustomSerializers)'
  prefs: []
  type: TYPE_NORMAL
- en: XStream converters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'XStream has been migrated from [codehaus.org](http://codehaus.org) to **Github**.
    To follow an official tutorial about XStream converters, go to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://x-stream.github.io/converter-tutorial.html](http://x-stream.github.io/converter-tutorial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data from a third-party API with OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having authenticated a user with OAuth2, it is useful to know how to call
    a remote third-party API with the user's OAuth2 account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that `IndexController`, `StockProductController`, `ChartIndexController`,
    and `ChartStockController` invoke underlying service methods named `gather(…)`.
    This concept suggests that lookups to third-party providers (Yahoo!) are proceeded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `IndexServiceImpl`, for example, you can find the `gather(String indexId)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: 'It is really the `updateIndexAndQuotesFromYahoo(…)` method that bridges the
    service layer to the third-party API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: In the case of Facebook, Twitter, or LinkedIn, you should be able to find a
    complete API adaptor to execute calls to their APIs without having to alter it.
    In our case, we had to develop the needed adaptor so that financial data can be
    retrieved and exploited from Yahoo!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We added two methods to a `FinancialOperations` interface as shown in this
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: 'This interface has a `FinancialTemplate` implementation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: The `FinancialTemplate` class is initialized as part of the global `Yahoo2Template`
    that is returned with the `connection.getApi()` calls of `IndexServiceImpl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using this technique to pull (as needed) not only indices and stock quotes from
    Yahoo! but also graphs, we are now able to display real-time data from more than
    25,000 stocks and 30,000 indices.![How to do it…](img/image00887.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client side is capable of using the provided HATEOAS links that come along
    with each result element. It uses these links to render detail views such as **Index
    detail** or **Stock detail** (new screens).![How to do it…](img/image00888.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's understand the theory behind this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the financial data of Yahoo!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the context of our application, there is still one refactoring that needs
    to be explained. It is about historical data and graphs.
  prefs: []
  type: TYPE_NORMAL
- en: The Yahoo! financial API provides historical data. This data can be used to
    build graphs, and it was initially planned to do it this way. Now, Yahoo! also
    generates graphs (for both historical and intraday data) and these graphs are
    quite customizable (time period, average lines, chart or stock's display option,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: We have decided to drop the historical part, which technically is very similar
    to quote retrieval (data snapshots), to exclusively use graphs generated by Yahoo!
  prefs: []
  type: TYPE_NORMAL
- en: Graph generation/display
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our implementation provides an interesting example of image serving in REST.
    Have a look at `ChartIndexController` (or `ChartStockController`) and see how
    images are returned as byte arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Also have a look at the `home_financial_graph.js` file, how the received content
    is set into an HTML `<img…>` markup.
  prefs: []
  type: TYPE_NORMAL
- en: How is the financial data pulled/refreshed?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The idea here is to rely on OAuth authenticated users. Yahoo! provides different
    rates and limits for authenticated and non-authenticated users. Non-authenticated
    calls are identified on the Yahoo! side by the calling IP, which will be (more
    or less) the entire `CloudstreetMarket` application IP in our case. If Yahoo!
    considers that there are too many calls coming from our IP, that will be an issue.
    However, if there are too many calls coming from one specific user, Yahoo! will
    restrict that user without affecting the rest of the application (and this situation
    can further be recovered by the application).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the method-handlers that potentially deal with the financial
    data of Yahoo! call the appropriated underlying service through methods named
    `gather()`.
  prefs: []
  type: TYPE_NORMAL
- en: In these `gather()` methods, the Yahoo! third-party API interferes between our
    database and our controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user is authenticated with OAuth2, the underlying service checks whether
    the data exists or not in the database and whether it has been updated recently
    enough to match a predefined buffer period for the data type (one minute for `indices`
    and `stocks`):'
  prefs: []
  type: TYPE_NORMAL
- en: If the answer is yes, this data is returned to the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the answer is no, the expected data is requested from Yahoo!, transformed,
    stored in the database, and returned to the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is nothing planned at the moment for users who are not authenticated with
    OAuth, but we can imagine easily making them using a common Yahoo! OAuth account.
  prefs: []
  type: TYPE_NORMAL
- en: Calling third-party services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the presented recipe, this part is done in the `updateIndexAndQuotesFromYahoo`
    method. Our Spring configuration defines a `connectionRepository` bean created
    with a `request` scope for each user. The `connectionRepository` instance is created
    from the `createConnectionRepository` factory method of our `SocialUserServiceImpl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this, we `@Autowire` these two beans in our service layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `updateIndexAndQuotesFromYahoo` method obtains the logged-in `userId`
    (`guid`) from the Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: 'The access token is extracted from the `SocialUser` Entity (coming from the
    database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: 'The Yahoo! connection is retrieved from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: 'If the connection is not null, the third-party API is called from the connection
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we had to develop the actual `FinancialTemplate` (the Java representation
    of the Yahoo! financial API), but you should be able to find such existing implementations
    for your third-party provider.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides a list of many existing open-source Spring Social adaptors
    that we can use in our projects
  prefs: []
  type: TYPE_NORMAL
- en: Spring Social — existing API providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following address provides an up-to-date aggregation of Spring social extensions
    for connection-support and API-binding to many popular service providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/spring-projects/spring-social/wiki/Api-Providers](https://github.com/spring-projects/spring-social/wiki/Api-Providers)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Yahoo! financial stock tickers**: We have prefilled our database with a set
    of financial references to Yahoo! (stock references and index references), which
    allows us to point and search for resources that can, for the second time, be
    updated with real-time data through the Yahoo! APIs. This set of references comes
    from the great work published by **Samir Khan** on his blog accessible at [http://investexcel.net/all-yahoo-finance-stock-tickers](http://investexcel.net/all-yahoo-finance-stock-tickers).
    This XLS data has then been transformed into SQL by us, using a basic text editor
    and macros.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7. Developing CRUD Operations and Validations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we have seen how to build the read-only HTTP methods of an API.
    These methods in Spring MVC Controllers required you to master, or at least understand
    the presentation of a few techniques. Developing non-readonly HTTP methods raises
    a new set of underlying topics. Each of these topics has a direct impact on the
    customer experience and therefore each of them is important. We introduce the
    following four recipes as a frame to cover the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending REST handlers to all HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating resources using bean validation support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalizing messages and contents for REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating client-side forms with HTML5 and AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing CRUD operations and validations at this stage turns out to be one
    of the topics with the widest spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: Our application will be transformed in many ways, from the transaction management
    standardisation to the internationalization of errors (and content), passing through
    the REST handlers, HTTP compliance.
  prefs: []
  type: TYPE_NORMAL
- en: In line with the previous chapters and with the global strategy of this book,
    we are focusing on how Spring MVC plays a key role in today's and tomorrow's best
    practices in regards to scalability and Microservices communications. It is a
    hard choice to decide skipping bits, but the Framework keeps adapting itself to
    new designs and challenges. This book tries to present a consistent integration
    of Spring MVC in a modern, sustainable, and scalable application.
  prefs: []
  type: TYPE_NORMAL
- en: Four recipes are presented here. The first one transforms two controllers to
    support the CRUD operations for their respective resources. Doing so requires
    a review of the database transactions and a review of the HTTP specification.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter presents two validation strategies supported by Spring MVC. Since
    validation errors are often meant to be rendered in more than one language, we
    have made sure that our application supports internationalization. We briefly
    see how AngularJS can be used in this perspective and how it can be used to process
    frontend validations that are always necessary to constrain the customer experience
    into the reality of the business-specific data management.
  prefs: []
  type: TYPE_NORMAL
- en: Extending REST handlers to all HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the core recipe of the chapter. We will detail how to use the Spring
    MVC method-handlers for HTTP methods that we haven''t covered yet: the non-readonly
    ones.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see the returned status codes and the HTTP standards driving the use
    of the `PUT`, `POST`, and `DELETE` methods. This will get us to configure HTTP-compliant
    Spring MVC controllers.
  prefs: []
  type: TYPE_NORMAL
- en: We will also review how request-payload mapping annotations such as `@RequestBody`
    work under the hood and how to use them efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we open a window on Spring transactions, as it is a broad and important
    topic in itself.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following the next steps will present the changes applied to two controllers,
    a service and a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v7.x.x`. Then, run a `maven clean install` on the `cloudstreetmarket-parent`
    module (right-click on the module and go to **Run as…** | **Maven Clean** and
    then again go to **Run as…** | **Maven Install**) followed by a `Maven Update`
    project to synchronize Eclipse with the maven configuration (right-click on the
    module and then go to **Maven** | **Update Project…**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `Maven clean` and `Maven install` commands on `zipcloud-parent` and
    then on `cloudstreetmarket-parent`. Then, go to **Maven** | **Update Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this chapter, we are focused on two REST controllers: the `UsersController`
    and a newly created `TransactionController`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `TransactionController` allows users to process financial transactions (and
    thus to buy or sell products).
  prefs: []
  type: TYPE_NORMAL
- en: 'A simplified version of `UserController` is given here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: 'The **TransactionController** is represented here in a simplified version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: (The `GET` method-handlers given here come from previous recipes.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: (The `PUT` and `DELETE` method-handlers introduced here are non-readonly methods.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: The call to the `hydrate` method in the `post` method prepares the Entity for
    underlying service uses. It populates its relationships from IDs received in the
    request payload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique will be applied to all the REST resources used for CRUD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the `hydrate` method in `transactionServiceImpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nothing amazing here; it is mainly about building our Entity to suit our needs.
    An interface can be created to standardize the practice.
  prefs: []
  type: TYPE_NORMAL
- en: All the service layers have been reviewed to drive uniform database transactions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The service implementations are now annotated by default with `@Transactional(readOnly
    = true)`. Check the following `TransactionServiceImpl` example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: 'The non-readonly methods of these service implementations override the class
    definition with the `@Transactional` annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: 'This principle has also been applied to custom repository implementations (such
    as `IndexRepositoryImpl`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s quickly review the different CRUD services presented in the controllers
    of this recipe. The following table summarizes them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| URI | Method | Purpose | Normal response codes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/actions/transactions` | GET | Search transactions | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/actions/transactions/{id}` | GET | Get a transaction | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/actions/transactions` | POST | Create a transaction | 201 Created |'
  prefs: []
  type: TYPE_TB
- en: '| `/actions/transactions/{id}` | DELETE | Delete a transaction | 204 No Content
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/users/login` | POST | Logs in a user | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/users` | GET | Get all | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/users/{username}` | GET | Get a user | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/users` | POST | Create a user | 201 Created |'
  prefs: []
  type: TYPE_TB
- en: '| `/users/{username}` | PUT | Update a user | 200 OK |'
  prefs: []
  type: TYPE_TB
- en: '| `/users/{username}` | DELETE | Delete a user | 204 No Content |'
  prefs: []
  type: TYPE_TB
- en: HTTP/1.1 specifications – RFC 7231 semantics and content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To understand the few decisions that have been taken in this recipe (and to
    legitimate them), we must shed some light on a few points of the HTTP specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting, feel free to visit Internet standards track document (RFC
    7231) for **HTTP 1/1** related to Semantics and Content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tools.ietf.org/html/rfc7231](https://tools.ietf.org/html/rfc7231)'
  prefs: []
  type: TYPE_NORMAL
- en: Basic requirements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the HTTP specification document, the request methods overview (section 4.1)
    states that it is a requirement for a server to support the `GET` and `HEAD` methods.
    All other request methods are optional.
  prefs: []
  type: TYPE_NORMAL
- en: The same section also specifies that a request made with a recognized method
    name (`GET`, `POST`, `PUT`, `DELETE`, and so on) but that doesn't match any method-handler
    should be responded with a `405 Not supported` status code. Similarly, a request
    made with an unrecognized method name (nonstandard) should be responded with a
    `501 Not implemented` status code. These two statements are natively supported
    and auto-configured by Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Safe and Idempotent methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The document introduces introduces the Safe and Idempotent qualifiers that can
    be used to describe a request method. Safe methods are basically readonly methods.
    A client using such a method does not explicitly requests a state change and cannot
    expect a state change as a result of the request.
  prefs: []
  type: TYPE_NORMAL
- en: As the Safe word suggests, such methods can be trusted to not cause any harm
    to the system.
  prefs: []
  type: TYPE_NORMAL
- en: An important element is that we are considering the client's point of view.
    The concept of Safe methods don't prohibit the system from implementing "potentially"
    harmful operations or processes that are not effectively read only. Whatever happens,
    the client cannot be held responsible for it. Among all the HTTP methods, only
    the `GET`, `HEAD`, `OPTIONS`, and `TRACE` methods are defined as safe.
  prefs: []
  type: TYPE_NORMAL
- en: The specification makes use of the idempotent qualifier to identify HTTP requests
    that, when identically repeated, always produce the same consequences as the very
    first one. The client's point of view must be considered here.
  prefs: []
  type: TYPE_NORMAL
- en: The idempotent HTTP methods are `GET`, `HEAD`, `OPTIONS`, `TRACE` (the Safe
    methods) as well as `PUT` and `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: A method's idempotence guarantees a client for example that sending a **PUT**
    request can be repeated even if a connection problem has occurred before any response
    is received.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The client knows that repeating the request will have the same intended effect,
    even if the original request succeeded, though the response might differ.
  prefs: []
  type: TYPE_NORMAL
- en: Other method-specific constraints
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `POST` methods are usually associated with the creation of resources on
    a server. Therefore, this method should return the `201 (Created)` status code
    with a location header that provides an identifier for the created resource.
  prefs: []
  type: TYPE_NORMAL
- en: However, if there hasn't been creation of resource, a `POST` method can (in
    practice) potentially return all types of status codes except `206 (Partial Content)`,
    `304 (Not Modified)`, and `416 (Range Not Satisfiable)`.
  prefs: []
  type: TYPE_NORMAL
- en: The result of a `POST` can sometimes be the representation of an existing resource.
    In that case, for example, the client can be redirected to that resource with
    a `303` status code and a `Location` header field. As an alternative to `POST`
    methods, `PUT` methods are usually chosen to update or alter the state of an existing
    resource, sending a `200 (OK)` or a `204 (No Content)` to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Edge cases with inconsistent matches raise errors with `409 (Conflict)` or `415
    (Unsupported Media Type)`.
  prefs: []
  type: TYPE_NORMAL
- en: Edge cases of no match found for an update should induce the creation of the
    resource with a `201 (Created)` status code.
  prefs: []
  type: TYPE_NORMAL
- en: Another set of constraints applies on the `DELETE` requests that are successfully
    received. Those should return a `204 (No Content)` status code or a `200 (OK)`
    if the deletion has been processed. If not, the status code should be `202 (Accepted)`.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping request payloads with @RequestBody
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building a REST API for
    a Stateless Architecture"), *Building a REST API for a Stateless Architecture*,
    we have presented the `RequestMappingHandlerAdapter`. We have seen that Spring
    MVC delegates to this bean to provide an extended support to `@RequestMapping`
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: In this perspective, `RequestMappingHandlerAdapter` is the central piece to
    access and override `HttpMessageConverters` through `getMessageConverters()` and
    `setMessageConverters(List<HttpMessageConverter<?>> messageConverters)`.
  prefs: []
  type: TYPE_NORMAL
- en: The role of `@RequestBody` annotations is tightly coupled to `HttpMessageConverters`.
    We will introduce the `HttpMessageConverters` now.
  prefs: []
  type: TYPE_NORMAL
- en: HttpMessageConverters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`HttpMessageConverters`, custom or native, are bound to specific mime types.
    They are used in the following instances:'
  prefs: []
  type: TYPE_NORMAL
- en: To convert Java objects into HTTP response payloads. Selected from `Accept`
    request header mime types, they serve the `@ResponseBody` annotation's purposes
    (and indirectly `@RestController` annotations that abstract the `@ResponseBody`
    annotations).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To convert HTTP request payloads into Java objects. Selected from the `Content-Type`
    request header mime types, these converters are called when the `@RequestBody`
    annotation are present on a method handler argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More generally, `HttpMessageConverters` match the following `HttpMessageConverter`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getSupportedMediaTypes()` method returns the list of `mediaTypes` (mime
    types) that a specific converter supports. This method is mainly used for reporting
    purposes and for the `canRead` and `canWrite` implementations. These `canRead`
    and `canWrite` eligibility methods are used by the framework to pick up at runtime
    the first `HttpMessageConverter` that either:'
  prefs: []
  type: TYPE_NORMAL
- en: Matches the client-provided `Content-Type` request header for the given Java
    class targeted by `@RequestBody`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matches the client-provided `Accept` request header for the Java class that
    the HTTP response-payload will correspond to `(`the Type targeted by `@ResponseBody`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provided HttpMessageConverters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the latest versions of Spring MVC (4+), a few extra `HttpMessageConverters`
    come natively with the framework. We have thought that summarizing them would
    be helpful. The following table represents all the native `HttpMessageConverters`,
    the mime types, and the Java Types they can be associated with. Short descriptions,
    mostly coming from the JavaDoc, give more insight about each of them.
  prefs: []
  type: TYPE_NORMAL
- en: '| URI | Supported MediaTypes (by default) | Convert to/from |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `FormHttpMessage Converter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  prefs: []
  type: TYPE_TB
- en: '| For part conversions, it also embeds (by default) `ByteArrayHttpMessageConverter`,
    `StringHttpMessageConverter` and `ResourceHttpMessageConverter`. |'
  prefs: []
  type: TYPE_TB
- en: '| `AllEncompassing FormHttpMessage Converter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  prefs: []
  type: TYPE_TB
- en: '| This converter extends `FormHttpMessageConverter` embedding extra `HttpMessageConverters`
    JAXB or Jackson if they are found in the classpath for XML/JSON-based parts. |'
  prefs: []
  type: TYPE_TB
- en: '| `XmlAwareFormHttp MessageConverter` | Can READ/WRITE application/x-www-form-urlencoded,Can
    READ multipart/form-data. | `MultiValueMap<String, ?>` |'
  prefs: []
  type: TYPE_TB
- en: '| This converter extends `FormHttpMessageConverter`, adding support for XML-based
    parts through a `SourceHttpMessageConverter`. |'
  prefs: []
  type: TYPE_TB
- en: '| `BufferedImageHttp MessageConverter` | Can READ all media types that are
    supported by the registered image readers.Can WRITE the media type of the first
    available registered image writer. | `java.awt.image.BufferedImage` |'
  prefs: []
  type: TYPE_TB
- en: '| `ByteArrayHttp MessageConverter` | Can READ */*,WRITE with application/octet-stream.
    | `byte[]` |'
  prefs: []
  type: TYPE_TB
- en: '| `GsonHttpMessage Converter` | CAN READ/WRITE application/json, application/*+json.
    | `java.lang.Object` |'
  prefs: []
  type: TYPE_TB
- en: '| Uses the Google Gson library''s `Gson` class. This converter can be used
    to bind with typed beans or untyped HashMaps. |'
  prefs: []
  type: TYPE_TB
- en: '| `Jaxb2Collection HttpMessage Converter` | Can READ XML collections. | `T
    extends java.util.Collection` |'
  prefs: []
  type: TYPE_TB
- en: '| This converter can read collections that contain classes annotated with `XmlRootElement`
    and `XmlType`. Note that this converter does not support writing. (JAXB2 must
    be present on the classpath.) |'
  prefs: []
  type: TYPE_TB
- en: '| `Jaxb2RootElement HttpMessage Converter` | Can READ/WRITE XML | `java.lang.Object`
    |'
  prefs: []
  type: TYPE_TB
- en: '| This converter can read classes annotated with `XmlRootElement` and `XmlType`,
    and write classes annotated with `XmlRootElement` or subclasses thereof. (JAXB2
    must be present on the classpath.) |'
  prefs: []
  type: TYPE_TB
- en: '| `MappingJackson2 HttpMessage Converter` | Can READ/WRITE application/json,
    application/*+json. | `java.lang.Object` |'
  prefs: []
  type: TYPE_TB
- en: '| Uses Jackson 2.x ObjectMapper. This converter can be used to bind with typed
    beans or untyped HashMap instances. (Jackson 2 must present on the classpath.)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `MappingJackson2 XmlHttpMessage Converter` | Can READ/WRITE application/xml,
    text/xml, application/*+xml. | `java.lang.Object` |'
  prefs: []
  type: TYPE_TB
- en: '| This uses the Jackson 2.x extension component for reading and writing XML
    encoded data ([https://github.com/FasterXML/jackson-dataformat-xml](https://github.com/FasterXML/jackson-dataformat-xml)).
    (Jackson 2 must be present on the classpath.) |'
  prefs: []
  type: TYPE_TB
- en: '| `MarshallingHttp MessageConverter` | Can READ/WRITE text/xml application/xml.
    | `java.lang.Object` |'
  prefs: []
  type: TYPE_TB
- en: '| This uses Spring''s Marshaller and Unmarshaller abstractions (OXM). |'
  prefs: []
  type: TYPE_TB
- en: '| `ObjectToStringHttp MessageConverter` | Can READ/WRITE text/plain. | `java.lang.Object`
    |'
  prefs: []
  type: TYPE_TB
- en: '| This uses `StringHttpMessageConverter` for reading and writing content and
    a `ConversionService` for converting the String content to and from the target
    object type. (It must be configured). |'
  prefs: []
  type: TYPE_TB
- en: '| `ProtobufHttp MessageConverter` | Can READ application/json, application/xml,
    text/plain and application/x-protobuf.Can WRITE application/json, application/xml,
    text/plain and application/x-protobuf, text/html. | `javax.mail.Message` |'
  prefs: []
  type: TYPE_TB
- en: '| This uses Google protocol buffers ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    to generate message Java classes you need to install the `protoc` binary. |'
  prefs: []
  type: TYPE_TB
- en: '| `ResourceHttp MessageConverter` | Can READ/WRITE */*. | `org.springframework.core.io.Resource`
    |'
  prefs: []
  type: TYPE_TB
- en: '| The **Java Activation Framework** (**JAF**), if available, is used to determine
    the content-type of written resources. If JAF is not available, application/octet-stream
    is used. |'
  prefs: []
  type: TYPE_TB
- en: '| `RssChannelHttp MessageConverter` | Can READ/WRITE application/rss+xml. |
    `com.rometools.rome.feed.rss.Channel` |'
  prefs: []
  type: TYPE_TB
- en: '| This converter can handle Channel objects from the ROME project ([https://github.com/rometools](https://github.com/rometools)).
    (ROME must be present on the classpath.) |'
  prefs: []
  type: TYPE_TB
- en: '| `AtomFeedHttp MessageConverter` | Can READ/WRITE application/atom+xml. |
    `com.rometools.rome.feed.atom.Feed` |'
  prefs: []
  type: TYPE_TB
- en: '| This can handle Atom feeds from the ROME project ([https://github.com/rometools](https://github.com/rometools)).
    (ROME must be present on the classpath.) |'
  prefs: []
  type: TYPE_TB
- en: '| SourceHttpMessageConverter | Can READ/WRITE text/xml, application/xml, application/*-xml.
    | `javax.xml.transform.Source` |'
  prefs: []
  type: TYPE_TB
- en: '| `StringHttpMessageConverter` | Can READ/WRITE */*. | `java.lang.String` |'
  prefs: []
  type: TYPE_TB
- en: Using MappingJackson2HttpMessageConverter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this recipe, the `MappingJackson2HttpMessageConverter` is used extensively.
    We used this converter for both the financial transaction creation/update side
    and the User-Preferences update side.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we used AngularJS to map an HTML form to a built json object
    whose properties match our Entities. Proceeding this way, we `POST`/`PUT` the
    `json` object as the `application/json` mime type.
  prefs: []
  type: TYPE_NORMAL
- en: This method has been preferred to posting an `application/x-www-form-urlencoded`
    form content, because we can actually map the object to an Entity. In our case,
    the form matches exactly a backend resource. This is a beneficial result (and
    constraint) of a REST design.
  prefs: []
  type: TYPE_NORMAL
- en: Using @RequestPart to upload an image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@RequestPart` annotation can be used to associate part of a `multipart/form-data`
    request with a method argument. It can be used with argument Types such as `org.springframework.web.multipart.MultipartFile`
    and `javax.servlet.http.Part`.
  prefs: []
  type: TYPE_NORMAL
- en: For any other argument Types, the content of the part is passed through an `HttpMessageConverter`
    just like `@RequestBody`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@RequestBody` annotation has been implemented to handle the user-profile
    picture. Here''s our sample implementation from the `UserImageController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: The file part of the request is injected as an argument. A new file is created
    on the server filesystem from the content of the request file. A new `Location`
    header is added to the Response with a link to the created image.
  prefs: []
  type: TYPE_NORMAL
- en: On the client side, this header is read and injected as `background-image` CSS
    property for our div (see `user-account.html`).
  prefs: []
  type: TYPE_NORMAL
- en: Transaction management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe highlights the basic principles we applied to handle transactions
    across the different layers of our REST architecture. Transaction management is
    a whole chapter in itself and we are constrained here to present just an overview.
  prefs: []
  type: TYPE_NORMAL
- en: The simplistic approach
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To build our transaction management, we kept in mind that Spring MVC Controllers
    are not transactional. Under this light, we cannot expect a transaction management
    over two different service calls in the same method handler of a Controller. Each
    service call starts a new transaction, and this transaction is expected to terminate
    when the result is returned.
  prefs: []
  type: TYPE_NORMAL
- en: We defined our services as `@Transactional(readonly="true")` at the Type level,
    then methods the that need Write access override this definition with an extra
    `@Transactional` annotation at the method level. The *tenth step* of our recipe
    presents the Transactional changes on the `TransactionServiceImpl` service**.**
    With the default propagation, transactions are maintained and reused between Transactional
    services, repositories, or methods.
  prefs: []
  type: TYPE_NORMAL
- en: By default, abstracted Spring Data JPA repositories are transactional. We only
    had to specify transactional behaviors to our custom repositories, as we did for
    our services.
  prefs: []
  type: TYPE_NORMAL
- en: The *eleventh step* of our recipe shows the Transactional changes made on the
    custom repository `IndexRepositoryImpl`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, we configured a consistent transaction management over
    the different layers of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our coverage is limited and we advise you to find external information about
    the following topics if you are not familiar with them.
  prefs: []
  type: TYPE_NORMAL
- en: ACID properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Four properties/concepts are frequently used to assess the transaction''s reliability.
    It is therefore useful and important to keep them in mind when designing transactions.
    Those properties are Atomicity, Consistency, Isolation and Durability. Read more
    about ACID transactions on the Wikipedia page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/ACID](https://en.wikipedia.org/wiki/ACID)'
  prefs: []
  type: TYPE_NORMAL
- en: Global versus local transactions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We only defined local transactions in the application. Local transactions are
    managed at the application level and cannot be propagated across multiple Tomcat
    servers. Also, local transactions cannot ensure consistency when more than one
    transactional resource type is involved. For example, in a use case of database
    operations associated with messaging, when we rollback a message that couldn’t
    have been delivered, we might need to also rollback the related database operations
    that have happened beforehand. Only global transactions implementing 2-step commits
    can take on this kind of responsibility. Global transactions are handled by JTA
    transaction manager implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about the difference in this Spring reference document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html](http://docs.spring.io/spring/docs/2.0.8/reference/transaction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Historically, JTA transaction managers were exclusively provided by J2EE/JEE
    containers. With application-level JTA transaction manager implementations, we
    now have other alternatives such as Atomikos ([http://www.atomikos.com](http://www.atomikos.com)),
    Bitronix ([https://github.com/bitronix/btm](https://github.com/bitronix/btm)),
    or JOTM ([http://jotm.ow2.org/xwiki/bin/view/Main/WebHome](http://jotm.ow2.org/xwiki/bin/view/Main/WebHome))
    to assure global transactions in J2SE environments.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat (7+) can also work along with application-level JTA transaction manager
    implementations to reflect the transaction management in the container using the
    `TransactionSynchronizationRegistry` and JNDI datasources.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta](https://codepitbull.wordpress.com/2011/07/08/tomcat-7-with-full-jta)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Performance and useful metadata benefits can be obtained from these three headers
    that are not detailed in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cache-Control, ETag, and Last-Modified**: Spring MVC supports these headers
    and as an entry point, we suggest you check out the Spring reference: [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/mvc.html#mvc-caching-etag-lastmodified)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating resources using bean validation support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After introducing the request-payload data binding process, we must talk about
    validation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this recipe is to show how to get Spring MVC to reject request body
    payloads that are not satisfying a bean validation (JSR-303) or not satisfying
    the constraints of a defined Spring validator implementation.
  prefs: []
  type: TYPE_NORMAL
- en: After the Maven and Spring configuration, we will see how to bind a validator
    to an incoming request, how to define the validator to perform custom rules, how
    to set up a JSR-303 validation, and how to handle the validation results.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We added a Maven dependency to the hibernate validator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: 'A `LocalValidatorFactoryBean` has been registered in our `dispatcher-servlet.xml`
    (`cloudstreetmarket-api`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UsersController` and `TransactionController` have seen their `POST` and
    `PUT` method signature altered with the addition of a `@Valid` annotation on the
    `@RequestBody` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note here the `BindingResult` object injected as method argument. Also we will
    present the `ValidatorUtil` class in about a minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our two CRUD controllers now have a new `@InitBinder` annotated method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: 'This method binds an instance of a created Validator implementation to the
    requests. Check out the created `UserValidator` which is `Validator` implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `User` entity, a couple of special annotations have been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: 'We have created the `ValidatorUtil` class to make those validations easier
    and to reduce the amount of boilerplate code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `validate` method allows us to call for a JSR validation from
    whichever location that may require it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `raiseFirstError` method is not of a specific standard, it is
    our way of rendering to the client the server side errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: 'As per [Chapter 4](part0095.xhtml#aid-2QJ5E1 "Chapter 4. Building a REST API
    for a Stateless Architecture"), *Building a REST API for a Stateless Architecture*,
    the cloudstreetmarket-api''s `RestExceptionHandler` is still configured to handle
    `IllegalArgumentExceptions`, rendering them with `ErrorInfo` formatted responses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Navigating through the UI improvements, you will notice a new form for updating
    the user's **Preferences**. This form is accessible via the **Login** menu, as
    shown in the following screenshots:![How to do it…](img/image00889.jpeg)![How
    to do it…](img/image00890.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this user **Preferences** form, when the frontend validations are deactivated
    (frontend validations will be developed in the last recipe of this chapter), not
    filling the e-mail field results in the following (customizable) `ErrorInfo` object
    in the HTTP response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: 'On the frontend side, in order to handle this error, the `accountController`
    (in `account_management.js`) is instantiated with a dependency to a custom `errorHandler`
    factory. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: 'The `accountController` has an `update` method that invokes the `errorHandler.renderOnForm`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: 'The `errorHandler` is defined as follows in `main_menu.js`. It has the capability
    to pull translations messages from `i18n` codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Preferences** form is as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00891.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we said, to simulate this error, frontend validations need to be deactivated.
    This can be done adding a `novalidate` attribute to the `<form name="updateAccount"
    … novalidate>` markup in `user-account.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the server side, we have also created a custom validator for the financial
    Transaction Entity. This validator makes use of the Spring `ValidationUtils`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Spring validator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring offers a `Validator` interface (`org.sfw.validation.Validator`) for
    creating components to be injected or instantiated in the layer we want. Therefore,
    Spring validation components can be used in Spring MVC Controllers. The `Validator`
    interface is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: The `supports(Class<?> clazz)` method is used to assess the domain of a `Validator`
    implementation, and also to restrict its use to a specific Type or super-Type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `validate(Object target, Errors errors)` method imposes its standard so
    that the validation logic of the validator lives in this place. The passed `target`
    object is assessed, and the result of the validation is stored in an instance
    of the `org.springframework.validation.Errors` interface. A partial preview of
    the `Errors` interface is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Spring MVC, we have the possibility to bind and trigger a `Validator`
    to a specific method-handler. The framework looks for a validator instance bound
    to the incoming request. We have configured such a binding in our recipe at the
    *fourth step*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already used the `@InitBinder` annotation to attach other objects (formatters)
    to incoming requests (see the *Binding requests, marshalling responses* recipe
    of the Chapter 4, *Building a REST API for a Stateless Architecture*).
  prefs: []
  type: TYPE_NORMAL
- en: The `Binders` (`org.springframework.validation.DataBinder`) allow setting property
    values onto a target object. Binders also provide support for validation and binding-results
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The `DataBinder.validate()` method is called after each binding step and this
    method calls the `validate` of the primary validator attached to the `DataBinder`.
  prefs: []
  type: TYPE_NORMAL
- en: The binding-process populates a result object, which is an instance of the `org.springframework.validation.BindingResult`
    interface. This result object can be retrieved using the `DataBinder.getBindingResult()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, a `BindingResult` implementation is also an `Errors` implementation
    (as shown here). We have presented the `Errors` interface earlier. Check out the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole design can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We create a validator implementation. When an incoming request comes in for
    a specific Controller method handler, the request payload is converted into the
    class that is targeted by the `@RequestBody` annotation (an `Entity` in our case).
    An instance of our validator implementation is bound to the injected `@RequestBody`
    object. If the injected `@RequestBody` object is defined with a `@Valid` annotation,
    the framework asks `DataBinder` to validate the object on each binding step and
    to store errors in the `BindingResultobject` of `DataBinder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, this `BindingResult` object is injected as argument of the method
    handler, so we can decide what to do with its errors (if any). During the binding
    process, missing fields and property access exceptions are converted into `FieldErrors`.
    These `FieldErrors` are also stored into the Errors instance. The following error
    codes are used for `FieldErrors`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: 'When it is necessary to return nicer error messages for the user, a `MessageSource`
    helps us to process a lookup and retrieve the right localized message from a `MessageSourceResolvable`
    implementation with the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FieldError` extends `ObjectError` and `ObjectError` extends `DefaultMessageSourceResolvable`,
    which is a `MessageSourceResolvable` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: ValidationUtils
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ValodationUtils` utility class (`org.sfw.validation.ValidationUtils`) provides
    a couple of convenient static methods for invoking validators and rejecting empty
    fields. These utility methods allow one-line assertions that also handle at the
    same time, the population of the `Errors` objects. In this recipe, the 14th step
    details our `TransactionValidator` that makes use of `ValidationUtils`.
  prefs: []
  type: TYPE_NORMAL
- en: I18n validation errors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The next recipe will focus on internationalization of errors and content. However,
    let''s see how we catch our errors from the controllers and how we display them.
    The `update` method of `UserController` has this custom method call on its first
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: We created the `ValidatorUtil` support class for our needs; the idea was to
    throw an `IllegalArgumentException` for any type of error that can be detected
    by our validator. The `ValidatorUtil.raiseFirstError(result)` method call can
    also be found in the `TransactionController.update(…)` method-handler. This method-handler
    relies on the `TransactionValidator` presented in the *14th step.*
  prefs: []
  type: TYPE_NORMAL
- en: If you remember this `TransactionValidator`, it creates an error with a `transaction.quote.empty`
    message code when a quote object is not present in the financial Transaction object.
    An `IllegalArgumentException` is then thrown with the `transaction.quote.empty`
    message detail.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will revisit how a proper internationalized JSON response
    is built and sent back to the client from an `IllegalArgumentException`.
  prefs: []
  type: TYPE_NORMAL
- en: Using JSR-303/JSR-349 Bean Validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spring Framework version 4 and above supports bean validation 1.0 (JSR-303)
    and bean validation 1.1 (JSR-349). It also adapts this bean validation to work
    with the `Validator` interface, and it allows the creation of class-level validators
    using annotations.
  prefs: []
  type: TYPE_NORMAL
- en: The two specifications, JSR-303 and JSR-349, define a set of constraints applicable
    to beans, as annotations from the `javax.validation.constraints` package.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, a big advantage of using the code from specifications instead of
    the code from implementations is that we don't have to know which implementation
    is used. Also, the implementation can always potentially be replaced with another
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Bean validation was originally designed for persistent beans. Even if the specification
    has a relatively low coupling to JPA, the reference implementation stays Hibernate
    validator. Having a persistence provider that supports those validation specifications
    is definitely an advantage. Now with JPA2, the persistent provider automatically
    calls for JSR-303 validation before persisting. Ensuring such validations from
    two different layers (controller and model) raises our confidence level.
  prefs: []
  type: TYPE_NORMAL
- en: On-field constraint annotations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We defined the `@NotNull` and `@Size` JSR-303 annotations on the presented `User`
    entity. There are obviously more than two annotations to be found in the specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a table summarizing the package of annotations (`javax.validation.constraints`)
    in JEE7:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Annotation Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AssertFalse` | The annotated element must be false. |'
  prefs: []
  type: TYPE_TB
- en: '| `AssertFalse.List` | Defines several `AssertFalse` annotations on the same
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `AssertTrue` | The annotated element must be true. |'
  prefs: []
  type: TYPE_TB
- en: '| `AssertTrue.List` | Defines several `AssertTrue` annotations on the same
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `DecimalMax` | The annotated element must be a number whose value must be
    lower or equal to the specified maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| `DecimalMax.List` | Defines several `DecimalMax` annotations on the same
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `DecimalMin` | The annotated element must be a number whose value must be
    higher or equal to the specified minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| `DecimalMin.List` | Defines several `DecimalMin` annotations on the same
    element. |'
  prefs: []
  type: TYPE_TB
- en: '| `Digits` | The annotated element must be a number within the accepted range.
    Supported types are: `BigDecimal`, `BigInteger`, `CharSequence`, `byte`, `short`,
    `int`, `long`, and their respective wrapper types. However, null elements are
    considered valid. |'
  prefs: []
  type: TYPE_TB
- en: '| `Digits.List` | Defines several `Digits` annotations on the same element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Future` | The annotated element must be a date in the future. |'
  prefs: []
  type: TYPE_TB
- en: '| `Future.List` | Defines several `Future` annotations on the same element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Max` | The annotated element must be a number whose value must be lower
    than or equal to the specified maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| `Max.List` | Defines several `Max` annotations on the same element. |'
  prefs: []
  type: TYPE_TB
- en: '| `Min` | The annotated element must be a number whose value must be higher
    than or equal to the specified minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| `Min.List` | Defines several `Min` annotations on the same element. |'
  prefs: []
  type: TYPE_TB
- en: '| `NotNull` | The annotated element must not be `null`. |'
  prefs: []
  type: TYPE_TB
- en: '| `NotNull.List` | Defines several `NotNull` annotations on the same element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Past` | The annotated element must be a date in the past. |'
  prefs: []
  type: TYPE_TB
- en: '| `Past.List` | Defines several `Past` annotations on the same element. |'
  prefs: []
  type: TYPE_TB
- en: '| `Pattern` | The annotated `CharSequence` must match the specified regular
    expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `Pattern.List` | Defines several `Pattern` annotations on the same element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Size` | The annotated element size must be between the specified boundaries
    (included). |'
  prefs: []
  type: TYPE_TB
- en: '| `Size.List` | Defines several `Size` annotations on the same element. |'
  prefs: []
  type: TYPE_TB
- en: Implementation-specific constraints
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Bean validation implementations can also go beyond the specification and offer
    their set of extra validation annotations. Hibernate validator has a few interesting
    ones such as `@NotBlank`, `@SafeHtml`, `@ScriptAssert`, `@CreditCardNumber`, `@Email`,
    and so on. These are all listed from the hibernate documentation accessible at
    the following URL
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints](http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/#table-custom-constraints)'
  prefs: []
  type: TYPE_NORMAL
- en: LocalValidator (reusable)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have defined the following validator bean in our Spring context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: This bean produces validator instances that implement JSR-303 and JSR-349\.
    You can configure a specific provider class here. By default, Spring looks in
    the classpath for the Hibernate Validator JAR. Once this bean is defined, it can
    be injected wherever it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: We have injected such validator instances in our `UserValidator` and this makes
    it compliant with JSR-303 and JSR-349.
  prefs: []
  type: TYPE_NORMAL
- en: 'For internationalization, the validator produces its set of default message
    codes. These default message codes and values look like the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to override them in your own resource files!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we highlight a few validation concepts and components that we
    didn’t explain.
  prefs: []
  type: TYPE_NORMAL
- en: ValidationUtils
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ValidationUtils` Spring utility class provides convenient static methods
    for invoking a `Validator` and rejecting empty fields populating the error object
    in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/validation/ValidationUtils.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Grouping constraints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can couple constraints across more than one field to define a set of more
    advanced constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr ocess-groupsequence](http://beanvalidation.org/1.1/spec/#constraintdeclarationvalidationpr%20ocess-groupsequence)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/ html_single/#chapter-groups](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/%20html_single/#chapter-groups)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom validator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can sometimes be useful to create a specific validator that has its own
    annotation. Check link, it should get us to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/](http://howtodoinjava.com/2015/02/12/spring-mvc-custom-validator-example/)'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring reference on validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best source of information remains the Spring reference on `Validation`.
    Check link, it should get us to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The whole bean validation specification (JSR-303 and JSR-349) has its own website:
    [http://beanvalidation.org/1.1/spec](http://beanvalidation.org/1.1/spec).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalizing messages and contents for REST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It was necessary to talk about validation before talking about internationalizing
    content and messages. With global and cloud-based services, supporting content
    in only one language is often not sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we provide an implementation that suits our design and therefore
    continue to meet our scalability standards for not relying on HTTP Sessions.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to define the `MessageSource` beans in charge of fetching the
    most suited message for a given location. We will see how to serialize resource
    properties to make them available to the frontend. We will implement a dynamic
    translation of content on this frontend with AngularJS and angular-translate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is both backend and a frontend work in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Backend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following bean has been registered in the core context (`csm-core-config.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: 'This bean references a created `SerializableResourceBundleMessageSource` that
    gathers the resource files and extracts properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: 'This bean bundle is accessed from two places:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A newly created `PropertiesController` exposes publicly (serializing) all the
    messages and errors for a specific location (here, just a language):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: 'A specific service layer has been built to easily serve messages and errors
    across controllers and services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ResourceBundleServiceImpl` uses the same `SerializableResourceBundleMessageSource`
    for now. It also extracts the locale from the logged-in user (Spring Security)
    with a fallback to English.
  prefs: []
  type: TYPE_NORMAL
- en: This `ResourceBundleServiceImpl` service is injected in our `WebContentInterceptor`
    `CloudstreetApiWCI:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `TransactionController`, for example, the bundle is targeted to extract
    error messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '`I18nKeys` is just a class that hosts resource keys as constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: The resource files are located in the core module:![Backend](img/image00892.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Frontend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Two dependencies for angular-translate have been added in the `index.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: 'The translate module is configured as follows in the `index.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see that it targets our API endpoint that only serves messages and errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user language is set from the main menu (`main_menu.js`). The user is loaded
    and the language is extracted from user object (defaulted to EN):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: 'In the DOM, the i18n content is directly referenced to be translated through
    a translate directive. Check out in the `stock-detail.html` file for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example from the `index-detail.html` file is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: 'In `home.html`, you can find scope variables whose values are translated as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: In the application, update your personal preferences and set your language to
    **French** for example. Try to access, for example, a **stock-detail** page that
    can be reached from the **stock-search** results:![Frontend](img/image00893.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a **stock-detail** page, you can process a transaction (in French!):![Frontend](img/image00894.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at the backend changes. What you first need to understand
    is the autowired `SerializableResourceBundleMessageSource` bean from which internationalized
    messages are extracted using a message key.
  prefs: []
  type: TYPE_NORMAL
- en: This bean extends a specific `MessageSource` implementation. Several types of
    `MessageSource` exist and it is important to understand the differences between
    them. We will revisit the way we extract a Locale from our users and we will see
    how it is possible to use a `LocaleResolver` to read or guess the user language
    based on different readability paths (Sessions, Cookies, Accept header, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: MessageSource beans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First of all, a `MessageSource` is a Spring interface (`org.sfw.context.MessageSource`).
    The `MessageSource` objects are responsible for resolving messages from different
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The most interesting arguments being the key of the message we want and the
    `Locale` (language/country combination) that will drive the right language selection.
    If no `Locale` is provided or if the `MessageSource` fails to resolve a matching
    language/country file or message entry, it falls back to a more generic file and
    tries again until it reaches a successful resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown here, `MessageSource` implementations expose only `getMessage(…)`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: This lightweight interface is implemented by several objects in Spring (especially
    in context components). However, we are looking specifically for `MessageSource`
    implementations and three of them in Spring 4+ particularly deserve to be mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: ResourceBundleMessageSource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This `MessageSource` implementation accesses the resource bundles using specified
    basenames. It relies on the underlying JDK's `ResourceBundle` implementation,
    in combination with the JDK's standard message-parsing provided by `MessageFormat`
    (`java.text.MessageFormat`).
  prefs: []
  type: TYPE_NORMAL
- en: Both the accessed `ResourceBundle` instances and the generated `MessageFormat`
    are cached for each message. The caching provided by `ResourceBundleMessageSource`
    is significantly faster than the built-in caching of the `java.util.ResourceBundle`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: With `java.util.ResourceBundle`, it's not possible to reload a bundle when the
    JVM is running. Because `ResourceBundleMessageSource` relies on `ResourceBundle`,
    it faces the same limitation.
  prefs: []
  type: TYPE_NORMAL
- en: ReloadableResourceBundleMessageSource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In contrast to `ResourceBundleMessageSource`, this class uses `Properties` instances
    as custom data structure for messages. It loads them via a `PropertiesPersister`
    strategy using Spring Resource objects.
  prefs: []
  type: TYPE_NORMAL
- en: This strategy is not only capable of reloading files based on timestamp changes,
    but also loads properties files with a specific character encoding.
  prefs: []
  type: TYPE_NORMAL
- en: '`ReloadableResourceBundleMessageSource` supports reloading of properties files
    using the `cacheSeconds` setting and also supports the programmatic clearing of
    the properties cache.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The base names for identifying resource files are defined with the `basenames`
    property (in the ReloadableResourceBundleMessageSource configuration). The defined
    base names follow the basic `ResourceBundle` convention that consists in not specifying
    the file extension nor the language code. We can refer to any Spring resource
    location. With a `classpath`: prefix, resources can still be loaded from the classpath,
    but `cacheSeconds` values other than `-1` (caching forever) will not work in this
    case.'
  prefs: []
  type: TYPE_NORMAL
- en: StaticMessageSource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `StaticMessageSource` is a simple implementation that allows messages to
    be registered programmatically. It is intended for testing rather than for a use
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Our MessageSource bean definition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have implemented a specific controller that serializes and exposes the whole
    aggregation of our resource bundle properties-files (errors and message) for a
    given language passed in as a query parameter.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we have created a custom `SerializableResourceBundleMessageSource`
    object, borrowed from Roger Villars, and its *bookapp-rest* application ([https://github.com/rvillars/bookapp-rest](https://github.com/rvillars/bookapp-rest)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This custom `MessageSource` object extends `ReloadableResourceBundleMessageSource`.
    We have made a Spring bean of it with the following definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: 'We have specifically specified the paths to our resource files in the classpath.
    This can be avoided with a global resource bean in our context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Note that Spring MVC, by default, expects the i18n resource files to be located
    in a `/WEB-INF/i18n` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Using a LocaleResolver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our application, in order to switch the `Locale` to another language/country,
    we pass through the user preferences screen. This means that we somehow persist
    this information in the database. This makes easy the `LocaleResolution` that
    is actually operated on the client side, reading the user data and calling the
    internationalized messages for the language preference asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: However, some other applications might want to operate `LocaleResolution` on
    the server side. To do so, a `LocaleResolver` bean must be registered.
  prefs: []
  type: TYPE_NORMAL
- en: '`LocaleResolver` is a Spring Interface (`org.springframework.web.servlet. LocaleResolver`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four concrete implementations in Spring MVC (version four and above):'
  prefs: []
  type: TYPE_NORMAL
- en: AcceptHeaderLocaleResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The AcceptHeaderLocaleResolver makes use of the `Accept-Language` header of
    the HTTP request. It extracts the first Locale that the value contains. This value
    is usually set by the client’s web browser that reads it from OS configuration.
  prefs: []
  type: TYPE_NORMAL
- en: FixedLocaleResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This resolver always returns a fixed default Locale with optionally a time zone.
    The default Locale is the current JVM's default Locale.
  prefs: []
  type: TYPE_NORMAL
- en: SessionLocaleResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This resolver is the most appropriate when the application actually uses user
    sessions. It reads and sets a session attribute whose name is only intended for
    internal use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: By default, it sets the value from the default `Locale` or from the `Accept-Language`
    header. The session may also optionally contain an associated time zone attribute.
    Alternatively, we may specify a default time zone.
  prefs: []
  type: TYPE_NORMAL
- en: The practice in these cases is to create an extra and specific web filter.
  prefs: []
  type: TYPE_NORMAL
- en: CookieLocaleResolver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`CookieLocaleResolver` is a resolver that is well suited to stateless applications
    like ours. The cookie name can be customized with the `cookieName` property. If
    the `Locale` is not found in an internally defined request parameter, it tries
    to read the cookie value and falls back to the `Accept-Language` header.'
  prefs: []
  type: TYPE_NORMAL
- en: The cookie may optionally contain an associated time zone value as well. We
    can still specify a default time zone as well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Translating client-side with angular-translate.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We used `angular-translate.js` to handle translations and to switch the user
    Locale from the client side. `angular-translate.js` library is very complete and
    well documented. As a dependency, it turns out to be extremely useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main points of this product are to provide:'
  prefs: []
  type: TYPE_NORMAL
- en: Components (filters/directives) to translate contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous loading of i18n data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pluralization support using `MessageFormat.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expandability through easy to use interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A quick overview of **angular-translate** is shown in this figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating client-side with angular-translate.js](img/image00895.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: International resources are pulled down either dynamically from an API endpoint
    (as we did), either from static resource files published on the web application
    path. These resources for their specific Locale are stored on the client-side
    using `LocalStorage` or using `cookies`.
  prefs: []
  type: TYPE_NORMAL
- en: The stored data corresponds to a variable (`UrlLanguageStorage` in our case)
    that is accessible and injectable in whatever module that may require translation
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following examples, the `translate` directive can be used to
    actually render translated messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use a predefined translate filter to translate our translation
    keys in the DOM, without letting any controller or service know of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about angular-translate on their very well done documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://angular-translate.github.io](https://angular-translate.github.io)'
  prefs: []
  type: TYPE_NORMAL
- en: Validating client-side forms with HTML5 AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a good practice to validate submitted data both on the frontend and the
    backend. It is also good, talking about validation, to distinguish the user experience,
    from the data integrity conservation from the data integrity conservation. Both
    are two different responsibilities, potentially for different teams.
  prefs: []
  type: TYPE_NORMAL
- en: We believe the *frontend* validation has replaced the form-validations that
    was previously managed by the *backend*. In a scalable environment where API is
    decoupled from web content, the validation experiences are now the responsibility
    of client interfaces that can be multiples (even implemented by third parties)
    such as websites, mobile websites, mobile apps, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will focus on form validation and more specifically on AngularJS
    form validation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider the **User Preferences** form again. Here is the HTML definition
    (`user-account.html`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript side of things in the controller of `account_management.js`
    includes two referenced functions and four variables to control form validation
    and its style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: 'Two CSS classes have been created to render properly errors on fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: If you try to enter a wrong e-mail or if you try to submit the form without
    entering your password, you should observe the following validation control:![How
    to do it…](img/image00896.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AngularJS provides tools to set up a client-side form validation. As usual with
    AngularJS, these tools integrate well with modern HTML5 techniques and standards.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 forms provide a native validation that can be defined using tags and attributes
    on the different form elements (input, select…) to set up a basic field validation
    (max-length, required…)
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS completes and extends fluently these standard definitions to make
    them interactive and responsive from the beginning and with no overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Validation-constraints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's have a closer look at the available validation-options that can be placed
    on form controls.
  prefs: []
  type: TYPE_NORMAL
- en: Required
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An `input` field can be tagged as `required` (HTML5 tag):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Minimum/maximum length
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ng-minlength` directive can be used to assert that the number of entered
    characters matches a given threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, `ng-maxlength` drastically limits the number of entered characters
    to a maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: Regex pattern
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ng-pattern` directive is often used to make sure that the entered data
    matches a predefined shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Number/e-mail/URL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Those HTML5 input types are handled by AngularJS to be constrained within the
    format they represent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Control variables in forms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AngularJS publishes properties on the containing `$scope` to match the form
    state in the DOM. This makes the JavaScript form validation very easy to control
    errors and to render the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties are accessible from the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: Modified/Unmodified state
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This state can be assessed using the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: Valid/Invalid state
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This valid state of a form can be assessed in regards to the defined validation
    for a field or globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Errors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After the validity assessment that we have defined previously, more information
    about what went wrong can be extracted from the `$error` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: The `$error` object contains all about the validations of a particular form
    and reflects whether those validations are satisfactory or not.
  prefs: []
  type: TYPE_NORMAL
- en: Form state transclusions and style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As often with AngularJS, transclusions are proceeded to bind the DOM state
    with the scope. Thus, the form state and the control state are reflected in real
    time with CSS classes. These CSS classes can obviously be defined/overridden,
    so that a global validation style can be defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AngularJS documentation on forms**: Read more about AngularJS validation
    capabilities on Forms (we have only introduced them here): [https://docs.angularjs.org/guide/forms](https://docs.angularjs.org/guide/forms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 8. Communicating Through WebSockets and STOMP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Four recipes are covered in this chapter. All of them fully embrace our CloudStreet
    Market application. Improving, they make it more reactive, more interactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'These recipes have the following titles:'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming social events with STOMP over SockJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RabbitMQ as a multiprotocol message broker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stacking and consuming tasks in RabbitMQ with AMQP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing messages with Spring Session and Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly review what we hope you have learned so far in the previous
    chapters. Chapter by chapter, you must have found out:'
  prefs: []
  type: TYPE_NORMAL
- en: How to initiate a project, and how to rely on standards to keep the code base
    scalable and adaptive. These standards came from a selection of tools such as
    Maven or the Java Persistence API. The presented standards also came with a selection
    of common practices, on the client side for example, with the AngularJS MVC pattern
    or the Bootstrap Framework UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make the most of Spring MVC while facing modern challenges. Spring MVC
    has been demonstrated as a web MVC framework (with its request flow, the content
    negotiation, the view resolution, the model binding, the exception handling, and
    so on), but also demonstrated as an integrated Spring component within its Spring
    environment. An integrated framework able to relay the Spring Security authentication
    or the Spring Social abstraction. It is also able to serve Spring Data pagination
    tools as well as a very competitive implementation of the HTTP specification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to design a Microservice architecture implementing an advanced stateless
    and HyperMedia API that promotes the segregation of duties. A segregation of duties
    between the front end and the back end, but also a segregation of duties in the
    functional divisibility of components (horizontal scalability) into independent
    web archives (`.war`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter focuses on the emerging WebSocket technology and on building a
    **Messaging-oriented-middleware** (**MOM**) for our application. It is a rare
    showcase that implements so much about WebSockets in Spring. From the use of the
    default embedded WebSocket message broker to a full-featured RabbitMQ broker (using
    STOMP and AMQP protocols). We will see how to broadcast messages to multiple clients
    and defer the execution of time-consuming tasks, offering significant scalability
    benefits.
  prefs: []
  type: TYPE_NORMAL
- en: With a new Java project dedicated to WebSockets that required access to the
    common database Server, and also in the perspective of a production-like environment,
    we are going to replace HSQLDB with MySQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to dynamically create private queues and how to get authenticated
    clients to post and receive messages from these private queues. We will do all
    of this, to implement real application features in our application.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve a WebSocket authentication and an authentication of messages, we
    will turn the API stateful. By stateful, this means that the API will use HTTP
    sessions to keep users authenticated between their requests. With the support
    of Spring Session and the use of the highly clusterable Redis Server, the sessions
    will be shared across multiple webapps.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming social events with STOMP over SockJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we broadcast user activities (events) with STOMP over SockJS.
    SockJS provides a custom implementation of WebSocket.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is some configuration work to be done beforehand, especially on the Apache
    HTTP proxy. After that, we will see how to initiate a WebSocket with SockJS and
    with AngularJS on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Our WebSocket will subscribe to a topic (for broadcasting) published via Spring
    from the `cloudstreetmarket-api` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v8.1.x`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `Maven clean` and `Maven install` commands on the `zipcloud-parent`
    project (right-click on the project, select **Run as…** | **Maven Clean**, then
    select **Run as…** | **Maven Install)**. After this, operate a **Maven | Update**
    **Project** to synchronize Eclipse with the Maven configuration (right-click on
    the project and then click **Maven** | **Update Project…**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, run the **Maven clean** and **Maven install** commands on `cloudstreetmarket-parent`
    followed by a **Maven** | **Update Project…** (in order to update all `cloudstreetmarket-parent`
    modules).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache HTTP Proxy configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the Apache `httpd.conf` file, change the `VirtualHost` definition to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in `httpd.conf`, uncomment the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Frontend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `index.jsp` file (in the `cloudstreetmarket-webapp` module), two extra
    JavaScript files are imported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These two files have been copied locally, but originally, both were found online
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js](https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.0.2/sockjs.min.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js](https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.js)'
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, all the changes on the client side, are related to the file
    `src/main/webapp/js/home/home_community_activity.js` (which drives the feed of
    **User Activities** on the landing page). This file is associated with the template
    `/src/main/webapp/html/home.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As part of the `init()` function of `homeCommunityActivityController`, the
    following section was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadMore()` function is still invoked to pull new activities when the
    bottom of the scroll is reached. However now, because new activities can be inserted
    asynchronously, the `communityActivities` variable is no longer an array but an
    object used as a map with activity IDs as keys. Doing so allows us to merge the
    synchronous results with the asynchronous ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: As before (since the [Chapter4](part0053.xhtml#aid-1IHDQ2 "Chapter 4. Understanding
    WebSocket"), *Building a REST API for a Stateless Architecture*), we loop over
    the community activities to build the activity feed. Now each activity carries
    a number of **likes** and **comments**. Currently, if a user is authenticated,
    he has the capability to see the number of **likes**:![Frontend](img/image00897.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'TheAngularized HTML bound to the thumb-up image is the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: 'In the controller, the `like()` scope function supports this DOM element to
    create a new `like` activity that targets the original activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: The opposite logic can also be found to **unlike** an activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following Maven dependencies have been added to `cloudstreetmarket-api`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `web.xml` file (the one from `cloudstreetmarket-api`), the following
    attribute must be added to our servlet and to each of its filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: 'The following dedicated configuration bean has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: 'A new controller `ActivityFeedWSController`has been added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: 'As Spring configuration, we have added the following bean to the `dispatcher-servlet.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: 'In `security-config.xml`, the following configuration has been added to the
    http Spring Security namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Now let's see how events are generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a new financial transaction is created, a message is sent to the topic
    `/topic/actions`. This is done in the `TransactionController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, when a `like` activity is created, a message is also sent to the
    `/topic/actions` topic in `LikeActionController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: Now start the Tomcat server. Log in to the application using Yahoo! Oauth2 and
    your personal Yahoo! account (if you don't have one yet, please create one). Register
    a new user for the `Cloudstreet Market` application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your web browser, open two different tabs in the application with your logged-in
    user. Keep one of these tabs on the landing page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the other tab, navigate to the **Prices and market** | **All prices search**
    menu. Search for a ticker, let's say Facebook, and buy three stocks of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait to receive the information message:![Backend](img/image00898.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then check the first tab of the browser (the tab you were not using).
  prefs: []
  type: TYPE_NORMAL
- en: '![Backend](img/image00899.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that the activity feed has received a new element at the top!
  prefs: []
  type: TYPE_NORMAL
- en: Also, in the console you should have the following log trace:![Backend](img/image00900.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, **like** events are refreshed in real time:![Backend](img/image00901.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are going to look at a couple of general concepts about WebSockets,
    STOMP, and SockJS before introducing the Spring-WebSocket support tools.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to WebSockets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebSocket is a full-duplex communication protocol based on TCP. A full-duplex
    communication system allows two parties to *speak* and to be *heard* simultaneously
    through a bidirectional channel. A conversation by telephone is probably the best
    example of a full-duplex system.
  prefs: []
  type: TYPE_NORMAL
- en: This technology is particularly useful for applications that need to leverage
    the overhead induced by new HTTP connections. Since 2011, the WebSocket protocol
    has been an Internet Standard ([https://tools.ietf.org/html/rfc6455](https://tools.ietf.org/html/rfc6455)).
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket Lifecycle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before the WebSocket connection is established, the client initiates a handshake
    HTTP to which the server responds. The handshake request also represents a protocol
    upgrade request (from HTTP to WebSocket), formalized with an `Upgrade` header.
    The server confirms this protocol upgrade with the same `Upgrade` header (and
    value) in its response. In addition to the `Upgrade` header, and in a perspective
    of protection against caching-proxy attacks, the client also sends a base-64 encoded
    random key. To this, the server sends back a hash of this key in a `Sec-WebSocket-Accept`
    header.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a handshake occurring in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebSocket Lifecycle](img/image00902.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The protocol lifecycle can be summarized by the following sequence diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebSocket Lifecycle](img/image00903.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Two dedicated URI schemes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The protocol defines two URI schemes for `WebSockets ws://` and `wss://` (with
    `wss` allowing encrypted connections).
  prefs: []
  type: TYPE_NORMAL
- en: The STOMP protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**STOMP** stands for **Simple Text Oriented Messaging Protocol**. This protocol
    provides a frame-based interoperable format that allows STOMP clients to communicate
    with STOMP message brokers.'
  prefs: []
  type: TYPE_NORMAL
- en: It is a messaging protocol that requires and trusts an existing 2-way streaming
    network protocol on a higher level. WebSocket provides a frame-based data-transfer,
    and the WebSocket frames can indeed be STOMP-formatted frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a STOMP frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: 'A frame has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The STOMP protocol](img/image00904.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The STOMP protocol specification defines a set of client commands (`SEND`, `SUBSCRIBE`,
    `UNSUBSCRIBE`, `BEGIN`, `COMMIT`, `ABORT`, `ACK`, `NACK`, `DISCONNECT`, `CONNECT`,
    and `STOMP`) and server commands (`CONNECTED`, `MESSAGE`, `RECEIPT`, and `ERROR`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Only `SEND`, `MESSAGE`, and `ERROR` frames can have a body. The protocol specification
    can be found online at: [http://stomp.github.io/stomp-specification-1.2.html](http://stomp.github.io/stomp-specification-1.2.html).'
  prefs: []
  type: TYPE_NORMAL
- en: On the client side, we have used the JavaScript library **STOMP Over WebSocket**
    identified with the file `stomp.js`. This library maps STOMP formatted frames
    to WebSocket frames. By default, it looks up the web browser `WebSocket` class
    to make the STOMP client create the WebSocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library can also create STOMP clients from custom `WebSocket` implementations.
    From the SockJS WebSockets, we create STOMP clients like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: SockJS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebSockets are supported by almost all browsers nowadays. Still, we don't have
    control over the versions that our customers are using. In many cases, hiding
    such a technology from 7 to 15% of the audience is simply not an option.
  prefs: []
  type: TYPE_NORMAL
- en: On the client side, SockJS provides a custom implementation that can be seen
    as a decorator around the browser-native `WebSocket` implementation. With a simple
    and handy library, SockJS ensures cross-browser compatibility. With a list of
    fallback transport options (`xhr-streaming`, `xdr-streaming`, `iframe-eventsource`,
    `iframe-htmlfile`, `xhr-polling`, and so on), it emulates WebSockets as much as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'For server implementations, to match the clients'' fallback behaviors, SockJS
    also defines its own protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html](http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Spring WebSocket support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As per the Java WebSocket API specification (JSR-356), Spring 4+ provides a
    solution that is packaged within the modules `spring-websocket` and `spring-messaging`.
    But Spring provides more than just an implementation of JSR-356\. For example,
    based upon the facts that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'WebSockets without the use of a message protocol are too low level to be directly
    used in applications without custom handling frameworks: the Spring team made
    the choice to provide and support a messaging protocol implementation (STOMP).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WebSockets are not supported by all browsers yet: Spring also provides a WebSocket
    fallback support with its implementation of the SockJS protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All-in-one configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have enabled the WebSocket engine and configured it for SockJS and STOMP
    from only one configuration bean—`WebSocketConfig`::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: 'The WebSocket endPoint is defined for the context path `/users/feed/add`. It
    matches on the client side, the defined SockJS client constructor argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: From the endpoint (`clientInboundChannel`), the WebSocket engine needs to choose
    where to route the message to, and we have two options here for this. Depending
    on the situation and what we want to achieve, we can target an in-app consumer
    (message handler) or directly the message broker in order to dispatch the message
    to the subscribed clients.
  prefs: []
  type: TYPE_NORMAL
- en: This split is configured by defining two different destination prefixes. In
    our case, we decided to use the `/app` prefix to route messages to the corresponding
    message handlers and the `/topic` prefix to identify messages that are ready to
    be dispatched to clients.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now how message handlers can be defined and how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Defining message handlers via @MessageMapping
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`@MessageMapping` annotations are used in Spring MVC controller methods to
    mark them available as message handler methods.'
  prefs: []
  type: TYPE_NORMAL
- en: From a message in the `clientInboundChannel` to be routed to a message handler,
    the WebSocket engine narrows down the right `@MessageMapping` method based upon
    their configured value.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual in Spring MVC, this value can be defined in an Ant-style (such as`/targets/**`
    for example). However, in the same way as the `@RequestParam` and `@PathVariable`
    annotations, template variables can also be passed through using `@DestinationVariable`
    annotations on method arguments (destination templates are defined like so: `/targets/{target}`).'
  prefs: []
  type: TYPE_NORMAL
- en: Sending a message to dispatch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A message broker must be configured. In the case of this recipe, we are using
    a `simple` message broker (`simpMessageBroker`) that we have enabled from `MessageBrokerRegistry`.
    This type of in-memory broker is suited to stack STOMP messages when there is
    no need for external brokers (RabbitMQ, ActiveMQ, and so on). When there is availability
    to dispatch messages to WebSocket clients, these messages are sent to `clientOutboundChannel`.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that when message destinations are prefixed with `/topic` (like
    in our case), messages are directly sent to the message broker. But what about
    sending messages for dispatch when we are in a message handler method or elsewhere
    in the back-end code? We can use for this the `SimpMessagingTemplate` described
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: SimpMessagingTemplate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We auto-wired a `SimpMessagingTemplate` in the CSMReceiver class and we will
    use it later to forward the payload of AMQP messages to WebSocket clients.
  prefs: []
  type: TYPE_NORMAL
- en: A `SimpMessagingTemplate` serves the same purpose as the Spring `JmsTemplate`
    (if you are familiar with it), but it suits simple messaging protocols (such as
    STOMP).
  prefs: []
  type: TYPE_NORMAL
- en: 'A handy and inherited famous method is the `convertAndSend` method, which tries
    to identify and use a `MessageConverter` to serialize an object and put it into
    a new message before sending this message to the specified destination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: The idea is to target an identified destination (with a `/topic` prefix in our
    case) for a message broker.
  prefs: []
  type: TYPE_NORMAL
- en: The @SendTo annotation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This annotation saves us from having to explicitly use the `SimpMessagingTemplate`.
    The destination is specified as the annotation value. This method will also handle
    the conversion from payload to message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we provide and extra source of information related to the SockJS
    fallback options.
  prefs: []
  type: TYPE_NORMAL
- en: As introduced earlier, Spring provides a SockJS protocol implementation. It
    is easy to configure SockJS in Spring using the `withSockJS()` functional method
    during the `StompEndPoint` registration. This little piece of configuration alone,
    tells Spring to activate SockJS fallback options on our endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The very first call of the SockJS client to the server is an HTTP request to
    the endpoint path concatenated with `/info` to assess the server configuration.
    If this HTTP request does not succeed, no other transport is attempted (not even
    WebSocket).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more in the Spring reference guide if you want to understand how
    a SockJS client queries the server for a suitable fallback option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-server-handshake)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JSR-356**: You can find the specification document online to read more about
    the Java API for WebSocket specification that spring-websocket is complying with:
    [https://jcp.org/en/jsr/detail?id=356](https://jcp.org/en/jsr/detail?id=356)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RabbitMQ as a multiprotocol message broker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and using an external RabbitMQ as a full-featured message broker
    enables new technological opportunities and the design of a production-like infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will install RabbitMQ as a standalone server and configure
    it so it supports STOMP messages.
  prefs: []
  type: TYPE_NORMAL
- en: We will also update our WebSocket Spring configuration to rely on this full-featured
    message broker, instead of the internal simple message broker.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, check out the `v8.2.x` branch this
    time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two new Java projects have been added, and they must be imported. From Eclipse,
    select the **File** | **Import…** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Import** wizard opens so you can select a type of project within a hierarchy.
    Open the **Maven** category, select **Existing Maven Projects** option, and click
    on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Import Maven Project** wizard opens. As the root directory, select (or
    type) the workspace location (which should be `<home-directory>/workspace`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, select the following two **pom.xml**
    files: **cloudstreetmarket-shared/pom.xml** and **cloudstreetmarket-websocket/pom.xml**.![How
    to do it…](img/image00905.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two projects `cloudstreetmarket-shared` and `cloudstreetmarket-websocket`
    must show up in the project hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Target a runtime environment on the web module with the following instructions:
    In Eclipse, right-click on the **cloudmarket-websocket** project, select the **Properties**
    menu, in the navigation panel, select **Targeted Runtimes**. In the central window,
    check the tick of the Server **Apache Tomcat v8.0**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `/app` directory, the `cloudstreetmarket.properties` file has been updated.
    Reflect the changes in your file located in `<home-directory>/app/cloudstreetmarket.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `Maven clean` and `Maven install` commands on `zipcloud-parent` and
    then on `cloudstreetmarket-parent`, followed by a **Maven** | **Update Project**
    on all the modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running RabbitMQ in the way we want, requires us to download and install the
    product as a standalone product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending upon the configuration of the local machine, different ways of proceeding
    apply. You will find the appropriate links and installation guides on the RabbitMQ
    website: [https://www.rabbitmq.com/download.html](https://www.rabbitmq.com/download.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Windows OS, please note that it is a prerequisite to download
    and install Erlang ([http://www.erlang.org/download.html](http://www.erlang.org/download.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once RabbitMQ is installed and once its service is running, open your favourite
    web browser in order to check that RabbitMQ is running as a web console at the
    URL: `http://localhost:15672` (like in the following screenshot).![How to do it…](img/image00906.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will come back to this later to set up the RabbitMQ configuration. For now,
    just remember that this console can be used to monitor messages and administrate
    connections, queues, topics, and exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The RabbitMQ STOMP plugin needs to be activated. This is done from the `rabbitmq_server-x.x.x\sbin`
    directory, by executing the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Maven dependencies have been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `dispatcher-servlet.xml` of the `cloudstreetmarket-api` module, the
    following beans have been added making use of the `rabbit` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `csmcore-config.xml` file (in `cloudstreetmarket-core`), the following
    beans have been added with the `task` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the Spring configuration side of things, our `AnnotationConfig` bean
    (the main configuration bean for `cloudstreetmarket-api`) has been added the two
    annotations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `WebSocketConfig` bean has been updated as well; especially the
    broker registration. We now make use of a `StompBrokerRelay` instead of a simples
    broker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: That's it! Everything is set to use RabbitMQ as external broker for our system.
    However, please note that if you try to start the server right now, the code will
    be expecting MySQL to be installed as well as the Redis Server. These two third-party
    systems are going to be detailed over the two next recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a full-featured message broker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In comparison to a simple message broker, using a full-featured message broker
    such as RabbitMQ provides interesting benefits, which we will discuss now.
  prefs: []
  type: TYPE_NORMAL
- en: Clusterability – RabbitMQ
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A RabbitMQ broker is made of one or more Erlang nodes. Each of these nodes represent
    an instance of RabbitMQ in itself and can be started independently. Nodes can
    be linked with each other using the command line tool `rabbitmqctl`. For example,
    `rabbitmqctl join_cluster rabbit@rabbit.cloudstreetmarket.com` would actually
    connect one node to an existing cluster network. RabbitMQ nodes use cookies to
    communicate with one another. To be connected on the same cluster, two nodes must
    have the same cookie.
  prefs: []
  type: TYPE_NORMAL
- en: More STOMP message types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A full-featured message message broker (in comparison with a simple message
    broker) supports additional STOMP frame commands. For example, `ACK` and `RECEIPT`
    are not supported by simple message brokers.
  prefs: []
  type: TYPE_NORMAL
- en: StompMessageBrokerRelay
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous recipe, we talked about the flow that a message passes through
    in the Spring WebSocket engine. As shown with the following image, this flow is
    not affected at all when switching to an external message broker relay.
  prefs: []
  type: TYPE_NORMAL
- en: '![StompMessageBrokerRelay](img/image00907.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Only the RabbitMQ external message broker shows up as an extra piece.`BrokerMessageHandler`
    (`StompBrokerRelayMessageHandler`) acts only as a proxy targeting a RabbitMQ node
    behind the scenes. Only one TCP connection is maintained between the `StompBrokerRelay`
    and its message broker. The `StompBrokerRelay` maintains the connection by sending
    heartbeat messages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**RabbitMQ guide and documentation**: This recipe is just an overview, however
    the RabbitMQ documentation is well done and very complete. It is a great source
    of information, and you can find it at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.rabbitmq.com/documentation.html](http://www.rabbitmq.com/documentation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.rabbitmq.com/stomp.html](http://www.rabbitmq.com/stomp.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Stacking and consuming tasks with RabbitMQ and AMQP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to implement a **Message-oriented-Middleware**
    (**MoM**). This is a very popular technique in scalability based on asynchronous
    communication between components.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already introduced the new `cloudstreetmarket-shared` and `cloudstreetmarket-websocket`
    Java projects. WebSockets are now split away from `cloudstreetmarket-api`, but
    `cloudstreetmarket-websocket` and `cloudstreetmarket-api` will still communicate
    with each other using messaging.
  prefs: []
  type: TYPE_NORMAL
- en: In order to decouple secondary tasks from the request thread (secondary tasks
    like event producing), you need to learn how to configure and use AMQP message
    templates and listeners with RabbitMQ.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access the RabbitMQ web console at `http://localhost:15672`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you cannot reach the web console for some reason, please return to the previous
    recipe where the download and installation guidance can be found.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Queue** tab of the web console, create a new queue named `AMQP_USER_ACTIVITY`.
    Create it with the parameters **Durable** and **Auto-delete: "No"**:![How to do
    it…](img/image00908.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sender side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the API is requested to perform operations such as **create a transaction**
    or **create a like activity**, we produce events.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With very few adjustments changes, we now use the `RabbitTemplate` rather than
    the former `SimpMessagingTemplate` and we target an intermediate AMQP queue instead
    of the ultimate STOMP client.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `TransactionController`, the POST handler has been updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `LikeActionController`, the POST handler has been updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: Consumer side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained previously, the `cloudstreetmarket-websocket` module now listens
    to the `AMQP_USER_ACTIVITY` queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The necessary configuration is set in the `displatcher-servlet.xml` (`cloudstreetmarket-websocket`).
    There, we create a `rabbitConnectionFactory` and a `rabbitListenerContainerFactory`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the listener bean is created as follows with a `CSMReceiver` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can recognize the `SimpMessagingTemplate` used here to forward incoming
    message payloads to the final STOMP clients.
  prefs: []
  type: TYPE_NORMAL
- en: A new `WebSocketConfig` bean has been created in `cloudstreetmarket-websocket`.
    This one is very similar to the one we had in `cloudstreetmarket-api`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Client-side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We haven't changed many things on the client side (`cloudstreetmarket-webapp`),
    as we are still focused on the landing page (`home_community_activity.js`) at
    this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference is that the STOMP endpoint now targets the `/ws` context
    path. WebSockets are initiated from the `init()` function after a 5-second delay.
    Also, the `SockJS` socket and the STOMP client are now centralized in global variables
    (using the `Window` object) to simplify the WebSockets lifecycle during user navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type of infrastructure couples application components together in a loose
    but reliable way.
  prefs: []
  type: TYPE_NORMAL
- en: Messaging architecture overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we have given our application a MoM. The main idea was to decouple
    processes as much as possible from the client-request lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an effort to keep our REST API focused on resource handling, some business
    logic clearly appeared secondary, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Notifying the community that a new user has registered an account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifying the community that a user has performed a specific transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifying the community that a user has liked another user's action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have decided to create a new webapp dedicated to handle WebSockets. Our API
    now communicates with the `ws` web app by sending messages to it.
  prefs: []
  type: TYPE_NORMAL
- en: The message payloads are community `Action` objects (from the `Action.java`
    superclass). From the `cloudstreetmarket-api` web app to the `cloudstreetmarket-websocket`
    webapp, these action objects are serialized and wrapped in AMQP messages. Once
    sent, they are stacked in one single RabbitMQ queue (`AMQP_USER_ACTIVITY`).
  prefs: []
  type: TYPE_NORMAL
- en: Both the sender and the receiver parts are AMQP implementations (`RabbitTemplate`
    and `RabbitListener`). This logic will now be processed at the pace that the `websocket`
    web app can afford without having an impact on the user experience. When received
    (on the `cloudstreetmarket-websocket` side), message payloads are sent on the
    fly to WebSocket clients as STOMP messages.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit in direct performance here is arguable (in this example). We have
    after all mostly deferred the publishing of secondary events with an extra messaging
    layer. However, the benefits in design clarity and business components separation
    are priceless.
  prefs: []
  type: TYPE_NORMAL
- en: A scalable model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have talked much about the benefits of keeping web apps stateless. This is
    what we have tried to do so far with the API and we have been proud of it!
  prefs: []
  type: TYPE_NORMAL
- en: Without HTTP sessions, it would be pretty easy for us to react to traffic surges
    on the `api` web app, or on the `portal` web app. Without too much hassle, we
    would be able to set up a load balancer on the Apache HTTP proxy with `mod_proxy_balancer`
    for HTTP connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about this in the Apache HTTP doc: [http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html](http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '![A scalable model](img/image00909.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For WebSocket web apps, it would work basically the same in stateless. In the
    Apache HTTP configuration, a configured `mod_proxy_wstunnel` should handle load
    balancing over WebSockets and provide an application failover.
  prefs: []
  type: TYPE_NORMAL
- en: AMQP or JMS?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Advanced** **Message Queuing Protocol** (**AMQP**) defines a **wire-level**
    protocol and guarantees interoperability between senders and consumers. Any party
    compliant with this protocol can create and interpret messages, and thus interoperate
    with any other compliant component regardless of the underlying technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: In comparison, JMS is part of Java platform **Enterprise Edition (EE)**. Coming
    with the JSR-914, JMS is a standard for APIs that defines how APIs should create,
    send, receive, and read messages. JMS does not provide wire-level guidance, and
    it doesn't guarantee interoperability between parties either.
  prefs: []
  type: TYPE_NORMAL
- en: AMQP controls the format of the messages and the flow these messages go through,
    while JMS controls the technical implementations of the boundaries (operators).
    When we look for communication consistency within a potentially complex environment,
    AMQP appears to be a good choice for MoM protocols.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides external resources to extend your knowledge about AMQP
    and about event publishing methods.
  prefs: []
  type: TYPE_NORMAL
- en: A great introduction to AMQP by pivotal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to get a better understanding of AMQP and its differences with
    JMS, check out the following article on the [spring.io](http://spring.io) website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://spring.io/understanding/AMQP](https://spring.io/understanding/AMQP)'
  prefs: []
  type: TYPE_NORMAL
- en: A better way to publish application events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Right now, we didn''t implement a proper pattern to publish events. The article
    accessible from the link below comes from the [spring.io](http://spring.io) blog.
    It introduces best practices for event publishing with Spring 4.2+:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2](https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Load balancing WebSockets**: Read more about this topic in the following
    article by Arun Gupta (at Red Hat at the time):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48](http://blog.arungupta.me/load-balance-websockets-apache-httpd-techtip48)'
  prefs: []
  type: TYPE_NORMAL
- en: Securing messages with Spring Session and Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize, so far we have seen how to broadcast STOMP messages to StockJS
    clients, how to stack messages in an external multi-protocol broker, and how to
    interact with this broker (RabbitMQ) in the Spring ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is about implementing dedicated queues, no longer topics (broadcast),
    so that users can receive real-time updates related to the specific content they
    are viewing. It is also a demonstration of how SockJS clients can send data to
    their private queues.
  prefs: []
  type: TYPE_NORMAL
- en: For private queues, we had to secure messages and queue accesses. We have broken
    down our stateless rule of thumb for the API to make use of Spring Session. This
    extends the authentication performed by `cloudstreetmarket-api` and reuses the
    Spring Security context within `cloudstreetmarket-websocket`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache HTTP proxy configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because the `v8.2.x` branch introduced the new `cloudstreetmarket-websocket`
    web app, the Apache HTTP proxy configuration needs to be updated to fully support
    our WebSocket implementation. Our `VirtualHost` definition is now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: Redis server installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are on a Linux-based machine, download the latest stable version (3+)
    at [http://redis.io/download](http://redis.io/download). The format of the archive
    to download is `tar.gz`. Follow the instructions on the page to install it (unpackage
    it, uncompress it, and build it with the make command).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once installed, for a quick start, run Redis with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on a Windows-based machine, we recommend this repository: [https://github.com/ServiceStack/redis-windows](https://github.com/ServiceStack/redis-windows).
    Follow the instructions on the `README.md` page. Running Microsoft''s native port
    of Redis allows you to run Redis without any other third-party installations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To quickly start Redis server, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: When Redis is running, you should be able to see the following welcome screen:![Redis
    server installation](img/image00910.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update your Tomcat configuration in Eclipse to use the local Tomcat installation.
    To do so, double-click on your current server (the **Servers** tab):![Redis server
    installation](img/image00911.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the configuration panel as follows:![Redis server installation](img/image00912.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the **Use Tomcat installation** radio button is checked.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the panel is greyed out, right-click on your current server again, then click
    **Add**, **Remove**... Remove the three deployed web apps from your server and
    right click on the server once more, then click **Publish**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, download the following jars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**jedis-2.5.2.jar**: A small Redis Java client library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**commons-pool2-2.2.jar**: The Apache common object pooling library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download them respectively from [http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar](http://%20http://central.maven.org/maven2/redis/clients/jedis/2.5.2/jedis-2.5.2.jar)
    and [http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar](http://central.maven.org/maven2/org/apache/commons/commons-pool2/2.2/commons-pool2-2.2.jar)
  prefs: []
  type: TYPE_NORMAL
- en: You can also find these jars in the `chapter_8/libs` directory.
  prefs: []
  type: TYPE_NORMAL
- en: In the `chapter_8/libs` directory, you will also find the **tomcat-redis-session-manager-2.0-tomcat-8.jar**
    archive. Copy the three jars `tomcat-redis-session-manager-2.0-tomcat-8.jar`,
    `commons-pool2-2.2.jar`, and `jedis-2.5.2.jar` into the `lib` directory of your
    local Tomcat installation that Eclipse is referring to. This should be `C:\tomcat8\lib
    or /home/usr/{system.username}/tomcat8/lib` if our instructions have been followed
    in [Chapter 1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise
    Spring Application"), *Setup Routine for an Enterprise Spring Application*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now in your workspace, open the **context.xml** file of your **Server** project.![Redis
    server installation](img/image00913.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `Valve` configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: MySQL server installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While creating the new `cloudstreetmarket-websocket` web app, we have also changed
    the database engine from HSQLDB to MySQL. Doing so has allowed us to share the
    database between the `api` and `websocket` modules.
  prefs: []
  type: TYPE_NORMAL
- en: The first step for this section is to download and install the MySQL community
    server from [http://dev.mysql.com/downloads/mysql](http://dev.mysql.com/downloads/mysql)..
    Download the generally available release suited to your system. If you are using
    MS Windows, we recommend installing the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can follow the installation instructions provided by the MySQL team at [http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now going to define a common configuration for schema users and a database
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Create a root user with the password of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a technical user (with the administrator role) that the application will
    use. This user needs to be called `csm_tech` and needs to have the password `csmDB1$55`:![MySQL
    server installation](img/image00914.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the MySQL Client (the command line tool), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On MS Windows, start the program `mysql.exe` in the MySQL servers installation
    directory:`\MySQL Server 5.6\bin\mysql.exe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux or Mac OS, invoke the `mysql` command from the terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On both platforms, the first step is then to provide the root password chosen
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `csm` database either with the MySQL workbench or with MySQL client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the `csm` database as the current database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: From Eclipse, start the local Tomcat server. Once it has started, you can shut
    it down again; this step was only to get Hibernate to generate the schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need then to insert the data manually. To do so, execute the following import
    commands one after the other:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Application-level changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In `cloudstreetmarket-api` and `cloudstreetmarket-websocket`, the following
    filter has been added to the `web.xml` files. This filter has to be positioned
    before the Spring Security chain definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of Maven dependencies have also been added to `cloudstreetmarket-api`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: 'In `cloudstreetmarket-api` again, `security-config.xml` has been updated to
    reflect the following changes in the Spring Security filter chain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, this same `security-config.xml` file, as well as the `security-config.xml`
    file in `cloudstreetmarket-websocket` now define three extra beans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: 'Care was taken with `cloudstreetmarket-webapp` not to create sessions. We wanted
    sessions to be created only in the `cloudstreetmarket-api`. We have achieved this
    with adding the following configuration to the `web.xml` file in `cloudstreetmarket-webapp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: 'Regarding Spring Security, `cloudstreetmarket-websocket` has the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: 'Two configuration-beans in `cloudstreetmarket-websocket` complete the XML configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The WebSocketConfig bean in edu.zipcloud.cloudstreetmarket.ws.config is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: 'The `WebSocketSecurityConfig` bean in `edu.zipcloud.cloudstreetmarket.ws.config`
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ActivityFeedWSController` class has been copied over to `cloudstreetmarket-websocket`
    to broadcast user activities. It still doesn''t require any specific role or authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: 'One extra controller sends messages (which are up-to-date stocks values) into
    private queues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, new WebSockets are initiated from the stock-search screens
    (stocks result lists). Especially in `stock_search.js` and `stock_search_by_market.js`,
    the following block has been added in order to regularly request data updates
    for the set of results that is displayed to the authenticated user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: The `httpAuth.generatedQueueId()`function generates a random queue name based
    on the authenticated username (see `http_authorized.js` for more details).
  prefs: []
  type: TYPE_NORMAL
- en: RabbitMQ configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the RabbitMQ WebConsole, select the **Admin** tab, then select the **Policy**
    menu (also accessible from the `http://localhost:15672/#/policies` URL).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following policy:![RabbitMQ configuration](img/image00915.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This policy (named `PRIVATE`) applies to all auto-generated queues matching
    the pattern `CSM_QUEUE_*`, with an auto-expiration of 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s have a look ... before starting the Tomcat Server, ensure that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MySQL is running with the loaded data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Redis server is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RabbitMQ is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP has been restarted/reloaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When all these signals are green, start the Tomcat servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to the application with your Yahoo! account, register a new user, and
    navigate to the screen: **Prices and markets** | **Search by markets**. If you
    target a market that is potentially open at your time, you should be able to notice
    real-time updates on the result list:![The results](img/image00916.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Redis server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Redis is an open source in-memory data-structure store. Day-after-day, it is
    becoming increasingly popular as a NoSQL database and as a key-value store.
  prefs: []
  type: TYPE_NORMAL
- en: Its ability to store keys with optional expiration times and with very high
    availability (over its remarkable cluster) makes it a very solid underlying technology
    for session manager implementations. This is precisely the use we make of it through
    Spring Session.
  prefs: []
  type: TYPE_NORMAL
- en: Spring session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spring Session is a relatively new Spring project, but it is meant to grow up
    and take a substantial space in the Spring ecosystem, especially with the recent
    Microservices and IoT trends. The project is managed by Rob Winch at Pivotal inc.
    As introduced previously, Spring Session provides an API to manage users' sessions
    from different Spring components.
  prefs: []
  type: TYPE_NORMAL
- en: The most interesting and notable feature of Spring Session is its ability to
    integrate with the container (Apache Tomcat) to supply a custom implementation
    of `HttpSession`.
  prefs: []
  type: TYPE_NORMAL
- en: SessionRepositoryFilter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make use of a custom `HttpSession` implementation, Spring Session completely
    replaces the `HttpServletRequest` with a custom wrapper (`SessionRepositoryRequestWrapper`).
    This operation is performed inside `SessionRepositoryFilter`, which is the servlet
    filter that needs to be configured in the `web.xml` to intercept the request flow
    (before Spring MVC).
  prefs: []
  type: TYPE_NORMAL
- en: To do its job, the `SessionRepositoryFilter` must have an `HttpSession` implementation.
    At some point, we registered the `RedisHttpSessionConfiguration` bean. This bean
    defines a couple of other beans, and among them is a `sessionRepository`, which
    is a `RedisOperationsSessionRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: See how the `SessionRepositoryFilter` is important for bridging across the application
    all the performed session operations to the actual engine implementation that
    will execute those operations.
  prefs: []
  type: TYPE_NORMAL
- en: RedisConnectionFactory
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A `RedisConnectionFactory` implementation is necessary in order to produce a
    suitable connection to Redis. Selecting a `RedisConnectionFactory` implementation,
    we have been following the Spring team's choice which appeared to be the `JedisConnectionFactory`.
    This `RedisConnectionFactory` relies on Jedis (a lightweight Redis Java client).
    [https://github.com/xetorthio/jedis](https://github.com/xetorthio/jedis).
  prefs: []
  type: TYPE_NORMAL
- en: CookieHttpSessionStrategy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have registered an `HttpSessionStrategy` implementation: `RootPathCookieHttpSessionStrategy`.
    This class is a customized version (in our codebase) of the Spring `CookieHttpSessionStrategy`.'
  prefs: []
  type: TYPE_NORMAL
- en: Because we wanted to pass the cookie from `cloudstreetmarket-api` to `cloudstreetmarket-websocket`,
    the cookie path (which is a property of a cookie) needed to be set to the root
    path (and not the servlet context path). Spring Session 1.1+ should offer a configurable
    path feature.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/spring-projects/spring-session/issues/155](https://github.com/spring-projects/spring-session/issues/155)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, our `RootPathCookieHttpSessionStrategy` (basically `CookieHttpSessionStrategy`)
    produces and expects cookies with a **SESSION** name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CookieHttpSessionStrategy](img/image00917.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Currently, only `cloudstreetmarket-api` produces such cookies (the two other
    web apps have been restricted in their cookie generation capabilities so they
    don't mess up our sessions).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data Redis and Spring Session Data Redis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do you remember our good friend Spring Data JPA? Well now, Spring Data Redis
    follows a similar purpose but for the Redis NoSQL key-value store:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"The Spring Data Redis (framework makes it easy to write Spring applications
    that use the Redis key value store by eliminating the redundant tasks and boiler
    plate code required for interacting with the store through Spring''s excellent
    infrastructure support."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Spring Data Redis reference* |'
  prefs: []
  type: TYPE_TB
- en: Spring Session Data Redis is the Spring module that specifically implements
    Spring Data Redis for the purpose of Spring Session management.
  prefs: []
  type: TYPE_NORMAL
- en: The Redis Session manager for Tomcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apache Tomcat natively provides clustering and session-replication features.
    However, these features rely on load balancers sticky sessions. Sticky sessions
    have pros and cons for scalability. As cons, we can remember that sessions can
    be lost when servers go down. Also the stickiness of sessions can induce a slow
    loading time when we actually need to respond to a surge of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also been using an open source project from James Coleman that allows
    a Tomcat servers to store non-sticky sessions in Redis immediately on session
    creation for potential uses by other Tomcat instances. This open source project
    can be reached at the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jcoleman/tomcat-redis-session-manager](https://github.com/jcoleman/tomcat-redis-session-manager)'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this project doesn''t officially support Tomcat 8\. Thus, another
    fork went further in the Tomcat Release process and is closer from the Tomcat
    8 requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/rmohr/tomcat-redis-session-manager](https://github.com/rmohr/tomcat-redis-session-manager)'
  prefs: []
  type: TYPE_NORMAL
- en: We forked this repository and provided an adaptation for Tomcat 8 in https://github.com/alex-bretet/tomcat-redis-session-manager.
  prefs: []
  type: TYPE_NORMAL
- en: The `tomcat-redis-session-manager-2.0-tomcat-8.jar` copied to `tomcat/lib` comes
    from this repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tomcat 8 is still recent, and time is required for peripheral tools to follow
    releases. We don't provide `tomcat-redis-session-manager-2.0-tomcat-8.jar` for
    production use.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing/flushing sessions in Redis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the main installation directory for Redis, an executable for a command line
    tool (`Cli`) can be found. This executable can be launched from the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: 'This executable gives access to the Redis console. From there, for example,
    the `KEY *` command lists all the active sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FLUSHALL` command clears all the active sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Discover the Redis client language with their online tutorial accessible at
    [http://try.redis.io](http://try.redis.io).
  prefs: []
  type: TYPE_NORMAL
- en: securityContextPersistenceFilter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We make use of this filter in the `cloudstreetmarket-websocket` Spring Security
    filter chain. Its role consists of injecting an external Spring Security context
    into a `SecurityContextHolder` from the configured `SecurityContextRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: This filter interacts with `SecurityContextRepository` to persist the context
    once the filter chain has been completed. Combined with Spring Session, this filter
    is very useful when you need to reuse an authentication that has been performed
    in another component (another web app in our case).
  prefs: []
  type: TYPE_NORMAL
- en: 'After this point, we have also been able to declare a `global-method-security`
    element (of the Spring Security namespace) that allows us to make use of `@PreAuthorize`
    annotations in `@MessageMapping` annotated methods (our message handling methods)::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: AbstractSessionWebSocketMessageBrokerConfigurer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a long title. We have used this abstract class to give our `WebSocketConfig`
    the ability to:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure sessions are kept alive on incoming web socket messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that WebSocket sessions are destroyed when session terminate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AbstractSecurityWebSocketMessageBrokerConfigurer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a similar fashion, this abstract class provides authorization capabilities
    to our `WebSocketSecurityConfig` bean. Thanks to it, the `WebSocketSecurityConfig`
    bean now controls the destinations that are allowed for incoming messages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once again, we recommend the Spring reference document on Spring Session, which
    is very well done. Please check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-session/docs/current/reference/html5](http://docs.spring.io/spring-session/docs/current/reference/html5)'
  prefs: []
  type: TYPE_NORMAL
- en: Apache HTTP proxy extra configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The few lines added to `httpd.conf` serve the purpose of rewriting the WebSocket
    scheme to `ws` during the WebSocket handshake. Not doing this causes SockJS to
    fall back to its **XHR** options (one WebSocket emulation).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data Redis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Also, we recommend that you read more about the Spring Data Redis project (in
    its reference document):'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-data/data-redis/docs/current/reference/html](http://docs.spring.io/spring-data/data-redis/docs/current/reference/html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Deep-dive into Spring WebSockets** by Sergi Almar: This is the presentation
    that occurred at SpringOne2GX 2014:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.slideshare.net/sergialmar/websockets-with-spring-4](http://www.slideshare.net/sergialmar/websockets-with-spring-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring-websocket-portfolio, showcase application**: We must also highlight
    the Spring WebSocket showcase application from Rossen Stoyanchev:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rstoyanchev/spring-websocket-portfolio](https://github.com/rstoyanchev/spring-websocket-portfolio)'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9. Testing and Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the following listed recipes, this chapter introduces a set of common
    practices for maintaining, debugging, and improving an application state:'
  prefs: []
  type: TYPE_NORMAL
- en: Automating Database Migrations with Flyway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with Mockito and Maven Surefire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration testing with Cargo, Rest-assured, and Maven Failsafe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting Spring Bean in Integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modern application Logging with Log4j2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are now approaching the end of this journey, we must see how to consolidate
    the work. In the real world, tests must be written before a feature is developed
    (or at least at the same time). Writing automated tests in software development
    conveys a massive confidence about the application state. It is the best way of
    ensuring that nothing has been forgotten. Having a system that has the ability
    to test itself, with the help of modern continuous integration tools, ensures
    that features will not be damaged at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Manual testing through UI cannot be trusted to cover every single edge case
    that a developer has to think about. It is the responsibility of the developer
    to secure all the breaches and to cover all the possible paths, and this is a
    big responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: Our developer job is an amazing job. The perpetual technology enhancement sets
    an incomparable pace for every one of us—to stay in the race, to respond to the
    market, and sometimes to lead the market.
  prefs: []
  type: TYPE_NORMAL
- en: Our job is made of long hours of intense focus, search for information, design,
    redesign, and so on. Writing tests brings a healthy stability in the cycle. It
    allows us to finish our day happier with the features we develop, even weeks and
    months later.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Database Migrations with FlyWay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the delivery life cycle, maintaining databases across versions and multiple
    environments can be a real headache. Flyway is an assertive protection against
    the entropy that schema changes can induce. Managing and automating migrations,
    Flyway stands as a tremendously valuable asset for software makers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we review the Flyway configuration. We especially review its
    integration in to Maven. This will get every build to upgrade (if necessary) the
    corresponding database so that it matches the expectation level.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Git Perspective** in Eclipse, checkout the latest version of the
    branch `v9.x.x.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the`/app` directory of your workspace, the `cloudstreetmarket.properties`
    file has been updated. Also, one extra `db/migration` directory shows up with
    a `Migration-1_0__init.sql` file inside, as well as a new `/logs` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please do reflect all these changes to the app directory located in your OS
    user `home` `directory`: `<home-directory>/app`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also ensure that your **MySQL Server** is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **Maven clean** and **Maven install** commands on the `zipcloud-parent`
    project (right-click on the project **Run as…** | **Maven Clean** and then **Run
    as…** | **Maven Install**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run the **Maven clean** and **Maven install** commands on the `cloudstreetmarket-parent`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the stack trace (at the package Maven phase), you should see the
    following logs:![How to do it…](img/image00918.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, the database should have been reset to match a standard state
    of structure and data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you rerun the build again, you should now see the following logs:![How to
    do it…](img/image00919.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the parent `pom.xml` (in `cloudstreetmarket-parent`), you can notice a new
    plugin definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: 'A few variables (for example**,** `${database.driver})` used in this definition
    correspond to default properties, set at the top level of this `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: The `database.serverId` must match a new `Server` entry in the Maven `settings.xml`
    file (described in the next point).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the Maven `settings.xml` file (that you must have created in [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application*) located at
    `<home-directory>/.m2/settings.xml`. Add somewhere in the root node the following
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: 'In the parent `pom.xml` (in `cloudstreetmarket-parent`), a new `Profile` has
    been added to optionally override the default properties (of this `pom.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running `Maven Clean Install` with the `csm_integration` profile (`mvn clean
    install –Pcsm_integration`) would upgrade in this case, if necessary, a `csm_integration`
    database.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flyway is a database versioning and migration tool licensed Apache v2 (free
    software). It is a registered trademark of the company Boxfuse GmbH.
  prefs: []
  type: TYPE_NORMAL
- en: Flyway is not the only product in this category but is widely present in the
    industry for its simplicity and easy configuration. The migration scripts can
    be written in plain old SQL and many providers are supported. From classical RDBMS
    (Oracle, MySQL, SQL Server, and so on) to in-memory DB (HSQLDB, solidDB, and so
    on), and even cloud-based solutions (AWS Redshift, SQL Azure, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: A limited number of commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flyway provides the six following commands for reporting and operation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Migrate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Migrate` command is the goal we have integrated to the Maven package phase.
    It looks up the classpath or the filesystem for potential migrations to be executed.
    Several `locations` (script repositories) can be configured. In the Flyway Maven
    plugin, these `locations` are defined in the root `configuration` node. Patterns
    are set up to retain specific filenames.
  prefs: []
  type: TYPE_NORMAL
- en: Clean
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Clean` command restores pristine a database schema. All the objects (tables,
    views, functions, and so on) are dropped with this command.
  prefs: []
  type: TYPE_NORMAL
- en: Info
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Info` command provides feedback about the current state and the migration
    history of a given schema. If you have a look into your local MySQL server, in
    the `csm` schema, you will notice that a metadata table has been created with
    the name `schema_version`. Flyway uses the following table to compare the script
    repository state with the database state and to fill the gaps.
  prefs: []
  type: TYPE_NORMAL
- en: '| version | description | script | installed on | success |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | `<< Flyway Schema Creation >>` | `''csm''` | `12/11/2015 18:11` | `1`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `drop and create` | `/Migration-1_0__drop_and_create.sql` | `12/11/2015
    18:11` | `1` |'
  prefs: []
  type: TYPE_TB
- en: The `Info` command basically prints out this table as a report.
  prefs: []
  type: TYPE_NORMAL
- en: Validate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Validate` command can be useful to ensure that the migrations executed
    on a database actually correspond to the scripts currently present in the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Baseline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Baseline` command can be used when we have an existing database that hasn't
    been managed yet by Flyway. A Baseline version is created to tag the state of
    this database and to make it ready to live with upcoming versions. Versions prior
    to this Baseline will simply be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Repair
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Repair` command can clean up a corrupted state of the metadata table. To
    do that, Flyway removes the failed migration entries and resets the stored checksums
    to match the scripts checksums.
  prefs: []
  type: TYPE_NORMAL
- en: About Flyway Maven plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Flyway Maven plugin provides the interface for Maven to control the Flyway
    program. Our configuration of the plugin has been the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: As usual with Maven plugins, the executions section allows the binding of Maven
    phases to one or more Goals of the plugin. For Flyway Maven plugin, the goals
    are the Flyway commands presented previously. We tell Maven when to consider the
    plugin and what to invoke in this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `configuration` section presents a few parameters checked during migrations.
    For example, the `locations` specifies migration repositories to be scanned recursively
    (they can start with `classpath`: or `filesystem:`). The `schemas` defines the
    list of schemas managed by Flyway for the whole set of migrations. The first schema
    will be the default one across migrations.'
  prefs: []
  type: TYPE_NORMAL
- en: An interesting feature is the ability to use variables in migration scripts
    so that these scripts can be used as template for multiple environments. Variable
    names are defined with `placeholders`, and the way variables are identified in
    scripts is configurable with `placeholderPrefix` and `placeholderSuffix`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole list of configuration parameters can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://flywaydb.org/documentation/maven/migrate.html](http://flywaydb.org/documentation/maven/migrate.html).'
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flyway is well-documented and actively supported by its community. Read more
    about the product online at [http://flywaydb.org](http://flywaydb.org).
  prefs: []
  type: TYPE_NORMAL
- en: You can also follow or contribute to the project through the GitHub repository
    at [https://github.com/flyway/flyway](https://github.com/flyway/flyway).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liquibase**: The main Flyway competitor is probably Liquibase. Liquibase
    doesn''t use plain SQL for its scripts; it has instead its own multirepresentation
    DSL. For more information, visit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.liquibase.org](http://www.liquibase.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with Mockito and Maven Surefire
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit Tests are useful to keep an eye on the components' implementation. The
    legacy philosophy of Spring promotes reusable components application-wide. The
    core implementations of these components may either alter states (states of transitory
    objects) or trigger interactions with other components.
  prefs: []
  type: TYPE_NORMAL
- en: Using Mocks in Unit Tests specifically assesses the **behavior** of component's
    methods in regard to other components. When the developer gets used to Mocks,
    it is amazing to see how much the design becomes influenced toward the use of
    different layers and logic externalization. Similarly, object names and method
    names are given more importance. Because they summarize something that is happening
    elsewhere, Mocks save the energy of the next developer that will have to operate
    in the area of code.
  prefs: []
  type: TYPE_NORMAL
- en: Developing Unit Tests is by definition an Enterprise policy. As the percentage
    of code covered by tests can easily reflect the maturity of a product, this code-coverage
    rate is also becoming a standard reference to assess companies in regard to their
    products. It must also be noted that companies practicing code reviews as a development
    process find valuable insights from Pull Requests. When Pull Requests highlight
    behavioral changes through tests, the impact of potential changes becomes clear
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rerun a `Maven Install` on the `cloudstreetmarket-parent` project as in the
    previous recipe. When the build process comes to build the core module, you should
    see the following logs that suggest the execution of unit tests during the **test**
    phase (between **compile** and **package**):![How to do it…](img/image00920.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Those tests can be found in the `cloudstreetmarket-core` module, specifically
    in the `src/test/java` source folder:![How to do it…](img/image00921.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Both unit tests and integration tests use JUnit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: JUnit is natively supported by Eclipse IDE, and this last one offers handles
    to **Run** and **Debug** tests from a class or a method outside Maven:![How to
    do it…](img/image00922.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A very simple JUnit test class is `IdentifiableToIdConverterTest` (see the
    following code). This class asserts that all the registered Entities can be converted
    by `IdentifiableToIdConverter` for being `Identifiable` implementations (remember
    HATEOAS:):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: 'More advanced unit tests use the Mockito library. For instance, in the following
    `YahooQuoteToCurrencyExchangeConverterTest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: Here, the highlighted `transferCriticalData()`test gets an instance of `YahooQuoteToCurrencyExchangeConverter`
    that is not initialized with a real `@Autowired CurrencyExchangeRepository` but
    instead with a **Mock**. The converter gets its `convert()` method invoked with
    a `YahooQuote` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Mock is told to return a specific `CurrencyExchange` instance when its `findOne`(`String
    s`) method is called inside `convert()`. Then, the returned `currencyExchange`
    object is assessed field by field to ensure they are matching their individual
    expectations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Maven dependency to Mockito has been added across the different
    modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: 'A more extended use of Mockito for unit tests can be found in `CommunityServiceImplTest.`
    For example, in the following example, the `registerUser_generatePasswordAndEncodeIt`
    test makes use of the `ArgumentCaptor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@Test annotation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@Test` annotation must be placed on public void methods so that JUnit considers
    them as test cases. An exception thrown within one of these methods will be considered
    as a test failure. Consequently, an execution without any exception thrown represents
    a success.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Test` annotation can be customized, passing the following two optional
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The expected and timeout arguments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An **expected** parameter on an `@Test` annotation specifies that the test is
    expected to throw a specific type of exception to be successful. When a different
    Type of exception is thrown or when no exception is thrown at all, JUnit must
    consider the execution as a failure. When a test case is provided a **timeout**
    parameter in its `@Test` annotation, this test will fail when the execution lasts
    more than the indicated time.
  prefs: []
  type: TYPE_NORMAL
- en: The @RunWith annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As introduced in the recipe, the `@RunWith` annotation permits the use of external
    test runners (instead of the default `BlockJUnit4ClassRunner` coming with JUnit).
    By the way, a declarative technique for specifying the default JUnit runner could
    be to get `@RunWith` targeting `JUnit4.class` like so: `@RunWith(JUnit4.class)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *A runner runs tests and notifies a `RunNotifier` of significant events
    as it does so* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*JUnit.org Javadoc* |'
  prefs: []
  type: TYPE_TB
- en: A custom `Runner` must implement abstract methods from `org.junit.runner.Runner`
    such as `run(RunNotifier notifier)` and `getDescription()`. It must also follow
    up on core JUnit functions, driving for example, the test execution flow. JUnit
    has a set of annotations such as `@BeforeClass`, `@Before`, `@After`, and `@AfterClass`
    natively handled by `org.junit.runner.ParentRunner`. We are going to visit these
    annotations next.
  prefs: []
  type: TYPE_NORMAL
- en: '@Before and @After annotations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In test classes that contains several test cases, it is a good practice to try
    making the test logic as clear as possible. From this perspective, variable initialization
    and context reinitialization are operations that people often attempt to externalize
    for reusability. `@Before` annotations can be defined on `public void` methods
    to get them executed by the Runner before **every single test**. Similarly, `@After`
    annotations mark the `public void` method again to be executed after **each test**
    (usually for cleanup resources or destroying a context).
  prefs: []
  type: TYPE_NORMAL
- en: For information, on inheritance, `@Before` methods of parent classes will be
    run before those of the current class. Similarly, `@After` methods declared in
    superclasses will be run after those of the current class.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting point from the Javadoc specifies that **all** `@After` methods
    are guaranteed to run, **even if** a `@Before` or a `@Test` annotated method throws
    an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '@BeforeClass and @AfterClass annotations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@BeforeClass` and `@AfterClass` annotations can be applied to **public
    static void** methods. `@BeforeClass` causes a method to be run **once** in the
    test life cycle. The method will be run before any other `@Test` or `@Before`
    annotated methods.
  prefs: []
  type: TYPE_NORMAL
- en: A method annotated `@AfterClass` is guaranteed to be run **once** after all
    tests and also after all `@BeforeClass`, `@Before,` or `@After` annotated methods
    even if one of them throws an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '`@BeforeClass` and `@AfterClass` are valuable tools for handling performance-consuming
    operations related to the preparation of test context (database connection management
    and pre/post business treatments).'
  prefs: []
  type: TYPE_NORMAL
- en: For information, on inheritance, `@BeforeClass` annotated methods in superclasses
    will be executed **before** the ones of the current class, and `@AfterClass` annotated
    methods in the superclasses will be executed **after** those of the current class.
  prefs: []
  type: TYPE_NORMAL
- en: Using Mockito
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mockito is an Open Source testing framework that supports Test-Driven Developments
    and Behavior-Driven developments. It permits the creation of double objects (Mock
    objects) and helps in isolating the system under test.
  prefs: []
  type: TYPE_NORMAL
- en: MockitoJUnitRunner
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have been talking about custom runners. The `MockitoJUnitRunner` is a bit
    particular in the way that it implements a decoration pattern around the default
    `JUnitRunner`.
  prefs: []
  type: TYPE_NORMAL
- en: Such design makes optional the use of this runner (all the provided services
    could also be implemented declaratively with Mockito).
  prefs: []
  type: TYPE_NORMAL
- en: The `MockitoJUnitRunner` automatically initializes `@Mock` annotated dependencies
    (this saves us a call to `MockitoAnnotations.initMocks(this)`, in a `@Before`
    annotated method for example).
  prefs: []
  type: TYPE_NORMAL
- en: '`initMocks(java.lang.Object testClass)`'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *Initializes objects annotated with Mockito annotations for given testClass:
    `@Mock`* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Javadoc* |'
  prefs: []
  type: TYPE_TB
- en: The `MockitoJUnitRunner` also validates the way we implement the framework,
    after each test method, by invoking `Mockito.validateMockitoUsage()`.This validation
    assertively gets us to make an optimal use of the library with the help of explicit
    error outputs.
  prefs: []
  type: TYPE_NORMAL
- en: The transferCriticalData example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The system under test is the `YahooQuoteToCurrencyExchangeConverter`. The `@InjectMocks`
    annotation tells Mockito to perform injection of dependencies (constructor injection,
    property setter, or field injection) on the targeted converter using initialized
    Mocks before each test.
  prefs: []
  type: TYPE_NORMAL
- en: The `Mockito.when(T methodCall)` method, coupled with `thenReturn(T value)`
    allows the definition of a fake `CurrencyExchange` returned object when a call
    to `currencyExchangeRepository.findOne` will actually be made inside the `converter.convert(...)`
    tested method.
  prefs: []
  type: TYPE_NORMAL
- en: The `Mockito verify` method with `verify(currencyExchangeRepository, times(1)).findOne(any(String.class))`
    tells Mockito to validate how the tested `convert` method has interacted with
    the Mock(s). In the following example, we want the `convert` method to have called
    the repository only once.
  prefs: []
  type: TYPE_NORMAL
- en: The registerUser example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: More specifically in the `registerUser_generatesPasswordAndEncodesIt` test,
    we make use of a `MockitoArgumentCaptor` to manually perform deeper analyses on
    the object that a mocked method has been called with.
  prefs: []
  type: TYPE_NORMAL
- en: A `MockitoArgumentCaptor` is useful when we don't have an intermediate layer
    and when results are reused to invoke other methods.
  prefs: []
  type: TYPE_NORMAL
- en: More introspection tools than the superficial (but still very useful) Type checking
    can be required (for example, `any(String.class)`). An `ArgumentCaptor` as a solution
    is used with extra local variables in test methods.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that local variables and transitory states in implementation methods
    will always increase the complexity of their related tests. Shorter, explicit,
    and cohesive methods are always better options.
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: About Mockito
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We advise the Mockito's Javadoc that is very well done and full of practical
    examples
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html](http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html)'
  prefs: []
  type: TYPE_NORMAL
- en: JUnit Rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We didn't cover JUnit Rules in any way so far. JUnit offers `@Rule` annotations
    that can be applied on test-class fields to abstract recurring business-specific
    preparations. It is often used to prepare test context objects (fixtures).
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.codeaffine.com/2012/09/24/junit-rules](http://www.codeaffine.com/2012/09/24/junit-rules)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://junit.org/javadoc/latest/org/junit/Rule.html](http://junit.org/javadoc/latest/org/junit/Rule.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Code coverage, JaCoCo**: JaCoCo is a library used to help maintain and increase
    the percentage of code covered by tests in applications; it is available at: [http://eclemma.org/jacoco](http://eclemma.org/jacoco).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Read more about JaCoCo Maven plugin at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://eclemma.org/jacoco/trunk/doc/maven.html](http://eclemma.org/jacoco/trunk/doc/maven.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing with Cargo, Rest-assured, and Maven failsafe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration Tests are as important as unit tests. They validate a feature from
    a higher level, and involve more components or layers at the same time. Integration
    tests (IT tests) are given more importance when an environment needs to evolve
    fast. Design processes often require iterations, and unit tests sometimes seriously
    impact our ability to refactor, while higher level testing is less impacted comparatively.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe shows how to develop automated IT tests that focus on Spring MVC
    web services. Such IT Tests are not behavioral tests as they don't assess the
    user interface at all. To test behaviors, an even higher testing level would be
    necessary, simulating the User journey through the application interface.
  prefs: []
  type: TYPE_NORMAL
- en: We will configure the Cargo Maven Plugin to stand up a test environment as part
    of the pre-integration-test Maven phase. On the integration-test phase, we will
    get the Maven failsafe plugin to execute our IT Tests. Those IT Tests will make
    use of the REST-assured library to run HTTP requests against the test environment
    and assert the HTTP responses.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have designed Integration tests in the `cloudstreetmarket-api` module. These
    tests are intended to test the API controller methods.![How to do it…](img/image00923.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The great Rest-assured library comes with the following Maven dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: 'A typical example of an IT Test using REST-assured would be the following `UserControllerIT.createUserBasicAuth()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Because they take longer to execute, we wanted to decouple the IT Tests execution
    from the main Maven life cycle. We have associated those IT Tests to a Maven profile
    named `integration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Maven profiles offer the possibility to optionally enrich a Maven build with
    extra life cycle bindings. For instance, our integration profile is activated
    passing this profile id as `Profile` argument in the usual command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ mvn clean install -P integration`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our API IT tests, we have located the profile-specific configuration in
    the `cloudstreetmarket-api pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: 'Before attempting to run them on your machine, check that you have a **CATALINA_HOME**
    environment variable pointing to your Tomcat directory. If not, you must create
    it. The variable to set should be the following (if you have followed [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`C:\tomcat8`: on MS Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/usr/{system.username}/tomcat8`: on Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Users/{system.username}/tomcat8`: on Mac OS X'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, ensure that Apache HTTP, Redis, and MySQL are up and running on your local
    machine (see previous chapter if you have skipped it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'either execute the following Maven command in your Terminal (if you have the
    Maven directory in your path):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: 'or create a shortcut for this custom build in your Eclipse IDE from the **Run**
    | **Run Configurations…** menu. The Build configuration to create is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00924.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running this command (or shortcut) should:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: deploy the **api.war** to the local Tomcat Server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: start the local Tomcat
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: execute the test classes matching the **/*IT.java pattern
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all the tests pass, you should see the `[INFO] BUILD SUCCESS` message.
  prefs: []
  type: TYPE_NORMAL
- en: In between, when the build comes to the API, you should see the following bit
    of stack trace suggesting the successful execution of our IT tests:![How to do
    it…](img/image00925.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will explain in this section why we have introduced the Maven failsafe plugin,
    how the Cargo Plugin configuration satisfies our needs, how we have used REST-assured,
    and how useful this REST-assured library is.
  prefs: []
  type: TYPE_NORMAL
- en: Maven Failsafe versus Maven Surefire
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are using Maven failsafe to run Integration tests and Maven Surefire for
    unit tests. This is a standard way of using these plugins. The following table
    reflects this point, with the Plugins'' default naming patterns for test classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Maven Surefire | Maven Failsafe |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Default tests inclusion patterns** |'
  prefs: []
  type: TYPE_TB
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Default output directory** |'
  prefs: []
  type: TYPE_TB
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bound to build phase** |'
  prefs: []
  type: TYPE_TB
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: For Maven Failsafe, you can see that our overridden pattern inclusion/exclusion
    was optional. About the binding to Maven build phases, we have chosen to trigger
    the execution of our integration tests on the `integration-test` and `verify`
    phases.
  prefs: []
  type: TYPE_NORMAL
- en: Code Cargo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cargo is a lightweight library that offers standard API for operating several
    supported containers (Servlet and JEE containers). Examples of covered API operations
    are artifacts' deployments, remote deployments and container start/stop. When
    used through Maven, Ant, or Gradle, it is mostly used for its ability to provide
    support to Integration Tests but can also serve other scopes.
  prefs: []
  type: TYPE_NORMAL
- en: Cargo Maven Plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have used Cargo through its Maven plugin `org.codehaus.cargo:cargo-maven2-plugin`
    to automatically prepare an integration environment that we can run integration
    tests against. After the integration tests, we expect this environment to shut
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Binding to Maven phases
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The following executions have been declared as part of the `cargo-maven2-plugin`
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Let's visit what happens when the `mvn install` command is executed.
  prefs: []
  type: TYPE_NORMAL
- en: The `install` is a phase of the default Maven life cycle. As explained in [Chapter
    1](part0079.xhtml#aid-2BASE1 "Chapter 1. Setup Routine for an Enterprise Spring
    Application"), *Setup Routine for an Enterprise Spring Application* *,* the default
    life cycle has 23 build phases from `validate` to `deploy`. The `install` phase
    is the 22nd, so 22 phases are checked to see whether there are plugin goals that
    could be attached to them.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `pre-integration-test` phase (that appears in the default life cycle
    between `validate` and `install`) will trigger the processes that are located
    under the `start` and `deploy` goals of our maven Cargo plugin. It is the same
    logic with `post-integration-test` triggers the `undeploy` and `stop` goals.
  prefs: []
  type: TYPE_NORMAL
- en: Before the IT tests execution, we start and deploy the Tomcat server. These
    IT tests are processed with Maven failsafe in the `integration-test` phase. Finally,
    the Tomcat server is undeployed and stopped.
  prefs: []
  type: TYPE_NORMAL
- en: IT Tests can also be executed with the `verify` phase (if the server is started
    out of the default Maven life cycle).
  prefs: []
  type: TYPE_NORMAL
- en: Using an existing Tomcat instance
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the Cargo Maven plugin configuration, we are targeting an existing instance
    of Tomcat. Our application is currently depending upon MySQL, Redis, Apache HTTP,
    and a custom session management. We have decided that the IT Tests execution will
    be required to be run in a proper integration environment.
  prefs: []
  type: TYPE_NORMAL
- en: Without all these dependencies, we would have got Cargo to download a Tomcat
    8 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Rest assured
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: REST-assured is an open source library licensed Apache v2 and supported by the
    company Jayway. It is written with Groovy and allows making HTTP requests and
    validating JSON or XML responses through its unique functional DSL that drastically
    simplify the tests of REST services.
  prefs: []
  type: TYPE_NORMAL
- en: Static imports
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To effectively use REST-assured, the documentation recommends adding static
    imports of the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.jayway.restassured.RestAssured.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.jayway.restassured.matcher.RestAssuredMatchers.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.hamcrest.Matchers.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Given, When, Then approach
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To understand the basics of the REST-assured DSL, let''s consider one of our
    tests (in `UserControllerIT`) that provides a short overview of REST-assured usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: The `given` part of the statement is the HTTP Request specification. With REST-assured,
    some request headers like `Content-Type` or `Accept` can be defined in an intuitive
    way with `contentType(…)` and `accept(…)`. Other **headers** can be reached with
    the generic `.header(…)`. Request parameters and authentication can also be defined
    in a same fashion.
  prefs: []
  type: TYPE_NORMAL
- en: For `POST` and `PUT` requests, it is necessary to pass a body to the request.
    This `body` can either be plain JSON or XML or directly the Java object (as we
    did here). This `body`, as a Java object, will be converted by the library depending
    upon the `content-type` defined in the specification (JSON or XML).
  prefs: []
  type: TYPE_NORMAL
- en: After the HTTP Request specification, the `when()` statement provides information
    about the actual HTTP method and destination.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, the returned object allows us either to define expectations from
    a `then()` block or, as we did here, to retrieve the `Response` object from where
    constraints can be defined separately. In our test case, the `Location` header
    of the `Response` is expected to be filled.
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'More information can be found at the following Cargo and REST-assured respective
    documentations:'
  prefs: []
  type: TYPE_NORMAL
- en: About Cargo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the product and its integration with third-party
    systems, refer to [https://codehaus-cargo.github.io/cargo/Home.html](https://codehaus-cargo.github.io/cargo/Home.html).
  prefs: []
  type: TYPE_NORMAL
- en: More REST-assured examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more examples, the REST-assured online Wiki provides plenty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jayway/rest-assured/wiki/Usage](https://github.com/jayway/rest-assured/wiki/Usage)'
  prefs: []
  type: TYPE_NORMAL
- en: Injecting Spring Beans into integration tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is an example of how to inject Spring managed beans into integration
    test classes. Even for IT tests, whose first objective is to assess the backend
    as a blackbox, it is sometimes necessary to reach out technical objects from the
    intermediate layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see how to reuse an instance of a Spring managed `datasource` to be
    injected in our test class. This `datasource` will help us to build an instance
    of `jdbcTemplate`. From this `jdbcTemplate`, we will query the database and simulate/validate
    processes that couldn't be tested otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have `@Autowired` a `dataSource` SpringBean in our `UserControllerIT` test.
    This bean is defined in the test-specific Spring configuration file (`spring-context-api-test.xml`)
    `resources` directory (`cloudstreetmarket-api`):![How to do it…](img/image00926.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: 'A `jdbcTemplate` instance is created in the `UserControllerIT` class from the
    `@Autowired dataSource` bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: We use `jdbcTemplate` to insert and delete `Social Connections` directly in
    the database (see [Chapter 5](part0101.xhtml#aid-30A8Q1 "Chapter 5. Authenticating
    with Spring MVC"), *Authenticati**ng with Spring MVCA*). This allows us to bypass
    and simulate a successful user OAuth2 authentication flow (that normally happens
    through the web browser).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For deleting social connections, we have created the following private method
    that is called as needed by the test(s:):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: 'At the very top of the `UserControllerIT` class, the following two annotations
    can be noticed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@RunWith(SpringJUnit4ClassRunner.class)` tells JUnit to run with a custom
    extension of JUnit (`SpringJUnit4ClassRunner`) that supports the Spring `TestContext`
    Framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ContextConfiguration("classpath:spring-context-api-test.xml")`specifies where
    and how to load and configure the Spring application context:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SpringJUnit4ClassRunner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In its design, the `SpringJUnit4ClassRunner` is a direct subclass of the JUnit's
    `BlockJUnit4ClassRunner`. `SpringJUnit4ClassRunner` that initializes when a `TestContextManager`
    is loaded. A `TestContextManager` manages the life cycle of a `TestContext` and
    can also reflect test events to the registered `TestExecutionListeners` (from
    `@BeforeClass`, `@AfterClass`, `@Before`, and `@After` annotations).
  prefs: []
  type: TYPE_NORMAL
- en: By loading a Spring context, the `SpringJUnit4ClassRunner` Spring context, `SpringJUnit4ClassRunner`
    enables the possibility use Spring managed beans in test classes. The `SpringJUnit4ClassRunner`
    also supports a set of annotations (either from JUnit or from Spring test) that
    can be used in test classes. The use of these annotations can be trusted for subsequently
    providing suitable life cycle management to context-defined objects.
  prefs: []
  type: TYPE_NORMAL
- en: Those annotations are `@Test` (with its `expected` and `timeout` annotation
    parameters), `@Timed`, `@Repeat`, `@Ignore`, `@ProfileValueSourceConfiguration`,
    and `@IfProfileValue`.
  prefs: []
  type: TYPE_NORMAL
- en: The @ContextConfiguration annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class-level annotation is specific to Spring Test. It defines how and where
    to load a Spring Context for the test class.
  prefs: []
  type: TYPE_NORMAL
- en: Our definition in the recipe targets a specific Spring XML configuration file
    `@ContextConfiguration("classpath:spring-context-api-test.xml").`
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since Spring 3.1 the contexts can be defined programmatically, `@ContextConfiguration`
    can also target configuration classes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class})`'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following snippet, both declaration types can be combined in
    the same annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ContextConfiguration(classes={AnnotationConfig.class,` `WebSocketConfig.class},
    locations={`"`classpath:spring-context-api-test.xml`"`})`'
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see more in this section about the Spring JdbcTemplate that has been
    used for test purposes.
  prefs: []
  type: TYPE_NORMAL
- en: JdbcTemplate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In *Chapter1, Setup Routine for an Enterprise Spring Application*, we have introduced
    the different modules that make the Spring Framework what it is today. One group
    of modules is **Data Access and Integration**. This group contains the JDBC, ORM,
    OXM, JMS, and transactions modules.
  prefs: []
  type: TYPE_NORMAL
- en: The `JdbcTemplate` is a key-class part of the Spring JDBC core package. It reliably
    allows performing of database operations with straightforward utility methods
    and also provides an abstraction for big chunks of boilerplate code. Once more,
    this tool saves us time and offers patterns to design quality products.
  prefs: []
  type: TYPE_NORMAL
- en: Abstraction of boilerplate logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s consider as an example the method in our test class that deletes connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Using `jdbcTemplate`, deleting a database element is a one-line instruction.
    It creates a `PreparedStatement` under the hood, chooses the right Type, depending
    upon the arguments we actually pass as values, and it manages the database connection
    for us, making sure to close this connection whatever happens.
  prefs: []
  type: TYPE_NORMAL
- en: The `jdbcTemplate.update` method has been designed to issue a single SQL update
    operation. It can be used for inserts, updates, and also deletes.
  prefs: []
  type: TYPE_NORMAL
- en: As often in Spring, `jdbcTemplate` also transforms the produced checked exceptions
    (if any) into unchecked exceptions. Here, the potential `SQLExceptions` would
    be wrapped in a `RuntimeException`.
  prefs: []
  type: TYPE_NORMAL
- en: Extraction of auto-generated IDs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `jdbcTemplate.update` method also offers other argument Types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: In the case of an insert, this method can be called when needed to read and
    potentially reuse the generated ID (which is unknown before the query execution).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, if we would have wanted to reuse the generated connection IDs
    when inserting new connections, we would have done it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: But we didn't specifically require such a use case.
  prefs: []
  type: TYPE_NORMAL
- en: Modern application Logging with Log4j2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After 20 years of evolution in the Java ecosystem, the ways of Logging have
    seen different strategies, trends, and architectures. Nowadays, several Logging
    frameworks can be found among the used third-party dependencies. We must support
    them all to debug an application or to trace runtime events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a future-proof implementation of `Log4j2` for the `CloudStreet
    Market` application. It requires several Maven dependencies to be added to our
    modules. As a solution, it can appear quite complicated, but in reality the amount
    of Logging frameworks to support is limited, and the logic behind a `Log4j2` migration
    is fairly straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following Maven dependencies have been added to the dependency-management
    section of the parent-module (`cloudstreetmarket-parent`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last dependency-management, `org.slf4j`, allows us to make sure one single
    version of `slf4j` will be used everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `api`, `ws`, and `core` modules, the following dependencies have then
    been added: `log4j-api`, `log4j-core`, `log4j-slf4j-impl`, `log4j-1.2-api`,and
    `log4j-jcl`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web modules (`api`, `ws`, and `webapp`), `log4j-web` has been added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that `slf4j-api` has only been added for dependency management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the Tomcat Server with **the extra JVM argument**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `<home-directory>` with the path you actually use on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app directory in the user home now contains the `log4j2` configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: As a fall back option, a `log4j2.xml` file is also present in the classpath
    (`src/main/resources`) of every single module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A couple of log instructions have been placed in different classes to trace
    the user journey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log instructions in `SignInAdapterImpl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: 'Log instructions in `UsersController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your local Tomcat Server and navigate briefly through the application.
    As with the following example, you should be able to observe a trace of the customer
    activity in the aggregated file: `<home-directory>/apps/logs/cloudstreetmarket.log`:![How
    to do it…](img/image00927.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the `log4j2.xml` configuration we have made, the `cloudstreetmarket.log`
    files will automatically be zipped and categorized in directories as they reach
    250 MB.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are mainly going to review in this section how Log4j2 has been set up to
    work along with the other Logging frameworks. The other parts of the configuration
    (not covered here) have been considered more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Log4j2 among other logging frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Log4j1+ is dying as a project since it is not compatible any longer with Java
    5+.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j 2 has been built as a fork of the log4j codebase. In this perspective,
    it competes with the Logback project. Logback was initially the legitimate continuation
    of Log4j.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j 2 actually implements many of the Logback's improvements but also fixes
    problems that are inherent to the Logback's architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Logback provides great performance improvements, especially with multithreading.
    Comparatively, Log4j 2 offers similar performance.
  prefs: []
  type: TYPE_NORMAL
- en: The case of SLF4j
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: SLF4j is not a Logging framework as such; it is an abstraction layer that allows
    the user to plug in any logging system at deployment time.
  prefs: []
  type: TYPE_NORMAL
- en: 'SLF4j requires a SLF4j binding in the classpath. Examples of bindings are the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slf4j-log4j12-xxx.jar`: (log4j version 1.2),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slf4j-jdk14-xxx.jar`: (`java.util.logging` from the jdk 1.4),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slf4j-jcl-xxx.jar`: (Jakarta Commons Logging)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logback-classic-xxx.jar`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also often requires core libraries of the targeted Logging framework.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating to log4j 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Log4j2 does not offer backward compatibility for Log4j1+. It may sound like
    a problem because applications (like `CloudStreetMarket`) often use third-party
    libraries that embed their own logging framework. Spring core, for example, has
    a transitive dependency to Jakarta Commons Logging.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this situation, Log4j 2 provides adapters guaranteeing that internal
    logs won't be lost and will be bridged to join the log4j 2 flow of logs. There
    are adapters pretty much for all the systems that may produce logs.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j 2 API and Core
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Log4j 2 comes with an API and an implementation. Both are required and come
    with the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Log4j 2 Adapters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As introduced earlier, a set of **Adapters** and **Bridges** are available to
    provide backward compatibility to our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j 1.x API Bridge
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'When transitive dependencies to Log4j 1+ are noticed in specific modules, the
    following bridge should be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Apache Commons Logging Bridge
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'When transitive dependencies to Apache (Jakarta) Commons Logging are noticed
    in specific modules, the following bridge should be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: SLF4J Bridge
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The same logic is applied to cover slf4j uses; the following bridge should
    be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Java Util Logging Adapters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'No transitive dependencies to `java.util.logging` have been noticed in our
    application, but if it would have been the case, we would have used the following
    bridge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Web Servlet Support
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Apache Tomcat container has its own set of libraries that also produce logs.
    Adding the following dependency on web modules is a way to ensure that container
    logs are routed to the main Log4j2 pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: Configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sixth step of this recipe details our log4j2 configuration. It is made of
    different and configurable `Appenders` (output channels basically). We are using
    the console and a file-based `Appender`, but Log4j 2 has a plugin-based architecture
    about `Appenders` that allows the use of external output channels if needed (SMTP,
    Printer, Database, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As external sources of information, we point out the interesting Log4j2 auto-configuration
    which is made of a cascading lookup for configuration files, the official documentation,
    and an `Appender` for logging directly into Redis.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Log4j2 implements a cascading lookup in order to locate log4j2 configuration
    files. Starting from looking for a provided `log4j.configurationFile` system property,
    to `log4j2-test.xml` and `log4j2.xml` files in the classpath, the official documentation
    details all the followed waterfall steps. This documentation is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://logging.apache.org/log4j/2.x/manual/configuration.html](https://logging.apache.org/log4j/2.x/manual/configuration.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Official documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The official documentation is very well made and complete, and is available
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://logging.apache.org/log4j/2.x.](https://logging.apache.org/log4j/2.x.)'
  prefs: []
  type: TYPE_NORMAL
- en: Interesting Redis Appender implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following address introduces an Apache licensed project that provides a
    Log4j2 **Appender** to log straight into Redis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/pavlobaron/log4j2redis](https://github.com/pavlobaron/log4j2redis)'
  prefs: []
  type: TYPE_NORMAL
- en: Part III. Module 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mastering Spring MVC 4**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Gain expertise in designing real-world web applications using the Spring MVC
    framework*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Chapter 1. Mastering the MVC Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the MVC architecture principles and see how
    Spring MVC implements those.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal is to design a simple page where users can search for tweets corresponding
    to certain criteria and display them to our users.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we will use the Spring Social Twitter project, which is available
    at [http://projects.spring.io/spring-social-twitter/](http://projects.spring.io/spring-social-twitter/).
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to make Spring MVC work with a modern template engine, Thymeleaf,
    and try to understand the inner mechanics of the framework. We will route our
    users through different views, and finally, we will give a stellar look to our
    application using WebJars and Materialize ([http://materializecss.com](http://materializecss.com)).
  prefs: []
  type: TYPE_NORMAL
- en: The MVC architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I expect the meaning of the MVC acronym to be familiar to most. It stands for
    Model View Controller, and it is considered to be a very popular way to build
    a user interface by decoupling the data and the presentation layers.
  prefs: []
  type: TYPE_NORMAL
- en: '![The MVC architecture](img/image00928.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The MVC pattern became wildly popular after emerging from the world of Smalltalk
    and landing in the Ruby on Rails framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The architectural pattern features three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Model**: This consists of various representations of the data your application
    knows about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The View**: This is made up of several representations of the data that will
    be displayed to your users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Controller**: This is the part of the application that will handle user
    interactions. It''s a bridge between the model and the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea behind MVC is to decouple the View from the Model. The model must be
    self-contained and ignorant of the UI. This basically allows the same data to
    be reused across multiple views. These views are different way to look at the
    data. Drill down or using different renderers (HTML, PDF) are good illustrations
    of this principle.
  prefs: []
  type: TYPE_NORMAL
- en: The Controller acts as a mediator between the user and the data. Its role is
    to control actions available to the end user, as well as routing through the different
    views of the application.
  prefs: []
  type: TYPE_NORMAL
- en: MVC critics and best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While MVC remains the go-to approach for designing a UI, many criticisms arose
    with its prevalence. Most critics are actually pointing a finger at the incorrect
    use of the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Anemic Domain Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eric Evans' influential book *Domain Driven Design*, also abbreviated as **DDD**,
    defines a set of architecture rules leading to a better integration of the business
    domain inside the code.
  prefs: []
  type: TYPE_NORMAL
- en: One of the core ideas is to take advantage of the object-oriented paradigms
    inside the domain objects. Going against this principle is sometimes referred
    to as **Anemic Domain Model**. A good definition of this problem can be found
    on Martin Fowler's blog ([http://www.martinfowler.com/bliki/AnemicDomainModel.html](http://www.martinfowler.com/bliki/AnemicDomainModel.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'An Anemic Model typically exhibits the following symptoms:'
  prefs: []
  type: TYPE_NORMAL
- en: The model is constituted from very simple **plain old Java objects** (**POJO**s)
    with only getters and setters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the business logic is handled inside a service layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation of the model is found outside this model, for instance, in controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can be a bad practice depending on the complexity of your business domain.
    Generally speaking, DDD practices require additional efforts to isolate the domain
    from the application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture is always a tradeoff. It is good to note that typical ways of designing
    a Spring application can lead to complicated maintenance somewhere along the road.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to avoid domain anemia is explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: The Service layer is good for application-level abstraction like transaction
    handling, not business logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your domain should always be in a valid state. Leave validation inside the form
    objects using validators or JSR-303's validation annotations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: translate the inputs into meaningful domain objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of your data layer in term of repositories with domain queries (refer
    to Spring Data Specification, for example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decouple your domain logic from the underlying persistence framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use real objects as much as possible. For instance, manipulate the `FirstName`
    class rather than a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is much more to DDD than these simple rules: Entities, value types, Ubiquitous
    Language, Bounded Context, Onion Architecture, and anti corruption layers. I strongly
    encourage you to study these principles on your own. As far as we are concerned,
    with this book we will try to keep in mind the guidelines listed earlier as we
    craft our web application. These concerns will become more familiar to you as
    we advance through this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning from the sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're familiar with Spring, you have probably already landed on Spring's
    website, [http://spring.io](http://spring.io). It is entirely made with Spring
    and the good news is that it is open source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code name of the project is sagan. It has numerous interesting features:'
  prefs: []
  type: TYPE_NORMAL
- en: A gradle multimodule project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Github integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript frontend application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub wiki associated with the project is really detailed and will help
    you get started easily with the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the following URL if you''re interested in the Spring''s architecture
    of a real world application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/spring-io/sagan](https://github.com/spring-io/sagan)'
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC 1-0-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In spring MVC, the model is a simple map encapsulated in the `Model` or `ModelAndView`
    classes of Spring MVC. It can come from a database, files, external services,
    and so on. It is up to you to define how to fetch the data and put it into the
    model. The recommended way of interacting with the data layer is through Spring
    Data libraries: Spring Data JPA, Spring Data MongoDB, and so on. There are a dozen
    projects related to Spring Data and I encourage you to take a look at [http://projects.spring.io/spring-data](http://projects.spring.io/spring-data).'
  prefs: []
  type: TYPE_NORMAL
- en: The controller side of Spring MVC is handled through the use of the `@Controller`
    annotation. In a web application, the controller's role is to respond to HTTP
    requests. Classes annotated with the `@Controller` annotation will be picked up
    by Spring and given a chance to handle upcoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: Via the `@RequestMapping` annotation, Controllers declare handling specific
    requests based on their HTTP method (`GET` or `POST` methods, for instance) and
    their URLs. The Controller then decides to either write content directly in the
    web response or route the application to a view and inject properties into that
    view.
  prefs: []
  type: TYPE_NORMAL
- en: A pure RESTful application would choose the first approach and expose a JSON
    or XML representation of the model directly in the HTTP response with the `@ResponseBody`
    annotation. In the case of a web application, this type of architecture is often
    associated with a frontend JavaScript framework such as Backbone.js, AngularJS,
    or React. In this case, the Spring application would then only handle the Model
    layer of the MVC model. We will study this kind of architecture in [Chapter 3](part0147.xhtml#aid-4C62M2
    "Chapter 3. File Upload and Error Handling"), *File Upload and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: With the second approach, the Model is passed to the View, which is rendered
    by a templating engine and then written to the response.
  prefs: []
  type: TYPE_NORMAL
- en: The view is often associated with a templating dialect, which will allow navigation
    inside the model. Popular dialects for templating are JSPs, FreeMarker, or Thymeleaf.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid approaches may take advantage of the templating engine to interact with
    some aspects of the application and then delegate the view layer to a frontend
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Using Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thymeleaf is a templating engine that gets particular attention from the Spring
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Its success is due mostly to its friendly syntax (it almost looks like HTML)
    and the ease with which it can be extended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various extensions are available and integrated with Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Support | Dependency |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Layouts | `nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect` |'
  prefs: []
  type: TYPE_TB
- en: '| HTML5 data-* attributes | `com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer conditional comments | `org.thymeleaf.extras:thymeleaf-extras-conditionalcomments`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Support for spring security | `org.thymeleaf.extras:thymeleaf-extras-springsecurity3`
    |'
  prefs: []
  type: TYPE_TB
- en: A very good tutorial on Thymeleaf's integration with Spring can be found at
    [http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html](http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Without further ado, let''s add the `spring-boot-starter-thymeleaf` dependency
    to bootstrap the thymeleaf templating engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Our first page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now add the first page to our application. It will be located in `src/main/resources/templates`.
    Let''s call the file `resultPage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: We can see from the very start that Thymeleaf integrates perfectly with html
    and its syntax almost feels natural.
  prefs: []
  type: TYPE_NORMAL
- en: The `th:text` value is put between pipes. It means that all the values inside
    the text will be concatenated.
  prefs: []
  type: TYPE_NORMAL
- en: It might seem a bit awkward at first, but in practice, text will rarely be hardcoded
    in our pages; so, Thymeleaf makes an opinionated design decision here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thymeleaf has a big advantage for web designers: everything that is dynamic
    inside the templates can fall back to a default value in the case where they are
    opened without the server running. Resource URLs can be specified relatively and
    every markup can contain placeholders. In our previous example, the text "Hello
    html" would not be displayed when the view is rendered in the context of our application,
    but it will if the file is opened directly with a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To speed up development, add this property to your `application.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: This will disable the view cache and cause templates to reload every time they
    are accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this setting will need to be disabled when we go into production.
    We will see that in [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing
    Your Requests"), *Optimizing Your Requests*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Reloading the views**'
  prefs: []
  type: TYPE_NORMAL
- en: With the cache disabled, simply save your view with eclipse or use the `Build
    > Make Project` action in IntelliJ to refresh the views after a change.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will need to modify our `HelloController` class. Instead of displaying
    plain text, it must now route to our freshly created view. To accomplish this,
    we will remove the `@ResponseBody` annotation. Doing so and still returning a
    string will tell Spring MVC to map this string to a view name instead of displaying
    a particular model directly in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what our controller now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the controller will redirect the user to the view name `resultPage`.
    The `ViewResolver` interface will then associate this name with our page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's launch our application again and go to `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our first page](img/image00929.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Spring MVC architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a step back from this spectacular new "Hello World" and try to understand
    what happened inside our web application. To do this, we will retrace the journey
    of the HTTP request our browser sent and the response it got from the server.
  prefs: []
  type: TYPE_NORMAL
- en: DispatcherServlet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The entry point of every Spring web application is the `DispatcherServlet`.
    The following figure illustrates the Dispatcher Servlet architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DispatcherServlet](img/image00930.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a classical `HttpServlet` class that dispatches HTTP requests to HandlerMapping.
    A **HandlerMapping** is an association of resources (URLs) and Controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate methods—those annotated with `@RequestMapping` annotation—are
    then called on the Controller. In this method, the controller sets the model data
    and returns the view name to the dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: The `DispatcherServlet` will then interrogate the `ViewResolver` interface to
    find the corresponding implementation of the view.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the `ThymeleafAutoConfiguration` class has set up the view resolver
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the `ThymeleafProperties` class that the default prefix for our
    views is `classpath:/templates/` the default suffix is `.html`.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, given the view name `resultPage`, the view resolver will look
    in the templates directory of our classpath, looking for a file called `resultPage.html`.
  prefs: []
  type: TYPE_NORMAL
- en: In our application our `ViewResolver` interface is static, but more advanced
    implementation can return different results given the request headers or the user's
    locale.
  prefs: []
  type: TYPE_NORMAL
- en: The view will finally be rendered and the result written to the response.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first page is completely static; it does not really take advantage of the
    power of Spring MVC. Let's spice things up a little bit. What if the "Hello World"
    string, instead of being hardcoded, came from the server?
  prefs: []
  type: TYPE_NORMAL
- en: 'It would still be a lame "hello world" you say? Yes, but it will open up many
    more possibilities. Let''s change our `resultPage.html` file to display a message
    coming from the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s modify our controller so it puts this message inside this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: I know, the suspense is killing you! Let's see what `http://localhost:8080`
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing data to the view](img/image00931.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing to note is that we passed a new argument to the controller's
    method and that the `DispatcherServlet` provided the correct object for us. There
    are, in fact, many objects that can be injected into the controller's methods
    such as `HttpRequest` or `HttpResponse`, the `Locale`, the `TimeZone`, and the
    `Principal`, which represent an authenticated user. The full list of such objects
    is available in the documentation, which can be found at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Expression Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the `${}` syntax, you are in fact using **Spring Expression Language**
    (**SpEL**). There are several variants of EL available in the wild; SpEl is one
    of the most powerful variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an overview of its main features:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Syntax | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Accessing a list element | `list[0]` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Accessing a map entry | `map[key]` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Ternary operator | `condition ? ''yes'' : ''no''` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Elvis operator | `person ?: default` | Returns `default` if person''s value
    is null |'
  prefs: []
  type: TYPE_TB
- en: '| Safe navigation | `person?.name` | Returns `null` if person or her name is
    null |'
  prefs: []
  type: TYPE_TB
- en: '| Templating | `''Your name is #{person.name}''` | Injects values into a string
    |'
  prefs: []
  type: TYPE_TB
- en: '| Projections | `${persons.![name]}` | Extracts the names of all the persons
    and puts them into a list |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | `persons.?[name == ''Bob'']''` | Retrieves the person whose name
    is Bob inside a list |'
  prefs: []
  type: TYPE_TB
- en: '| Function call | `person.sayHello()` |   |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For complete reference, check the manual at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html).
  prefs: []
  type: TYPE_NORMAL
- en: The SpEl usage is not limited to views. You can also use it in various places
    inside the Spring framework, for instance, when injecting properties inside beans
    with the `@Value` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data with a request parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are able to display data coming from the server inside the view. However,
    what if we wanted to get input from the user? With the HTTP protocol, there are
    multiple ways to do this. The simplest way is to pass a query parameter to our
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Query parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: You certainly know query parameters. They are found after the `?` character
    in a URL. They consist of a list of name and values separated by the & symbol
    (Ampersand), for example, `page?var1=value1&var2=value2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can leverage this technique to ask our user for their name. Let''s modify
    our `HelloController` class again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: 'If we navigate to `localhost:8080/?name=Geoffroy`, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting data with a request parameter](img/image00932.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the request parameter is mandatory. This means that if we were to
    navigate to `localhost:8080`, we would see an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the `@RequestParam` code, we can see that in addition to the value
    parameter, there are two other attributes possible: `required` and `defaultValue`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we can change our code and specify a default value for our parameter
    or indicate that it is not required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Java 8, it is possible not to specify the value parameter. In that case,
    the name of the annotated method parameter will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Enough Hello Worlds, let's fetch tweets!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right, the name of the book isn't "Mastering Hello Worlds", after all. With
    Spring, interrogating Twitter's API is really easy.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, you have to register your application in the Twitter developer
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://apps.twitter.com](https://apps.twitter.com) and create a new
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Give it the name you please. Under the website and Callback URL sections, just
    enter `http://127.0.0.1:8080`. This will allow you to test your application in
    development on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your application](img/image00933.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, navigate to the keys, access the token, and copy the **Consumer Key**
    and the **Consumer Secret**. We will use this in a moment. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your application](img/image00934.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By default, our application has read only permissions. This will be enough for
    our application, but you can tweak it if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Spring Social Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the following dependency to our `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Spring Social** is a set of projects providing access to the public APIs
    of various social networks. Out of the box, Spring Boot provides integration with
    Twitter, Facebook, and LinkedIn. Spring Social includes about 30 projects overall,
    which can be found at [http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two lines to the `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: These are the keys associated with the application we just created.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn more about OAuth in [Chapter 5](part0168.xhtml#aid-506UG2 "Chapter 5. Securing
    Your Application"), *Securing Your Application*. For now, we will just use those
    credentials to issue requests to Twitter's API on behalf of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now use Twitter in our controller. Let''s change its name to `TweetController`
    as a variable to reflect its new responsibility in a better manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the code searches for tweets matching the request parameter.
    If it all goes well, you will see the text of the first one being displayed on
    your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing Twitter](img/image00935.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, if the search doesn't yield any result, our clumsy code will fail
    with an `ArrayOutOfBoundException`. So, do not hesitate to tweet to solve the
    problem!
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we wanted to display a list of tweets? Let''s modify the `resultPage.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `th:each` is a tag defined in Thymeleaf that allows it to iterate over a
    collection and assign each value to a variable inside a loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to change our controller as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using Java 8 streams to collect only the messages from the
    tweets. The `Tweet` class contains many other attributes such as the sender, the
    retweet count, and so on. However, we will keep it simple for now, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing Twitter](img/image00936.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Java 8 streams and lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might not be familiar with lambdas yet. In Java 8, every collection gets
    a default method `stream()`, which gives access to functional-style operations.
  prefs: []
  type: TYPE_NORMAL
- en: These operations can be either intermediate operations returning a stream, and
    thus allowing chaining, or a terminal operation that returns a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most famous intermediate operations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: This applies a method to every element of a list and returns the list
    of results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: This returns a list of every element matching a predicate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce`: This projects a list into a single value using an operation and an
    accumulator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambdas are shorthand syntax for function expressions. They can be coerced into
    a Single Abstract Method, an interface with only one function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can implement the `Comparator` interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: Within lambdas, the return keyword is implicitly its last expression.
  prefs: []
  type: TYPE_NORMAL
- en: The double colon operator we used earlier is a shortcut to get a reference to
    a function on a class,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: The `collect` method allows us to call a terminal operation. The `Collectors`
    class is a set of terminal operations that will put results into lists, sets,
    or maps, allowing grouping, joining, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the `collect(Collectors.toList())` method will produce a list with every
    element within the stream; in our case, the tweet names.
  prefs: []
  type: TYPE_NORMAL
- en: Material design with WebJars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is already great but it seriously leaves something to be desired
    in terms of aesthetics. You may have heard of material design. It is Google's
    take on flat design.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Materialize ([http://materializecss.com](http://materializecss.com)),
    a great looking responsive CSS and JavaScript library, just like Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design with WebJars](img/image00937.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now get to use WebJars. Add jQuery and Materialize CSS to our dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: The way a WebJar is organized is completely standardized. You will find the
    JS and CSS files of any library in `/webjars/{lib}/{version}/*.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, to add jQuery to our page, the following to a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify our controller so that it gives us a list of all tweet objects
    instead of simple text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s include materialize CSS in our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: The result already looks way better!
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design with WebJars](img/image00938.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last thing we want to do is to put the reusable chunks of our UI into templates.
    To do this, we will use the `thymeleaf-layout-dialect` dependency, which is included
    in the `spring-boot-starter-thymeleaf` dependency of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new file called `default.html` in `src/main/resources/templates/layout`.
    It will contain the code we will repeat from page to page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now modify the `resultPage.html` file so it uses the layout, which
    will simplify its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: The `layout:decorator="layout/default"` will indicate where our layout can be
    found. We can then inject content into the different `layout:fragment` sections
    of the layout. Note that each template are valid HTML files. You can also override
    the title very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a nice little tweet display application, but how are our users supposed
    to figure out that they need to supply a "search" request parameter?
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice if we added a little form to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/image00939.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we need to modify our `TweetController` to add a second view to our
    application. The search page will be available directly at the root of our application
    and the result page when hit enter in the `search` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add another page to the `templates` folder called the `searchPage.html`
    file. It will contain a simple form, which will pass the search term to the result
    page via the `get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: This is very simple HTML and it works perfectly. You can try it now.
  prefs: []
  type: TYPE_NORMAL
- en: What if we wanted to disallow some search result? Let's say we want to display
    an error message if the user types in `struts`.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to achieve this would be to modify the form to post the data. In
    the controller, we can then intercept what is posted and implement this business
    rule accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to change the form in the `searchPage`, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we change the form to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to handle this post on the server. Add this method to the `TweetController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several novelties here:'
  prefs: []
  type: TYPE_NORMAL
- en: In the request mapping annotation, we specify the HTTP method we want to handle,
    that is, `POST`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We inject two attributes directly as method parameters. They are the request
    and `RedirectAttributes`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We retrieve the value posted on the request and pass it on to the next view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of returning the name of the view, we make a redirection to a URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RedirectAttributes` is a Spring model that will be specifically used to
    propagate values in a redirect scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Redirect/Forward** are classical options in the context of a Java web application.
    They both change the view that is displayed on the user''s browser. The difference
    is that `Redirect` will send a 302 header that will trigger navigation inside
    the browser, whereas `Forward` will not cause the URL to change. In Spring MVC,
    you can use either option simply by prefixing your method return strings with
    `redirect:` or `forward:`. In both cases, the string you return will not be resolved
    to a view like we saw earlier, but will instead trigger navigation to a specific
    URL.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is a bit contrived, and we will see smarter form handling
    in the next chapter. If you put a breakpoint in the `postSearch` method, you will
    see that it will be called right after a post in our form.
  prefs: []
  type: TYPE_NORMAL
- en: So what about the error message?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the `postSearch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: If the user's search terms contain "struts", we redirect them to the `searchPage`
    and add a little error message using flash attributes.
  prefs: []
  type: TYPE_NORMAL
- en: These special kinds of attributes live only for the time of a request and will
    disappear when the page is refreshed. This is very useful when we use the `POST-REDIRECT-GET`
    pattern, as we just did.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to display this message in the `searchPage` result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if users try to search for "struts2" tweets, they will get a useful and
    appropriate answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/image00940.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you should have one controller, the `TweetController`,
    handling the search and the untouched generated configuration class, `MasterSpringMvcApplication`,
    in the `src/main/java` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00941.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the `src/main/resources` directory, you should have one default layout and
    two pages using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `application.properties` file, we added the Twitter application credentials
    as well as a property telling Spring not to cache the templates to ease development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00942.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what it takes to make a good MVC architecture.
    We saw some of the inner workings of Spring MVC and used Spring Social Twitter
    with very little configuration. We can now design a beautiful web application,
    thanks to WebJars.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will ask the user to fill in their profile, so that
    we can fetch tweets they might like automatically. This will give you the opportunity
    to learn more about forms, formatting, validation, and internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2. Handling Forms and Complex URL Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application, as beautiful as it looks, would benefit from more informations
    about our users.
  prefs: []
  type: TYPE_NORMAL
- en: We could as them to provide the topics they are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build a profile page. It will feature server- and client-side
    validation and file upload for a profile picture. We will save that information
    in the user session and also ensure that our audience is as large as possible
    by translating the application into several languages. Finally, we will display
    a summary of Twitter activity matching users' tastes.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds good? Let's get started, we have some work to do.
  prefs: []
  type: TYPE_NORMAL
- en: The profile page – a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are the cornerstones of every web application. They have been the main
    way to get user input since the very beginning of the Internet!
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first task here is to create a profile page like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profile page – a form](img/image00943.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It will let the user enter some personal information as well as a list of tastes.
    These tastes will then be fed to our search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new page in `templates/profile/profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: Note the `@{}` syntax that will construct the full path to a resource by prepending
    the server context path (in our case, `localhost:8080`) to its argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also create the associated controller named `ProfileController` in
    the `profile` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can go to `http://localhost:8080` and behold a beautiful form that
    does nothing. That's because we didn't map any action to the post URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a **Data Transfer Object** (**DTO**) in the same package as our
    controller. We will name it `ProfileForm`. Its role will be to map the fields
    of our web form and describe validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: This is a regular **Plain Old Java Object** (**POJO**). Don't forget to generate
    the getters and setters, without which our data binding will not work properly.
    Note that we have a list of tastes that we will not populate right now but a bit
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using Java 8, the birth date of our user will be using the new
    Java date-time API (JSR 310). This API is much better than the old `java.util.Date`
    API because it makes strong distinctions between all the nuances of human dates
    and uses a fluent API and immutable data structures.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, a `LocalDate` class is a simple day without time associated
    to it. It can be differentiated from the `LocalTime` class, which represents a
    time within a day, the `LocalDateTime` class, which represents both, or the `ZonedDateTime`
    class, which uses a time zone.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to learn more about the Java 8 date time API, refer to the Oracle
    tutorial available at [https://docs.oracle.com/javase/tutorial/datetime/TOC.html](https://docs.oracle.com/javase/tutorial/datetime/TOC.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Good advice is to always generate the `toString` method of our data objects
    like this form. It is extremely useful for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'To instruct Spring to bind our field to this DTO, we will have to add some
    metadata in the `profilePage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The `th:object` attribute in the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `th:field` attributes in all the fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first one will bind an object by its type to the controller. The second
    ones will bind the actual fields to our form bean attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `th:object` field to work, we need to add an argument of the type `ProfileForm`
    to our request mapping methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: We also added a mapping for the `POST` method that will be called when the form
    is submitted. At this point, if you try to submit the form with a date (for instance
    10/10/1980), it won't work at all and give you an error 400 and no useful logging
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Logging in Spring Boot**'
  prefs: []
  type: TYPE_NORMAL
- en: With Spring Boot, logging configuration is extremely simple. Just add `logging.level.{package}
    = DEBUG` to the `application.properties` file, where `{package}` is the fully
    qualified name of one of the classes or a package in your application. You can,
    of course, replace debug by any logging level you want. You can also add a classic
    logging configuration. Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to debug our application a little bit to understand what happened.
    Add this line to your file `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: 'The `org.springframework.web` package is the base package of Spring MVC. This
    will allow us to see debug information generated by Spring web. If you submit
    the form again, you will see the following error in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: To understand what's going on, we need to have a look at the `DateTimeFormatterRegistrar`
    class of Spring.
  prefs: []
  type: TYPE_NORMAL
- en: In this class, you will see half a dozen parsers and printers for the JSR 310\.
    They will all fall back on the short style date format, which is either `MM/dd/yy`
    if you live in the US or `dd/MM/yy` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This will instruct Spring Boot to create a `DateFormatter` class when our application
    starts.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do the same thing in our case and create our own formatter since
    writing a year with two digits is a bit akward.
  prefs: []
  type: TYPE_NORMAL
- en: A `Formatter` in Spring is a class that can both `print` and `parse` an object.
    It will be used to decode and print a value from and to a String.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a very simple formatter in the `date` package called `USLocalDateFormatter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: This little class will allow us to parse the date in a more common format (with
    years in four digits) according to the user's locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new class in the `config` package called `WebConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: This class extends the `WebMvcConfigurerAdapter`, which is a very handy class
    to customize the Spring MVC configuration. It provides a lot of common extension
    points that you can access by overriding methods such as the `addFormatters()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This time, submitting our form won't result in any error except if you don't
    type the date with the correct date format.
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, it is impossible for the users to see the format in which they
    are supposed to enter their birth date, so let's add this information to the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ProfileController`, let''s add a `dateFormat` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: The `@ModelAttribute` annotation will allow us to expose a property to the web
    page, exactly like the `model.addAttribute()` method that we saw in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use this information in our page by adding a placeholder to our
    date field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: 'This information will now be displayed to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profile page – a form](img/image00944.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We wouldn't want our user to enter invalid or empty information and that's why
    we will need to add some validation logic to our `ProfileForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we added a few validation constraints. These annotations come
    from the JSR-303 specification, which specifies bean validation. The most popular
    implementation of this specification is `hibernate-validator`, which is included
    in Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we use annotations coming from the `javax.validation.constraints`
    package (defined in the API) and some coming from the `org.hibernate.validator.constraints`
    package (additional constraints). Both work, I encourage you to take a look at
    what is available in those packages in the jars `validation-api` and `hibernate-validator`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also take a look at the constraints available in the hibernate validator
    in the documentation at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to add a few more things for validation to work. First, the controller
    needs to say that it wants a valid model on form submission. Adding the `javax.validation.Valid`
    annotation to the parameter representing the form does just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Note that we do not redirect the user if the form contains any errors. This
    will allow us to display them on the same web page.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of which, we need to add a place on the web page where those errors
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add these lines just at the beginning of the form tag in `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: 'This will iterate through every error found in the form and display them in
    a list. If you try to submit an empty form, you will see a bunch of errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validation](img/image00945.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the `@NotEmpty` check on the tastes will prevent the form from being
    submitted. Indeed, we do not yet have a way to provide them.
  prefs: []
  type: TYPE_NORMAL
- en: Customize validation messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These error messages are not very useful for our user yet. The first thing
    we need to do is to associate them properly to their respective fields. Let''s
    modify `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that we added a `th:errors` tag below each field in the form.
    We also added a `th:errorclass` tag to each field. If the field contains an error,
    the associated css class will be added to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The validation looks much better already:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize validation messages](img/image00946.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we need to do is to customize the error messages to reflect the
    business rules of our application in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Spring Boot takes care of creating a message source bean for us?
    The default location for this message source is in `src/main/resources/messages.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create such a bundle, and add the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can be very handy in development to configure the message source to always
    reload our bundles. Add the following property to `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring.messages.cache-seconds=0`'
  prefs: []
  type: TYPE_NORMAL
- en: 0 means always reload, whereas -1 means never reload.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class responsible for resolving the error messages in Spring is `DefaultMessageCodesResolver`.
    In the case of field validation, this class tries to resolve the following messages
    in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: code + "." + object name + "." + field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code + "." + field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code + "." + field type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the preceding rules, the code part can be two things: an annotation type
    such as `Size` or `Email`, or an exception code such as `typeMismatch`. Remember
    when we got an exception caused by an incorrect date format? The associated error
    code was indeed `typeMismatch`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding messages, we chose to be very specific. A good practice
    is to define default messages as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: Note the placeholders; each validation error has a number of arguments associated
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last way to declare error messages would involve defining the error message
    directly in the validation annotations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: However, the downside of this method is that it is not compatible with internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Custom annotation for validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Java dates, there is an annotation called `@Past`, which ensures that a
    date is from the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t want our user to pretend they are coming from the future, so we need
    to validate the birth date. To do this, we will define our own annotation in the
    `date` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: Simple isn't it? This code will verify that our date is really from the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add it to the `birthDate` field in the profile form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization, frequently abbreviated i18n, is the process of designing
    an application that can be translated into various languages.
  prefs: []
  type: TYPE_NORMAL
- en: This generally involves placing translations in properties bundles with their
    names suffixed with the target locale, for instance, the `messages_en.properties`,
    `messages_en_US.properties`, and `messages_fr.properties` files.
  prefs: []
  type: TYPE_NORMAL
- en: The correct property bundle is resolved by trying the most specific locale first
    and then falling back to the less specific ones.
  prefs: []
  type: TYPE_NORMAL
- en: For U.S English, if you try to get a translation from a bundle named `x`, the
    application would first look in the `x_en_US.properties` file, then the `x_en.properties`
    file, and finally, the `x.properties` file.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will do is translate our error messages into French. To do
    this, we will rename our existing `messages.properties` file to `messages_en.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also create a second bundle named `messages_fr.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Spring Boot uses a fixed `LocaleResolver` interface. The `LocaleResolver`
    is a simple interface with two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring provides a bunch of implementations of this interface, such as `FixedLocaleResolver`.
    This local resolver is very simple; we can configure the application locale via
    a property and cannot change it once it is defined. To configure the locale of
    our application, let''s add the following property to our `application.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: This will add our validation messages in French.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the different `LocaleResolver` interfaces that are bundled
    in Spring MVC, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FixedLocaleResolver`: This fixes the locale defined in configuration. It cannot
    be changed once fixed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CookieLocaleResolver`: This allows the locale to be retrieved and saved in
    a cookie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AcceptHeaderLocaleResolver`: This uses the HTTP header sent by the user''s
    browser to find the locale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SessionLocaleResolver`: This finds and stores the locale in an HTTP session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These implementations cover a number of use cases, but in a more complex application
    one might implement `LocaleResolver` directly to allow more complex logic such
    as fetching the locale from the database and falling back to browser locale, for
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the locale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, the locale is linked to the user. We will save their profile
    in session.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will allow the user to change the language of the site using a small menu.
    That''s why we will use the `SessionLocaleResolver`. Let''s edit `WebConfiguration`
    once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: We declared a `LocaleChangeInterceptor` bean as a Spring MVC interceptor. It
    will intercept any request made to `Controller` and check for the `lang` query
    parameter. For instance, navigating to `http://localhost:8080/profile?lang=fr`
    would cause the locale to change.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Spring MVC Interceptors** can be compared to Servlet filters in a web application.
    Interceptors allow custom preprocessing, skipping the execution of a handler,
    and custom post-processing. Filters are more powerful, for example, they allow
    for exchanging the request and response objects that are handed down the chain.
    Filters are configured in a `web.xml` file, while interceptors are declared as
    beans in the application context.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can change the locale by entering the correct URL ourselves, but it
    would be better to add a navigation bar allowing the user to change the language.
    We will modify the default layout (`templates/layout/default.html`) to add a drop-down
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: This will allow the user to choose between the two supported languages.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the locale](img/image00947.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Translating the application text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to do in order to have a fully bilingual application
    is to translate the titles and labels of our application. To do this, we will
    edit our web pages and use the `th:text` attribute, for instance, in `profilePage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: The `th:text` attribute will replace the contents of a HTML element with an
    expression. Here, we use the `#{}` syntax, which indicates we want to display
    a message coming from a property source like `messages.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the corresponding translations to our English bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to the French ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: Some of the translations are not used yet, but will be used in just a moment.
    Et voilà! The French market is ready for the Twitter search flood.
  prefs: []
  type: TYPE_NORMAL
- en: A list in a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now want the user to enter a list of "tastes", which are, in fact, a list
    of keywords we will use to search tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'A button will be displayed, allowing our user to enter a new keyword and add
    it to a list. Each item of this list will be an editable input text and will be
    removable thanks to a remove button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list in a form](img/image00948.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Handling list data in a form can be a chore with some frameworks. However, with
    Spring MVC and Thymeleaf it is relatively straightforward, when you understand
    the principle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines in the `profilePage.html` file right below the row
    containing the birth date, and just over the submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this snippet is to iterate over the `tastes` variable of our
    `LoginForm`. This can be achieved with the `th:each` attribute, which looks a
    lot like a `for…in` loop in java.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the search result loop we saw earlier, the iteration is stored in
    two variables instead of one. The first one will actually contain each row of
    the data. The `rowStat` variable will contain additional information on the current
    state of the iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The strangest thing in the new piece of code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: 'This is quite a complicated syntax. You could come up with something simpler
    on your own, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: Well, that wouldn't work. The `${rowStat.index}` variable, which represents
    the current index of the iteration loop, needs to be evaluated before the rest
    of the expression. To achieve this, we need to use preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: The expression surrounded by double underscores will be preprocessed, which
    means that it will be processed before the normal processing phase, allowing it
    to be evaluated twice.
  prefs: []
  type: TYPE_NORMAL
- en: There are two new submit buttons on our form now. They all have a name. The
    global submit button we had earlier is called `save`. The two new buttons are
    called `addTaste` and `removeTaste`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the controller side, this will allow us to easily discriminate the different
    actions coming from our form. Let''s add two new actions to our `ProfileController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: We added a `param` parameter to each of our post actions to differentiate them.
    The one we had previously is now bound to the `save` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on a button, its name will automatically be added to the form
    data sent by the browser. Note that we specified a particular value with the remove
    button: `th:value="${rowStat.index}"`. This attribute will indicate which value
    the associated parameter should specifically take. A blank value will be sent
    if this attribute is not present. This means that when we click on the remove
    button, a `removeTaste` parameter will be added to the `POST` request, containing
    the index of the row we would like to remove. We can then get it back into the
    `Controller` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: The only downside with this method is that the whole form data will be sent
    every time we click on the button, even if it is not strictly required. Our form
    is small enough, so a tradeoff is acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! The form is now complete, with the possibility of adding one or more
    tastes.
  prefs: []
  type: TYPE_NORMAL
- en: Client validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a little bonus, client-side validation has become very easy nowadays with
    the HTML5 form validation specification. If your target browsers are Internet
    Explorer 10 and above, adding client-side validation is as easy as specifying
    the correct input type instead of just using text.
  prefs: []
  type: TYPE_NORMAL
- en: By adding the client-side validation, we can prevalidate the form and avoid
    overloading the server with requests that we know are incorrect. More information
    on the client-side validation specification is available at [http://caniuse.com/#search=validation](http://caniuse.com/#search=validation).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can modify our inputs to enable simple client-side validation. The previous
    inputs, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: 'This becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: With this method, your browser will detect when the form is submitted and validate
    each attribute according to its type. The `required` attribute forces the user
    to enter a nonblank value. The `email` type enforces basic e-mail validation rules
    on the corresponding field.
  prefs: []
  type: TYPE_NORMAL
- en: '![Client validation](img/image00949.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Other types of validators also exist. Take a look at [http://www.the-art-of-web.com/html/html5-form-validation](http://www.the-art-of-web.com/html/html5-form-validation).
  prefs: []
  type: TYPE_NORMAL
- en: The downside of this method is that our add taste and remove taste buttons will
    now trigger validation. To fix this, we need to include a script at the bottom
    of the default layout, right after the jQuery declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it would be best to include it only on the profile page. To do this,
    we can add a new fragment section in the `layout/default.html` page, just before
    the end of the body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: This will allow us to include an additional script on each page if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add the following script to our profile page, just before closing
    the body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: Form validation won't be triggered when a `novalidate` attribute is present
    on the form. This little script will dynamically remove the `novalidate` attribute
    if the action of the form is named `save` if the name of the input is different,
    the `novalidate` attribute will always be added. Validation will thus be triggered
    only by the save button.
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving on to the next chapter, let's check whether everything is in the
    right place.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Java sources, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A new controller, the `ProfileController`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two new classes related to date: a date formatter and an annotation to validate
    `LocalDate`s'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new `WebConfiguration` folder to customize Spring MVC's configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The check point](img/image00950.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the resources, you should have a new template inside the profile directory
    and two new bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00951.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to make a complete form. We created a model
    using Java 8 dates, and you learned how to format information coming from the
    user and display it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: We ensured that the form was filled with valid information, with validator annotations,
    including our own. Also, we prevented obviously incorrect information from even
    hitting the server by including some client-side validation very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we even translated the whole application into English and French, date
    formats included!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a space where the users will be able to upload
    their pictures and learn more about error handling in Spring MVC applications.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3. File Upload and Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will enable our user to upload a profile picture. We will
    also see how to handle errors in Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now make it possible for our user to upload a profile picture. This
    will be available from the profile page later on, but for now, we will simplify
    things and create a new page in the templates directory under `profile/uploadPage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: 'Not much to see besides the `enctype` attribute on the form. The file will
    be sent by the `POST` method to the `upload` URL. We will now create the corresponding
    controller right beside `ProfileController` in the `profile` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: The first thing this code will do is create a temporary file in the `pictures`
    directory, which can be found inside the project's root folder; so, ensure that
    it exists. In Java, a temporary file is just a commodity to obtain a unique file
    identifier on the filesystem. It is up to the user to optionally delete it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a pictures directory at the root of the project and add an empty file
    called `.gitkeep` to ensure that you can commit it in Git.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Empty directories in Git**'
  prefs: []
  type: TYPE_NORMAL
- en: Git is file-based and it is not possible to commit an empty directory. A common
    workaround is to commit an empty file, such as `.gitkeep`, in a directory to force
    Git to keep it under version control.
  prefs: []
  type: TYPE_NORMAL
- en: The file uploaded by the user will be injected as a `MultipartFile` interface
    in our controller. This interface provides several methods to get the name of
    the file, its size, and its contents.
  prefs: []
  type: TYPE_NORMAL
- en: The method that particularly interests us here is `getInputStream()`. We will
    indeed copy this stream to a `fileOutputStream` method, thanks to the `IOUtils.copy`
    method. The code to write an input stream to an output stream is pretty boring,
    so it's handy to have the Apache Utils in the classpath (it is part of the `tomcat-embedded-core.jar`
    file).
  prefs: []
  type: TYPE_NORMAL
- en: 'We make heavy use of the pretty cool Spring and Java 7 NIO features:'
  prefs: []
  type: TYPE_NORMAL
- en: The resource class of string is a utility class that represents an abstraction
    of resources that can be found in different ways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `try…with` block will automatically close our streams even in the case of
    an exception, removing the boilerplate of writing a `finally` block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the preceding code, any file uploaded by the user will be copied into the
    `pictures` directory.
  prefs: []
  type: TYPE_NORMAL
- en: There are a handful of properties available in Spring Boot to customize file
    upload. Take a look at the `MultipartProperties` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`multipart.maxFileSize`: This defines the maximum file size allowed for the
    uploaded files. Trying to upload a bigger one will result in a `MultipartException`
    class. The default value is `1Mb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multipart.maxRequestSize`: This defines the maximum size of the multipart
    request. The default value is `10Mb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The defaults are good enough for our application. After a few uploads, our
    picture directory will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading a file](img/image00952.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait! Somebody uploaded a ZIP file! I cannot believe it. We better add some
    checks in our controller to ensure that the uploaded files are real images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: Pretty easy! The `getContentType()` method returns the **Multipurpose Internet
    Mail Extensions** (**MIME**) type of the file. It will be `image/png`, `image/jpg`,
    and so on. So we just have to check if the MIME type starts with "image".
  prefs: []
  type: TYPE_NORMAL
- en: 'We added an error message to the form so we should add something in our web
    page to display it. Place the following code just under the title in the `uploadPage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: 'The next time you try to upload a ZIP file, you will get an error! This is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading a file](img/image00953.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Writing an image to the response
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The uploaded images are not served from the static directories. We will need
    to take special measures to display them in our web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following lines to our upload page, just above the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: 'This will try and get the image from our controller. Let''s add the corresponding
    method to the `PictureUploadController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: This code will write an image found in the `src/main/resources/images/anonymous.png`
    directory directly to the response! How exciting!
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to our page again, we will see the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing an image to the response](img/image00954.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I found the anonymous user image on iconmonstr ([http://iconmonstr.com/user-icon](http://iconmonstr.com/user-icon))
    and downloaded it as a 128 x 128 PNG file.
  prefs: []
  type: TYPE_NORMAL
- en: Managing upload properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good thing to do at this point is to allow the configuration of the upload
    directory and the path to the anonymous user image through the `application.properties`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `PicturesUploadProperties` class inside a newly created `config`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: In this class, we make use of the Spring Boot `ConfigurationProperties`. This
    will tell Spring Boot to automatically map properties found in the classpath (by
    default, in the `application.properties` file) in a type-safe fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we defined setters taking 'String's as arguments but are at liberty
    to let the getters return any type is the most useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to add the `PicturesUploadProperties` class to our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add the properties'' values inside the `application.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: Because we use Spring's `DefaultResourceLoader` class, we can use prefixes such
    as `file:` or `classpath:` to specify where our resources can be found.
  prefs: []
  type: TYPE_NORMAL
- en: This would be the equivalent of creating a `FileSystemResource` class or a `ClassPathResource`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This approach also has the advantage of documenting the code. We can easily
    see that the picture directory will be found in the application root, whereas
    the anonymous picture will be found in the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it. We can now use our properties inside our controller. The following
    are the relevant parts of the `PictureUploadController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: At this point, if you launch your application again, you will see that the result
    hasn't changed. The anonymous picture is still displayed and the pictures uploaded
    by our users still end up in the `pictures` directory at the project root.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the uploaded picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would be nice to display the user''s picture now, wouldn''t it? To do this,
    we will add a model attribute to our `PictureUploadController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now inject it to retrieve its value when we serve the uploaded picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: The `@ModelAttribute` annotation is a handy way to create model attributes with
    an annotated method. They can then be injected with the same annotation into controller
    methods. With this code, a `picturePath` parameter will be available in the model
    as long as we are not redirected to another page. Its default value is the anonymous
    picture we defined in our properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to update this value when the file is uploaded. Update the `onUpload`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: By injecting the model, we can update the `picturePath` parameter after the
    upload is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the problem is that our two methods, `onUpload` and `getUploadedPicture`,
    will occur in different requests. Unfortunately, the model attributes will be
    reset between each.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s why we will define the `picturePath` parameter as a session attribute.
    We can do this by adding another annotation to our controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: 'Phew! That''s a lot of annotations just to handle a simple session attribute.
    You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the uploaded picture](img/image00955.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This approach makes code composition really easy. Plus, we didn't use `HttpServletRequest`
    or `HttpSession` directly. Moreover, our object can be typed easily.
  prefs: []
  type: TYPE_NORMAL
- en: Handling file upload errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It must have certainly occurred to my attentive readers that our code is susceptible
    to throw two kinds of exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IOException`: This error is thrown if something bad happens while writing
    the file to disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultipartException`: This error is thrown if an error occurs while uploading
    the file. For instance, when the maximum file size is exceeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will give us a good opportunity to look at two ways of handling exceptions
    in Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `@ExceptionHandler` annotation locally in a controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a global exception handler defined at the Servlet container level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s handle `IOException` with the `@ExceptionHandler` annotation inside
    our `PictureUploadController` class by adding the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple yet powerful approach. This method will be called every time
    an `IOException` is thrown in our controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test the exception handler, since making the Java IO code throw
    an exception can be tricky, just replace the `onUpload` method body during the
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: 'After this change, if we try to upload a picture, we will see the error message
    of this exception displayed on the upload page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling file upload errors](img/image00956.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will handle the `MultipartException`. This needs to happen at the Servlet
    container level (that is, at the Tomcat level), as this exception is not thrown
    directly by our controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to add a new `EmbeddedServletContainerCustomizer` bean to our
    configuration. Add this method to the `WebConfiguration` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a little verbose. Note that `EmbeddedServletContainerCustomizer` is
    an interface that contains a single method; it can therefore be replaced by a
    lambda expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s just write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: This code creates a new error page, which will be called when a `MultipartException`
    happens. It can also be mapped to an HTTP status. The `EmbeddedServletContainerCustomizer`
    interface has many other features that will allow the customization of the Servlet
    container in which our application runs. Visit [http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-customizing-embedded-containers)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to handle this `uploadError` URL in our `PictureUploadController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: 'The error pages defined in a Servlet environment contain a number of interesting
    attributes that will help debug the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.status_code` | This is the HTTP status code of the error.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.exception_type` | This is the exception class. |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.message` | This is the message of the exception thrown.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.request_uri` | This is the URI on which the exception
    occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.exception` | This is the actual exception. |'
  prefs: []
  type: TYPE_TB
- en: '| `javax.servlet.error.servlet_name` | This is the name of the Servlet that
    caught the exception. |'
  prefs: []
  type: TYPE_TB
- en: All these attributes are conveniently accessible on the `WebUtils` class of
    Spring Web.
  prefs: []
  type: TYPE_NORMAL
- en: If someone tries to upload too big a file, they will get a very clear error
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now test that the error is handled correctly by uploading a really
    big file (> 1Mb) or setting the `multipart.maxFileSize` property to a lower value:
    1kb for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling file upload errors](img/image00957.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Translating the error messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is really good for a developer to see the exceptions thrown by the application.
    However, for our users, they bear little value. We will therefore translate them.
    In order to do that, we have to inject our application''s `MessageSource` class
    into our controller''s constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can retrieve messages from our messages bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the English messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the French ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: Placing the profile in a session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we want is the profile to be stored in a session so that it does
    not get reset every time we go on the profile page. This can apparently prove
    tiresome to some users and we have to address it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**HTTP sessions** are a way to store information between requests. HTTP is
    a stateless protocol, which means that there is no way to relate two requests
    coming from the same user. What most Servlet containers do is they associate a
    cookie called `JSESSIONID` to each user. This cookie will be transmitted in the
    request header and will allow you to store arbitrary objects in a map, an abstraction
    called `HttpSession`. Such a session will typically end when the user closes or
    switches web browsers or after a predefined period of inactivity.'
  prefs: []
  type: TYPE_NORMAL
- en: We just saw a method to put objects in a session using the `@SessionAttributes`
    annotation. This works well within a controller but makes the data difficult to
    share when spread across multiple controllers. We have to rely on a string to
    resolve the attribute from its name, which is hard to refactor. For the same reason,
    we don't want to manipulate the `HttpSession` directly. Another argument that
    will discourage the direct usage of the session is how difficult it is to unit
    test the controller that depends on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another popular approach when it comes to saving things in a session
    with Spring: annotate a bean with `@Scope("session")`.'
  prefs: []
  type: TYPE_NORMAL
- en: You will then be able to inject your session bean in your controllers and other
    Spring components to either set or retrieve values from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `UserProfileSession` class in the `profile` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: 'We have conveniently provided a way to convert from and to a `ProfileForm`
    object. This will help us store and retrieve the form data from our `ProfileController`
    constructor. We need to inject our `UserProfileSession` variable in the controller''s
    constructor and store it as a field. We also need to expose the `ProfileForm`
    as a model attribute, which will remove the need to inject it in the `displayProfile`
    method. Finally, we can save the profile once it has been validated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: That's all it takes to save data in a session with Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you complete the profile form and refresh the page, the data will be
    persisted between requests.
  prefs: []
  type: TYPE_NORMAL
- en: Just before moving on to the next chapter, I want to detail a couple of concepts
    we just used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is the injection by the constructor. The `ProfileController` constructor
    is annotated with `@Autowired`, which means Spring will resolve the constructor
    arguments from the application context before instantiating the bean. The alternative,
    which is a little less verbose, would have been to use field injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: Constructor injection is arguably better because it makes the unit testing of
    our controller easier if we were to move away from the `spring-test` framework
    and it makes the dependencies of our bean somewhat more explicit.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed discussion on field injection and constructor injection, refer
    to the excellent blog post by Oliver Gierke at [http://olivergierke.de/2013/11/why-field-injection-is-evil/](http://olivergierke.de/2013/11/why-field-injection-is-evil/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing that might need clarification is the `proxyMode` parameter on
    the `Scope` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three `proxyMode` parameters available with Spring, if we don''t
    count the default one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TARGET_CLASS`: This uses a CGI proxy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INTERFACES`: This creates a JDK proxy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO`: This does not create any proxy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage of a proxy typically comes into play when you inject something
    into a long-lived component such as a singleton. Because injection only happens
    once, when the bean is created, subsequent calls to the injected bean might not
    reflect its actual state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, a session bean''s actual state is stored in the session and not
    directly on the bean. This explains why Spring has to create a proxy: it needs
    to intercept calls to our bean methods and listen for its mutations. This way,
    the state of the bean can be transparently stored and retrieved from the underlying
    HTTP session.'
  prefs: []
  type: TYPE_NORMAL
- en: For a session bean, we are forced to use a proxy mode. The CGI proxy will instrument
    your bytecode and work on any class, whereas the JDK approach might be a bit more
    lightweight but requires you to implement an interface.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we made the `UserProfileSession` bean implement the `Serializable` interface.
    This is not strictly required because the HTTP sessions can store arbitrary objects
    in memory, but making objects that end up in the session serializable really is
    a good practice.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, we might change the way the session is persisted. In fact, we will store
    the session in a Redis database in [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing
    Your Requests"), *Optimizing Your Requests*, where Redis has to work with `Serializable`
    objects. It's always best to think of the session of a generic data store. We
    have to provide a way to write and read objects from this storage system.
  prefs: []
  type: TYPE_NORMAL
- en: For serialization to work properly on our bean, we also need every one of its
    field to be serializable. In our case, strings and dates are serializable so we
    are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Custom error pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot lets you define your own error view instead of the Whitelabel error
    page that we saw earlier. It must have the name `error` and its purpose is to
    handle all exceptions. The default `BasicErrorController` class will expose a
    lot of useful model attributes that you can display on this page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a custom error page in `src/main/resources/templates`. Let''s
    call it `error.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we navigate to a URL that is not handled by our application, we see
    our custom error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom error pages](img/image00958.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A more advanced option to handle errors is to define your own implementation
    of the `ErrorController` class, a controller in charge of handling all the exceptions
    at a global level. Take a look at the `ErrorMvcAutoConfiguration` class and the
    `BasicErrorController` class, which is the default implementation.
  prefs: []
  type: TYPE_NORMAL
- en: URL mapping with matrix variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now aware of what our user is interested in. It would be a good idea
    to improve our Tweet controller so that it allows searching from a list of keywords.
  prefs: []
  type: TYPE_NORMAL
- en: 'One interesting way to pass key-value pairs in a URL is to use a matrix variable.
    It is pretty similar to request parameters. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the preceding parameter, matrix variables understand this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: 'They also allow each parameter to be a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: 'A matrix variable can be mapped to different object types inside a controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Map<String, List<?>>`: This handles multiple variables and multiple values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Map<String, ?>`: This handles a case in which each variable has only one value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`List<?>`: This is used if we are interested in a single variable whose name
    can be configured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we want to handle something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter, `popular`, is the result type known by the Twitter search
    API. It can take the following values: `mixed`, `recent`, or `popular`.'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of our URL is a list of keywords. We will therefore map them to a simple
    `List<String>` object.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Spring MVC removes every character following a semicolon in a URL.
    The first thing we need to do to enable matrix variables in our application is
    to turn off this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following code to our `WebConfiguration` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a new controller in the `search` package, which we will call
    `SearchController`. Its role is to handle the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are able reuse the existing result page to display the tweets.
    We also want to delegate the search to another class called `SearchService`. We
    will create this service in the same package as `SearchController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to implement the `search()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The search operation accessible on `twitter.searchOperations().search(params)`
    takes `searchParameters` as an argument for an advanced search. This object allows
    us to conduct a search on a dozen of criteria. We are interested in the `query`,
    `resultType`, and `count` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a `ResultType` constructor with the `searchType` path
    variable. The `ResultType` is an enum, so we can iterate over its different values
    and find one that matches the input, ignoring the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create a `SearchParameters` constructor with the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, creating a list of the `SearchParameters` constructor is as easy as conducting
    a map operation (taking a list of keywords and returning a `SearchParameters`
    constructor for each one):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to fetch the tweets for each `SearchParameters` constructor. You
    might think of something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you think about it, this will return a list of tweets. What we
    want is to flatten all the tweets to get them as a simple list. It turns out that
    calling `map` and then flattening the result is an operation known as `flatMap`.
    So we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax of `flatMap` function, that takes a stream as a parameter, is a
    bit difficult to understand at first. Let me show you the entire code of the `SearchService`
    class so we can take a step back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we navigate to `http://localhost:8080/search/mixed;keywords=scala,java`,
    we get the expected result. A search for the Scala keyword and then for Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '![URL mapping with matrix variables](img/image00959.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Putting it together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that everything works separately, it''s time to assemble everything. We
    will do this in three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the upload form to the profile page and remove the old upload page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the submit button on the profile page to trigger the taste search directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the home page of our application. It should display search results matching
    our users' tastes right away. If they are unavailable, go to the profile page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I encourage you to try to do it on your own. You will run into very manageable
    problems along the way but you should know enough to resolve them on your own.
    I believe in you.
  prefs: []
  type: TYPE_NORMAL
- en: OK, now that you have done the work (you have, haven't you?), let's take a look
    at my solution.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to remove the old `uploadPage` title. Don't look back, just
    do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, put these lines just below the `profilePage` title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: It is very similar to the content of the late `uploadPage`. We just removed
    the title and changed the label of the submit button. Add the corresponding translation
    to the bundles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: 'In French:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: We also changed the name of the submit button to `upload`. That will help us
    identify this action on the controller side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we try to upload our picture, it will redirect us to the old upload
    page. We need to fix this in the `onUpload` method of our `PictureUploadController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: Note that we changed the URL that handles the post. It is now `/profile` instead
    of `/upload`. Form handling is much simpler when the `GET` and `POST` requests
    have the same URL, and will save us a lot of trouble especially when dealing with
    exceptions. This way, we will not have to redirect the user after an error.
  prefs: []
  type: TYPE_NORMAL
- en: We also removed the model attribute, `picturePath`. Since we now have a bean
    representing our user in a session, `UserProfileSession`, we decided to add it
    there. We added a `picturePath` attribute to the `UserProfileSession` class and
    the associated getters and setters.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to inject the `UserProfileSession` class and make it available
    as a field in our `PictureUploadController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that all the properties of our session bean must be serializable,
    unlike resources. So we need to store it differently. The URL class seems to be
    a good fit. It is serializable and it is easy to create a resource from a URL
    with the `UrlResource` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: The last thing that I had to do is to make the `profileForm` available as a
    model attribute after an error. This is because the `profilePage` requires it
    when it is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here is the final version of the `PictureUploadController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now we can go to the profile page and upload our picture as well as provide
    personal information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting it together](img/image00960.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s redirect our user to its search after the profile is completed.
    For this, we need to modify the `saveProfile` method in the `ProfileController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are able to search for tweets from our profile, we don't need the
    `searchPage` or `TweetController` we previously made. Simply delete the `searchPage.html`
    page and the `TweetController`.
  prefs: []
  type: TYPE_NORMAL
- en: To finish, we can modify our home page so that it redirects us to a search matching
    our tastes if we have already completed our profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new controller in the controller package. It is responsible
    for redirecting a user arriving at the root of our website either to their profile
    if it''s incomplete or to the `resultPage` if their tastes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added two controllers, the `PictureUploadController`, which
    is in charge of writing uploaded files to the disk and handling upload errors,
    and the `SearchController` that can search tweets from a list of keywords with
    matrix parameters.
  prefs: []
  type: TYPE_NORMAL
- en: This controller then delegates the search to a new service, `SearchService`.
  prefs: []
  type: TYPE_NORMAL
- en: We deleted the old `TweetController`.
  prefs: []
  type: TYPE_NORMAL
- en: We created a session bean, `UserProfileSession`, to store the information about
    our user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added two things to `WebConfiguration`. We added the error pages
    for our Servlet container and support for matrix variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00961.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the resources side, we added a picture representing an anonymous user and
    a static page to handle errors. We added the file upload to `profilePage` and
    got rid of the old `searchPage`.
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00962.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed file upload and error handling. Uploading a file
    is not really complicated. However, a big design decision is what to do with the
    uploaded files. We could have stored the images it in a database, but instead
    we chose to write it to the disk and save the location of each user's picture
    in their session.
  prefs: []
  type: TYPE_NORMAL
- en: We saw typical ways to handle exceptions at the controller level and at the
    servlet container level. For additional resources on Spring MVC error handling,
    you can refer to the blog post at [https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc).
  prefs: []
  type: TYPE_NORMAL
- en: Our application is looking pretty good already and yet the amount of code we
    had to write is very reasonable.
  prefs: []
  type: TYPE_NORMAL
- en: Stay tuned for the next chapter where we will see that Spring MVC is also a
    powerful framework to build REST applications.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4. Crafting a RESTful Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will have a look at the main principles of a RESTful architecture.
    Then, with the help of very handy tools, we will design a friendly API, leveraging
    Jackson's capabilities to serialize our model in JSON.
  prefs: []
  type: TYPE_NORMAL
- en: We will document our application with the appropriate error codes and HTTP verbs
    and automatically generate a neat frontend for our application by using Swagger
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will look at the other forms of serialization and learn more about
    the content negotiation mechanism of Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: What is REST?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**REST** (**Representational State Transfer**) is an architectural style that
    defines best practices for creating scalable web services leveraging the capabilities
    of the HTTP protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A RESTful web service should naturally exhibit the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client-server**: The UI is separated from data storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stateless**: Each request contains enough information for the server to operate
    without maintaining any state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cacheable**: The server''s responses contain enough information to allow
    the clients to make sensible decisions about data storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uniform interface**: URIs uniquely identify resources and hyperlinks allow
    the API to be discovered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layered**: Each resource of the API provides a sensible level of detail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage of such an architecture is that it is simple to maintain and easy
    to discover. It also scales well because there is no need to maintain a persistent
    connection between the server and the client, which eliminates the need for load
    balancing or sticky sessions. Finally, the service is more efficient because the
    information is neatly laid out and easy to cache.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can design better APIs incrementally by using Richardson's
    maturity model.
  prefs: []
  type: TYPE_NORMAL
- en: Richardson's maturity model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Leonard Richardson is famous for having defined four levels, ranked from 0 to
    3, that describe the level of "RESTfulness" of a web API. Each level requires
    additional work and investment in the API but also provides additional benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Level 0 – HTTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Level 0 is really easy to reach; you just have to make your resource available
    on a network through the HTTP protocol. You can use any data representation you
    find best suited for your use case (XML, JSON, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Level 1 – Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most people think of resources when they hear the term REST. A resource is
    a unique identifier for an element of our model, a user or a tweet, for instance.
    With HTTP, a resource is obviously associated with a unified resource identifier
    URI, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/users` contains the list of all our users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/user/42` contains a specific user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/user/42/tweets` contains the list of all the tweets associated to this particular
    user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe your API could allow access to a particular tweet related to a user with
    `/user/42/tweet/3` or maybe each tweet is uniquely identified, in which case you
    might prefer `/tweet/3`.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this level is to deal with the complexity of an application by exposing
    multiple specialized resources.
  prefs: []
  type: TYPE_NORMAL
- en: There is no rule regarding the type of response that your server can return.
    You might want to include only scarce information when you list all the resources
    with `/users` and give more details when a specific resource is requested. Some
    APIs even let you list the fields you are interested in before serving them to
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'It really is up to you to define the form of your API, keeping one simple rule
    in mind: the principle of least astonishment. Give your users what they expect
    and your API will already be in good shape.'
  prefs: []
  type: TYPE_NORMAL
- en: Level 2 – HTTP verbs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This level is about using the HTTP verbs to identify possible actions on the
    resources. This is a very good way to describe what can be done with your API
    since the HTTP verbs are a well-known standard among developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main verbs are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: This reads data on a particular URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD`: This does the same as `GET` without the response body. This is useful
    for getting metadata on a resource (cache information and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: This deletes a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: This updates or creates a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: This updates or creates a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: This partially updates a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPTIONS`: This returns the list of methods that the server supports on a particular
    resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most applications that allow **Create Read Update Delete** (**CRUD**) operations
    get by with only three verbs: `GET`, `DELETE`, and `POST`. The more verbs you
    implement, the richer and more semantic your API becomes. It helps third parties
    to interact with your service by allowing them to type a few commands and see
    what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: The `OPTIONS` and `HEAD` verbs are rarely seen because they work on the metadata
    level and are typically not vital to any application.
  prefs: []
  type: TYPE_NORMAL
- en: At first sight, the `PUT` and `POST` verbs appear to do the same thing. The
    main difference is that the `PUT` verb is said to be idempotent, which means that
    sending the same request multiple times should result in the same server state.
    The implication of that rule is essentially that the `PUT` verb should operate
    on a given URI and contain enough information for the request to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, a client can use `PUT` data on `/user/42`, and the result will
    be either an update or a creation, depending on whether the entity existed prior
    to the request.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, `POST` should be used when you don't exactly know what URI
    you should write to. You could send `POST` to `/users` without specifying an ID
    in the request and expect the user to be created. You could also send `POST` to
    the same `/users` resource, this time specifying a user ID inside the request
    entity and expect the server to update the corresponding user.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, both of these options work. One frequent use case is to use
    `POST` for creation (because, most of the time, the server should be in charge
    of the IDs) and to use `PUT` to update a resource whose ID is already known.
  prefs: []
  type: TYPE_NORMAL
- en: The server might also allow a resource to be modified partially (without the
    client sending the full contents of the resource). It should respond to the `PATCH`
    method in that case.
  prefs: []
  type: TYPE_NORMAL
- en: At this level, I also encourage you to use meaningful HTTP codes when providing
    responses. We will see the most common codes in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Level 3 – Hypermedia controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hypermedia controls are also known as **Hypertext As The Engine Of Application
    State** (**HATEOAS**). Behind this barbarous acronym lies the most important property
    of a RESTful service: making it discoverable through the use of hypertext links.
    This is essentially the server telling the client what its options are, using
    the response headers or the response entity.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, after the creation of a resource with `PUT`, the server should
    return a response with the code `201 CREATED` and send a `Location` header containing
    the URI of the created resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no standard that defines how the link to the other parts of the API
    should look. Spring Data REST, a Spring project that allows you to create a RESTful
    backend with minimal configuration, typically outputs this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go to `/users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: This gives you a good idea of what you can do with the API, doesn't it?
  prefs: []
  type: TYPE_NORMAL
- en: API versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If third-party clients use your API, you could consider versioning your API
    to avoid breaking changes when you update your application.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning an API is often a matter of making a set of stable resources available
    under subdomains. For instance, GitLab maintains three versions of its API. They
    are accessible under `https://example/api/v3`, and so on. Like a lot of architectural
    decisions in software, versioning is a tradeoff.
  prefs: []
  type: TYPE_NORMAL
- en: It will require more work to design such an API and identify breaking changes
    in the API. Often, the addition of new fields will not be as problematic as removing
    or transforming the API entity results or requests.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, you will be in charge of both the API and the client, thereby
    removing the need for such sophistication.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'See this blog post for a more in-depth discussion about API versioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html](http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Useful HTTP codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important aspect of a good RESTful API is to use HTTP codes in a sensible
    way. The HTTP specification defines a lot of standard codes. They should cover
    99 percent of what a good API needs to communicate to its users. The following
    list contains the most important codes, the ones every API should use and every
    developer should know:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning | Usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **2xx - Success** | **These codes are used when everything goes well.** |
      |'
  prefs: []
  type: TYPE_TB
- en: '| `200` | Everything is okay. | The request succeeded. |'
  prefs: []
  type: TYPE_TB
- en: '| `201` | A resource has been created. | The successful creation of a resource.
    The response should include a list of locations associated with the creation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `204` | There is no content to return. | The server has successfully handled
    the request but there is no content to return. |'
  prefs: []
  type: TYPE_TB
- en: '| **3xx - Redirection** | **These codes are used when further action is needed
    on the client to fulfill the request**. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `301` | Moved permanently | The resource has a changed URI and its new location
    is indicated in the `Location` header. |'
  prefs: []
  type: TYPE_TB
- en: '| `304` | The resource has not been modified. | The resource has not changed
    since the last time. This response must include the date, ETag, and cache information.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **4xx - Client error** | **The request was not successfully performed because
    of a mistake made by the client**. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `400` | Bad request | The data sent by the client could not be understood.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `403` | Forbidden | The request was understood but not allowed. This can
    be enriched with information describing the error. |'
  prefs: []
  type: TYPE_TB
- en: '| `404` | Not found | Nothing matches this URI. This can be used instead of
    403 if information about security shouldn''t be disclosed. |'
  prefs: []
  type: TYPE_TB
- en: '| `409` | Conflict | The request conflicts with another modification. The response
    should include information on how to resolve the conflict. |'
  prefs: []
  type: TYPE_TB
- en: '| **5xx - Server error** | **An error occurred on the server side**. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `500` | An internal server error | The server unexpectedly failed to process
    the request. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a more detailed list, see [http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html).
  prefs: []
  type: TYPE_NORMAL
- en: Client is the king
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will allow third-party clients to retrieve the search results via a REST
    API. These results will be available either in JSON or XML.
  prefs: []
  type: TYPE_NORMAL
- en: We want to handle requests of the `/api/search/mixed;keywords=springFramework`
    form. This is really similar to the search form we already made, except that the
    request path begins with `api`. Every URI found in this namespace should return
    binary results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new `SearchApiController` class in the `search.api` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: 'This is quite similar to our previous controller, with three subtle differences:'
  prefs: []
  type: TYPE_NORMAL
- en: The controller class is annotated with a `@RequestMapping` annotation. This
    will be our base address and will prefix every other mapping declared in this
    controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We no longer redirect to a view but return a plain object in the search method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller is annotated with `@RestController` instead of `@Controller`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RestController` is a shortcut to declare controllers that will return each
    response as if it were annotated with the `@ResponseBody` annotation. It tells
    Spring to serialize the return type to the appropriate format, which is JSON by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: When working with a REST API, a good practice is to always specify the method
    you will respond to. It's rather unlikely that a request can be handled the same
    way for a `GET` or a `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to `http://localhost:8080/api/search/mixed;keywords=springFramework`,
    you should get a really large result, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Client is the king](img/image00963.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Indeed, Spring handled the serialization of the whole `Tweet` class' attributes
    automatically, using Jackson.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With your browser, you will only be able to perform `GET` requests on a specific
    API. The good tools will make your developments much simpler. There are lots of
    tools to test a RESTful API. I will just list the one I use and love.
  prefs: []
  type: TYPE_NORMAL
- en: A JSON formatting extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, you will just test the `GET` method and your first reflex will be to
    copy the address into your browser to check the result. In that case, you have
    the possibility to get more than plain text with extensions such as JSON Formatter
    for Chrome or JSONView for Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: A RESTful client in your browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The browser is the natural tool for dealing with HTTP requests. However, using
    the address bar will rarely allow you to test your API in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Postman is an extension for Chrome, and RESTClient is its Firefox counterpart.
    They both have similar features, such as creating and sharing collections of queries,
    modification of the headers, and handling authentication (basic, digest, and OAuth).
    At the time of writing, only RESTClient handles OAuth2.
  prefs: []
  type: TYPE_NORMAL
- en: httpie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**httpie** is a command line utility à la curl but oriented towards REST querying.
    It allows you to type commands such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a lot friendlier than this ugly version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the JSON output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using our tools we are able to easily see the request generated by our server.
    It is huge. By default, Jackson, the JSON serialization library used by Spring
    Boot, will serialize everything that is accessible with a getter method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like something lighter, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: The easiest way to customize which fields will be serialized is by adding annotations
    to our beans. You can either use the `@JsonIgnoreProperties` annotation at the
    class level to ignore a set of properties or add `@JsonIgnore` on the getters
    of the properties you wish to ignore.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the `Tweet` class is not one of our own. It is part of Spring Social
    Twitter, and we do not have the ability to annotate it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the model classes directly for serialization is rarely a good option.
    It would tie your model to your serialization library, which should remain an
    implementation detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'When dealing with unmodifiable code, Jackson provides two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new class dedicated to serialization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mixins, which are simple classes that will be linked to your model. These
    will be declared in your code and can be annotated with any Jackson annotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we only need to perform some simple transformation on the fields of our
    model (a lot of hiding and a little renaming), we could opt for the mixins.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good, non-invasive way to rename and exclude fields on the fly with a
    simple class or interface.
  prefs: []
  type: TYPE_NORMAL
- en: Another option to specify subsets of fields used in different parts of the application
    is to annotate them with the `@JsonView` annotation. This won't be covered in
    this chapter, but I encourage you to check out this excellent blog post [https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring](https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring).
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to be in control of the output of our APIs, so let''s just create a
    new class called `LightTweet` that can be constructed from a tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to make our `SearchService` class return the `LightTweets` class
    instead of tweets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: This will impact the return type of the `SearchApiController` class as well
    as the tweets model attribute in the `SearchController` class. Make the necessary
    modification in those two classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to change the code of the `resultPage.html` file because some
    properties changed (we no longer have a nested `user` property):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re almost done. If you restart your application and go to `http://localhost:8080/api/search/mixed;keywords=springFramework`,
    you''ll see that the date format is not the one we expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the JSON output](img/image00964.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s because Jackson doesn''t have built-in support for JSR-310 dates. Luckily,
    this is easy to fix. Simply add the following library to the dependencies in the
    `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: This indeed changes the date format, but it now outputs an array instead of
    a formatted date.
  prefs: []
  type: TYPE_NORMAL
- en: To change that, we need to understand what the library did. It includes a new
    Jackson module called JSR-310 Module. A Jackson module is an extension point to
    customize serialization and deserialization. This one will automatically be registered
    by Spring Boot at startup in the `JacksonAutoConfiguration` class, which will
    create a default Jackson `ObjectMapper` method with support for well-known modules.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the former module adds a bunch of serializers and deserializers
    for all the new classes defined in JSR-310\. This will try to convert every date
    to an ISO format, whenever possible. See [https://github.com/FasterXML/jackson-datatype-jsr310](https://github.com/FasterXML/jackson-datatype-jsr310).
  prefs: []
  type: TYPE_NORMAL
- en: If we take a closer look at `LocalDateTimeSerializer`, for instance, we can
    see that it actually has two modes and can switch between the two with a serialization
    feature called `WRITE_DATES_AS_TIMESTAMPS`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define this property, we need to customize Spring''s default object mapper.
    As we can gather from looking at the auto configuration, Spring MVC provides a
    utility class to create the `ObjectMapper` method that we can use. Add the following
    bean to your `WebConfiguration` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we are done and the dates are properly formatted, as you can see
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the JSON output](img/image00965.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A user management API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our search API is quite good, but let''s do something more interesting. Like
    a lot of web applications, we will need a user management module to identify our
    users. For that, we will create a new `user` package. In this package, we will
    add a model class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we do not want to use a database just yet, we will create a `UserRepository`
    class in the same package, backed by a simple `Map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `user.api` package, we will create a very naive controller
    implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: We implemented all the classic CRUD operations with a RESTful repository by
    using the user's e-mail address as a unique identifier.
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, you will quickly face problems as Spring strips contents found
    after a dot. The solution is very similar to what we use to support semicolons
    in URLs in the URL mapping with matrix variables section in [Chapter 3](part0147.xhtml#aid-4C62M2
    "Chapter 3. File Upload and Error Handling"), *File Upload and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `useRegisteredSuffixPatternMatch` property that is set to false in
    the `configurePathMatch()` method that we have already defined in the `WebConfiguration`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've got our API, we can start interacting with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few sample commands with httpie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: This is good but not great. Status codes are not yet handled. We will need more
    RESTfulness to climb up the Richardson ladder.
  prefs: []
  type: TYPE_NORMAL
- en: Status codes and exception handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we want to do is to correctly handle response statuses. By
    default, Spring automatically deals with some statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`500 Server Error`: This indicates that an exception occurred while handling
    the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`405 Method not Supported`: This comes up when you use an incorrect method
    on an existing handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`404 Not Found`: This comes up when the handler does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`400 Bad Request`: This indicates that the request body or parameter does not
    match the server''s expectation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`200 OK`: It is thrown for any request handled without an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With Spring MVC, there are two ways to return status codes:'
  prefs: []
  type: TYPE_NORMAL
- en: Returning a `ResponseEntity` class from a REST controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing an exception that will be caught in dedicated handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status code with ResponseEntity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTTP protocol specifies that we should return a `201 Created` status when
    we create a new user. With our API, this can happen with a `POST` method. We also
    need to throw some 404 errors on operation while working on an entity that does
    not exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring MVC has a class that associates an HTTP status with a response entity.
    It is called `ResponseEntity`. Let''s update our `UserApiController` class to
    handle error codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we evolve towards the first level of RESTfulness but there
    is a lot of boilerplate code involved.
  prefs: []
  type: TYPE_NORMAL
- en: Status codes with exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way to handle errors in our API is to throw exceptions. There are two
    ways to map exceptions with Spring MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `@ExceptionHandler` at the class level, like we did for `IOException`
    in our upload controller in [Chapter 3](part0147.xhtml#aid-4C62M2 "Chapter 3. File
    Upload and Error Handling"), *File Upload and Error Handling*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `@ControllerAdvice` to catch global exceptions thrown by all controllers
    or a subset of your controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two options help you make some business-oriented decisions and define
    a set of practices within your application.
  prefs: []
  type: TYPE_NORMAL
- en: To associate these handlers with HTTP status codes, we can either inject the
    response in the annotated method and use the `HttpServletResponse.sendError()`
    method or just annotate the method with the `@ResponseStatus` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: We will define our own exception, `EntityNotFoundException`. Our business repositories
    will throw this exception when the entity the user is working on cannot be found.
    This will help relieve the API code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for the exception. We can put it in a new package called `error`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: 'Our repository will now throw exceptions in various locations. We will also
    differentiate between saving and updating a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: 'Our controller becomes simpler since it doesn''t have to handle the 404 status.
    We now throw the `EntityNotFound` exception from our controller methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: 'If we don''t handle this exception, Spring will throw a 500 error by default.
    To handle it we will create a small class in the error package, right next to
    our `EntityNotFoundException` class. It will be called `EntityNotFoundMapper`
    class and will be in charge of handling the exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: The `@ControllerAdvice` annotation allows us to add some behaviors to a set
    of controllers by annotating a bean. Those controller advice can handle exceptions
    but also declare model attributes with `@ModelAttribute` or validator policies
    with `@InitBinder`.
  prefs: []
  type: TYPE_NORMAL
- en: With the code we just wrote, we handle all the `EntityNotFoundException` class
    thrown by our controllers in one place and associate it with the 404 status. That
    way, we can abstract this notion and ensure that our application will handle it
    consistently in all controllers.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to deal with hyperlinks in our API at our level. Instead, I
    encourage you to have a look at Spring HATEOAS and Spring Data REST, which provide
    very elegant solutions to make your resources more discoverable.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation with Swagger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Swagger is a really awesome project that will allow you to document and interact
    with your API within an HTML5 webpage. The following screenshot illustrates the
    API documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Documentation with Swagger](img/image00966.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Swagger used to be big (written in Scala) and somewhat complicated to configure
    with a Spring setup. Since version 2.0, the library has been rewritten and a really
    neat project called `spring-fox` will allow for easy integration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`spring-fox`, formerly known as `swagger-springmvc`, has been in existence
    for more than three years and is still a very active project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependencies to your build file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: The first one will provide an annotation to enable Swagger in your application
    as well as an API to describe your resources with annotations. Swagger will then
    generate a JSON representation of your API.
  prefs: []
  type: TYPE_NORMAL
- en: The second is a WebJar that contains static resources consuming the generated
    JSON through a web client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing you need to do now is add the `@EnableSwagger2` annotation to
    your `WebConfiguration` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: The `swagger-ui.jar` file we just added contains an HTML file in `META-INF/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: It will automatically be served by Spring Boot when you go to `http://localhost:8080/swagger-ui.html`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Springfox will scan your whole classpath and show all the request
    mappings declared in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we only want to expose the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: Springfox works with groups of `Docket`s that you have to define as beans in
    your configuration classes. They are logical grouping for RESTful resources. An
    application can have many of them.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the documentation ([http://springfox.github.io/springfox](http://springfox.github.io/springfox))
    to see all the different setups available.
  prefs: []
  type: TYPE_NORMAL
- en: Generating XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful APIs sometimes return responses in different media types (JSON, XML,
    and so on). The mechanism responsible for choosing the correct media type is known
    as content negotiation in Spring.
  prefs: []
  type: TYPE_NORMAL
- en: By default, in Spring MVC, the `ContentNegotiatingViewResolver` bean will be
    in charge of resolving the correct content according to the content negotiation
    policies defined in your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can have a look at `ContentNegotiationManagerFactoryBean` to see how these
    policies are applied within Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content type can be resolved with the following strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: According to the `Accept` header sent by the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a parameter such as `?format=json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a path extension such as `/myResource.json` or `/myResource.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can customize these strategies in your Spring configuration by overriding
    the `configureContentNegotiation()` method of the `WebMvcConfigurerAdapter` class.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Spring will use the `Accept` header and the path extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable XML serialization with Spring Boot, you can add the following dependency
    to your classpath:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: 'If you explore your API with your browser and go to `http://localhost:8080/api/users`,
    you will see the result as XML, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating XML](img/image00967.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s because your browser doesn''t usually request JSON, but XML is second
    after HTML. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating XML](img/image00968.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To get JSON back, you can either go to `http://localhost:8080/api/users.json`
    or send the appropriate `Accept` header with Postman or httpie.
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added a search `ApiController` class. Because the tweets
    returned by the Twitter API were not adapted to our usage, we introduced a `LightTweet`
    class to transform them into a friendlier format.
  prefs: []
  type: TYPE_NORMAL
- en: We also developed a user API. The `User` class is the model. The users are stored
    and retrieved via the `UserRepository` class, and the `UserApiController` class
    exposes HTTP endpoints to perform CRUD operations on the users. We also added
    a generic exception and a mapper to associate the exception to an HTTP status.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the configuration, we added a bean that documents our API, thanks to Swagger,
    and we customized the serialization of our JSR-310 dates. Our code base should
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00969.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to create a RESTful API with Spring MVC. This
    kind of backend yields great benefits in terms of performance and maintenance
    and can do wonders when coupled with a JavaScript MVC framework such as Backbone,
    Angular JS, or React.js.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to handle errors and exceptions properly and learned how to leverage
    the HTTP status to make a better API.
  prefs: []
  type: TYPE_NORMAL
- en: Finally we added automatic documentation with Swagger and added the ability
    to produce both XML and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to secure our application as well as
    use the Twitter API to sign our users up.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5. Securing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll learn how to secure our web application and also how
    to cope with the security challenges of modern, distributed web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be broken up into five parts:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will set up basic HTTP authentication in a few minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will design a form-based authentication for the web pages, keeping
    the basic authentication for the RESTful API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will allow the users to sign up via the Twitter OAuth API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will leverage Spring Session to make sure our application can scale
    using a distributed session mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will configure Tomcat to use a secured connection through SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest possible authentication mechanism is basic authentication ([http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)).
    In a nutshell, our pages will not be available without username and password.
  prefs: []
  type: TYPE_NORMAL
- en: Our server will indicate our resources are secured by sending the `401 Not Authorized`
    HTTP status code and generate a `WWW-Authenticate` header.
  prefs: []
  type: TYPE_NORMAL
- en: To successfully pass the security check, the client must send an `Authorization`
    header containing the `Basic` value followed by a base 64 encoding of the `user:password`
    string. A browser window will prompt the user for a username and a password, granting
    them access to the secured pages if authentication is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add Spring Security to our dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: 'Relaunch your application and navigate to any URL in your application. You
    will be prompted for a username and a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic authentication](img/image00970.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you fail to authenticate, you will see that a `401` error is thrown. The
    default username is `user`. The correct password for authentication will be randomly
    generated each time the application launches and will be displayed in the server
    log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: By default, Spring Security secures every resource except a handful of classic
    routes such as `/css/`, `/js/`, `/images/`, and `**/favicon.ico`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to configure the default credentials, you can add the following
    properties to the `application.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: Authorized users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having only one user in our application does not allow fine-grained security.
    If we wanted more control over the user credentials, we could add the following
    `SecurityConfiguration` class in the `config` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: This snippet will set up an in-memory system containing our application's users
    as well as their roles. It will override the security name and password previously
    defined in the application's properties.
  prefs: []
  type: TYPE_NORMAL
- en: The `@EnableGlobalMethodSecurity` annotation will allow us to annotate our application's
    method and classes to define their security level.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say that only the administrators of our application can
    access the user API. In this case, we just have to add the `@Secured` annotation
    to our resource to allow access only to ADMIN roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: We can easily test that with httpie by using the `-a` switch to use basic authentication
    and the `-p=h` switch, which will only display the response headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this with a user without the admin profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with the administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also notice that Spring Security automatically added some common security
    headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cache Control`: This prevents the user from caching secured resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-XSS-Protection`: This tells the browser to block what looks like CSS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Frame-Options`: This disallows our site from being embedded in an IFrame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Content-Type-Options`: This prevents browsers from guessing the MIME types
    of malicious resources used to forge XSS attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A comprehensive list of these headers is available at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers).
  prefs: []
  type: TYPE_NORMAL
- en: Authorized URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Annotating our controller is very easy but isn't always the most viable option.
    Sometimes, we just want total control over our authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `@Secured` annotation; we will come up with something better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what Spring Security will allow us to do by modifying the `SecurityConfiguration`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code sample, we configured our application's security policy
    by using Spring Security's fluent API.
  prefs: []
  type: TYPE_NORMAL
- en: This API allows us to configure Spring Security globally by invoking methods
    associated with different security concerns and chaining with the `and()` method.
  prefs: []
  type: TYPE_NORMAL
- en: What we just defined is a basic authentication, without CSRF protection. Requests
    on `/login` and `/logout` will be allowed for all users. `GET` requests on the
    API will only be permitted for users with the `USER` role, whereas `POST`, `PUT`,
    and `DELETE` requests on the API will only be accessible to users with the ADMIN
    roles. Finally, every other request will require authentication with any role.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF stands for **Cross Site Request Forgery** and refers to an attack where
    a malicious website would display a form on its website and post the form data
    on yours. If the user of your site is not signed out, the `POST` request would
    retain the user cookies and would therefore be authorized.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF protection will generate short-lived tokens that will be posted along with
    the form data. We will see how to properly enable it in the next section; for
    now, let's just disable it. See [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the authorize request API, have a look at [http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests](http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests).
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf security tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you will need to display data coming from the authentication layer,
    for example the user's name and roles, or hide and display part of a web page
    according to users' authorities. The `thymeleaf-extras-springsecurity` module
    will allow us to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: 'With this library, we can add a little block under our navigation bar in `layout/default.html`
    to display the logged-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the new namespace in the HTML declaration and the `sec:authentication`
    attributes. It allows access to the properties of the `org.springframework.security.core.Authentication`
    object, which represents the user who is currently logged in, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Thymeleaf security tags](img/image00971.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Don't click on the logout link just yet as it doesn't work with basic authentication.
    We will get it to work in the next part.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `lib` tag also has a handful of other tags, such as the one to check user
    authorizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to the documentation available at [https://github.com/thymeleaf/thymeleaf-extras-springsecurity](https://github.com/thymeleaf/thymeleaf-extras-springsecurity)
    to learn more about the library.
  prefs: []
  type: TYPE_NORMAL
- en: The login form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic authentication is good for our RESTful API, but we would rather have a
    login page carefully designed by our team to improve the web experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Security allows us to define as many `WebSecurityConfigurerAdapter`
    classes as we need. We will split our `SecurityConfiguration` class into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ApiSecurityConfiguration`: This will be configured first. This will secure
    the RESTful endpoints with basic authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebSecurityConfiguration`: This will then configure login form for the rest
    of our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can remove or rename `SecurityConfiguration` and create `ApiSecurityConfiguration`
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the `@Order(1)` annotation, which will ensure that this configuration
    is executed before the other one. Then, create a second configuration for the
    web, called `WebSecurityConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: The result of this code is that anything matching `/api/**` will be secured
    with basic authentication, without CSRF protection. Then, the second configuration
    will be loaded. It will secure anything else. Everything in this part of the application
    requires the client to be authenticated, except requests on WebJars and on the
    login page (this will avoid the redirection loop).
  prefs: []
  type: TYPE_NORMAL
- en: If an unauthenticated user tries to access a protected resource, they will automatically
    be redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the login URL is `GET /login`. The default login will be posted
    via a `POST /login` request that will contain three values: a user name (`username`),
    a password (`password`) and a CSRF token (`_csrf`). If the login is unsuccessful,
    the user will be redirected to `/login?error`. The default logout page is a `POST
    /logout` request with a CSRF token.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you try to navigate on your application, this form will be generated
    automatically!
  prefs: []
  type: TYPE_NORMAL
- en: If you are already logged in from a previous attempt, close your browser; this
    will clear up the session.
  prefs: []
  type: TYPE_NORMAL
- en: '![The login form](img/image00972.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can now log in and out of our application!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is lovely but we can do a lot better with very little effort. First, we
    will define a login page on `/login` in the `WebSecurityConfiguration` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: 'This will let us create our own login page. To do that, we will need a very
    simple controller to handle the `GET login` request. You can create one in the
    `authentication` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: 'This will trigger the display of the `login.html` page located in the template
    directory. Let''s create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: Note that we handle the error message and that we post a CSRF token. We also
    use the default username and password input names, but those are configurable
    if needed. The result looks much better already!
  prefs: []
  type: TYPE_NORMAL
- en: '![The login form](img/image00973.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see right away that Spring Security assigns anonymous credentials to
    all non-authenticated users by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'We shouldn''t show the sign-out button to an anonymous user so we can wrap
    the corresponding HTML part in `sec:authorize="isAuthenticated()"` to display
    it to authenticated users only, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: Twitter authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is strongly integrated with Twitter, so it seems logical that
    we would allow authentication through Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going further, make sure that you have enabled Twitter sign in on your
    app on Twitter ([https://apps.twitter.com](https://apps.twitter.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Twitter authentication](img/image00974.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up social authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring social enables authentication through an OAuth provider such as Twitter
    through a signin/signup scenario. It will intercept a `POST` request on `/signin/twitter`.
    If the user is not known to the `UsersConnectionRepository` interface, the `signup`
    endpoint will be called. It will allow us to take the necessary measures to register
    the user on our system and maybe ask them for additional details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get to work. The first thing we need to do is to add the `signin/**`
    and `/signup` URLs as publicly available resources. Let''s modify our `WebSecurityConfiguration`
    class, changing the `permitAll` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: To enable the signin/signup scenario, we also need a `SignInAdapter` interface,
    a simple listener that will be called when an already known user signs in again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create an `AuthenticatingSignInAdapter` class right next to our `LoginController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this handler is called at the perfect time to allow user authentication
    with Spring Security. We''ll come back to that in just a moment. For now, we need
    to define our `SignupController` class in the same package, the one in charge
    of first-time visiting users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: First, this controller retrieves the current connection from the session. Then,
    it authenticates the user through the same method as before. Lastly, it will trigger
    the `doPostSignUp` event, which will allow Spring Social to store information
    relative to our user in the `UsersConnectionRepository` interface that we mentioned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing we need to do is add a triumphant "login with twitter" button
    to our login page, right below the previous form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up social authentication](img/image00975.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the **CONNECT WITH TWITTER** button, they will be redirected
    to a Twitter sign in page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up social authentication](img/image00976.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Explanation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There isn't much code, but it is a bit tricky to understand all the parts. The
    first step to getting what's going on is to have a look at the `SocialWebAutoConfiguration`
    class of Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SocialAutoConfigurationAdapter` class declared in this class contains
    the following bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ProviderSignInController` class will automatically be set up if one `ProviderSignInController`
    class is detected in our configuration. This controller is the cornerstone of
    the sign-in process. Have a look at what it does (I will only summarize the important
    parts):'
  prefs: []
  type: TYPE_NORMAL
- en: It will handle the `POST /signin/{providerId}` from our connect button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will redirect the user to the appropriate sign-in URL of our identification
    provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will be notified of the OAuth token by a `GET /signin/{providerId}` from
    the identification provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will then handle the sign in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user is not found in the `UsersConnectionRepository` interface, it will
    use a `SessionStrategy` interface to store the pending login request and will
    then redirect to the `signupUrl` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user is found, the `SignInAdapter` interface is called and the user is
    redirected to the `postSignupUrl` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The two important components of this identification are the `UsersConnectionRepository`
    interface in charge of storing and retrieving users from some kind of storage
    and the `SessionStrategy` interface that will temporarily store the user connection
    so it can be retrieved from the `SignupController` class.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Spring Boot creates an `InMemoryUsersConnectionRepository` interface
    for each authentication provider, which means that our user connection data will
    be stored in memory. If we restart the server, the user will become unknown and
    will go through the sign-up process again.
  prefs: []
  type: TYPE_NORMAL
- en: The `ProviderSignInController` class defaults to `HttpSessionSessionStrategy`,
    which will store the connection in the HTTP session. The `ProviderSignInUtils`
    class that we use in our `SignupController` class also uses this strategy by default.
    If we were distributing our application on multiple servers, this would be problematic
    because the session would likely not be available on every server.
  prefs: []
  type: TYPE_NORMAL
- en: It is easy enough to override these defaults by providing a custom `SessionStrategy`
    interface to both the `ProviderSignInController` and `ProviderSignInUtils` classes
    to store data somewhere other than in the HTTP session.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, we can use another kind of storage for our user connection data by
    providing another implementation of the `UsersConnectionRepository` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Social provides a `JdbcUsersConnectionRepository` interface that will
    automatically save authenticated users in a `UserConnection` table in your database.
    This won''t be covered in this book extensively, but you should be able to configure
    it easily by adding the following bean to your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out this article [http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html](http://geowarin.github.io/spring/2015/08/02/social-login-with-spring.html)
    on my blog for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the preceding section, there are several moments when Spring
    Social stores things in the HTTP session. Our user profile is also stored in the
    session. This is a classical approach to keeping things in memory as long as a
    user is navigating the site.
  prefs: []
  type: TYPE_NORMAL
- en: However, this can prove troublesome if we want to scale our application and
    distribute the load to multiple backend servers. We have now entered the cloud
    era, and [Chapter 7](part0187.xhtml#aid-5IAP61 "Chapter 7. Optimizing Your Requests"),
    *Optimizing Your Requests* will be about deploying our application to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our session work in a distributed environment, we have a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: We could use sticky sessions. This will ensure that a specific user will always
    be redirected to the same server and keep its session. It requires additional
    configuration for the deployment and isn't a particularly elegant approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor our code to put data in a database instead of the session. We can then
    load the user's data from the database if we associate it with a cookie or a token
    sent by the client with each request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Spring Session project to transparently use a distributed database such
    as Redis as the underlying session provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will see how to set up the third approach. It is really
    easy to set up and provides the amazing benefit that it can be turned off without
    impacting the functionality of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to install Redis. To install it on Mac, use
    the `brew` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: For other platforms, follow the instructions at [http://redis.io/download](http://redis.io/download).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then start the server by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following dependencies to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new configuration file next to `application.properties` called `application-redis.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: Spring Boot provides a convenient way of associating configuration files with
    a profile. In this case, the `application-redis.properties` file will only be
    loaded if the Redis profile is active.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create a `RedisConfig` class in the `config` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this configuration will only be active if the `redis` profile
    is on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re done! We can now launch our app with the following flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also generate the JAR with `gradlew build` and launch it with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can launch it with Gradle in Bash, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: You can also simply set it up as a JVM option in the run configuration of your
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! You now have a server storing the details of your logged-in users.
    This means that we can scale and have multiple servers for our web resources and
    our users won't notice. And we didn't have to write any code on our side.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that you will keep your session even if you restart your server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see that it works, connect to Redis with the `redis-cli` command. At the
    beginning, it will not contain any keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to your app and start putting things in the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can consult the list of available commands at [http://redis.io/commands](http://redis.io/commands).
  prefs: []
  type: TYPE_NORMAL
- en: SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure Sockets Layer** (**SSL**) is a security protocol in which data is
    encrypted and sent to a trusted party via a certificate. In this part, I will
    show you the different ways to create a secured connection with Spring Boot. The
    completion of these steps is not mandatory to start the next chapter. They are
    included for completeness, so feel free to skip them if you are in a hurry to
    deploy your application to the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](part0196.xhtml#aid-5QTE81 "Chapter 8. Deploying Your Web Application
    to the Cloud"), *Deploying Your Web Application to the Cloud*, we will see that
    most cloud platforms already handle SSL so we don't have to configure it at our
    end.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a self-signed certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normally, X.509 certificates are delivered by a Certificate Authority. They
    generally bill you for the service, so for testing purposes, we can create our
    own self-signed keystore file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JDK comes with a binary called keytool, which is used to manage certificates.
    With it, you can create a keystore and import certificates into an existing keystore.
    You can issue the following command inside your project root to create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: This will generate a keystore named `masterspringmvc` with the RSA algorithm
    and will store it in a keystore in `src/main/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not push the keystore to your repository. It can be brute-forced, which would
    void the security of your website. You should also generate keystores with strong,
    randomly generated passwords.
  prefs: []
  type: TYPE_NORMAL
- en: The easy way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If all you care about is having one secure https channel and no http channel,
    it is as easy as it gets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not push your passwords to your repository. Use the `${}` notation to import
    environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: The dual way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to have both the http and the https channels available in your
    application, you should add this kind of configuration to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: This will load the previously generated keystore to create an additional channel
    on port 8443 in addition to port 8080.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use Spring Security to automatically redirect connections from `http`
    to `https` with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: Behind a secured server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most convenient way to secure your application with SSL is often to put
    it behind an SSL-enabled web server such as Apache or CloudFlare. These will often
    use de facto headers to indicate that the connection was previously initiated
    with SSL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Boot can understand this protocol if you tell it what the correct headers
    are in your `application.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the documentation here for more details at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-tomcat-behind-a-proxy-server).
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we added three pieces of configuration: `ApiSecurityConfiguration`,
    which configures our REST API to use basic HTTP authentication; `WebSecurityConfiguration`,
    which sets up a login form for our web users to sign in with either an account
    or with Twitter; and `RedisConfig`, which allows our sessions to be stored and
    retrieved from a Redis server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the authentication package, we added a `LoginController` class that redirects
    to our login page, a `SignupController` class that will be called the first time
    a user signs up with Twitter, and an `AuthenticatingSignInAdapater` class that
    will be called on every login with Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00977.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing our web application with Spring is really simple. The possibilities
    are endless, and advanced configurations such as social sign in are at your fingertips.
    Distributing sessions and scaling also take a matter of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to test our application and ensure it never
    regresses.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6. Leaving Nothing to Luck – Unit Tests and Acceptance Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see why and how our application should be tested. We
    will see the differences between unit tests and acceptance tests, and learn how
    to do both.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is divided in two parts. In the first part, we will write tests
    in Java while studying the different ways of testing. In the second part, which
    is shorter, we will write the exact same tests in Groovy, and see how we can improve
    our code readability with this awesome language.
  prefs: []
  type: TYPE_NORMAL
- en: If you do everything in this chapter, you will have double tests, so feel free
    to keep only the tests that are most readable for you.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I test my code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working in the Java world has made a lot of developers aware of the importance
    of tests. A good series of tests can catch regressions early and allows us to
    be more confident when we ship our product.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people are now familiar with the notion of continuous integration ([http://www.thoughtworks.com/continuous-integration](http://www.thoughtworks.com/continuous-integration)).
    This is a practice where a server is in charge of building the application every
    time a change is made on the source control system.
  prefs: []
  type: TYPE_NORMAL
- en: The build should be as fast as possible and capable of self testing. The main
    idea of this practice is to get a fast feedback loop; you should get details about
    what went wrong as soon as something in the system breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Why should you care? After all, testing your application is an additional cost;
    the time spent designing and maintaining tests will necessarily eat into some
    development time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, the later a bug is found, the costlier it gets. If you think about
    it, even a bug found by your QA team begins to cost more than a bug you find on
    your own. It forces you to switch back to the context you were in when writing
    the code: why did I write this line? What was the underlying business rule of
    that function?'
  prefs: []
  type: TYPE_NORMAL
- en: If you write tests early on and are able to launch them in a few seconds, it
    will certainly cost less time to address potential bugs in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of tests is that they act as a living documentation of your
    code. While writing extensive documentation, and even code comments, can prove
    ineffective because they easily become outdated, forming the habit of writing
    a good test for limit cases or surprising behaviors will act as a safety net for
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: What is this line of code for? Have you ever found yourself asking this kind
    of question? Well, if you have a good set of unit tests, you can just remove it
    and see what breaks! Tests give us an unprecedented confidence in our code and
    in our ability to refactor it. Software is very fragile. If you stop caring, it
    will slowly rot and die.
  prefs: []
  type: TYPE_NORMAL
- en: Be responsible—don't let your code die!
  prefs: []
  type: TYPE_NORMAL
- en: How should I test my code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different kinds of tests that we can perform on a piece of software,
    such as security tests, performances test, and so on. As developers, we will focus
    on the tests we can automate and that will help improve our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests fall under two categories: unit tests and acceptance tests. The test
    pyramid ([http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html))
    shows in what proportions these tests should be written:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How should I test my code?](img/image00978.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of the pyramid, you have the unit tests (fast to launch and relatively
    easy to maintain), and at the top, UI tests (costlier and slower to execute).
    Integration tests sit in the middle: they can be viewed as big unit tests with
    complex interactions between units.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea of the pyramid is to remind you to put your focus where you have the
    most impact and get the best feedback loops.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driven development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many developers develop the healthy habit of **Test-driven Development** (**TTD**).
    This practice, inherited from Extreme Programming (XP), is the process of splitting
    each development stage into small steps and then writing a failing test for every
    one of them. You make the necessary modifications so that the tests pass again
    (test are green). You can then refactor your code as long as the tests remain
    green. The following figure illustrates the TDD cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test-driven development](img/image00979.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can iterate until the feature is done with very short feedback loops, with
    the insurance of no regressions, and the guarantee that all the code you write
    will be tested from the very beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'TDD gets its share of criticisms. The most interesting ones are these:'
  prefs: []
  type: TYPE_NORMAL
- en: It takes more time to write the tests than to do the actual implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can lead to poorly designed applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The truth of the matter is that it takes time to become a good TDD practitioner.
    Once you get the feeling of what should be tested and know your tools well enough,
    you won't lose much time at all.
  prefs: []
  type: TYPE_NORMAL
- en: It also takes experienced developers to craft an application with a proper design
    using TDD (or with any other methodology). Poor design can be a side effect of
    TDD if you get trapped in the baby steps mantra and forget to look at the big
    picture. It is true that TDD won't magically lead to great application design,
    so be careful and remember to take a step back after completing each feature.
  prefs: []
  type: TYPE_NORMAL
- en: From the beginning of the book, we have only had one autogenerated unit test
    in our code. This is bad! We didn't follow good practice. This chapter is here
    to address this problem.
  prefs: []
  type: TYPE_NORMAL
- en: The unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The lower level tests we can write are called unit tests. They should test a
    small portion of code, hence the notion of unit. How you define a unit is up to
    you; it can be a class or a bunch of closely related classes. Defining this notion
    will determine what will be mocked (replaced with a dummy object). Are you going
    to replace the database with a lightweight alternative? Are you going to replace
    interactions with external services? Are you going to mock-up closely related
    objects whose behavior is not relevant to the context of what's being tested?
  prefs: []
  type: TYPE_NORMAL
- en: My advice here is to keep a balanced approach. Keep your tests clean and fast,
    and everything else will follow.
  prefs: []
  type: TYPE_NORMAL
- en: I rarely completely mock the data layer. I tend to use embedded databases for
    testing. They provide an easy way to load data while testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a rule, I always mock collaboration with external services for two reasons,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The speed of the tests and the possibility to run the tests without connecting
    to the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be able to test error cases while communicating with those services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, there is a subtle difference between mocking and stubbing. We
    will try to use both approaches to see how they relate to each other.
  prefs: []
  type: TYPE_NORMAL
- en: The right tools for the job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first barrier for test novices is the lack of knowledge of the good tools
    and libraries for writing relevant and maintainable tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m going to list a few here. This list is by no means exhaustive, but it
    contains the tools we are going to use and that are easily compatible with Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JUnit | The most universally adopted Java test runner. Launched by default
    by all build tools. |'
  prefs: []
  type: TYPE_TB
- en: '| AssertJ | A fluent assertion library. It''s way easier to use than Hamcrest.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Mockito | An easy mocking framework. |'
  prefs: []
  type: TYPE_TB
- en: '| DbUnit | For mocking and asserting your database content with XML datasets.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Spock | An elegant Groovy DSL to write tests with Behaviour Driven Development
    (BDD) style (Given/When/Then). |'
  prefs: []
  type: TYPE_TB
- en: Groovy has a place of choice in my testing toolset. Even if you're not ready
    yet to put some Groovy code into production, you can easily use the convenience
    of the language in your tests. With Gradle, this is very easy to do, but we will
    see that in a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The acceptance tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the context of a web application, "acceptance test" will often refer to in-browser,
    end-to-end testing. In the Java world, Selenium is clearly one of the most reliable
    and mature libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the JavaScript world, we can find other alternatives, such as PhantomJS
    or Protractor. PhantomJS is very relevant in our case because there is a web driver
    available to run Selenium tests inside of this headless browser, which will improve
    launch time and won''t require emulating an X Server or launching a separate Selenium
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Selenium 2 | This provides web drivers to pilot browsers for automated testing.
    |'
  prefs: []
  type: TYPE_TB
- en: '| PhantomJS | A headless browser (without GUI). Probably the fastest browser.
    |'
  prefs: []
  type: TYPE_TB
- en: '| FluentLenium | A fluent library for piloting Selenium tests. |'
  prefs: []
  type: TYPE_TB
- en: '| Geb | A Groovy library for piloting Selenium tests. |'
  prefs: []
  type: TYPE_TB
- en: Our first unit test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now time to write our first unit test.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will focus on writing tests at the controller level because we have little
    to no business code or service. The key to writing tests for Spring MVC is the
    `org.springframework.boot:spring-boot-starter-test` dependency in our classpath.
    It will add a few very useful libraries, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hamcrest`: This is JUnit''s assertion library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mockito`: This is a mocking library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test`: This is the Spring testing library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will test the redirection to the profile page that is created when the user
    hasn't created their profile yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have an autogenerated test called `MasterSpringMvc4ApplicationTests`.
    It is the most basic kind of test one can write with the Spring test framework:
    it does nothing but blow up if the context cannot be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: We can delete this test and create one that will ensure that a user with no
    profile will be redirected to the profile page by default. It will actually test
    the code of the `HomeController` class, so let's call it `HomeControllerTest`
    class and put it in the same package as `HomeController`, in `src/test/java`.
    All IDEs have shortcuts for creating a JUnit test case from a class. Find out
    how to do it with yours now!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: We use `MockMvc` to simulate interactions with a Spring controller without the
    actual overhead of a Servlet container.
  prefs: []
  type: TYPE_NORMAL
- en: We also use a couple of matchers that Spring provides to assert our result.
    They actually implement Hamcrest matchers.
  prefs: []
  type: TYPE_NORMAL
- en: The `.andDo(print())` statement will produce a neat debug output for the request
    and response of the scenario under test. You can comment it if you find it too
    verbose.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to it! The syntax is a bit tricky at the beginning, but
    an IDE with good completion will be able to help you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we want to test whether, if the user has filled in the test part of their
    profile, we can redirect them to the correct search. For that, we will need to
    stub the session with the `MockHttpSession` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: You will have to add the `setTastes()` setter to the `UserProfileSession` bean
    for the test to work.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of mocking utilities for the Servlet environment in the `org.springframework.mock.web`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the attribute representing our bean in session is prefixed by `scopedTarget`.
    That's because session beans are proxified by Spring. Therefore, there are actually
    two objects in the Spring context, the actual bean that we defined and its proxy
    that will end up in the session.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mock session is a neat class, but we can refactor the test with a builder
    that will hide implementation details and can be reused later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the builder is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: After this refactoring, your test should always pass, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Mocks and stubs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we wanted to test the search request handled by the `SearchController` class,
    we would certainly want to mock `SearchService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways of doing this: with a mock or with a stub.'
  prefs: []
  type: TYPE_NORMAL
- en: Mocking with Mockito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we can create a mock object with Mockito:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: You can see that instead of setting up `MockMvc` with the web application context,
    we have created a standalone context. This context will only contain our controller.
    That means we have full control over the instantiation and initialization of controllers
    and their dependencies. It will allow us to easily inject a mock inside of our
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: The downside is that we have to redeclare pieces of our configuration like the
    one saying we don't want to remove URL characters after a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: We use a couple of Hamcrest matchers to assert the properties that will end
    up in the view model.
  prefs: []
  type: TYPE_NORMAL
- en: The mocking approach has its benefits, such as the ability to verify interactions
    with the mock and create expectations at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: This will also couple your test with the actual implementation of the object.
    For instance, if you changed how a tweet is fetched in the controller, you would
    likely break the tests related to this controller because they still try to mock
    the service we no longer rely on.
  prefs: []
  type: TYPE_NORMAL
- en: Stubbing our beans while testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another approach is to replace the implementation of our `SearchService` class
    with another one in our test.
  prefs: []
  type: TYPE_NORMAL
- en: We were a bit lazy early on and did not define an interface for `SearchService`.
    *Always program to an interface and not to an implementation*. Behind this proverbial
    wisdom lies the most important lesson from the *Gang of Four*.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the benefits of the Inversion of Control is to allow for the easy replacement
    of our implementations in tests or in a real system. For this to work, we will
    have to modify all the usages `SearchService` with the new interface. With a good
    IDE, there is a refactoring called `extract interface` that will do just that.
    This should create an interface that contains the public method `search()` of
    our `SearchService` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: Of course, our two controllers, `SearchController` and `SearchApiController`,
    must now use the interface and not the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have the ability to create a test double for the `TwitterSearch` class
    specially for our test case. For this to work, we will need to declare a new Spring
    configuration named `StubTwitterSearchConfig` that will contain another implementation
    for `TwitterSearch`. I placed it in the search package, next to `SearchControllerMockTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: In this configuration class, we redeclare the `TwitterSearch` bean with the
    `@Primary` annotation, which will tell Spring to use this implementation on priority
    if other implementations are found in the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `TwitterSearch` interface contains only one method, we can implement
    it with a lambda expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete test that uses our `StubConfiguration` class along with
    our main configuration with the `SpringApplicationConfiguration` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Should I use mocks or stubs?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both approaches have their own merits. For a detailed explanation, check out
    this great essay by Martin Fowler: [http://martinfowler.com/articles/mocksArentStubs.html](http://martinfowler.com/articles/mocksArentStubs.html).'
  prefs: []
  type: TYPE_NORMAL
- en: My testing routine is more about writing stubs because I like the idea of testing
    the output of my objects more than their inner workings. But that's up to you.
    Spring being a dependency injection framework at its core means that you can easily
    choose what your favorite approach is.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing REST controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just tested a traditional controller redirecting to a view. Testing
    a REST controller is very similar in principle, but there are a few subtleties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are going to test the JSON output of our controller, we need a JSON
    assertion library. Add the following dependency to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s write a test for the `SearchApiController` class, the controller that
    allows searching for a tweet and returns results as JSON or XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: Note the simple and elegant assertions on the JSON output. Testing our user
    controller will require a bit more work.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add `assertj` to the classpath; it will help us write cleaner
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to simplify testing, add a `reset()` method to our `UserRepository` class
    that will help us with the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: In real life, we should probably extract an interface and create a stub for
    testing. I will leave that as an exercise for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the first test that gets the list of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: 'For this to work, add a constructor to the `User` class, taking the e-mail
    property as a parameter. Be careful: you also need to have a default constructor
    for Jackson.'
  prefs: []
  type: TYPE_NORMAL
- en: The test is very similar to the previous test with the additional setup of `UserRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test the `POST` method that creates a user now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two things to be noted. The first one is the use of AssertJ to assert
    the content of the repository after the test. You will need the following static
    import for that to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: 'The second is that we use a utility method to convert our object to JSON before
    sending it to the controller. For that purpose, I created a simple utility class
    in the `utils` package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: 'The tests for the `DELETE` method are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here''s the test for the `PUT` method, which updates a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: 'Whoops! The last test does not pass! By checking the implementation of `UserApiController`,
    we can easily see why:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: We returned the wrong status in the controller! Change it to `HttpStatus.OK`
    and the test should be green again.
  prefs: []
  type: TYPE_NORMAL
- en: With Spring, one can easily write controller tests using the same configuration
    of our application, but we can just as efficiently override or change some elements
    in our testing setup.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting thing that you will notice while running all the tests is
    that the application context is only loaded once, which means that the overhead
    is actually very small.
  prefs: []
  type: TYPE_NORMAL
- en: Our application is small too, so we did not make any effort to split our configuration
    into reusable chunks. It can be a really good practice not to load the full application
    context inside of every test. You can actually split the component scanned into
    different units with the `@ComponentScan` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: This annotation has several attributes that allow you to define filters with
    `includeFilter` and `excludeFilter` (loading only the controller for instance)
    and scan specific packages with the `basePackageClasses` and `basePackages` annotations.
  prefs: []
  type: TYPE_NORMAL
- en: You can also split your configuration into multiple `@Configuration` classes.
    A good example would be splitting the code for the users and for the tweet parts
    of our application into two independent parts.
  prefs: []
  type: TYPE_NORMAL
- en: We will now have a look at acceptance tests, which are a very different kind
    of beast.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you wish to set up Spring Security in a MockMvc test, you can write this
    test next to our previous test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we added `SpringSecurityFilter` to our configuration.
    This will activate Spring Security checks. To test if the authentication works,
    we simply send the correct headers along with the request we would like to perform.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of basic authentication is that it's really straightforward to
    simulate. With a more complicated setup, you would have to perform a mock request
    on the authentication endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Spring Boot is at version 1.2.3 and depends on Spring
    Security 3.
  prefs: []
  type: TYPE_NORMAL
- en: In a few weeks, Spring Boot 1.3.0 will be available, it will update Spring Security
    and use version 4.
  prefs: []
  type: TYPE_NORMAL
- en: This is good news because Spring Security 4 includes a really easy setup of
    the authenticated user with simple annotations. See [http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test](http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Writing acceptance tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit tests can only cover a subset of the different interactions between the
    components of our application. To go a little further, we will need to set up
    acceptance tests, tests that will actually boot up the complete application and
    allow us to interact with its interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Gradle configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we will want to do when we add integration tests to a project
    is to put them in a different location to that of the unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason for this is, essentially, that acceptance tests are slower than
    unit tests. They can be part of a different integration job, such as a nightly
    build, and we want developers to be able to launch the different kinds of tests
    easily from their IDE. To do this with Gradle, we will have to add a new configuration
    called `integrationTest`. For Gradle, a configuration is a group of artifacts
    and their dependencies. We already have several configurations in our project:
    `compile`, `testCompile`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: You can have a look at the configurations of your project, and much more, by
    typing `./gradlew properties` at the root of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new configuration at the end of `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: This will allow you to declare dependencies for `integrationTestCompile` and
    `integrationTestRuntime`. More importantly, by inheriting the test configurations,
    we have access to their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I do not recommend declaring your integration test dependencies as `integrationTestCompile`.
    It will work as far as Gradle is concerned, but support inside of IDE is non-existent.
    What I usually do is declare my integration test dependencies as `testCompile`
    dependencies instead. This is only a small inconvenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our new configurations, we must create a `sourceSet` class
    associated with them. A `sourceSet` class represents a logical group of Java source
    and resources. Naturally, they also have to inherit from the test and main classes;
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to add a task to run them from our build, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: To run our test, we can type `./gradlew integrationTest`. Besides configuring
    our classpath and where to find our test classes, we also defined a directory
    where the test report will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration allows us to write our tests in `src/integrationTest/java`
    or `src/integrationTest/groovy`, which will make it easier to identify them and
    run them separately from our unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: By default, they will be generated in `build/reports/tests`. If we do not override
    them, if we launch both tests and integration tests with `gradle clean test integrationTest`,
    they will override each other.
  prefs: []
  type: TYPE_NORMAL
- en: It's also worth mentioning that a young plugin in the Gradle ecosystem aims
    to simplify declaring new test configurations, visit [https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets](https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets)
    for detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: Our first FluentLenium test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'FluentLenium is an amazing library for piloting Selenium tests. Let''s add
    a few dependencies to our build script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: By default, `fluentlenium` comes with `selenium-java`. We redeclare it just
    to explicitly require the latest version available. We also added a dependency
    to the `PhantomJS` driver, which is not officially supported by Selenium. The
    problem with the `selenium-java` library is that it comes bundled with all the
    supported web drivers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the dependency tree of our project by typing `gradle dependencies`.
    At the bottom, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: 'Having all those dependencies in the classpath is highly unnecessary since
    we will just use the `PhantomJS` driver. To exclude the dependencies we won''t
    need, we can add the following part to our buildscript, right before the dependencies
    declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: We just keep the `firefox` driver at hand. `PhantomJS` driver is a headless
    browser, so understanding what happens without a GUI can prove tricky. It can
    be nice to switch to Firefox to debug a complex test.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our classpath correctly configured, we can now write our first integration
    test. Spring Boot has a very convenient annotation to support this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: Note that FluentLenium has a neat API for requesting DOM elements. With AssertJ,
    we can then write easy-to read-assertions on the page content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have a look at the documentation at [https://github.com/FluentLenium/FluentLenium](https://github.com/FluentLenium/FluentLenium)
    for further information.
  prefs: []
  type: TYPE_NORMAL
- en: With the `@WebIntegrationTest` annotation, Spring will actually create the embedded
    Servlet container (Tomcat) and launch our web application on a random port! We
    need to retrieve this port number at runtime. This will allow us to provide a
    base URL for our tests, a URL that will be the prefix for all the navigation we
    do in our tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to run the test at this stage, you will see the following error
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: Indeed, PhantomJS needs to be installed on your machine for this to work correctly.
    On a Mac, simply use `brew install phantomjs`. For other platforms, see the documentation
    at [http://phantomjs.org/download.html](http://phantomjs.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to install a new binary on your machine, replace `new PhantomJSDriver()`
    with `new FirefoxDriver()`. Your test will be a bit slower, but you will have
    a GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Our first test is landing on the profile page, right? We need to find a way
    to log in now.
  prefs: []
  type: TYPE_NORMAL
- en: What about faking login with a stub?
  prefs: []
  type: TYPE_NORMAL
- en: 'Put this class in the test sources (`src/test/java`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: This will authenticate any user clicking on the Twitter sign in button as geowarin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will write a second test that will fill the profile form and assert that
    the search result is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we can easily ask our web driver to take a screenshot of the current
    browser used for testing. This will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our first FluentLenium test](img/image00980.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Page Objects with FluentLenium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous test was a bit messy. We have hardcoded all the selectors in our
    test. This can become very risky when we write a lot of tests using the same elements
    because whenever we change the page layout, all the tests will break. Moreover,
    the test is a little difficult to read.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, a common practice is to use a page object that will represent a
    specific web page in our application. With FluentLenium, page objects must inherit
    the `FluentPage` class.
  prefs: []
  type: TYPE_NORMAL
- en: We will create three pages, one for each element of our GUI. The first one will
    be the login page with the option to click on the `twitterSignin` button, the
    second one will be the profile page with convenience methods for filling in the
    profile form, and the last one will be the result page on which we can assert
    the results displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the login page at once. I put all the three pages in a `pages`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create one page for our profile page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also create another one for the search result page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now refactor the test using those Page Objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: Much more readable, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Making our tests more Groovy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't know Groovy, consider it like a close cousin of Java, without the
    verbosity. Groovy is a dynamic language with optional typing. This means that
    you can have the guarantees of a type system when it matters and the versatility
    of duck typing when you know what you are doing.
  prefs: []
  type: TYPE_NORMAL
- en: With this language, you can write POJOs without getters, setters, `equals` and
    `hashcode` methods. Everything is handled for you.
  prefs: []
  type: TYPE_NORMAL
- en: Writing `==` will actually call the `equals` method. The operators can be overloaded,
    which allows a neat syntax with little arrows, such as `<<`, to write text to
    a file, for instance. It also means that you can add integers to `BigIntegers`
    and get a correct result.
  prefs: []
  type: TYPE_NORMAL
- en: The **Groovy Development Kit** (**GDK**) also adds several very interesting
    methods to classic Java objects. It also considers regular expressions and closures
    as first-class citizens.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want a solid introduction to Groovy, check out the Groovy style guide
    at [http://www.groovy-lang.org/style-guide.html](http://www.groovy-lang.org/style-guide.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can also watch this amazing presentation by Peter Ledbrook at [http://www.infoq.com/presentations/groovy-for-java](http://www.infoq.com/presentations/groovy-for-java).
  prefs: []
  type: TYPE_NORMAL
- en: As far as I am concerned, I always try to push Groovy on the testing side of
    the application I work on. It really improves the readability of the code and
    the productivity of developers.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests with Spock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to write Groovy tests in our project, we need to use the Groovy plugin
    instead of the Java plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what you have in your build script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: This modification is perfectly harmless. The Groovy plugin extends the Java
    plugin, so the only difference it makes is that it gives the ability to add Groovy
    source in `src/main/groovy`, `src/test/groovy` and `src/integrationTest/groovy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, we also need to add Groovy to the classpath. We will also add Spock,
    the most popular Groovy testing library, via the `spock-spring` dependency, which
    will enable compatibility with Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now rewrite `HomeControllerTest` with a different approach. Let''s create
    a `HomeControllerSpec` class in `src/test/groovy`. I added it to the `masterSpringMvc.controller`
    package just like our first instance of `HomeControllerTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: Our test instantaneously became more readable with the ability to use strings
    as method names and the little BDD DSL (Domain Specific Language) provided by
    Spock. This is not directly visible here, but every statement inside of a `then`
    block will implicitly be an assertion.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, because Spock doesn't read meta annotations, the `@SpringApplicationConfiguration`
    annotation cannot be used so we just replaced it with `@ContextConfiguration(loader
    = SpringApplicationContextLoader)`, which is essentially the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: We now have two versions of the same test, one in Java and the other in Groovy.
    It is up to you to choose the one that best fits your style of coding and remove
    the other one. If you decide to stick with Groovy, you will have to rewrite the
    `should_redirect_to_tastes()` test in Groovy. It should be easy enough.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spock also has powerful support for mocks. We can rewrite the previous `SearchControllerMockTest`
    class a bit differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: All the verbosity of Mockito is now gone. The `then` block actually asserts
    that the `twitterSearch` method is called once (`1 *`) with any parameter (`_,
    _`). Like with mockito, we could have expected specific parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The double arrow `>>` syntax is used to return an object from the mocked method.
    In our case, it's a list containing only one element.
  prefs: []
  type: TYPE_NORMAL
- en: With only a little dependency in our classpath, we have already written more
    readable tests, but we're not done yet. We will also refactor our acceptance tests
    to use Geb, a Groovy library that pilots Selenium tests.
  prefs: []
  type: TYPE_NORMAL
- en: Integration tests with Geb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Geb is the de facto library for writing tests in the Grails framework. Although
    its version is 0.12.0, it is very stable and extremely comfortable to work with.
  prefs: []
  type: TYPE_NORMAL
- en: It provides a selector API à la jQuery, which makes tests easy to write, even
    for frontend developers. Groovy is also a language that has some JavaScript influences
    that will also appeal to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add Geb with the support for Spock specifications to our classpath:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: 'Geb can be configured via a Groovy script found directly at the root of `src/integrationTest/groovy`,
    called `GebConfig.groovy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: In this configuration, we indicate where Geb will generate its reports and which
    driver to use. Reports in Geb are an enhanced version of screenshots, which also
    contains the current page in HTML. Their generation can be triggered at any moment
    by calling the `report` function inside a Geb test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite out first integration test with Geb:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: For the moment, it is very similar to FluentLenium. We can already see the `$`
    function, which will allow us to grab a DOM element via its selector. Here, we
    also state that we want the first `h2` in the page by giving the `0` index.
  prefs: []
  type: TYPE_NORMAL
- en: Page Objects with Geb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Page objects with Geb are a real pleasure to work with. We will create the same
    page objects that we did previously so that you can appreciate the differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Geb, the Page Objects must inherit from the `geb.Page` class. First, let''s
    create the `LoginPage`. I suggest avoiding putting it in the same package as the
    previous one. I created a package called `geb.pages`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can create the `ProfilePage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: This is basically the same page as before. Note the little `<<` to assign values
    to an input element. You could also call `setText` on them.
  prefs: []
  type: TYPE_NORMAL
- en: The `at` method is completely part of the framework, and Geb will automatically
    assert those when you navigate to the corresponding page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `SearchResultPage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: It's a bit shorter, thanks to the ability to reuse previously defined content
    for the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'With out the Page Object set up, we can write the test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: My, what a beauty! You can certainly write your user stories directly with Geb!
  prefs: []
  type: TYPE_NORMAL
- en: With our simple tests, we only scratched the surface of Geb. There is much more
    functionality available, and I encourage you to read the *Book of Geb*, a very
    fine piece of documentation available at [http://www.gebish.org/manual/current/](http://www.gebish.org/manual/current/).
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we added a bunch of tests in `src/test/java`. I chose to go
    with Groovy, so I deleted the duplicated tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00981.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `src/test/groovy` directory, I have refactored two tests as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00982.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In `src/integrationTest/groovy`, we have an integration test written with Geb:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00983.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we added an `integrationTest` task to the Gradle build. Run `gradle
    clean test` and `gradle clean integrationTest` to make sure that all your tests
    pass.
  prefs: []
  type: TYPE_NORMAL
- en: If the build is successful, we are ready for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've studied the differences between unit and integration
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how testing is a healthy habit that will give us confidence in what we
    build and what we ship. It will save us money and spare some headaches in the
    long run.
  prefs: []
  type: TYPE_NORMAL
- en: Spring works well with classical JUnit tests written in Java, and it has first-class
    support for integration tests. But we can also easily use other languages, such
    as Groovy, to make the tests more readable and easier to write.
  prefs: []
  type: TYPE_NORMAL
- en: Testing is undeniably one of the strongest points of the Spring framework and
    one of the main reasons to use dependency injection in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Stay tuned for the next chapter, where we will optimize our application so that
    it is ready to be deployed in the cloud!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7. Optimizing Your Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at different techniques to improve our application's
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement classical ways of optimizing a web application: cache control
    headers, Gzipping, an application cache, and ETags, as well as more reactive stuff,
    such as asynchronous method calls and WebSockets.'
  prefs: []
  type: TYPE_NORMAL
- en: A production profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to define an application properties file
    that will only be read while launching the application with a specific profile.
    We will use the same approach and create an `application-prod.properties` file
    in `src/main/resources`, right next to the existing `application.properties` file.
    This way, we will be able to configure the production environment with optimized
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: We will put a few properties in this file to get started. In [Chapter 2](part0141.xhtml#aid-46EVA2
    "Chapter 2. Handling Forms and Complex URL Mapping"), *Handling Forms and Complex
    URL Mapping*, we deactivated the Thymeleaf cache and forced translation bundles
    to reload on every access.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is great for developing but is useless and time consuming in production.
    So let''s fix that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: A cache period of `-1` means caching the bundle forever.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we launch our application with the "prod" profile, templates and bundles
    should be cached forever.
  prefs: []
  type: TYPE_NORMAL
- en: The properties coming from the "prod" profile will indeed overwrite the ones
    declared in our `application.properties` file.
  prefs: []
  type: TYPE_NORMAL
- en: Gzipping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Gzipping** is a compression algorithm widely understood by browsers. Your
    server will serve compressed responses, which will consume a few more CPU cycles
    but will save bandwidth.'
  prefs: []
  type: TYPE_NORMAL
- en: The client browser will then be charged for unzipping the resources and displaying
    them to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To leverage Tomcat''s Gzipping abilities, simply add the following line to
    the `application-prod.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: This will enable Tomcat's Gzipping compression when serving any file matching
    the MIME types specified in the list, and whose length is greater than 2048 bytes.
    You can set `server.tomcat.compression` to `force` to enforce compression or set
    it to a numerical value if you want to change the value for the minimal length
    of Gzipped assets.
  prefs: []
  type: TYPE_NORMAL
- en: If you want more control over the compression, say over the level of compression,
    or want to exclude user agents from compression, you can use the `GzipFilter`
    class in Jetty by adding the `org.eclipse.jetty:jetty-servlets` dependency to
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: This will automatically trigger the `GzipFilterAutoConfiguration` class, which
    can be configured with a handful of properties prefixed by `spring.http.gzip`.
    Have a look at `GzipFilterProperties` to understand its level of customization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the documentation at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#how-to-enable-http-response-compression)
    for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: Cache control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cache control is a set of HTTP headers sent by the server to control how the
    user's browser is allowed to cache resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we have seen that Spring Security automatically disables
    caching for secured resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to benefit from cache control, we must first disable that feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, launch the application, go to the main page, and check the Chrome developer
    console. You will see that our JavaScript files are Gzipped and cached, as marked
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cache control](img/image00984.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want more control over your cache, you could add handlers for your own
    resources in your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also override the Spring Security default settings. If we want to
    deactivate the "no cache control" policy for our API, we can change the `ApiSecurityConfiguration`
    class like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: Application cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our web requests have been compressed and cached, the next step we
    can take to reduce server load is to put the results of costly operations in a
    cache. The Twitter search takes some time and will consume our application request
    ratio on the Twitter API. With Spring, we can easily cache the search and return
    the same result each time the search is called with the same parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we need to do is activate Spring caching with the `@EnableCache`
    annotation. We also need to create a `CacheManager` that will resolve our caches.
    Let''s create a `CacheConfiguration` class in the `config` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we use the simplest possible cache abstraction. Other
    implementations are also available, such as `EhCacheCacheManager` or `GuavaCacheManager`,
    which we will use in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured our cache, we can use the `@Cacheable` annotation
    on our methods. When we do that, Spring will automatically cache the result of
    the method and associate it with the current parameters for retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: Spring needs to create a proxy around beans whose methods are cached. This typically
    means that calling a cached method inside of the same bean will not fail to use
    Spring's cache.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, in the `SearchService` class, the part where we call the search
    operations, would benefit greatly from caching.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a preliminary step, it would be good to put the code responsible for creating
    the `SearchParameters` class in a dedicated object called `SearchParamsBuilder`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: This will help us to create search parameters in our service.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to create a cache for our search results. We want each call to the
    Twitter API to be cached. Spring cache annotations rely on proxies to instrument
    the `@Cacheable` methods. We therefore need a new class with a method annotated
    with the `@Cacheable` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the Spring abstraction API, you don't know about the underlying
    implementation of the cache. Many will require both the return type and the parameter
    types of the cached method to be Serializable.
  prefs: []
  type: TYPE_NORMAL
- en: '`SearchParameters` is not Serializable, that''s why we will pass both the search
    type and the keyword (both strings) in the cached method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we want to put the `LightTweets` object in cache, we want to make them
    `Serializable`; this will ensure that they can always be written and read from
    any cache abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `SearchCache` class and put it in the `search.cache` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: It can't really get simpler than that. We used the `@Cacheable` annotation to
    specify the name of the cache that will be used. Different caches may have different
    policies.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we manually created a new `TwitterTemplate` method rather than injecting
    it like before. That's because we will have to access the cache from other threads
    a little bit later. In Spring Boot's `TwitterAutoConfiguration` class, the `Twitter`
    bean is bound to the request scope and is therefore not available outside of a
    Servlet thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'With those two new objects, the code of our `SearchService` class simply becomes
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: Note that we annotated the service with `@Profile("!async")`. This means that
    we only create this bean if the profile `async` is not activated.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we will create another implementation of the `TwitterSearch` class to
    be able to switch between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Neat! Say we restart our application and try a big request such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/search/mixed;keywords=docker,spring,spring%20boot,spring%20mvc,groovy,grails`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It will take a little time at first, but then our console will display the
    following log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: After that, if we hit refresh, the result will be displayed immediately and
    no cache miss will be seen in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it for our cache, but there is much more to the cache API. You can
    annotate methods with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@CachEvict`: This will remove an entry from the cache'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@CachePut`: This will put the result of a method into a cache without interfering
    with the method itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Caching`: This regroups the caching annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@CacheConfig`: This points to different caching configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@Cacheable` annotation can also be configured to cache results on certain
    conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on Spring cache, please see the following documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Cache invalidation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, search results will be cached forever. Using the default simple
    cache manager doesn''t give us a lot of options. There is one more thing that
    we can do to improve our application caching. Since we have Guava in our classpath,
    we can replace the existing cache manager in the cache configuration with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: This will build a cache expiring after 10 minutes and using soft values, meaning
    that the entries will be cleaned up if the JVM runs low on memory.
  prefs: []
  type: TYPE_NORMAL
- en: Try to fiddle around with Guava's cache builder. You can specify a smaller time
    unit for your testing, and even specify different cache policies.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the documentation at [https://code.google.com/p/guava-libraries/wiki/CachesExplained](https://code.google.com/p/guava-libraries/wiki/CachesExplained).
  prefs: []
  type: TYPE_NORMAL
- en: Distributed cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already have a Redis profile. If Redis is available, we could also use it
    as our cache provider. It would allow us to distribute the cache across multiple
    servers. Let''s change the `RedisConfig` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, if we run our application with the "Redis" profile,
    the Redis cache manager will be used instead of the one defined in the `CacheConfig`
    class since it is annotated with `@Primary`.
  prefs: []
  type: TYPE_NORMAL
- en: This will allow the cache to be distributed in case we want to scale on more
    than one server. The Redis template is used to serialize the cache return values
    and parameters, and will require objects to be `Serializable`.
  prefs: []
  type: TYPE_NORMAL
- en: Async methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is still a bottleneck in our application; when a user searches ten keywords,
    each search will be executed sequentially. We could easily improve the speed of
    our application by using different threads and launching all the searches at the
    same time.
  prefs: []
  type: TYPE_NORMAL
- en: To enable Spring's asynchronous capabilities, one must use the `@EnableAsync`
    annotation. This will transparently execute any method annotated with `@Async`
    using a `java.util.concurrent.Executor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to customize the default executor used by implementing the `AsyncConfigurer`
    interface. Let''s create a new configuration class called `AsyncConfig` in the
    `config` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, we ensure that no more than 10 threads will be allocated
    to handle our asynchronous tasks in the whole application. This is very important
    in a web application where each client has a dedicated thread. The more threads
    you use and the longer they block, the fewer client requests you can process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's annotate our search method and make it asynchronous. We will need to make
    it return a subtype of `Future`, a java concurrent class that represents an asynchronous
    result.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a new implementation of the `TwitterSearch` class that will query
    the search API in different threads. The implementation is a bit tricky so I'll
    break it down into small parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to annotate the method that will query the API with the `@Async`
    annotation to tell Spring to schedule the task using our executor. Again, Spring
    will use proxy to do its magic so this method has to be in a different class to
    the service calling it. It would also be nice if this component could use our
    cache. That would lead us to create this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: Don't create this class yet. Let's see what our service needs first.
  prefs: []
  type: TYPE_NORMAL
- en: The `ListenableFuture` abstraction allows us to add callbacks after the completion
    of the future, either in the case of correct results or if an exception occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The algorithm to wait for a bunch of asynchronous tasks would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: If you don't know the `CountDownLatch` method, it is just a simple blocking
    counter.
  prefs: []
  type: TYPE_NORMAL
- en: The `await()` method will wait until the latch reaches 0 to unlock the thread.
  prefs: []
  type: TYPE_NORMAL
- en: The `asyncFetch` method, shown in the preceding code, will attach a callback
    to each of our `asynFetch` methods. The callback will add the results to the `allTweets`
    list and decrement the latch. Once each callback has been called, the method will
    return all the tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Got it? Here is the final code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: Now, to use this implementation, we need to run the application with the `async`
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run it with multiple profiles active at the same time by separating
    them with commas, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--spring.profiles.active=redis,async`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we launch a search on multiple terms, we can see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: This shows that the different searches are done in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Java 8 actually introduced a new type called `CompletableFuture`, which is
    a much better API to manipulate futures. The main problem with completable futures
    is that no executor can work with them without a bit of code. This is outside
    of the scope of the article, but you can check my blog for an article on the subject:
    [http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html](http://geowarin.github.io/spring/2015/06/12/completable-futures-with-spring-async.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Disclaimer**'
  prefs: []
  type: TYPE_NORMAL
- en: The following sections contains a lot of JavaScript. Obviously, I think you
    should have a look at the code, especially if JavaScript is not your favorite
    language. It is time to learn it. That being said, even if WebSocket is insanely
    cool, it is not a requirement. You can safely skip ahead to the last chapter and
    deploy your application right now.
  prefs: []
  type: TYPE_NORMAL
- en: ETags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Twitter results are neatly cached, so a user refreshing the result page
    will not trigger an additional search on the Twitter API. However, the response
    will be sent to this user multiple times even if the results do not change, which
    will waste bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: An ETag is a hash of the data of a web response and is sent as a header. The
    client can memorize the ETag of a resource and send the last known version to
    the server with the `If-None-Match` header. This allows the server to answer `304
    Not Modified` if the request does not change in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring has a special Servlet filter, called `ShallowEtagHeaderFilter`, to handle
    ETags. Simply add it as a bean in the `MasterSpringMvc4Application` configuration
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: This will automatically generate ETags for your responses as long as the response
    has no cache control headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we interrogate our RESTful API, we can see that an ETag is sent along
    with the server response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we request the same resource one more time, specifying the last ETag
    that we know of in the `If-None-Match` headers, the server will automatically
    respond with a `304 Not Modified` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the parallel nature of our search, the tweets fetched for different keywords
    might arrive in different orders, which will make the ETag change. If you want
    this technique to work for multiple searches, please consider ordering your search
    results before sending them to the client.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to take advantage of that, we obviously need to rewrite our client
    code to handle them. We will see a simple solution to do that with jQuery, using
    the local storage of the browser to save the latest query of the user.
  prefs: []
  type: TYPE_NORMAL
- en: First, remove the `tweets` variable from our model; we won't do the search from
    the server anymore. You will have to modify a test or two to reflect this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going further, let''s add lodash to our JavaScript libraries. If you
    don''t know lodash, let''s say it is the Apache Utils of JavaScript. You can add
    it to your project dependencies like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: 'Add it to the `default.html` layout, just under the materialize''s JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: 'We will modify the `resultPage.html` file and leave the part where the tweets
    should appear empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will add a script element at the bottom of the page, just before closing
    the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding script will just be in charge of constructing the URL for our
    request. We will use it by issuing a simple jQuery AJAX call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the `beforeSend` callback to have a chance to modify the request
    headers just before the call is made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can easily read and write from local storage. The gotcha
    here is that local storage only works with strings so we have to parse and serialize
    the query object to JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can handle the response by retrieving the content from local storage if
    the HTTP status is `304 Not Modified`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `addTweet` function that you will see next, I''m using lodash, a very
    useful JavaScript utility library, to generate templates. The function to add
    tweets to the page can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: That was a lot of JavaScript! It would make more sense to generalize this pattern
    in a Single Page Application using a library such as Backbone.js. Hopefully, though,
    this will serve as a simple example of how to implement ETags in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to refresh the search page multiple times, you will see that the
    contents do not change and will be displayed immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ETags](img/image00985.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are other uses for ETags, such as optimistic locking for transactions
    (it lets you know on which version of an object the client is supposed to be working
    on at any time). It is also extra work on the server side to hash the data before
    sending it across, but it will save bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: WebSockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another kind of optimization we can think about is sending the data to the client
    as it becomes available to the server. Since we fetch results of the search in
    multiple threads, the data will come in multiple chunks. We could send them bit
    by bit instead of waiting for all the results.
  prefs: []
  type: TYPE_NORMAL
- en: Spring has excellent support for WebSockets, which is a protocol that allows
    clients to maintain a long-running connection to the server. Data can be pushed
    in web sockets on both ends of the connection and consumers will get the data
    in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a JavaScript library called SockJS to ensure compatibility with
    all browsers. Sockjs will transparently fall back on another strategy if our users
    have an outdated browser.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use StompJS to connect to our message broker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following library to your build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the WebJars to our default Thymeleaf template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure WebSockets in our application, we need to add a bit of configuration
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: This will configure the different channels available in our application. SockJS
    clients will connect to the `twitterSearch` endpoint and will push data to the
    server on `/ws/ channel` and be able to listen to `/topic/` for changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will allow us to inject a `SimpMessagingTemplate` in a new controller
    to push data to the client in the `/topic/searchResult` channel, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `resultPage`, the JavaScript code is really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: 'The `displayTweets` function remains essentially the same as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: Here you go! The client will now receive the results of all the searches in
    the application-- live!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before pushing this to production, it will require a little bit more work.
    Here are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Create subchannels for clients to privately listen to changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the channel when a client is done using it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add CSS transitions to the new tweets so the user can feel that it's real-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a real broker, such as RabbitMQ, to allow the backend to scale with connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is much more to WebSocket than just this simple example. Don't forget
    to have a look at the documentation at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we created two new configurations: `AsyncConfiguration`, which
    will allow us to use the `@Async` annotation to submit tasks to an executor, and
    `CacheConfiguration`, which will create a `CacheManager` interface and allow us
    to use the `@Cacheable` annotation. Since we can use Redis as a cache manager,
    we also amended the `RedisConfig` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We created a `SearchCache` class, which contained a cache of tweets, and we
    now have two `TwitterSearch` implementations to choose from: good old `SearchService`,
    which will fetch each result synchronously, and `ParallelSearchService`, which
    will issue each query in a different thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/image00986.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen two different philosophies relating to performance
    improvement. At the beginning, we tried to reduce the bandwidth used by our clients
    by caching data and using as few connections to our server as possible.
  prefs: []
  type: TYPE_NORMAL
- en: In the second part, though, we began to do something more advanced by allowing
    searches to be run in parallel and each client to remain in sync with a persistent
    connection to the server through web sockets. This will allow clients to receive
    updates in real time, and our application will feel more reactive but consume
    more threads.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly encourage you to polish the result before we move on to the next
    chapter and deploy our application for good!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8. Deploying Your Web Application to the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll take a tour of the different cloud providers, understand
    the challenges and benefits of a distributed architecture, and see how to deploy
    your web application to Pivotal Web Services and to Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many forms of cloud hosting. For developers, the choice will be mainly
    between a Platform as a Service (PaaS) and an Infrastructure as a Service (IaaS).
  prefs: []
  type: TYPE_NORMAL
- en: Using the latest, you will often have a bare metal machine that you can manage
    and on which you can install all the services required by your application.
  prefs: []
  type: TYPE_NORMAL
- en: If we leave aside technologies such as Docker (which is absolutely amazing,
    you should absolutely give it a try), this is really similar to traditional hosting
    where your operation team will have to set up and maintain an environment in which
    the application can run.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, PaaS makes it easy to deploy your application as you develop
    it with a simple push-to-deploy workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most well known providers are:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Foundry backed by Pivotal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift by Red Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku acquired by Salesforce in 2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these three providers come with different pros and cons. I will try
    to give you an overview of these.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Foundry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backed by Pivotal, the company behind Spring, Pivotal Web Service runs on Cloud
    Foundry, an open source PaaS maintained by a foundation, and comes with an interesting
    package.
  prefs: []
  type: TYPE_NORMAL
- en: They offer a 60 day free trial and their pricing is a function of the memory
    allocated for your instances and the number of instances you own.
  prefs: []
  type: TYPE_NORMAL
- en: Their prices range from $2.70 per month for the smallest (128 Mb) instance to
    $43.20 per month for the 2 GB instance.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to give it a try, no credit card is required for the free trial.
    They have a market place to easily install services, such as Redis or Postgre
    SQL, with rather limited free options. They have a good command-line utility to
    manage your application from your console. You can either use buildpacks or push
    a JAR directly for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Build packs will try to guess the stack that you are using and build your application
    in the most standard way (`mvn package` for Maven, `./gradlew stage` for Gradle,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the tutorial available at the following URL to deploy your application
    to Cloud Foundry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html](http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html)'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**OpenShift** is maintained by Red Hat and powered by OpenShift Origin, an
    open source facility running Docker containers on top of Google''s Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: It is priced well and offers a lot of freedom, as it is both a PaaS and an IaaS.
    Its pricing is based on gears, containers running an application, or a service
    such as Jenkins, or a database.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift has a free plan offering three small gears. Your application must
    be idle for 24 hours per month unless you enter your billing information.
  prefs: []
  type: TYPE_NORMAL
- en: Additional or bigger gears are billed at approximately $15 a month for the smallest,
    and $72 for the biggest.
  prefs: []
  type: TYPE_NORMAL
- en: To deploy a Spring Boot application on OpenShift, you will have to use the Do
    It Yourself cartridge. It is a bit more work than other buildpack-based PaaS but
    it is also easier to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the blog post for a Spring Boot tutorial with OpenShift, which
    is available at [http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html](http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html).
  prefs: []
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Heroku is a well known PaaS with extensive documentation and a code-centric
    approach based on build packs. It can connect to a lot of services called add-ons,
    but using them requires your billing information.
  prefs: []
  type: TYPE_NORMAL
- en: It is really interesting for a free project and is very fast to get started
    with. The downside is that it directly costs more than $25 per month if you want
    to scale up. Free instances will go into the sleep mode after 30 minutes of inactivity,
    which means free Heroku apps will always take as much as 30 seconds to load.
  prefs: []
  type: TYPE_NORMAL
- en: Heroku has a great administration dashboard and command-line tools. For this
    chapter, I chose Heroku because it is very straightforward. The concepts you will
    grasp here are applicable to most PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: You can follow most of the chapter and deploy your application without providing
    your credit card information as long as you do not use the Redis add-on. You won't
    be charged if you select the free plan.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your web application to Pivotal Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow this section if you want to deploy your application to Pivotal Web Services
    (PWS).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Cloud Foundry CLI tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do to create a Cloud Foundry application is to set
    up an account on PWS. This is documented at [http://docs.run.pivotal.io/starting/](http://docs.run.pivotal.io/starting/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be asked to create an organization and each new organization will
    have a default space (development) created within the organization. As shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Cloud Foundry CLI tools](img/image00987.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the left-hand side navigation bar, you will see a link to **Tools** from
    which you download the CLI. It is also available from the developer console. Select
    the appropriate package for your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Cloud Foundry CLI tools](img/image00988.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Assembling the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our application simply needs to be assembled for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing with PWS is that you don't have to push your sources to deploy.
    You can generate the JAR, push it, and everything will be autodetected.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can package this for deployment with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a jar file in the `build/libs` directory. At this point, you
    can execute the following command. The following command targets your deployment
    to your space within PWS (`run.pivotal.io`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have successfully logged in, you can push your jar with the following
    command. You will need to come up with an available name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot that the platform is performing on your behalf. It provisions
    a container and detects which buildpack is needed, in this case, Java.
  prefs: []
  type: TYPE_NORMAL
- en: It then installs the required JDK and uploads the application we pointed it
    to. It creates a route to the application, which it reports to us, and then launches
    the application for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can view the application on the developer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembling the application](img/image00989.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On selecting the highlighted route, the application will be available for use.
    Visit [http://msmvc4.cfapps.io](http://msmvc4.cfapps.io), then you will see the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembling the application](img/image00990.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bravo!
  prefs: []
  type: TYPE_NORMAL
- en: The only thing that will not work yet is the file upload. However, we will fix
    that in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Activating Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your application services, you can choose between many services. One of them
    is Redis Cloud, which has a free plan with 30 MB of storage. Go ahead and select
    this plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the form, choose whatever name you fancy and bind the service to your application.
    By default, Cloud Foundry will inject some properties in relation to the service
    in your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cloud.services.redis.connection.host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloud.services.redis.connection.port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloud.services.redis.connection.password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloud.services.redis.connection.uri`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These properties will always follow the same convention, so it will be easy
    to keep track of your services as you add more.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Cloud Foundry launches Spring applications and activates the Cloud
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can take advantage of this and create an `application-cloud.properties`
    file in `src/main/resources`, which will be used when our application is running
    on PWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: 'This will bind our Redis instance to our application and activate two additional
    profiles: `prod` and `redis`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also changed the path where the uploaded pictures will land. Note that using
    the file system on the cloud obeys different rules. Refer to the following link
    for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing we need to do is deactivate one Spring Session feature that
    will not be available on our hosted instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  prefs: []
  type: TYPE_NORMAL
- en: You will see that this configuration will also be applied on Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. You can reassemble your web application and push it again. Now, your
    sessions and application cache will be stored on Redis!
  prefs: []
  type: TYPE_NORMAL
- en: You may want to explore the marketplace for other available features such as
    binding to data or messaging services, scaling the application, and managing the
    health of the applications that are beyond the scope of this introduction.
  prefs: []
  type: TYPE_NORMAL
- en: Have fun and enjoy the productivity the platform provides!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your web application on Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will deploy your application on Heroku for free. We will
    even use the free Redis instance available to store our session and cache.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do to create a Heroku application is to download
    the command-line tools available at [https://toolbelt.heroku.com](https://toolbelt.heroku.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac, you can also install it with `brew` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an account on Heroku and use `heroku login` to link the toolbelt to
    your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go to your application root and type `heroku create appName --region
    eu`. Replace `appName` with a name of your choice. If you don''t provide a name,
    it will be generated automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: If you have already created an application with the UI, then go to your application
    root and simply add the remote `heroku git:remote -a yourapp`.
  prefs: []
  type: TYPE_NORMAL
- en: What these commands do is add a Git remote called `heroku` to our Git repository.
    The process of deploying on Heroku is just pushing one of your branches to Heroku.
    The Git hooks installed on the remote will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you type `git remote -v` command, you should see the `heroku` version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need two ingredients to run a Gradle application with Heroku: a task in
    our build file called `stage` and a tiny file that contains the command used to
    run our application, called `ProcFile`.'
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Gradle build pack will automatically try to run the `./gradlew stage` command
    on the root of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get more information on the Gradle build pack at [https://github.com/heroku/heroku-buildpack-gradle](https://github.com/heroku/heroku-buildpack-gradle).
  prefs: []
  type: TYPE_NORMAL
- en: 'We do not have a "stage" task yet. Add the following code to your `build.gradle`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: This will define a task called `stage`, which will copy the jar generated by
    Spring Boot at the root of the application and call it `app.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: The jar be much easier to find this way. The `stage` task depends on the `clean`
    task and the `build` task, which means that both of them will be executed before
    the stage task starts.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Gradle will try to optimize the task dependency graph. So, we must
    provide a hint and force the `clean` task to be run before `stage`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add a new instruction to the already existing `clean` task, which
    is to delete the generated `app.jar` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you run `./gradlew stage`, it should run the tests and put the packaged
    app at the root of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Procfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Heroku detects a Gradle application, it will automatically run a container
    with Java 8 installed. So, we have very little configuration to take care of.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need a file containing the shell command used to run our application.
    Create a file named `Procfile` at the root of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: There are several things to note here. First, we declare our application as
    a web application. We also redefine the port on which our application will run
    using an environment variable. This is very important as your app will cohabit
    with many others and only one port will be allocated to each one.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can see that our application will run using two profiles. The first
    is the `prod` profile, which we created in the previous chapter, to optimize the
    performance, and a new `heroku` profile that we will create in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: A Heroku profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We do not want to put sensible information, such as our Twitter app keys, into
    source control. So, we have to create some properties that will read those from
    the application environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: 'For this to work, you have to configure the two environment variables, which
    we discussed earlier, on Heroku. You can do this with the toolbelt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can go to your dashboard and configure the environment in
    the settings tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Heroku profile](img/image00991.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visit [https://devcenter.heroku.com/articles/config-vars](https://devcenter.heroku.com/articles/config-vars)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Running your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to run our application on Heroku!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven''t already done so, commit all your changes to your master branch.
    Now, simply push your master branch to the `heroku` remote with `git push heroku
    master`. This will download all the dependencies and build your application from
    scratch, so it can take a little time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: Once the application has been built, it will automatically run. Type `heroku
    logs` to see the latest logs or `heroku logs -t` to tail them.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see your application running in the console and if all goes as planned,
    you will be able to connect to [http://yourapp.herokuapp.com](http://yourapp.herokuapp.com).
    As shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running your application](img/image00992.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are live! It's time to tell your friends!
  prefs: []
  type: TYPE_NORMAL
- en: Activating Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To activate Redis in our application, we can choose between a few alternatives.
    The Heroku Redis add-on is the beta version. It is entirely free with 20 MB of
    storage, analytics, and logs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visit [https://elements.heroku.com/addons/heroku-redis](https://elements.heroku.com/addons/heroku-redis)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, you will have to provide your credit card details to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Redis add-on for your application, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: Now, that we have activated the add-on, an environment variable called `REDIS_URL`
    will be available when our application will be running on Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check that the variable is defined with the `heroku config` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the `RedisConnectionFactory` class does not understand URIs, we need
    to tweak it a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: We now have two Heroku-specific beans in the `RedisConfig` class. These beans
    will only be active if both the `redis` and `heroku` profiles are active.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we also deactivated some Spring Session configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Session will normally listen to events associated to destroyed session
    keys via the Redis Pub/Sub interface.
  prefs: []
  type: TYPE_NORMAL
- en: It will automatically try to configure the Redis environment to activate listeners
    on startup. In a secured environment like ours, adding listeners is not permitted
    unless you have an admin access.
  prefs: []
  type: TYPE_NORMAL
- en: These redis listeners are not really important in our case, so we can safely
    disable this behavior. For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify our `Procfile` file so that Heroku runs our application with
    the `redis` profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: Commit your change and push the code to Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: Improving your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a pretty good application deployed online but it's not uber useful nor
    original until you make it so.
  prefs: []
  type: TYPE_NORMAL
- en: Try to make it better and more personal. Once you're proud of your achievement,
    tweet your application URL with the `#masterspringmvc` hashtag on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to push the best application possible. There is so much that we didn''t
    do. Here are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete users' old pictures to avoid keeping unused pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Twitter authentication information to fill the user profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the user's account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See real-time searches happening on your app with a web socket channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let your imagination fly!
  prefs: []
  type: TYPE_NORMAL
- en: My version of the application is deployed on [http://masterspringmvc.herokuapp.com](http://masterspringmvc.herokuapp.com).
    I will improve some details to make the application a little more reactive. Try
    to spot the differences!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying our application on a cloud provider is really straightforward as it
    is a runnable jar, thanks to Spring Boot. Cloud deployment is very affordable
    nowadays and deploying a Java application has become almost too easy.
  prefs: []
  type: TYPE_NORMAL
- en: With sessions backed by Redis, we laid the basics of a scalable application.
    Indeed, we can effortlessly add multiple servers behind a load balancer and absorb
    high traffic on demand.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing that is not scalable is our WebSocket that will need additional
    work to run on top of a message broker, such as Rabbit MQ.
  prefs: []
  type: TYPE_NORMAL
- en: I can certainly remember a time where finding a host running a Tomcat was rare
    and pricey. Those days are long gone and the future belongs to web developers,
    so make it happen!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what we can do to make our application even
    better, discuss the technologies we haven't covered, talk about the Spring ecosystem
    in general, and the challenges of modern web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9. Beyond Spring Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll see how far we have come, the problems we've solved,
    and the ones left to be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about the Spring ecosystem in general, and persistence, deployment,
    and Single Page Applications in particular.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Web to data, Spring is a comprehensive ecosystem aiming to resolve
    all sorts of problems in a modular way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Spring ecosystem](img/image00993.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Check out the Spring IO platform at [https://spring.io/platform](https://spring.io/platform).
  prefs: []
  type: TYPE_NORMAL
- en: Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the core of the Spring framework, there is obviously a dependency injection
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: We only scratched the surface of the security features and the great integration
    of the framework with Groovy.
  prefs: []
  type: TYPE_NORMAL
- en: Execution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw in detail what Spring Boot is about -- bringing simplicity and cohesion
    to a vast network of subprojects.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to focus on what really matters, that is, your business code.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring XD project is also really interesting. Its goal is to provide tools
    to process, analyze, and transform or export your data, and has a clear focus
    on big data. For more information, visit [http://projects.spring.io/spring-xd](http://projects.spring.io/spring-xd).
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the things we haven't looked at while developing our application is how
    to store data in a database. In Pivotal's reference architecture, there is a tier
    devoted to both relational data and non-relational (NoSQL) data.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring ecosystem has provided a lot of interesting solutions under the label
    `spring-data`, which can be found at [http://projects.spring.io/spring-data/](http://projects.spring.io/spring-data/).
  prefs: []
  type: TYPE_NORMAL
- en: We glanced at Spring Data Redis when we built the cache but there is much more
    to Spring Data.
  prefs: []
  type: TYPE_NORMAL
- en: The basic concepts are shared among all the Spring Data projects, such as the
    template API, which is an abstraction to retrieve and store objects from a persistence
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data JPA ([http://projects.spring.io/spring-data-jpa/](http://projects.spring.io/spring-data-jpa/))
    and Spring Data Mongo ([http://projects.spring.io/spring-data-mongodb/](http://projects.spring.io/spring-data-mongodb/))
    are some of the most well known Spring Data projects. They let you operate on
    entities through repositories, simple interfaces that provide facilities to create
    queries, persisting objects, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Petri Kainulainen ([http://www.petrikainulainen.net/spring-data-jpa-tutorial/](http://www.petrikainulainen.net/spring-data-jpa-tutorial/))
    has a lot of thorough examples on Spring Data. It does not use the facilities
    that Spring Boot provides but you should be able to get started quite easily with
    guides, such as the one available at [https://spring.io/guides/gs/accessing-data-jpa/](https://spring.io/guides/gs/accessing-data-jpa/).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data REST is also a magical project that will semiautomatically expose
    your entities through a RESTful API. Visit [https://spring.io/guides/gs/accessing-data-rest/](https://spring.io/guides/gs/accessing-data-rest/)
    for a detailed tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Integration ([http://projects.spring.io/spring-integration](http://projects.spring.io/spring-integration))
    and Spring Reactor ([http://projectreactor.io](http://projectreactor.io)) are
    also two of my favorite Spring projects.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Reactor is the implementation of reactive streams by Pivotal. The idea
    is to provide fully nonblocking IO on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Integration, on the other hand, focuses on Enterprise Integration Patterns
    and lets you design channels to load and transform data coming from heterogeneous
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good, and simple, example of what you can accomplish with channels can be
    seen here: [http://ilopmar.github.io/contest/#_spring_boot_application](http://ilopmar.github.io/contest/#_spring_boot_application).'
  prefs: []
  type: TYPE_NORMAL
- en: If you have heterogeneous and/or complex subsystems with which your application
    has to communicate, it is definitely worth taking a look at.
  prefs: []
  type: TYPE_NORMAL
- en: The last project in the Spring ecosystem we haven't is Spring Batch, a really
    useful abstraction for processing high volumes of data for the daily operations
    of enterprise systems.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot provides the ability to run and distribute your Spring application
    as a simple JAR and is a wonderful success in that regard.
  prefs: []
  type: TYPE_NORMAL
- en: It is, without a doubt, a step in the right direction, but sometimes your web
    application isn't the only thing you want to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with a complex system with multiple servers and datasources, the
    work of the operation team can become quite a headache.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Who hasn't heard about Docker? It is the new cool kid in the container world
    and has become quite a success, thanks to its vibrant community.
  prefs: []
  type: TYPE_NORMAL
- en: The ideas behind Docker are not new, it leverages LinuX Containers (LXC) and
    cgroups to provide a fully isolated environment for applications to run in.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a tutorial on the Spring website that will guide you through your
    first steps with Docker at [https://spring.io/guides/gs/spring-boot-docker](https://spring.io/guides/gs/spring-boot-docker).
  prefs: []
  type: TYPE_NORMAL
- en: Pivotal Cloud Foundry has been using container technology for years in their
    container manager called Warden. They recently moved to Garden, an abstraction
    that supports not only Linux containers, but also Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: Garden is part of the latest release of Cloud Foundry (called Diego) that also
    allows Docker images as units of deployment.
  prefs: []
  type: TYPE_NORMAL
- en: A developer version of Cloud Foundry has also been released under the name Lattice,
    which can be found at [https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications](https://spring.io/blog/2015/04/06/lattice-and-spring-cloud-resilient-sub-structure-for-your-cloud-native-spring-applications).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test containers without the hassles of the command line, I recommend
    that you look at Kitematic. With this, you can run a Jenkins container or a MongoDB
    without installing the binaries on your system. Visit [https://kitematic.com/](https://kitematic.com/)
    for more information on Kitematic.
  prefs: []
  type: TYPE_NORMAL
- en: Another tool in the Docker ecosystem that's worth mentioning is Docker Compose.
    It allows you to run and link multiple containers with a single configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://java.dzone.com/articles/spring-session-demonstration](http://java.dzone.com/articles/spring-session-demonstration)
    for a good example of a Spring Boot application composed of two web servers, a
    Redis to store users' sessions, and an Nginx instance to do the load balancing.
    Of course, there is much more to learn about Docker Swarm, which will allow you
    to scale your application with a simple command, and Docker Machine, which will
    create Docker hosts for you on any machine, including Cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: Google Kurbernetes and Apache Mesos are also great examples of distributed systems
    that benefit greatly from Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Single Page Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of today's web applications are written in JavaScript. Java is relegated
    to the backend and has the important role of dealing with data and business rules.
    However, much of the GUI stuff is now happening on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: There is a good reason for that in terms of responsiveness and user experience,
    but those applications add extra complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Developers now have to be fluent in both Java and JavaScript and the number
    of frameworks can be a little overwhelming at first.
  prefs: []
  type: TYPE_NORMAL
- en: The players
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to dig deeper into JavaScript, I would highly recommend Dave Syer's
    tutorial with Spring and AngularJS, which is available at [https://spring.io/guides/tutorials/spring-security-and-angular-js](https://spring.io/guides/tutorials/spring-security-and-angular-js).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a JavaScript MVC framework can be a little difficult too. AngularJS
    has had the favor of the Java community for years but people seem to be moving
    away from it. For more information, visit [https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa](https://gist.github.com/tdd/5ba48ba5a2a179f2d0fa).
  prefs: []
  type: TYPE_NORMAL
- en: 'Other alternatives include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BackboneJS**: This is a really simple MVC framework that sits on top of Underscore
    and jQuery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ember**: This is a comprehensive system that provides more facilities for
    interacting with data and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React**: This is the newest project from Facebook. It has a new and very
    interesting philosophy for dealing with views. Its learning curve is quite steep,
    but it is a very interesting system to look at in terms of designing a GUI framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React is my favorite project right now. It lets you focus on the view and its
    one-way data flow makes it easy to reason with the state of your application.
    However, it is still in version 0.13\. This makes it both very interesting, as
    the vibrant community always comes up with new solutions and ideas, and somewhat
    disturbing, as the road ahead stills seems long even after more than 2 years of
    open source development. Visit [https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html](https://facebook.github.io/react/blog/2014/03/28/the-road-to-1.0.html)
    for information on "The Road to 1.0".
  prefs: []
  type: TYPE_NORMAL
- en: The future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I see a lot of Java developers ranting about the permissiveness of JavaScript
    and having a hard time dealing with the fact that it is not a strongly typed language.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other alternatives, such as **Typescript** ([http://www.typescriptlang.org/](http://www.typescriptlang.org/)),
    which are really interesting and provide the things that we, Java developers,
    have always used to make our lives simpler: interfaces, classes, helpful support
    in IDE, and autocompletion.'
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people place bets on the next version (2.0) of Angular that will quite
    notoriously break everything. I think it's for the best. Their collaboration with
    Microsoft's team that makes Typescript is really unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most JEE developers will smile when they hear that one of the big new features
    of ECMAScript, that allows the development of this new framework, is decorators,
    some kind of annotation mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn about the difference between annotation and decorators, visit [http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html](http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is evolving quickly and ECMAScript 6 has a lot of interesting features
    that makes it a really advanced and sophisticated language. Don't miss the boat;
    take a look at [https://github.com/lukehoban/es6features](https://github.com/lukehoban/es6features)
    before it's too late!
  prefs: []
  type: TYPE_NORMAL
- en: The web component specification is also a game changer. The goal is to provide
    reusable UI components, and both the React team and the Angular 2 teams have plans
    to interface with it. Google has developed an interesting project on top of web
    components called Polymer that is now in version 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the article at [http://ng-learn.org/2014/12/Polymer/](http://ng-learn.org/2014/12/Polymer/)
    to learn more about the state of these projects.
  prefs: []
  type: TYPE_NORMAL
- en: Going stateless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When dealing with a JavaScript client, relying on session cookies isn't the
    best option. Most applications choose to go completely stateless and identify
    clients with a token.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to stick with Spring Session, take a look at the `HeaderHttpSessionStrategy`
    class. It has an implementation that sends and retrieves sessions with an HTTP
    header. An example of this can be found at [https://drissamri.be/blog/2015/05/21/spr](https://drissamri.be/blog/2015/05/21/spr).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring ecosystem is wide and has a lot to offer to modern web application
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: It is hard to find a problem that hasn't been addressed by one of the Spring
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Time to say good bye! I hope you enjoyed our little journey with Spring MVC
    and that it will help you develop with pleasure and create amazing projects, at
    work or in your spare time.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A. Bibliography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This learning path has been prepared for you to create enterprise-level applications
    using the Spring MVC framework. It comprises of the following Packt products:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Spring Essentials, Shameer Kunjumohamed and Hamidreza Sattari*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Spring MVC Cookbook, Alex Bretet*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Spring MVC 4, Geoffroy Warins*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@After annotation / [@Before and @After annotations](part0125.xhtml#aid-3N6MA2
    "@Before and @After annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@AfterClass annotation / [@BeforeClass and @AfterClass annotations](part0125.xhtml#aid-3N6MA2
    "@BeforeClass and @AfterClass annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@AspectJ annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declaring / [Declaring an @Aspect annotation](part0025.xhtml#aid-NQU22 "Declaring
    an @Aspect annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointcuts / [Pointcuts](part0025.xhtml#aid-NQU22 "Pointcuts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advices / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@AspectJ annotation based AOP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [@AspectJ annotation-based AOP](part0025.xhtml#aid-NQU22 "@AspectJ annotation-based
    AOP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: acceptance tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [How should I test my code?](part0176.xhtml#aid-57R301 "How should I
    test my code?"), [The acceptance tests](part0179.xhtml#aid-5AMKM1 "The acceptance
    tests"), [Writing acceptance tests](part0184.xhtml#aid-5FF7G2 "Writing acceptance
    tests")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle, configuration / [The Gradle configuration](part0184.xhtml#aid-5FF7G2
    "The Gradle configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with FluentLenium / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2
    "Our first FluentLenium test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Groovy / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making
    our tests more Groovy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACID (Atomic, Consistent, Isolated, Durable)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Transaction support](part0050.xhtml#aid-1FLS41 "Spring Transaction
    support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACID properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced Message Queuing Protocol (AMQP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks, stacking with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks, consuming with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or JMS?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: by pivotal, URL / [A great introduction to AMQP by pivotal](part0121.xhtml#aid-3JCK22
    "A great introduction to AMQP by pivotal")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application events, publishing / [A better way to publish application events](part0121.xhtml#aid-3JCK22
    "A better way to publish application events")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advices, @AspectJ annotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotations / [Advices](part0025.xhtml#aid-NQU22 "Advices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Around Advice / [The @Around Advice](part0025.xhtml#aid-NQU22 "The @Around
    Advice")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advice parameters, accessing / [Accessing Advice parameters](part0025.xhtml#aid-NQU22
    "Accessing Advice parameters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anemic Domain Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: angular-translate.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for translating client-side / [Translating client-side with angular-translate.js](part0116.xhtml#aid-3EK182
    "Translating client-side with angular-translate.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Translating client-side with angular-translate.js](part0116.xhtml#aid-3EK182
    "Translating client-side with angular-translate.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for designing client-side MVC pattern / [Designing a client-side MVC pattern
    with AngularJS](part0090.xhtml#aid-2LQIK2 "Designing a client-side MVC pattern
    with AngularJS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0090.xhtml#aid-2LQIK2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL, for documentation on forms / [See also](part0117.xhtml#aid-3FIHQ2 "See
    also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS Controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [AngularJS Controllers](part0090.xhtml#aid-2LQIK2 "AngularJS Controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bi-directional DOM-scope binding / [Bidirectional DOM-scope binding](part0090.xhtml#aid-2LQIK2
    "Bidirectional DOM-scope binding")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS Directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [AngularJS directives](part0090.xhtml#aid-2LQIK2 "AngularJS directives")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ng-repeat / [ng-repeat](part0090.xhtml#aid-2LQIK2 "ng-repeat")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ng-if / [ng-if](part0090.xhtml#aid-2LQIK2 "ng-if")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS factories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [AngularJS factories](part0090.xhtml#aid-2LQIK2 "AngularJS factories")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dependency injection / [Dependency injection](part0090.xhtml#aid-2LQIK2 "Dependency
    injection")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS JavaScript library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2 "Setting
    up the DOM and creating modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: angular routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Angular routes](part0098.xhtml#aid-2TEN42 "Angular routes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap pagination with / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42
    "Bootstrap pagination with the Angular UI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotation-defined controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Controller annotation / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestMapping annotation / [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing with
    Spring Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@CreatedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@CreatedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@LastModifiedBy / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@LastModifiedDate / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2 "Auditing
    with Spring Data")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AssertFalse / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AssertFalse.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AssertTrue / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AssertTrue.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalMax / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalMax.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalMin / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalMin.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digits / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digits.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Max / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Max.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NotNull / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NotNull.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Past / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Past.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size.List / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2 "On-field
    constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Commons Logging Bridge / [Apache Commons Logging Bridge](part0128.xhtml#aid-3Q2802
    "Apache Commons Logging Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alternatives / [Alternatives to Apache HTTP](part0102.xhtml#aid-318PC2 "Alternatives
    to Apache HTTP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to proxy Tomcats(s) / [Configuring Apache HTTP to proxy your Tomcat(s)](part0102.xhtml#aid-318PC2
    "Configuring Apache HTTP to proxy your Tomcat(s)"), [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it..."), [How it works...](part0102.xhtml#aid-318PC2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Apache HTTP configuration](part0102.xhtml#aid-318PC2 "Apache HTTP configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: virtual-hosting / [Virtual-hosting](part0102.xhtml#aid-318PC2 "Virtual-hosting")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mod_proxy module / [The mod_proxy module](part0102.xhtml#aid-318PC2 "The mod_proxy
    module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ProxyPassReverse / [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mod_alias module / [The mod_alias module](part0102.xhtml#aid-318PC2 "The mod_alias
    module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat connectors / [Tomcat connectors](part0102.xhtml#aid-318PC2 "Tomcat connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP doc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [A scalable model](part0121.xhtml#aid-3JCK22 "A scalable model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing on MS Windows, URL / [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing on Linux / Mac OS, URL / [How to do it...](part0102.xhtml#aid-318PC2
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache JServ Protocol (AJP) connectors / [AJP connectors](part0102.xhtml#aid-318PC2
    "AJP connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documenting, with Swagger / [Documenting and exposing an API with Swagger](part0100.xhtml#aid-2VBO82
    "Documenting and exposing an API with Swagger"), [How to do it...](part0100.xhtml#aid-2VBO82
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exposing, with Swagger / [Documenting and exposing an API with Swagger](part0100.xhtml#aid-2VBO82
    "Documenting and exposing an API with Swagger"), [How to do it...](part0100.xhtml#aid-2VBO82
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exposed metadata / [An exposed metadata](part0100.xhtml#aid-2VBO82 "An exposed
    metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building, for Taskify app / [Building API endpoints for the Taskify app](part0072.xhtml#aid-24L8G1
    "Building API endpoints for the Taskify app")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UserController.java / [UserController.java](part0072.xhtml#aid-24L8G1 "UserController.java")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TaskController.java / [TaskController.java](part0072.xhtml#aid-24L8G1 "TaskController.java")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API server app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building / [Building the API server app](part0072.xhtml#aid-24L8G1 "Building
    the API server app")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: project, setting up / [Setting up and configuring the project](part0072.xhtml#aid-24L8G1
    "Setting up and configuring the project")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User and Task, defining / [Defining the model definitions – User and Task](part0072.xhtml#aid-24L8G1
    "Defining the model definitions – User and Task")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [API versioning](part0157.xhtml#aid-4LN8A1 "API versioning")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [API versioning](part0157.xhtml#aid-4LN8A1 "API versioning")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logging, Log4j2 used / [Modern application Logging with Log4j2](part0128.xhtml#aid-3Q2802
    "Modern application Logging with Log4j2"), [How to do it…](part0128.xhtml#aid-3Q2802
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Application cache](part0190.xhtml#aid-5L6AS2 "Application cache")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Application cache](part0190.xhtml#aid-5L6AS2 "Application
    cache")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invalidation / [Cache invalidation](part0190.xhtml#aid-5L6AS2 "Cache invalidation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: distributed cache / [Distributed cache](part0190.xhtml#aid-5L6AS2 "Distributed
    cache")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: argument resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA2 criteria API / [The JPA2 criteria API and Spring Data JPA specifications](part0098.xhtml#aid-2TEN42
    "The JPA2 criteria API and Spring Data JPA specifications")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA specifications / [The JPA2 criteria API and Spring Data JPA
    specifications](part0098.xhtml#aid-2TEN42 "The JPA2 criteria API and Spring Data
    JPA specifications")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpecificationArgumentResolver / [SpecificationArgumentResolver](part0098.xhtml#aid-2TEN42
    "SpecificationArgumentResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aspect Oriented Programing (AOP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Aspect Oriented Programming](part0025.xhtml#aid-NQU22 "Aspect Oriented
    Programming")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static AOP / [Static and dynamic AOP](part0025.xhtml#aid-NQU22 "Static and dynamic
    AOP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic AOP / [Static and dynamic AOP](part0025.xhtml#aid-NQU22 "Static and
    dynamic AOP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concepts / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: terminology / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring AOP / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML schema based AOP / [XML schema-based AOP](part0025.xhtml#aid-NQU22 "XML
    schema-based AOP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@AspectJ annotation based AOP / [@AspectJ annotation-based AOP](part0025.xhtml#aid-NQU22
    "@AspectJ annotation-based AOP")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: asynchronous request processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Spring MVC / [Asynchronous request processing in Spring MVC](part0035.xhtml#aid-11C3M1
    "Asynchronous request processing in Spring MVC")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: async methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Async methods](part0191.xhtml#aid-5M4RE2 "Async methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Async methods](part0191.xhtml#aid-5M4RE2 "Async methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atomikos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Authentication](part0057.xhtml#aid-1MBG22 "Authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testing / [Testing the authentication](part0183.xhtml#aid-5EGMU1 "Testing the
    authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AuthenticationManager interface / [The AuthenticationManager interface](part0104.xhtml#aid-335QG2
    "The AuthenticationManager interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Authorization](part0058.xhtml#aid-1NA0K2 "Authorization")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorized URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticating / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorized users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticating / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@Before annotation / [@Before and @After annotations](part0125.xhtml#aid-3N6MA2
    "@Before and @After annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@BeforeClass annotation / [@BeforeClass and @AfterClass annotations](part0125.xhtml#aid-3N6MA2
    "@BeforeClass and @AfterClass annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BackboneJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [Basic authentication](part0168.xhtml#aid-506UG2 "Basic authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for authorized users / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized
    users")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for authorized URLs / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized
    URLs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thymeleaf security tags, using / [Thymeleaf security tags](part0168.xhtml#aid-506UG2
    "Thymeleaf security tags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BasicAuthenticationFilter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2 "BasicAuthenticationFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with authenticationEntryPoint / [With an authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "With an authenticationEntryPoint")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BASIC scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticating / [Authenticating over a BASIC scheme](part0104.xhtml#aid-335QG2
    "Authenticating over a BASIC scheme"), [How to do it...](part0104.xhtml#aid-335QG2
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security namespace / [The Spring Security namespace](part0104.xhtml#aid-335QG2
    "The Spring Security namespace")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AuthenticationManager interface / [The AuthenticationManager interface](part0104.xhtml#aid-335QG2
    "The AuthenticationManager interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security reference / [In the Spring Security reference](part0104.xhtml#aid-335QG2
    "In the Spring Security reference")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remember-me cookie/feature / [The remember-me cookie/feature](part0104.xhtml#aid-335QG2
    "The remember-me cookie/feature")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bean definition profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: working with / [Working with bean definition profiles](part0020.xhtml#aid-J2B81
    "Working with bean definition profiles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bean dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: injecting / [Injecting bean dependencies](part0017.xhtml#aid-G6PI2 "Injecting
    bean dependencies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constructor-based dependency injection / [Constructor-based Dependency Injection](part0017.xhtml#aid-G6PI2
    "Constructor-based Dependency Injection")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setter-based dependency injection / [Setter-based Dependency Injection](part0017.xhtml#aid-G6PI2
    "Setter-based Dependency Injection")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeanFactory interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bean life cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hooking / [Hooking to bean life cycles](part0018.xhtml#aid-H5A41 "Hooking to
    bean life cycles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InitializingBean, implementing / [Implementing InitializingBean and DisposableBean](part0018.xhtml#aid-H5A41
    "Implementing InitializingBean and DisposableBean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DisposableBean, implementing / [Implementing InitializingBean and DisposableBean](part0018.xhtml#aid-H5A41
    "Implementing InitializingBean and DisposableBean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@PostConstruct, annotating on @Components / [Annotating @PostConstruct and
    @PreDestroy on @Components](part0018.xhtml#aid-H5A41 "Annotating @PostConstruct
    and @PreDestroy on @Components")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@PreDestroy, annotating on @Components / [Annotating @PostConstruct and @PreDestroy
    on @Components](part0018.xhtml#aid-H5A41 "Annotating @PostConstruct and @PreDestroy
    on @Components")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: init-method and destroy-method attributes / [The init-method and destroy-method
    attributes of <bean/>](part0018.xhtml#aid-H5A41 "The init-method and destroy-method
    attributes of <bean/>")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container"), [Beans in detail](part0017.xhtml#aid-G6PI2 "Beans in detail")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: definition / [Bean definition](part0017.xhtml#aid-G6PI2 "Bean definition")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiating / [Instantiating beans](part0017.xhtml#aid-G6PI2 "Instantiating
    beans")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiating, with constructors / [With constructors](part0017.xhtml#aid-G6PI2
    "With constructors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiating, with static factory-method / [With a static factory-method](part0017.xhtml#aid-G6PI2
    "With a static factory-method")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiating, with instance factory-method / [With an instance factory-method](part0017.xhtml#aid-G6PI2
    "With an instance factory-method")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cleaner bean definitions, with namespace shortcuts / [Cleaner bean definitions
    with namespace shortcuts](part0017.xhtml#aid-G6PI2 "Cleaner bean definitions with
    namespace shortcuts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list, wiring as dependency / [Wiring a List as a dependency](part0017.xhtml#aid-G6PI2
    "Wiring a List as a dependency")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: map, wiring as dependency / [Wiring a Map as a dependency](part0017.xhtml#aid-G6PI2
    "Wiring a Map as a dependency")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dependencies, autowiring / [Autowiring dependencies](part0017.xhtml#aid-G6PI2
    "Autowiring dependencies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scoping / [Bean scoping](part0017.xhtml#aid-G6PI2 "Bean scoping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bean validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for validating resources / [Getting ready](part0115.xhtml#aid-3DLGM2 "Getting
    ready"), [How to do it…](part0115.xhtml#aid-3DLGM2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring validator, using / [Using Spring validator](part0115.xhtml#aid-3DLGM2
    "Using Spring validator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-303/JSR-349 bean validation / [Using JSR-303/JSR-349 Bean Validation](part0115.xhtml#aid-3DLGM2
    "Using JSR-303/JSR-349 Bean Validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ValidationUnits utility / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom validator, creating / [Creating a custom validator](part0115.xhtml#aid-3DLGM2
    "Creating a custom validator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [The Spring reference on validation](part0115.xhtml#aid-3DLGM2
    "The Spring reference on validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binding requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Binding requests and marshalling responses](part0096.xhtml#aid-2RHM02
    "Binding requests and marshalling responses"), [Getting ready](part0096.xhtml#aid-2RHM02
    "Getting ready"), [How to do it...](part0096.xhtml#aid-2RHM02 "How to do it..."),
    [How it works...](part0096.xhtml#aid-2RHM02 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitronix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boilerplate logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abstraction / [Abstraction of boilerplate logic](part0127.xhtml#aid-3P3NE2 "Abstraction
    of boilerplate logic")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auto-generated IDs, extracting / [Extraction of auto-generated IDs](part0127.xhtml#aid-3P3NE2
    "Extraction of auto-generated IDs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bookapp-rest application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Our MessageSource bean definition](part0116.xhtml#aid-3EK182 "Our MessageSource
    bean definition")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: responsive single page Webdesign, setting-up / [Setting up and customizing a
    responsive single page webdesign with Bootstrap](part0087.xhtml#aid-2IV0U2 "Setting
    up and customizing a responsive single page webdesign with Bootstrap"), [How to
    do it...](part0087.xhtml#aid-2IV0U2 "How to do it..."), [Installing a Bootstrap
    theme](part0087.xhtml#aid-2IV0U2 "Installing a Bootstrap theme")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: highlights / [Bootstrap highlights](part0087.xhtml#aid-2IV0U2 "Bootstrap highlights")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0087.xhtml#aid-2IV0U2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navbars / [Navbars](part0087.xhtml#aid-2IV0U2 "Navbars ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hero units / [Hero units](part0087.xhtml#aid-2IV0U2 "Hero units")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alerts / [Alerts](part0087.xhtml#aid-2IV0U2 "Alerts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: badges and labels / [Badges and labels](part0087.xhtml#aid-2IV0U2 "Badges and
    labels")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap CSS utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform Buttons / [Uniform Buttons](part0087.xhtml#aid-2IV0U2 "Uniform Buttons")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: icons / [Icons](part0087.xhtml#aid-2IV0U2 "Icons")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tables / [Tables](part0087.xhtml#aid-2IV0U2 "Tables")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap pagination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Angular UI / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42
    "Bootstrap pagination with the Angular UI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Bootstrap pagination with the Angular UI](part0098.xhtml#aid-2TEN42 "Bootstrap
    pagination with the Angular UI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap scaffolding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Bootstrap scaffolding](part0087.xhtml#aid-2IV0U2 "Bootstrap scaffolding")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid System and responsive design / [Grid system and responsive design](part0087.xhtml#aid-2IV0U2
    "Grid system and responsive design")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns, defining / [Defining columns](part0087.xhtml#aid-2IV0U2 "Defining columns")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column, offsetting / [Offsetting and nesting](part0087.xhtml#aid-2IV0U2 "Offsetting
    and nesting")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nesting / [Offsetting and nesting](part0087.xhtml#aid-2IV0U2 "Offsetting and
    nesting")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fluid gridding / [Fluid gridding](part0087.xhtml#aid-2IV0U2 "Fluid gridding")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2 "Customising
    a Bootstrap theme")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [The theme installation](part0087.xhtml#aid-2IV0U2 "The theme installation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broker channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSON (Binary JSON) format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: build life cycle, Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Maven's build life cycles](part0082.xhtml#aid-2E6E42 "Maven's build
    life cycles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clean life cycle / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default life cycle / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plugins / [Plugin goals](part0082.xhtml#aid-2E6E42 "Plugin goals")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: built-in life cycle / [Built-in life cycle bindings](part0082.xhtml#aid-2E6E42
    "Built-in life cycle bindings")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven commands / [About Maven commands](part0082.xhtml#aid-2E6E42 "About Maven
    commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@ComponentScan annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Configuration annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@ContextConfiguration annotation / [The @ContextConfiguration annotation](part0127.xhtml#aid-3P3NE2
    "The @ContextConfiguration annotation"), [There is more…](part0127.xhtml#aid-3P3NE2
    "There is more…")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@ControllerAdvice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global exception handling with / [Global exception handling with @ControllerAdvice](part0099.xhtml#aid-2UD7M2
    "Global exception handling with @ControllerAdvice")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support ResponseEntityExceptionHandler class / [The support ResponseEntityExceptionHandler
    class](part0099.xhtml#aid-2UD7M2 "The support ResponseEntityExceptionHandler class")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uniform error response object / [A uniform error response object](part0099.xhtml#aid-2UD7M2
    "A uniform error response object")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Controller annotation / [@Controller](part0085.xhtml#aid-2H1VQ2 "@Controller")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache-Control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [See also](part0114.xhtml#aid-3CN042 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cache control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Cache control](part0189.xhtml#aid-5K7QA1 "Cache control")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [Cache control](part0189.xhtml#aid-5K7QA1 "Cache control")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cargo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration testing with / [Integration testing with Cargo, Rest-assured, and
    Maven failsafe](part0126.xhtml#aid-3O56S2 "Integration testing with Cargo, Rest-assured,
    and Maven failsafe"), [How to do it…](part0126.xhtml#aid-3O56S2 "How to do it…"),
    [How it works...](part0126.xhtml#aid-3O56S2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codehaus Cargo / [Code Cargo](part0126.xhtml#aid-3O56S2 "Code Cargo")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven Plugin / [Cargo Maven Plugin](part0126.xhtml#aid-3O56S2 "Cargo Maven Plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [About Cargo](part0126.xhtml#aid-3O56S2 "About Cargo")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [About Cargo](part0126.xhtml#aid-3O56S2 "About Cargo")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cargo Maven Plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Cargo Maven Plugin](part0126.xhtml#aid-3O56S2 "Cargo Maven Plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven phases, binding to / [Binding to Maven phases](part0126.xhtml#aid-3O56S2
    "Binding to Maven phases")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: existing Tomcat instance, using / [Using an existing Tomcat instance](part0126.xhtml#aid-3O56S2
    "Using an existing Tomcat instance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cascade attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Cascade attribute](part0093.xhtml#aid-2OM4A2 "The Cascade attribute")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate Signing Request (CSR)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [About SSL and TLS](part0106.xhtml#aid-352RK2 "About SSL and TLS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The check point](part0166.xhtml#aid-4U9TC1 "The check point")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clean command / [Clean](part0124.xhtml#aid-3M85O2 "Clean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clean life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pre-clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: post-clean phase / [The clean life cycle](part0082.xhtml#aid-2E6E42 "The clean
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating, with HTML5/AngularJS / [Validating client-side forms with HTML5
    AngularJS](part0117.xhtml#aid-3FIHQ2 "Validating client-side forms with HTML5
    AngularJS"), [How to do it…](part0117.xhtml#aid-3FIHQ2 "How to do it…"), [How
    it works...](part0117.xhtml#aid-3FIHQ2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control variables / [Control variables in forms](part0117.xhtml#aid-3FIHQ2 "Control
    variables in forms")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: state transclusions / [Form state transclusions and style](part0117.xhtml#aid-3FIHQ2
    "Form state transclusions and style")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: style / [Form state transclusions and style](part0117.xhtml#aid-3FIHQ2 "Form
    state transclusions and style")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side forms, validation-constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: required / [Required](part0117.xhtml#aid-3FIHQ2 "Required")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minimum/maximum length / [Minimum/maximum length](part0117.xhtml#aid-3FIHQ2
    "Minimum/maximum length")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regex pattern / [Regex pattern](part0117.xhtml#aid-3FIHQ2 "Regex pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side MVC pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: designing, AngularJS used / [Designing a client-side MVC pattern with AngularJS](part0090.xhtml#aid-2LQIK2
    "Designing a client-side MVC pattern with AngularJS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client validation, profile page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enabling / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Foundry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Foundry CLI tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2
    "Installing the Cloud Foundry CLI tools")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2 "Installing
    the Cloud Foundry CLI tools")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cloudstreetmarket-parent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: benefits / [Why should I test my code?](part0175.xhtml#aid-56SIE1 "Why should
    I test my code?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests / [How should I test my code?](part0176.xhtml#aid-57R301 "How should
    I test my code?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: acceptance tests / [How should I test my code?](part0176.xhtml#aid-57R301 "How
    should I test my code?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: component stereotype annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Component / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Service / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Repository / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Controller / [Component stereotype annotations](part0016.xhtml#aid-F8902 "Component
    stereotype annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RestController / [Component stereotype annotations](part0016.xhtml#aid-F8902
    "Component stereotype annotations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration metadata, Dependency Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Configuration metadata](part0016.xhtml#aid-F8902 "Configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-based configuration metadata / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotation-based configuration metadata / [Annotation-based configuration metadata](part0016.xhtml#aid-F8902
    "Annotation-based configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-based, versus annotation-based configuration / [XML-based versus annotation-based
    configuration](part0016.xhtml#aid-F8902 "XML-based versus annotation-based configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: component stereotype annotations / [Component stereotype annotations](part0016.xhtml#aid-F8902
    "Component stereotype annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java-based configuration metadata / [Java-based configuration metadata](part0016.xhtml#aid-F8902
    "Java-based configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR 330 standard annotations / [JSR 330 standard annotations](part0016.xhtml#aid-F8902
    "JSR 330 standard annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constructor-based DI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Constructor-based or setter-based DI – which is better?](part0017.xhtml#aid-G6PI2
    "Constructor-based or setter-based DI – which is better?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constructor injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: container-level default init and destroy methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Container-level default-init-method and default-destroy-method](part0019.xhtml#aid-I3QM1
    "Container-level default-init-method and default-destroy-method")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: container-managed transactions (CMT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: content negotiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [How to do it...](part0097.xhtml#aid-2SG6I2 "How to do it..."),
    [How it works...](part0097.xhtml#aid-2SG6I2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML marshalling, support for / [Support for XML marshalling](part0097.xhtml#aid-2SG6I2
    "Support for XML marshalling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContentNegotiationManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: negotiation strategies with / [Negotiation strategies with ContentNegotiationManager](part0097.xhtml#aid-2SG6I2
    "Negotiation strategies with ContentNegotiationManager")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: accept header / [The Accept header](part0097.xhtml#aid-2SG6I2 "The Accept header")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file extension suffix, in URL path / [The file extension suffix in the URL path](part0097.xhtml#aid-2SG6I2
    "The file extension suffix in the URL path")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: request parameter / [The request parameter](part0097.xhtml#aid-2SG6I2 "The request
    parameter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Activation Framework / [Java Activation Framework](part0097.xhtml#aid-2SG6I2
    "Java Activation Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContentNegotiationManagerFactoryBean JavaDoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The ContentNegotiationManagerFactoryBean JavaDoc](part0097.xhtml#aid-2SG6I2
    "The ContentNegotiationManagerFactoryBean JavaDoc")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internationalizing, for REST / [Internationalizing messages and contents for
    REST](part0116.xhtml#aid-3EK182 "Internationalizing messages and contents for
    REST")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic translation, implementing on backend / [Backend](part0116.xhtml#aid-3EK182
    "Backend")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic translation, implementing on frontend / [Frontend](part0116.xhtml#aid-3EK182
    "Frontend"), [How it works...](part0116.xhtml#aid-3EK182 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Why should I test my code?](part0175.xhtml#aid-56SIE1 "Why
    should I test my code?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, with simple URL mapping / [Configuring a controller with simple
    URL mapping](part0085.xhtml#aid-2H1VQ2 "Configuring a controller with simple URL
    mapping"), [How to do it...](part0085.xhtml#aid-2H1VQ2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controller method-handler signatures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Controller method-handler signatures](part0085.xhtml#aid-2H1VQ2 "Controller
    method-handler signatures")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: method arguments types, supported / [Supported method arguments types](part0085.xhtml#aid-2H1VQ2
    "Supported method arguments types")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotations for method arguments, supported / [Supported annotations for method
    arguments](part0085.xhtml#aid-2H1VQ2 "Supported annotations for method arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return types, supported / [Supported return Types](part0085.xhtml#aid-2H1VQ2
    "Supported return Types")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Controllers in detail](part0034.xhtml#aid-10DJ42 "Controllers in detail")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: request URLs, mapping with @RequestMapping / [Mapping request URLs with @RequestMapping](part0034.xhtml#aid-10DJ42
    "Mapping request URLs with @RequestMapping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URI template patterns, with @PathVariable annotation / [URI template patterns
    with the @PathVariable annotation](part0034.xhtml#aid-10DJ42 "URI template patterns
    with the @PathVariable annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameters, binding with @RequestParam annotation / [Binding parameters with
    the @RequestParam annotation](part0034.xhtml#aid-10DJ42 "Binding parameters with
    the @RequestParam annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: request handler method arguments / [Request handler method arguments](part0034.xhtml#aid-10DJ42
    "Request handler method arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: request handler method return types / [Request handler method return types](part0034.xhtml#aid-10DJ42
    "Request handler method return types")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: model attributes, setting / [Setting Model attributes](part0034.xhtml#aid-10DJ42
    "Setting Model attributes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful services, building for JSON and XML media / [Building RESTful services
    for JSON and XML media](part0034.xhtml#aid-10DJ42 "Building RESTful services for
    JSON and XML media")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful service, building with RestController / [Building a RESTful service
    with RestController](part0034.xhtml#aid-10DJ42 "Building a RESTful service with
    RestController")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorizing on / [Authorizing on services and controllers](part0107.xhtml#aid-361C62
    "Authorizing on services and controllers"), [How to do it...](part0107.xhtml#aid-361C62
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control variables, client-side forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified/Unmodified state / [Modified/Unmodified state](part0117.xhtml#aid-3FIHQ2
    "Modified/Unmodified state")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $error property / [Errors](part0117.xhtml#aid-3FIHQ2 "Errors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ConversionService API / [The ConversionService API](part0096.xhtml#aid-2RHM02
    "The ConversionService API")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: core modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Why did we create core modules?](part0082.xhtml#aid-2E6E42 "Why
    did we create core modules?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create Read Update Delete (CRUD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery (csrf) / [Our <http> configuration](part0104.xhtml#aid-335QG2
    "Our <http> configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cross-site request forgery (CSRF) attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Authentication](part0057.xhtml#aid-1MBG22 "Authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross Site Request Forgery (CSRF)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Authorized URLs](part0168.xhtml#aid-506UG2 "Authorized URLs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Implementation-specific constraints](part0115.xhtml#aid-3DLGM2
    "Implementation-specific constraints")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom error page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Custom error pages](part0150.xhtml#aid-4F1KC1 "Custom error pages")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Creating a custom scope](part0017.xhtml#aid-G6PI2 "Creating a custom
    scope")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Creating a custom validator](part0115.xhtml#aid-3DLGM2 "Creating a custom
    validator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DAO support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [DAO support and @Repository annotation](part0047.xhtml#aid-1CQAE1 "DAO
    support and @Repository annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: retrieving, from third-party API with OAuth / [Retrieving data from a third-party
    API with OAuth](part0112.xhtml#aid-3APV02 "Retrieving data from a third-party
    API with OAuth"), [How to do it…](part0112.xhtml#aid-3APV02 "How to do it…"),
    [How it works...](part0112.xhtml#aid-3APV02 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo!, financial data / [Introduction to the financial data of Yahoo!](part0112.xhtml#aid-3APV02
    "Introduction to the financial data of Yahoo!")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: graph, generation/display / [Graph generation/display](part0112.xhtml#aid-3APV02
    "Graph generation/display")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: financial data, pulling / [How is the financial data pulled/refreshed?](part0112.xhtml#aid-3APV02
    "How is the financial data pulled/refreshed?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: financial data, refreshing / [How is the financial data pulled/refreshed?](part0112.xhtml#aid-3APV02
    "How is the financial data pulled/refreshed?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: third-party services, calling / [Calling third-party services](part0112.xhtml#aid-3APV02
    "Calling third-party services")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API providers, existing / [Spring Social — existing API providers](part0112.xhtml#aid-3APV02
    "Spring Social — existing API providers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data-supply implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: injection of services, via Interfaces / [Injection of services via interfaces](part0088.xhtml#aid-2JTHG2
    "Injection of services via interfaces")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dummy implementation, selecting / [How does Spring choose the dummy implementations?](part0088.xhtml#aid-2JTHG2
    "How does Spring choose the dummy implementations?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DTOs, used in View layer / [DTOs to be used in View layer](part0088.xhtml#aid-2JTHG2
    "DTOs to be used in View layer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dummy service implementations / [Dummy service implementations](part0088.xhtml#aid-2JTHG2
    "Dummy service implementations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data access objects (DAOs) / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database Migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automating, FlyWay used / [Automating Database Migrations with FlyWay](part0124.xhtml#aid-3M85O2
    "Automating Database Migrations with FlyWay"), [How to do it…](part0124.xhtml#aid-3M85O2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataSource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [Configuring DataSource](part0044.xhtml#aid-19UOO1 "Configuring
    DataSource")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference / [Configuring DataSource](part0044.xhtml#aid-19UOO1 "Configuring
    DataSource")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: datasource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2 "The
    Spring-managed DataSource bean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Transfer Object (DTO)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative transaction management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Declarative transaction management](part0051.xhtml#aid-1GKCM2 "Declarative
    transaction management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: proxy mode / [Transactional modes – proxy and AspectJ](part0051.xhtml#aid-1GKCM2
    "Transactional modes – proxy and AspectJ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AspectJ mode / [Transactional modes – proxy and AspectJ](part0051.xhtml#aid-1GKCM2
    "Transactional modes – proxy and AspectJ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transactional behavior, defining / [Defining transactional behavior](part0051.xhtml#aid-1GKCM2
    "Defining transactional behavior")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rollback rules, setting / [Setting rollback rules](part0051.xhtml#aid-1GKCM2
    "Setting rollback rules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validate / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initialize / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate-resources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-resources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compile / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-classes / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate-test-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-test-sources / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate-test-resources / [The default life cycle](part0082.xhtml#aid-2E6E42
    "The default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-test-resources / [The default life cycle](part0082.xhtml#aid-2E6E42
    "The default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test-compile / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: process-test-classes / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: prepare-package / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: package / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pre-integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default
    life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: post-integration-test / [The default life cycle](part0082.xhtml#aid-2E6E42 "The
    default life cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: verify / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: install / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deploy / [The default life cycle](part0082.xhtml#aid-2E6E42 "The default life
    cycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dependency injection / [Dependency injection](part0090.xhtml#aid-2LQIK2 "Dependency
    injection")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency Injection (DI) / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Dependency Injection](part0016.xhtml#aid-F8902 "Dependency Injection"),
    [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What does the
    Spring Framework bring?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring IoC container / [The Spring IoC container](part0016.xhtml#aid-F8902 "The
    Spring IoC container")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration metadata / [Configuration metadata](part0016.xhtml#aid-F8902 "Configuration
    metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency Injection, with scoped beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Dependency Injection with scoped beans](part0017.xhtml#aid-G6PI2 "Dependency
    Injection with scoped beans")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deployable modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name, selecting / [How did we choose the names for deployable modules?](part0082.xhtml#aid-2E6E42
    "How did we choose the names for deployable modules?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The deployment](part0202.xhtml#aid-60KHK1 "The deployment")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Setting up the development environment](part0014.xhtml#aid-DB7S1
    "Setting up the development environment")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dispatcher Servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: architecture / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DispatcherServlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [DispatcherServlet explained](part0033.xhtml#aid-VF2I1 "DispatcherServlet
    explained")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebApplicationContext, using / [WebApplicationContext – ApplicationContext for
    the Web](part0033.xhtml#aid-VF2I1 "WebApplicationContext – ApplicationContext
    for the Web")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supporting beans / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beans supporting / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")/ [DispatcherServlet – the
    Spring MVC entrypoint](part0085.xhtml#aid-2H1VQ2 "DispatcherServlet – the Spring
    MVC entrypoint")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: distributed cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [Distributed cache](part0190.xhtml#aid-5L6AS2 "Distributed cache")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: distributed sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS configuration / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: edition / [In production – editing DNS records](part0102.xhtml#aid-318PC2 "In
    production – editing DNS records")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Docker](part0202.xhtml#aid-60KHK1 "Docker")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Swagger / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document Object Model (DOM) / [One app per HTML document](part0090.xhtml#aid-2LQIK2
    "One app per HTML document")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2
    "Setting up the DOM and creating modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM-scope binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bi-directional / [Bidirectional DOM-scope binding](part0090.xhtml#aid-2LQIK2
    "Bidirectional DOM-scope binding")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain Driven Design (DDD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: domain objects and entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Domain objects and entities](part0049.xhtml#aid-1ENBI2 "Domain objects
    and entities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query resolution methods / [Query resolution methods](part0049.xhtml#aid-1ENBI2
    "Query resolution methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Query annotation, using / [Using the @Query annotation](part0049.xhtml#aid-1ENBI2
    "Using the @Query annotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data web support extensions / [Spring Data web support extensions](part0049.xhtml#aid-1ENBI2
    "Spring Data web support extensions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auditing, with Spring Data / [Auditing with Spring Data](part0049.xhtml#aid-1ENBI2
    "Auditing with Spring Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain Object Security (ACLs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Domain Object Security (ACLs)](part0107.xhtml#aid-361C62 "Domain Object
    Security (ACLs)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DTOs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: turning, into Spring HATEOAS resources / [Turning DTOs into Spring HATEOAS resources](part0109.xhtml#aid-37UDA2
    "Turning DTOs into Spring HATEOAS resources"), [How to do it…](part0109.xhtml#aid-37UDA2
    "How to do it…"), [How it works...](part0109.xhtml#aid-37UDA2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@EnableAutoConfiguration annotation / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, for Java 8 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, for Maven 3 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, for Tomcat 8 / [Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8](part0081.xhtml#aid-2D7TI2 "Configuring Eclipse for Java 8, Maven 3, and Tomcat
    8"), [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eclipse.ini file / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini
    file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -vm option, setting / [Setting the –vm option](part0081.xhtml#aid-2D7TI2 "Setting
    the –vm option")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM arguments, customizing / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2
    "Customizing JVM arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK compliance level, modifying / [Changing the JDK compliance level](part0081.xhtml#aid-2D7TI2
    "Changing the JDK compliance level")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven, configuring / [Configuring Maven](part0081.xhtml#aid-2D7TI2 "Configuring
    Maven")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repository manager / [A repository manager](part0081.xhtml#aid-2D7TI2 "A repository
    manager")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat 8, integrating / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2
    "Tomcat 8 inside Eclipse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GIT, configuring / [Configuring GIT in Eclipse](part0085.xhtml#aid-2H1VQ2 "Configuring
    GIT in Eclipse"), [How it works...](part0085.xhtml#aid-2H1VQ2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse.ini file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eclipse.ini file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The eclipse.ini file](part0081.xhtml#aid-2D7TI2 "The eclipse.ini file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: need for / [Why making use of the Eclipse IDE?](part0079.xhtml#aid-2BASE1 "Why
    making use of the Eclipse IDE?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: downloading, for Java EE developers / [How to do it...](part0080.xhtml#aid-2C9D01
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, for Java EE developers / [How to do it...](part0080.xhtml#aid-2C9D01
    "How to do it..."), [Eclipse for Java EE developers](part0080.xhtml#aid-2C9D01
    "Eclipse for Java EE developers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM, selecting / [Choosing a JVM](part0080.xhtml#aid-2C9D01 "Choosing a JVM")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java SE 8 / [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EJB3 entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Getting ready](part0093.xhtml#aid-2OM4A2 "Getting ready"), [How
    to do it...](part0093.xhtml#aid-2OM4A2 "How to do it..."), [How it works...](part0093.xhtml#aid-2OM4A2
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requisites / [Entity requirements](part0093.xhtml#aid-2OM4A2 "Entity requirements")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: schema, mapping / [Mapping the schema](part0093.xhtml#aid-2OM4A2 "Mapping the
    schema")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance, defining / [Defining inheritance](part0093.xhtml#aid-2OM4A2 "Defining
    inheritance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relationships, defining / [Defining relationships](part0093.xhtml#aid-2OM4A2
    "Defining relationships")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: embedded databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using embedded databases](part0045.xhtml#aid-1AT9A1 "Using embedded
    databases")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EmbeddedServletContainerCustomizer interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling file
    upload errors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling file
    upload errors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks"), [Introducing
    Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: anatomy / [The anatomy of an Ember application](part0063.xhtml#aid-1S2JE1 "The
    anatomy of an Ember application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: router / [Routers](part0063.xhtml#aid-1S2JE1 "Routers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: routes or route handlers / [Routes or route handlers](part0063.xhtml#aid-1S2JE1
    "Routes or route handlers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: templates / [Templates](part0063.xhtml#aid-1S2JE1 "Templates")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: components / [Components](part0063.xhtml#aid-1S2JE1 "Components")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: models / [Models](part0063.xhtml#aid-1S2JE1 "Models")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controllers / [Controllers](part0063.xhtml#aid-1S2JE1 "Controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: input helpers / [Input helpers](part0063.xhtml#aid-1S2JE1 "Input helpers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom helpers / [Custom helpers](part0063.xhtml#aid-1S2JE1 "Custom helpers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializers / [Initializers](part0063.xhtml#aid-1S2JE1 "Initializers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: services / [Services](part0063.xhtml#aid-1S2JE1 "Services")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js"),
    [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with Ember CLI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: working with / [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with
    Ember CLI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: features / [Working with Ember CLI](part0064.xhtml#aid-1T1402 "Working with
    Ember CLI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Setting up Ember CLI](part0064.xhtml#aid-1T1402 "Setting up Ember
    CLI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commands / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: project structure / [The Ember project structure](part0064.xhtml#aid-1T1402
    "The Ember project structure")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POD structure / [Working with the POD structure](part0064.xhtml#aid-1T1402 "Working
    with the POD structure")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember new <appname> / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember init / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember build / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember server (or serve) / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember generate <generatortype> <name> <options> / [Getting started with Ember
    CLI commands](part0064.xhtml#aid-1T1402 "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember destroy <generatortype> <name> <options> / [Getting started with Ember
    CLI commands](part0064.xhtml#aid-1T1402 "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember test / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ember install <addon-name> / [Getting started with Ember CLI commands](part0064.xhtml#aid-1T1402
    "Getting started with Ember CLI commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, persisting with / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1
    "Persisting data with Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DS.Model / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DS.Store / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DS.Adapter / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1 "Persisting
    data with Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DS.Serializer / [Persisting data with Ember Data](part0070.xhtml#aid-22O7C1
    "Persisting data with Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: architecture / [Ember Data architecture](part0070.xhtml#aid-22O7C1 "Ember Data
    architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: models, building / [Defining models](part0070.xhtml#aid-22O7C1 "Defining models")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: model relationships, defining / [Defining model relationships](part0070.xhtml#aid-22O7C1
    "Defining model relationships")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember development stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember object model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Understanding the Ember object model](part0065.xhtml#aid-1TVKI1 "Understanding
    the Ember object model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: types (classes), declaring / [Declaring types (classes) and instances](part0065.xhtml#aid-1TVKI1
    "Declaring types (classes) and instances")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instances, declaring / [Declaring types (classes) and instances](part0065.xhtml#aid-1TVKI1
    "Declaring types (classes) and instances")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: properties, accessing / [Accessing and mutating properties](part0065.xhtml#aid-1TVKI1
    "Accessing and mutating properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: properties, mutating / [Accessing and mutating properties](part0065.xhtml#aid-1TVKI1
    "Accessing and mutating properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: computed properties / [Computed properties](part0065.xhtml#aid-1TVKI1 "Computed
    properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: property observers / [Property observers](part0065.xhtml#aid-1TVKI1 "Property
    observers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collections, working with / [Working with collections](part0066.xhtml#aid-1UU541
    "Working with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.Array / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.ArrayProxy / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.MutableArray / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.Enumerable / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.NativeArray / [Working with collections](part0066.xhtml#aid-1UU541 "Working
    with collections")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Edition (EE) / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or
    JMS?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enterprise integration (EAI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise JavaBeans (EJB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Java Beans (EJB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Entities' benefits](part0091.xhtml#aid-2MP361 "The Entities' benefits")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: benefits / [The Entities' benefits](part0091.xhtml#aid-2MP361 "The Entities'
    benefits")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entities, OAuth2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resource owner / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client or third-party application / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorization server / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resource server / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2
    "The OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entity manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Entity manager and its persistence context](part0091.xhtml#aid-2MP361
    "The Entity manager and its persistence context")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: persistence context / [The Entity manager and its persistence context](part0091.xhtml#aid-2MP361
    "The Entity manager and its persistence context")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EntityManagerFactory bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The EntityManagerFactory bean and its persistence unit](part0092.xhtml#aid-2NNJO2
    "The EntityManagerFactory bean and its persistence unit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erlang
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: translating / [Translating the error messages](part0148.xhtml#aid-4D4J81 "Translating
    the error messages")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [See also](part0114.xhtml#aid-3CN042 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [ETags](part0192.xhtml#aid-5N3C02 "ETags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exception handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling, in Spring Data layer / [Handling exceptions in the Spring Data layer](part0046.xhtml#aid-1BRPS1
    "Handling exceptions in the Spring Data layer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling, globally / [Getting ready](part0099.xhtml#aid-2UD7M2 "Getting ready"),
    [How to do it...](part0099.xhtml#aid-2UD7M2 "How to do it..."), [How it works...](part0099.xhtml#aid-2UD7M2
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: fallback controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, ViewResolver used / [Configuring a fallback controller using ViewResolver](part0086.xhtml#aid-2I0GC2
    "Configuring a fallback controller using ViewResolver"), [How to do it...](part0086.xhtml#aid-2I0GC2
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URI template patterns / [URI template patterns](part0086.xhtml#aid-2I0GC2 "URI
    template patterns")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fallback option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fastboot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: feedEk jQuery plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FetchType attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The FetchType attribute](part0093.xhtml#aid-2OM4A2 "The FetchType attribute")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: profile picture, uploading / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading
    a file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uploaded images, displaying on web page / [Writing an image to the response](part0147.xhtml#aid-4C62M2
    "Writing an image to the response")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: upload properties, managing / [Managing upload properties](part0147.xhtml#aid-4C62M2
    "Managing upload properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uploaded picture, displaying / [Displaying the uploaded picture](part0147.xhtml#aid-4C62M2
    "Displaying the uploaded picture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: errors, handling / [Handling file upload errors](part0147.xhtml#aid-4C62M2 "Handling
    file upload errors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation / [Putting it together](part0152.xhtml#aid-4GULG2 "Putting it
    together")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check point / [The check point](part0153.xhtml#aid-4HT621 "The check point")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling / [Handling file uploads](part0040.xhtml#aid-164MG1 "Handling file
    uploads")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [How to do it...](part0098.xhtml#aid-2TEN42 "How to do it..."), [How
    it works...](part0098.xhtml#aid-2TEN42 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FluentLenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for acceptance tests / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2
    "Our first FluentLenium test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page Objects / [Page Objects with FluentLenium](part0184.xhtml#aid-5FF7G2 "Page
    Objects with FluentLenium")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlyWay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for automating Database Migrations / [Automating Database Migrations with
    FlyWay](part0124.xhtml#aid-3M85O2 "Automating Database Migrations with FlyWay"),
    [How to do it…](part0124.xhtml#aid-3M85O2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commands / [A limited number of commands](part0124.xhtml#aid-3M85O2 "A limited
    number of commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: maven plugin / [About Flyway Maven plugin](part0124.xhtml#aid-3M85O2 "About
    Flyway Maven plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration parameters, URL / [About Flyway Maven plugin](part0124.xhtml#aid-3M85O2
    "About Flyway Maven plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: official documentation / [The official documentation](part0124.xhtml#aid-3M85O2
    "The official documentation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub repository, URL / [The official documentation](part0124.xhtml#aid-3M85O2
    "The official documentation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlyWay, commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [A limited number of commands](part0124.xhtml#aid-3M85O2 "A limited
    number of commands")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migrate / [Migrate](part0124.xhtml#aid-3M85O2 "Migrate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clean / [Clean](part0124.xhtml#aid-3M85O2 "Clean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: info / [Info](part0124.xhtml#aid-3M85O2 "Info")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validate / [Validate](part0124.xhtml#aid-3M85O2 "Validate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: baseline / [Baseline](part0124.xhtml#aid-3M85O2 "Baseline")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: garbage collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GDAXI index code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it…](part0110.xhtml#aid-38STS2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for integration tests / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2
    "Integration tests with Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2 "Integration
    tests with Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page Objects / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects
    with Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects
    with Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: empty directory / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a
    file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GIT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: downloading / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Downloading and installing GIT](part0085.xhtml#aid-2H1VQ2 "Downloading
    and installing GIT")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, in Eclipse / [Configuring GIT in Eclipse](part0085.xhtml#aid-2H1VQ2
    "Configuring GIT in Eclipse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: versus local transactions / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google protocol buffers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration / [The Gradle configuration](part0184.xhtml#aid-5FF7G2 "The Gradle
    configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GrantedAuthority interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The GrantedAuthority interface](part0103.xhtml#aid-3279U2 "The GrantedAuthority
    interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groovy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: acceptance tests / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2
    "Making our tests more Groovy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our
    tests more Groovy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our tests
    more Groovy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groovy Development Kit (GDK)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Making our tests more Groovy](part0184.xhtml#aid-5FF7G2 "Making our
    tests more Groovy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gzipping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Gzipping](part0188.xhtml#aid-5J99O1 "Gzipping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HandlerMapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HAProxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Alternatives to Apache HTTP](part0102.xhtml#aid-318PC2 "Alternatives
    to Apache HTTP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [See also](part0114.xhtml#aid-3CN042 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heap memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Young generation / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old generation / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application, deploying / [Deploying your web application on Heroku](part0198.xhtml#aid-5SQFC2
    "Deploying your web application on Heroku")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: command-line tools, installing / [Installing the tools](part0198.xhtml#aid-5SQFC2
    "Installing the tools")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Installing the tools](part0198.xhtml#aid-5SQFC2 "Installing the tools")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application, setting up / [Setting up the application](part0198.xhtml#aid-5SQFC2
    "Setting up the application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle, running / [Gradle](part0198.xhtml#aid-5SQFC2 "Gradle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procfile, running / [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: profile, creating / [A Heroku profile](part0198.xhtml#aid-5SQFC2 "A Heroku profile")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application, executing / [Running your application](part0198.xhtml#aid-5SQFC2
    "Running your application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis, activating / [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating
    Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku Redis add-on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hibernate Query Language (HQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HikariCP DataSource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [See also](part0092.xhtml#aid-2NNJO2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0092.xhtml#aid-2NNJO2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alias / [An alias for the host](part0102.xhtml#aid-318PC2 "An alias for the
    host")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting / [Choosing your host](part0196.xhtml#aid-5QTE81 "Choosing your host")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Foundry / [Cloud Foundry](part0196.xhtml#aid-5QTE81 "Cloud Foundry")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku / [Heroku](part0196.xhtml#aid-5QTE81 "Heroku")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hosts aliasing / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5/AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side forms, validating / [Validating client-side forms with HTML5 AngularJS](part0117.xhtml#aid-3FIHQ2
    "Validating client-side forms with HTML5 AngularJS"), [How to do it…](part0117.xhtml#aid-3FIHQ2
    "How to do it…"), [How it works...](part0117.xhtml#aid-3FIHQ2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: module autobootstrap / [Module autobootstrap](part0090.xhtml#aid-2LQIK2 "Module
    autobootstrap")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: module autobootstrap, manual / [Manual module bootstrap](part0090.xhtml#aid-2LQIK2
    "Manual module bootstrap")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP/1.1 specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [HTTP/1.1 specifications – RFC 7231 semantics and content](part0114.xhtml#aid-3CN042
    "HTTP/1.1 specifications – RFC 7231 semantics and content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requisites / [Basic requirements](part0114.xhtml#aid-3CN042 "Basic requirements")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safe methods / [Safe and Idempotent methods](part0114.xhtml#aid-3CN042 "Safe
    and Idempotent methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Idempotent methods / [Safe and Idempotent methods](part0114.xhtml#aid-3CN042
    "Safe and Idempotent methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: method-specific constraints / [Other method-specific constraints](part0114.xhtml#aid-3CN042
    "Other method-specific constraints")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Useful HTTP codes](part0158.xhtml#aid-4MLOS1 "Useful HTTP codes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Useful HTTP codes](part0158.xhtml#aid-4MLOS1 "Useful HTTP codes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP connectors / [HTTP connectors](part0102.xhtml#aid-318PC2 "HTTP connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0102.xhtml#aid-318PC2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: httpie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [httpie](part0160.xhtml#aid-4OIQ01 "httpie")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HttpMessageConverters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [HttpMessageConverters](part0114.xhtml#aid-3CN042 "HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: native HttpMessageConverters / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042
    "Provided HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MappingJackson2HttpMessageConverter, using / [Using MappingJackson2HttpMessageConverter](part0114.xhtml#aid-3CN042
    "Using MappingJackson2HttpMessageConverter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST handlers, extending to / [Extending REST handlers to all HTTP methods](part0114.xhtml#aid-3CN042
    "Extending REST handlers to all HTTP methods"), [How to do it…](part0114.xhtml#aid-3CN042
    "How to do it…"), [How it works...](part0114.xhtml#aid-3CN042 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: profile, storing / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2
    "Placing the profile in a session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2 "Placing
    the profile in a session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Status Codes / [HTTP Status Codes](part0099.xhtml#aid-2UD7M2 "HTTP Status
    Codes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP verbs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GET / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HEAD / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DELETE / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PUT / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POST / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PATCH / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OPTIONS / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2 "Level 2 – HTTP verbs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hypermedia-driven API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: links, building / [Building links for a hypermedia-driven API](part0110.xhtml#aid-38STS2
    "Building links for a hypermedia-driven API"), [How to do it…](part0110.xhtml#aid-38STS2
    "How to do it…"), [How it works...](part0110.xhtml#aid-38STS2 "How it works..."),
    [Building links](part0110.xhtml#aid-38STS2 "Building links")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resource assemblers / [Resource assemblers](part0110.xhtml#aid-38STS2 "Resource
    assemblers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PagedResourcesAssembler / [PagedResourcesAssembler](part0110.xhtml#aid-38STS2
    "PagedResourcesAssembler")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EntityLinks / [EntityLinks](part0110.xhtml#aid-38STS2 "EntityLinks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ControllerLinkBuilder / [ControllerLinkBuilder](part0110.xhtml#aid-38STS2 "ControllerLinkBuilder")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regular expression, in @RequestMapping / [The use of regular expressions in
    @RequestMapping](part0110.xhtml#aid-38STS2 "The use of regular expressions in
    @RequestMapping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypermedia as the Engine of Application State (HATEOAS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction](part0108.xhtml#aid-36VSO1 "Introduction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypertext Application Language (HAL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0110.xhtml#aid-38STS2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypertext As The Engine Of Application State (HATEOAS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Level 3 – Hypermedia controls](part0156.xhtml#aid-4KONO2 "Level 3 –
    Hypermedia controls")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iconmonstr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Writing an image to the response](part0147.xhtml#aid-4C62M2 "Writing
    an image to the response")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDE (Integrated Development Environment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Entity requirements](part0093.xhtml#aid-2OM4A2 "Entity requirements")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ID exposure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: info command / [Info](part0124.xhtml#aid-3M85O2 "Info")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance, EJB3 entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Defining inheritance](part0093.xhtml#aid-2OM4A2 "Defining inheritance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-table strategy / [The single-table strategy](part0093.xhtml#aid-2OM4A2
    "The single-table strategy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table-per-class strategy / [The table-per-class strategy](part0093.xhtml#aid-2OM4A2
    "The table-per-class strategy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance, of Maven dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Inheritance of Maven dependencies](part0083.xhtml#aid-2F4UM2 "Inheritance
    of Maven dependencies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic inheritance / [Basic inheritance](part0083.xhtml#aid-2F4UM2 "Basic inheritance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: managed inheritance / [Managed inheritance](part0083.xhtml#aid-2F4UM2 "Managed
    inheritance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Beans, injecting / [Injecting Spring Beans into integration tests](part0127.xhtml#aid-3P3NE2
    "Injecting Spring Beans into integration tests"), [How to do it…](part0127.xhtml#aid-3P3NE2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Geb / [Integration tests with Geb](part0184.xhtml#aid-5FF7G2 "Integration
    tests with Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interceptors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Changing the locale](part0143.xhtml#aid-48C0E2 "Changing the locale")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internationalization (i18n)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Internationalization](part0143.xhtml#aid-48C0E2 "Internationalization")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: locale, modifying / [Changing the locale](part0143.xhtml#aid-48C0E2 "Changing
    the locale")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application text, translating / [Translating the application text](part0143.xhtml#aid-48C0E2
    "Translating the application text")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data list, handling in form / [A list in a form](part0143.xhtml#aid-48C0E2 "A
    list in a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet of Things (IoT) / [Microservice architectures](part0084.xhtml#aid-2G3F81
    "Microservice architectures")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Service Provider (ISP) / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inversion of Control(IOC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What
    does the Spring Framework bring?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inversion of Control (IoC) container / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: J
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jackson 2.x extension component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JaCoCo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0125.xhtml#aid-3N6MA2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jar dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jar module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name, selecting / [How did we choose the jar module's name?](part0082.xhtml#aid-2E6E42
    "How did we choose the jar module's name?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: streams / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lambdas / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 8 date time API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The
    profile page – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Activation Framework (JAF)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided
    HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaBeans components / [Rendering variables with the JSP EL](part0088.xhtml#aid-2JTHG2
    "Rendering variables with the JSP EL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaBeans standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [More about the JavaBeans standard](part0088.xhtml#aid-2JTHG2 "More about
    the JavaBeans standard")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaDoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator"), [Using a JAXB2 implementation
    as an XML parser](part0097.xhtml#aid-2SG6I2 "Using a JAXB2 implementation as an
    XML parser")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java EE tutorial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Rendering variables with the JSTL](part0088.xhtml#aid-2JTHG2 "Rendering
    variables with the JSTL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Persistence API (JPA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, in Spring / [Configuring the Java Persistence API in Spring](part0092.xhtml#aid-2NNJO2
    "Configuring the Java Persistence API in Spring"), [How to do it...](part0092.xhtml#aid-2NNJO2
    "How to do it..."), [How it works...](part0092.xhtml#aid-2NNJO2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring-managed DataSource bean / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2
    "The Spring-managed DataSource bean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EntityManagerFactory bean, configuring / [The EntityManagerFactory bean and
    its persistence unit](part0092.xhtml#aid-2NNJO2 "The EntityManagerFactory bean
    and its persistence unit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: persistence unit, configuring / [The EntityManagerFactory bean and its persistence
    unit](part0092.xhtml#aid-2NNJO2 "The EntityManagerFactory bean and its persistence
    unit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA, configuring / [The Spring Data JPA configuration](part0092.xhtml#aid-2NNJO2
    "The Spring Data JPA configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Making use of the JPA and Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Making use of the JPA and Spring Data JPA"), [How to do it...](part0094.xhtml#aid-2PKKS2
    "How to do it..."), [How it works...](part0094.xhtml#aid-2PKKS2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Persistence Query Language (JPQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Using JPQL](part0094.xhtml#aid-2PKKS2 "Using JPQL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java SE 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Java SE 8](part0080.xhtml#aid-2C9D01 "Java SE 8")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Server Pages (JSP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving JSP views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Server Pages Tag Library (JSTL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving JSP views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Server Tags Library (JSTL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used for displaying, model in view / [Displaying a model in the View, using
    the JSTL](part0088.xhtml#aid-2JTHG2 "Displaying a model in the View, using the
    JSTL"), [How to do it...](part0088.xhtml#aid-2JTHG2 "How to do it..."), [How it
    works...](part0088.xhtml#aid-2JTHG2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [More about the JSTL](part0088.xhtml#aid-2JTHG2 "More about the JSTL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Util Logging Adapters / [Java Util Logging Adapters](part0128.xhtml#aid-3Q2802
    "Java Util Logging Adapters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAXB2 implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using, as XML parser / [Using a JAXB2 implementation as an XML parser](part0097.xhtml#aid-2SG6I2
    "Using a JAXB2 implementation as an XML parser")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Sql* classes / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02
    "JDBC operations with Sql* classes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: components / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02 "JDBC
    operations with Sql* classes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JdbcTemplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: methods / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: callback interfaces / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NamedParameterJdbcTemplate / [NamedParameterJdbcTemplate](part0048.xhtml#aid-1DOR02
    "NamedParameterJdbcTemplate")/ [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK compliance level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modifying / [Changing the JDK compliance level](part0081.xhtml#aid-2D7TI2 "Changing
    the JDK compliance level")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [AMQP or JMS?](part0121.xhtml#aid-3JCK22 "AMQP or JMS?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joined-table inheritance strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [See also](part0093.xhtml#aid-2OM4A2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JOTM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Global versus local transactions](part0114.xhtml#aid-3CN042 "Global versus
    local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA (Java Persistence Architecture)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strategy, selecting to expose / [Choosing a strategy to expose JPA Entities](part0111.xhtml#aid-39REE2
    "Choosing a strategy to expose JPA Entities"), [How to do it…](part0111.xhtml#aid-39REE2
    "How to do it…"), [How it works...](part0111.xhtml#aid-39REE2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST CRUD principle / [The REST CRUD principle](part0111.xhtml#aid-39REE2 "The
    REST CRUD principle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minimum information, exposing / [Exposing the minimum](part0111.xhtml#aid-39REE2
    "Exposing the minimum"), [If the Entity owns the relationship](part0111.xhtml#aid-39REE2
    "If the Entity owns the relationship")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: separation of resources / [Separation of resources](part0111.xhtml#aid-39REE2
    "Separation of resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: customizing / [Customizing the JSON output](part0161.xhtml#aid-4PHAI2 "Customizing
    the JSON output")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSP EL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [More about JSP EL](part0088.xhtml#aid-2JTHG2 "More about JSP EL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSP Expression Language (JSP EL) / [Getting ready](part0088.xhtml#aid-2JTHG2
    "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0088.xhtml#aid-2JTHG2 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taglib directives / [Taglib directives in JSPs](part0088.xhtml#aid-2JTHG2 "Taglib
    directives in JSPs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSP Standard Tag Library (JSTL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Rendering variables with the JSTL](part0088.xhtml#aid-2JTHG2 "Rendering
    variables with the JSTL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [JSR-250 and legacy method security](part0107.xhtml#aid-361C62 "JSR-250
    and legacy method security")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-303/JSR-349 bean validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using JSR-303/JSR-349 Bean Validation](part0115.xhtml#aid-3DLGM2 "Using
    JSR-303/JSR-349 Bean Validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on-field constraints annotations / [On-field constraint annotations](part0115.xhtml#aid-3DLGM2
    "On-field constraint annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implementation-specific constraints / [Implementation-specific constraints](part0115.xhtml#aid-3DLGM2
    "Implementation-specific constraints")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LocalValidator (reusable) / [LocalValidator (reusable)](part0115.xhtml#aid-3DLGM2
    "LocalValidator (reusable)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Customizing the JSON output](part0161.xhtml#aid-4PHAI2 "Customizing the
    JSON output")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0119.xhtml#aid-3HFIU2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JTA (Java Transaction API)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit Rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [JUnit Rules](part0125.xhtml#aid-3N6MA2 "JUnit Rules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting / [Choosing a JVM](part0080.xhtml#aid-2C9D01 "Choosing a JVM")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: customizing / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing
    JVM arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: lambdas, Java 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using layouts](part0138.xhtml#aid-43JDK2 "Using layouts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building, for hypermedia-driven API / [Building links for a hypermedia-driven
    API](part0110.xhtml#aid-38STS2 "Building links for a hypermedia-driven API"),
    [How to do it…](part0110.xhtml#aid-38STS2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: links! / [The ResourceSupport class](part0109.xhtml#aid-37UDA2 "The ResourceSupport
    class")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquibase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0124.xhtml#aid-3M85O2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquid Fire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load balancing WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0121.xhtml#aid-3JCK22 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LocaleResolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for internationalizing messages / [Using a LocaleResolver](part0116.xhtml#aid-3EK182
    "Using a LocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AcceptHeaderLocaleResolver / [AcceptHeaderLocaleResolver](part0116.xhtml#aid-3EK182
    "AcceptHeaderLocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FixedLocaleResolver / [FixedLocaleResolver](part0116.xhtml#aid-3EK182 "FixedLocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SessionLocaleResolver / [SessionLocaleResolver](part0116.xhtml#aid-3EK182 "SessionLocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CookieLocaleResolver / [CookieLocaleResolver](part0116.xhtml#aid-3EK182 "CookieLocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: localStorage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Browser support for localStorage](part0106.xhtml#aid-352RK2 "Browser
    support for localStorage")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j 1.x API Bridge / [Log4j 1.x API Bridge](part0128.xhtml#aid-3Q2802 "Log4j
    1.x API Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for application logging / [Modern application Logging with Log4j2](part0128.xhtml#aid-3Q2802
    "Modern application Logging with Log4j2"), [How to do it…](part0128.xhtml#aid-3Q2802
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and other logging frameworks / [Apache Log4j2 among other logging frameworks](part0128.xhtml#aid-3Q2802
    "Apache Log4j2 among other logging frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4j, case / [The case of SLF4j](part0128.xhtml#aid-3Q2802 "The case of SLF4j")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migrating to / [Migrating to log4j 2](part0128.xhtml#aid-3Q2802 "Migrating to
    log4j 2")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API and Core / [Log4j 2 API and Core](part0128.xhtml#aid-3Q2802 "Log4j 2 API
    and Core")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adapters / [Log4j 2 Adapters](part0128.xhtml#aid-3Q2802 "Log4j 2 Adapters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration files / [Configuration files](part0128.xhtml#aid-3Q2802 "Configuration
    files")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic configuration / [Automatic configuration](part0128.xhtml#aid-3Q2802
    "Automatic configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automatic configuration, URL / [Automatic configuration](part0128.xhtml#aid-3Q2802
    "Automatic configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: official documentation / [Official documentation](part0128.xhtml#aid-3Q2802
    "Official documentation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: official documentation, URL / [Official documentation](part0128.xhtml#aid-3Q2802
    "Official documentation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis Appender, implementation / [Interesting Redis Appender implementation](part0128.xhtml#aid-3Q2802
    "Interesting Redis Appender implementation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis, URL / [Interesting Redis Appender implementation](part0128.xhtml#aid-3Q2802
    "Interesting Redis Appender implementation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2, adapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Log4j 2 Adapters](part0128.xhtml#aid-3Q2802 "Log4j 2 Adapters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j 1.x API Bridge / [Log4j 1.x API Bridge](part0128.xhtml#aid-3Q2802 "Log4j
    1.x API Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Commons Logging Bridge / [Apache Commons Logging Bridge](part0128.xhtml#aid-3Q2802
    "Apache Commons Logging Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J Bridge / [SLF4J Bridge](part0128.xhtml#aid-3Q2802 "SLF4J Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Util Logging Adapters / [Java Util Logging Adapters](part0128.xhtml#aid-3Q2802
    "Java Util Logging Adapters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Servlet Support / [Web Servlet Support](part0128.xhtml#aid-3Q2802 "Web Servlet
    Support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: login form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: designing / [The login form](part0169.xhtml#aid-515F22 "The login form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luna distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@MessageMapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for defining message handlers / [Defining message handlers via @MessageMapping](part0119.xhtml#aid-3HFIU2
    "Defining message handlers via @MessageMapping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: m2eclipse plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: marshalling responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Binding requests and marshalling responses](part0096.xhtml#aid-2RHM02
    "Binding requests and marshalling responses"), [How to do it...](part0096.xhtml#aid-2RHM02
    "How to do it..."), [How it works...](part0096.xhtml#aid-2RHM02 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: material design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with WebJars / [Material design with WebJars](part0138.xhtml#aid-43JDK2 "Material
    design with WebJars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Materialize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Material design with WebJars](part0138.xhtml#aid-43JDK2 "Material design
    with WebJars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: matrix variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL mapping / [URL mapping with matrix variables](part0151.xhtml#aid-4G04U2
    "URL mapping with matrix variables")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: need for / [Why making use of Maven?](part0079.xhtml#aid-2BASE1 "Why making
    use of Maven?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [Configuring Maven](part0081.xhtml#aid-2D7TI2 "Configuring Maven")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: project structure, defining / [Defining the project structure with Maven](part0082.xhtml#aid-2E6E42
    "Defining the project structure with Maven"), [Getting ready](part0082.xhtml#aid-2E6E42
    "Getting ready"), [How to do it...](part0082.xhtml#aid-2E6E42 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: build life cycle / [Maven's build life cycles](part0082.xhtml#aid-2E6E42 "Maven's
    build life cycles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: references / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven checkstyle plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2 "The Maven checkstyle
    plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2 "The Maven checkstyle
    plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven Failsafe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: versus Maven Surefire / [Maven Failsafe versus Maven Surefire](part0126.xhtml#aid-3O56S2
    "Maven Failsafe versus Maven Surefire")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Using Maven properties](part0083.xhtml#aid-2F4UM2 "Using Maven
    properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven Surefire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Unit testing with Mockito and Maven Surefire](part0125.xhtml#aid-3N6MA2
    "Unit testing with Mockito and Maven Surefire"), [How to do it…](part0125.xhtml#aid-3N6MA2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: memory optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message-oriented-Middleware (MoM) / [Stacking and consuming tasks with RabbitMQ
    and AMQP](part0121.xhtml#aid-3JCK22 "Stacking and consuming tasks with RabbitMQ
    and AMQP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: message broker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: full-featured message broker, using / [Using a full-featured message broker](part0120.xhtml#aid-3IE3G2
    "Using a full-featured message broker")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clusterability / [Clusterability – RabbitMQ](part0120.xhtml#aid-3IE3G2 "Clusterability
    – RabbitMQ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STOMP message types / [More STOMP message types](part0120.xhtml#aid-3IE3G2 "More
    STOMP message types")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StompMessageBrokerRelay / [StompMessageBrokerRelay](part0120.xhtml#aid-3IE3G2
    "StompMessageBrokerRelay")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message Driven Beans (MDB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internationalizing, for REST / [Internationalizing messages and contents for
    REST](part0116.xhtml#aid-3EK182 "Internationalizing messages and contents for
    REST")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internationalizing, with MessageSource beans / [MessageSource beans](part0116.xhtml#aid-3EK182
    "MessageSource beans")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: internationalizing, LocaleResolver used / [Using a LocaleResolver](part0116.xhtml#aid-3EK182
    "Using a LocaleResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sending, to dispatch / [Sending a message to dispatch](part0119.xhtml#aid-3HFIU2
    "Sending a message to dispatch")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpMessagingTemplate / [SimpMessagingTemplate](part0119.xhtml#aid-3HFIU2 "SimpMessagingTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@SendTo annotation / [The @SendTo annotation](part0119.xhtml#aid-3HFIU2 "The
    @SendTo annotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: securing, with Spring session / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: securing, with Redis / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP proxy configuration / [Apache HTTP proxy configuration](part0122.xhtml#aid-3KB4K2
    "Apache HTTP proxy configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis server installation / [Redis server installation](part0122.xhtml#aid-3KB4K2
    "Redis server installation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL server installation / [MySQL server installation](part0122.xhtml#aid-3KB4K2
    "MySQL server installation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application-level changes / [Application-level changes](part0122.xhtml#aid-3KB4K2
    "Application-level changes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RabbitMQ configuration / [RabbitMQ configuration](part0122.xhtml#aid-3KB4K2
    "RabbitMQ configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: results / [The results](part0122.xhtml#aid-3KB4K2 "The results")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis server / [The Redis server](part0122.xhtml#aid-3KB4K2 "The Redis server")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring session / [Spring session](part0122.xhtml#aid-3KB4K2 "Spring session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SessionRepositoryFilter / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2
    "SessionRepositoryFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CookieHttpSessionStrategy / [CookieHttpSessionStrategy](part0122.xhtml#aid-3KB4K2
    "CookieHttpSessionStrategy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis Session manager, for Tomcat / [The Redis Session manager for Tomcat](part0122.xhtml#aid-3KB4K2
    "The Redis Session manager for Tomcat")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sessions in Redis, viewing / [Viewing/flushing sessions in Redis](part0122.xhtml#aid-3KB4K2
    "Viewing/flushing sessions in Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sessions in Redis, flushing / [Viewing/flushing sessions in Redis](part0122.xhtml#aid-3KB4K2
    "Viewing/flushing sessions in Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AbstractSessionWebSocketMessageBrokerConfigurer / [AbstractSessionWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSessionWebSocketMessageBrokerConfigurer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AbstractSecurityWebSocketMessageBrokerConfigurer / [AbstractSecurityWebSocketMessageBrokerConfigurer](part0122.xhtml#aid-3KB4K2
    "AbstractSecurityWebSocketMessageBrokerConfigurer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring session, URL / [Spring Session](part0122.xhtml#aid-3KB4K2 "Spring Session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP proxy, extra configuration / [Apache HTTP proxy extra configuration](part0122.xhtml#aid-3KB4K2
    "Apache HTTP proxy extra configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data Redis / [Spring Data Redis](part0122.xhtml#aid-3KB4K2 "Spring Data
    Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MessageSource beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for internationalizing messages / [MessageSource beans](part0116.xhtml#aid-3EK182
    "MessageSource beans")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResourceBundleMessageSource / [ResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ResourceBundleMessageSource")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReloadableResourceBundleMessageSource / [ReloadableResourceBundleMessageSource](part0116.xhtml#aid-3EK182
    "ReloadableResourceBundleMessageSource")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StaticMessageSource / [StaticMessageSource](part0116.xhtml#aid-3EK182 "StaticMessageSource")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Our MessageSource bean definition](part0116.xhtml#aid-3EK182 "Our
    MessageSource bean definition")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging-oriented-middleware (MOM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction](part0118.xhtml#aid-3GH2C1 "Introduction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migrate command / [Migrate](part0124.xhtml#aid-3M85O2 "Migrate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit testing with / [Unit testing with Mockito and Maven Surefire](part0125.xhtml#aid-3N6MA2
    "Unit testing with Mockito and Maven Surefire"), [How to do it…](part0125.xhtml#aid-3N6MA2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Test annotation / [@Test annotation](part0125.xhtml#aid-3N6MA2 "@Test annotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using Mockito](part0125.xhtml#aid-3N6MA2 "Using Mockito")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transferCriticalData example / [The transferCriticalData example](part0125.xhtml#aid-3N6MA2
    "The transferCriticalData example")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: registerUser example / [The registerUser example](part0125.xhtml#aid-3N6MA2
    "The registerUser example")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [About Mockito](part0125.xhtml#aid-3N6MA2 "About Mockito")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit Rules / [JUnit Rules](part0125.xhtml#aid-3N6MA2 "JUnit Rules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for creating mocks / [Mocking with Mockito](part0181.xhtml#aid-5CJLQ2
    "Mocking with Mockito")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MockitoJUnitRunner / [MockitoJUnitRunner](part0125.xhtml#aid-3N6MA2 "MockitoJUnitRunner")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Mocks and stubs](part0181.xhtml#aid-5CJLQ2 "Mocks and stubs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and stubs, selecting between / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2
    "Should I use mocks or stubs?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2 "Should
    I use mocks or stubs?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: displaying in view, JSTL used / [Displaying a model in the View, using the JSTL](part0088.xhtml#aid-2JTHG2
    "Displaying a model in the View, using the JSTL"), [How to do it...](part0088.xhtml#aid-2JTHG2
    "How to do it..."), [How it works...](part0088.xhtml#aid-2JTHG2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: populating, in controller / [Populating the Model in the controller](part0088.xhtml#aid-2JTHG2
    "Populating the Model in the controller")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, rendering with JSP EL / [Rendering variables with the JSP EL](part0088.xhtml#aid-2JTHG2
    "Rendering variables with the JSP EL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implicit objects / [Implicit objects](part0088.xhtml#aid-2JTHG2 "Implicit objects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model-View-Controller (MVC) architectural pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model-View-Controller pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The Model-View-Controller
    pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller / [The Model-View-Controller pattern](part0029.xhtml#aid-RL0A1 "The
    Model-View-Controller pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Setting up the DOM and creating modules](part0090.xhtml#aid-2LQIK2
    "Setting up the DOM and creating modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: components, defining / [Defining the module's components](part0090.xhtml#aid-2LQIK2
    "Defining the module's components"), [How it works...](part0090.xhtml#aid-2LQIK2
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mod_alias module / [The mod_alias module](part0102.xhtml#aid-318PC2 "The mod_alias
    module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mod_proxy module / [The mod_proxy module](part0102.xhtml#aid-318PC2 "The mod_proxy
    module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: morris.js library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multipurpose Internet Mail Extensions (MIME)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Uploading a file](part0147.xhtml#aid-4C62M2 "Uploading a file")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller / [The MVC architecture](part0130.xhtml#aid-3RV941 "The MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: best practice / [MVC critics and best practices](part0131.xhtml#aid-3STPM1 "MVC
    critics and best practices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: critics / [MVC critics and best practices](part0131.xhtml#aid-3STPM1 "MVC critics
    and best practices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anemic Domain Model / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic
    Domain Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sagan project / [Learning from the sources](part0131.xhtml#aid-3STPM1 "Learning
    from the sources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sagan project, URL / [Learning from the sources](part0131.xhtml#aid-3STPM1 "Learning
    from the sources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC design pattern / [MVC design pattern](part0085.xhtml#aid-2H1VQ2 "MVC design
    pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0099.xhtml#aid-2UD7M2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: native SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using native SQL queries](part0094.xhtml#aid-2PKKS2 "Using native SQL
    queries")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Using native SQL queries](part0094.xhtml#aid-2PKKS2 "Using native SQL
    queries")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirect option / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forward option / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no-cascaded operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Cascade attribute](part0093.xhtml#aid-2OM4A2 "The Cascade attribute")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Setting up Ember CLI](part0064.xhtml#aid-1T1402 "Setting up Ember CLI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, retrieving from third-party API / [Retrieving data from a third-party
    API with OAuth](part0112.xhtml#aid-3APV02 "Retrieving data from a third-party
    API with OAuth"), [How to do it…](part0112.xhtml#aid-3APV02 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth2 Authentication Server (AS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0105.xhtml#aid-344B22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth2 Authorization Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2 "The
    OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entities / [The OAuth2 Authorization Framework](part0058.xhtml#aid-1NA0K2 "The
    OAuth2 Authorization Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth developments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alias definition for / [Alias definition for OAuth developments](part0102.xhtml#aid-318PC2
    "Alias definition for OAuth developments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object Oriented Programming (OOP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Aspect Oriented Programming](part0025.xhtml#aid-NQU22 "Aspect Oriented
    Programming")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one thread per HTTP connection strategy / [Asynchronous request processing in
    Spring MVC](part0035.xhtml#aid-11C3M1 "Asynchronous request processing in Spring
    MVC")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [OpenShift](part0196.xhtml#aid-5QTE81 "OpenShift")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Hotspot JDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it...](part0080.xhtml#aid-2C9D01 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Page Objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with FluentLenium / [Page Objects with FluentLenium](part0184.xhtml#aid-5FF7G2
    "Page Objects with FluentLenium")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Geb / [Page Objects with Geb](part0184.xhtml#aid-5FF7G2 "Page Objects with
    Geb")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pagination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding / [Adding pagination, filters, and sorting capabilities](part0098.xhtml#aid-2TEN42
    "Adding pagination, filters, and sorting capabilities"), [How to do it...](part0098.xhtml#aid-2TEN42
    "How to do it..."), [How it works...](part0098.xhtml#aid-2TEN42 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data pagination support / [Spring Data pagination support (you will love
    it!)](part0098.xhtml#aid-2TEN42 "Spring Data pagination support (you will love
    it!)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and sorting in repositories / [Pagination and sorting in repositories](part0098.xhtml#aid-2TEN42
    "Pagination and sorting in repositories")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PagingAndSortingRepository<T,ID> / [PagingAndSortingRepository<T,ID>](part0098.xhtml#aid-2TEN42
    "PagingAndSortingRepository<T,ID>")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PageableHandlerMethodArgumentResolver / [The web part – PageableHandlerMethodArgumentResolver](part0098.xhtml#aid-2TEN42
    "The web part – PageableHandlerMethodArgumentResolver")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: payload mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requesting, with @RequestBody / [Mapping request payloads with @RequestBody](part0114.xhtml#aid-3CN042
    "Mapping request payloads with @RequestBody")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permanent Generation(PermGen)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Customizing JVM arguments](part0081.xhtml#aid-2D7TI2 "Customizing JVM
    arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: persistence unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The EntityManagerFactory bean and its persistence unit](part0092.xhtml#aid-2NNJO2
    "The EntityManagerFactory bean and its persistence unit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhantomJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Our first FluentLenium test](part0184.xhtml#aid-5FF7G2 "Our first FluentLenium
    test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivotal Web Services (PWS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application, deploying / [Deploying your web application to Pivotal Web
    Services](part0197.xhtml#aid-5RRUQ2 "Deploying your web application to Pivotal
    Web Services")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plain Java Objects (POJOs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction](part0091.xhtml#aid-2MP361 "Introduction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plain Old Java Object (POJO)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plain old Java objects (POJOs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Anemic Domain Model](part0131.xhtml#aid-3STPM1 "Anemic Domain Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plain Old Java Objects (POJOs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Domain objects and entities](part0049.xhtml#aid-1ENBI2 "Domain objects
    and entities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Plugins](part0083.xhtml#aid-2F4UM2 "Plugins")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven compiler plugin / [The Maven compiler plugin](part0083.xhtml#aid-2F4UM2
    "The Maven compiler plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven surefire plugin / [The Maven surefire plugin](part0083.xhtml#aid-2F4UM2
    "The Maven surefire plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven enforcer plugin / [The Maven enforcer plugin](part0083.xhtml#aid-2F4UM2
    "The Maven enforcer plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven war plugin / [The Maven war plugin](part0083.xhtml#aid-2F4UM2 "The Maven
    war plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven checkstyle plugin / [The Maven checkstyle plugin](part0083.xhtml#aid-2F4UM2
    "The Maven checkstyle plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POD structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: working with / [Working with the POD structure](part0064.xhtml#aid-1T1402 "Working
    with the POD structure")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointcut designators (PCDs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Pointcut designators](part0025.xhtml#aid-NQU22 "Pointcut designators")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointcuts, @AspectJ annotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Pointcuts](part0025.xhtml#aid-NQU22 "Pointcuts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: designators / [Pointcut designators](part0025.xhtml#aid-NQU22 "Pointcut designators")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: examples / [Pointcut examples](part0025.xhtml#aid-NQU22 "Pointcut examples")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POJO (Plain Old Java Objects) / [Design concepts behind Spring Framework](part0013.xhtml#aid-CCNA1
    "Design concepts behind Spring Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procfile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running / [Procfile](part0198.xhtml#aid-5SQFC2 "Procfile")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: production profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [A production profile](part0187.xhtml#aid-5IAP61 "A production
    profile")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storing, in session / [Placing the profile in a session](part0149.xhtml#aid-4E33Q2
    "Placing the profile in a session")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: profile page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile
    page – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validation, adding / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client validation, enabling / [Client validation](part0144.xhtml#aid-49AH01
    "Client validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check point / [The check point](part0145.xhtml#aid-4A91I1 "The check point")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Object Model (POM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Why making use of Maven?](part0079.xhtml#aid-2BASE1 "Why making use
    of Maven?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining, with Maven / [Defining the project structure with Maven](part0082.xhtml#aid-2E6E42
    "Defining the project structure with Maven"), [Getting ready](part0082.xhtml#aid-2E6E42
    "Getting ready"), [How to do it...](part0082.xhtml#aid-2E6E42 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven project, creating / [New Maven project, new Maven module](part0082.xhtml#aid-2E6E42
    "New Maven project, new Maven module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven module, creating / [New Maven project, new Maven module](part0082.xhtml#aid-2E6E42
    "New Maven project, new Maven module")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: standard project hierarchy / [The standard project hierarchy](part0082.xhtml#aid-2E6E42
    "The standard project hierarchy")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in IDE / [The project's structure in the IDE](part0082.xhtml#aid-2E6E42 "The
    project's structure in the IDE")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: injecting, into Spring environment / [Injecting properties into the Spring environment](part0021.xhtml#aid-K0RQ1
    "Injecting properties into the Spring environment")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PropertyEditor/ConversionService / [Choosing between PropertyEditors or converters](part0096.xhtml#aid-2RHM02
    "Choosing between PropertyEditors or converters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PropertyEditor implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Built-in PropertyEditor implementations](part0096.xhtml#aid-2RHM02
    "Built-in PropertyEditor implementations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PropertyPlaceholderConfigurer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Externalizing properties with PropertyPlaceholderConfigurer](part0022.xhtml#aid-KVCC1
    "Externalizing properties with PropertyPlaceholderConfigurer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: properties, externalizing with / [Externalizing properties with PropertyPlaceholderConfigurer](part0022.xhtml#aid-KVCC1
    "Externalizing properties with PropertyPlaceholderConfigurer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provider-specific configuration, third-party OAuth2 scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Provider-specific configuration](part0105.xhtml#aid-344B22 "Provider-specific
    configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connectionFactoryLocator bean / [One entry-point – connectionFactoryLocator](part0105.xhtml#aid-344B22
    "One entry-point – connectionFactoryLocator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provider-specific ConnectionFactories / [Provider-specific ConnectionFactories](part0105.xhtml#aid-344B22
    "Provider-specific ConnectionFactories")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provider accounts, signing in with / [Signing in with provider accounts](part0105.xhtml#aid-344B22
    "Signing in with provider accounts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticated API calls, performing / [Performing authenticated API calls](part0105.xhtml#aid-344B22
    "Performing authenticated API calls")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring social ConnectController / [The Spring social ConnectController](part0105.xhtml#aid-344B22
    "The Spring social ConnectController")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SocialAuthenticationFilter / [SocialAuthenticationFilter](part0105.xhtml#aid-344B22
    "SocialAuthenticationFilter ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring social connectors, list / [The list of Spring social connectors](part0105.xhtml#aid-344B22
    "The list of Spring social connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth2 authentication server, implementing / [Implementing an OAuth2 authentication
    server](part0105.xhtml#aid-344B22 "Implementing an OAuth2 authentication server")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: harmonic development blog / [The harmonic development blog](part0105.xhtml#aid-344B22
    "The harmonic development blog")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: proxy mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ProxyPassReverse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [ProxyPassReverse](part0102.xhtml#aid-318PC2 "ProxyPassReverse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: workers / [Workers](part0102.xhtml#aid-318PC2 "Workers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: query lookup strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Query resolution methods](part0049.xhtml#aid-1ENBI2 "Query resolution
    methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting data with a request parameter](part0135.xhtml#aid-40NRU1 "Getting
    data with a request parameter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@Repository annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [DAO support and @Repository annotation](part0047.xhtml#aid-1CQAE1 "DAO
    support and @Repository annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestBody'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: payload mapping, requesting with / [Mapping request payloads with @RequestBody](part0114.xhtml#aid-3CN042
    "Mapping request payloads with @RequestBody")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestMapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: new support classes / [New support classes for @RequestMapping since Spring
    MVC 3.1](part0089.xhtml#aid-2KS222 "New support classes for @RequestMapping since
    Spring MVC 3.1")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestMapping annotation / [@RequestMapping](part0085.xhtml#aid-2H1VQ2 "@RequestMapping")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestMapping annotations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for / [Broad support for @RequestMapping annotations](part0096.xhtml#aid-2RHM02
    "Broad support for @RequestMapping annotations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setMessageConverters / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setCustomArgumentResolvers / [setCustomArgumentResolvers](part0096.xhtml#aid-2RHM02
    "setCustomArgumentResolvers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setWebBindingInitializer / [setWebBindingInitializer](part0096.xhtml#aid-2RHM02
    "setWebBindingInitializer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as ultimate filters / [@RequestMapping annotations as ultimate filters](part0097.xhtml#aid-2SG6I2
    "@RequestMapping annotations as ultimate filters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestPart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for uploading image / [Using @RequestPart to upload an image](part0114.xhtml#aid-3CN042
    "Using @RequestPart to upload an image")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RunWith annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The @RunWith annotation](part0125.xhtml#aid-3N6MA2 "The @RunWith annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RabbitMQ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using, as multiprotocol message broker / [Using RabbitMQ as a multiprotocol
    message broker](part0120.xhtml#aid-3IE3G2 "Using RabbitMQ as a multiprotocol message
    broker"), [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it…](part0120.xhtml#aid-3IE3G2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: guide and documentation, URL / [See also](part0120.xhtml#aid-3IE3G2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks, securing with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks, consuming with / [Getting ready](part0121.xhtml#aid-3JCK22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raphael.js library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating responsive
    content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The players](part0203.xhtml#aid-61J261 "The players")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: messages, securing with / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Redis server installation](part0122.xhtml#aid-3KB4K2 "Redis server installation"),
    [Distributed sessions](part0171.xhtml#aid-532G61 "Distributed sessions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: activating / [Activating Redis](part0197.xhtml#aid-5RRUQ2 "Activating Redis"),
    [Activating Redis](part0198.xhtml#aid-5SQFC2 "Activating Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relationships, EJB3 entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Defining relationships](part0093.xhtml#aid-2OM4A2 "Defining relationships")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting / [How relationships between entities have been chosen](part0093.xhtml#aid-2OM4A2
    "How relationships between entities have been chosen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: remoting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repair command / [Repair](part0124.xhtml#aid-3M85O2 "Repair"), [About Flyway
    Maven plugin](part0124.xhtml#aid-3M85O2 "About Flyway Maven plugin")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repository manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [A repository manager](part0081.xhtml#aid-2D7TI2 "A repository manager")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There's more...](part0081.xhtml#aid-2D7TI2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representational State Transfer (REST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [A definition of REST](part0095.xhtml#aid-2QJ5E1 "A definition of REST")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restful CloudStreetMarket / [RESTful CloudStreetMarket](part0095.xhtml#aid-2QJ5E1
    "RESTful CloudStreetMarket")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REpresentational State Transfer (REST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Building RESTful services for JSON and XML media](part0034.xhtml#aid-10DJ42
    "Building RESTful services for JSON and XML media")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RequestMappingHandlerAdapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [New support classes for @RequestMapping since Spring MVC 3.1](part0089.xhtml#aid-2KS222
    "New support classes for @RequestMapping since Spring MVC 3.1")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RequestMappingHandlerAdapter bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [A super RequestMappingHandlerAdapter bean](part0096.xhtml#aid-2RHM02
    "A super RequestMappingHandlerAdapter bean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling / [Handling resources](part0023.xhtml#aid-LTSU1 "Handling resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResourceSupport class / [The ResourceSupport class](part0109.xhtml#aid-37UDA2
    "The ResourceSupport class")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response channel / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResponseEntityExceptionHandler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [JavaDocs](part0099.xhtml#aid-2UD7M2 "JavaDocs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: responsive content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Creating responsive content](part0087.xhtml#aid-2IV0U2 "Creating
    responsive content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: responsive single page Webdesign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting-up, with Bootstrap / [Setting up and customizing a responsive single
    page webdesign with Bootstrap](part0087.xhtml#aid-2IV0U2 "Setting up and customizing
    a responsive single page webdesign with Bootstrap"), [How to do it...](part0087.xhtml#aid-2IV0U2
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap theme, customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Customising a Bootstrap theme")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: responsive single page Webdesign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap theme, installing / [Installing a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Installing a Bootstrap theme")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap theme, customising / [Customising a Bootstrap theme](part0087.xhtml#aid-2IV0U2
    "Customising a Bootstrap theme")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rest-assured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integration testing with / [Integration testing with Cargo, Rest-assured, and
    Maven failsafe](part0126.xhtml#aid-3O56S2 "Integration testing with Cargo, Rest-assured,
    and Maven failsafe"), [How to do it…](part0126.xhtml#aid-3O56S2 "How to do it…"),
    [How it works...](part0126.xhtml#aid-3O56S2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Rest assured](part0126.xhtml#aid-3O56S2 "Rest assured")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: static imports / [Static imports](part0126.xhtml#aid-3O56S2 "Static imports")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: usage / [A Given, When, Then approach](part0126.xhtml#aid-3O56S2 "A Given, When,
    Then approach")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST-assured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: example / [More REST-assured examples](part0126.xhtml#aid-3O56S2 "More REST-assured
    examples")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: example, URL / [More REST-assured examples](part0126.xhtml#aid-3O56S2 "More
    REST-assured examples")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit testing / [Unit testing REST controllers](part0182.xhtml#aid-5DI6C2 "Unit
    testing REST controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: credentials, storing / [Storing credentials in a REST environment](part0106.xhtml#aid-352RK2
    "Storing credentials in a REST environment")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client side (AngularJS) / [Client side (AngularJS)](part0106.xhtml#aid-352RK2
    "Client side (AngularJS)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: server side / [Server side](part0106.xhtml#aid-352RK2 "Server side")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: microservices, authenticating for / [Authenticating for Microservices](part0106.xhtml#aid-352RK2
    "Authenticating for Microservices")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BASIC authentication, using / [Using the BASIC authentication](part0106.xhtml#aid-352RK2
    "Using the BASIC authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign-in, using with OAuth / [Using OAuth2](part0106.xhtml#aid-352RK2 "Using
    OAuth2")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 SessionStorage / [HTML5 SessionStorage](part0106.xhtml#aid-352RK2 "HTML5
    SessionStorage")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BCryptPasswordEncoder / [BCryptPasswordEncoder](part0106.xhtml#aid-352RK2 "BCryptPasswordEncoder")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP headers, setting with AngularJS / [Setting HTTP headers with AngularJS](part0106.xhtml#aid-352RK2
    "Setting HTTP headers with AngularJS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: browser support, for localStorage / [Browser support for localStorage](part0106.xhtml#aid-352RK2
    "Browser support for localStorage")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL and TLS / [About SSL and TLS](part0106.xhtml#aid-352RK2 "About SSL and TLS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful API, debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Debugging a RESTful API](part0160.xhtml#aid-4OIQ01 "Debugging a RESTful
    API")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON formatting extension / [A JSON formatting extension](part0160.xhtml#aid-4OIQ01
    "A JSON formatting extension")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful client, in browser / [A RESTful client in your browser](part0160.xhtml#aid-4OIQ01
    "A RESTful client in your browser")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: httpie / [httpie](part0160.xhtml#aid-4OIQ01 "httpie")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful web service, properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-server / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stateless / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cacheable / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uniform interface / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: layered / [What is REST?](part0155.xhtml#aid-4JQ761 "What is REST?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: extending, to HTTP methods / [Extending REST handlers to all HTTP methods](part0114.xhtml#aid-3CN042
    "Extending REST handlers to all HTTP methods"), [How to do it…](part0114.xhtml#aid-3CN042
    "How to do it…"), [How it works...](part0114.xhtml#aid-3CN042 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP/1.1 specifications / [HTTP/1.1 specifications – RFC 7231 semantics and
    content](part0114.xhtml#aid-3CN042 "HTTP/1.1 specifications – RFC 7231 semantics
    and content")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: payload mapping, requesting with @RequestBody / [Mapping request payloads with
    @RequestBody](part0114.xhtml#aid-3CN042 "Mapping request payloads with @RequestBody")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HttpMessageConverters / [HttpMessageConverters](part0114.xhtml#aid-3CN042 "HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@RequestPart, used for uploading image / [Using @RequestPart to upload an image](part0114.xhtml#aid-3CN042
    "Using @RequestPart to upload an image")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transaction management / [Transaction management](part0114.xhtml#aid-3CN042
    "Transaction management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Richardson's maturity model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Richardson's maturity model](part0156.xhtml#aid-4KONO2 "Richardson's
    maturity model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: level 0 - HTTP / [Level 0 – HTTP](part0156.xhtml#aid-4KONO2 "Level 0 – HTTP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: level 1 - Resources / [Level 1 – Resources](part0156.xhtml#aid-4KONO2 "Level
    1 – Resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "level 2 \x96 HTTP verbs / [Level 2 – HTTP verbs](part0156.xhtml#aid-4KONO2\
    \ \"Level 2 – HTTP verbs\")"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "level 3 \x96 Hypermedia controls / [Level 3 – Hypermedia controls](part0156.xhtml#aid-4KONO2\
    \ \"Level 3 – Hypermedia controls\")"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Richardson Maturity Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Richardson Maturity Model](part0108.xhtml#aid-36VSO1 "The Richardson
    Maturity Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Richardson Maturity Model](part0108.xhtml#aid-36VSO1 "The Richardson
    Maturity Model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROME project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Provided HttpMessageConverters](part0114.xhtml#aid-3CN042 "Provided HttpMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: root name servers / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling / [Handling routes](part0068.xhtml#aid-20R681 "Handling routes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: routine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: need for / [Why such a routine?](part0079.xhtml#aid-2BASE1 "Why such a routine?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@SendTo annotation / [The @SendTo annotation](part0119.xhtml#aid-3HFIU2 "The
    @SendTo annotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saas-providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The list of Spring social connectors](part0105.xhtml#aid-344B22 "The
    list of Spring social connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: schema, EJB3 entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mapping / [Mapping the schema](part0093.xhtml#aid-2OM4A2 "Mapping the schema")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tables, mapping / [Mapping tables](part0093.xhtml#aid-2OM4A2 "Mapping tables")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns, mapping / [Mapping columns](part0093.xhtml#aid-2OM4A2 "Mapping columns")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fields, annotating / [Annotating fields or getters](part0093.xhtml#aid-2OM4A2
    "Annotating fields or getters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: getters, annotating / [Annotating fields or getters](part0093.xhtml#aid-2OM4A2
    "Annotating fields or getters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: primary keys, mapping / [Mapping primary keys](part0093.xhtml#aid-2OM4A2 "Mapping
    primary keys")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifier generation / [Identifier generation](part0093.xhtml#aid-2OM4A2 "Identifier
    generation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SearchApiController class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, in search.api package / [Client is the king](part0159.xhtml#aid-4NK9E1
    "Client is the king")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: securityContextPersistenceFilter / [securityContextPersistenceFilter](part0122.xhtml#aid-3KB4K2
    "securityContextPersistenceFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: security headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Authorized users](part0168.xhtml#aid-506UG2 "Authorized users")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: self-signed certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating / [Generating a self-signed certificate](part0172.xhtml#aid-5410O2
    "Generating a self-signed certificate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: serializers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Jackson custom serializers](part0111.xhtml#aid-39REE2 "Jackson custom
    serializers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service classes / [XML-based configuration metadata](part0016.xhtml#aid-F8902
    "XML-based configuration metadata")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service Provider (SP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0105.xhtml#aid-344B22 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authorizing on / [Authorizing on services and controllers](part0107.xhtml#aid-361C62
    "Authorizing on services and controllers"), [How to do it...](part0107.xhtml#aid-361C62
    "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SessionRepositoryFilter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SessionRepositoryFilter](part0122.xhtml#aid-3KB4K2 "SessionRepositoryFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RedisConnectionFactory / [RedisConnectionFactory](part0122.xhtml#aid-3KB4K2
    "RedisConnectionFactory")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setter-based DI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Constructor-based or setter-based DI – which is better?](part0017.xhtml#aid-G6PI2
    "Constructor-based or setter-based DI – which is better?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpleJdbc classes / [SimpleJdbc classes](part0048.xhtml#aid-1DOR02 "SimpleJdbc
    classes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple Text Oriented Messaging Protocol (STOMP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The STOMP protocol](part0119.xhtml#aid-3HFIU2 "The STOMP protocol")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The STOMP protocol](part0119.xhtml#aid-3HFIU2 "The STOMP protocol")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple URL mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for configuring controller / [Configuring a controller with simple URL
    mapping](part0085.xhtml#aid-2H1VQ2 "Configuring a controller with simple URL mapping"),
    [How to do it...](part0085.xhtml#aid-2H1VQ2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple WebSocket application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Creating a simple WebSocket application](part0053.xhtml#aid-1IHDQ2
    "Creating a simple WebSocket application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single-page application (SPA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: motivations / [The motivations behind SPAs](part0060.xhtml#aid-1P71O1 "The motivations
    behind SPAs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SPAs explained](part0061.xhtml#aid-1Q5IA1 "SPAs explained")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: architectural benefits / [The architectural benefits of SPAs](part0061.xhtml#aid-1Q5IA1
    "The architectural benefits of SPAs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single Page Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Single Page Applications](part0203.xhtml#aid-61J261 "Single Page Applications")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: recommendations / [The players](part0203.xhtml#aid-61J261 "The players")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: future enhancements / [The future](part0203.xhtml#aid-61J261 "The future")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stateless option / [Going stateless](part0203.xhtml#aid-61J261 "Going stateless")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Going stateless](part0203.xhtml#aid-61J261 "Going stateless")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4j
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: case / [The case of SLF4j](part0128.xhtml#aid-3Q2802 "The case of SLF4j")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J Bridge / [SLF4J Bridge](part0128.xhtml#aid-3Q2802 "SLF4J Bridge")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: social events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: streaming, with STOMP over SockJS / [Streaming social events with STOMP over
    SockJS](part0119.xhtml#aid-3HFIU2 "Streaming social events with STOMP over SockJS
    ") , [How to do it…](part0119.xhtml#aid-3HFIU2 "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP Proxy configuration / [Apache HTTP Proxy configuration](part0119.xhtml#aid-3HFIU2
    "Apache HTTP Proxy configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: front end / [Frontend](part0119.xhtml#aid-3HFIU2 "Frontend")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: front end, URL / [Frontend](part0119.xhtml#aid-3HFIU2 "Frontend")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: back-end / [Backend](part0119.xhtml#aid-3HFIU2 "Backend"), [How it works...](part0119.xhtml#aid-3HFIU2
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SockJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [SockJS](part0119.xhtml#aid-3HFIU2 "SockJS")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fallback, options / [There's more…](part0119.xhtml#aid-3HFIU2 "There's more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client queries, URL / [There's more…](part0119.xhtml#aid-3HFIU2 "There's more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sockjs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SPA frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.js / [SPA frameworks](part0061.xhtml#aid-1Q5IA1 "SPA frameworks")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpEL (Spring Expression Language)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Query resolution methods](part0049.xhtml#aid-1ENBI2 "Query resolution
    methods")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpEL API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The SpEL API](part0024.xhtml#aid-MSDG1 "The SpEL API")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interfaces and classes / [The SpEL API](part0024.xhtml#aid-MSDG1 "The SpEL API")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for unit tests / [Unit tests with Spock](part0184.xhtml#aid-5FF7G2 "Unit
    tests with Spock")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testing with / [Testing with Spring](part0026.xhtml#aid-OPEK1 "Testing with
    Spring")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure"), [How to do it...](part0083.xhtml#aid-2F4UM2
    "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inheritance, of Maven dependencies / [Inheritance of Maven dependencies](part0083.xhtml#aid-2F4UM2
    "Inheritance of Maven dependencies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: third-party dependencies, including / [Including third-party dependencies](part0083.xhtml#aid-2F4UM2
    "Including third-party dependencies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web resources / [The web resources](part0083.xhtml#aid-2F4UM2 "The web resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Persistence API (JPA), configuring / [Configuring the Java Persistence
    API in Spring](part0092.xhtml#aid-2NNJO2 "Configuring the Java Persistence API
    in Spring"), [How to do it...](part0092.xhtml#aid-2NNJO2 "How to do it..."), [How
    it works...](part0092.xhtml#aid-2NNJO2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ecosystem / [The Spring ecosystem](part0201.xhtml#aid-5VM121 "The Spring ecosystem")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Spring ecosystem](part0201.xhtml#aid-5VM121 "The Spring ecosystem")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: core / [Core](part0201.xhtml#aid-5VM121 "Core")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: execution / [Execution](part0201.xhtml#aid-5VM121 "Execution")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XD project, URL / [Execution](part0201.xhtml#aid-5VM121 "Execution")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data / [Data](part0201.xhtml#aid-5VM121 "Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: noteworthy projects / [Other noteworthy projects](part0201.xhtml#aid-5VM121
    "Other noteworthy projects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring's JSF integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring's JSF integration](part0075.xhtml#aid-27GQ62 "Spring's JSF integration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring's Struts integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring's Struts integration](part0076.xhtml#aid-28FAO1 "Spring's Struts
    integration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring-managed DataSource bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring-managed DataSource bean](part0092.xhtml#aid-2NNJO2 "The
    Spring-managed DataSource bean")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-messaging module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-security-crypto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Social connection persistence](part0105.xhtml#aid-344B22 "Social connection
    persistence")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring-websocket-portfolio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0122.xhtml#aid-3KB4K2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring 4.2+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [A better way to publish application events](part0121.xhtml#aid-3JCK22
    "A better way to publish application events")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring AOP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: definition / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration styles / [Spring AOP – definition and configuration styles](part0025.xhtml#aid-NQU22
    "Spring AOP – definition and configuration styles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Your first Spring application](part0015.xhtml#aid-E9OE1 "Your first
    Spring application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inversion of Control (IoC) / [Inversion of Control explained](part0015.xhtml#aid-E9OE1
    "Inversion of Control explained")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: injecting, in integration tests / [Injecting Spring Beans into integration tests](part0127.xhtml#aid-3P3NE2
    "Injecting Spring Beans into integration tests"), [How to do it…](part0127.xhtml#aid-3P3NE2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@ContextConfiguration annotation / [The @ContextConfiguration annotation](part0127.xhtml#aid-3P3NE2
    "The @ContextConfiguration annotation"), [There is more…](part0127.xhtml#aid-3P3NE2
    "There is more…")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JdbcTemplate / [JdbcTemplate](part0127.xhtml#aid-3P3NE2 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boilerplate logic, abstraction / [Abstraction of boilerplate logic](part0127.xhtml#aid-3P3NE2
    "Abstraction of boilerplate logic")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auto-generated IDs, extraction / [Extraction of auto-generated IDs](part0127.xhtml#aid-3P3NE2
    "Extraction of auto-generated IDs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logging in / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile
    page – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The profile page – a form](part0141.xhtml#aid-46EVA2 "The profile page
    – a form")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data"), [Spring Data](part0098.xhtml#aid-2TEN42
    "Spring Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: subprojects, defining / [Spring Data](part0049.xhtml#aid-1ENBI2 "Spring Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commons / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repository specification / [Spring Data repository specification](part0049.xhtml#aid-1ENBI2
    "Spring Data repository specification")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: domain objects and entities / [Domain objects and entities](part0049.xhtml#aid-1ENBI2
    "Domain objects and entities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Transaction support / [Spring Transaction support](part0050.xhtml#aid-1FLS41
    "Spring Transaction support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data Commons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Spring Data Commons](part0049.xhtml#aid-1ENBI2 "Spring Data Commons")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring / [The Spring Data JPA configuration](part0092.xhtml#aid-2NNJO2
    "The Spring Data JPA configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Making use of the JPA and Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Making use of the JPA and Spring Data JPA"), [How to do it...](part0094.xhtml#aid-2PKKS2
    "How to do it..."), [How it works...](part0094.xhtml#aid-2PKKS2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EntityManager instance, injecting / [Injecting an EntityManager instance](part0094.xhtml#aid-2PKKS2
    "Injecting an EntityManager instance")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Persistence Query Language (JPQL), using / [Using JPQL](part0094.xhtml#aid-2PKKS2
    "Using JPQL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code, reducing / [Reducing boilerplate code with Spring Data JPA](part0094.xhtml#aid-2PKKS2
    "Reducing boilerplate code with Spring Data JPA")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query, creating / [Query creation](part0094.xhtml#aid-2PKKS2 "Query creation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entities, persisting / [Persisting Entities](part0094.xhtml#aid-2PKKS2 "Persisting
    Entities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: native SQL queries, using / [Using native SQL queries](part0094.xhtml#aid-2PKKS2
    "Using native SQL queries")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transactions, configuring / [Transactions](part0094.xhtml#aid-2PKKS2 "Transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Data](part0201.xhtml#aid-5VM121 "Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exceptions, handling / [Handling exceptions in the Spring Data layer](part0046.xhtml#aid-1BRPS1
    "Handling exceptions in the Spring Data layer")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data Mongo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Data](part0201.xhtml#aid-5VM121 "Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Spring Data MongoDB")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enabling / [Enabling Spring Data MongoDB](part0049.xhtml#aid-1ENBI2 "Enabling
    Spring Data MongoDB")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoRepository / [MongoRepository](part0049.xhtml#aid-1ENBI2 "MongoRepository")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data Redis (SDR) framework / [Spring Data Redis and Spring Session Data
    Redis](part0122.xhtml#aid-3KB4K2 "Spring Data Redis and Spring Session Data Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom implementations / [See also](part0094.xhtml#aid-2PKKS2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [See also](part0094.xhtml#aid-2PKKS2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data repository specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Data repository specification](part0049.xhtml#aid-1ENBI2 "Spring
    Data repository specification")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA / [Spring Data JPA](part0049.xhtml#aid-1ENBI2 "Spring Data JPA")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA, enabling / [Enabling Spring Data JPA](part0049.xhtml#aid-1ENBI2
    "Enabling Spring Data JPA")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JpaRepository / [JpaRepository](part0049.xhtml#aid-1ENBI2 "JpaRepository")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also"), [Data](part0201.xhtml#aid-5VM121
    "Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring EL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Spring EL](part0107.xhtml#aid-361C62 "Spring EL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Expression Language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Expression Language](part0024.xhtml#aid-MSDG1 "Spring Expression
    Language")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: features / [SpEL features](part0024.xhtml#aid-MSDG1 "SpEL features")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotation support / [SpEL annotation support](part0024.xhtml#aid-MSDG1 "SpEL
    annotation support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Expression Language (SpEL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Expression Language](part0135.xhtml#aid-40NRU1 "Spring Expression
    Language")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Spring Expression Language](part0135.xhtml#aid-40NRU1 "Spring Expression
    Language")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, obtaining with request parameter / [Getting data with a request parameter](part0135.xhtml#aid-40NRU1
    "Getting data with a request parameter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: composing, in JSP / [Composing a form in JSP](part0038.xhtml#aid-147LC1 "Composing
    a form in JSP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating / [Validating forms](part0039.xhtml#aid-1565U1 "Validating forms")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring form tag libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring and Spring form tag libraries](part0037.xhtml#aid-1394Q1 "Spring
    and Spring form tag libraries")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Springfox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Built-in PropertyEditor implementations](part0096.xhtml#aid-2RHM02 "Built-in
    PropertyEditor implementations")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: design concepts / [Design concepts behind Spring Framework](part0013.xhtml#aid-CCNA1
    "Design concepts behind Spring Framework")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [What does the Spring Framework bring?](part0079.xhtml#aid-2BASE1 "What
    does the Spring Framework bring?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring Framework modules](part0012.xhtml#aid-BE6O1 "The Spring
    Framework modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring HATEOAS resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DTOs, turning into / [Turning DTOs into Spring HATEOAS resources](part0109.xhtml#aid-37UDA2
    "Turning DTOs into Spring HATEOAS resources"), [How to do it…](part0109.xhtml#aid-37UDA2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring HATEOAS resources](part0109.xhtml#aid-37UDA2 "Spring HATEOAS
    resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResourceSupport class / [The ResourceSupport class](part0109.xhtml#aid-37UDA2
    "The ResourceSupport class")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource class / [The Resource class](part0109.xhtml#aid-37UDA2 "The Resource
    class")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: identifiable interface / [The Identifiable interface](part0109.xhtml#aid-37UDA2
    "The Identifiable interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: entities' @Id, abstracting / [Abstracting the Entities' @Id](part0109.xhtml#aid-37UDA2
    "Abstracting the Entities' @Id"), [There's more…](part0109.xhtml#aid-37UDA2 "There's
    more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0109.xhtml#aid-37UDA2 "See also"), [See also](part0110.xhtml#aid-38STS2
    "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring IoC container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring IoC container](part0016.xhtml#aid-F8902 "The Spring IoC
    container")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring IO reference document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Spring IO reference document](part0096.xhtml#aid-2RHM02 "The Spring
    IO reference document")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring JDBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: approaches / [Spring JDBC abstraction](part0048.xhtml#aid-1DOR02 "Spring JDBC
    abstraction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring JDBC abstraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring JDBC abstraction](part0048.xhtml#aid-1DOR02 "Spring JDBC abstraction")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JdbcTemplate / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpleJdbc classes / [SimpleJdbc classes](part0048.xhtml#aid-1DOR02 "SimpleJdbc
    classes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpringJUnit4ClassRunner / [SpringJUnit4ClassRunner](part0127.xhtml#aid-3P3NE2
    "SpringJUnit4ClassRunner")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Spring landscape](part0012.xhtml#aid-BE6O1 "The Spring landscape")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework modules / [The Spring Framework modules](part0012.xhtml#aid-BE6O1
    "The Spring Framework modules")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Tool Suite (STS) / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1
    "Spring Tool Suite (STS)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring subprojects / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application / [Spring MVC architecture](part0134.xhtml#aid-3VPBC1 "Spring
    MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: features / [Features of Spring MVC](part0028.xhtml#aid-QMFO1 "Features of Spring
    MVC")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: architecture / [The architecture and components of Spring MVC](part0032.xhtml#aid-UGI01
    "The architecture and components of Spring MVC"), [Spring MVC architecture](part0134.xhtml#aid-3VPBC1
    "Spring MVC architecture")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: components / [The architecture and components of Spring MVC](part0032.xhtml#aid-UGI01
    "The architecture and components of Spring MVC")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: asynchronous request processing / [Asynchronous request processing in Spring
    MVC](part0035.xhtml#aid-11C3M1 "Asynchronous request processing in Spring MVC")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure"), [How to do it...](part0083.xhtml#aid-2F4UM2
    "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring MVC overview](part0085.xhtml#aid-2H1VQ2 "Spring MVC overview")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: front controller / [Front controller](part0085.xhtml#aid-2H1VQ2 "Front controller")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC design pattern / [MVC design pattern](part0085.xhtml#aid-2H1VQ2 "MVC design
    pattern")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: flow / [Spring MVC flow](part0085.xhtml#aid-2H1VQ2 "Spring MVC flow")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DispatcherServlet / [DispatcherServlet – the Spring MVC entrypoint](part0085.xhtml#aid-2H1VQ2
    "DispatcherServlet – the Spring MVC entrypoint")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: annotation-defined controllers / [Annotation-defined controllers](part0085.xhtml#aid-2H1VQ2
    "Annotation-defined controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC 1-0-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Spring MVC 1-0-1](part0132.xhtml#aid-3TSA81 "Spring MVC 1-0-1")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC 3.1 / [New support classes for @RequestMapping since Spring MVC 3.1](part0089.xhtml#aid-2KS222
    "New support classes for @RequestMapping since Spring MVC 3.1")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Your first Spring MVC application](part0030.xhtml#aid-SJGS2 "Your
    first Spring MVC application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Setting up a Spring MVC application](part0031.xhtml#aid-TI1E2
    "Setting up a Spring MVC application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: project structure / [The project structure of a Spring MVC application](part0031.xhtml#aid-TI1E2
    "The project structure of a Spring MVC application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web.xml file / [The web.xml file – Springifying the web app](part0031.xhtml#aid-TI1E2
    "The web.xml file – Springifying the web app")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web app, springifying / [The web.xml file – Springifying the web app](part0031.xhtml#aid-TI1E2
    "The web.xml file – Springifying the web app")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ApplicationContext files / [ApplicationContext files in a Spring MVC application](part0031.xhtml#aid-TI1E2
    "ApplicationContext files in a Spring MVC application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HomeController / [HomeController – @Controller for the home screen](part0031.xhtml#aid-TI1E2
    "HomeController – @Controller for the home screen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: home.jsp file / [The home.jsp file – the landing screen](part0031.xhtml#aid-TI1E2
    "The home.jsp file – the landing screen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: incoming requests, handling / [Handling incoming requests](part0031.xhtml#aid-TI1E2
    "Handling incoming requests")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Reactor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Other noteworthy projects](part0201.xhtml#aid-5VM121 "Other noteworthy
    projects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: users, adapting / [Adapting users and roles to Spring Security](part0103.xhtml#aid-3279U2
    "Adapting users and roles to Spring Security"), [How to do it...](part0103.xhtml#aid-3279U2
    "How to do it..."), [How it works...](part0103.xhtml#aid-3279U2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: roles, adapting / [Adapting users and roles to Spring Security](part0103.xhtml#aid-3279U2
    "Adapting users and roles to Spring Security"), [How to do it...](part0103.xhtml#aid-3279U2
    "How to do it..."), [How it works...](part0103.xhtml#aid-3279U2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introduction to Spring Security](part0103.xhtml#aid-3279U2 "Introduction
    to Spring Security")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThreadLocal context holders / [ThreadLocal context holders](part0103.xhtml#aid-3279U2
    "ThreadLocal context holders")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interfaces / [Noticeable Spring Security interfaces](part0103.xhtml#aid-3279U2
    "Noticeable Spring Security interfaces")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication interface / [The Authentication interface](part0103.xhtml#aid-3279U2
    "The Authentication interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UserDetails interface / [The UserDetails interface](part0103.xhtml#aid-3279U2
    "The UserDetails interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UserDetailsManager interface / [The UserDetailsManager interface](part0103.xhtml#aid-3279U2
    "The UserDetailsManager interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GrantedAuthority interface / [The GrantedAuthority interface](part0103.xhtml#aid-3279U2
    "The GrantedAuthority interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security, reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Security reference](part0103.xhtml#aid-3279U2 "Spring Security
    reference")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: technical overview / [Technical overview](part0103.xhtml#aid-3279U2 "Technical
    overview")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Technical overview](part0103.xhtml#aid-3279U2 "Technical overview"),
    [Sample applications](part0103.xhtml#aid-3279U2 "Sample applications")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sample applications / [Sample applications](part0103.xhtml#aid-3279U2 "Sample
    applications")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: core services / [Core services](part0103.xhtml#aid-3279U2 "Core services")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Testing the authentication](part0183.xhtml#aid-5EGMU1 "Testing
    the authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security authorities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Security authorities](part0107.xhtml#aid-361C62 "Spring Security
    authorities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration attributes / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Interceptor protecting secure objects / [Configuration attributes](part0107.xhtml#aid-361C62
    "Configuration attributes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security filter-chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [SocialAuthenticationFilter](part0105.xhtml#aid-344B22 "SocialAuthenticationFilter
    ")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <http> component / [The <http> component](part0104.xhtml#aid-335QG2 "The <http>
    component")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security filter-chain / [The Spring Security filter-chain](part0104.xhtml#aid-335QG2
    "The Spring Security filter-chain")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <http> configuration / [Our <http> configuration](part0104.xhtml#aid-335QG2
    "Our <http> configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BasicAuthenticationFilter / [BasicAuthenticationFilter](part0104.xhtml#aid-335QG2
    "BasicAuthenticationFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with authenticationEntryPoint / [With an authenticationEntryPoint](part0104.xhtml#aid-335QG2
    "With an authenticationEntryPoint")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security OAuth project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Implementing an OAuth2 authentication server](part0105.xhtml#aid-344B22
    "Implementing an OAuth2 authentication server")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring security reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [In the Spring Security reference](part0104.xhtml#aid-335QG2 "In the Spring
    Security reference"), [The Spring Security reference](part0107.xhtml#aid-361C62
    "The Spring Security reference")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: messages, securing with / [Securing messages with Spring Session and Redis](part0122.xhtml#aid-3KB4K2
    "Securing messages with Spring Session and Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Social
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring social reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Spring social ConnectController](part0105.xhtml#aid-344B22 "The Spring
    social ConnectController")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Social Twitter project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Enough Hello Worlds, let's fetch tweets!](part0136.xhtml#aid-41MCG1
    "Enough Hello Worlds, let's fetch tweets!")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application, registering / [Registering your application](part0136.xhtml#aid-41MCG1
    "Registering your application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Setting up Spring Social Twitter](part0136.xhtml#aid-41MCG1 "Setting
    up Spring Social Twitter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter, accessing / [Accessing Twitter](part0136.xhtml#aid-41MCG1 "Accessing
    Twitter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring subprojects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Spring subprojects](part0012.xhtml#aid-BE6O1 "Spring subprojects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Tool Suite (STS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)"), [Your first Spring MVC application](part0030.xhtml#aid-SJGS2 "Your first
    Spring MVC application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Spring Tool Suite (STS)](part0012.xhtml#aid-BE6O1 "Spring Tool Suite
    (STS)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Relevance of Spring Transaction](part0051.xhtml#aid-1GKCM2 "Relevance
    of Spring Transaction"), [Spring Transaction fundamentals](part0051.xhtml#aid-1GKCM2
    "Spring Transaction fundamentals")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative transaction management / [Declarative transaction management](part0051.xhtml#aid-1GKCM2
    "Declarative transaction management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Transactional annotation, using / [Using the @Transactional annotation](part0051.xhtml#aid-1GKCM2
    "Using the @Transactional annotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: programmatic transaction management / [Programmatic transaction management](part0051.xhtml#aid-1GKCM2
    "Programmatic transaction management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using Spring validator](part0115.xhtml#aid-3DLGM2 "Using Spring validator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ValodationUtils utility / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I18n validation errors / [I18n validation errors](part0115.xhtml#aid-3DLGM2
    "I18n validation errors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0122.xhtml#aid-3KB4K2 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring WebSocket support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring WebSocket support](part0119.xhtml#aid-3HFIU2 "Spring WebSocket
    support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all-in-one configuration / [All-in-one configuration](part0119.xhtml#aid-3HFIU2
    "All-in-one configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: message handlers, defining via @MessageMapping / [Defining message handlers
    via @MessageMapping](part0119.xhtml#aid-3HFIU2 "Defining message handlers via
    @MessageMapping")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sql* classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC operations, defining with / [JDBC operations with Sql* classes](part0048.xhtml#aid-1DOR02
    "JDBC operations with Sql* classes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Explanation](part0170.xhtml#aid-523VK2 "Explanation"), [Behind
    a secured server](part0172.xhtml#aid-5410O2 "Behind a secured server")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [SSL](part0172.xhtml#aid-5410O2 "SSL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: self-signed certificate, generating / [Generating a self-signed certificate](part0172.xhtml#aid-5410O2
    "Generating a self-signed certificate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [The easy way](part0172.xhtml#aid-5410O2 "The easy way")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, for http and https channels / [The dual way](part0172.xhtml#aid-5410O2
    "The dual way")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, behind secured server / [Behind a secured server](part0172.xhtml#aid-5410O2
    "Behind a secured server")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start Of Authority (SOA) / [DNS configuration or host aliasing](part0102.xhtml#aid-318PC2
    "DNS configuration or host aliasing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: status code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 500 Server Error / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 405 Method not Supported / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 404 Not Found / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 400 Bad Request / [Status codes and exception handling](part0163.xhtml#aid-4REBM1
    "Status codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 200 OK / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with ResponseEntity / [Status code with ResponseEntity](part0163.xhtml#aid-4REBM1
    "Status code with ResponseEntity")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with exception / [Status codes with exceptions](part0163.xhtml#aid-4REBM1 "Status
    codes with exceptions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: status codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Status codes and exception handling](part0163.xhtml#aid-4REBM1 "Status
    codes and exception handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StompMessageBrokerRelay / [StompMessageBrokerRelay](part0120.xhtml#aid-3IE3G2
    "StompMessageBrokerRelay")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STOMP over SockJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: social events, streaming with / [Streaming social events with STOMP over SockJS](part0119.xhtml#aid-3HFIU2
    "Streaming social events with STOMP over SockJS ") , [How to do it…](part0119.xhtml#aid-3HFIU2
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STOMP over WebSocket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [STOMP over WebSocket and the fallback option in Spring 4](part0054.xhtml#aid-1JFUC2
    "STOMP over WebSocket and the fallback option in Spring 4")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: streams, Java 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Java 8 streams and lambdas](part0137.xhtml#aid-42KT21 "Java 8 streams
    and lambdas")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stubs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Mocks and stubs](part0181.xhtml#aid-5CJLQ2 "Mocks and stubs")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, for testing beans / [Stubbing our beans while testing](part0181.xhtml#aid-5CJLQ2
    "Stubbing our beans while testing")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and mocks, selecting between / [Should I use mocks or stubs?](part0181.xhtml#aid-5CJLQ2
    "Should I use mocks or stubs?")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supporting beans, DispatcherServlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HandlerMapping / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HandlerAdapter / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HandlerExceptionResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LocaleResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LocaleContextResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThemeResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultipartResolver / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlashMapManager / [Beans supporting DispatcherServlet and their roles](part0033.xhtml#aid-VF2I1
    "Beans supporting DispatcherServlet and their roles")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swagger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API, documenting / [Getting ready](part0100.xhtml#aid-2VBO82 "Getting ready"),
    [How to do it...](part0100.xhtml#aid-2VBO82 "How to do it..."), [How it works...](part0100.xhtml#aid-2VBO82
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API, exposing / [How to do it...](part0100.xhtml#aid-2VBO82 "How to do it..."),
    [How it works...](part0100.xhtml#aid-2VBO82 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: different tools / [Different tools, different standards](part0100.xhtml#aid-2VBO82
    "Different tools, different standards")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Documentation with Swagger](part0164.xhtml#aid-4SCS81 "Documentation
    with Swagger")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swagger.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The Swagger.io](part0100.xhtml#aid-2VBO82 "The Swagger.io")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swagger UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The Swagger UI](part0100.xhtml#aid-2VBO82 "The Swagger UI")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '@Test annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [@Test annotation](part0125.xhtml#aid-3N6MA2 "@Test annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expected and timeout arguments / [The expected and timeout arguments](part0125.xhtml#aid-3N6MA2
    "The expected and timeout arguments")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@Transactional annotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using the @Transactional annotation](part0051.xhtml#aid-1GKCM2 "Using
    the @Transactional annotation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transaction management, enabling for / [Enabling transaction management for
    @Transactional](part0051.xhtml#aid-1GKCM2 "Enabling transaction management for
    @Transactional")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taskify application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building / [Building a Taskify application](part0071.xhtml#aid-23MNU1 "Building
    a Taskify application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taskify Ember app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building / [Building the Taskify Ember app](part0073.xhtml#aid-25JP22 "Building
    the Taskify Ember app")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taskify, setting up as Ember CLI project / [Setting up Taskify as an Ember CLI
    project](part0073.xhtml#aid-25JP22 "Setting up Taskify as an Ember CLI project")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember Data, setting up / [Setting up Ember Data](part0073.xhtml#aid-25JP22 "Setting
    up Ember Data")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application routes, configuring / [Configuring application routes](part0073.xhtml#aid-25JP22
    "Configuring application routes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: home screen, building / [Building the home screen](part0073.xhtml#aid-25JP22
    "Building the home screen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user screen, building / [Building the user screen](part0073.xhtml#aid-25JP22
    "Building the user screen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom helper, building / [Building a custom helper](part0073.xhtml#aid-25JP22
    "Building a custom helper")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: action handlers, adding / [Adding action handlers](part0073.xhtml#aid-25JP22
    "Adding action handlers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom component, building / [Building a custom component – modal window](part0073.xhtml#aid-25JP22
    "Building a custom component – modal window")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: userEditModal, building with{{modal-window}} / [Building userEditModal using
    {{modal-window}}](part0073.xhtml#aid-25JP22 "Building userEditModal using {{modal-window}}")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: task screen, building / [Building the task screen](part0073.xhtml#aid-25JP22
    "Building the task screen")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stacking, with RabbitMQ / [Stacking and consuming tasks with RabbitMQ and AMQP](part0121.xhtml#aid-3JCK22
    "Stacking and consuming tasks with RabbitMQ and AMQP"), [How to do it…](part0121.xhtml#aid-3JCK22
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: consuming, with RabbitMQ / [Stacking and consuming tasks with RabbitMQ and AMQP](part0121.xhtml#aid-3JCK22
    "Stacking and consuming tasks with RabbitMQ and AMQP"), [How to do it…](part0121.xhtml#aid-3JCK22
    "How to do it…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sender side / [Sender side](part0121.xhtml#aid-3JCK22 "Sender side")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: consumer side / [Consumer side](part0121.xhtml#aid-3JCK22 "Consumer side")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side / [Client-side](part0121.xhtml#aid-3JCK22 "Client-side")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: messaging architecture overview / [Messaging architecture overview](part0121.xhtml#aid-3JCK22
    "Messaging architecture overview")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scalable model / [A scalable model](part0121.xhtml#aid-3JCK22 "A scalable model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template Method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [JdbcTemplate](part0048.xhtml#aid-1DOR02 "JdbcTemplate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: terminology, Aspect Oriented Programing (AOP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aspect / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: join point / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: advice / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointcut / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: target object / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP
    concepts and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: weaving / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP concepts
    and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: introduction / [AOP concepts and terminology](part0025.xhtml#aid-NQU22 "AOP
    concepts and terminology")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test-driven development (TDD) / [Testing with Spring](part0026.xhtml#aid-OPEK1
    "Testing with Spring")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test-driven development (TTD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Test-driven development](part0177.xhtml#aid-58PJI1 "Test-driven development")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testing framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Introducing Ember.js](part0062.xhtml#aid-1R42S1 "Introducing Ember.js")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testing support, Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mock objects / [Mock objects](part0026.xhtml#aid-OPEK1 "Mock objects")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit and integration testing utilities / [Unit and integration testing utilities](part0026.xhtml#aid-OPEK1
    "Unit and integration testing utilities")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: th*each tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Accessing Twitter](part0136.xhtml#aid-41MCG1 "Accessing Twitter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: third-party dependencies, Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework dependency model / [The Spring Framework dependency model](part0083.xhtml#aid-2F4UM2
    "The Spring Framework dependency model")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring MVC dependency / [The Spring MVC dependency](part0083.xhtml#aid-2F4UM2
    "The Spring MVC dependency")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven properties, using / [Using Maven properties](part0083.xhtml#aid-2F4UM2
    "Using Maven properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: third-party OAuth2 scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticating with / [Authenticating with a third-party OAuth2 scheme](part0105.xhtml#aid-344B22
    "Authenticating with a third-party OAuth2 scheme"), [How to do it...](part0105.xhtml#aid-344B22
    "How to do it..."), [How it works...](part0105.xhtml#aid-344B22 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application point of view / [From the application point of view](part0105.xhtml#aid-344B22
    "From the application point of view")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo! point of view / [From the Yahoo! point of view](part0105.xhtml#aid-344B22
    "From the Yahoo! point of view")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth2 explicit grant flow / [OAuth2 explicit grant flow](part0105.xhtml#aid-344B22
    "OAuth2 explicit grant flow")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refresh-token and access-token / [Refresh-token and access-token](part0105.xhtml#aid-344B22
    "Refresh-token and access-token")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring social / [Spring social – role and key features](part0105.xhtml#aid-344B22
    "Spring social – role and key features")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: social connections persistence / [Social connection persistence](part0105.xhtml#aid-344B22
    "Social connection persistence")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provider-specific configuration / [Provider-specific configuration](part0105.xhtml#aid-344B22
    "Provider-specific configuration")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thymeleaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Resolving Thymeleaf views](part0041.xhtml#aid-173721 "Resolving Thymeleaf
    views"), [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: views, resolving / [Resolving Thymeleaf views](part0041.xhtml#aid-173721 "Resolving
    Thymeleaf views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Using Thymeleaf](part0133.xhtml#aid-3UQQQ1 "Using Thymeleaf"),
    [Thymeleaf security tags](part0168.xhtml#aid-506UG2 "Thymeleaf security tags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: page, adding / [Our first page](part0133.xhtml#aid-3UQQQ1 "Our first page")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thymeleaf security tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [Thymeleaf security tags](part0168.xhtml#aid-506UG2 "Thymeleaf security
    tags")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat (7+)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse, configuring / [Getting ready](part0081.xhtml#aid-2D7TI2 "Getting ready"),
    [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [How to do it...](part0081.xhtml#aid-2D7TI2 "How to do it...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse, integrating / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2 "Tomcat
    8 inside Eclipse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Tomcat connectors](part0102.xhtml#aid-318PC2 "Tomcat connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP connectors / [HTTP connectors](part0102.xhtml#aid-318PC2 "HTTP connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJP connectors / [AJP connectors](part0102.xhtml#aid-318PC2 "AJP connectors")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [There is more…](part0102.xhtml#aid-318PC2 "There is more…")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AssertJ / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DbUnit / [The right tools for the job](part0178.xhtml#aid-59O441 "The right
    tools for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spock / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Spring Transaction support](part0050.xhtml#aid-1FLS41 "Spring Transaction
    support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transaction attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Spring Transaction fundamentals](part0051.xhtml#aid-1GKCM2 "Spring
    Transaction fundamentals")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transaction management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Transaction management](part0114.xhtml#aid-3CN042 "Transaction management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: building / [The simplistic approach](part0114.xhtml#aid-3CN042 "The simplistic
    approach")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACID properties / [ACID properties](part0114.xhtml#aid-3CN042 "ACID properties")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: global transactions, versus local transactions / [Global versus local transactions](part0114.xhtml#aid-3CN042
    "Global versus local transactions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Registering your application](part0136.xhtml#aid-41MCG1 "Registering
    your application"), [Twitter authentication](part0170.xhtml#aid-523VK2 "Twitter
    authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up / [Twitter authentication](part0170.xhtml#aid-523VK2 "Twitter authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: social authentication, setting up / [Setting up social authentication](part0170.xhtml#aid-523VK2
    "Setting up social authentication")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: coding / [Explanation](part0170.xhtml#aid-523VK2 "Explanation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typescript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The future](part0203.xhtml#aid-61J261 "The future")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The future](part0203.xhtml#aid-61J261 "The future")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: UI behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling, components used / [Handling UI behavior using components](part0069.xhtml#aid-21PMQ1
    "Handling UI behavior using components")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ToggleButton component, building step by step / [Building a ToggleButton component
    step by step](part0069.xhtml#aid-21PMQ1 "Building a ToggleButton component step
    by step")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI templates, building with Handlebars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Building UI templates using Handlebars](part0067.xhtml#aid-1VSLM2 "Building
    UI templates using Handlebars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handlebars helpers / [Handlebars helpers](part0067.xhtml#aid-1VSLM2 "Handlebars
    helpers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data binding, with input helpers / [Data binding with input helpers](part0067.xhtml#aid-1VSLM2
    "Data binding with input helpers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control flow helpers, using in Handlebars / [Using control flow helpers in Handlebars](part0067.xhtml#aid-1VSLM2
    "Using control flow helpers in Handlebars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: event helpers, using / [Using event helpers](part0067.xhtml#aid-1VSLM2 "Using
    event helpers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unified Expression Language (UEL) / [Spring Expression Language](part0024.xhtml#aid-MSDG1
    "Spring Expression Language")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [How should I test my code?](part0176.xhtml#aid-57R301 "How should I
    test my code?"), [The unit tests](part0178.xhtml#aid-59O441 "The unit tests")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tools / [The right tools for the job](part0178.xhtml#aid-59O441 "The right tools
    for the job")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: writing / [Our first unit test](part0180.xhtml#aid-5BL581 "Our first unit test")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST controllers / [Unit testing REST controllers](part0182.xhtml#aid-5DI6C2
    "Unit testing REST controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with Spock / [Unit tests with Spock](part0184.xhtml#aid-5FF7G2 "Unit tests with
    Spock")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URI template patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [URI template patterns](part0086.xhtml#aid-2I0GC2 "URI template patterns")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ant-style path patterns / [Ant-style path patterns](part0086.xhtml#aid-2I0GC2
    "Ant-style path patterns")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path pattern comparison / [Path pattern comparison](part0086.xhtml#aid-2I0GC2
    "Path pattern comparison")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewResolvers / [ViewResolvers](part0086.xhtml#aid-2I0GC2 "ViewResolvers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with matrix variables / [URL mapping with matrix variables](part0151.xhtml#aid-4G04U2
    "URL mapping with matrix variables")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UserDetails interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The UserDetails interface](part0103.xhtml#aid-3279U2 "The UserDetails
    interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authentication providers / [Authentication providers](part0103.xhtml#aid-3279U2
    "Authentication providers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UserDetailsManager interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The UserDetailsManager interface](part0103.xhtml#aid-3279U2 "The UserDetailsManager
    interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User eXperience paradigm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The User eXperience paradigm](part0084.xhtml#aid-2G3F81 "The User eXperience
    paradigm")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user management API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [A user management API](part0162.xhtml#aid-4QFR42 "A user management
    API")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-invocation handling / [Pre-invocation handling](part0107.xhtml#aid-361C62
    "Pre-invocation handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AccessDecisionManager interface / [AccessDecisionManager](part0107.xhtml#aid-361C62
    "AccessDecisionManager")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: invocation handling / [After invocation handling](part0107.xhtml#aid-361C62
    "After invocation handling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expression-based access control / [Expression-based access control](part0107.xhtml#aid-361C62
    "Expression-based access control")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web security expressions / [Web Security expressions](part0107.xhtml#aid-361C62
    "Web Security expressions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: method security expressions / [Method security expressions](part0107.xhtml#aid-361C62
    "Method security expressions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@PreAuthorize, used for access control / [Access control using @PreAuthorize
    and @PostAuthorize](part0107.xhtml#aid-361C62 "Access control using @PreAuthorize
    and @PostAuthorize")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '@PostAuthorize, used for access control / [Access control using @PreAuthorize
    and @PostAuthorize](part0107.xhtml#aid-361C62 "Access control using @PreAuthorize
    and @PostAuthorize")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collections filtering, @PreFilter used / [Filtering collections using @PreFilter
    and @PostFilter](part0107.xhtml#aid-361C62 "Filtering collections using @PreFilter
    and @PostFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collections filtering, @PostFilter used / [Filtering collections using @PreFilter
    and @PostFilter](part0107.xhtml#aid-361C62 "Filtering collections using @PreFilter
    and @PostFilter")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSR-250 / [JSR-250 and legacy method security](part0107.xhtml#aid-361C62 "JSR-250
    and legacy method security")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: validate command / [Validate](part0124.xhtml#aid-3M85O2 "Validate")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validation, profile page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Validation](part0142.xhtml#aid-47DFS2 "Validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validation messages, customizing / [Customize validation messages](part0142.xhtml#aid-47DFS2
    "Customize validation messages")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom annotation, defining / [Custom annotation for validation](part0142.xhtml#aid-47DFS2
    "Custom annotation for validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ValidationUnits utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [ValidationUtils](part0115.xhtml#aid-3DLGM2 "ValidationUtils")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [Client validation](part0144.xhtml#aid-49AH01 "Client validation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewResolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for configuring fallback controller / [Configuring a fallback controller
    using ViewResolver](part0086.xhtml#aid-2I0GC2 "Configuring a fallback controller
    using ViewResolver"), [How to do it...](part0086.xhtml#aid-2I0GC2 "How to do it..."),
    [How it works...](part0086.xhtml#aid-2I0GC2 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: view resolvers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AbstractCachingViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XmlViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResourceBundleViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UrlBasedViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InternalResourceViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VelocityViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeMarkerViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JasperReportsViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TilesViewResolver / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: working with / [Working with views](part0036.xhtml#aid-12AK81 "Working with
    views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resolving / [Resolving views](part0036.xhtml#aid-12AK81 "Resolving views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSP views, resolving / [Resolving JSP views](part0036.xhtml#aid-12AK81 "Resolving
    JSP views")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: model attributes, binding in JSP pages / [Binding Model attributes in JSP pages
    using JSTL](part0036.xhtml#aid-12AK81 "Binding Model attributes in JSP pages using
    JSTL")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: view technologies, Spring MVC / [More view technologies](part0042.xhtml#aid-181NK1
    "More view technologies")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: web.xml file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [There's more...](part0083.xhtml#aid-2F4UM2 "There's more...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dispatcher Servlet / [DispatcherServlet](part0134.xhtml#aid-3VPBC1 "DispatcherServlet")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, displaying / [Passing data to the view](part0134.xhtml#aid-3VPBC1 "Passing
    data to the view")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deploying, to Pivotal Web Services (PWS) / [Deploying your web application to
    Pivotal Web Services](part0197.xhtml#aid-5RRUQ2 "Deploying your web application
    to Pivotal Web Services")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Foundry CLI tools, installing / [Installing the Cloud Foundry CLI tools](part0197.xhtml#aid-5RRUQ2
    "Installing the Cloud Foundry CLI tools")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: assembling / [Assembling the application](part0197.xhtml#aid-5RRUQ2 "Assembling
    the application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis, activating / [Activating Redis](part0197.xhtml#aid-5RRUQ2 "Activating
    Redis")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deploying, on Heroku / [Deploying your web application on Heroku](part0198.xhtml#aid-5SQFC2
    "Deploying your web application on Heroku")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting up, on Heroku / [Setting up the application](part0198.xhtml#aid-5SQFC2
    "Setting up the application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: executing, on Heroku / [Running your application](part0198.xhtml#aid-5SQFC2
    "Running your application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improving / [Improving your application](part0199.xhtml#aid-5TOVU1 "Improving
    your application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebApplicationObjectSupport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web archives (war)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [Web caching](part0089.xhtml#aid-2KS222 "Web caching")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebContentGenerator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [More features offered by WebContentGenerator](part0089.xhtml#aid-2KS222
    "More features offered by WebContentGenerator")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebContentInterceptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining / [Defining a common WebContentInterceptor](part0089.xhtml#aid-2KS222
    "Defining a common WebContentInterceptor"), [How to do it...](part0089.xhtml#aid-2KS222
    "How to do it..."), [How it works...](part0089.xhtml#aid-2KS222 "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: controllers / [Common behaviors for Controllers](part0089.xhtml#aid-2KS222 "Common
    behaviors for Controllers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sessions, requiring / [Requiring sessions](part0089.xhtml#aid-2KS222 "Requiring
    sessions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sessions, synchronizing / [Synchronizing sessions](part0089.xhtml#aid-2KS222
    "Synchronizing sessions")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cache-headers management / [Cache-header management](part0089.xhtml#aid-2KS222
    "Cache-header management")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP methods support / [HTTP method support](part0089.xhtml#aid-2KS222 "HTTP
    method support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: high-level interceptor / [A high-level interceptor](part0089.xhtml#aid-2KS222
    "A high-level interceptor")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: request lifecycle / [Request lifecycle](part0089.xhtml#aid-2KS222 "Request lifecycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebJars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used, for material design / [Material design with WebJars](part0138.xhtml#aid-43JDK2
    "Material design with WebJars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: layouts, using / [Using layouts](part0138.xhtml#aid-43JDK2 "Using layouts")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: navigation, using / [Navigation](part0138.xhtml#aid-43JDK2 "Navigation")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TweetController, using / [The check point](part0139.xhtml#aid-44HU61 "The check
    point")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [The web resources](part0083.xhtml#aid-2F4UM2 "The web resources")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: target runtime environment / [The target runtime environment](part0083.xhtml#aid-2F4UM2
    "The target runtime environment")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring web application context / [The Spring web application context](part0083.xhtml#aid-2F4UM2
    "The Spring web application context")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plugins / [Plugins](part0083.xhtml#aid-2F4UM2 "Plugins")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [setMessageConverters](part0096.xhtml#aid-2RHM02 "setMessageConverters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Servlet Support / [Web Servlet Support](part0128.xhtml#aid-3Q2802 "Web Servlet
    Support")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reference link / [WebSockets](part0193.xhtml#aid-5O1SI1 "WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebSocket application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: message, broadcasting to single user / [Broadcasting a message to a single user
    in a WebSocket application](part0055.xhtml#aid-1KEEU1 "Broadcasting a message
    to a single user in a WebSocket application")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [An introduction to WebSockets](part0119.xhtml#aid-3HFIU2 "An introduction
    to WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [An introduction to WebSockets](part0119.xhtml#aid-3HFIU2 "An introduction
    to WebSockets")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lifecycle / [WebSocket Lifecycle](part0119.xhtml#aid-3HFIU2 "WebSocket Lifecycle")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URI schemes / [Two dedicated URI schemes](part0119.xhtml#aid-3HFIU2 "Two dedicated
    URI schemes")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Installing Spring, Spring MVC, and a web structure](part0083.xhtml#aid-2F4UM2
    "Installing Spring, Spring MVC, and a web structure")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating / [Getting ready](part0083.xhtml#aid-2F4UM2 "Getting ready"), [How
    to do it...](part0083.xhtml#aid-2F4UM2 "How to do it..."), [How it works...](part0083.xhtml#aid-2F4UM2
    "How it works...")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Tools Platform (WTP) plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Tomcat 8 inside Eclipse](part0081.xhtml#aid-2D7TI2 "Tomcat 8 inside
    Eclipse")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: workers / [Workers](part0102.xhtml#aid-318PC2 "Workers")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generating / [Generating XML](part0165.xhtml#aid-4TBCQ1 "Generating XML")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML marshalling, support for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Support for XML marshalling](part0097.xhtml#aid-2SG6I2 "Support for
    XML marshalling")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XStream marshaller / [The XStream marshaller](part0097.xhtml#aid-2SG6I2 "The
    XStream marshaller")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML parser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAXB2 implementation, using as / [Using a JAXB2 implementation as an XML parser](part0097.xhtml#aid-2SG6I2
    "Using a JAXB2 implementation as an XML parser")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML schema based AOP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [XML schema-based AOP](part0025.xhtml#aid-NQU22 "XML schema-based AOP")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XStream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [The XStream marshaller](part0097.xhtml#aid-2SG6I2 "The XStream marshaller")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X Stream converters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [XStream converters](part0111.xhtml#aid-39REE2 "XStream converters")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Y
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yahoo! APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL / [See also](part0112.xhtml#aid-3APV02 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo! financial stock tickers / [See also](part0112.xhtml#aid-3APV02 "See also")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: zipcloud-core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zipcloud-parent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: about / [Getting ready](part0082.xhtml#aid-2E6E42 "Getting ready")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
