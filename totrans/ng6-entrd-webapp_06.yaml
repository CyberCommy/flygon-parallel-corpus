- en: Reactive Forms and Component Interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've been working with putting together the basic elements that make
    up an Angular application, such as modules, components, pipes, services, RxJS,
    unit testing, environment variables, and even going a step ahead by learning how
    to deliver your web application using Docker and make it look polished with Angular
    Material.
  prefs: []
  type: TYPE_NORMAL
- en: In order to build truly dynamic applications, we need to build features that
    enable rich user interactions and leverage modern web functionality such as `LocalStorage`
    and `GeoLocation`. You also need to become proficient with new Angular syntax
    to effectively leverage binding, conditional layouts, and repeating elements.
  prefs: []
  type: TYPE_NORMAL
- en: You need to be able to work with Angular Forms to create input fields with validation
    messages, create engaging search experiences with search-as-you-type functionality,
    provide users a way to customize their preferences, and be able to persist this
    information both locally and on a server. Your applications will likely have multiple
    components sharing data.
  prefs: []
  type: TYPE_NORMAL
- en: As your app matures and you involve more people to work on it with you or communicate
    your ideas to your colleagues, it becomes increasingly difficult to do so with
    just a hand-drawn sketch. This means we need a more professional mock-up, preferably
    an interactive one, to best demonstrate the planned UX for the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Become aware of these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two-way binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template driven forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Become proficient in interactions between components
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Be able to create these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interactive prototype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input field and validation using Angular Reactive Forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive prototype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appearances do matter. Whether you're working on a development team or as a
    freelancer, your colleagues, bosses, or clients will always take a well put together
    presentation more seriously. In [Chapter 2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml), *Create
    a Local Weather Web Application*, I mentioned the time and information management
    challenges of being a full-stack developer. We must pick a tool that can achieve
    the best results with the least amount of work. This usually means going down
    the paid-tool route, but UI/UX design tools are rarely free or cheap.
  prefs: []
  type: TYPE_NORMAL
- en: A prototyping tool will help you create a better, more professional looking,
    mock up of the app. Whatever tool you choose should also support the UI framework
    you choose to use, in this case, Material.
  prefs: []
  type: TYPE_NORMAL
- en: If a picture is worth a 1,000 words, an interactive prototype of your app is
    worth a 1,000 lines of code. An interactive mock-up of the app will help you vet
    ideas before you write a single line of code and save you a lot of code writing.
  prefs: []
  type: TYPE_NORMAL
- en: MockFlow WireFramePro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've picked MockFlow WireFramePro, [https://mockflow.com](https://mockflow.com),
    as an easy-to-use, capable, and online tool that supports Material design UI elements
    and allows you to create multiple pages, which can then be linked together to
    create the illusion of a working application.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, at the time of publishing, MockFlow allows one free project
    forever with the full feature set and capabilities available. This will give you
    a chance to truly vet the usefulness of the tool without artificial limits or
    a trial period that always seems to go by much quicker than you expect.
  prefs: []
  type: TYPE_NORMAL
- en: Balsamiq is the better-known wireframing tool. However, [https://balsamiq.com](https://balsamiq.com)
    doesn't offer any free usage, but if you are looking for a tool without a monthly
    cost, I would highly recommend Balsamiq's desktop application Mockups, which has
    a one-time purchase cost.
  prefs: []
  type: TYPE_NORMAL
- en: Building the mock-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start by adding a new task to create an interactive prototype and at the
    end of the task, I''ll attach all artifacts to this task so that they''re stored
    on GitHub where it is accessible to all team members and also can be linked from
    the Wiki page for persistent documentation. Let''s pull this new task to the In
    Progress column and take a look at the status of our Kanban board from Waffle.io:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/049df723-d8b0-41be-b5d0-4118eba0e49a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'WireframePro is pretty intuitive as a drag and drop design interface, so I
    won''t go into the details of how the tool works, but I will highlight some tips:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a component pack, either Hand Drawn UI or Material design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add each screen as a new page, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/80ba1e1d-9144-4b72-9d9a-8b6794bd804a.png)MockFlow.com WireFrame
    Pro'
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend sticking to the hand-drawn UI look and feel, because it sets
    the right expectation with your audience. If you present a very high quality of
    a mock-up on your first meeting with a client, your first demo will be an understatement.
    You will, at best, merely meet expectations and, at worst, underwhelm your audience.
  prefs: []
  type: TYPE_NORMAL
- en: Home screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s the new mock-up of the home screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fbab9fda-4d66-43a7-81c9-0d0d0735e807.png)LocalCast Weather Wireframe'
  prefs: []
  type: TYPE_NORMAL
- en: You'll note some differences, such as the app toolbar being conflated with the
    browser bar and the intentional vagueness of the repeating elements. I have made
    these choices to reduce the amount of design time I would need to spend on each
    screen. I simply used horizontal and vertical line objects to create the grid.
  prefs: []
  type: TYPE_NORMAL
- en: Search results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The search screen similarly remains intentionally vague to avoid having to maintain
    any kind of detailed information. Surprisingly, your audience is far more likely
    to focus on what your test data is rather than focusing on the design elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'By being vague, we intentionally keep the audiences attention on what matters.
    Here''s the search screen mock-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e40d3db6-04ae-45dc-b22c-da7ecc88ed57.png)LocalCast Weather Search
    Wireframe'
  prefs: []
  type: TYPE_NORMAL
- en: Settings pane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The settings pane is a separate screen with the elements from the home screen
    copied over and applied 85% opacity to create a model-like experience. The settings
    pane itself is just a rectangle with a black border and a solid white background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following mock-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2cfeee5a-082d-4288-89d9-29c04de3bdf2.png)LocalCast Weather Settings
    Wireframe'
  prefs: []
  type: TYPE_NORMAL
- en: Adding interactivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to click around a mock-up and get a feel for the navigational workflow
    is an indispensable tool to get early user feedback. This will save you and your
    clients a lot of frustration, time, and money.
  prefs: []
  type: TYPE_NORMAL
- en: 'To link elements together, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a clickable element such as the *gear* icon on the Home Screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Link subheading, click on Select Page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the pop-over window, select Settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Create Link, as shown in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/e8d1d737-cf40-4edc-a9ef-e782fd021d1b.png)WireFrame Pro - Adding
    a Link'
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you click on the *gear* icon, the tool will display the settings page,
    which will create the effect of the sidebar actually displayed on the same page.
    To go back to the home screen, you can link the gear icon and the section outside
    of the sidebar back to that page so that the user can navigate back and forth.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting the functional prototype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your prototype is completed, you can export it as various formats:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Export wireframe button, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bdb1f463-01af-4ea6-b162-1fb6d0bbe731.png)WireFrame Pro - Export
    wireframe'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now select your file format, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/3303b71e-2d1a-4c69-99b1-9708eb0d0356.png)WireFrame Pro - File formats'
  prefs: []
  type: TYPE_NORMAL
- en: I prefer the HTML format, for flexibility; however, your workflow and needs
    will differ.
  prefs: []
  type: TYPE_NORMAL
- en: If you selected HTML, you will get to download a ZIP bundle of all the assets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the bundle and navigate to it using your browser; you should get an interactive
    version of your wireframe, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/55daea75-657d-411f-b4bc-a14cad741628.png)WireFrame Pro - Interactive
    WireframeThe interactive elements are highlighted in yellow in the following screenshot.
    You can enable or disable this behavior with the `Reveal Links` option on the
    bottom-left corner of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: You can even containerize the prototype HTML project using `minimal-nginx-server`
    or `minimal-node-server` and host it on Zeit Now, using the exact same techniques
    discussed in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml), *Prepare
    Angular App for Production Release*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add all assets to a comment on the GitHub issue, including the ZIP bundle,
    and we are ready to move on to the next task. Let''s move Add city search card
    ... to In Progress, as shown in our Kanban board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b3214869-cf27-471d-bee2-3f0b18d82e85.png)Waffle.io Kanban Board'
  prefs: []
  type: TYPE_NORMAL
- en: Searching with user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll implement the search bar on the home screen of the application. The
    user story states display forecast information for current location, which may
    be taken to imply an inherit GeoLocation functionality. However, as you may note,
    GeoLocation is listed as a separate task. The challenge is that with native platform
    features such as GeoLocation, you are never guaranteed to receive the actual location
    information. This may be due to signal loss issues on mobile devices or the user
    may simply refuse to give permission to share their location information.
  prefs: []
  type: TYPE_NORMAL
- en: First and foremost, we must deliver a good baseline UX and implement value-add
    functionality such as GeoLocation only afterwards. We will be implementing a search-as-you-type
    functionality, while providing feedback to the user, if the service is unable
    to retrieve the expected data.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, it may be intuitive to implement a type-ahead search mechanism; however,
    `OpenWeatherMap` APIs don't provide such an endpoint. Instead, they provide bulk
    data downloads, which are costly and are in the multiples of megabytes range.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to implement our own application server to expose such an endpoint
    so that our app can effectively query, while using minimal amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: The free endpoints for OpenWeatherMap does pose an interesting challenge, where
    a two-digit country code may accompany either a city name or zip code for the
    most accurate results. This is a good opportunity to implement a feedback mechanism
    to the user if more than one result is returned for a given query.
  prefs: []
  type: TYPE_NORMAL
- en: We want every iteration of the app to be a potentially releasable increment
    and avoid doing too much at any given one time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add Angular Form Control
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Angular Material Input as documented at [https://material.angular.io/components/input](https://material.angular.io/components/input)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the search bar as its own component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend the existing endpoint to accept zip code and make country code optional
    in `weather.service`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Throttle requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Angular Reactive Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may wonder why we're adding Angular Forms, since we are adding just a single
    input field and not a form with multiple inputs. As a general rule of thumb, any
    time you add any input field, it should be wrapped in a `<form>` tag . The `Forms`
    module contains the `FormControl` that enables you to write the backing code behind
    the input field to respond to user inputs, and provide the appropriate data or
    the validation or message in response.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of Forms in Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template Driven:** These forms are similar to what you may be familiar from
    AngularJS, where the form logic is mostly inside the HTML template. I''m personally
    not a fan of this approach, because it is harder to test these behaviors, and
    fat HTML templates become difficult to maintain quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reactive:** The behavior of Reactive forms is driven by TypeScript code written
    in the controller. This means that your validation logic can be unit tested and,
    better yet, reused across your application. Read more about Reactive forms at [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by importing the `ReactiveFormsModule` into our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Reactive forms is the core technology that will enable the Angular Material
    team to write richer tools, like one that can autogenerate an input form based
    off of a TypeScript interface in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and verifying components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be creating a `citySearch` component using Material form and input
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `MatFormFieldModule` and `MatInputModule` to `material.module` so that
    it becomes available for use in the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We're adding `MatFormFieldModule`, because each input field should be wrapped
    in a `<mat-form-field>` tag to get the most out of Angular Material functionality.
    At a high-level, `<form>` encapsulates numerous default behaviors for keyboard,
    screen-reader, and browser extension users; `<mat-form-field>` enables easy two-way
    data binding, a technique that should be used in moderation and also allows for
    graceful label, validation, and error message display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the new `citySearch` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since we added the `material.module.ts` file, `ng` can't guess what feature
    module citySearch should be added to, resulting in an error such as More than
    one module matches. Therefore, we need to provide the module that we want `citySearch`
    to be added to, with the `--module` option. Use the `--skip-import` option to
    skip importing the component into any module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a basic template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Import and instantiate an instance of `FormControl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Reactive forms have three levels of controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FormControl` is the most basic element that has a one-to-one relationship
    with an input field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormArray` represents repetitive input fields that represent a collection
    of objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormGroup` is used to register individual `FormControl` or `FormArray` objects
    as you add more input fields to a form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the `FormBuilder` object is used to more easily orchestrate and maintain
    the actions of a `FormGroup`, which will be covered in [Chapter 10](99f040e3-89f0-4ac8-a849-4cef38e7a992.xhtml),
    *Angular App Design and Recipes*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `app-city-search` to `app.component` in between the caption on the out
    row that contains `app-current-weather`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the integration of components by checking out the app in the browser,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f608032f-7d6a-4379-9c1a-0ae47d4c7a54.png)LocalWeather App with Search
    Field'
  prefs: []
  type: TYPE_NORMAL
- en: If you've no errors, now we can start adding the `FormControl` elements and
    wire them to a search endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Adding search to weather service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been passing parameters to get the weather for a city using
    its name and country code. By allowing users to enter zip codes, we must make
    our service more flexible to accept both types of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenWeatherMap''s API accepts URI parameters, so we can refactor the existing `getCurrentWeather`
    function using a TypeScript union type and using a type guard, we can supply different
    parameters, while preserving type checking:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refactor the `getCurrentWeather` function in `weather.service` to handle both
    zip and city inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We renamed the city parameter to `search`, since it can either be a city name
    or a zip code. We then allowed its type to be either a `string` or a `number`,
    and depending on what the type is at runtime, we will either use `q` or `zip`.
    We also made `country` optional and only append it to the query if it exists.
  prefs: []
  type: TYPE_NORMAL
- en: '`getCurrentWeather` now has business logic embedded into it and thus is a good
    target for unit testing. Following the Single Responsibility Principle, from SOLID
    principles, we will refactor the HTTP call to its own function, called `getCurrentWeatherHelper`.'
  prefs: []
  type: TYPE_NORMAL
- en: Refactor the HTTP call into `getCurrentWeatherHelper`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next sample, note the use of a back-tick character [PRE7]
  prefs: []
  type: TYPE_NORMAL
- en: src/app/weather/weather.service.ts
  prefs: []
  type: TYPE_NORMAL
- en: 'private getCurrentWeatherHelper(uriParams: string): Observable<ICurrentWeather>
    {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.httpClient
  prefs: []
  type: TYPE_NORMAL
- en: .get<ICurrentWeatherData>(
  prefs: []
  type: TYPE_NORMAL
- en: '`${environment.baseUrl}api.openweathermap.org/data/2.5/weather?` +'
  prefs: []
  type: TYPE_NORMAL
- en: '`${uriParams}&appid=${environment.appId}`'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(map(data => this.transformToICurrentWeather(data)))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: src/app/weather/weather.service.ts
  prefs: []
  type: TYPE_NORMAL
- en: 'getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather>
    {'
  prefs: []
  type: TYPE_NORMAL
- en: const uriParams = `lat=${coords.latitude}&lon=${coords.longitude}`
  prefs: []
  type: TYPE_NORMAL
- en: return this.getCurrentWeatherHelper(uriParams)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: export class CitySearchComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: search = new FormControl()
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private weatherService: WeatherService) {}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.search.valueChanges
  prefs: []
  type: TYPE_NORMAL
- en: .subscribe(...)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: this.search.valueChanges
  prefs: []
  type: TYPE_NORMAL
- en: '.subscribe((searchValue: string) => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (searchValue) {
  prefs: []
  type: TYPE_NORMAL
- en: const userInput = searchValue.split(',').map(s => s.trim())
  prefs: []
  type: TYPE_NORMAL
- en: this.weatherService.getCurrentWeather(
  prefs: []
  type: TYPE_NORMAL
- en: userInput[0],
  prefs: []
  type: TYPE_NORMAL
- en: 'userInput.length > 1 ? userInput[1] : undefined'
  prefs: []
  type: TYPE_NORMAL
- en: ).subscribe(data => (console.log(data)))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.html
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <mat-form-field>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <mat-hint>Specify country code like 'Paris, US'</mat-hint>
  prefs: []
  type: TYPE_NORMAL
- en: </mat-form-field>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { debounceTime } from 'rxjs/operators'
  prefs: []
  type: TYPE_NORMAL
- en: this.search.valueChanges
  prefs: []
  type: TYPE_NORMAL
- en: .pipe(debounceTime(1000))
  prefs: []
  type: TYPE_NORMAL
- en: .subscribe(...)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: example
  prefs: []
  type: TYPE_NORMAL
- en: 'new FormControl(''Bethesda'', { updateOn: ''submit'' })'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { FormControl, Validators } from '@angular/forms'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: search = new FormControl('', [Validators.minLength(2)])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.html
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '<form style="margin-bottom: 32px">'
  prefs: []
  type: TYPE_NORMAL
- en: <mat-form-field>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <mat-error *ngIf="search.invalid">
  prefs: []
  type: TYPE_NORMAL
- en: Type more than one character to search
  prefs: []
  type: TYPE_NORMAL
- en: </mat-error>
  prefs: []
  type: TYPE_NORMAL
- en: </mat-form-field>
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: example
  prefs: []
  type: TYPE_NORMAL
- en: <mat-error *ngIf="search.invalid">{{getErrorMessage()}}</mat-error>
  prefs: []
  type: TYPE_NORMAL
- en: getErrorMessage() {
  prefs: []
  type: TYPE_NORMAL
- en: 'return this.search.hasError(''minLength'') ? ''Type more than one character
    to search'' : '''';'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: 'this.search.valueChanges.pipe(debounceTime(1000)).subscribe((searchValue: string)
    => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (!this.search.invalid) {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search-tpldriven/city-search-tpldriven.component.html
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <input matInput placeholder="Enter city or zip" aria-label="City or Zip"
  prefs: []
  type: TYPE_NORMAL
- en: '[(ngModel)]="model.search" (ngModelChange)="doSearch($event)"'
  prefs: []
  type: TYPE_NORMAL
- en: 'minlength="2" name="search" #search="ngModel">'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <mat-error *ngIf="search.invalid">
  prefs: []
  type: TYPE_NORMAL
- en: Type more than one character to search
  prefs: []
  type: TYPE_NORMAL
- en: </mat-error>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search-tpldriven/city-search-tpldriven.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { NgModel, Validators} from '@angular/forms'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: export class CitySearchTpldrivenComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: model = {
  prefs: []
  type: TYPE_NORMAL
- en: 'search: '''','
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: doSearch(searchValue) {
  prefs: []
  type: TYPE_NORMAL
- en: const userInput = searchValue.split(',').map(s => s.trim())
  prefs: []
  type: TYPE_NORMAL
- en: this.weatherService
  prefs: []
  type: TYPE_NORMAL
- en: '.getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)'
  prefs: []
  type: TYPE_NORMAL
- en: .subscribe(data => console.log(data))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: src/app/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { Component, Output, EventEmitter } from '@angular/core'
  prefs: []
  type: TYPE_NORMAL
- en: export class CitySearchComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '@Output() searchEvent = new EventEmitter<string>()'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'this.search.valueChanges.debounceTime(1000).subscribe((searchValue: string)
    => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (!this.search.invalid) {
  prefs: []
  type: TYPE_NORMAL
- en: this.searchEvent.emit(this.searchValue)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: src/app/app.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <app-city-search (searchEvent)="doSearch($event)"></app-city-search>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: export class AppComponent {
  prefs: []
  type: TYPE_NORMAL
- en: 'currentWeather: ICurrenWeather'
  prefs: []
  type: TYPE_NORMAL
- en: constructor() { }
  prefs: []
  type: TYPE_NORMAL
- en: doSearch(searchValue) {
  prefs: []
  type: TYPE_NORMAL
- en: const userInput = searchValue.split(',').map(s => s.trim())
  prefs: []
  type: TYPE_NORMAL
- en: this.weatherService
  prefs: []
  type: TYPE_NORMAL
- en: '.getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)'
  prefs: []
  type: TYPE_NORMAL
- en: .subscribe(data => this.currentWeather = data)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: src/app/current-weather/current-weather.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { Component, Input } from '@angular/core'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: export class CurrentWeatherComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: '@Input() current: ICurrentWeather'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: src/app/app.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: <app-current-weather [current]="currentWeather"></app-current-weather>
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: example
  prefs: []
  type: TYPE_NORMAL
- en: <app-mini-forecast *ngFor="let dailyForecast of forecastArray
  prefs: []
  type: TYPE_NORMAL
- en: '[forecast]="dailyForecast">'
  prefs: []
  type: TYPE_NORMAL
- en: </app-mini-forecast>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: src/app/weather/weather.service.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { Subject } from 'rxjs'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: export class WeatherService implements IWeatherService {
  prefs: []
  type: TYPE_NORMAL
- en: 'currentWeather: Subject<ICurrentWeather>'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: example
  prefs: []
  type: TYPE_NORMAL
- en: currentWeather.subscribe(data => (this.current = data))
  prefs: []
  type: TYPE_NORMAL
- en: currentWeather.next(newData)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: app/src/weather/weather.service.ts
  prefs: []
  type: TYPE_NORMAL
- en: import { BehaviorSubject } from 'rxjs'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: export class WeatherService implements IWeatherService {
  prefs: []
  type: TYPE_NORMAL
- en: currentWeather = new BehaviorSubject<ICurrentWeather>({
  prefs: []
  type: TYPE_NORMAL
- en: 'city: ''--'','
  prefs: []
  type: TYPE_NORMAL
- en: 'country: ''--'','
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date.now(),'
  prefs: []
  type: TYPE_NORMAL
- en: 'image: '''','
  prefs: []
  type: TYPE_NORMAL
- en: 'temperature: 0,'
  prefs: []
  type: TYPE_NORMAL
- en: 'description: '''','
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: app/src/current-weather/current-weather.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.weatherService.currentWeather.subscribe(data => (this.current = data))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: app/src/city-search/city-search.component.ts
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: this.weatherService
  prefs: []
  type: TYPE_NORMAL
- en: .getCurrentWeather(
  prefs: []
  type: TYPE_NORMAL
- en: userInput[0],
  prefs: []
  type: TYPE_NORMAL
- en: 'userInput.length > 1 ? userInput[1] : undefined'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: .subscribe(data => this.weatherService.currentWeather.next(data))
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test your app in the browser; it should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/0f9bdb7b-4799-4a07-b01d-0a8d466e63b7.png)Weather Information for
    Bursa, Turkey'
  prefs: []
  type: TYPE_NORMAL
- en: When you type in a new city, the component should update for the current weather
    information for that city.
  prefs: []
  type: TYPE_NORMAL
- en: There's still room for improvement; the default experience looks broken when
    the app first loads. There are at least two different ways to handle this. The
    first is at the `app` component level to hide the entire component if there's
    no data to display. For this to work, we will have to inject `weatherService`
    to the `app` component, ultimately leading to a less flexible solution. Another
    way is to be able to better handle missing data within the `current-weather` component.
  prefs: []
  type: TYPE_NORMAL
- en: To make the app better, you can implement geolocation to get weather for the
    user's current location at launch of the app. You can also leverage `window.localStorage`
    to store the city that was last displayed or the last location that was retrieved
    from `window.geolocation` on initial launch.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to execute `npm test` and `npm run e2e` before moving on. It is
    left as an exercise for the reader to fix the unit and end-to-end tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter completes our work on the Local Weather App. We can move the City
    Search capability task to the `done` column, as shown in our Kanban board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a35b3b83-60f3-429f-a5e0-d2b5401aa8ba.png)Waffle.io Kanban Board
    Status'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create an interactive prototype without
    writing a single line of code. You then created a search-as-you-type functionality
    using `MatInput`, validators, reactive forms, and data stream driven handlers.
    You also learned about different strategies to enable inter-component interactions
    and data sharing. Finally, you became aware of two-way binding and template-driven
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: LocalCast Weather is a straightforward application that we used to cover the
    basic concepts of Angular. As you saw, Angular is great for building such small
    and dynamic applications, while delivering a minimal amount of framework code
    to the end user. You should consider leveraging Angular for even quick and dirty
    projects, which is also a great practice when building larger applications. In
    the next chapter, you will be creating a far more complicated **line-of-business**
    (**LOB**) application, using a router-first approach to designing and architecting
    scalable Angular applications with first-class authentication and authorization,
    user experience, and numerous recipes that cover a vast majority of requirements
    that you may find in LOB applications.
  prefs: []
  type: TYPE_NORMAL
