- en: Developing a Serverless Function with Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will finally learn how to write our very first Go-based
    Lambda function from scratch, followed by how to configure, deploy, and test a
    Lambda function manually from the AWS Lambda Console. Along the way, you will
    be given a set of tips on how to grant access to your function so that it can
    interact with other AWS services in a secure way.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Lambda function in Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to follow along with this chapter, you will need to set up and configure
    your Go and AWS development environment as described in the previous chapter.
    Familiarity with Go is preferred but not required. The code bundle for this chapter
    is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Lambda function in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps in this section to create your first Lambda function in Go
    from scratch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To write a Lambda function, we need to install some dependencies. Hence, open
    a new terminal session, and install the Go Lambda package using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open your favorite Go IDE or editor; in my case, I will work with VS
    Code. Create a new project directory in your **GOPATH** and then paste the following
    content into a `main.go` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code uses the `lambda.Start()` method to register an entry-point
    handler that contains the code that will be executed when a Lambda function is
    invoked. Each language supported by Lambda has its own requirements for how a
    function handler can be defined. For Golang, the handler signature must meet the
    following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: It must be a function
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: It can have between 0 and 2 arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must return an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, sign in to the AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home))
    and choose Lambda from the Compute section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/412343fb-3776-4b96-b9f2-50f5b67e7a32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the AWS Lambda Console, click on the Create function button and follow the
    wizard to create your first Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5cdb37f-7e6a-4c25-b95e-2b9ae9d89638.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Author from Scratch option, give your function a name, and then
    choose Go 1.x as the Runtime environment from the list of supported languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab9ba4d1-724a-44e2-90dc-a3f8b7e59aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: You must assign an IAM role (called an execution role) to your Lambda function.
    The IAM policies attached to that role define what AWS services your function
    code is authorized to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Execution role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned how to write our first Go Lambda function, let''s
    create a new IAM role from Identity and Access Management ([https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home))
    to grant the function access to AWS CloudWatch Logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fed0ecb8-e57c-4f10-bd5e-2c97d6399375.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the permissions page, you can either choose an existing AWS managed policy
    called CloudWatchFullAccess or (as shown in Step 3) create a least-privilege IAM
    role (the second option is recommended by AWS; a chapter dedicated to this will
    discuss security best practices for Lambda functions in depth):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54765997-c910-430a-9ad0-1951e03e8c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go ahead and click on the Create policy button, and create a policy by selecting
    the appropriate service (`CloudWatch`) from the visual editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6eb0c424-cde0-40b7-8aa8-7e519a3478d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For readers familiar with the JSON format, a JSON policy document can be used
    instead in the JSON tab. The document must have one statement that grants permissions
    to create log groups and log streams, and to upload log events to AWS CloudWatch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Review policy page, type a Name and a Description for the policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2322533-cdd1-4dc5-b282-bc2dc39c21a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the Create role page and click on Refresh; you should see the policy
    that we created previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e08e45ad-56f4-466e-a29b-ee206af94ef5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Review page, type a name for the role and choose Create role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8eeaac41-4450-4192-ba70-bed47810e001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our role is defined, head back to the Lambda form creation and select
    the IAM role (you might need to refresh the page for the changes to take effect)
    from the Existing role drop-down list. Then, click the Create function button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b51eed3-fd9b-4482-901c-9ff3c6f15b75.png)'
  prefs: []
  type: TYPE_IMG
- en: Optionally, you can deploy a Lambda function using the AWS CLI. A more comprehensive
    discussion of this and its step-by-step process is reserved for [Chapter 6](3b3b7465-2646-4532-8303-9e0b8d06bc64.xhtml),
    *Deploying Your Serverless Application*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Lambda console will display a success message in green, indicating that
    your function has been successfully created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98a02fa0-b70d-4d9b-96ed-8aec263a7c0e.png)'
  prefs: []
  type: TYPE_IMG
- en: After we write, package, and create the Lambda function, we have various configuration
    options to set that define how the code should be executed within Lambda. As shown
    in the preceding screenshot, you can trigger the Lambda function by different
    AWS services (called triggers).
  prefs: []
  type: TYPE_NORMAL
- en: Leave the rest of the advanced settings unchanged (VPC, resource usage, versions,
    aliases, and concurrency) as they will be discussed in-depth in further chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Go is a recently added language, the developers behind it haven''t
    added the capability for an inline editor yet, so you must provide an executable
    binary in a ZIP file format or reference an S3 bucket and object key where you
    have uploaded the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf6af336-36cb-4fe1-a38b-e4226554ddb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Deployment package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to build a deployment package for the function
    and how to deploy it to the AWS Lambda console.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a ZIP file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in [Chapter 1](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml), *Go
    Serverless*, Go is a compiled language. Therefore, you must generate an executable
    binary using the following Shell script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Lambda runtime environment is based on an **Amazon Linux AMI**; therefore,
    the handler should be compiled for Linux (note the use of the `GOOS` flag).
  prefs: []
  type: TYPE_NORMAL
- en: For Windows users, it's recommended you to use the `build-lambda-zip` tool to
    create a working ZIP file for Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the Shell script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a2cdf06-74fa-4cc7-9a83-8a4f00696fee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now our ZIP file has been generated; you can now go back to the Lambda console
    and upload the ZIP file, making sure to update the Handler to main and save the
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f62c09cb-8c95-48a7-a6d7-246b4dc837e7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Handler configuration property must match the name of the executable file.
    If you build (`go build -o NAME`) the binary with a different name, you must update
    the Handler property accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading from Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way to upload the deployment package to Lambda is by using an AWS S3
    bucket to store the ZIP file. Under Storage, choose S3 to open the Amazon S3 console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f930baf-b8a9-4528-b9a1-4a6501f1a198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before you can upload the ZIP to Amazon S3, you must create a new bucket in
    the same AWS region where you created the Lambda function, as described in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0de5d7c0-9d7f-4043-8294-ebe080a69df8.png)'
  prefs: []
  type: TYPE_IMG
- en: S3 buckets have a global namespace. Hence, it must be globally unique across
    all existing bucket names in Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you''ve created a bucket, drag and drop the ZIP file that you generated
    in the previous section into the destination bucket or use the Upload button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2227f1b1-ef0d-4640-bb0c-c4723367f6d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS CLI might be used to upload a deployment package to the S3 bucket as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the `s3:PutObject` permission is granted to the IAM user to be able
    to upload an object using the AWS command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once uploaded, select the ZIP file and copy the Link value to the clipboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab64bc3c-3b3e-4ef2-b8bd-a2aa51543acf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the Lambda Dashboard and select Upload a file from Amazon S3 from
    the Code entry type drop-down list, then paste the path in the deployment package
    in S3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/489b333e-e286-4a15-af88-713128355c7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once saved, you're ready to test the Lambda function in the AWS Lambda Console.
  prefs: []
  type: TYPE_NORMAL
- en: Event testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following procedure will demonstrate how to invoke the Lambda function
    from the Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the function has been deployed, let's invoke it manually using the
    sample event data by clicking on the Test button in the top right of the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Selecting Configure test event opens a new window that has a drop-down. The
    items in the drop-down are sample JSON event templates which are mocks for source
    events or triggers (recall [Chapter 1](746d14b6-7349-4f9e-b76f-f56706e1d0d5.xhtml),
    *Go Serverless*) that can be consumed by the Lambda in order to test its functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4d4c786-f965-4dba-8a24-6ffa7e04a358.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Retain the default Hello World option. Type an event name and provide an empty
    JSON object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0cc4403-eea5-4c3d-9343-9ffac4c768db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose Create. After it''s been saved, you should see EmptyInput in the Test list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/117b2716-dc07-4452-a260-186a9edd852d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Test button again. AWS Lambda will execute your function and display
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4eccea08-95bf-4f06-ac86-adf5aa64dd27.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition to the results returned by the function, we will be able to see Welcome
    to Serverless world, which is a global overview about the resource use and execution
    duration of the Lambda function, plus the logs written to CloudWatch by the Lambda
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced monitoring with CloudWatch metrics and logging with CloudWatch logs
    and CloudTrail will be discussed in [Chapter 11](aab75412-293a-442c-a64a-260ac1219dd5.xhtml), *Monitoring
    and Troubleshooting*.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have just set up and deployed your first Lambda function. The
    real power of Lambda comes in when you use triggers or source events with your
    Lambda function so that it executes based on events that happen. We will take
    a look at that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to a write a Lambda function in Go from scratch.
    Then, we covered how to create an execution role for Lambda to generate event
    logs to AWS CloudWatch. We further learned how to test and invoke this function
    manually from the AWS Lambda Console.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I will walk you through how to use triggers to invoke Lambda
    functions automatically and how to build an unified RESTful API on top using the
    AWS API Gateway to execute Lambda functions in response to HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What's the command-line command to create an IAM role for an AWS Lambda function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the command-line command to create a new S3 bucket in the Virginia region
    (*us-east-1*) and upload a Lambda deployment package to it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the Lambda package size limits?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 10 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 250 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda Console supports editing Go source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the underlying AWS Lambda execution environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Linux Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are events represented in AWS Lambda?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
