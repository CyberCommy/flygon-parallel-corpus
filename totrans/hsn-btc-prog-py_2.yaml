- en: Programming Bitcoin and Blockchain with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on using Raspberry Pi Bitcoin tools to program bitcoin
    with Python and interacting with Blockchain APIs programmatically. The reader
    will also get a general idea of the process of mining bitcoin and its initial
    stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Programming bitcoin using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multisignature bitcoin address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain API programming with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Blockchain.info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning to mine bitcoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to mine bitcoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing difficulties in mining bitcoins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming bitcoin with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to introduce the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi Bitcoin tools library and how to start using it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to generate private keys and public keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a simple bitcoin address from the private keys and public keys
    you generated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get started with bitcoin using Python, you must install Python 3.x and the
    bitcoin Python library called Pi Bitcoin tools in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Pi Bitcoin tools library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the Pi Bitcoin tools library, open the command-line program and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The best thing about this library is that it does not need to have a bitcoin
    node on your computer in order for you to start using it.
  prefs: []
  type: TYPE_NORMAL
- en: This library connects to the bitcoin network and pulls data from places such
    as Blockchain.info.
  prefs: []
  type: TYPE_NORMAL
- en: We shall start by writing the equivalent of a  `Hello World` program for bitcoin
    in Python. In the `hello_bitcoin.py` script, the demonstration of a new bitcoin
    address is created using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to run the program:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the bitcoin library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a private key using the random key function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the private key on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to generate private keys and public keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the private key, a public key is generated. Perform this step by passing
    the private key that was generated to the `privtopub` function, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with the public key, generate a bitcoin address. Do this by passing the
    public key that is generated to the `pubtoaddr` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the private key, public key and bitcoin address
    that is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/95a83334-f039-40a7-b63c-7fe85b072209.png)'
  prefs: []
  type: TYPE_IMG
- en: Bitcoin address
  prefs: []
  type: TYPE_NORMAL
- en: A bitcoin address is a single-use token. Just as people use email addresses
    to send and receive emails, you can use this bitcoin address to send and receive
    bitcoins. Unlike email addresses, however, people have many different bitcoin
    addresses, and a unique address should be used for each transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multisignature bitcoin address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A multisignature address is an address that is associated with more than one
    private key; therefore, we need to create three private keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to create a multisignature bitcoin address:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create three private keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create three public keys from those private keys using the `privtopub` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After generating the public keys, create the `multisig` by passing the three
    public keys to the `mk_ multi-sig_script` function. The resulting `multisig` is
    passed to the `addr` script function to create the multisignature bitcoin address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Print the multisignature address and execute the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output for the `multisig` bitcoin address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/655bd911-28dd-4e14-8b3d-6bc99d5897e9.png)Multisignature addresses
    are useful in organizations where no single individual is trusted with authorising
    the spending of bitcoins.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also look at the preexisting bitcoin addresses' transactional history.
    We will first get a valid address from Blockchain.info.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the copied address of a bitcoin block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b05f0400-25ff-44fb-b015-2a45d1caa95e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pass the copied address to the `history` function, as shown in the following
    code, along with the output to get the history of the bitcoin address, including
    the transactional information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/643ab693-37fd-405e-ac80-f208c2264469.png)'
  prefs: []
  type: TYPE_IMG
- en: Blockchain API programming with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blockchain.info is one of the most popular blockchain and bitcoin network explorers
    and wallet providers. From the web, you can view the block level and see all the
    transactions that have happened. For example, by going to this particular block—that
    is, Block #536081—you can see all the transactions, as well as some other information,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4b65c000-f000-444c-a656-9d5ee8203042.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the statistical data (DATA | Stats). This is
    great, and useful as well; however, for a developer building applications or performing
    analysis based on this data, it is important to get this data programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7f93a608-5230-47aa-96f3-f3316d4badbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the market data (DATA | Markets):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b9e447e7-76b5-4edf-b319-8647abd739d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the Blockchain.info Python library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the steps to install the `blockchain` Python library:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command-line program on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `pip install blockchain `command to install the `blockchain` library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the installation of bitcoin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5142839b-84bb-48c4-b41c-c190bed038fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting bitcoin exchange rates from Blockchain.info
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps shows the method for bitcoin exchange rates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `exchangerates` classes from the `blockchain` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Exchange rates define a `get_ticker` method, which returns the exchange rates
    data in a dictionary object. Call this method and save the resulting object. The
    `ticker` dictionary object that we have has currency symbols as keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'By running over these keys, data about the various rates can be pulled. For
    example, the latest bitcoin rates can be obtained in each currency by getting
    the `p15min` minimum value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the list of currencies and the equivalent bitcoin
    rate for those currencies at that moment or from the last 15 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4d7fc642-d069-4c37-aadb-d8af215813d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A particular currency can also be converted to bitcoin. For example, you can
    pass the `to_btc` method and pass in the currency and the amount that we want
    to convert to `btc`, and get the result as bitcoin. The following code shows how
    to do this for a value of 100 euros:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for 100 euros in bitcoin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1158be8b-bc2a-4e51-a5ae-bf4cc372a452.png)'
  prefs: []
  type: TYPE_IMG
- en: Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next class from the bitcoin blockchain library is called `statistics`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of methods that can be called to get a wide variety of blockchain
    stats data, for example, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/88786f17-cb0e-41b2-987b-263f52032aec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can call the different methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the relevant class, call the `get` method on `statistics`, and save
    that object. For example, to get the bitcoin trade volume, we should get the `trade_volume_btc` property from
    the `stats` object that was created, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the bitcoin trade volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0afc2cff-a58c-4db9-b615-1306f961c7a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the total bitcoins mined, call the `btc_mined` property on `stats` object,
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the number of bitcoins mined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a4adbf74-d9cb-4e6e-9e37-99b5059be2b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the bitcoin market price, use the `stats` class, call the market price
    and append that with the particular currency:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The current bitcoin price is shown in US dollars as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/6880238e-87d8-4731-a923-f5d5602e21e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Block explorer methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For block explorer methods, start by importing the relevant classes from the
    `blockchain` library. To get a particular block, call the `get_block` method as
    shown in the following code. It expects a block to be passed in as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'By taking an example block from the web, from Blockchain.info, copy the hash
    for this block (Block #536081) and pass it to the `get_block` method, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/104d6267-98ec-448b-996d-46eec72c1d77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now lets get some information about this block. For example, the block fee,
    block size, and block transactions can be obtained by using `fee`, `size`, and
    `transactions` properties respectively on the `block` object created, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the block fee, block size, and block transactions
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/26124509-7ea5-4f74-9286-caf2f0d01f20.png)'
  prefs: []
  type: TYPE_IMG
- en: There are also many available features in the Blockchain.info library; there
    are a few that are more related to, for example, wallets, creating wallets, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: In order to explore this library further, visit the link [https://github.com/blockchain/api-v1-client-python](https://github.com/blockchain/api-v1-client-python).
  prefs: []
  type: TYPE_NORMAL
- en: Learning to mine bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some features of bitcoin mining are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin mining is the process of adding bitcoin transactional data to bitcoin's
    global public ledger of past transactions. Each bitcoin miner gets involved with
    all the other miners in order to gather the outstanding transactions into a block
    by dealing with specialized analytical and arithmetical problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to gain accuracy and solve the problems, bitcoin miners gain all of
    the transactions they process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to transaction fees, miners also receive an additional reward for
    each block they mine. Anyone can participate in bitcoin mining by running a computer
    program. In addition to running on traditional computers, some companies have
    designed specialized bitcoin mining hardware that can process transactions and
    build blocks much more quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One can choose to mine bitcoin in the cloud on [https://www.bitcoin.com/](https://www.bitcoin.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The course of these plans shows you that the difficulty of bitcoin mining is
    increasing, and getting more expensive as time goes by.
  prefs: []
  type: TYPE_NORMAL
- en: Some companies buy specialized hardware to mine bitcoin. One such piece of hardware
    is the 21 bitcoin computer from a company called 21.co. Hence, this hardware comes
    preinstalled with the necessary software.
  prefs: []
  type: TYPE_NORMAL
- en: How to mine bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is also plenty of bitcoin mining software available, which can run on
    any machine. However, it may not be as efficient anymore. For example, let''s
    go to [http://www.bitcoinx.com/bitcoin-mining-software/](http://www.bitcoinx.com/bitcoin-mining-software/) for
    a long list of such software. They can run on all kinds of operating systems:
    Windows, Linux, and macOS. There are UI-based bitcoin miners, as well as command-line-based
    bitcoin miners—for example, Pyminer, which is an implementation in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Increasing difficulty in mining bitcoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because of the increasing competition and difficulties, there are many factors
    that must be borne in mind when mining bitcoin, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoins are getting more expensive day by day because of competition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many supercomputers across the globe are in competition to mine the next block
    and bitcoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the number of bitcoin miners has increased, it has become more problematic
    and overpriced to start mining new bitcoin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the following screenshot shows a chart of how the difficulty of
    bitcoin mining has been increasing; for more information refer to [https://bitcoinwisdom.com/bitcoin/difficulty](https://bitcoinwisdom.com/bitcoin/difficulty). This
    particular chart shows values from the last two months. This recent trend reflects
    the increasing difficulty that began when bitcoin was first created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5587c8c8-bb4a-46f1-a115-6d7841464ab5.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to get started programming bitcoin with Python.
    We explored Blockchain.info API programming with Python to get statistics and
    other bitcoin market data.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to get started with mining bitcoin. We looked at the various
    ways to mine bitcoin, and we learned about why bitcoin mining may not be for everybody
    because of its increasing competition and difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to start running bitcoin programmatically
    by way of accepting bitcoin on your website, running API-based microservices,
    or by building a bitcoin trading bot.
  prefs: []
  type: TYPE_NORMAL
