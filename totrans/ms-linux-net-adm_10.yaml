- en: Chapter 10. Troubleshooting Network Issues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。故障排除网络问题
- en: 'No network is perfect. Regardless of how well we plan and implement our infrastructure,
    problems can and will happen. The most important skill you will need in order
    to be successful as a network administrator is your ability to troubleshoot issues.
    When problems occur, your ability to think rationally and narrow down the issue
    by the process of elimination will carry you through. While it can certainly be
    stressful when things go haywire, network administrators enjoy the job security.
    In this chapter, we''ll work through troubleshooting some common issues that may
    come up in Linux networks. In the final chapter of our journey, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有网络是完美的。无论我们计划和实施基础设施的多么完美，问题都可能发生。作为网络管理员，您需要的最重要的技能是解决问题的能力。当问题发生时，您的理性思考和通过排除法缩小问题范围的能力将帮助您度过难关。尽管当事情变得一团糟时肯定会很有压力，但网络管理员们享受着工作的安全性。在本章中，我们将解决Linux网络中可能出现的一些常见问题。在我们旅程的最后一章中，我们将涵盖：
- en: Tracing routing issues
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪路由问题
- en: Troubleshooting DHCP issues
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除DHCP问题
- en: Troubleshooting DNS issues
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除DNS问题
- en: Displaying connection statistics with netstat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用netstat显示连接统计信息
- en: Scanning your network with nmap and Zenmap
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用nmap和Zenmap扫描您的网络
- en: Installing missing firmware on Debian systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Debian系统上安装缺失的固件
- en: Troubleshooting issues with Network Manager
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用网络管理器解决问题
- en: Tracing routing issues
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪路由问题
- en: The entire purpose of a network is to get data from point A to point B. If for
    some reason we aren't able to get data where we need it, it can sometimes be a
    pain to pinpoint exactly where the issue manifests itself. But through the process
    of elimination, pinpointing where routing issues manifest themselves shouldn't
    be too difficult.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 网络的整个目的是将数据从A点传输到B点。如果由于某种原因我们无法将数据传输到需要的地方，有时很难准确定位问题发生的地方。但是通过排除法，确定路由问题发生的地方不应该太困难。
- en: Whenever I experience issues with a node being unable to communicate to a specific
    server or network, I like to work my way from their workstation back to the switch
    stack until I find the issue. To start, I check the obvious things, such as what
    the IP address is (or if the machine even has one) and then I also check the routing
    table. If the problem is intermittent, you would likely want to test the cable.
    For some reason, I've come across quite a few instances where a problem resulted
    from a bad cable. I don't know why, but it seems that other administrators I know,
    don't have this luck. But it never hurts to run a cable tester on the network
    cable to check, just in case.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我遇到节点无法与特定服务器或网络通信的问题时，我喜欢从他们的工作站开始逐步排查到交换机堆栈，直到找到问题所在。首先，我检查一些显而易见的事情，比如IP地址是什么（或者机器是否有IP地址），然后我还会检查路由表。如果问题是间歇性的，您可能会想测试一下网线。出于某种原因，我遇到过很多问题都是由于坏网线导致的。我不知道为什么，但似乎其他我认识的管理员没有这种运气。但是检查一下网络电缆是否运行正常永远不会有坏处。
- en: Assuming that you've already tried the easy stuff, next you would want to determine
    whether or not you can reach the default gateway. If you know the IP address of
    your local default gateway, simply ping it to see if you can reach it, and note
    the result. Does your attempt time out, or does it get through just fine? If you
    don't know the IP address of your gateway, run `route -n` in your terminal emulator
    to find out. If you can reach your default gateway by IP, try to reach it by hostname
    as well as the IP address of the target node you were trying to connect to in
    the first place. If you're able to reach resources by IP and not their hostname,
    this would most likely be a DNS issue. We'll talk about troubleshooting DNS later
    in this chapter. But for now, determining whether or not you can reach your DNS
    server and/or gateway would be good first steps. If you can't, you may have a
    resource that is down, and a line of angry co-workers waiting for you back at
    your desk.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经尝试了简单的方法，接下来您会想确定您是否可以到达默认网关。如果您知道本地默认网关的IP地址，只需ping它以查看您是否可以到达它，并注意结果。您的尝试是否超时，还是顺利通过？如果您不知道网关的IP地址，请在终端模拟器中运行`route
    -n`来查找。如果您可以通过IP到达默认网关，请尝试通过主机名以及您首先尝试连接的目标节点的IP地址来到达它。如果您能够通过IP而不是主机名到达资源，这很可能是DNS问题。我们将在本章后面讨论故障排除DNS。但现在，确定您是否可以到达DNS服务器和/或网关将是一个很好的第一步。如果您不能，您可能有一个资源已经宕机，并且一群愤怒的同事正在等待您回到您的办公桌。
- en: 'If the problem is intermittent, we can start our troubleshooting by interrogating
    the local machine. The `ip address show` command will give us some details about
    the IP address of the local machine. We can actually shorten this command by abbreviating
    it to `ip addr show`, or if you really don''t like typing, you can simplify it
    down further to just `ip a`. The following shows the output of `ip addr show`
    from an example system:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题是间歇性的，我们可以从询问本地机器开始故障排除。`ip address show`命令将为我们提供有关本地机器IP地址的一些详细信息。我们实际上可以通过缩写为`ip
    addr show`来缩短这个命令，或者如果您真的不喜欢输入，您还可以进一步简化为`ip a`。以下是来自示例系统的`ip addr show`的输出：
- en: '![Tracing routing issues](img/b03919_10_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![跟踪路由问题](img/b03919_10_01.jpg)'
- en: Investigating the IP address on a local machine
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 调查本地机器上的IP地址
- en: At this point in the book, there shouldn't be anything too surprising about
    the output of `ip a`. However, the output from my machine may look unique to what
    you may see in the wild, so it's worth going over. First, you can see that the
    Debian machine I used for testing has five network interfaces on it. The first
    is the local loopback adapter, `lo`; and the second is `eth0`. Since this machine
    is currently using Wi-Fi, it's no surprise that `eth0` doesn't have an IP address.
    The next interface, `wlan0`, has an IP address of `192.168.1.106`. The last two
    interfaces are unique; they exist as bridges for Docker and KVM virtualization
    to be able to perform their own networking. Even though Docker and KVM aren't
    within the scope of this book, I bring up the fact that they do their own networking
    because when one of these services is installed, you may see your Linux desktop
    environment report that you are connected to a network, even when technically
    you aren't. On my machine, if I disconnect `wlan0`, it would still show that I'm
    connected. This is because the GUI version of Network Manager that most graphical
    distributions ship with, does a terrible job of reporting an accurate status in
    regards to your connectivity, and this could confuse the situation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you''ve determined that the machine has an IP address, another step
    you can take is to use the `traceroute` command. Those of you that have used Windows,
    may be familiar with this concept already, as the Windows utility `tracert` works
    pretty much the same way. The `traceroute` utility is not always installed by
    default when you set up a Linux distribution, so you may need to install the `traceroute`
    package. From here, you should be able to use `traceroute` along with the hostname
    or IP of a resource, to see where the process drops out. You can also use `traceroute`
    against the URL of a website, if the issue is that your workstation isn''t able
    to access the public Internet. In the following screenshot, a `traceroute` against
    `google.com` is shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracing routing issues](img/b03919_10_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Running traceroute to troubleshoot accessing the public Internet
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, I ran a `traceroute` to [www.google.com](http://www.google.com).
    From the output, we can tell several things right away. First, we can see that
    the first `hop` our command tries to reach is a device called `m0n0wall.local`
    at an IP address of `192.168.1.1`. If I run `route -n`, I see that this is the
    default gateway of the network I'm currently using. The `m0n0wall` is a firewall
    distribution of FreeBSD, which is in use on this network. I discovered this when
    I ran the command. Next, we can see that we made it through the `m0n0wall` device
    to another private network of `172.21.0.1` and then `198.111.175.120`, but output
    stops when my request reaches `198.108.22.150`. After that, we just see asterisks,
    but we're not going beyond that. In a hypothetical example of my machine not being
    able to access the Internet, I may want to investigate the device at `198.108.22.150`
    and find out why it's not letting my traffic through. However, in my case this
    device is dropping ICMP packets, which is causing the `traceroute` command itself
    to fail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: One of the things you would definitely want to check when troubleshooting routing
    issues is your routing table. We covered routing in [Chapter 8](ch08.html "Chapter 8. Understanding
    Advanced Networking Concepts"), *Understanding Advanced Networking Concepts*,
    and the routing table as well as adding routes was covered. But as a refresher,
    you can use `route -n` to print the routing table onto your shell. If the machine
    you're troubleshooting doesn't have a route to the network it needs to access,
    then the root-cause is easily apparent. You would then need to add a default gateway
    in order to allow the machine to reach that network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracing routing issues](img/b03919_10_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Viewing the local routing table
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting DHCP issues
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If for some reason you have a machine that refuses to obtain an IP address,
    then this section is for you. DHCP issues aren't incredibly common, and thankfully
    aren't too hard to troubleshoot.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因您有一台机器拒绝获取IP地址，那么这一部分就是为您准备的。DHCP问题并不是非常常见，而且幸运的是也不难排除故障。
- en: One of the most common issues I've seen with DHCP servers is the date and time
    of either the server or the client being wrong. In the Linux world, NTP is crucial
    and should always be working. In the case of DHCP, it only waits so long before
    the service times out a request for an IP address. If the clock is off by an hour
    and the incoming request is timestamped an hour ago, that confuses the server
    and the client will not receive an address. Always ensure that NTP is working
    on all your clients and servers. DHCP isn't the only service that would suffer
    with incorrect time on either end. Lot's of strange things can happen in this
    situation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过的DHCP服务器最常见的问题之一是服务器或客户端的日期和时间错误。在Linux世界中，NTP至关重要，应该始终正常工作。在DHCP的情况下，只有在服务超时请求IP地址之前才会等待很长时间。如果时钟差了一个小时，而传入的请求时间戳是一个小时前，那会让服务器困惑，客户端将无法收到地址。请务必确保所有客户端和服务器上的NTP都正常工作。DHCP并不是唯一会因为任一端的时间不正确而受影响的服务。在这种情况下可能会发生很多奇怪的事情。
- en: A reason for failure is the lack of available IP addresses. This may sound obvious,
    but you'd be surprised how often this happens. Even a `/24` network of `254` available
    IP addresses can become saturated quickly these days, as everything from mobile
    devices to refrigerators (yes, refrigerators) want to claim an IP address these
    days. It's not uncommon for the average person to use three IP addresses without
    even noticing. A problem such as this can become increasingly annoying if you
    set your DHCP lease time to something greater than a day. In most cases, a lease
    time of 24 hours is adequate for most networks. Devices that need access will
    renew their lease when the time comes, while temporary devices won't attempt to
    renew the IP they were issued, which will cause it return to the pool.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的原因是可用IP地址的不足。这听起来很明显，但您会惊讶地发现这种情况经常发生。即使是具有`254`个可用IP地址的`/24`网络，如今也可能很快就会饱和，因为从移动设备到冰箱（是的，冰箱）都想要获取IP地址。对于普通人来说，使用三个IP地址甚至都不会注意到是很常见的。如果您将DHCP租约时间设置为一天以上，这样的问题可能会变得越来越烦人。在大多数情况下，24小时的租约时间对大多数网络来说是足够的。需要访问的设备将在到期时更新其租约，而临时设备则不会尝试更新其分配的IP地址，这将导致其返回到池中。
- en: I wish that I had a magic command you could run that would give you a printout
    of just how many IP addresses you have available. Unfortunately, I've never been
    able to find one, aside from possibly constructing a cumbersome Bash or Python
    script. The best thing for you to do while experiencing any issues with DHCP is
    to watch the log file and have the client try to connect again.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我有一个您可以运行的魔术命令，可以给您一个可用IP地址数量的打印输出。不幸的是，我从来没有找到过一个，除了可能构建一个笨重的Bash或Python脚本。在遇到任何DHCP问题时，最好的做法是观察日志文件，并让客户端再次尝试连接。
- en: '![Troubleshooting DHCP issues](img/b03919_10_04.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除DHCP问题](img/b03919_10_04.jpg)'
- en: The output of a working DHCP server
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 工作中的DHCP服务器的输出
- en: In Debian, you can investigate by running `cat /var/log/syslog |grep dhcp` for
    messages relating to your DHCP server. On CentOS, you can use `journalctl -u dhcpd`
    to view these messages. What's better is to follow these logs in real time as
    the client tries to connect, so you can see the output as it happens. To do this,
    use `tail -f /var/log/syslog` in Debian or `journalctl -f -u dhcpd` in CentOS.
    Errors from your DHCP server should be fairly easy to follow, as the server is
    usually specific regarding what it is doing. You'll likely see it offer addresses
    to the client, or complain that there aren't enough IP addresses available. If
    you see the server offer an IP address to the client but the client never seems
    to finish the connection, then definitely check your NTP server on the client.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian中，您可以通过运行`cat /var/log/syslog |grep dhcp`来调查与DHCP服务器相关的消息。在CentOS中，您可以使用`journalctl
    -u dhcpd`来查看这些消息。更好的方法是在客户端尝试连接时实时跟踪这些日志，这样您就可以看到发生的情况。要做到这一点，在Debian中使用`tail
    -f /var/log/syslog`，在CentOS中使用`journalctl -f -u dhcpd`。DHCP服务器的错误应该相当容易跟踪，因为服务器通常会明确说明它在做什么。您可能会看到它向客户端提供地址，或者抱怨没有足够的IP地址可用。如果您看到服务器向客户端提供IP地址，但客户端似乎永远无法完成连接，那么一定要检查客户端上的NTP服务器。
- en: Troubleshooting DNS issues
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除DNS问题
- en: DNS issues are typically rare, except in the case of an invalid configuration.
    In most cases, any troubleshooting you do would be done on your local DNS servers,
    as public DNS servers on the Internet are outside of your control. In the case
    of an external DNS server failing, such as that from your ISP, your only recourse
    might be to use a different DNS provider, such as utilizing Google's public DNS
    addresses of `8.8.8.8` and `8.8.4.4`. But in the case of your local DNS server
    failing, you have more control.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DNS问题通常很少发生，除非配置无效。在大多数情况下，您所做的任何故障排除都将在本地DNS服务器上进行，因为互联网上的公共DNS服务器不在您的控制范围之内。在外部DNS服务器失败的情况下，比如您的ISP的DNS服务器，您唯一的补救措施可能是使用不同的DNS提供商，比如使用谷歌的公共DNS地址`8.8.8.8`和`8.8.4.4`。但是如果您的本地DNS服务器失败，您就有更多的控制权。
- en: As always, you would start troubleshooting DNS issues by checking whether or
    not you can reach the DNS server. First, check `/etc/resolv.conf` to see which
    DNS server your machine is using. Is it the correct server? If not, correct this
    in your network scripts and restart networking. If it is the correct server, can
    you reach it? Try a simple ping, and as long as the server is configured to respond
    to ICMP echo requests, you should see a response. If you can reach the server,
    SSH into it and check its logs. Perhaps the daemon (`bind` in Debian, and `named`
    in CentOS) isn't running.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，您可以通过检查是否可以访问DNS服务器来开始故障排除DNS问题。首先，检查`/etc/resolv.conf`，看看您的机器正在使用哪个DNS服务器。这是正确的服务器吗？如果不是，请在您的网络脚本中更正这一点，并重新启动网络。如果是正确的服务器，您能够访问它吗？尝试简单的ping，只要服务器配置为响应ICMP回显请求，您应该会看到响应。如果您可以访问服务器，请通过SSH登录并检查其日志。也许守护程序（Debian中的`bind`和CentOS中的`named`）没有运行。
- en: Moving beyond the simple things, there is a specific utility we can use to help
    troubleshoot bind-specific issues, and that utility is `nslookup`. Use the `nslookup`
    command along with the name of the resource you're trying to find, such as a hostname
    or the URL of a website.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的事情之外，我们还可以使用一个特定的实用程序来帮助排除特定于bind的问题，这个实用程序就是`nslookup`。使用`nslookup`命令以及您要查找的资源的名称，比如主机名或网站的URL。
- en: '![Troubleshooting DNS issues](img/b03919_10_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![DNS问题的故障排除](img/b03919_10_05.jpg)'
- en: The output of a working DHCP server
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 工作的DHCP服务器的输出
- en: The output of `nslookup` tells us a few useful things we can use to troubleshoot
    further. First, it will give us the IP address of the server that answered our
    request. In my case, `10.10.96.1` answered via port 53\. Then, I can see the result
    of my query for `packtpub.com`, which gave me an external IP address of `83.166.169.231`.
    So far, so good. If your DNS server is reachable, the daemon is running and your
    local workstation is configured to point to it, a very common gotcha is the serial
    number in your domain record. If you've added a resource to your DNS server but
    forgot to increment the serial number, that can cause a lookup to fail even though
    you did add the configuration for that host. This may seem like common knowledge,
    but you'd be surprised how easy it is to forget.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`nslookup`的输出告诉我们一些有用的东西，可以帮助我们进一步进行故障排除。首先，它会给出回答我们请求的服务器的IP地址。在我的情况下，`10.10.96.1`通过端口53回答了我。然后，我可以看到我对`packtpub.com`的查询结果，它给了我一个外部IP地址`83.166.169.231`。到目前为止，一切都很顺利。如果您的DNS服务器是可达的，守护程序正在运行，并且您的本地工作站已配置为指向它，一个非常常见的问题是您域记录中的序列号。如果您向DNS服务器添加了资源但忘记递增序列号，这可能导致查找失败，即使您已经为该主机添加了配置。这可能看起来是常识，但您会惊讶地发现它有多容易被遗忘。'
- en: In the event that `nslookup` doesn't return a record, check that you have actually
    added that record to the server. If it does respond with a record, then everything
    should be running smoothly as long as you have configured your local workstation
    to point to the correct server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`nslookup`没有返回记录，请检查您是否确实将该记录添加到了服务器上。如果它返回了记录，那么只要您已经配置了本地工作站指向正确的服务器，一切都应该运行正常。
- en: Displaying connection statistics with netstat
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用netstat显示连接统计
- en: The `netstat` command is a useful utility to allow you to view some statistics
    regarding your current connection. We touched on it a bit in the last chapter.
    This command allows you to show useful networking information, such as showing
    you services that are listening for connections on your network card, and printing
    your routing table, among other things.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`netstat`命令是一个有用的实用程序，允许您查看有关当前连接的一些统计信息。我们在上一章中稍微提到了它。这个命令允许您显示有用的网络信息，比如显示在您的网络卡上监听连接的服务，并打印您的路由表，等等。'
- en: In the last chapter, I gave the example of `netstat -tulpn` to allow you to
    view currently connected and listening services. This command shows everything
    that's listening, as well as the port that it's listening on. Breaking this command
    down, we passed along some parameters. The first, `-t`, identifies that we would
    like to view information pertaining to TCP, `-u` represents UDP, `-l` requests
    listening sockets, `-p` attempts to show the name of the program, and `-n` also
    shows numeric values. Putting it all together, we get `netstat -tulpn`. In the
    industry, this is the most common usage of `netstat` that I've seen.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我举了`netstat -tulpn`的例子，让你可以查看当前连接和监听服务。这个命令显示了所有正在监听的东西，以及它正在监听的端口。分解这个命令，我们传递了一些参数。第一个`-t`，表示我们想要查看与TCP相关的信息，`-u`代表UDP，`-l`请求监听套接字，`-p`尝试显示程序的名称，`-n`也显示数字值。把它们放在一起，我们得到`netstat
    -tulpn`。在行业中，这是我见过的`netstat`最常见的用法。
- en: Other uses of `netstat` include showing your routing table (`netstat -r`), which
    gives you similar output as `route -n`. To view connection statistics, use `netstat
    -s`. Finally, you can also view a list of network interfaces on your system with
    `netstat -i`. For the most part though, this command is something you would use
    most often to print networking information to your terminal, that you would use
    for further analysis when trying to troubleshoot an issue or lock down a node.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`netstat`的其他用途包括显示路由表（`netstat -r`），它给出了与`route -n`类似的输出。要查看连接统计，使用`netstat
    -s`。最后，您还可以使用`netstat -i`查看系统上的网络接口列表。不过，总的来说，这个命令是您在尝试故障排除问题或锁定节点时最常用的用于将网络信息打印到终端的命令。'
- en: Scanning your network with Nmap and Zenmap
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap和Zenmap扫描您的网络
- en: The `nmap` utility is a network scanner that can give you a great deal of information
    regarding network resources. All you should have to do is install the `nmap` package.
    Once you have this utility in your arsenal, you can do some pretty neat things
    on your network. In most cases, `nmap` is used to interrogate systems and extract
    information. While `nmap` itself doesn't solve any actual problems, it helps you
    discover information you can use in order to build an understanding of what's
    happening on your network at any given time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: It also needs to be used with great care, as `nmap` is capable of disclosing
    information regarding a network that may be private, and unless you have express
    permission to use it, you should exercise discretion. Since `nmap` can be used
    for purposes of hacking, it's definitely a red flag to a network administrator
    (if that person isn't you) if they see this type of activity on the network. But
    in real-world scenarios, `nmap` can really be a life saver. In my experience,
    I found it quite useful in tracking down and interrogating machines that come
    up as hosting malware on the network, which strangely, always seems to be those
    that run Windows (go figure). If a vulnerability report only shows the IP address
    of an infected machine, it can be hard to track down whose machine it is. But
    with `nmap`, I can find out things such as which OS is running on that host, the
    hostname of the machine (which may even include the name of the user), and possibly
    the MAC address of that machine's network card.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many uses of `nmap`, but I''ll start with some of my favorites. First,
    as I just mentioned, you can use `nmap` to try to determine which operating system
    a particular host is using. This will allow you to fine-tune further commands
    to specifically target the machine, as how you investigate nodes differs based
    on the OS they are running. To use `nmap` to attempt to find this information,
    use it with the `-O` parameter and the IP address of a host. Basically, execute
    the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another useful use case for `nmap` is scanning an entire subnet to determine
    which hosts are connected. If you''re attempting to see which IP addresses are
    free, this is one way to do it (assuming no nodes have any firewalls that are
    blocking the scan):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the previous example, we can also use the `--exclude` option if we prefer
    a particular IP address not be scanned or included:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If a machine is behind a firewall, we can attempt to scan it anyway:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As if we didn''t already have enough utilities that can show us routing and
    interface information of our local machine, `nmap` can do that as well:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In addition to using `nmap` commands in a terminal, there is also Z**enmap**,
    which is more or less a GUI equivalent. Using it, we can do pretty much the same
    things as `nmap`, but in addition it allows you to save your scans, open previously
    saved scans, compare results between two saved scans, and even save command profiles
    for later use. If you find yourself using `nmap` on a usual basis, it may be useful
    for you to benefit from the added features of Zenmap.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning your network with Nmap and Zenmap](img/b03919_10_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Zenmap with a scan of a local network
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: One easy way to start testing Zenmap is to try it with any of the examples I've
    given in this chapter. You should be able to paste any of those commands in the
    third textbox at the top of the window, which reads **Command**. From here, you
    can click **Scan** to begin the scan. Once it's finished, you can save the results
    by clicking **Scan** and then **Save Scan**. As mentioned earlier, you can also
    compare scans to each other. This can be useful if you're curious which new devices
    were added to your network. You can run a scan of a subnet (using the `nmap -sP
    10.10.98.0/24` example I gave earlier) on one day, and then run the scan again
    the next day. If you saved the results each time, you can compare them and then
    determine immediately if a new device was added to your network. This is a good
    practice to perform periodically anyway (especially if you're the person who is
    designated to approve new devices) to determine if there are any rogue or unauthorized
    devices present.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 开始测试Zenmap的一种简单方法是尝试在本章中给出的任何示例中使用它。您应该能够将这些命令中的任何一个粘贴到窗口顶部的第三个文本框中，该文本框显示**命令**。从这里，您可以单击**扫描**开始扫描。完成后，您可以通过单击**扫描**然后**保存扫描**来保存结果。如前所述，您还可以将扫描结果进行比较。如果您想知道哪些新设备已添加到您的网络，这可能很有用。您可以在一天内对子网进行扫描（使用我之前提到的`nmap
    -sP 10.10.98.0/24`示例），然后第二天再次运行扫描。如果每次都保存了结果，您可以比较它们，然后立即确定是否有新设备添加到您的网络。这是一个很好的定期执行的做法（特别是如果您是指定批准新设备的人），以确定是否存在任何流氓或未经授权的设备。
- en: '![Scanning your network with Nmap and Zenmap](img/b03919_10_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nmap和Zenmap扫描您的网络](img/b03919_10_07.jpg)'
- en: Comparing network scans in Zenmap
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zenmap中比较网络扫描
- en: Deciding between using `nmap` and Zenmap is just a matter of preference. The
    features of Zenmap are quite nice, but the only thing it provides is ease of use.
    In `nmap`, for example, you can simply pipe the results into a text file yourself,
    and then you can run the `diff` command against the results of two output files
    without using a GUI application to perform this task.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`nmap`和Zenmap之间进行选择只是一种偏好问题。Zenmap的功能非常好，但它提供的唯一东西就是易用性。例如，在`nmap`中，您可以简单地将结果导入文本文件，然后可以针对两个输出文件的结果运行`diff`命令，而无需使用GUI应用程序来执行此任务。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On a typical network administrator's desktop, you'd be using either a Linux
    or Windows installation with a graphical user interface; in this case, Zenmap
    may be a good fit to add to your tool set.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的网络管理员桌面上，您可能会使用带有图形用户界面的Linux或Windows安装；在这种情况下，Zenmap可能是您工具集中的一个不错的选择。
- en: Installing missing firmware on Debian systems
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Debian系统上安装缺失的固件
- en: Many distributions of Linux prefer to include only free software and drivers
    by default, and Debian falls into that category. The reason for this can be due
    to moral decisions or licensing restrictions, but the result may be that a specific
    network card or hardware device ceases to function out of the box. Commonly, this
    is very typical with wireless cards. One example of this is Intel wireless cards.
    While these typically work without any tinkering needed when it comes to end-user
    distributions (Ubuntu, Linux Mint, and so on), Enterprise distributions such as
    Debian often don't include these and force you to jump through additional hoops.
    The reason for this is because the software required for these cards to function
    isn't open-source, so the decision was made to not include it in the default repositories.
    Thankfully, this usually isn't too difficult to rectify providing you know the
    steps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux发行版默认情况下更喜欢包括只有自由软件和驱动程序，Debian也属于这一类。这可能是出于道德决定或许可限制，但结果可能是特定的网络卡或硬件设备在开箱即用时无法正常工作。无线网卡通常是这种情况的典型例子。其中一个例子是英特尔无线网卡。虽然在终端用户发行版（如Ubuntu、Linux
    Mint等）中，这些通常无需任何调整即可正常工作，但企业发行版（如Debian）通常不包括这些，并强制您通过额外的步骤。原因是这些网卡要正常工作所需的软件不是开源的，因此决定不将其包含在默认存储库中。幸运的是，通常这并不太难纠正，只要您知道步骤即可。
- en: 'On Debian systems, there is a non-free parameter that can be added to your
    APT sources that tells the distribution that you would like such packages included
    when you search for and install software. But before you do this, make sure that
    you actually do need additional firmware. One dead giveaway is if Debian complains
    about missing firmware while booting. Without rebooting, you may see errors in
    the logs complaining about a lack of firmware for a hardware device. To view any
    output on your system that may be complaining about missing firmware, try the
    following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian系统上，有一个非自由参数，可以添加到您的APT源中，告诉发行版在搜索和安装软件时包括这些软件包。但在这样做之前，请确保您确实需要额外的固件。一个明显的迹象是，如果Debian在启动时抱怨缺少固件。在不重新启动的情况下，您可能会看到日志中有关硬件设备缺少固件的错误。要查看系统上可能抱怨缺少固件的任何输出，请尝试以下命令：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To add the non-free component of your APT sources in Debian, first make a backup
    of your original `sources.list` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Debian中添加APT源的非自由组件，首先备份您的原始`sources.list`文件：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, add the non-free parameter to the main repository. On my Debian Jessie
    system, the line looks like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将非自由参数添加到主存储库。在我的Debian Jessie系统上，该行如下：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once that''s done, refresh your sources with the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，使用以下命令刷新您的源：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From this point forward, the non-free binary packages should be available to
    you. You can confirm this by searching for and listing available firmware packages
    on your system. The output should contain several `nonfree` packages. To perform
    this search, try the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，非自由的二进制软件包应该对您可用。您可以通过搜索和列出系统上可用的固件软件包来确认这一点。输出应该包含几个`nonfree`软件包。要执行此搜索，请尝试以下命令：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For example, if `firmware-linux-nonfree` shows up in your list of available
    packages, then you've performed these steps correctly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`firmware-linux-nonfree`出现在您的可用软件包列表中，那么您已经正确执行了这些步骤。
- en: Unfortunately, detailing a full list of hardware compatibility for Debian and
    the required firmware for each would be beyond the scope of this book. However,
    the logs should give you a general idea of what firmware is missing, allowing
    you to search your package database for specific packages. Typically, copying
    a line of output from `dmesg` regarding failure to load firmware and doing a Google
    search will take you right to what package is needed to resolve the situation.
    In my case, the most commonly needed firmware package I run into is `firmware-iwlwifi`.
    Additionally, `firmware-atheros` and `firmware-b43-installer` are also common.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，详细列出Debian的硬件兼容性和每个所需的固件将超出本书的范围。然而，日志应该让您对缺少的固件有一个大致的了解，从而可以在软件包数据库中搜索特定的软件包。通常，从`dmesg`中关于无法加载固件的输出复制一行并进行谷歌搜索，将带您找到解决情况所需的软件包。在我的情况下，我经常需要的固件包是`firmware-iwlwifi`。此外，`firmware-atheros`和`firmware-b43-installer`也很常见。
- en: Troubleshooting issues with Network Manager
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排除Network Manager问题
- en: '**Network Manager** is a tool that is used to manage network connections in
    Linux. It consists of a daemon that runs in the background, as well as an optional
    graphical utility that most desktop distributions include to show you your connection
    status at any given time. Network Manager is not required by any means, but it
    simplifies the management of your network interfaces and their configuration.
    In a lot of real-world networks, Network Manager is typically disabled and static
    IP addresses are used instead. As I''ve mentioned probably a hundred times so
    far, I always prefer static leases over static IPs. With a static IP, you do not
    have the central point of management, and would need to track down and change
    a server''s IP address manually. It is for this reason that I recommend you to
    keep Network Manager running. It will watch for connections, activate your DHCP
    client, and then receive an IP address lease from your DHCP server. If you''ve
    set up a static lease (reservation) then you''re already all set to go as soon
    as Network Manager initiates your connection.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Network Manager**是用于管理Linux中的网络连接的工具。它由在后台运行的守护程序和大多数桌面发行版都包含的可选图形实用程序组成，以便随时显示您的连接状态。Network
    Manager并不是必需的，但它简化了网络接口及其配置的管理。在许多实际网络中，Network Manager通常是禁用的，而是使用静态IP地址。正如我之前提到的那样，我总是更喜欢静态租约而不是静态IP。使用静态IP，您没有中央管理点，并且需要手动跟踪并更改服务器的IP地址。因此，我建议您保持Network
    Manager运行。它将监视连接，激活您的DHCP客户端，然后从DHCP服务器接收IP地址租约。如果您设置了静态租约（保留），那么一旦Network Manager启动您的连接，您就已经准备好了。'
- en: In the case of networking issues that you've troubleshooted to be an issue local
    to Network Manager itself, there are several things you can do in order to pinpoint
    the problem.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在您已经排除为Network Manager本身的本地问题的网络问题的情况下，有几件事情可以帮助您准确定位问题。
- en: 'First, on CentOS systems, ensure that your network interface is configured
    to come up on boot. For some reason I cannot understand, CentOS actually defaults
    to turning your network interface off during installation. Unless you turn it
    on while running the installer, it will also be disabled by default after you
    boot as well. If the interface is not enabled, then Network Manager wouldn''t
    be able to manage it. Correcting this is simply a matter of editing the init script
    for the interface. You''ll find init scripts for your network interface cards
    in CentOS at the following location: `/etc/sysconfig/network-scripts`. On my system,
    I find the `init` script for my interface card at `/etc/sysconfig/network-scripts/ifcfg-enp0s3`,
    though the name of your interface will of course differ.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在CentOS系统上，请确保您的网络接口已配置为在启动时启动。出于我无法理解的某种原因，CentOS实际上在安装过程中默认关闭您的网络接口。除非您在运行安装程序时将其打开，否则在启动后它也将默认处于禁用状态。如果接口未启用，则Network
    Manager将无法管理它。纠正这个问题只是简单地编辑接口的init脚本。您将在CentOS中的网络接口卡的init脚本找到在以下位置：`/etc/sysconfig/network-scripts`。在我的系统上，我发现我的接口卡的`init`脚本在`/etc/sysconfig/network-scripts/ifcfg-enp0s3`，尽管您的接口名称当然会有所不同。
- en: 'Look at the last line, where you should see `ONBOOT="yes"`. If you don''t see
    that, modify that line and then restart networking:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 查看最后一行，您应该看到`ONBOOT="yes"`。如果您没有看到，修改该行，然后重新启动网络：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Second, on Debian and CentOS systems, check to make sure that Network Manager
    is running. This is one of those rare occasions where the command to do something
    is the same in both distributions. With the following command, we can check the
    status of the NetworkManager daemon:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在Debian和CentOS系统上，请确保Network Manager正在运行。这是那些命令在两个发行版中都相同的罕见情况之一。使用以下命令，我们可以检查NetworkManager守护程序的状态：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While troubleshooting issues, `systemctl` can be very useful as it not only
    tells you whether or not the service is started, it also gives you a handful of
    lines from the logs that may be able to point you in the right direction if you're
    experiencing an issue.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在排除问题时，`systemctl`可能非常有用，因为它不仅告诉您服务是否已启动，还会从日志中给出一些行，如果您遇到问题，可能会指引您朝正确的方向。
- en: 'To peruse Network Manager logs in their entirety, you can use `journalctl`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要完整查看Network Manager日志，您可以使用`journalctl`：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can also use the `-f` flag to follow the log, so you'll see new entries
    as they happen. This is especially useful while troubleshooting why a machine
    isn't able to connect to a wireless network. Errors will appear as the user attempts
    to connect. The following example shows how to follow the output of NetworkManager
    output that gets written to the journal.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`-f`标志来跟踪日志，这样您将在发生新条目时看到它们。在排除为什么机器无法连接到无线网络时，这是特别有用的。错误将在用户尝试连接时出现。以下示例显示了如何跟踪写入日志的NetworkManager输出。
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As with most systemd units, we can restart Network Manager with one simple
    command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数systemd单元一样，我们可以用一个简单的命令重新启动Network Manager：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous command may seem like a no-brainer, but for some reason, I've had
    to restart Network Manager more times than I would like. This is especially true
    while switching a machine from one network to another, or resuming from suspend
    (though those issues primarily only come up on end-user workstations).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令可能看起来很简单，但出于某种原因，我不得不重新启动网络管理器的次数比我想象的要多。这在将一台机器从一个网络切换到另一个网络，或者从暂停中恢复时尤其如此（尽管这些问题主要只出现在最终用户工作站上）。
- en: For the most part, issues with Network Manager are rare and troubleshooting
    it is relatively straightforward. Using systemd's `journalctl`, we can watch Network
    Manager's output and determine the root cause. In most cases, the issue will come
    down to a misconfigured network card.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，网络管理器的问题很少，而且故障排除相对简单。使用systemd的`journalctl`，我们可以观察网络管理器的输出并确定根本原因。在大多数情况下，问题将归结为网络卡配置错误。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some ways of troubleshooting issues that may come
    up on our Linux-based networks. While it's impossible to detail every possible
    thing that can go wrong, this chapter serves as a starting point for common issues
    that you might face. We started off by looking at routing issues as well as DHCP
    and DNS troubleshooting. In addition, we looked at useful troubleshooting tools
    such as `nmap`, as well as an overview of installing missing firmware that may
    be required to set up network cards in Debian. We closed off with information
    pertaining to troubleshooting Network Manager.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些可能出现在基于Linux的网络上的故障排除方法。虽然不可能详细列出所有可能出错的情况，但本章作为您可能面临的常见问题的起点。我们首先看了路由问题以及DHCP和DNS故障排除。此外，我们还介绍了诸如`nmap`之类的有用的故障排除工具，以及缺少的固件安装概述，这可能是在Debian中设置网络卡所需的。最后，我们提供了有关故障排除网络管理器的信息。
- en: With this, this book comes to a close. Thank you for taking this journey through
    the world of Linux network administration with me. I hope that book has resonated
    with you and helped you get a better understanding. Working with Linux has been
    the single best career choice I have made, and I would like to thank all of my
    readers and colleagues for making it such a wonderful experience. To all of you,
    I wish for you, success, and it is my hope that your journey through Linux be
    as beneficial to you as it has been for me.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这一切，本书也告一段落。感谢您与我一起走过Linux网络管理的世界。我希望这本书能引起您的共鸣，并帮助您更好地理解。与Linux一起工作是我做出的最佳职业选择，我要感谢所有的读者和同事，使这成为了一次美妙的经历。祝愿大家成功，希望您的Linux之旅对您像对我一样有益。
