- en: Creating a Mobile Application in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio is the *tour de force* of **integrated development environments**
    (**IDEs**). There is no doubt about that. You, as a developer, are able to be
    as versatile as you like by creating applications for a wide range of platforms.
    One of these platforms is mobile development. Developers are starting to create
    mobile applications, but don't want to use a different IDE. With Visual Studio,
    you don't have to. It will allow you to create Android and (now with **Xamarin**)
    iOS and Mac applications too.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will, therefore, take a look at the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xamarin and other required components on your Windows PC and Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mobile application using Apache Cordova
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an iOS application using Xamarin.Forms and Visual Studio for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have not heard about Xamarin, we encourage you to do a Google search
    for this tool. Traditionally, developers needed to use **Xcode** or **NetBeans**
    to create iOS and Android applications. The challenge for developers was that
    it meant learning a new programming language. If you, for example, created an
    application that you wanted to deploy to iOS, Android, and Windows, you needed
    to know Objective-C or Swift, Java, and a .NET language.
  prefs: []
  type: TYPE_NORMAL
- en: This also created additional challenges for development, because it meant having
    to maintain multiple code bases. If a change was to be made in the Windows version
    of the application, it also had to be made to the iOS and Android code base. Sometimes
    companies would manage different development teams for each platform. You can
    imagine the complications involved in managing a change across multiple teams
    on multiple platforms. This is especially true if you are dealing with a large
    code base.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin solves this problem by allowing .NET developers to use standard .NET
    libraries to create iOS and Android applications using Visual Studio. You, as
    a .NET developer, can now use the skills you already have to accomplish this.
    In a nutshell, you would create a shared library for your applications and then
    have different facades for the different platforms. A second option is to use
    Xamarin.Forms to create one Visual Studio project and target all three platforms.
    This makes it very easy to for developers to target multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xamarin and other required components on your Windows PC and Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does Xamarin work exactly? It does seem like magic, right? I mean, writing
    C# in Visual Studio and compiling a native iOS, Mac, or Android application on
    the other side does seem magical. A lot of technology has gone into giving developers
    the ability to do this. With iOS and Mac applications, the process is somewhat
    involved. One thing to be aware of if you want to target iOS or Mac is that you
    will need to use a Mac in order to build your iOS applications. There are services
    out there that make Macs available for remote testing and compilation (such as
    MacinCloud, [http://www.macincloud.com/](http://www.macincloud.com/)). These,
    however, do incur a monthly cost. When Xamarin compiles your C# code, it does
    so against a special subset of the Mono framework.
  prefs: []
  type: TYPE_NORMAL
- en: Mono is sponsored by Microsoft and is an open source implementation of the .NET
    Framework. This is based on the ECMA standards for **C#** and the **Common Language
    Runtime**. For more information on the Mono framework, take a look at [http://www.mono-project.com/](http://www.mono-project.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Looking at iOS specifically, this special subset includes libraries that allow
    access to iOS platform-specific features. The Xamarin.iOS compiler will take your
    C# code and compile it into an intermediate language called ECMA CIL. This **common
    intermediate language** (**CIL**) is then compiled a second time into native iOS
    code that an iPhone or iPad can run. You can then also deploy this to a simulator
    for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be wondering why a Mac is needed to compile your application?
    Why can't it all just happen from within Visual Studio? Well, this is due to a
    (quite clever) restriction imposed by Apple on the ability of the iOS kernel to
    generate code at runtime. It simply does not allow that to happen. As you know
    (this is the extremely simplified explanation), when your C# source code is compiled
    for testing it is compiled into intermediate language. The **just-in-time** (**JIT**)
    compiler then compiles the intermediate language into assembly code that is appropriate
    for the architecture you are targeting. Because the iOS kernel does not allow
    this on-demand compilation by a JIT compiler, the code is statically compiled
    using **ahead-of-time** (**AOT**) compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the limitations of Xamarin.iOS, take a look at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.xamarin.com/guides/ios/advanced_topics/limitations/](https://developer.xamarin.com/guides/ios/advanced_topics/limitations/)
    For a list of available assemblies in Xamarin.iOS, Xamarin.Mac, and Xamarin.Android,
    take a look at the following support document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/.](https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The technology behind this is quite impressive. It is no wonder that Microsoft
    acquired Xamarin and included it as part of Visual Studio. Giving developers this
    array of choice for cross-platform development is what Microsoft is all about:
    empowering developers to create world-class applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to look at getting Xamarin installed on your Windows PC running
    Visual Studio 2017 in this recipe. Xamarin can be installed as part of a workload
    when Visual Studio 2017 is installed. For now, let's assume that Xamarin has not
    been installed and that you need to do that now, after you have installed Visual
    Studio. Go to the Visual Studio website at [https://www.visualstudio.com/](https://www.visualstudio.com/)
    and download the installer for the version of Visual Studio you installed.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run the installer from the New Project dialog screen in Visual
    Studio 2017\. If you collapse the installed templates, you will see a section
    that allows you to open the Visual Studio Installer.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to install Xcode, which is Apple's development environment. This
    can be downloaded for free from the Mac App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will need to have an iTunes login to download Xcode and complete
    setting up your Mac. Chances are, if you have a Mac, you most definitely will
    have an iTunes login too.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Double-click on the installer you downloaded from the Visual Studio website.
    You will see that your version of Visual Studio 2017 is displayed and a Modify
    button is visible. Click on the Modify button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will display the available workloads for you. Under the Mobile & Gaming
    section, ensure that you select Mobile development with .NET. Then, click on the
    Modify button in the lower-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a second step we need to take if we want to use Xamarin to target
    iOS applications. We have to install the required software on a Mac. Head on over
    to Xamarin''s website on your Mac. The URL is [https://www.xamarin.com/](https://www.xamarin.com/).
    Click on the Products drop-down and select Xamarin Platform from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_03.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also access the required page by going to [https://www.xamarin.com/platform](https://www.xamarin.com/platform).
    Clicking on the Download now for free button will install something called **Xamarin
    Studio Community** on your Mac. You need to be aware that when installed on a
    Mac, Xamarin Studio cannot create Windows apps. It will only allow you to create
    iOS and Android apps on a Mac. Along with Xamarin Studio, you will also get the
    Xamarin Mac Agent (previously called the Xamarin build host). This is a required
    component so that you can link your PC to your Mac in order to build your iOS
    application. Lastly, the PC and Mac must also be able to connect to each other
    over a network (more on this later).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After downloading the installer on the Mac, the installation is straightforward.
    You will notice that there are a few options to choose from the installation screen: Xamarin.Android,
    Xamarin.iOS, Xamarin.Mac, and Xamarin Workbooks & Inspector. If you wanted to
    target Android as a platform, you would install Xamarin.Android. To target iOS
    (iPhone or iPad), you will need to select Xamarin.iOS. To create fully native
    Mac applications, you must select Xamarin.Mac. Lastly, Xamarin Workbooks & Inspector
    gives developers an interactive C# console that integrates with app debugging
    to aid developers when inspecting running apps. For now, we''re only interested
    in Xamarin.iOS. Just follow the screen prompts and complete the installation.
    Depending on your selection, the installer will download the required dependencies
    and install that on your Mac. Depending on your Internet connection, you might
    want to go get a cup of coffee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, if you have not installed Xcode from the Mac App Store, you should
    do so now before continuing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_05.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The steps we took previously when installing Xamarin will allow us to do target
    Mac, iOS, and Android (if we selected Xamarin.Android) platforms when developing
    cross-platform. Previously (before Visual Studio 2015), developers had to learn
    a new IDE in order to skill themselves up to create applications for other platforms.
    Personally, I find Xcode (the Apple developer IDE for creating native iOS and
    Mac applications) a bit of a learning curve. It's not because it is too complicated,
    but rather because it obviously works differently than what I am used to in Visual
    Studio. If you are serious about learning another programming language and want
    to go the Xcode route, take a look at Swift. It is a superb language and one that
    I found much easier to relate to C# than Objective-C, for example.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you would rather stick to what you know and are comfortable with,
    then Xamarin is your best choice for developing cross-platform applications. You
    also do not have to go out and buy a MacBook to compile your applications on.
    A Mac mini is more than enough when you want to start developing for iOS and Mac.
    It is an investment in your development toolset that will stand you in good stead.
    There are also cloud options (such as MacinCloud) available to you as a developer.
    With Xamarin, you can stick with C# and develop in an environment that you are
    familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: There is a third and final option available to developers, and this is one we
    will be taking a look at in the final recipe of this chapter. The steps in this
    recipe are for when you need to create applications on your Windows PC and compile
    them on your Mac or MacinCloud solution.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mobile application using Apache Cordova
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a mobile application using Apache Cordova is not complex at all. If
    you are familiar with web development, then this will feel quite natural to you.
    For those of you that have not developed web applications before, this will help
    you to familiarize yourself with this process. This is because at the very essence
    of Cordova lies a web application. You reference files such as JS files and CSS
    files and you work with an `index.html` file that you can debug in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova applications offer you the flexibility of targeting iOS, Android, or
    Windows applications. This recipe will illustrate a simple application that displays
    the current date when the user clicks on a button in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have installed the Mobile development with JavaScript workload
    as part of the Visual Studio 2017 installation process. For now, let's assume
    that you did not install it when you installed Visual Studio 2017 and now need
    to run the installer again.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run the installer from the New Project dialog screen in Visual
    Studio 2017\. If you collapse the installed templates, you will see a section
    that allows you to open the Visual Studio Installer.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Visual Studio website at [https://www.visualstudio.com/](https://www.visualstudio.com/)
    and download the installer for the version of Visual Studio you have installed.
    Also take note that you will need to have Google Chrome installed on your machine
    in order to launch the Cordova application simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Double-click on the installer you downloaded from the Visual Studio website.
    This will launch the installer and list the version of Visual Studio 2017 installed
    on your machine with a Modify button. Click on the Modify button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Mobile & Gaming group, select the Mobile development with JavaScript
    workload. Then, click on the Modify button. Depending on your specific requirements,
    additional components might be installed, such as support for the **Android SDK**
    and the **Google Android Emulator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Apache Cordova uses web technologies such as HTML, CSS, and JavaScript to build
    mobile applications that will run on Android, iOS and Windows devices. From Visual
    Studio, create a new application and select JavaScript from the Other Languages
    templates. Then select the Blank App (Apache Cordova) template. This is just a
    blank project that uses Apache Cordova to build a mobile app for Android, iOS,
    and **Universal Windows Platform** (**UWP**). I just called my app MyCordovaApp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once Visual Studio has created your application, you will notice that it has
    a very specific folder structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`merges`: Expanding the`merges` folder, you will notice that you have three
    subfolders called `android`, `ios`, and `windows`. Developers can use these folders
    to deliver different content based on which mobile platform they are targeting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www`: This is where most of your development will take place. The `index.html`
    file will become the main entry point for your Cordova application. When your
    mobile application is started, Cordova will look for this index file and load
    that first. You will also notice subfolders under the `www` folder. Think of these
    as a regular web application folder structure, because that is exactly what they
    are. The `css` subfolder will contain any style sheets you need to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any images you need to use in your mobile application will be stored in the
    `images` subfolder. Lastly, you will add any JavaScript files used by your mobile
    (web) application in the `scripts` subfolder. If you expand the `scripts` subfolder,
    you will notice a JavaScript file called `platformOverrides.js`. This is used
    in conjunction with the `merges` folder to deliver specific JavaScript code based
    on the mobile platform you are targeting.
  prefs: []
  type: TYPE_NORMAL
- en: '`res`: The `res` folder will be use to store non-web application resources
    that might be used by the different native mobile applications. These can be resources
    such as splash screens, images, icons, signing certificates, and so on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_08.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also notice several configuration files. These are `bower.json`, `build.json`,
    `config.xml`, and `package.json`. While I will not go into each one of these configuration
    files in detail, I want to briefly mention the `config.xml` and `package.json`
    files. The `package.json` file is not currently used by Cordova at the time of
    writing. It is intended to eventually replace the `config.xml` file. Currently,
    the `config.xml` file contains settings specific to your mobile application. Double-click
    on this file to view the custom editor for the Cordova application. The custom
    editor avoids the complexities of having to edit the XML file directly by providing
    a standard Windows form from where you can input the application-specific settings.
    The settings available to you as a developer are such settings as application
    name, author name, application description, device orientation, plugin configuration,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: It is imperative that you do not delete the `config.xml` file. Doing so will
    break your solution and the Cordova SDK will not be able to build and deploy your
    mobile application without it.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you can select a device from the debug drop-down and run your
    mobile application. If you had to select Simulate in Browser - Nexus 7 (Tablet),
    Visual Studio will launch Google Chrome and display the default Cordova application.
    This is the default for every Cordova application and does not contain any functionality
    really. It merely lets you know that your Cordova application has started correctly.
    What is interesting though is that you will see a new tab open up in Visual Studio
    while your simulator is launched. It is called the Cordova Plugin Simulation and
    defaults to the Geolocation plugin. This allows developers to interact with plugins
    and fire specific events as your application is running in the simulator. Any
    new plugins added to your Cordova application will expose additional panes in
    the Cordova Plugin Simulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add the NuGet package jQuery.mobile to your solution. NuGet will install
    jQuery.1.8.0 and jquery.mobile.1.4.5 to your solution. At the time this book was
    written, it was advised that jQuery.1.8.0 not be upgraded to the latest version
    due to compatibility reasons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your solution, NuGet will add several JS files to your project''s `Scripts`
    folder. Drag all these JS files to your `www/scripts` folder. Do the same with
    the project''s`Content` folder. Drag all the CSS files and the `images` subfolder
    to the `www/css` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Swing back to and open your `index.html` file. You will see a section between
    the `<body></body>` tags that looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the default boilerplate code added by the template and we will not be
    using it. Replace this with the following code and also add `<script src="img/jquery-1.8.0.min.js"></script>`
    and `<script src="img/jquery.mobile-1.4.5.min.js"></script>` to the bottom of
    the body section where the other script references are.
  prefs: []
  type: TYPE_NORMAL
- en: Note that your versions of the JS files might differ from the previously referenced
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, your `<body></body>` section should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, between the `<head></head>` tags, add the `<link rel="stylesheet" href="css/jquery.mobile-1.4.5.min.css"
    />` style reference above the existing `<link rel="stylesheet" type="text/css"
    href="css/index.css">` reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that your versions of the CSS files might differ from the versions referenced
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, your code should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your application now includes the required jQuery libraries that will make
    your mobile application mobile and touch optimized. Your mobile application is
    now also responsive to the device it will be displayed on. We now need to add
    some basic styling to the application. Open up the `index.css` file referenced
    in the `<head></head>` section of your `index.html` file. This should be in `www/css/index.css`.
    Replace the contents with the following code. The `#get-date-btn` is just referencing
    the button on our form and setting the font size to 22 pixels. The `form` is styled
    to contain a solid border at the bottom of 1 pixel wide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to add a click event for when the user taps on the Get Current
    Date button. To do this, open the `index.js` file located at `www/scripts/index.js`.
    Find the `onDeviceReady()` method and modify the code to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Think of this code as an event handler for the `get-date-btn` button. It is
    actually adding a click listener to the button that will call the `getCurrentDate`
    function whenever the button is tapped by the user. It is probably a good time
    to mention the `(function () { ... })();` function that contains the `onDeviceReady()`
    function. This is called an **anonymous self-invoking function**, which is actually
    just something you can think of as a form load event. You will notice that it
    adds an event handler for the `onDeviceReady()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, add the `getCurrentDate()` function to the `index.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the purposes of this recipe, I'll keep it simple and add the `getCurrentDate()`
    function to the `index.js` file because the code isn't really that complex. For
    more complex code, it would be better to create a separate JS file and reference
    that JS file in your `index.html` page (at the bottom of the `<body></body>` section)
    along with the other JS file references.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getCurrentDate()` function is nothing special. It just gets the date and
    formats it to a `yyyy/MM/dd` format and displays it in the label on the `index.html`
    page. Your function should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now start to debug your application. Let''s choose a different simulator
    in Visual Studio. Select Simulate in Browser - LG G5 and press *F5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_14_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chrome will launch and display your Cordova application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_14_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Get Current Date button and the current date will be displayed
    above the button you just clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_14_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While your simulator is open, open the `index.js` file where you added the
    `getCurrentDate()` function and place a breakpoint on the line that reads `$(''#current-date'').text("The
    date is: " + year + "/" + month + "/" + day);`. Then click on the Get Current
    Date button again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_14_15.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that your breakpoint is hit and you can now step through your
    code inspecting variables and debugging your application just like you are used
    to doing. You can even set conditional breakpoints. This is simply fantastic.
  prefs: []
  type: TYPE_NORMAL
- en: There is so much more to learn surrounding developing applications using Cordova.
    Web developers will find this process familiar and should easily pick it up. You
    can now take this application and run it on any platform because it is completely
    cross-platform. What you can try next is running your Cordova application using
    one of the Android Emulators available. Play around with this example and add
    some more functional code. Think of accessing a web service to retrieve values
    or play around with the styles.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to target different mobile devices from a single solution using Visual
    Studio allows developers the freedom to experiment and find what solution fits
    them and their development style the best. Cordova steps up to the plate and offers
    developers a fantastic solution for those that do not use something such as Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an iOS application using Xamarin.Forms and Visual Studio for Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers want to try their hand at writing an iOS application. The big
    drawback has always been learning a new programming language and a new IDE. For
    some, it is probably not an issue as they want to learn something new. But for
    many .NET developers, being able to stick to an IDE and programming language they
    know is immensely empowering. Well, this is exactly what Xamarin.Forms and Visual
    Studio achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that I am not including Xamarin.Android here as a consideration.
    I'm purely focusing on writing native iOS and Mac applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xamarin gives .NET developers the ability to use Visual Studio to write applications
    that can be run cross-platform easily, without having a separate code base for
    each. You therefore have a single code base for your application that will run
    on Windows, iOS/macOS, and Android. If you want to get into developing native iOS/macOS
    applications, you basically have (to my mind anyway) four viable options. They
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Buy yourself a Mac and teach yourself Xcode, Swift, and/or Objective-C.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy yourself a Mac and install Parallels, where you can install Windows, Visual
    Studio, and other Windows-based software (Mac is not exclusively used for development).
    You can see a video on the **Developer Community** YouTube channel I created a
    few years back ([https://www.youtube.com/developercommunity](https://www.youtube.com/developercommunity)).
    In that video, I show you how to install Visual Studio 2013 on a Mac using Parallels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy yourself a Mac and download **Visual Studio for Mac** (currently still in
    preview at the time of writing) and install that on your Mac (Mac is exclusively
    used for developing Android and iOS/macOS applications).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy yourself a Mac and use that to compile iOS/macOS applications developed
    on your Windows PC running Visual Studio. Do this if you need to create applications
    that can still target Windows-based platforms in addition to Android and iOS/macOS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are going to be using **Visual Studio for Mac** and Xamarin.Forms, then
    you will not be able to create Xamarin.Forms projects for Windows and Windows
    phone because these cannot be build on macOS. Also note that I didn't consider
    MacinCloud here because somewhere along the development process, I believe that
    it is really beneficial to own a physical Apple Mac device.
  prefs: []
  type: TYPE_NORMAL
- en: From the points listed earlier, it is clear that you are going to need a Mac.
    While it is entirely possible to have Visual Studio installed on your Windows
    PC and connect to the Xamarin Mac agent when the machines are on the same local
    network, it does become a bit of an inconvenience when you need to try and remotely
    access the Mac (from your work office, for example). While theoretically this
    should be possible, you need to do some legwork to make this all work. For one,
    you will probably need to add some sort of port forwarding on your router to allow
    remote connections to your Mac. You will also need to assign your Mac a static
    IP address (or even buy a static IP address for your router) so that if a restart
    happens due to a power failure when you are working remotely, you will still be
    able to access your Mac for your Visual Studio builds.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Parallels on your Mac is great, and will really come in handy when
    you have other Windows-based software that you want to use on your Mac. If you
    (like me) use your Mac exclusively for development purposes, then Parallels might
    not be a viable solution. This leaves **Visual Studio for Mac** and is a great
    option if you only plan to develop iOS/macOS and Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: To download Visual Studio for Mac, head on over to [https://developer.xamarin.com/visual-studio-mac/](https://developer.xamarin.com/visual-studio-mac/)
    and click on the download link. The installation process is somewhat similar to
    the installation process in the first recipe of this chapter. The difference here
    is that the actual Visual Studio application will be installed on the Mac and
    not on a Windows PC on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After downloading Visual Studio for Mac, start the installation process. This
    is very similar to the process outlined in the first recipe. It can take a while
    to complete, so once again, go get yourself a cup of coffee. Creating applications
    with Visual Studio for Mac is a familiar experience for .NET developers coming
    from Visual Studio for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the heart of Visual Studio for Mac is the Roslyn compiler that is used for
    refactoring and IntelliSense. The build engine is MSBuild and the debugger engine
    is the same for Xamarin and .NET Core applications. The software requirements
    for Xamarin development and Visual Studio for Mac are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need a Mac running OS X El Capitan (10.11) or macOS Sierra.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iOS 10 SDK that ships with Xcode 8 is required. Xcode can be downloaded
    for free as long as you have a valid iTunes account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio for Mac requires .NET Core which can be downloaded by following
    the steps outlined at [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos).
    You must complete all the steps listed to ensure that .NET Core is installed correctly.
    While you are there, make a note to watch a few of Kendra Havens' Channel 9 videos
    on getting started with .NET Core, at [https://channel9.msdn.com/](https://channel9.msdn.com/).
    While you are at it, have a look at the other brilliant content on Channel 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you plan to submit your applications to the Apple App Store, then you will
    need to purchase a developer license, which is currently priced at $99/year. You
    can, however, develop your applications without purchasing a developer license.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you plan to install Visual Studio for Mac alongside Xamarin Studio,
    then you need to be aware that Visual Studio for Mac requires Mono 4.8\. Installing
    Xamarin Studio will downgrade Mono to an older version. To get around this, you
    need to opt out of the Mono 4.6 selection during the Xamarin Studio update screen.
  prefs: []
  type: TYPE_NORMAL
- en: With this rather detailed checklist of requirements out of the way, let's get
    ready to create an iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Launch Visual Studio for Mac and sign in with your Microsoft Account details.
    You will notice the Get Started section that lists a number of useful articles
    that help developers get up and running with Visual Studio for Mac:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_16-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on New Project... and select the Forms App project from the Xamarin.Forms
    group in the Multiplatform App templates. Then, click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_17-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then need to give our application a name and an Organization Identifier.
    I simply called my app `HelloWorld` and then selected only iOS under Target Platforms.
    Click on Next to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_18-2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, decide whether you want to configure your project to use Git for version
    control and Xamarin Test Cloud. When you have configured what you need to, click
    on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_19-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When your project is created, you will notice that you can select the device
    you want to simulate by clicking on the down arrow next to the Debug button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will list the different simulators available to you, as well as any devices
    tethered to your Mac (in this case, my iPhone):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Run button will launch the simulator for the selected device
    and display the default application created for you when you created the Xamarin.Forms
    iOS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The application in the simulator is fully functional and you can interact with
    it to get a feel for how the simulator works. As mentioned earlier, if you have
    an iOS device tethered to your Mac, you can even launch the application on your
    device to test it. Clicking on the About tab, for example, will display the About
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Stop button in Visual Studio for Mac and go back to your solution.
    Expand the `ViewModels` and `Views` folders. You will see a very familiar structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `ViewModels` folder, open the `AboutViewModel.cs` file. In the constructor
    `AboutViewModel()`, you will see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, just to illustrate the use of C#, change the code here to look like
    the following code listing. Do you notice the first line of code? The section
    after `var titleText =` is an interpolated string `$"Hello World - The date is
    {DateTime.Now.ToString("MMMM dd yyyy")}";`. Interpolated strings were introduced
    in C# 6.0\. Click on the Play button to launch the application in the simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, click on the About tab again and look at the title. The title has changed
    to display Hello World and the current date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_14_25.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, I will be the first to admit that the code we wrote was not earth-shattering
    at all. In fact, we basically piggybacked on an existing application and just
    modified a little bit of code to display Hello World and the current date. One
    thing that you need to remember here though is that we have written C# code and
    compiled that to a native iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: There is still much to learn. We have not even scratched the surface with what
    is available now with Visual Studio for Mac, Xamarin.Forms and cross-platform
    C# applications. Xamarin has really good documentation that will assist you as
    you navigate the new causeways of developing applications using Xamarin. A nice
    case study to read through is the Tasky case study, which can be found at [https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/](https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/).
    This will give you a good idea about what is involved with developing a cross-platform
    application using Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: Why don't you try to play around a bit more with the application we just created?
    See what is possible and what differences there are in approaching database logic
    and reading user input, for example. Visual Studio for Mac has opened a new world
    for developers, making it easier than ever to get started developing native iOS
    applications.
  prefs: []
  type: TYPE_NORMAL
