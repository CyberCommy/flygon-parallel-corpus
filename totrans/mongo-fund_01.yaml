- en: 1\. Introduction to MongoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. MongoDB简介
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will introduce you to MongoDB fundamentals, first defining data
    and its types, then exploring how a database solves data storage challenges. You
    will learn about the different types of databases and how to select the right
    one for your task. Once you have a clear idea about these concepts, we will discuss
    MongoDB, its features, architecture, licensing, and deployment models. By the
    end of the chapter, you will have gained hands-on experience using MongoDB through
    Atlas—the cloud-based service used to manage MongoDB—and worked with its basic
    elements, such as databases, collections, and documents.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍MongoDB的基础知识，首先定义数据及其类型，然后探讨数据库如何解决数据存储挑战。您将了解不同类型的数据库以及如何为您的任务选择合适的数据库。一旦您对这些概念有了清晰的理解，我们将讨论MongoDB、其特性、架构、许可和部署模型。到本章结束时，您将通过Atlas（用于管理MongoDB的基于云的服务）获得使用MongoDB的实际经验，并与其基本元素（如数据库、集合和文档）一起工作。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'A database is a platform to store data in a way that is secure, reliable, and
    easily available. There are two types of databases used in general: relational
    databases and non-relational databases. Non-relational databases are often called
    as NoSQL databases. A NoSQL database is used to store large quantities of complex
    and diverse data, such as product catalogs, logs, user interactions, analytics,
    and more. MongoDB is one of the most established NoSQL databases, with features
    such as data aggregation, **ACID** (**Atomicity, Consistency, Isolation, Durability**)
    transactions, horizontal scaling, and Charts, all of which we will explore in
    detail in the upcoming sections.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是一种安全、可靠且易于获取数据的平台。通常有两种类型的数据库：关系数据库和非关系数据库。非关系数据库通常被称为NoSQL数据库。NoSQL数据库用于存储大量复杂和多样化的数据，如产品目录、日志、用户互动、分析等。MongoDB是最成熟的NoSQL数据库之一，具有数据聚合、ACID（原子性、一致性、隔离性、持久性）事务、水平扩展和图表等功能，我们将在接下来的部分中详细探讨。
- en: Data is crucial for businesses—specifically, storing, analyzing, and visualizing
    the data while making data-driven decisions. It is for this reason that MongoDB
    is trusted and used by companies such as Google, Facebook, Adobe, Cisco, eBay,
    SAP, EA, and many more.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数据对于企业至关重要，特别是在存储、分析和可视化数据以做出数据驱动决策时。正因如此，像谷歌、Facebook、Adobe、思科、eBay、SAP、EA等公司都信任并使用MongoDB。
- en: MongoDB comes in different variants and can be utilized for both experimental
    and real-world applications. It is easier to set up and simpler to manage than
    most other databases due to its intuitive syntax for queries and commands. MongoDB
    is available for anyone to install on their own machine(s) or to be used on the
    cloud as a managed service. MongoDB's cloud-managed service (called Atlas) is
    available to everyone for free, whether you are an established enterprise or a
    student. Before we start our discussion of MongoDB, let us first learn about database
    management systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB有不同的变体，可用于实验和实际应用。由于其直观的查询和命令语法，它比大多数其他数据库更容易设置和管理。MongoDB可供任何人在自己的机器上安装，也可作为托管服务在云上使用。MongoDB的云托管服务（名为Atlas）对所有人免费开放，无论您是已建立的企业还是学生。在我们开始讨论MongoDB之前，让我们先了解数据库管理系统。
- en: Database Management Systems
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库管理系统
- en: A **Database Management System** (**DBMS**) provides the ability to store and
    retrieve data. It uses query languages to create, update, delete, and retrieve
    data. Let us look at the different types of DBMS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理系统（DBMS）提供存储和检索数据的能力。它使用查询语言来创建、更新、删除和检索数据。让我们来看看不同类型的DBMS。
- en: Relational Database Management Systems
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库管理系统
- en: '**Relational Database Management Systems** (**RDBMS**) are used to store structured
    data. The data is stored in the form of tables that consist of rows and columns.
    The tables can have relationships with other tables to depict the actual data
    relationships. For example, in a university relational database, the *Student*
    table can be related to the *Course* and *Marks Obtained* tables through a common
    columns such as *courseId*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库管理系统（RDBMS）用于存储结构化数据。数据以表格形式存储，包括行和列。表格可以与其他表格建立关系，以描述实际的数据关系。例如，在大学关系数据库中，“学生”表可以通过共同的列（如courseId）与“课程”和“成绩”表相关联。
- en: NoSQL Database Management Systems
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库管理系统
- en: NoSQL databases were invented to solve the problem of storing unstructured and
    semi-structured data. Relational databases enforce the structure of data to be
    defined before the data can be stored. This database structure definition is often
    referred to as schema, which pertains to the data entities, that is, its attributes
    and types. RDBMS client applications are tightly coupled with the schema. It is
    hard to modify the schema without affecting the clients. Contrastingly, NoSQL
    databases allow you to store the data without a schema and also support dynamic
    schema, which decouples the clients from a rigid schema, and is often necessary
    for modern and experimental applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库是为解决存储非结构化和半结构化数据的问题而发明的。关系数据库要求在存储数据之前定义数据的结构。这种数据库结构定义通常称为模式，涉及数据实体及其属性和类型。RDBMS客户端应用程序与模式紧密耦合。很难修改模式而不影响客户端。相比之下，NoSQL数据库允许您在没有模式的情况下存储数据，并支持动态模式，这使客户端与严格的模式解耦，对于现代和实验性应用程序通常是必要的。
- en: The data stored in the NoSQL database varies depending on the provider, but
    generally, data is stored as documents instead of tables. An example of this would
    be databases for inventory management, where different products can have different
    attributes and, therefore, require a flexible structure. Similarly, an analytics
    database that stores data from different sources in different structures would
    also need a flexible structure.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Comparison
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us compare NoSQL databases and RDBMS based on the following factors. You
    will get an in-depth understanding of these as you read through this book. For
    now, a basic overview is provided in the following table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: Differences between relational databases and NoSQL'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.1: Differences between relational databases and NoSQL'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our discussion on databases and the differences between the various
    database types. In the next section, we will begin our exploration of MongoDB.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to MongoDB
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a popular NoSQL database that can store both structured and unstructured
    data. Founded in 2007 by Kevin P. Ryan, Dwight Merriman, and Eliot Horowitz in
    New York, the organization was initially called 10gen and was later renamed MongoDB—a
    word inspired by the term **humongous**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: It provides both essential and extravagant features that are needed to store
    real-world big data. Its document-based design makes it easy to understand and
    use. It is built to be utilized for both experimental and real-world applications
    and is easier to set up and simpler to manage than most of the other NoSQL databases.
    Its intuitive syntax for queries and commands makes it easy to learn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list explores these features in detail:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexible and Dynamic Schema**: MongoDB allows a flexible schema for your
    database. A flexible schema allows variance in fields in different documents.
    In simple terms, each record in the database may or may not have the same number
    of attributes. It addresses the need for storing evolving data without making
    any changes to the schema itself.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rich Query Language**: MongoDB supports intuitive and rich query language,
    which means simple yet powerful queries. It comes with a rich aggregation framework
    that allows you to group and filter data as required. It also has built-in support
    for general-purpose text search and specific purposes like geospatial searches.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-Document ACID Transactions**: **Atomicity, Consistency, Integrity,
    and Durability** (**ACID**) are features that allow your data to be stored and
    updated to maintain its accuracy. Transactions are used to combine operations
    that are required to be executed together. MongoDB supports ACID in a single document
    and multi-document transactions.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atomicity** means all or nothing, which means either all operations are a
    part of a transaction as it happens or none of them are. This means that if one
    of the operations fails, then all the executed operations are rolled back to leave
    the data affected by transaction operation in the state it was in before the transaction
    started.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency** in a transaction means keeping the data consistent as per the
    rules defined for the database. If a transaction breaks any database consistency
    rules, then it must be rolled back.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Isolation** enforces running transactions in isolation, which means that
    the transactions do not partially commit the data and any values outside the transactions
    change only after all the operations are executed and are fully committed.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Durability** ensures that the changes are committed by the transaction. So,
    if a transaction has executed then the database will ensure the changes are committed
    even if there is a system crash.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High Performance**: MongoDB provides high performance using embedded data
    models to reduce disk I/O usage. Also, extensive support for indexing on different
    kinds of data makes queries faster. Indexing is a mechanism to maintain relevant
    data pointers in an index just like an index in a book.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：MongoDB使用嵌入式数据模型提供高性能，以减少磁盘I/O使用。此外，对不同类型的数据进行索引的广泛支持使查询更快。索引是一种维护索引中相关数据指针的机制，就像书中的索引一样。'
- en: '**High Availability**: MongoDB supports distributed clusters with a minimum
    of three nodes. A cluster refers to a database deployment that uses multiple nodes/machines
    for data storage and retrieval. Failovers are automatic, and data is replicated
    on secondary nodes asynchronously.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：MongoDB支持最少三个节点的分布式集群。集群是指使用多个节点/机器进行数据存储和检索的数据库部署。故障转移是自动的，数据在辅助节点上异步复制。'
- en: '**Scalability**: MongoDB provides a way to scale your databases horizontally
    across hundreds of nodes. So, for all your big data needs, MongoDB is the perfect
    solution. With this, we have looked at some of the essential features of MongoDB.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：MongoDB提供了一种在数百个节点上水平扩展数据库的方法。因此，对于所有的大数据需求，MongoDB是完美的解决方案。通过这些，我们已经了解了MongoDB的一些基本特性。'
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MongoDB 1.0 was first officially launched in February 2009 as an open source
    database. Since then, there have been several stable releases of the software.
    More information about different versions and the evolution of MongoDB can be
    found at the official MongoDB website ([https://www.mongodb.com/evolved](https://www.mongodb.com/evolved)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 1.0于2009年2月首次正式发布为开源数据库。此后，该软件已经发布了几个稳定版本。有关不同版本和MongoDB演变的更多信息，请访问官方MongoDB网站（[https://www.mongodb.com/evolved](https://www.mongodb.com/evolved)）。
- en: MongoDB Editions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB版本
- en: 'MongoDB is available in two different editions to address the needs of developers
    and enterprises, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB有两个不同的版本，以满足开发人员和企业的需求，如下：
- en: '**Community Edition**: The Community Edition is released for the developer
    community, for those who want to learn and get hands-on experience with MongoDB.
    The Community Edition is free and is available for installation on Windows, Mac,
    and different Linux flavors, such as Red Hat, Ubuntu, and so on. You can run your
    production workload on community servers; however, for advanced enterprise features
    and support, you must consider the paid Enterprise Edition.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**社区版**：社区版是为开发人员社区发布的，供那些想要学习和获得MongoDB实践经验的人使用。社区版是免费的，可在Windows、Mac和不同的Linux版本上安装，如Red
    Hat、Ubuntu等。您可以在社区服务器上运行生产工作负载；但是，对于高级企业功能和支持，您必须考虑付费的企业版。'
- en: '**Enterprise Edition**: The Enterprise Edition uses the same underlying software
    as the Community Edition but comes with some additional features, which include
    the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 企业版：企业版使用与社区版相同的基础软件，但附带一些额外的功能，包括以下内容：
- en: '*Security*: **Lightweight Directory Access Protocol** (**LDAP**) and Kerberos
    authentication. LDAP is a protocol that allows authentication from external user
    directories. This means that you do not need to create users in the database to
    authenticate them but can use external directories such as a corporate user directory.
    This saves a lot of time by not replicating users in different systems such as
    a database.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安全性*：**轻量级目录访问协议**（**LDAP**）和Kerberos身份验证。LDAP是一种允许来自外部用户目录的身份验证的协议。这意味着您不需要在数据库中创建用户来进行身份验证，而是可以使用外部目录，如企业用户目录。这样可以节省大量时间，不需要在不同系统中复制用户，如数据库。'
- en: '*In-memory storage engine*: This provides high throughput and low latency.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内存存储引擎*：提供高吞吐量和低延迟。'
- en: '*Encrypted storage engine*: This lets you encrypt data at rest.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加密存储引擎*：这使您可以加密静态数据。'
- en: '*SNMP monitoring*: Centralized data collection and aggregation.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SNMP监控*：集中的数据收集和聚合。'
- en: '*System event auditing*: This lets you record events in JSON format.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*系统事件审计*：这使您可以以JSON格式记录事件。'
- en: Migrating Community Edition to Enterprise Edition
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将社区版迁移到企业版
- en: 'MongoDB allows you to upgrade your Community Edition to the Enterprise Edition.
    This can be useful for scenarios in which you started with the Community Edition
    and eventually built a database that is now good for commercial use. For such
    cases, instead of installing the Enterprise Edition and building the database
    again, you can simply upgrade the Community Edition to the Enterprise Edition,
    saving time and effort. For more information about upgrading, you can visit this
    link: [https://docs.mongodb.com/manual/administration/upgrade-community-to-enterprise/](https://docs.mongodb.com/manual/administration/upgrade-community-to-enterprise/).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB允许您将社区版升级为企业版。这对于您最初使用社区版并最终构建了现在适合商业用途的数据库的情况很有用。对于这种情况，您可以简单地将社区版升级为企业版，而不是安装企业版并重新构建数据库，从而节省时间和精力。有关升级的更多信息，请访问此链接：[https://docs.mongodb.com/manual/administration/upgrade-community-to-enterprise/](https://docs.mongodb.com/manual/administration/upgrade-community-to-enterprise/)。
- en: The MongoDB Deployment Model
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB部署模型
- en: 'MongoDB can run on a variety of platforms, including Windows, macOS, and different
    flavors of Linux. You can install MongoDB on a single machine or a cluster of
    machines. Multiple machine installation provides high availability and scalability.
    The following list details each of these installation types:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB可以在多种平台上运行，包括Windows、macOS和不同版本的Linux。您可以在单台机器或多台机器上安装MongoDB。多台机器安装提供了高可用性和可扩展性。以下列表详细介绍了每种安装类型：
- en: '**Standalone**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**独立版**'
- en: Standalone installation is a single-machine installation and is meant mainly
    for development or experimental purposes. You can refer to the *Preface* for the
    steps to install MongoDB on your system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 独立安装是单机安装，主要用于开发或实验目的。您可以参考*前言*中有关在系统上安装MongoDB的步骤。
- en: '**Replica Set**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**副本集**'
- en: A replica set in MongoDB is a group of processes or servers that work together
    to provide data redundancy and high availability. Running MongoDB as a standalone
    process is not highly reliable because you may lose access to your data due to
    connectivity issues and disk failures. Using a replica set solves these problems
    as the data copies are stored on multiple servers. It requires at least three
    servers in a cluster. These servers are configured as the primary, secondaries,
    or arbiters. You will learn more about the replica set and its benefits in *Chapter
    9*, *Replication*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中，复制集是一组进程或服务器，它们共同工作以提供数据冗余和高可用性。将MongoDB作为独立进程运行并不是非常可靠的，因为由于连接问题和磁盘故障，您可能会丢失对数据的访问。使用复制集可以解决这些问题，因为数据副本存储在多个服务器上。集群中至少需要三台服务器。这些服务器被配置为主服务器、次要服务器或仲裁者。您将在第9章“复制”中了解更多关于复制集及其好处的信息。
- en: '**Sharded**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 分片
- en: Sharded deployments allow you to store the data in a distributed way. They are
    required for applications that manage massive data and expect high throughput.
    A shard contains a subset of the data, and each shard must use a replica set to
    provide redundancy of the data that it holds. Multiple shards working together
    provide a distributed and replicated dataset.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 分片部署允许您以分布式方式存储数据。它们适用于管理大量数据并期望高吞吐量的应用程序。一个分片包含数据的一个子集，每个分片必须使用复制集来提供其持有的数据的冗余。多个分片共同工作提供了一个分布式和复制的数据集。
- en: Managing MongoDB
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理MongoDB
- en: MongoDB provides the user with two options. Based on your requirements, you
    can either install it on your system and manage the database yourself or utilize
    the **Database as a Service** (**DBaaS**) option offered by MongoDB (Atlas). Let
    us learn more about these two options.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB为用户提供了两种选择。根据您的需求，您可以在自己的系统上安装并自己管理数据库，或者利用MongoDB（Atlas）提供的数据库即服务（DBaaS）选项。让我们更多地了解这两种选择。
- en: Self-Managed
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自管理
- en: MongoDB is available to be downloaded and installed on your machines. The machine
    can be a workstation, a server, a virtual machine in a data center, or on the
    cloud. You can install MongoDB as standalone, a replica set, or sharded clusters.
    All these deployments are possible with both the Community and Enterprise Editions.
    Each deployment has its advantages and associated complexity. A self-managed database
    can be useful for scenarios where you either want more granular control of your
    database or you just want to learn database management and operations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB可以下载并安装在您的机器上。机器可以是工作站、服务器、数据中心中的虚拟机，或者在云上。您可以将MongoDB安装为独立、复制集或分片集群。所有这些部署都适用于社区版和企业版。每种部署都有其优势和相关的复杂性。自管理的数据库可以用于您希望更精细地控制数据库或者只是想学习数据库管理和操作的场景。
- en: 'Managed Service: Database as a Service'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管服务：数据库即服务
- en: A managed service is the concept of outsourcing some processes, functions, or
    deployments to a vendor. DBaaS is a term generally used for databases outsourced
    to an external vendor. A managed service enforces a shared responsibility model.
    The provider of the service manages the infrastructure, that is, the installation,
    deployment, failover, scalability, disk space, monitoring, and so on. You can
    manage the data and the settings for security, performance, and tuning. It allows
    you to save time managing databases and focus on other things, such as application development.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 托管服务是将一些流程、功能或部署外包给供应商的概念。DBaaS是一个通常用于外包给外部供应商的数据库的术语。托管服务实施了一个共享责任模型。服务提供商管理基础设施，即安装、部署、故障转移、可伸缩性、磁盘空间、监控等。您可以管理数据和安全性、性能和调整设置。它允许您节省管理数据库的时间，专注于其他事情，比如应用程序开发。
- en: In this section, we learned about the history of MongoDB and its evolution.
    We also learned about different editions of MongoDB and the differences between
    them. We concluded the section by learning how MongoDB can be deployed and managed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们了解了MongoDB的历史和发展。我们还了解了MongoDB的不同版本以及它们之间的区别。我们通过学习MongoDB的部署和管理方式来结束了这一部分。
- en: MongoDB Atlas
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB Atlas
- en: MongoDB Atlas is the DBaaS offering from MongoDB Inc. It allows you to provision
    a database on the cloud as a service, which can be used for your applications
    from anywhere. Atlas uses cloud infrastructures from different cloud vendors.
    You can choose the cloud vendor on which you want to deploy your database. Like
    any other managed service, you get the benefits of highly available secured environments
    with low or no maintenance needed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB Atlas是MongoDB Inc.提供的数据库即服务（DBaaS）产品。它允许您在云上提供数据库作为服务，可以用于您的应用程序。Atlas使用来自不同云供应商的云基础设施。您可以选择要部署数据库的云供应商。与任何其他托管服务一样，您可以获得高可用性、安全的环境，并且几乎不需要或根本不需要维护。
- en: MongoDB Atlas Benefits
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB Atlas的好处
- en: Let us look at some of the benefits of MongoDB Atlas.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看MongoDB Atlas的一些好处。
- en: '**Simple Setup**: The database setup on Atlas is easy and can be done in just
    a few steps. Atlas runs a variety of automated tasks behind the scenes to set
    up your multi-node cluster.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单设置：在Atlas上设置数据库很容易，只需几个步骤即可完成。Atlas在幕后运行各种自动化任务来设置您的多节点集群。
- en: '**Guaranteed Availability**: Atlas deploys at least three data nodes or servers
    per replica set. Each node is deployed in a separate availability zone (**Amazon
    Web Services** (**AWS**)), fault domains (Microsoft Azure), or zones (**Google
    Cloud Platform** (**GCP**)). This allows a highly available setup and continuous
    uptime in case of outages or routine updates.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保证可用性：Atlas每个复制集至少部署三个数据节点或服务器。每个节点都部署在不同的可用区（Amazon Web Services（AWS））、故障域（Microsoft
    Azure）或区域（Google Cloud Platform（GCP））。这样可以实现高可用性设置，并在发生故障或例行更新时保持持续的正常运行时间。
- en: '**Global Presence**: MongoDB Atlas is available across different regions in
    the AWS, GCP, and Microsoft Azure clouds. The support for different regions allows
    you to pick a region closer to you for low latency read and write.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球覆盖：MongoDB Atlas在AWS、GCP和Microsoft Azure云中的不同区域都可用。对不同区域的支持允许您选择一个离您更近的区域进行低延迟读写。
- en: '**Optimal Performance**: The founders of MongoDB manage Atlas, and they utilize
    their expertise and experience to keep the databases in Atlas running optimally.
    Also, single-click upgrades are available for upgrading to the latest versions
    of MongoDB.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳性能**：MongoDB的创始人管理Atlas，并利用他们的专业知识和经验来保持Atlas中的数据库运行良好。此外，单击升级可用于升级到最新版本的MongoDB。'
- en: '**Highly Secured**: Security best practices are implemented by default, such
    as a separate VPC (virtual private cloud), network encryption, access controls,
    and firewalls to restrict access.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度安全**：默认实施安全最佳实践，例如独立的VPC（虚拟私有云）、网络加密、访问控制和防火墙以限制访问。'
- en: '**Automated Backups**: You can configure automated backups with customizable
    schedules and data retention policies. Secure backups and restores are available
    for switching between different versions of your database.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动备份**：您可以配置具有可定制计划和数据保留策略的自动备份。安全备份和恢复可用于在不同版本的数据库之间进行切换。'
- en: Cloud Providers
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云提供商
- en: MongoDB Atlas currently supports three cloud providers, namely **AWS**, **GCP**,
    and **Microsoft Azure**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB Atlas目前支持三个云提供商，分别是**AWS**、**GCP**和**Microsoft Azure**。
- en: Availability Zones
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用区
- en: '**Availability Zones** (**AZs**) are a group of physical data centers within
    close proximity, equipped with computational, storage, or networking resources.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**可用区**（**AZs**）是一组物理数据中心，距离较近，配备有计算、存储或网络资源。'
- en: Regions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域
- en: A region is a geographical area, for example, Sydney, Mumbai, London, and so
    on. A region generally consists of two or more AZs. The AZs are generally in different
    cities/towns away from each other, to provide fault tolerance in case of any natural
    disasters. Fault tolerance is the ability of a system to keep running when something
    goes wrong in one portion of the system. In terms of AZs, if one AZ goes down
    due to some reason, another AZ should still be able to serve the operations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 区域是一个地理区域，例如悉尼、孟买、伦敦等。一个区域通常包括两个或两个以上的AZs。这些AZs通常位于彼此相距较远的不同城市/城镇，以提供在发生自然灾害时的容错能力。容错能力是系统在某一部分出现问题时仍然能够继续运行的能力。就AZs而言，如果一个AZ由于某种原因而宕机，另一个AZ仍应能够提供服务。
- en: MongoDB Supported Regions and Availability Zones
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB支持的区域和可用区
- en: 'MongoDB Atlas allows you to deploy your database in a multi-cloud global infrastructure
    from AWS, GCP, and Azure. It allows MongoDB to support a vast number of regions
    and AZs. Also, the number of supported regions and AZs keeps growing as cloud
    providers keep adding to them. Follow these links from the official MongoDB website
    about cloud providers'' region support:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB Atlas允许您在AWS、GCP和Azure的多云全球基础设施中部署数据库。它使MongoDB能够支持大量的区域和AZs。此外，随着云提供商不断增加，支持的区域和AZs的数量也在不断增加。请参考官方MongoDB网站上关于云提供商区域支持的链接：
- en: 'AWS: [https://docs.atlas.mongodb.com/reference/amazon-aws/#amazon-aws](https://docs.atlas.mongodb.com/reference/amazon-aws/#amazon-aws).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS：[https://docs.atlas.mongodb.com/reference/amazon-aws/#amazon-aws](https://docs.atlas.mongodb.com/reference/amazon-aws/#amazon-aws)。
- en: 'GCP: [https://docs.atlas.mongodb.com/reference/google-gcp/#google-gcp](https://docs.atlas.mongodb.com/reference/google-gcp/#google-gcp).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP：[https://docs.atlas.mongodb.com/reference/google-gcp/#google-gcp](https://docs.atlas.mongodb.com/reference/google-gcp/#google-gcp)。
- en: 'Azure: [https://docs.atlas.mongodb.com/reference/microsoft-azure/#microsoft-azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/#microsoft-azure).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure：[https://docs.atlas.mongodb.com/reference/microsoft-azure/#microsoft-azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/#microsoft-azure)。
- en: Atlas Tiers
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Atlas套餐
- en: 'To build a database cluster in MongoDB Atlas, you need to select a **tier**.
    A tier is a level of database power that you get from your cluster. When you provision
    your database in Atlas, you are given two parameters: RAM and storage. Depending
    on your selection of these parameters, an appropriate amount of database power
    is provisioned. The cost of your cluster is linked to the selection of RAM and
    storage; a higher selection means a higher cost and a lower selection means a
    lower cost.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在MongoDB Atlas中构建数据库集群，您需要选择一个**套餐**。套餐是您从集群中获得的数据库功率级别。在Atlas中配置数据库时，您会得到两个参数：RAM和存储空间。根据您对这些参数的选择，将配置适当数量的数据库功率。您的集群成本与RAM和存储的选择相关联；更高的选择意味着更高的成本，更低的选择意味着更低的成本。
- en: M0 is the free tier available in MongoDB Atlas, which gives you shared RAM with
    storage of 512 MB. It is the tier that we will be using for our learning purposes.
    The free tier is not available in all regions, so if you do not find it in your
    region, select the closest free tier region. The proximity of your database determines
    the latency for your operations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: M0是MongoDB Atlas中的免费套餐，提供512MB的共享RAM和存储空间。这是我们用于学习目的的套餐。免费套餐并非在所有区域都可用，因此如果在您的区域找不到它，请选择最接近的免费套餐区域。数据库的接近程度决定了操作的延迟。
- en: 'Selecting a tier requires an understanding of your database usage and how much
    you would like to spend. Under provisioned databases can exhaust your application''s
    capacity at peak usage and can lead to application errors. Overprovisioned databases
    can help your application perform well but are more expensive. One of the advantages
    of using a cloud database is that you can always modify your cluster size as per
    your needs. But you still need to find what is the optimal capacity for your day-to-day
    database use. Determining the maximum number of concurrent connections is a critical
    decision factor that can help you choose the appropriate MongoDB Atlas tier for
    your use case. Let us look at the different tiers available:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 选择套餐需要了解您的数据库使用情况以及您愿意花费多少。配置不足的数据库可能会在高峰使用时耗尽应用程序的容量，并可能导致应用程序错误。配置过多的数据库可以帮助应用程序表现良好，但成本更高。使用云数据库的优势之一是您可以根据需要随时修改集群大小。但您仍然需要找到适合您日常数据库使用的最佳容量。确定最大并发连接数是一个关键决策因素，可以帮助您为您的用例选择适当的MongoDB
    Atlas套餐。让我们看看不同的可用套餐：
- en: '![Figure 1.2: MongoDB Atlas tier configuration'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2：MongoDB Atlas套餐配置'
- en: '](img/B15507_01_02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_01_02.jpg)'
- en: 'Figure 1.2: MongoDB Atlas tier configuration'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas Pricing
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Capacity planning is essential but estimating the cost of your database cluster
    is important too. We learned that an M0 cluster is free, with minimal resources,
    making it ideal for prototyping and learning purposes. For the paid cluster tiers,
    Atlas charges you on an hourly basis. The total cost is comprised of multiple
    factors, such as the type and number of servers. Let us look at an example to
    understand the cost estimation of an M30 type replica set (three servers) on Atlas.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Cluster Cost Estimation
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us try to understand how to estimate the cost of your MongoDB Atlas cluster.
    Identify the cluster requirements as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Machine type: M30'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of servers: 3 (replica set)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running time: 24 hours a day'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Estimation time period: 1 month'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we have identified our requirements, the estimated cost can be calculated
    as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Cost of running a single M30 server per hour: $0.54'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of hours a server will run: 24 (hours) x 30 (days) = 720'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cost of a single server for a month: 720 x 0.54 = $388.8'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cost of running the three-server cluster: 388.8 x 3 = $1166.4'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, the total cost should come down to $1166.4.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the running cost of your cluster, you should consider the cost of
    additional services such as backups, data transfer, and support contracts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Let us implement our learning in an example scenario through the following exercise.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.01: Setting Up a MongoDB Atlas Account'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB Atlas offers you free registration to set up a free cluster. In this
    exercise, you will create an account by executing the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://www.mongodb.com](https://www.mongodb.com) and click `Start free`.
    The following window appears:![Figure 1.3: MongoDB Atlas home page'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.3: MongoDB Atlas home page'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'You can sign up using your Google account or by providing your details manually
    as can be seen from the following screen. Provide your usage, `Your Work Email`,
    `First Name`, `Last Name`, and `Password` details in the respective fields, select
    the checkbox to agree to the terms of service and click `Get started free`.![Figure
    1.4: The Get started page'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_04.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.4: The Get started page'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'The following window appears in which you can enter your organization and project
    details:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5: Page to enter the organization and project details'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_05.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.5: Page to enter the organization and project details'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you should see the following page, which means your account has been
    successfully created:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6: Confirmation page'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_06.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.6: Confirmation page'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you successfully created your MongoDB account.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas Organizations, Projects, Users, and Clusters
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Atlas enforces a basic structure for your environment. This includes
    the concepts of organizations, projects, users, and clusters. MongoDB provides
    a default organization and a project to help you get started easily. This section
    will teach you what these entities mean and how to set them up.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Organizations
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A MongoDB Atlas organization is the top-level entity in your account, containing
    other elements such as projects, clusters, and users. You need to set up an organization
    first before any other resources.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.02: Setting Up a MongoDB Atlas Organization'
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have successfully created an account on MongoDB Atlas, and in this exercise,
    you will set up an organization based on your preferences:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Log on to your MongoDB account created in *Exercise 1.01*, *Setting Up a MongoDB
    Atlas Account*. To create an organization, select the `Organizations` option from
    your account menu as shown in the following figure:![Figure 1.7: User options
    – Organizations'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_07.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.7: User options – Organizations'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the default organization in the list of organizations. To create
    a new organization, click the `Create New Organization` button in the top-right corner:![Figure
    1.8: Organizations list'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.8: Organizations list'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the organization name in the `Name Your Organization` field. Leave the
    default selection for `Cloud Service` as `MongoDB Atlas`. Click `Next` to proceed
    to the next step:![Figure 1.9: Organization Name'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_09.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.9: Organization Name'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be presented with the following screen:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10: Create Organization page'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_10.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.10: Create Organization page'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: You will see your login as the `Organization Owner`. Leave everything as their
    defaults and click `Create Organization`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have successfully created the organization, the following `Projects`
    screen will appear:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11: Projects page'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_11.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.11: Projects page'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: So, in this exercise, you have successfully created the organization for your
    MongoDB application.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Projects
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A project provides a grouping of clusters and users for a specific purpose;
    for example, you would like to segregate your lab, demo, and production environments.
    Similarly, you may like a different network, region, and user setup for different
    environments. Projects allow you to do this grouping as per your own organizational
    needs. In the next exercise, you will create a project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.03: Creating a MongoDB Atlas Project'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will set up a project on MongoDB Atlas using the following
    steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created an organization in *Exercise 1.02*, *Setting Up MongoDB
    Atlas Organization*, the `Projects` screen will appear on your next login. Click
    `New Project`:![Figure 1.12: Projects page'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_12.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.12: Projects page'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide a name for your project on the `Name Your Project` tab. Name the project
    `myMongoProject`. Click `Next`:![Figure 1.13: Create a Project page'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_13.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.13: Create a Project page'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Create Project`. The `Add Members and Set Permissions` page is not mandatory,
    so leave it as the default. Your name should appear as the `Project Owner`:![Figure
    1.14: Add Members and Set Permissions for the project'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_14.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.14: Add Members and Set Permissions for the project'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Your project is now set up. A cluster setup splash screen appears as shown
    in the following figure:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15: Clusters page'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_15.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.15: Clusters page'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created a project, you can create your first MongoDB cloud deployment.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Clusters
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A MongoDB cluster is the term used for a database replica set or shared deployments
    in MongoDB Atlas. A cluster is a distributed set of servers used for data storage
    and retrieval. A MongoDB cluster, at the minimum level, is a three-node replica
    set. In a sharded environment, a single cluster may contain hundreds of nodes/servers
    containing different replica sets with each replica set comprised of at least
    three nodes/servers.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1.04: Setting Up Your First Free MongoDB Cluster on Atlas'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will set up your first MongoDB replica set on Atlas free
    tier (M0). Here are the steps to do this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)
    and log on to your account using the credentials that you used in *Exercise 1.01*,
    *Setting Up a MongoDB Atlas Account*. The following screen appears:![Figure 1.16:
    Clusters page'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_16.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.16: Clusters page'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Build a Cluster` to configure your cluster:![Figure 1.17: Build a Cluster
    page'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_17.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.17: Build a Cluster page'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'The following cluster options will appear:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18: Available cluster options'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_18.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.18: Available cluster options'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Shared Clusters` option marked as `FREE` as shown in the previous
    figure.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A cluster configuration screen will be presented to select different options
    for your cluster. Select the cloud provider of your choice. For this exercise,
    you will be using AWS, as shown here:![Figure 1.19: Selecting the cloud provider
    and region'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_19.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.19: Selecting the cloud provider and region'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Recommended region` that is closest to your location and is free.
    In this case, you are selecting `Sydney`, as can be seen from the following figure:![Figure
    1.20: Selecting the recommended region'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_20.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.20: Selecting the recommended region'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'On the region selection page, you will see your cluster setting as per your
    selection. The `Cluster Tier` will be `M0 Sandbox(Shared RAM, 512 MB storage)`,
    `Additional Settings` will be `MongoDB 4.2 No Backup`, and `Cluster Name` will
    be `Cluster0`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21: Additional Settings for the cluster'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_21.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.21: Additional Settings for the cluster'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the selections are made correctly in the preceding step so that
    the cost appears as `FREE`. Any selections different from what is recommended
    in the previous steps may add costs for your cluster. Click on `Create Cluster`:![Figure
    1.22: FREE tier notification'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_22.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.22: FREE tier notification'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'A success message of `Your cluster is being created…` appears on the screen.
    It generally takes a few minutes to set up the cluster:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23: MongoDB Cluster getting created'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_23.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.23: MongoDB Cluster getting created'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few minutes, you should see your new cluster, as shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24: MongoDB cluster created'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_24.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.24: MongoDB cluster created'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a new cluster.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Your MongoDB Atlas Cluster
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to connect to your MongoDB Atlas cluster running on the
    cloud:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://account.mongodb.com/account/login](https://account.mongodb.com/account/login).
    The following window appears:![Figure 1.25: MongoDB Atlas login page'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_25.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.25: MongoDB Atlas login page'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide your email address and click `Next`:![Figure 1.26: MongoDB Atlas Login
    page (password)'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_26.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.26: MongoDB Atlas Login page (password)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Now type your `Password` and click `Login`. The `Clusters` window appears as
    shown here:![Figure 1.27: MongoDB Atlas Clusters screen'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_27.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.27: MongoDB Atlas Clusters screen'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `CONNECT` button under `Cluster0`. It will open a modal screen as follows:![Figure
    1.28: MongoDB Atlas modal screen'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_28.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.28: MongoDB Atlas modal screen'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The first step before you connect to the cluster is to whitelist your IP address.
    MongoDB Atlas has a built-in security feature that is enabled by default, which
    blocks connectivity to the database from everywhere. So, the whitelisting of the
    client IP is necessary to connect to the database.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Add Your Current IP Address` to whitelist your IP as shown here:![Figure
    1.29: Adding your current IP address'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_29.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.29: Adding your current IP address'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen will show your current IP address; just click on the `Add IP Address`
    button. If you wish to add more IPs to the whitelist, you can add them manually
    by clicking the `Add a Different IP Address` option (see preceding figure):![Figure
    1.30: Adding your current IP address'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_30.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.30: Adding your current IP address'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message appears once the IP is whitelisted:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31: IP whitelisted message'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_31.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.31: IP whitelisted message'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new MongoDB user, provide a `Username` and `Password` for a new
    user and click on the `Create Database User` button to create a user as shown
    here:![Figure 1.32: Creating a MongoDB user'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_32.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.32: Creating a MongoDB user'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the details are successfully updated, the following screen appears:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.33: MongoDB user created screen'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_33.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.33: MongoDB user created screen'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'To choose a connection method, click on the `Choose a connection method` button.
    Select the Connect with the mongo shell option as shown here:![Figure 1.34: Choosing
    the connection type'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_34.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.34: Choosing the connection type'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install the mongo shell by selecting the options for your workstation/client
    machine as shown in the following screenshot:![Figure 1.35: Installing the mongo
    shell'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_35.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.35: Installing the mongo shell'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: The mongo shell is a command-line client to connect to your Mongo server(s).
    You will be using this client throughout the book, so it is imperative that you
    install it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the mongo shell installed, run the connection string you grabbed
    in the preceding step to connect to your database. When prompted, enter the password
    that you used for your MongoDB user in the previous step:![Figure 1.36: Installing
    the mongo shell'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_01_36.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.36: Installing the mongo shell'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything goes well, you should see the mongo shell connected to your Atlas
    cluster. Here is a sample output of a connecting string execution:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.37: Output of connecting string execution'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_37.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.37: Output of connecting string execution'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Ignore the warnings seen in *Figure 1.37*. At the end, you should see your
    cluster name and a command prompt. You can run the `show databases` command to
    list the existing database. You should see the two databases that are used by
    MongoDB for administrative purposes. Here is some sample output of the `show databases`
    command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You have successfully connected to your MongoDB Atlas instance.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Elements
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us dive into some very basic elements of MongoDB, such as databases, collections,
    and documents. Databases are basically aggregations of collections, which in turn,
    are made up of documents. A document is the basic building block in MongoDB and
    contains information about the various fields in a key-value format.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB stores data records in documents. A document is a collection of field
    names and values, structured in a **JavaScript Object Notation** (**JSON**)-like
    format. JSON is an easy-to-understand key-value pair format to describe data.
    The documents in MongoDB are stored as an extension of the JSON type, which is
    called BSON (Binary JSON). It is a binary-encoded serialization of JSON-like documents.
    BSON is designed to be more efficient in space than standard JSON. BSON also contains
    extensions that allow the representation of data types that cannot be represented
    in JSON. We will look at these in detail in *Chapter 2*, *Documents and Data Types*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Document Structures
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB documents contain field and value pairs and follow a basic structure,
    as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is an example of a document that contains details about a person:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is another example with some fields and date types from BSON:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following example of a document contains an array and a sub-document. An
    array is a set of values and can be used when you need to store multiple values
    for a key such as hobbies. Sub-documents allow you to wrap related attributes
    in a document against a key, such as an address:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `_id` field shown in the preceding snippet is auto generated by MongoDB
    and is used as a unique identifier for the document. We will learn more about
    this in the upcoming chapters.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Collections
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In MongoDB, documents are stored in collections. Collections are analogous to
    tables in relational databases. You need to use the collection name in your queries
    for operations such as insert, retrieve, delete, and so on.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Understanding MongoDB Databases
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A database is a container for collections grouped together. Each database has
    several files on the filesystem that contain database metadata and the actual
    data stored in collections. MongoDB allows you to have multiple databases, and
    each of these databases can have various collections. In turn, each of these collections
    can have numerous documents. This is illustrated in the following figure, which
    shows an events database that contains collections for different event-related
    fields, such as *Person*, *Location*, and *Events*; these, in turn, contain various
    documents with all the granular data:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.38: Pictorial representation of a MongoDB database'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_38.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.38: Pictorial representation of a MongoDB database'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Database
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a database in MongoDB is very simple. Execute the `use` command in
    the mongo shell as follows, by replacing `yourDatabaseName` with your own choice
    of database name:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the database does not exist, Mongo will create the database and will switch
    the current database to the new database. If the database exists, Mongo will refer
    to the existing database. Here is the output of the last command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Naming conventions and using logical names always help even if you are working
    on a learning project. The project name is meant to be replaced by something more
    meaningful for you and understandable for later use. This rule applies to the
    name of any asset that we create, so try to use logical names.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Collection
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `createCollection` command to create a collection. This command
    allows you to utilize different options for your collection, such as a capped
    collection, validation, collation, and so on. Another way to create a collection
    is by just inserting a document in a non-existent collection. In such a case,
    MongoDB checks whether the collection exists, and if not, it will create the collection
    before inserting the documents passed. We will try to utilize both methods to
    create a collection.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the collection explicitly, use the `createCollection` operation in
    the syntax as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following snippet, we are creating a capped collection with a maximum
    of 5 documents, with each document having a size limit of 256 bytes. The capped
    collection works like a circular queue, which means older documents will go out
    to make space for the latest inserts when the maximum size is reached:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the output of the `createCollection` command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Do not worry about the preceding options much as none of them are mandatory.
    If you do not need to set any of these, then your `createCollection` command can
    be simplified as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of this command should look as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a Collection Using Document Insertion
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You do not need to create a collection before inserting documents. MongoDB
    creates a collection if it does not exist on the first document insertion. You
    would use this method as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of your command should look like this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding output returns the number of documents inserted into the collection.
    As you have inserted a document in a non-existent collection, MongoDB must have
    created the collection for us before inserting this document. To confirm that,
    display your collections list using the following command:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of your command should display the list of collections in your database,
    something like this:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating Documents
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you must have noticed in the previous section, we used the `insert` command
    to put a document in a collection. Let us look at a couple of variants of `insert` commands.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a Single Document
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `insertOne` command is used to insert one document at a time, as in the
    following syntax:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `insertOne` operation returns the `_id` value of the newly inserted document.
    Here is the output of the `insertOne` command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '`insertedId` is the unique ID for the document that is inserted, and it will
    not be the same for you as mentioned in the output.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Multiple Documents
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `insertMany` command inserts multiple documents at once. You can pass an
    array of documents to the command as mentioned in the following snippet:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output returns the `_id` values of all the newly inserted documents:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Fetching Documents from MongoDB
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MongoDB provides the `find` command to fetch documents from a collection. This
    command is useful to check whether your inserts are actually saved in the collections.
    Here is the syntax for the `find` command:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The command takes two optional parameters: `query` and `projection`. The `query`
    parameter allows you to pass a document to apply filters during the `find` operation.
    The `projection` parameter allows you to pick desired attributes from the returned
    documents instead of all the attributes. When no parameter is passed in the `find`
    command, then all the documents are returned.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Formatting the find Output Using the pretty() Method
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `find` command returns multiple records, it is sometimes hard to read
    them as they are not formatted properly. MongoDB provides the `pretty()` method
    at the end of the `find` command to get the returned records in a formatted manner.
    To see it in action, insert a couple of records in a collection called `records`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It should generate an output as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'First, fetch these records using the `find` command without the `pretty` method:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It should return an output as shown here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, run the same `find` command using the `pretty` method:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It should return the same records, but in a beautifully formatted way as shown
    here:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Clearly, the `pretty()` method can be quite useful when you are looking at multiple
    or nested documents, as the output is more easily readable.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1.01: Setting Up a Movies Database'
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are one of the founders of a company that builds software about movies from
    all over the world. Your team does not have much database administration skills
    and there is no budget to hire a database administrator. Your task is to provide
    a deployment strategy and basic database schema/structure and set up the movies database.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Connect to your database.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a movies database named `moviesDB`.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a movies collection and insert the following sample data: [https://packt.live/3lJXKuE](https://packt.live/3lJXKuE).'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Check whether the documents are inserted by fetching the documents.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `awards` collection with a few records using the following data:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Check whether your inserts have saved the documents in the collection as desired
    by fetching the documents.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor461).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter by covering the fundamentals of data, databases, RDBMS,
    and NoSQL databases. You learned the differences between RDBMS and NoSQL databases,
    and how to decide which database is a good fit for a given scenario. You learned
    that MongoDB can be used as self-managed or as DbaaS, set up your account in MongoDB
    Atlas, and reviewed MongoDB deployment on different cloud platforms and how to
    estimate its cost. We concluded the chapter with the MongoDB structure and its
    basic components, such as databases, collections, and documents. In the next chapter,
    you will utilize these concepts to explore MongoDB components and its data model.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
