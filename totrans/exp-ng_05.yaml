- en: Implementing Angular Routing and Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application navigation is one of the core functionalities for any website or
    application. Along with defining the routes or path, navigation helps users to
    reach the application pages, explore functionalities, and is also very useful
    for SEO purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn all about the Angular routing and navigation.
    Here's a detailed list of functionalities we will learn and implement in routing
    and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the following aspects of routing and navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing and configuring the router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the Router Outlet, `routerLink`, `routerLinkActive`, and `base href`
    in the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom component routes and child routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom component routes with inner child routes--same page loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demo application routing and navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the end of the chapter, we will able to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create `app.routes` for the application and set up the required modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement and enable `RouterModule.forRoot`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the Router Outlet and the `routerLink` directive for binding the route
    path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable `RouterLinkActivated` to find the current active state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how the Route State works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand and implement Route Lifecycle Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom component routes and child routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement location strategy for our web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a sample application routes and navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First things first, take a look at the demo application routing and navigation
    we will be developing as part of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d473f165-7a2c-437b-942c-9fbcf2978fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: As part of the demo application, we will developing routes for About Us, Services,
    and Products components.
  prefs: []
  type: TYPE_NORMAL
- en: Services components will have inner child routes. Products component will make
    use of `ActivatedRoute` for getting route `params`. We will also implement navigation
    using the JavaScript event `onclick`.
  prefs: []
  type: TYPE_NORMAL
- en: Importing and configuring the router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to define and implement the navigation strategy, we will make use of
    router and `RouterModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to update our `app.module.ts` file to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import `RouterModule` and routes from Angular router module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the application components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the routes with path and component details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `RouterModule.forRoot` (`appRoutes`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each route definition can have the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path`: The URL we want to display in the browser address bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`component`: Corresponding component that will hold the view and application
    logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redirectTo` (optional): This indicates the URL we want the user to get redirected
    from this path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pathMatch` (optional): A redirect route requires `pathMatch`--it tells the
    router how to match a URL to the path of a route. `pathMatch` can take either
    value as `full` or `prefix`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will now import and configure the router in our `NgModule`. Take a look
    at the updated `app.module.ts` file with complete implementation of the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing `Routes` and `routerModule` from `@angular/router`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required modules `NgModule`, `BrowserModule`, and `FormsModule`
    from the respective Angular libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing custom defined components--`About`, `Services`, and `Products`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining a const `appRoutes` in which we are specifying paths for our
    components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating our routes through `appRoutes` and defining custom path for
    various URL router links by passing various parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have learned how to import and configure our `NgModule` for implementing
    routes, in next section we will learn about the building blocks of router.
  prefs: []
  type: TYPE_NORMAL
- en: Building blocks of router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn the important building blocks of the router.
    The important building blocks are `base href`, `Router Outlet`, `routerLink`,
    and `routerLinkActive`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now analyze each of the building blocks of the router library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base href`: We must set the `base` directive in the `index.html` page. *This
    is a mandatory step.* Without the `base` tag, the browser may not be able to load
    resources (images, CSS, and scripts) when *deep linking* into the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our application, we need to define the `base href` inside the `<head>` tag
    in our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Defining the** `router-outlet`: The `router-outlet` directive is the placeholder
    for containing the loaded data of the view. Inside the `router-outlet` directive,
    the component views will be loaded and displayed. Place the directive inside the
    template in the `app.component.html` to render the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Using multiple** `router-outlet`: In certain cases, we will want to load
    data to different view containers instead of our `router-outlet`. We can easily
    add multiple Router Outlets to a page and assign them names so that we can render
    respective data inside them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the data of the view inside the named `router-outlet`, we define the
    key while defining the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating** `RouterLink`: This indicates the URL or the link address that
    could arrive directly from the browser address bar. Bind and associate a link
    path with the anchor tag: for example, `/about` or `/products`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The general syntax for binding and associating an anchor tag is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`RouterLinkActive` **for active state links**: `routerLinkActive` is used to
    highlight the current active link. Using `routerLinkActive`, we can easily highlight
    the link that is currently active to better suit our applications look and feel:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the style sheet, add our custom style class, `active-state`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Building dynamic** `routerLink`: We can pass dynamic values or parameters
    by binding them with the `routerLink` directive to pass custom data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, in most applications, we use a unique identifier for categorizing
    data--for example, `http://hostname/product/10` will be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The same preceding code dynamically can be rendered in our template view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Passing array and datasets with** `routerLink` **directive**: We can pass
    data arrays along with the `routerLink`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: About router LocationStrategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to define the URL behavior of the application. Based on application
    preferences, we can customize how the URL should be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Using `LocationStrategy`, we can define how we want our application routing
    system to behave.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular, through `LocationStrategy`, provides two types of routing strategies
    we can implement in our application. Let''s understand the different route strategy
    options we can use in our Angular applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PathLocationStrategy`: This is the default HTML style routing mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying `PathLocationStrategy` is the common routing strategy which involves
    making request/calls to the server side on every change detected. Implementing
    this strategy will allow us to create clean URLs and also bookmark the URLs easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a route using `PathLocationStrategy` is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`HashLocationStrategy`*:* This is the hash URL style. In most modern web applications,
    we see hash URLs being used. This has a major advantage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The client doesn''t make the server calls or requests when the information
    after `#` changes; hence there are fewer server calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining and setting the `LocationStrategy` in our application: In the `app.module.ts`
    file under `providers`, we need to pass `LocationStrategy` and tell the router
    to `useClass` as `HashLocationStrategy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `app.module.ts`, import and use `LocationStrategy` and mention that we want
    to use `HashLocationStategy`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have injected `LocationStrategy` in our providers
    and we are explicitly mentioning Angular to use `HashLocationStrategy`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Angular router implements `PathLocationStrategy`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the error state - wildcard route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to set up the error messages for page not found or 404 pages. We can
    use the `ErrorPageNotFoundComponent` component to display the page not found or
    error messages for paths that are unknown to the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, with all the information about how to use the router with various
    aspects, let''s add all of them to our `app.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code and break it down into key functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined the `routerLink` attribute to enable the navigation when a user clicks
    on the anchor links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We implemented the `routerLinkActive` attribute to highlight the current/active
    link, that is, the link that the user has clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We defined a placeholder for `<router-outlet>`, which will hold the data from
    different views--depending on which link was clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, when we launch the application, we will see the resulting output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/529ba97c-a27a-4980-9d5a-8a0f89e6ef56.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! So far, so good. Let's add the Router Guards functionality now.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to integrate Route Guards to implement
    controlled navigation between various components.
  prefs: []
  type: TYPE_NORMAL
- en: Route Guards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route Guards let you control various stages of a route navigation. While navigating
    from one component to another, we need to make sure that the data that will be
    displayed is authorized for the user, and if not, cancel the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Router Guard can return an `Observable<boolean>` or a `Promise<boolean>`,
    and the router will wait for Observable to resolve to either true or false:'
  prefs: []
  type: TYPE_NORMAL
- en: If the Route Guard returns true, it will proceed with the navigation and display
    the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Route Guard returns false, it will abort/cancel the navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are various Route Guards we can use either independently or in combinations.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`canActivate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canActivateChild`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canDeactivate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resolve`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canLoad`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The guard function can accept parameters to make a better decision. The parameters
    we can pass are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`component`: The custom components directives we created: for example, `Products`,
    `Services`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route`: `ActivatedRouteSnapshot` is the future route that will be activated
    if the guard passes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: `RouterStateSnapshot` is the future Route State if the guard passes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canActivate`: This guards the component--think of this as a sanitize function
    whose job is similar to that of a bouncer outside a famous pub. Ensure that all
    the necessary criteria are met before a route can be activated. We need to import
    the `canActivate` module from the router and call the function in the component
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the code snippet for an all-purpose sanity service `check-credentials.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you want to redirect users without any validations or business rules, use
    the navigate function instead of `canActivate`.
  prefs: []
  type: TYPE_NORMAL
- en: '`canActivateChild`: This guards the child components*--*remember in previous
    section, we created components routes along with child routes? Yes, now we want
    to make sure that we guard them as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canActivateChild` function is similar to `canActivate` with a key difference
    that this function protects the child routes of the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a sample code for using the `canActivateChild` function inside
    a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`canDeactivate`: This handles any unsaved changes in the page*--*many times
    when a user tries to navigate away from a page having unsaved changes, we need
    to inform the user about the pending changes and take confirmation on whether
    the user wants to save their work or proceed without saving.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s where `canDeactivate` comes into picture. The following is the code
    snippet for a service, which implements the `canDeactivate` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`Resolve`: This performs route data retrieval before route activation--`Resolve`
    allows us to prefetch data retrieval from the service before we activate a route
    and component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the code snippet for how we can use the `Resolve` function
    and get the data from service before the route is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`canLoad`: This guards the module even before loading the module*--*using `canActivate`,
    we can redirect the unauthorized user to other landing pages, but in those cases,
    the module gets loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can avoid the loading of the module using the `canLoad` function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about defining the routes for components
    and child components. We will learn to create a multi-level hierarchy of components.
  prefs: []
  type: TYPE_NORMAL
- en: Custom component routes and child routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, so far we have learned about the various usage of the
    router; it's now time to use all our knowledge to put together a sample demo application
    using all the routing examples. We will now create a custom component and define
    its route file with child routes.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an unordered list of items called Products, which will have linked
    list items that are child products. Clicking on the respective product link, the
    user will be displayed the product details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application navigation plan looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/675cb239-5df0-4dcb-bfa5-13149826202c.png)'
  prefs: []
  type: TYPE_IMG
- en: We have in previous sections learned to define and create routes in `NgModule`.
    We can also, alternatively, define a separate `app.route.ts` file and place all
    the routing details inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `app.route.ts` file and add the following code snippet to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We import our component into the `app.routes.ts` file and then define the routes
    with `productRoutes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time we create our `product.routes.ts` file with path definitions
    for our products. The following is the code for doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining two paths in the `products.routes.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path `products` will point to `ProductsComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path `products/:id` path that translates to `products/10` will be mapped
    to `ProductsDetailsComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it's time to create our components--`ProductsComponent` and `ProductsDetailsComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the `ProductsComponent` class in the `products.components.ts`
    file, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We have created three product links with the `routerLink` directive; clicking
    on these links will get us mapped to the path we created in the `products.route.ts`
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have created a button, which has a `navigateToServices` event, and in the
    `ProductsComponent` class, we implement the method to navigate to the Services
    page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have created a `routerLink` to handle each product ID, and the respective
    data will be loaded in `<router-outlet>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create `ProductsDetailsComponent` in `products-details.components.ts`
    under the `products` folder using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the analysis of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the product link, the `id` gets mapped and its respective
    product details are displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are importing the required modules, `Component` and `OnInit`, from the `@angular/core`
    library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are importing the required modules, `ROUTER_DIRECTIVES` and `ActivatedRoute`
    from the `angular/router` library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are exporting the `ProductsDetailsComponent` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are injecting `ActivatedRoute` in the constructor method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are defining the `ngOnInIt` method which will be called on the page load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the `ActivatedRoute` service which provides a `params` `Observable`
    which we can subscribe to get the route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using `this.route.params.subscribe` to map the parameters passed in the
    URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameter has the `id` of the selected/clicked product which we are assigning
    to the variable `this.selectedId`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All set so far? Great.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to update our `app.module.ts` file with the new components and
    their declarations. The updated `app.module.ts` will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Alright. Now, let's test drive the application we have made so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how our application should behave at this stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/50883655-dd87-4758-aacb-4e37447cb411.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows when the user clicks on any particular product, the
    application will take the user to the respective product listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52cdecfc-5e6e-4214-bc58-1142f3622c6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom component routes with inner child routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, when the user clicks on product links, the user is
    navigated to a new path. In this example, you will learn how to create custom
    components and child routes and display the view inside the same path; that is,
    inner child routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extending the same example, take a look at the application navigation plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7991fcb-17a6-4b42-b902-cd6494d93356.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start by defining the route definitions in the `service.routes.ts` file.
    Refer to the following code for route definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we are creating path services, and inside the
    same path, we are creating multi-level child routes, which all belong to the same
    URL hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component navigation route definition is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/services`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/services/web-technologies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/services/web-technologies/angular2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create our three new components for our services :'
  prefs: []
  type: TYPE_NORMAL
- en: '`ServicesComponent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServicesChildComponent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServicesInnerChildComponent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that adding the `<router-outlet>` directive is important in parent views;
    otherwise, it will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create our Service component. For `ServicesComponent`, create
    a new file called `services.component.ts` and add the following code snippet to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Quick notes on the preceding code follow:'
  prefs: []
  type: TYPE_NORMAL
- en: We have defined a unordered list `<ul>` of items `<li>` inside the `ServicesComponent`
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the list items, we are attaching `routerLink` attribute to link
    the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    child component view template to be placed inside the parent component view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have our parent `ServicesComponent` created and ready. Now it''s time to
    create the child that is the inner component: `ServicesChildComponent.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file called `services-child.component.ts` and add the following
    code snippet to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Quick notes on the preceding code follow:'
  prefs: []
  type: TYPE_NORMAL
- en: We have defined a title and an anchor tag `<a>` and added `routerLink` and `routerLinkActive`
    attributes to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the anchor tag, we are attaching added `routerLink` and `routerLinkActive`
    attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    inner child component view template to be placed inside the child component view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following hierarchy diagram, which depicts the component
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/58d49976-3ab6-4442-8952-82783f6d33ae.png)'
  prefs: []
  type: TYPE_IMG
- en: So far we have created a parent component, `ServicesComponent`, and it's child
    component, `ServicesChildComponent`, which have a hierarchy of parent-child relation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to create the third-level component, `ServicesInnerChildComponent`.
    Create a new file named `services-child.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Alright, now that we defined all our components and child components and their
    respective route definitions, it's time to see all of them in action. The following
    screenshots show you how the navigation routes work for the services component
    and child components.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a272ae6-6784-43ad-8664-85661075a836.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Web Technologies link will show the user child component data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/374256c1-7c0f-4d48-af2c-4869c5af0b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Angular Services link will show the user child component data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/222d5b54-6968-4386-8234-b0a4eecb1a86.png)'
  prefs: []
  type: TYPE_IMG
- en: We have our components working individually very well. In next section we will
    integrate them all into one single working application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating all the components together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have defined and implemented routes for the individual components, `About`,
    `Services`, and `Products`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will integrate them all into one single `NgModule` so we
    have all routes working together as a single page application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add all the individual routes of the `About`, `Services`, and `Products`
    components to our `app.routes.ts` and the updated `app.route.ts` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We have updated the `app.routes.ts` file to include all the routes of the components
    as well as the child components.
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to update the `NgModule` to import all the components as well
    the updates routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `app.module.ts` file is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Important things to note in the preceding code are:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing all the components we created so far, namely `About`, `Services`,
    and `Products`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also importing the routes `app.routes.ts` we created for each of the
    components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are injecting `LocationStrategy` and explicitly mentioning it to `useClass
    HashLocationStrategy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have learned about `router`, `routerModule`, and utilities provided by Angular
    for implementing the routing mechanism of our applications. We learned about different
    types of `LocationStrategy` we can use to define how the URLs should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We created components having route paths and route paths for child components,
    and we have learned to navigate using JavaScript events as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will stitch all the code together to make our demo application.
  prefs: []
  type: TYPE_NORMAL
- en: Demo application routing and navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come a long way in learning all about the Angular router. We have seen
    various tips and tricks of how to use the router module. It's now fun time as
    we put together all the pieces we have learned so far into a neat, clean application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows our final application filesystem structure :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4ab53ed1-f7dc-42e9-9b9c-9a4ecc4b2ba5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will add the main navigation menu and some basic styling to jazz up our
    application in the `app.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final `app.routes.ts` file code is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `app.module.ts` file code is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Our application is ready for the grand demo.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshots, we show you the behavior of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we launch the page, we see the landing page. The landing page screenshot
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34d91e6f-784e-44f5-88d2-62ddd5cd8838.png)Landing page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s click on the Services link. The `routerLink/services` will be activated,
    and the following screen should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a6b5a78d-891c-4b3f-b176-d2bdf881a629.png)Services page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, now we are in the Services page. Now, click on the child component,
    Web Technology Services. The following screen should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d6af39d-ce38-4db7-8acf-a8fb393b4f6b.png)Services child page--Web
    Technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: Things are shaping up really well here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now already in the child component--Web Technology Services, and now
    we click one more level down. Let''s click on Angular2 Services. The following
    screen should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cf72bff-e9b5-43fc-b200-795699a0c8fd.png)Web Technologies inner
    child route--Angular2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now click on the Products link. The following screenshot should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/45286ff8-c778-4b2a-9859-a7b592e5236c.png)Products page.'
  prefs: []
  type: TYPE_NORMAL
- en: Alight, now we are in the Products page. Now, click on the All products link
    and navigate to the Services page.
  prefs: []
  type: TYPE_NORMAL
- en: However, the navigation happened using the JavaScript event and not the `routerLink`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c409adbe-54e4-4fd8-afe3-483b81153f8b.png)Product details page.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular routing is one of the core functionalities of any web application. In
    this chapter, we discussed, designed, and implemented our Angular routing in detail.
    We also discussed how to implement and enable `RouterModule.forRoot`. Additionally,
    we defined Router Outlet and `routerLink` directive to bind the route path and
    enabled `RouterLinkActivated` to find the current active state.
  prefs: []
  type: TYPE_NORMAL
- en: We focused on how route state works, and understood and implemented Route Lifecycle
    Hooks. We outlined how to create custom component routes and child routes and
    how to implement location strategy for our web applications. Finally, we created
    a sample application implementing routes and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about creating directives and implementing
    change detection. You will also learn about directives, different types of directives
    provided by Angular, and also create custom user-defined directives.
  prefs: []
  type: TYPE_NORMAL
- en: You will deep dive into learning how Angular handles the change detection and
    how we can utilize change detection in our apps.
  prefs: []
  type: TYPE_NORMAL
