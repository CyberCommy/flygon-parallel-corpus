- en: Implementing Angular Routing and Navigation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Angular路由和导航
- en: Application navigation is one of the core functionalities for any website or
    application. Along with defining the routes or path, navigation helps users to
    reach the application pages, explore functionalities, and is also very useful
    for SEO purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序导航是任何网站或应用程序的核心功能之一。除了定义路由或路径之外，导航还帮助用户到达应用程序页面，探索功能，并且对于SEO目的也非常有用。
- en: In this chapter, you will learn all about the Angular routing and navigation.
    Here's a detailed list of functionalities we will learn and implement in routing
    and navigation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关Angular路由和导航的所有内容。以下是我们将在路由和导航中学习和实现的功能的详细列表。
- en: 'You will learn the following aspects of routing and navigation:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习以下路由和导航方面：
- en: Importing and configuring the router
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和配置路由器
- en: Enabling the Router Outlet, `routerLink`, `routerLinkActive`, and `base href`
    in the view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中启用路由出口、`routerLink`、`routerLinkActive`和`base href`
- en: Custom component routes and child routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义组件路由和子路由
- en: Custom component routes with inner child routes--same page loading
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有内部子路由的自定义组件路由--同一页面加载
- en: Demo application routing and navigation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示应用程序的路由和导航
- en: 'At the end of the chapter, we will able to do the following things:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够做到以下事情：
- en: Create `app.routes` for the application and set up the required modules
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序创建`app.routes`并设置所需的模块
- en: Implement and enable `RouterModule.forRoot`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现并启用`RouterModule.forRoot`
- en: Define the Router Outlet and the `routerLink` directive for binding the route
    path
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义路由出口和`routerLink`指令以绑定路由路径
- en: Enable `RouterLinkActivated` to find the current active state
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用`RouterLinkActivated`以查找当前活动状态
- en: Understand how the Route State works
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解路由状态的工作原理
- en: Understand and implement Route Lifecycle Hooks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解并实现路由生命周期钩子
- en: Create custom component routes and child routes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义组件路由和子路由
- en: Implement location strategy for our web applications
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的Web应用程序实现位置策略
- en: Create a sample application routes and navigation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例应用程序路由和导航
- en: 'First things first, take a look at the demo application routing and navigation
    we will be developing as part of this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下我们将在本章开发的演示应用程序的路由和导航：
- en: '![](assets/d473f165-7a2c-437b-942c-9fbcf2978fa0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d473f165-7a2c-437b-942c-9fbcf2978fa0.png)'
- en: As part of the demo application, we will developing routes for About Us, Services,
    and Products components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为演示应用程序的一部分，我们将为“关于我们”、“服务”和“产品”组件开发路由。
- en: Services components will have inner child routes. Products component will make
    use of `ActivatedRoute` for getting route `params`. We will also implement navigation
    using the JavaScript event `onclick`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务组件将具有内部子路由。产品组件将使用`ActivatedRoute`来获取路由`params`。我们还将使用JavaScript事件`onclick`来实现导航。
- en: Importing and configuring the router
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和配置路由器
- en: In order to define and implement the navigation strategy, we will make use of
    router and `RouterModule`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义和实现导航策略，我们将使用路由器和`RouterModule`。
- en: 'We need to update our `app.module.ts` file to do the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新我们的`app.module.ts`文件以执行以下操作：
- en: Import `RouterModule` and routes from Angular router module
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Angular路由器模块导入`RouterModule`和路由
- en: Import the application components
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入应用程序组件
- en: Define the routes with path and component details
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义具有路径和组件详细信息的路由
- en: Import `RouterModule.forRoot` (`appRoutes`)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入`RouterModule.forRoot`（`appRoutes`）
- en: 'Each route definition can have the following keys:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由定义可以具有以下键：
- en: '`path`: The URL we want to display in the browser address bar.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：我们希望在浏览器地址栏中显示的URL。'
- en: '`component`: Corresponding component that will hold the view and application
    logic.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component`：将保存视图和应用程序逻辑的相应组件。'
- en: '`redirectTo` (optional): This indicates the URL we want the user to get redirected
    from this path.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirectTo`（可选）：这表示我们希望用户从此路径重定向的URL。'
- en: '`pathMatch` (optional): A redirect route requires `pathMatch`--it tells the
    router how to match a URL to the path of a route. `pathMatch` can take either
    value as `full` or `prefix`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathMatch`（可选）：重定向路由需要`pathMatch`--它告诉路由器如何将URL与路由的路径匹配。`pathMatch`可以取`full`或`prefix`的值。'
- en: 'We will now import and configure the router in our `NgModule`. Take a look
    at the updated `app.module.ts` file with complete implementation of the router:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在我们的`NgModule`中导入和配置路由器。看一下更新的`app.module.ts`文件，其中包含了路由器的完整实现：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s analyze the preceding code snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码片段：
- en: We are importing `Routes` and `routerModule` from `@angular/router`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`@angular/router`导入`Routes`和`RouterModule`。
- en: We are importing the required modules `NgModule`, `BrowserModule`, and `FormsModule`
    from the respective Angular libraries.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从各自的Angular库中导入所需的模块`NgModule`，`BrowserModule`和`FormsModule`。
- en: We are importing custom defined components--`About`, `Services`, and `Products`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在导入自定义定义的组件--`About`，`Services`和`Products`。
- en: We are defining a const `appRoutes` in which we are specifying paths for our
    components.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`appRoutes`中定义了一个常量，其中我们为我们的组件指定了路径。
- en: We are creating our routes through `appRoutes` and defining custom path for
    various URL router links by passing various parameters.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`appRoutes`创建我们的路由，并通过传递各种参数为各种URL路由链接定义自定义路径。
- en: Now that we have learned how to import and configure our `NgModule` for implementing
    routes, in next section we will learn about the building blocks of router.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何导入和配置我们的`NgModule`来实现路由，在下一节中我们将学习路由器的构建模块。
- en: Building blocks of router
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器的构建模块
- en: In this section, you will learn the important building blocks of the router.
    The important building blocks are `base href`, `Router Outlet`, `routerLink`,
    and `routerLinkActive`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习路由器的重要构建模块。重要的构建模块包括`base href`，`Router Outlet`，`routerLink`和`routerLinkActive`。
- en: 'Let''s now analyze each of the building blocks of the router library:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析路由器库的每个构建模块：
- en: '`base href`: We must set the `base` directive in the `index.html` page. *This
    is a mandatory step.* Without the `base` tag, the browser may not be able to load
    resources (images, CSS, and scripts) when *deep linking* into the app.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base href`：我们必须在`index.html`页面中设置`base`指令。*这是一个强制性步骤。*没有`base`标签，浏览器可能无法在*深度链接*到应用程序时加载资源（图像、CSS和脚本）。'
- en: 'In our application, we need to define the `base href` inside the `<head>` tag
    in our `index.html` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们需要在`index.html`文件的`<head>`标签中定义`base href`：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Defining the** `router-outlet`: The `router-outlet` directive is the placeholder
    for containing the loaded data of the view. Inside the `router-outlet` directive,
    the component views will be loaded and displayed. Place the directive inside the
    template in the `app.component.html` to render the data:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义** `router-outlet`：`router-outlet`指令是包含视图加载数据的占位符。在`router-outlet`指令内，组件视图将被加载和显示。将该指令放在`app.component.html`模板中以呈现数据：'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Using multiple** `router-outlet`: In certain cases, we will want to load
    data to different view containers instead of our `router-outlet`. We can easily
    add multiple Router Outlets to a page and assign them names so that we can render
    respective data inside them:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用多个** `router-outlet`：在某些情况下，我们希望将数据加载到不同的视图容器而不是我们的`router-outlet`中。我们可以轻松地向页面添加多个Router
    Outlets并为它们分配名称，以便我们可以在其中呈现相应的数据：'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To load the data of the view inside the named `router-outlet`, we define the
    key while defining the route:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载视图数据到命名的`router-outlet`中，我们在定义路由时定义键：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Creating** `RouterLink`: This indicates the URL or the link address that
    could arrive directly from the browser address bar. Bind and associate a link
    path with the anchor tag: for example, `/about` or `/products`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The general syntax for binding and associating an anchor tag is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`RouterLinkActive` **for active state links**: `routerLinkActive` is used to
    highlight the current active link. Using `routerLinkActive`, we can easily highlight
    the link that is currently active to better suit our applications look and feel:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the style sheet, add our custom style class, `active-state`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**Building dynamic** `routerLink`: We can pass dynamic values or parameters
    by binding them with the `routerLink` directive to pass custom data.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, in most applications, we use a unique identifier for categorizing
    data--for example, `http://hostname/product/10` will be written as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The same preceding code dynamically can be rendered in our template view:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Passing array and datasets with** `routerLink` **directive**: We can pass
    data arrays along with the `routerLink`:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: About router LocationStrategy
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to define the URL behavior of the application. Based on application
    preferences, we can customize how the URL should be rendered.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Using `LocationStrategy`, we can define how we want our application routing
    system to behave.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular, through `LocationStrategy`, provides two types of routing strategies
    we can implement in our application. Let''s understand the different route strategy
    options we can use in our Angular applications:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`PathLocationStrategy`: This is the default HTML style routing mechanism.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying `PathLocationStrategy` is the common routing strategy which involves
    making request/calls to the server side on every change detected. Implementing
    this strategy will allow us to create clean URLs and also bookmark the URLs easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a route using `PathLocationStrategy` is given as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`HashLocationStrategy`*:* This is the hash URL style. In most modern web applications,
    we see hash URLs being used. This has a major advantage.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The client doesn''t make the server calls or requests when the information
    after `#` changes; hence there are fewer server calls:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Defining and setting the `LocationStrategy` in our application: In the `app.module.ts`
    file under `providers`, we need to pass `LocationStrategy` and tell the router
    to `useClass` as `HashLocationStrategy`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `app.module.ts`, import and use `LocationStrategy` and mention that we want
    to use `HashLocationStategy`, as shown in the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we have injected `LocationStrategy` in our providers
    and we are explicitly mentioning Angular to use `HashLocationStrategy`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Angular router implements `PathLocationStrategy`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Handling the error state - wildcard route
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to set up the error messages for page not found or 404 pages. We can
    use the `ErrorPageNotFoundComponent` component to display the page not found or
    error messages for paths that are unknown to the router:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this stage, with all the information about how to use the router with various
    aspects, let''s add all of them to our `app.component.ts` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s analyze the preceding code and break it down into key functionalities:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: We defined the `routerLink` attribute to enable the navigation when a user clicks
    on the anchor links
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We implemented the `routerLinkActive` attribute to highlight the current/active
    link, that is, the link that the user has clicked
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We defined a placeholder for `<router-outlet>`, which will hold the data from
    different views--depending on which link was clicked
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, when we launch the application, we will see the resulting output, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/529ba97c-a27a-4980-9d5a-8a0f89e6ef56.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: Awesome! So far, so good. Let's add the Router Guards functionality now.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to integrate Route Guards to implement
    controlled navigation between various components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Route Guards
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route Guards let you control various stages of a route navigation. While navigating
    from one component to another, we need to make sure that the data that will be
    displayed is authorized for the user, and if not, cancel the navigation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'A Router Guard can return an `Observable<boolean>` or a `Promise<boolean>`,
    and the router will wait for Observable to resolve to either true or false:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: If the Route Guard returns true, it will proceed with the navigation and display
    the view
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Route Guard returns false, it will abort/cancel the navigation
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are various Route Guards we can use either independently or in combinations.
    They are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`canActivate`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canActivateChild`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canDeactivate`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resolve`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canLoad`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The guard function can accept parameters to make a better decision. The parameters
    we can pass are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '`component`: The custom components directives we created: for example, `Products`,
    `Services`, and so on.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route`: `ActivatedRouteSnapshot` is the future route that will be activated
    if the guard passes.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: `RouterStateSnapshot` is the future Route State if the guard passes.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canActivate`: This guards the component--think of this as a sanitize function
    whose job is similar to that of a bouncer outside a famous pub. Ensure that all
    the necessary criteria are met before a route can be activated. We need to import
    the `canActivate` module from the router and call the function in the component
    class.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the code snippet for an all-purpose sanity service `check-credentials.ts`
    file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you want to redirect users without any validations or business rules, use
    the navigate function instead of `canActivate`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`canActivateChild`: This guards the child components*--*remember in previous
    section, we created components routes along with child routes? Yes, now we want
    to make sure that we guard them as well.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canActivateChild` function is similar to `canActivate` with a key difference
    that this function protects the child routes of the component.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a sample code for using the `canActivateChild` function inside
    a service:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`canDeactivate`: This handles any unsaved changes in the page*--*many times
    when a user tries to navigate away from a page having unsaved changes, we need
    to inform the user about the pending changes and take confirmation on whether
    the user wants to save their work or proceed without saving.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s where `canDeactivate` comes into picture. The following is the code
    snippet for a service, which implements the `canDeactivate` function:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Resolve`: This performs route data retrieval before route activation--`Resolve`
    allows us to prefetch data retrieval from the service before we activate a route
    and component.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the code snippet for how we can use the `Resolve` function
    and get the data from service before the route is activated:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`canLoad`: This guards the module even before loading the module*--*using `canActivate`,
    we can redirect the unauthorized user to other landing pages, but in those cases,
    the module gets loaded.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can avoid the loading of the module using the `canLoad` function.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about defining the routes for components
    and child components. We will learn to create a multi-level hierarchy of components.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Custom component routes and child routes
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, so far we have learned about the various usage of the
    router; it's now time to use all our knowledge to put together a sample demo application
    using all the routing examples. We will now create a custom component and define
    its route file with child routes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: We will create an unordered list of items called Products, which will have linked
    list items that are child products. Clicking on the respective product link, the
    user will be displayed the product details.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The application navigation plan looks as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/675cb239-5df0-4dcb-bfa5-13149826202c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: We have in previous sections learned to define and create routes in `NgModule`.
    We can also, alternatively, define a separate `app.route.ts` file and place all
    the routing details inside it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `app.route.ts` file and add the following code snippet to the file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We import our component into the `app.routes.ts` file and then define the routes
    with `productRoutes`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time we create our `product.routes.ts` file with path definitions
    for our products. The following is the code for doing so:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s analyze the preceding code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: We are defining two paths in the `products.routes.ts` file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path `products` will point to `ProductsComponent`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path `products/:id` path that translates to `products/10` will be mapped
    to `ProductsDetailsComponent`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it's time to create our components--`ProductsComponent` and `ProductsDetailsComponent`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the `ProductsComponent` class in the `products.components.ts`
    file, and add the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: We have created three product links with the `routerLink` directive; clicking
    on these links will get us mapped to the path we created in the `products.route.ts`
    file
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have created a button, which has a `navigateToServices` event, and in the
    `ProductsComponent` class, we implement the method to navigate to the Services
    page
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have created a `routerLink` to handle each product ID, and the respective
    data will be loaded in `<router-outlet>`
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create `ProductsDetailsComponent` in `products-details.components.ts`
    under the `products` folder using the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s the analysis of the preceding code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the product link, the `id` gets mapped and its respective
    product details are displayed
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are importing the required modules, `Component` and `OnInit`, from the `@angular/core`
    library
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are importing the required modules, `ROUTER_DIRECTIVES` and `ActivatedRoute`
    from the `angular/router` library
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are exporting the `ProductsDetailsComponent` class
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are injecting `ActivatedRoute` in the constructor method
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are defining the `ngOnInIt` method which will be called on the page load
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the `ActivatedRoute` service which provides a `params` `Observable`
    which we can subscribe to get the route parameters
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using `this.route.params.subscribe` to map the parameters passed in the
    URL
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameter has the `id` of the selected/clicked product which we are assigning
    to the variable `this.selectedId`
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All set so far? Great.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to update our `app.module.ts` file with the new components and
    their declarations. The updated `app.module.ts` will be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Alright. Now, let's test drive the application we have made so far.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how our application should behave at this stage:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/50883655-dd87-4758-aacb-4e37447cb411.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows when the user clicks on any particular product, the
    application will take the user to the respective product listing:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52cdecfc-5e6e-4214-bc58-1142f3622c6e.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Custom component routes with inner child routes
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, when the user clicks on product links, the user is
    navigated to a new path. In this example, you will learn how to create custom
    components and child routes and display the view inside the same path; that is,
    inner child routes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Extending the same example, take a look at the application navigation plan:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7991fcb-17a6-4b42-b902-cd6494d93356.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start by defining the route definitions in the `service.routes.ts` file.
    Refer to the following code for route definitions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code snippet, we are creating path services, and inside the
    same path, we are creating multi-level child routes, which all belong to the same
    URL hierarchy.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'The component navigation route definition is shown as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`/services`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/services/web-technologies`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/services/web-technologies/angular2`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create our three new components for our services :'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`ServicesComponent`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServicesChildComponent`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServicesInnerChildComponent`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that adding the `<router-outlet>` directive is important in parent views;
    otherwise, it will throw an error.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create our Service component. For `ServicesComponent`, create
    a new file called `services.component.ts` and add the following code snippet to
    it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Quick notes on the preceding code follow:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: We have defined a unordered list `<ul>` of items `<li>` inside the `ServicesComponent`
    template.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the list items, we are attaching `routerLink` attribute to link
    the URL.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    child component view template to be placed inside the parent component view.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have our parent `ServicesComponent` created and ready. Now it''s time to
    create the child that is the inner component: `ServicesChildComponent.`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file called `services-child.component.ts` and add the following
    code snippet to the file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Quick notes on the preceding code follow:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: We have defined a title and an anchor tag `<a>` and added `routerLink` and `routerLinkActive`
    attributes to it.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the anchor tag, we are attaching added `routerLink` and `routerLinkActive`
    attributes.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    inner child component view template to be placed inside the child component view.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following hierarchy diagram, which depicts the component
    structure:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/58d49976-3ab6-4442-8952-82783f6d33ae.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: So far we have created a parent component, `ServicesComponent`, and it's child
    component, `ServicesChildComponent`, which have a hierarchy of parent-child relation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to create the third-level component, `ServicesInnerChildComponent`.
    Create a new file named `services-child.component.ts`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Alright, now that we defined all our components and child components and their
    respective route definitions, it's time to see all of them in action. The following
    screenshots show you how the navigation routes work for the services component
    and child components.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a272ae6-6784-43ad-8664-85661075a836.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Web Technologies link will show the user child component data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/374256c1-7c0f-4d48-af2c-4869c5af0b4c.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Angular Services link will show the user child component data.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/222d5b54-6968-4386-8234-b0a4eecb1a86.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: We have our components working individually very well. In next section we will
    integrate them all into one single working application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Integrating all the components together
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have defined and implemented routes for the individual components, `About`,
    `Services`, and `Products`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will integrate them all into one single `NgModule` so we
    have all routes working together as a single page application.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add all the individual routes of the `About`, `Services`, and `Products`
    components to our `app.routes.ts` and the updated `app.route.ts` file is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have updated the `app.routes.ts` file to include all the routes of the components
    as well as the child components.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to update the `NgModule` to import all the components as well
    the updates routes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `app.module.ts` file is given as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Important things to note in the preceding code are:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: We are importing all the components we created so far, namely `About`, `Services`,
    and `Products`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also importing the routes `app.routes.ts` we created for each of the
    components.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are injecting `LocationStrategy` and explicitly mentioning it to `useClass
    HashLocationStrategy`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have learned about `router`, `routerModule`, and utilities provided by Angular
    for implementing the routing mechanism of our applications. We learned about different
    types of `LocationStrategy` we can use to define how the URLs should be displayed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: We created components having route paths and route paths for child components,
    and we have learned to navigate using JavaScript events as well.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will stitch all the code together to make our demo application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Demo application routing and navigation
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come a long way in learning all about the Angular router. We have seen
    various tips and tricks of how to use the router module. It's now fun time as
    we put together all the pieces we have learned so far into a neat, clean application.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows our final application filesystem structure :'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4ab53ed1-f7dc-42e9-9b9c-9a4ecc4b2ba5.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: 'We will add the main navigation menu and some basic styling to jazz up our
    application in the `app.component.ts` file:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Our final `app.routes.ts` file code is given as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Our `app.module.ts` file code is given as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Our application is ready for the grand demo.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshots, we show you the behavior of the application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'When we launch the page, we see the landing page. The landing page screenshot
    is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34d91e6f-784e-44f5-88d2-62ddd5cd8838.png)Landing page'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s click on the Services link. The `routerLink/services` will be activated,
    and the following screen should be displayed:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a6b5a78d-891c-4b3f-b176-d2bdf881a629.png)Services page.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, now we are in the Services page. Now, click on the child component,
    Web Technology Services. The following screen should be displayed:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d6af39d-ce38-4db7-8acf-a8fb393b4f6b.png)Services child page--Web
    Technologies.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Things are shaping up really well here.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now already in the child component--Web Technology Services, and now
    we click one more level down. Let''s click on Angular2 Services. The following
    screen should be displayed:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cf72bff-e9b5-43fc-b200-795699a0c8fd.png)Web Technologies inner
    child route--Angular2.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now click on the Products link. The following screenshot should be displayed:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/45286ff8-c778-4b2a-9859-a7b592e5236c.png)Products page.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Alight, now we are in the Products page. Now, click on the All products link
    and navigate to the Services page.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: However, the navigation happened using the JavaScript event and not the `routerLink`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c409adbe-54e4-4fd8-afe3-483b81153f8b.png)Product details page.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular routing is one of the core functionalities of any web application. In
    this chapter, we discussed, designed, and implemented our Angular routing in detail.
    We also discussed how to implement and enable `RouterModule.forRoot`. Additionally,
    we defined Router Outlet and `routerLink` directive to bind the route path and
    enabled `RouterLinkActivated` to find the current active state.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: We focused on how route state works, and understood and implemented Route Lifecycle
    Hooks. We outlined how to create custom component routes and child routes and
    how to implement location strategy for our web applications. Finally, we created
    a sample application implementing routes and navigation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about creating directives and implementing
    change detection. You will also learn about directives, different types of directives
    provided by Angular, and also create custom user-defined directives.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: You will deep dive into learning how Angular handles the change detection and
    how we can utilize change detection in our apps.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
