- en: Chapter 6. Level DB and NoSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover two variations of databases that can be used
    with Node.js; one provides a very lightweight and simple set of features, while
    the other gives us more flexibility and a general-purpose set of features. In
    this chapter, we are going to cover LevelDB and MongoDB
  prefs: []
  type: TYPE_NORMAL
- en: Level DB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things with Node.js is that we use the same language for both
    the front and back end and the same goes for NoSQL databases. The majority of
    them support JSON right off the mark; this is great for anyone using Node.js as
    there is no time spent in making a relational model, turning it into a JSON-like
    structure, passing it to the browser, doing something with it, and reversing the
    process.
  prefs: []
  type: TYPE_NORMAL
- en: With a database that supports JSON natively, you can get right down to business
    and play ball.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google has provided us with a simple hook into a NoSQL database that can be
    installed and can be made ready to use with just one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will see that this will install both `LevelDOWN` and `LevelUP`.
  prefs: []
  type: TYPE_NORMAL
- en: '`LevelDOWN` is the low-level binding to `LevelDB` and `LevelUP` is the simple
    wrapper around this.'
  prefs: []
  type: TYPE_NORMAL
- en: '`LevelDB` is very simple in terms of setup. Once it is installed, we just create
    an instance of `LevelUP` and pass it where we want our database to be stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a fast and simple way to store data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As `LevelDB` is just a simple key/value store, it defaults to string keys and
    string values. This is useful if that''s all the information you wish to store.
    You can also use it as a simple cache store. It has a very simple API, at this
    stage we are only going to focus on four methods: `put`, `get`, `del`, and `createReadStream`;
    it''s pretty obvious what most of them do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Used for | Arguments |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| put | inserting pairs | key, value, callback(error) |'
  prefs: []
  type: TYPE_TB
- en: '| get | fetching pairs | key, callback(error, value) |'
  prefs: []
  type: TYPE_TB
- en: '| del | deleting pairs | key, callback(error) |'
  prefs: []
  type: TYPE_TB
- en: '| createReadStream | fetching many pairs |   |'
  prefs: []
  type: TYPE_TB
- en: 'To insert data once we have created our database, all we need to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the code, we will see that we inserted and retrieved our value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This isn''t our simple JSON structure; however, it''s just a string. To get
    our store to save JSON, all we need to do is to pass the value encoding as an
    option to the database, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can store JSON data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: However, a string can be stored as JSON and we can still pass strings as a value
    and also retrieve it as such.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this example will show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have the simple methods down and we can now move on to `createReadStream`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function returns an object that can be compared to Node.js built in `ReadableStream`.
    For each key/value pair in our database, it will emit a `data` event; it also
    emits other events, such as `error` and `end`. If `error` doesn''t have an event
    listener, then it will propagate, thereby killing your entire process (or domain),
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we put more data in the database we will have multiple `data` events emitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, databases with Node.js can be very simple. If we want something
    a bit more complete we can use another NoSQL database called **MongoDB** – another
    very popular document-based database.
  prefs: []
  type: TYPE_NORMAL
- en: For this set of examples, you can either use a hosted database using a provider
    such as MongoLab (they provide a free tier for development) or you can set up
    a database locally following the instructions at [http://docs.mongodb.org/manual/installation](http://docs.mongodb.org/manual/installation).
  prefs: []
  type: TYPE_NORMAL
- en: We can continue once you have a database to connect to.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB has several modules that can be used with Node.js, the most popular
    one is Mongoose; however, we will be using the core MongoDB module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To use our database, we first need to connect to it. We need to provide the
    client with a connection string, a generic URI with the protocol of `mongodb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a local mongo database running with no credentials you will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The default port is `27017`, so you don't need to specify that; however, it
    is included for completeness.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using MongoLab, they will provide you with a connection string;
    it should be in the format of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Connecting to our database is actually pretty simple. All we need to do is
    provide the driver with a connection string and we get back a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Each set of data in MongoDB is stored in a collection. Once we have a database
    we can fetch a collection to run the operations on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In a collection, we have a few simple methods that hold lots of power, giving
    us a full CRUD "API".
  prefs: []
  type: TYPE_NORMAL
- en: Each document in MongoDB has an id, which is an instance of `ObjectId`. The
    property they use for this id is `_id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save a document we just need to call `save`, it accepts an object or an
    array of objects. A single object in a collection is referred to as a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we call the `save` function with a document that has an ID then the document
    will be updated rather than inserted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have documents in our database, we can query for them, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If no callback is provided to `find` then it will return a cursor; this allows
    us to use methods such as `limit`, `sort`, and `toArray`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pass a query to `find` to limit what is returned. In order to find
    an object by its ID we need to use something, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also filter it by any other property you might use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you have used SQL before, you must have noticed the lack of operators, such
    as `OR`, `AND`, or `NOT`. However, you don't need to worry because mongo provides
    many equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see a complete list here: [http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/).'
  prefs: []
  type: TYPE_NORMAL
- en: All operators are prefixed with the dollar sign, for example `$and`, `$or`,
    `$gt`, and `$lt`.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the specific syntax to use these by looking at the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use an `$or` condition, you need to include it as if it is a property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using a database such as MongoDB gives us more power to retrieve our data and
    create a more feature full software.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have places where we can store our data. On one end we have a simple
    key/value store that provides us with a super-convenient way to store data and
    on the other end we have a feature full database that provides us with a full
    set of query operators.
  prefs: []
  type: TYPE_NORMAL
- en: Both these databases will help us in the next chapters as we move closer to
    creating our full stack application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will cover `Socket.IO`, a real-time communication framework
    built on top of WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
