- en: Ionic Components and Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen what Ionic is and where it fits in the big picture of Mobile
    Hybrid application development. We have also seen how to scaffold an Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will work with Ionic components, the Ionic Grid system,
    and navigation in Ionic. We will look at the various components of Ionic, using
    which we can build apps that provide a great user experience out of the box
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic Grid system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic is a combination of a powerful mobile CSS framework and Angular. With
    Ionic, the time taken to market any idea is quite minimal. The Ionic CSS framework
    consists of most of the components you need to build an app.
  prefs: []
  type: TYPE_NORMAL
- en: To test drive the available components, we will scaffold a blank starter template
    and then add the visual components of Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start scaffolding, we will create a new folder named `chapter3`, and
    scaffold all the examples from this chapter in that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To scaffold a blank app, run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Ionic Grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get fine-grained control of your layout, in terms of positioning the components
    on the page or aligning elements next to each other with consistency, you need
    a grid system and Ionic provides one.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of the Ionic Grid system is that it is FlexBox-based. FlexBox--or
    the CSS Flexible Box Layout Module--provides a box model for an optimized user
    interface design.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about FlexBox at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/css3-flexBox/](http://www.w3.org/TR/css3-flexBox/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find an amazing tutorial about FlexBox at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)'
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of a FlexBox-based grid system is that you need not have a fixed-column
    grid. You can define as many columns as you want inside a row and they will be
    automatically assigned with equal width. This way, unlike any other CSS-based
    grid systems, you need not worry about the sum of class names adding up to the
    total number of columns in the grid system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a feel for the grid system, open the `home.html` file that is present
    inside the `example4/src/pages/home` folder. Delete all the content inside the
    `ion-content` directive and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And, to visually see the difference, we add the following style in the `home.scss`
    present inside the `src/pages/home` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding style is not needed to use the grid system; it is merely to show
    the visual demarcation of each column in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the `home.html` and `home.scss` files, and, using the `cd` command, go
    to the `example4` folder and run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check whether the width varies automatically, we reduce the number of child
    divs to three, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: No hassle, no counting; all you need to do is add the ion-col that you want
    to use, and they are automatically allocated with equal width.
  prefs: []
  type: TYPE_NORMAL
- en: But this does mean that you cannot apply custom widths. You can do that easily
    with the width attribute provided by Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let''s say that, in the preceding three columns scenario, you
    want the first column to span 50 percent and the remaining two columns to take
    the remaining width; all you need to do is add an attribute named `width-50` to
    the first `ion-col`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can refer to the following table for a list of predefined width attributes
    and their implied widths:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute Name** | **Percentage Width** |'
  prefs: []
  type: TYPE_TB
- en: '| `width-10` | 10% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-20` | 20% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-25` | 25% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-33` | 33.333% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-34` | 33.333% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-50` | 50% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-66` | 66.666% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-67` | 66.666% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-75` | 75% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-80` | 80% |'
  prefs: []
  type: TYPE_TB
- en: '| `width-90` | 90% |'
  prefs: []
  type: TYPE_TB
- en: 'You can also offset a column by a certain percentage. For instance, append
    the following markup to our current example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first div is offset by 33 percent, and the remaining 66 percent will be
    split between the two divs. All the offset attribute does is add a margin of the
    specified percentage to the left of the div.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the following table for a list of predefined classes and their
    implied offset width:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute Name** | **Percentage Width** |'
  prefs: []
  type: TYPE_TB
- en: '| `offset-10` | 10% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -20` | 20% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -25` | 25% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -33` | 33.333% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -34` | 33.333% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -50` | 50% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -66` | 66.666% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -67` | 66.666% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -75` | 75% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -80` | 80% |'
  prefs: []
  type: TYPE_TB
- en: '| `offset -90` | 90% |'
  prefs: []
  type: TYPE_TB
- en: You can also align the columns in the grid vertically. This is another advantage
    of using FlexBox for a grid system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If one of the columns is tall, you can either add top, center, or bottom attributes
    on the `ion-row` tag, and things will fall into place, as shown in the preceding
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: With such a simple and powerful grid system, the layout possibilities are unlimited.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more about the Ionic Grid system, you can refer to the following link:
    [http://ionicframework.com/docs/components/#grid](http://ionicframework.com/docs/components/#grid)'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to go over a few of the Ionic components. These
    components include buttons, lists, cards, and forms. Ionic components automatically
    adapt to the iOS theme, or Material Design for Android or Windows theme based
    on the device they are running on. When we are working with Ionic components,
    we will see the output in all three platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To proceed further, we create a new project for working with buttons. You can
    `cd` into the `chapter3` folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we serve the app in lab mode. Use, `cd` command to navigate into the
    `example5` folder and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will serve the Ionic app in lab mode, which would look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this view, we can see the output of all our components in all three platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic provides different variations on the buttons, by size and style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `ion-content` directive inside `src/pages/home/home.html` with the
    following code and we should see different button variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Do you notice the padding attribute on the `ion-content` directive? This will
    add `16px` padding to the `ion-content` directive. If you save the file, you should
    see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot covers your entire button needs based on the default
    Ionic color swatch.
  prefs: []
  type: TYPE_NORMAL
- en: Also, do you notice how the look and feel of the button varies between iOS,
    Android, and Windows? We will talk more about customizing these components in
    [Chapter 5](part0089.html#2KS220-9757c8e51afd47e0a7a9ced32db749b8)*, Ionic and
    SCSS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the buttons components, refer to: [http://ionicframework.com/docs/api/components/button/Button](http://ionicframework.com/docs/api/components/button/Button)'
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By adding an attribute called `no-lines` to the `ion-list` directive, the line
    will disappear. If you update the preceding snippet to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also group the list items together using the `ion-item-group`. The
    code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For this, `ion-list` will be replaced with `ion-item-group`, as shown in the
    preceding snippet. You should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A new addition to the Ionic Lists is the sliding List. In this type of list,
    each item can be swiped to the left to reveal new options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet for this looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For more information about the list component, you can refer to the following
    link: [http://ionicframework.com/docs/components/#lists](http://ionicframework.com/docs/components/#lists)'
  prefs: []
  type: TYPE_NORMAL
- en: Cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cards are one of the best design patterns for showcasing content on a mobile
    device. For any page or app that displays a user's personalized content, cards
    are the way to go. The world is moving towards cards to display content on mobiles,
    and, in some cases, on desktops too. Examples include Twitter ([https://dev.twitter.com/cards/overview](https://dev.twitter.com/cards/overview))
    and Google Now.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you can simply port that design pattern to your app as well. All you need
    to do is design the personalized content that fits into a card and place it inside
    an `ion-card` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can get creative with cards by adding images to the cards as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also use cards to display maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should be able to see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With the power of `ion-card`, you can take your application to a new level!
  prefs: []
  type: TYPE_NORMAL
- en: Ionic icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ionic has its own set of 700+ font icons. The simplest way to add an icon is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can find the name of the icon from here: [http://ionicons.com](http://ionicons.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can mark an icon as active or inactive using the `is-active` attribute.
    Active icons are typically full and thick, whereas inactive icons are outlined
    and thin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Icons can also be made platform specific; the following snippet shows how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set the icon name programmatically, too, by first creating an
    attribute assigned to a variable and then populating that variable in the constructor.
    The HTML snippet would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The TypeScript code (in `home.ts`) would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The consolidated output for the preceding snippets would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at modals in Ionic and how to implement
    them. To work with this example, we scaffold a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`cd` into `example6` folder and run `ionic serve --lab`, and you should see
    the homepage of blank template.'
  prefs: []
  type: TYPE_NORMAL
- en: To work with modals, we need to first create a component that we want to display
    as a modal.
  prefs: []
  type: TYPE_NORMAL
- en: 'From inside the `example6` folder, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: We will look at sub-generators at a later point in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If you are using the latest Ionic CLI, you will see a file named `hello-modal.module.ts`
    generated along with the `hello-modal.html`, `hello-modal.scss`, and `hello-modal.ts`.
    To know more about `hello-modal.module.ts`, refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the component is generated, we need to add it to the `@NgModule`. Open
    `src/app/app.module.ts` and add the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: The scaffolded component may have a class name of `HelloModal` and not
    `HelloModalComponent`. If that is the case, please update accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `HelloModalComponent` to the declarations and `entryComponents` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that it is done, we start configuring the component. Open `src/pages/home/home.ts`
    and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, for working with the `modal` component, we have a `ModalController`.
    Using `create()` of the `ModalController` instance, we can register a modal. Then,
    using `present()`, we display the modal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `src/pages/home/home.html` to show a button. Clicking on which will
    present the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we update the `HelloModalComponent`. Open `src/components/hello-modal/hello-modal.ts`
    and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are using the instance of `ViewController` to manage the popup. Finally,
    for the popup content, open `src/components/hello-modal/hello-modal.html` and
    update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: With this, we have added all the code needed. Save all the files and run `ionic
    serve -lab` to see the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Segment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Segment is another new introduction to Ionic. This component is used to control
    radio selections. We will be scaffolding another application to work with this
    example. From inside the `chapter3` folder, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`cd` into `example7` folder and run `ionic serve --lab`, and you should see
    the home page of the blank template.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We initialize the food property as `pizza` in the `src/pages/home/home.ts`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ionic navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at Ionic navigation. We are going
    to scaffold a blank template, and then add more pages and see how to navigate
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 3 has introduced the `@IonicPage` decorator for simplified and improved
    navigation, centered around native mobile experience. Do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* for this.
  prefs: []
  type: TYPE_NORMAL
- en: Basic navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, we scaffold a new project. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Run the Ionic app using the `ionic serve` command and you should see the home
    page of the blank template.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation in Ionic does not require URLs; instead, pages are pushed and popped
    from the navigation controller's page stack. This approach is very much in line
    with how one would achieve navigation in a native mobile app, when compared to
    browser-based navigation. You can, however, deeplink pages with URLs, but that
    does not define the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand basic navigation, we open the `src/app/app.html` file and we
    should find the template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`ion-nav` is the subclass of `NavController`, whose purpose is to work with
    the navigation page stack. For the `ion-nav` to work properly, we must set the
    root page to be loaded initially, where the root page is any `@component`.'
  prefs: []
  type: TYPE_NORMAL
- en: So if we look at `app.component.ts`, it is pointing to a local variable named
    rootPage and that is set to HomePage .
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `src/pages/home/home.html`, we will see a section at the very top,
    which looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This is the dynamic nav bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src/pages/home/home.ts`, we can access the `NavController` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now we can access the nav properties.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic CLI Sub-Generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The all-new Ionic CLI for v2 is now power packed with sub-generators, which
    can be helpful for scaffolding pages, components, providers, and so on. To view
    the list of available sub-generators, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are going to use the preceding sub generator and generate a couple of
    pages inside the `example8` project. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Also run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `app/pages` folder, you should see two new folders, the about and
    contact folders, which have their own `html`, `ts`, and `scss` files, along with
    the `module.ts` files.
  prefs: []
  type: TYPE_NORMAL
- en: Class name of `About` and not `AboutPage`. If that is the case, please update
    the preceding accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we proceed further, we need to add `AboutPage` and `ContactPage` to
    the `src/app/app.module.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Multi page navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have three pages, we will see how to implement the navigation between
    them. The idea is that from the Home page, a user should be able to go to the
    About and Contact pages, and from the About page to Contact and Home, and, finally,
    from the Contact page to Home and About.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we update `home.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we update `home.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Do you notice the `goTo` and `back` functions? This is how we navigate from
    one page to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the `about.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'And `about.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, `contact.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'And `contact.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save all the files and go back to the browser, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on About button, we should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the Back button is automatically added to the navigation bar.
    Now, when we click on the back button, we will go back to the Home page. If you
    did notice the back function, we added a condition to check if there is more than
    one view in the stack to pop the view. If there is only one view, it will be removed
    and the user will see a black screen, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To avoid the **Black Screen of Death** in an app, we have added this condition.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are aware of Navigation in an Ionic app, you can go back to the
    Tabs template and the Side menu template and take a look at the `src` folder to
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Also, do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to find out more about `@IonicPage` decorator and to know more about
    deeplinking.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the Ionic Grid system and a few of the
    main Ionic components, and have seen how to work with them. We went through buttons,
    lists, cards, icons, and segments. Next, we saw how to work with the Navigation
    component and how to navigate between pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will work with Ionic decorators and Services, and we
    will look at the decorators and services offered by Ionic.
  prefs: []
  type: TYPE_NORMAL
