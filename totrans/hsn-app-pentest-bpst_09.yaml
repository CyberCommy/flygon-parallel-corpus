- en: Exploiting Vulnerabilities Using Burp Suite - Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, Burp Suite is a flexible tool used to detect
    and exploit vulnerabilities. In this chapter, we will be exploiting other types
    of vulnerabilities, showing more options and capabilities in Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using SSRF/XSPA to perform internal port scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SSRF/XSPA to extract data from internal machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting data using Insecure Direct Object Reference (IDOR) flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting security misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using insecure deserialization to execute OS commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting crypto vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing HTTP basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing file upload restrictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SSRF/XSPA to perform internal port scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Server-Side Request Forgery** (**SSRF**) is a vulnerability where a malicious
    user can send a manual request to the server where the application is hosted,
    usually a server that has no direct access from the user's perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, this is a vulnerability that is getting a lot of popularity because
    it has a great impact on cloud infrastructures that use technologies, such as
    Elasticsearch, and NoSQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we can see its effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code is vulnerable because it is receiving the `url` parameter without
    validations, and then ...
  prefs: []
  type: TYPE_NORMAL
- en: Performing an internal port scan to the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A port scan is one of the most basic and useful activities of network discovery
    when you are assessing a network. In applications, security assessment is limited
    to the scope determined in the assessment, but SSRF and XSPA allow users to perform
    port scanning from the application. To demonstrate how you can perform this technique,
    we will use a vulnerable test application, created by Acunetix, which you can
    find at [http://testphp.vulnweb.com/](http://testphp.vulnweb.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a vulnerable application that you can use to learn some attacks and
    test scripts or tools, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7194d52-807a-4f01-a610-0e6048023915.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Burp Suite''s Dashboard, and click on New scan. Add Acunetix''s URL in
    the scope and click on Start, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a756b75-6dc6-406d-bdf1-cee5b2bfe41d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After scanning the application, Burp Suite detected that the URL ([http://testphp.vulnweb.com/showimage.php](http://testphp.vulnweb.com/showimage.php))
    is vulnerable to SSRF. This PHP file accepts the URL as a parameter, as shown
    in the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform an automatic port scan, we can use Intruder. First, stop the request,
    and send it to Intruder, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66226f38-91db-48dd-9b1d-1464636571f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clean the wildcard created by default, and add a new one by your own, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can define your payloads as a list, from 0 to 65,535, and we will
    choose the Random option. Why? Because some **intrusion prevention systems** (**IPS**) detect
    a sequential request to the same IP, so by using the Random option, we can try
    to avoid being detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7eba87e-7db4-4b2e-9e06-876df72faf7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, launch the attack, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29ada021-e7e8-4e43-a64c-a20747811370.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Why it works? If you see the response, it is possible to see whether the connection
    was successful or not, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eb1282c-cb77-404e-8a32-fbcaed7f5adc.png)'
  prefs: []
  type: TYPE_IMG
- en: When a port is open, the response will not show any error. As a tip, you can
    analyze the length column to detect when there is a change in the response and
    see whether the error appears or not.
  prefs: []
  type: TYPE_NORMAL
- en: Using SSRF/XSPA to extract data from internal machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSRF and XSPA vulnerabilities can also be used for other actions, such as extracting
    information from the servers into the network where the backend is located, or
    from the server where the application is hosted. Let''s analyze the following
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ced569c-8afd-4646-b71f-2b49aa0a716a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the `filehookURL` parameter is vulnerable, so send it to the Repeater
    tool, using the secondary button of the mouse, and modify the parameter to extract
    a file, in `/etc/passwd`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Send it to the application. If it works, the application will show you the ...
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data using Insecure Direct Object Reference (IDOR) flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IDOR is a vulnerability that allows a malicious user to access files, databases,
    or sensitive files in the server that hosts the application.
  prefs: []
  type: TYPE_NORMAL
- en: To identify vulnerable applications to IDOR, it is necessary to test each variable
    that manages paths into the application. Let's look at an example of how to exploit
    this kind of vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting IDOR with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following screenshot, you have a vulnerable application and you have
    intercepted the next request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19761a53-0504-4c29-9984-ac5c63ac67e1.png)'
  prefs: []
  type: TYPE_IMG
- en: We have their parameters in this request; login, action, and secret. The vulnerable
    parameter here is login. The `secret` variable is the data assigned by the user
    during their registration; the vulnerability that exists is that if the malicious
    user modifies the login parameter, the application changes the secret value for
    the user specified without validation. So, we have created another user called
    **vendetta2**, to try to modify the secret value pertaining to this individual,
    as demonstrated in the following ...
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting security misconfigurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term *misconfiguration* is so open that it could mean a lot of things related
    to security. At the same time, it is so difficult to determine the impact of these
    kinds of vulnerabilities; some of these vulnerabilities could be just informational,
    showing information about the technology used to construct an application, and
    others could be so critical, providing access to the server, or to the application,
    thereby exposing all of it.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this section, we will be showing different common errors, and how to
    exploit them using Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Default pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is common that server administrators install web servers or other applications,
    and they do not configure them to avoid showing the default pages, so, it is normal
    to find pages like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc8d3fb5-35f5-43e4-add7-7415e547a647.png)'
  prefs: []
  type: TYPE_IMG
- en: This default page may be generic, but it shows information, which, depending
    on the environment, could be useful. For example, in this case, we are seeing
    Apache Tomcat's default page. Tomcat is an application server that has an administrative
    section, and Tomcat has a default user and password. So, if you detect this default
    page, you just need to enter the `tomcat` credentials, to see all of the options.
    One common attack consists ...
  prefs: []
  type: TYPE_NORMAL
- en: Directory listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is normal for system administrators and developers to assign incorrect access
    permissions in the filesystem, allowing users to access sensible files, such as
    backups, configurations files, source code files, or just a directory that allows
    users to know more about the server and where the application is hosted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To discover all of this structure, we can use three main methods, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intruder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's explore each method in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scanners, including Burp Suite scanner, have algorithms to detect sensible paths
    and commons files; actually, common files could be used as banner grabbing to
    detect potential vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a sensible file is detected, it will be shown in the scanner results as
    an issue, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea91811c-7536-4fcd-8616-0d981234efee.png)'
  prefs: []
  type: TYPE_IMG
- en: Mapping the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Burp Suite, you can find all of the different files that are mapped in the
    Target tool, where it creates a tree with all of the website structure. If you
    click on a file, it will be shown in detail on the right, detailing whether it
    is accessible or not, as well as what kind of file it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80f192be-9241-40e2-8350-01e1fc47c26d.png)'
  prefs: []
  type: TYPE_IMG
- en: This mapping is largely automatic; you just need to work in the application,
    while Burp Suite is caching all of the requests and creating this tree, but also
    Burp Suite has a specific tool for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Target tool, there is a tab called Scope; here, it is possible to define
    a URL or path as scope in order to map it deep. When you make a request, the request
    has a lot of resources that link to other resources. Burp Suite analyzes the requests
    and responses looking for these links and maps the site using the information
    that it can retrieve from them, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b948f96-fa82-496f-994a-bc7da71beb83.png)'
  prefs: []
  type: TYPE_IMG
- en: If the application has authenticated sections, it's recommended that you provide
    credentials, because each time Burp Suite tries to access the authenticated section,
    the proxy will launch a popup that could be annoying. When this happens, just
    enter the credentials and the proxy will save them for future requests.
  prefs: []
  type: TYPE_NORMAL
- en: Using Intruder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I think Intruder is the most flexible of Burp Suite's tools. You can use it
    for everything. While working with the Burp Suite Community Edition, where you
    do not have the advanced options and tools, Intruder can supply all of them with
    restrictions, which means more time in performing the tasks, but it can do any
    kind of task.
  prefs: []
  type: TYPE_NORMAL
- en: So, to detect directory listings and sensitive files, we are going to use common
    lists. For example, we can have a list with common directories, such as usual
    paths in **content management systems** (**CMS**), eCommerce applications, and
    normal paths used in a homemade application, such as `/users/`, `/admin/`, `/administrator/`,
    `process.php`, `/config/`, and more.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we need to have a list with common ...
  prefs: []
  type: TYPE_NORMAL
- en: Default credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, in this section, there are applications that have default
    credentials when they are installed. With some of them, this is because they are
    not installed directly, but use packages with the OS or because they are part
    of another application. For example, some **integrated development environments**
    (**IDE**) have web or application servers in their installations, which are used
    for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Also, there are testing tools or packages that use **database management systems**
    (**DBMS**), but these systems have vulnerabilities or default access that exposes
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing some scouting, you will be able to know the applications, servers, and
    technology behind an application, and just looking for the term default password
    find the correct credentials, or accessing to the web that stores them, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61fd3d16-a956-4669-9a34-660beeaeaea5.png)'
  prefs: []
  type: TYPE_IMG
- en: To identify the correct ones, you just need to load them as payload in Intruder
    and launch the applications, as we will see in more detail in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Untrusted HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTTP protocol has different methods, usually, we use to know the `GET`,
    `POST`, and `CONNECT` methods because they are the most commonly used. However,
    there are others that can be used to get information about the server, upload
    and delete files into the application, or obtain debug information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing these methods using Burp Suite is easy. From the proxy, just modify
    the request in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Actually, `OPTIONS` is a method that allows us to know what methods are allowed
    on the web server. The methods that can appear are `PUT`, `DELETE`, `TRACE`, `TRACK`,
    and `HEAD`. The exploitation of these methods is beyond the scope of this book
    because a lot depends on the environment in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Using insecure deserialization to execute OS commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serialization is a process, in some programming languages, for converting the
    state of an object into a byte stream, this means 0's and 1's. The deserialization
    process converts a byte stream into an object in memory.
  prefs: []
  type: TYPE_NORMAL
- en: In web technologies, there are more simple cases, for example, a common deserialization
    is the process to pass a JSON format into an XML format. This is so simple, but
    the real problems start in technologies that use native objects, for example,
    Java, where we can pass to direct calls in memory.
  prefs: []
  type: TYPE_NORMAL
- en: The vulnerability, in fact, occurs when the application deserializes an input
    that is not valid, creating a new object that could be potentially risky to the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine you have a vulnerable application that is using the pickle library.
    This is a Python module that implements different functions to serialize and deserialize.
    However, this module does not implement protection by itself. It needs to be implemented
    with validation by the developer. Look at the following vulnerable code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This code reads a YAML file without any validations. A malicious user can enter
    an input that could execute other actions, for example, a command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Exploiting crypto vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More than exploiting vulnerabilities related to cryptography, Burp Suite allows
    users to perform analysis to detect weak algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: To perform this analysis, we need to create a capture. This capture is just
    a navigation where we log in and log out from an application in order to create
    sessions, tokens, and IDs. The idea is to create the biggest capture that we can
    in order to have a sample.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the capture, use the normal history in Burp Suite, go to the
    Sequencer tool, and click on Analyze now, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03e9e9b1-b2a1-4ef3-84fd-73d24a87557d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can see the final analysis, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/710838f0-a0b1-499e-b00c-b48997aba3b8.png)'
  prefs: []
  type: TYPE_IMG
- en: The Final Analysis
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can determine whether the algorithm used is weak or not based on the
    entropy, the charset, and the probability.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing HTTP basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Basic authentication is a type of access control mostly used in internal environments
    to restrict access to restricted areas in a website. It has a lot of weaknesses,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The basic authentication sends the information in plain text. This means that
    a malicious user can intercept the information sent by the client to the server
    and extract the credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The password is protected by a Base64 encoding. It does not mean that the password
    is encrypted; anyone can get the plain password using a decoder, like the one
    included in Burp Suite, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/85bb0cab-7106-4191-8568-83344cce6d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Brute forcing it with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to show how to attack a basic authentication using Burp Suite.
    Imagine we have a domestic router that is used to provide us with the internet
    in our home. Most of these devices use basic authentication. So, access to the
    URL router and the web browser will display a window, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9786bec3-220c-4572-a1f3-8f62a11a0628.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, configure Burp Suite to intercept the credentials sent to the server,
    as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84489aa7-dd9e-45af-a60a-7740e03e0967.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can see the parameter authorization in the header. So, copy the value
    assigned to the parameter, and paste it in the Decoder section to know what it
    is. Remember that basic authentication uses Base64 encoding to protect the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cade33a9-097a-4b08-98c7-bff5620e4eae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we know that the structure used by the basic authentication is `user:password`,
    so to brute force the control, we need to send credentials following this structure.
    We are going to use a list of potential users and passwords, and store them in
    TXT files, in order to use them as payloads. I recommend that you look for leaked
    passwords in common services, such as Facebook, LinkedIn, and Yahoo, because they
    are real passwords, and not just a common dictionary, so it is more probable that
    you can get access to the restricted area. Here, we have a small example list
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d9616fc-e501-42e8-b841-0f126bd9f903.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our password and users list, click on the original request,
    using the secondary button of the mouse, and send it to the Intruder tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to select the Cluster bomb option to send our request.
    As we only have one list, we want Burp Suite to test all of the possible combinations
    on the list, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58ed6b25-9667-41f6-8847-73ea5952a0ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we are going to select the value assigned to the authorization parameter
    as a wildcard. The trick however, is to create wildcards on the same parameter
    because we have to insert values to the password and the user, as demonstrated
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0efb4232-4d7f-4ab6-afc6-ca48a1fd02e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to the Payloads tab and here, we are going to select our lists. However,
    the most important step is that we need to encode our inputs in Base64 with the
    structure used by the basic authentication. First, in the Payload Sets section,
    select the use of two payload sets. It is not important if we will use the same
    list, but we need to use them as separate payloads, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30b18b92-3434-4471-9fad-3e86092271d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Afterward, select the first payload list and, in the textbox separator for
    position 1, add the `:` character. This will be inserted after the first value,
    as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f342fc1-fea5-4b0e-9685-7db3a6d3a056.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, to encode the payload, click on Add payload processing rule. Here, select
    the Encode option in the list, and then Base64-encode. With this configuration,
    all of our payloads will be sent in Base64-encode, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2864f3a8-aed5-4db2-8b07-84dbe5c089de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, go back to the Payload Sets section and select the second position. Here,
    select the list of users and passwords, but in the textbox leave empty the textbox
    separator for position 2\. Also, create the rule to encode the payload. Go back
    to the Positions tab and click on Start attack, as demonstrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b901b74-620c-4ad4-916d-fbd1089a08fa.png)'
  prefs: []
  type: TYPE_IMG
- en: When the Intruder shows an HTTP error code 200, this means that the combination
    is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, basic authentication is not recommendable due to its
    security issues. More common is the use of authentication forms. These authentication
    forms consist in an HTML or another client technology form, which is passed to
    a backend where the credentials are processed to determine whether the user has
    access or not to the resource.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that all the processing to determine whether the user
    is valid or not will be in the backend. Sometimes, it is recommendable to use
    structure validations in the client side, just to limit the number of incorrect
    attempts.
  prefs: []
  type: TYPE_NORMAL
- en: Automation with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To execute a brute forcing on a form, we are going to stop the request where
    the credentials are uploaded to the application, as can be seen in the following
    code block, where the user is accessing a login section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this request, we can identify the parameters where the application receives
    the username and password. So, using the secondary button of the mouse, click
    on the emergent menu and select Send to Intruder. Here, we are going to create
    wildcards in the place where we have the parameters. Note that this is not a common `POST`
    request where the parameters are assigned as values. Here, we have a different
    structure, but it works in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the application is not using any kind of encoding. We just configure
    the payload as a normal list, selecting Cluster bomb as the attack type, and our
    previous list, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0dd09b83-fee8-4b1e-b9dd-5ea9572a6971.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To finish, click on Start attack. Intruder will launch a window where we can
    see the results. There are some applications, which, when the credentials are
    incorrect, respond with a 302 error code to redirect the user to the login page
    again. In this case, the application always responds with a 200 error code, so
    is needed to analyze the response in detail. To do this in an easy way, we can
    check the column length and look for a variation in the value that indicates a
    different result, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30af46b5-ca2e-440b-8951-c5d8f2bb8488.png)'
  prefs: []
  type: TYPE_IMG
- en: Bypassing file upload restrictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many applications allow users to upload files. There are different ways to
    manage these files: some applications directly upload the file as binary, and
    others encode the file to reduce the size and manage in a database. Let''s explore
    how we can modify the restrictions established by an application to manage the
    files.'
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing type restrictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an application allows you to upload files, usually the developer knows
    what types of files are allowed, so it is important to validate that a malicious
    user cannot upload other kinds of files. The common way to validate this is by
    using the extension file. So, if an application manages documents, maybe the developer
    allows PDF files and DOCX documents, but is this secure?
  prefs: []
  type: TYPE_NORMAL
- en: The file extension is not the only validation that the application needs to
    undertake. A malicious user can upload a malicious file with a valid extension;
    for example, to propagate malware.
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to create a malicious PDF using a tool called Metasploit.
    Metasploit is an exploitation framework that allows attack vulnerabilities, mainly
    in infrastructure; but it also has auxiliary modules to perform some tasks, such
    as creating binary files with embedded malicious code. You can get a copy of Metasploit
    in [https://www.metasploit.com/](https://www.metasploit.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, you just need to uncompress the file in a directory. To create
    a PDF, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `adobe_utilprintf` tool, which will convert our PDF to a malicious PDF.
    You can use any PDF to do this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the PDF to use the instruction set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the payload to use. Metasploit has different payloads to perform actions
    when the file is executed, or in this case, opened. The simplest payload is to
    create a connection from the computer where the file is open to a remote computer.
    This is a reverse shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the remote IP address and the port, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6394fa52-92a2-4751-a5c5-e9bb597acd5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting all of the options, use the instruction exploit to create the
    file, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4daf1e92-6adf-48a8-8cfd-21cc4f2f3e09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the application that you are assessing using Burp Suite and intercept
    a request in a section where the user is allowed to upload files. Imagine we have
    the following vulnerable request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12f9c3dc-896d-4d5d-824b-cd472e6dc290.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample vulnerable request
  prefs: []
  type: TYPE_NORMAL
- en: 'In this request, we can see we have two restrictions. First, we have a size
    limit, which is established to avoid uploading the biggest files. We can see this
    restriction in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, if we modify these values, it's possible to upload files with a size bigger
    than what is expected by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other restriction is the file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This application is waiting for a specific extension, if we upload another file,
    such as our modified PDF, see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: You will see how the file is uploaded in a binary way to the server. At this
    point, the server has a malicious PDF that could be downloaded by other users,
    which will be infected. In order to confirm that the file is the same, you can
    download it and compare the downloaded file with your own file.
  prefs: []
  type: TYPE_NORMAL
- en: The conclusion for this point is that a file is just another type of input in
    an application, and you can modify it using Burp Suite like inputs in a form.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the normal tools that Burp Suite uses to exploit
    different types of vulnerabilities. In particular, we exploited SSRF and XSPA
    to execute commands, extract information and perform tasks in the internal networks.
    Also, we reviewed the origin of these vulnerabilities. We reviewed an IDOR vulnerability,
    learned how to exploit it manually, and how to automate its exploitation using
    Intruder. Next, we reviewed some vulnerabilities related to configurations; how
    they could be critical and not critical, and how we can automate some of them.
  prefs: []
  type: TYPE_NORMAL
- en: We also performed brute forcing to look for valid credentials in two different
    types of authentications. We created a malicious PDF and learned how to upload
    it to a website ...
  prefs: []
  type: TYPE_NORMAL
