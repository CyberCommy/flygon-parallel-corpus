- en: Chapter 10. Benefiting from the Relational System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The relational system allows users to work more closely with phpMyAdmin, as
    we will see in the following chapters. This chapter explains how to define inter-table
    relations.
  prefs: []
  type: TYPE_NORMAL
- en: Relational MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When application developers use PHP and MySQL to build web interfaces or other
    data manipulation applications, they usually establish relations between tables
    using the underlying SQL queries. Examples of this would be queries to "get an
    invoice and all its items" and "get all books by an author".
  prefs: []
  type: TYPE_NORMAL
- en: In the earlier versions of phpMyAdmin, the relational data structure (how tables
    relate to each other) was not stored within MySQL. Tables were programmatically
    joined by the applications to generate meaningful results.
  prefs: []
  type: TYPE_NORMAL
- en: This was considered a shortcoming of MySQL by phpMyAdmin developers and users.
    Therefore, the team started to build an infrastructure to support relations for
    `MyISAM` tables, which is now called the phpMyAdmin configuration storage. The
    infrastructure evolved to support a growing array of special features such as
    query bookmarks and MIME-based transformations.
  prefs: []
  type: TYPE_NORMAL
- en: Now-a-days, relations between tables are normally defined natively with the
    `FOREIGN KEY` feature of the `InnoDB` and `PBXT` storage engines. phpMyAdmin supports
    both this type of relations and those defined for `MyISAM`.
  prefs: []
  type: TYPE_NORMAL
- en: InnoDB and PBXT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`InnoDB` ([http://www.innodb.com](http://www.innodb.com)) is a MySQL storage
    engine developed by Innobase Oy, a subsidiary of Oracle. Prior to MySQL 5.5, this
    storage engine may not be available as it must be activated by a system administrator;
    however, it''s the default storage engine in version 5.5.'
  prefs: []
  type: TYPE_NORMAL
- en: The `PrimeBase XT` storage engine or PBXT ([http://www.primebase.org](http://www.primebase.org))
    is developed by PrimeBase Technologies. The minimum MySQL required version is
    5.1, as this version supports the pluggable storage engine API that is used by
    `PBXT` and other third parties to offer alternative storage engines. This transactional
    storage engine is newer than `InnoDB`. It is usually installed after downloading
    it from their website and then going through a compilation step. For some operating
    systems, a precompiled binary is available—please visit the aforementioned website
    for download and installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When considering the relational aspect, here are the benefits of using the
    `InnoDB` or `PBXT` storage engine for a table:'
  prefs: []
  type: TYPE_NORMAL
- en: They support referential integrity based on foreign keys, which are the keys
    in a foreign (or reference) table. By contrast, using only phpMyAdmin's internal
    relations (discussed later) brings no automatic referential integrity verification.
  prefs: []
  type: TYPE_NORMAL
- en: The exported structure for `InnoDB` and `PBXT` tables contains the defined relations.
    Therefore, they are easily imported back for better cross-server interoperability.
  prefs: []
  type: TYPE_NORMAL
- en: The foreign key feature of these storage engines can effectively replace the
    part of phpMyAdmin's configuration storage that deals with relations. We will
    see how phpMyAdmin interfaces with the `InnoDB` and `PBXT` foreign key system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The other parts of phpMyAdmin's configuration storage (for example, bookmarks)
    have no equivalent in `InnoDB, PBXT`, or MySQL. Hence, they are still required
    to access the complete phpMyAdmin feature set. However, in MySQL 5.x, views are
    supported, and have similarities with phpMyAdmin's bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: Defining relations with the relation view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the installation of the phpMyAdmin configuration storage, there are more
    options available in the `Database` view and the `Table` view. We will now examine
    the **Relation view** link in the **Structure** page of the `Table` view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining relations with the relation view](img/7782_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This view is used to:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the relations of the current table with the other tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the display column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our goal here is to create a relation between the `book` table (which contains
    the author ID) and the `author` table (which describes each author by an ID).
    We start on the `Table` view for the `book` table, go to **Structure**, and click
    on the **Relation view** link.
  prefs: []
  type: TYPE_NORMAL
- en: Defining internal relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the `book` table is in `MyISAM` format, we see the following screen (otherwise,
    the display would be different, as explained in the *Defining foreign key relations*
    section later):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining internal relations](img/7782_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screen allows us to create **Internal relation** (stored in the `pma_relation`
    table) as MySQL itself does not have any relational notion for `MyISAM` tables.
    The empty drop-down list next to each column indicates that there are no relations
    (links) to any foreign table.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the relation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can relate each column of the `book` table to a column in another table (or
    in the same table because self-referencing relations are sometimes necessary).
    The interface finds both the unique and the non-unique keys in all the tables
    of the same database, and presents the keys in drop-down lists. (Creating internal
    relations to other databases from the interface is not currently supported.) The
    appropriate choice for the **author_id** column is to select the corresponding
    **id** column from the `author` table.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the relation](img/7782_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then click on **Save**, and the definition is saved in phpMyAdmin's configuration
    storage. To remove the relation, we would just come back to the screen, select
    the empty choice, and click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the display column
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The primary key of our `author` table is the `id`, which is a unique number
    that we made up for key purposes. The author's name is the natural way to refer
    to an author. It would be interesting to see the author's name when browsing the
    `book` table. This is the purpose of the display column. We should normally define
    a display column for each table that participates in a relation as a foreign table.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see how this information is displayed in the *Benefiting from the defined
    relations* section. We now go to the **Relation view** for the `author` table
    (which is the foreign table in this case) and specify the display column. We choose
    **name** as the display column and click on **Save**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the display column](img/7782_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: phpMyAdmin offers to define only one display column for a table, and this column
    is used in all the relations where this table is used as a foreign table.
  prefs: []
  type: TYPE_NORMAL
- en: The definition of this relation is now done. Although we did not relate any
    of the columns in the `author` table to another table, it can be done. For example,
    we could have a country code in this table and could create a relation to the
    country code of a country table.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will see what happens if our tables are under the control of the
    `InnoDB` or `PBXT` storage engine.
  prefs: []
  type: TYPE_NORMAL
- en: Foreign key relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InnoDB` and `PBXT` storage engines offer us a native foreign key system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At your choice, the exercises in this section can be accomplished with either
    `InnoDB` or `PBXT` storage engines. `InnoDB` has been chosen in the text.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, our `book` and `author` tables must be under the `InnoDB`
    storage engine. We can do this from the **Operations** page in the `Table` view.
  prefs: []
  type: TYPE_NORMAL
- en: Another step is necessary in order to see the consequences of a missing index
    during the exercise. We go back to the **Structure** for the `book` table and
    remove the combined index we created on **author_id** and **language** columns.
  prefs: []
  type: TYPE_NORMAL
- en: The foreign key system in `InnoDB` maintains integrity between the related tables.
    Hence, we cannot add a non-existent author ID to the `book` table. In addition,
    actions are programmable when `DELETE` or `UPDATE` operations are performed on
    the master table (in our case, `book)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening the `book` table on its **Structure** page and entering the **Relation
    view**, now displays a different page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key relations](img/7782_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This page provides us the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: There is an internal relation defined for **author_id** to the `author` table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No `InnoDB` relations are defined yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will be able to remove the internal relation, when the same relation has
    been defined in `InnoDB`. Indeed, hovering over the question mark next to **Internal
    relations** displays the following message: **An internal relation is not necessary
    when a corresponding FOREIGN KEY relation exists**. So, it will be better to remove
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the possible choices for the related key, we see the keys defined in all
    the `InnoDB` tables of the same database. (Creating a cross-database relation
    is currently not supported in phpMyAdmin.) The keys defined in the current table
    are also shown, as self-referring relations are possible. Let us remove the internal
    relation for the **author_id** column and click on **Save**. Our goal is to add
    an `InnoDB-type` relation for the **author_id** column, but it's not possible
    as the **No index defined!** message appears on this line. This is because foreign
    key definitions in `InnoDB` or `PBXT` can be done only if both the columns have
    indexes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other conditions regarding constraints are explained in the MySQL manual. Please
    refer to [http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html](http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we come back to the **Structure** page for the `book` table and add an
    ordinary (non-unique) index to the **author_id** column producing the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key relations](img/7782_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Relation view**, we can try again to add the relation we wanted; it
    works this time!
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key relations](img/7782_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also set some actions with the **ON DELETE** and **ON UPDATE** options.
    For example, **ON DELETE CASCADE** would make MySQL automatically delete all the
    rows in the related (foreign) table when the corresponding row is deleted from
    the parent table. This would be useful, for example, when the parent table is
    `invoices`, and the foreign table is `invoice‑items`. These options are supported
    natively by MySQL, so deleting outside of phpMyAdmin would cause the delete cascade.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have not done so already, we should define the display column for the
    `author` table, as explained in the *Defining the display column* section.
  prefs: []
  type: TYPE_NORMAL
- en: Foreign keys without phpMyAdmin configuration storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We see the **Relation view** link on the **Structure** page of an `InnoDB` or
    `PBXT` table, even when the configuration storage is not installed. This would
    bring us to a screen where we could define the foreign keys, in this case for
    the `book` table.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, if we choose this, the display column for the linked table (in this
    case `author)` cannot be defined, as it belongs to phpMyAdmin's configuration
    storage. Thus, we would lose the benefit of seeing the associated description
    of the foreign key.
  prefs: []
  type: TYPE_NORMAL
- en: Defining relations with the Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ajax-based **Designer** offers a visually-driven way of managing relations
    (both internal and foreign key-based), and defining the display column for each
    table. It can also act as:'
  prefs: []
  type: TYPE_NORMAL
- en: A menu to access the structure of existing tables and to access the table creation
    page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PDF schema manager, if we want a PDF schema encompassing all our tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the **Designer** workspace, we can work on the relations for all tables on
    the same panel. On the other hand, the **Relation view** shows the relations for
    only a single table at a time.
  prefs: []
  type: TYPE_NORMAL
- en: We access this feature from the `Database` view by clicking on the **Designer**
    menu tab.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this menu tab does not appear, it's because we are yet to install the phpMyAdmin
    configuration storage as described in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with phpMyAdmin").
  prefs: []
  type: TYPE_NORMAL
- en: Over viewing the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Designer** page contains the main workspace where the tables can be seen.
    This workspace will dynamically grow and shrink, depending on the position of
    our tables. The following screenshot demonstrates the **Designer** interface containing
    our three tables and the relations between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Over viewing the interface](img/7782_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A top menu contains icons whose description is revealed by hovering the mouse
    over them. The following table gives a summary of the goals for the top menu''s
    icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Icon | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Show/Hide left menu** | To display or hide the left hand menu. |'
  prefs: []
  type: TYPE_TB
- en: '| **Save position** | Saves the current state of the workspace. |'
  prefs: []
  type: TYPE_TB
- en: '| **Create table** | Quits the **Designer** and enters a dialog to create a
    table; we should take care of saving the position of tables before clicking on
    this. |'
  prefs: []
  type: TYPE_TB
- en: '| **Create relation** | Puts the **Designer** in a relation-creating mode.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Choose column to display** | Specifies which column represents a table.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Reload** | Refreshes the table''s information in case their structure has
    changed outside of the **Designer**. |'
  prefs: []
  type: TYPE_TB
- en: '| **Help** | Displays an explanation about selecting the relations. |'
  prefs: []
  type: TYPE_TB
- en: '| **Angular links/Direct links** | Specifies the shape of relation links. |'
  prefs: []
  type: TYPE_TB
- en: '| **Snap to grid** | Influences the behavior of table movements, relative to
    an imaginary grid. |'
  prefs: []
  type: TYPE_TB
- en: '| **Small/Big All** | Hides or displays the list of columns for every table.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Toggle small/big** | Reverses the display mode of columns for every table,
    as this mode can be chosen for each table with its corner icon **V** or**>**.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Import/Export** | Displays a dialog to import from an existing PDF schema
    definition or to export to it. |'
  prefs: []
  type: TYPE_TB
- en: '| **Move Menu** | The top menu can move to right and back again. |'
  prefs: []
  type: TYPE_TB
- en: 'A side menu appears when clicking on the **Show/Hide left menu** icon. Its
    purpose is to present the complete list of tables, so that you can decide which
    table appears on the workspace, and to enable access to the **Structure** page
    of a specific table. In this example, we choose to remove the **book-copy** table
    from the workspace as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Over viewing the interface](img/7782_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we want to remove it permanently, we click on the **Save position** top icon.
    This icon also saves the current position of our tables on the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Tables can be moved on the workspace by dragging their title bars, and the list
    of columns for a table can be made visible/invisible with the help of upper-left
    icon of each table. In this list of columns, small icons show us the data type
    (numeric, text, and date), and also tell us whether this column is a primary key.
  prefs: []
  type: TYPE_NORMAL
- en: Defining relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have already defined a relation with the **Relation view**, we will first
    see how to remove it. The **Designer** does not permit a change in a relation.
    However, the **Designer** allows the relation to be removed and defined.
  prefs: []
  type: TYPE_NORMAL
- en: The question mark icon displays a panel that explains where to click, in order
    to select a relation for subsequent deletion.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining relations](img/7782_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us click on the relation line to select it. We get a confirmation panel
    on which we click on **Delete**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining relations](img/7782_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then proceed to recreate it. To do this, we start by clicking on the
    **Create relation** icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining relations](img/7782_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cursor then takes the form of a short message saying **Select referenced
    key**. In our case, the referenced key is the **id** column of the **author**
    table; so we bring the cursor on this column and click on it. A validation is
    done, ensuring that we chose a primary or unique key.
  prefs: []
  type: TYPE_NORMAL
- en: Next, having changed the cursor to **Select foreign key**, we bring it to the
    `author_id` column of the `book` table and click on it again. This confirms the
    creation of the relation. Currently, the interface does not permit the creation
    of compound keys (having more than one column).
  prefs: []
  type: TYPE_NORMAL
- en: Defining foreign key relations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The procedure to delete or define a relation between `InnoDB` or `PBXT` tables
    is the same as that for internal relations. The only exception is that at the
    time of creation, a different confirmation panel appears enabling us to specify
    the `on delete` and `on update` actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining foreign key relations](img/7782_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining the display column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the workspace, the `name` column in `author` table has a special background
    color. This indicates that this column serves as the display column. We can simply
    click on the **Choose column to display** icon, and drag the short message **Choose
    column to display** onto another column—for example, the `phone` column. This
    changes the display column to this column. If we were to drag the message to an
    existing display column, we would have removed the definition of this column as
    the display column for the table.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting for PDF schema
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 15, we will see how to produce a PDF schema for a subset of our database.
    We can import the coordinates of tables from such a schema into the **Designer's**
    workspace, and conversely export them to the PDF schema. The **Import/export coordinates**
    icon is available for that purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Benefiting from the defined relations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the benefits of the defined relations that
    we can currently test. Other benefits will be described in [Chapter 12](ch12.html
    "Chapter 12. Generating Multi-table Queries") and [Chapter 15](ch15.html "Chapter 15. Documenting
    the System"). Additional benefits of the phpMyAdmin configuration storage will
    appear in [Chapter 14](ch14.html "Chapter 14. Using Query Bookmarks"), [Chapter
    16](ch16.html "Chapter 16. Transforming Data using MIME"), and [Chapter 18](ch18.html
    "Chapter 18. Tracking Changes").
  prefs: []
  type: TYPE_NORMAL
- en: These benefits are available for both internal and foreign key relations.
  prefs: []
  type: TYPE_NORMAL
- en: Foreign key information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us browse the `book` table. We see that the values of the related key **(author_id)**
    are now links. Moving the cursor over any **author_id** value reveals the author's
    name (as defined by the display column of the `author` table).
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key information](img/7782_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **author_id** brings us to the relevant table `—author—`for
    this specific author:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key information](img/7782_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of viewing the keys, we might prefer to see the display column for
    all the rows. Going back to the `book` table, we can select the **Relational display
    column** display option and click on **Go**. This produces a screen similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign key information](img/7782_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now switch back to viewing the keys by selecting **Relational key** and clicking
    on **Go**.
  prefs: []
  type: TYPE_NORMAL
- en: The drop-down list of foreign keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Displaying the `book` table, in **Insert** mode (or in **Edit** mode), there
    is now a drop-down list of the possible keys for each column that has a defined
    relation. The list contains the keys and the description (display column) in both
    orders—key to the display column as well as display column to the key. This enables
    us to use the keyboard and type the first letter of either the key or the display
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '![The drop-down list of foreign keys](img/7782_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only the key (in this case **1)** will be stored in the `book` table. The display
    column is shown only to assist us.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this drop-down list will appear if there are a maximum of 100 rows
    in the foreign table. This is controlled by the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For foreign tables bigger than that, a distinct window appears—the foreign-table
    window (refer to the next section) that can be browsed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We might prefer to see information differently in the drop-down list. Here,
    **John Smith** is the content and **1** is the ID. The default display is controlled
    by the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use one or both of the strings`—content-id` and `id-content—in` the
    defining array and in the order we prefer. Thus, defining `$cfg[''ForeignKeyDropdownOrder'']`
    to `array(''id-content'')` would produce a list with only those choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The browseable foreign-table window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our current `author` table has very few entries. Thus, to illustrate this mechanism,
    we will set the `$cfg['ForeignKeyMaxLimit']` to an artificially low number, 1\.
    Now in the **Insert** mode for the `book` table, we see a small table-shaped icon
    and a **Browse foreign values** link for **author_id** column. This icon opens
    another window, which will present the values of the `author` table and a **Search**
    input field. On the left, the values are sorted by key value (here, the **id**
    column), and on the right, they are sorted by description.
  prefs: []
  type: TYPE_NORMAL
- en: '![The browseable foreign-table window](img/7782_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choosing one of the values (by clicking either a key value or a description)
    closes this window and brings the value back to the **author_id** column.
  prefs: []
  type: TYPE_NORMAL
- en: Referential integrity checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discussed the **Operations** page and its **Table maintenance** section in
    Chapter 9\. For this exercise, we suppose that both the `book` and `author` tables
    are not under the control of the `InnoDB` or `PBXT` storage engine. If we have
    defined an internal relation for the `author` table, a new choice appears for
    the `book` table—**Check referential integrity**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Referential integrity checks](img/7782_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A link **(author_id -> author.id)** appears for each defined relation, and clicking
    on it starts verification. For each row, the presence of the corresponding key
    in the foreign table is verified and errors, if any, are reported. If the resulting
    page reports zero rows, it is good news!
  prefs: []
  type: TYPE_NORMAL
- en: This operation exists because for tables under the storage engines that do not
    support foreign key natively, neither MySQL nor phpMyAdmin enforces referential
    integrity. It is perfectly possible, for example, to insert data in the `book`
    table with invalid values for **author_id** column.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic updates of metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpMyAdmin keeps the metadata for internal relations synchronized with every
    change that is made to the tables via phpMyAdmin. For example, renaming a column
    that is part of a relation would make phpMyAdmin rename this column in the metadata
    for the relation. This guarantees that an internal relation continues to function,
    even after a column's name is changed. The same thing happens when a column or
    table is dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Metadata should be maintained manually in case a change in the structure is
    done from outside phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Column commenting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to MySQL 4.1, the MySQL structure itself did not support the addition
    of comments to a column. Nevertheless, thanks to phpMyAdmin's metadata, we could
    comment on columns. However, since MySQL 4.1, native column commenting has been
    supported. The good news is that for any MySQL version, column commenting in phpMyAdmin
    is always accessed via the **Structure** page by editing the structure of each
    column. In the following example, we need to comment on three columns of the `book`
    table. Hence, we choose them and click on the pencil icon near the **With selected**
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Column commenting](img/7782_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To obtain the next panel, as seen here, we are working in vertical mode. This
    mode was covered in [Chapter 5](ch05.html "Chapter 5. Changing Data and Structure").
    We enter the comments as shown in the following screenshot, and then click on
    **Save:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Column commenting](img/7782_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These comments appear at various places, for example, in the export file (refer
    to [Chapter 6)](ch06.html "Chapter 6. Exporting Structure and Data (Backup)"),
    on the PDF relational schema (refer to [Chapter 15)](ch15.html "Chapter 15. Documenting
    the System"), and in browse mode, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Column commenting](img/7782_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we do not want the comments to appear in browse mode, we can set `$cfg['ShowBrowseComments']`
    to `FALSE`. (It is `TRUE` by default.)
  prefs: []
  type: TYPE_NORMAL
- en: Column comments also appear as a tool tip in the **Structure** page, and column
    names are underlined with dashes. To deactivate this behavior, we can set `$cfg['ShowPropertyComments']`
    to `FALSE`. (This one is also `TRUE` by default.)
  prefs: []
  type: TYPE_NORMAL
- en: Automatically migrating column comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever phpMyAdmin detects that column comments have been stored in its metadata,
    it automatically migrates these column comments to the native MySQL column comments.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how to define relations between both `InnoDB` and non-InnoDB
    tables. It also examined the modified behavior of phpMyAdmin (when relations are
    present) and foreign keys. Finally, it covered the **Designer** feature, column
    commenting, and how to obtain information from the table.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover the means of entering SQL commands, which are useful
    when the phpMyAdmin's interface is not sufficient to accomplish what we need.
  prefs: []
  type: TYPE_NORMAL
