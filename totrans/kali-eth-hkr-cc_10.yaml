- en: Playing with Software-Defined Radios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to radio frequency scanners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on with RTLSDR scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing around with `gqrx`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kalibrating device for GSM tapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoding ADS-B messages with Dump1090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term software-defined radio means, implementation of hardware-based radio
    components such as modulators, demodulators and tuners using a software. In this
    chapter we will cover different recipes and look at multiple ways on how RTLSDR
    can be used to play around with frequencies and the data being transported through
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Radio frequency scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RTLSDR is a very cheap (around 20 USD) software-defined radio that uses a DVB-T
    TV tuner dongle. In this recipe, we will cover connecting an RTLSDR device with
    Kali Linux to test whether it was detected successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need some hardware for this recipe. It's easily available for purchase
    from Amazon or from [https://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/](https://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/).
    Kali already has tools for us to get going with it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We connect our device and it should be detected in Kali Linux. It''s common
    for the devices to behave inaccurately. Here is the recipe to run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first run the test using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c42d6513-84b3-472d-be7e-59bd84c19dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: We may see some packet drops. This is because of trying this in a VM setup with
    only USB 2.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In case there are a lot of packet drops, we can test it by setting a lower
    sampling rate with `rtl_test -s 10000000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4beae237-154e-4d53-b629-320c1b5f7b01.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we are all set to move on to the next recipe and play around with our device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hands-on with RTLSDR scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RTLSDR scanner is a cross-platform GUI that can be used for spectrum analysis.
    It will scan the given frequency range and display the output in a spectrogram.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the recipe to run `rtlsdr-scanner`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We connect RTLSDR to the system and start the scanner using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e236271-555e-4ca2-a271-4066146b2500.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should see a new window open, showing the GUI interface of the tool; here
    we can simply enter the frequency range on which we want to perform the scan and
    click on Start scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/731c7882-b330-41e5-a415-5415e99031ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will take some time to see a sweep of frequencies, and then we will see
    the result in graphical format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/744458e2-46f7-42d1-90ea-5652f47ff26a.png)'
  prefs: []
  type: TYPE_IMG
- en: If the application stops responding, it is recommended you lower the range and
    choose Single as the Mode instead of continuous.
  prefs: []
  type: TYPE_NORMAL
- en: Playing around with gqrx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gqrx` tool is an open source **software-defined radio** (**SDR**) receiver
    powered by the GNU radio and the Qt graphical toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has many features such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering devices connected to a computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing I/Q data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AM, SSB, CW, FM-N, and FM-W (mono and stereo) demodulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording and playing back audio to/from WAV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording and playing back raw baseband data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming audio output over UDP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will cover basics of `gqrx` and another tool, RTLSDR.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following is the recipe to use `gqrx`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install `gqrx` using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once it's done, we run the tool by typing `gqrx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We choose our device from the drop-down menu in the window that opens and click
    OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9176e44-2ff9-4e51-9eb4-d4377f965e75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the GQRX application opens, and on the right-side in the receiver window,
    we choose the frequency we want to view. Then we go to the file and click on Start
    DSP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7064711b-2eca-456b-b279-f05d69dc1393.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we see a waterfall and we should start hearing the sound in our speaker.
    We can even change the frequency we are listening to using the up and down buttons
    in the Receiver Options window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b7cdbc3-cb60-4b65-a49a-0d9b75868b05.png)'
  prefs: []
  type: TYPE_IMG
- en: We will look at an example of a car key remote, which is used to lock/unlock
    a car.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we press the button a couple of times, we will see the change in the waterfall
    showing the difference in the signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c8884cd-8242-4505-93e0-3a0a96cdbaae.png)'
  prefs: []
  type: TYPE_IMG
- en: We can record the signal in the record window and then save it. This can be
    later decoded and transmitted back to the car using a transponder to unlock it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To capture the data at `443` MHz, we can use the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bc956bc-def0-4c8e-be76-cfae88b02411.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about `gqrx`, visit these blogs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gqrx.dk/doc/practical-tricks-and-tips](http://gqrx.dk/doc/practical-tricks-and-tips)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.compass-security.com/2016/09/software-defied-radio-sdr-and-decoding-on-off-keying-ook/](https://blog.compass-security.com/2016/09/software-defied-radio-sdr-and-decoding-on-off-keying-ook/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kalibrating device for GSM tapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RTLSDR also allows us to view GSM traffic using a tool called `kal` or `kalibrate-rtl`.
    This tool can scan for GSM base stations in a frequency band. In this recipe,
    we will learn about using kalibrate and then confirm the channel in `gqrx`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps to use kalibrate:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the countries use the GSM900 band. In the USA, it''s 850\. We will
    use the following command to scan for GSM base stations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbfcfa74-56d4-49fd-85ac-a683981405c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In a few minutes, it will show us a list of base stations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fdeede3-4f0b-4cd5-9a8f-b36f01a17b81.png)'
  prefs: []
  type: TYPE_IMG
- en: We note the frequency; in our case, we will use `947.6 MHz` along with the offset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we open GQRX and enter it in the Receiver Options window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c0799c6-8aa7-487a-9c64-faf7147908ab.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the waterfall that the device is able to catch signals perfectly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will look at this data at the packet level. We will use a tool known
    as `gr-gsm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It can be installed using apt install `gr-gsm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bc74ae3-4f8c-445b-a734-69ba1f72387b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it is done, if we type `grgsm_` and press the *Tab* key, we will see a
    list of different tools available for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f5712a3-cd2d-4506-9b48-346367d55bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we will use `grgsm_livemon` to monitor the GSM packets live. We''ll
    open the terminal and type `grgsm_livemon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/764c17e8-2f4f-4f03-821b-6c7a59e9b67f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the new window that opens, we will switch to the frequency we captured in
    the previous steps using kalibrate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88e6470f-6140-4d1d-9357-e42c62b1daf4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can zoom into a particular range by dragging and selecting the area on the
    graphical window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new terminal window, we start Wireshark by typing `wireshark`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then set the adapter to Loopback: lo and start our packet capture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2786ac25-6405-42c1-b8b2-2b81ac78e000.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we add the filter `gsmtap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39058086-d3d3-4042-a99a-c3f474a7c43b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should see the packets in the info window. We should see a packet with label
    System Information Type 3; let''s open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/837039fc-16c0-4bcb-bbf1-b1cc49b24568.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see the system information such as Mobile Country Code, Network Code,
    and Location Area Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/786f1994-b4a8-48d5-b6d3-39f1cd85f487.png)'
  prefs: []
  type: TYPE_IMG
- en: Now with this recipe, we have learned how GSM packets travel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some great videos to give you a better understanding of GSM sniffing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.crazydanishhacker.com/category/gsm-sniffing-hacking/](https://www.crazydanishhacker.com/category/gsm-sniffing-hacking/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoding ADS-B messages with Dump1090
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ADS-B stands for **Automatic Dependent Surveillance-Broadcast**. It is a system
    in which electronic equipment onboard an aircraft automatically broadcasts the
    precise location of the aircraft via a digital data link.
  prefs: []
  type: TYPE_NORMAL
- en: As described in the official readme of the tool, Dump1090 is a Mode S decoder
    specifically designed for RTLSDR devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features are:'
  prefs: []
  type: TYPE_NORMAL
- en: Robust decoding of weak messages. With mode1090, many users observed improved
    range compared to other popular decoders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network support—TCP30003 stream (MSG5), raw packets, HTTP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded HTTP server that displays the currently detected aircrafts on Google
    Maps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-bit error correction using 24-bit CRC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to decode DF11 and DF17 messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to decode DF formats such as DF0, DF4, DF5, DF16, DF20, and DF21, where
    the checksum is XOR-ed with the ICAO address by brute-forcing the checksum field
    using ICAO addresses, which we've covered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decode raw IQ samples from file (using the `--ifile` command-line switch).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive CLI mode where aircrafts currently detected are shown as a list,
    refreshing as more data arrives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPR coordinate decoding and track calculation from velocity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP server streaming and receiving raw data to/from connected clients (using
    `--net`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will use the tool to look at air traffic with visuals.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps to use Dump1090:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can download the tool from the Git repo using the command `git clone https://github.com/antirez/dump1090.git`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b0016fb-0910-4d85-8dbc-5c7e49f95df0.png)'
  prefs: []
  type: TYPE_IMG
- en: Once downloaded, we go the folder and run `make`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We should now have an executable. We can run the tool using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d29a9f10-be34-4d6c-875c-1f33ae6ec79d.png)'
  prefs: []
  type: TYPE_IMG
- en: In a few minutes, we should see the flights, and by opening the browser to `http://localhost:8080`,
    we will be able to see the flights on the map as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More about this can be learned from [https://www.rtl-sdr.com/adsb-aircraft-radar-with-rtl-sdr/](https://www.rtl-sdr.com/adsb-aircraft-radar-with-rtl-sdr/).
  prefs: []
  type: TYPE_NORMAL
