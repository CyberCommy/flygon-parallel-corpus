- en: Debugging Tasks Using Visual Studio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parallel programming can improve the performance and responsiveness of applications,
    but sometimes the results are not as expected. Common problems related to parallel/asynchronous
    code are performance and correctness.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: With performance, we mean that the results of execution are slow. With correctness,
    we mean that results are not as expected (this might be due to race conditions).
    Another big issue when dealing with multiple concurrent tasks is deadlocks. Debugging
    multithreaded code is always a challenge as threads keep switching while you are
    debugging. While working on GUI-based applications, it's also important to find
    out which thread is running our code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explain how to debug threads using tools available
    in Visual Studio, including the Threads window, the Tasks window, and Concurrency
    Visualizer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with VS 2019
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to debug threads
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Parallel Tasks windows
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging using Parallel Stacks windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Concurrency Visualizer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A prior understanding of threads, tasks, Visual Studio, and parallel programming
    is required before you start this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: You can check the accompanying source code at GitHub at the following link: [https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter10](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter10).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with VS 2019
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio provides lots of built-in tools to help with the aforementioned
    debugging and troubleshooting issues. Some of the tools that we are going to discuss
    in this chapter are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The Thread window
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Parallel Stacks window
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Parallel Watch window
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Debug Location toolbar
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency Visualizer (VS 2017 only as of the time of writing)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GPU thread window
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will try to understand all of these tools in depth.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: How to debug threads
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with multiple threads, it becomes important to find out which thread
    is executing at a particular time. This allows us to troubleshoot cross-threading
    issues as well as race conditions. Using the `Threads` window, we can check and
    work with threads while debugging. When you hit a breakpoint while debugging code
    in Visual Studio IDE, the thread window provides a table with each row containing
    information about active threads.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s explore how to debug threads using Visual Studio:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write the following code in Visual Studio:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a breakpoint by pressing *F9* on the `Console.Writeline` statement.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the application in debug mode by pressing *F5*. The application will create
    threads and start executing. When a breakpoint is hit, we will open the Threads
    window from the toolbar''s Debug | Windows | Threads window:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/155f0014-8b54-4083-9c66-17855f669651.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: There is a lot of information that is captured by the .NET environment regarding
    threads that are displayed in columns. A yellow arrow identifies the thread that
    is currently being executed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the columns include the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**Flag**: If we want to keep track of a particular thread, we can flag it.
    This can be done by clicking on the flag icon.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ID: This shows the unique identification number allocated to each thread.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Managed ID: This shows the managed identification number assigned to each thread.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Category: Every thread is assigned a unique category that helps us to identify
    whether it is a GUI thread (main thread) or a worker thread.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Name: This shows a name for each thread, or is displayed as <No Name>.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location: This assists in identifying where the thread is executing. We can
    drill down to see the complete call stack.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can flag threads that we want to monitor by clicking on the flag icon. To
    view only flagged threads, we can click on the Show Flagged Threads Only option
    in the Threads window:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e92eedb-469a-47c7-b5fa-4a7fb5659124.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'Another cool feature of the Threads window is that we can freeze threads that
    we think might be causing issues during debugging in order to monitor application
    behavior. The system will not begin execution of frozen threads even if it has
    sufficient resources available. When frozen, a thread moves to a suspended state:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81458ecd-958d-4a8d-8eaf-5cdbfaca27b2.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'While debugging, we can also switch execution from one thread to another either by
    right-clicking the thread in the Threads window, or by double-clicking it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c136a204-8d8b-4f98-b882-f50a5e71041d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Visual Studio also supports debugging tasks using Parallel Stacks windows. We
    will take a look at this in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Using Parallel Stacks windows
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Parallel Stacks window is a very good tool for debugging threads and tasks,
    and this has been introduced in later versions of Visual Studio. We can open the Parallel
    Stacks window while debugging by navigating to Debug | Windows | Parallel Stacks:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/031f99a8-0724-4485-b449-1f9e6c1e79cf.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, there are various views within
    which we can switch while working on the Parallel Stacks window. We will learn
    about how to debug using Parallel Stacks windows and these views in our next topic.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Debugging using Parallel Stacks windows
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Parallel Stacks windows have a drop-down menu with two options. We can switch
    between these options to get several views within the Parallel Stacks window.
    These views are the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Threads view
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks view
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's examine these views in detail in the following sections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Threads view
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Threads view shows call stacks for all threads running while debugging
    an application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea22ccb9-4c0b-4bac-a5b9-897cb63ec33c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'The yellow arrow shows the current location where the code is executing. Hovering
    over any method from the Parallel Stacks window opens up the Threads window with
    information about the thread currently being executed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f462501f-0139-4c9d-af35-75e74a3a1790.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'We can switch to any other method by double-clicking on it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4935cbee-90c0-4d42-aeb3-84678f412331.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'We can also switch to Method View to see the complete call stack:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffd48e2f-51fe-4ed0-b50b-251cd280037d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Method View is very handy for debugging a call stack to find out which values
    were passed to a method at any point in time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Tasks view
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We should use the Tasks view if we are using the Task Parallel Library to create
    `System.Threading.Tasks.Task` objects in our code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d7406d4-8e16-454e-a154-b53080dc26e2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: As you can see in the following screenshot, there are currently 10 tasks that
    are being executed, each shown along with the current line of execution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'The status of all running tasks can be seen by hovering over any method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e011cbb-a479-477a-a1f6-37f32a3799a0.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: The Tasks window helps us in analyzing the performance issues in an application
    arising from slow method calls or deadlocks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Debugging using the Parallel Watch window
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can make use of Parallel Watch windows when we want to see the value of
    a variable on different threads. Consider the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code creates multiple tasks and every task runs a `for` loop for 100 iterations.
    In every iteration, the thread goes to sleep for 100 ms. We allow the code to
    run for some time and then hit a breakpoint. We can see all this in action using
    the Parallel Watch window. We can open Parallel Watch windows from Debug | Windows
    | Parallel Watch. We can open four such windows, and each window can monitor only
    one variable value on different tasks at a time:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2aa59640-50d8-47ec-ae8f-c45cefea0358.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding code, we want to monitor the value of j. Consequently,
    we write j in the header of the third column and press the *Enter* key. This adds
    j to the watch window shown here and we can see the value of j on all threads/tasks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Using Concurrency Visualizer
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Concurrency Visualizer is a very handy addition to the Visual Studio tools
    collection. It doesn''t get shipped by default in Visual Studio, but can be downloaded
    from the Visual Studio Marketplace here: [https://marketplace.visualstudio.com](https://marketplace.visualstudio.com).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: This is a very advanced tool that can be used to troubleshoot complex threading
    issues such as performance bottlenecks, thread contention issues, checking CPU
    utilization, cross-core thread migrations, and areas of overlapped I/O.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Concurrency Visualizer only supports Windows/console projects and is not available
    for web projects. Let''s consider the following code in a console application:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we created four tasks that run a compute task such as
    1*1 indefinitely. We will then put a breakpoint inside the `while` loop and open
    Concurrency Visualizer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will run the preceding code from Visual Studio and, while the code
    is running, click Attach to Process... as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/193721e2-bfcb-468a-a793-5871a25f28b5.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'You first need to install Concurrency Visualizer for your version of Visual
    Studio. Concurrency Visualizer for Visual Studio 2017 can be found here: [https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ConcurrencyVisualizer2017#overview](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ConcurrencyVisualizer2017#overview).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Once attached, Concurrency Visualizer will stop profiling. We will let the application
    run for some time so that it can collect enough data to review and then stop the
    profiler from generating views.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: By default, this opens the Utilization view, which is one of the three views
    present in Concurrency Visualizer. The other two are the Threads and Cores views.
    We will explore the Utilization view in the following section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Utilization view
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Utilization view shows system activity across all processors. Here is a
    snapshot of the concurrency profiler once it stops profiling:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b4edc2d-78ac-477b-a15b-34dcd42de015.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, there are four cores that have
    100% CPU load. This is indicated by the green color. This view is typically used
    to get a high-level overview of concurrency status.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Threads view
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Threads view provides a very detailed analysis of the current system state.
    Through this, we can identity whether threads are executing or blocking on account
    of issues such as I/O and synchronization:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe634fe0-30d4-4624-875c-63f3402e3a28.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: This view becomes very helpful in identifying and fixing performance bottlenecks
    in a system. We can therefore clearly identify how much time is spent in actual
    execution and how much time is spent dealing with synchronization issues.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Cores view
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Cores view can be used to identify how many times the threads perform a
    core switch:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54c81a5c-71a2-4f56-8c7d-d1c69529ee7e.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding diagram, our four threads with the IDs 12112,
    1604, 16928, and 4928 perform context switches across cores almost 60% of the
    time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Armed with an understanding of all three views that are present in Concurrency
    Visualizer, we have come to the end of this chapter. Now, let's summarize what
    we have learned.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to debug a multithreaded application using
    Thread windows for monitoring innumerable information captured by the .NET environment.
    We also learned how we can have a better insight into an application by using
    flag threads, switching among threads, having Threads and Tasks views in a Parallel
    Stacks window, opening up multiple Parallel Watch windows, and observing single-variable
    values on different tasks at a time.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, we explored Concurrency Visualizer, which is an advanced
    tool used to troubleshoot complex threading issues that support Windows/console
    projects only.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about writing unit test cases for parallel and
    async code and the problems associated with this. In addition, we'll learn about
    the challenges involved in setting up mock objects and how we can solve them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为并行和异步代码编写单元测试用例，以及与此相关的问题。此外，我们还将了解设置模拟对象涉及的挑战以及如何解决这些问题。
- en: Questions
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these is not a valid window for debugging threads in Visual Studio?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中调试线程时，哪个不是有效窗口？
- en: Parallel Threads
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行线程
- en: Parallel Stack
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行堆栈
- en: GPU Thread
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GPU 线程
- en: Parallel Watch
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行监视
- en: We can track a particular thread while debugging by flagging it.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过标记来跟踪调试特定的线程。
- en: 'True'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Which of these is not a valid view in Parallel Watch windows?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行监视窗口中哪个不是有效视图？
- en: Tasks
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务
- en: Process
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程
- en: Threads
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程
- en: How can we check a call stack of threads?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何检查线程的调用堆栈？
- en: Method view
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法视图
- en: Task view
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务视图
- en: Which of these is not a valid view for Concurrency Visualizer?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是并发可视化器的有效视图？
- en: Threads view
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程视图
- en: Cores view
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 核心视图
- en: Process view
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程视图
- en: Further reading
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can read about parallel programming and debugging techniques at the following
    links:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中阅读有关并行编程和调试技术的信息：
- en: '[https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming](https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming](https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming)'
- en: '[https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook](https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook](https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook)'
