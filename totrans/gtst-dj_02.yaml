- en: Chapter 2. Creating a Django Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, you will have all the necessary elements to begin
    programming with Django. A website developed with Django is a project that contains
    one or more applications. Indeed, when a website becomes more important, it becomes
    necessary to logically separate it into several modules. These modules are then
    placed in the project that corresponds to the website. In this book, we will not
    need to create many applications, but they can be very helpful in some cases.
    Indeed, if one day you create an application and you want to use it in another
    project, you will need to copy and adapt this application to the new project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use Django, you need to install the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3, to enjoy the third version innovations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setuptools is a module that simplifies the installation of the external Python
    module. However, it does not manage to uninstall the module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIP extends the possibilities of setuptools by removing packages, using easier
    syntax, and providing other benefits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django, which that we are going to install thanks to PIP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These installations will be compatible with Windows, Linux, and Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use all the tools that we have talked about so far, we first need to install
    Python 3\. The following sections describe how we can install Python on different
    operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python 3 for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To download the Python executable, visit [http://www.python.org/download/](http://www.python.org/download/)
    and download the **Python MSI** file. Please make sure that you choose the right
    version concerning your platform. The Python installation may need an administrator
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'For all the stages of the Python installation, you can leave all the settings
    at their default values. If the installation has been done properly, you should
    see the following dialog window open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Python 3 for Windows](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Python 3 for Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up Python 3 on Linux, we can use the packet manager APT with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: We need to confirm the modifications proposed by APT.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python 3 for Mac OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The latest version of Mac OS already has a version of Python. However, Version
    2 of Python is installed, and we would like to install Version 3\. To do this,
    visit [https://www.python.org/download/](https://www.python.org/download/) and
    download the right version. Then, open the file with the extension `.dmp`. Finally,
    run the file with the extension `.mpkg`. If you get an error such as `Python cannot
    be opened because it is from an unidentified developer`, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In **Finder**, locate the Python install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *ctrl* key and then click on the app's icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Open** from the shortcut menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing setuptools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PIP is a dependence of setuptools. We need to install setuptools to use PIP.
    The following sections describe how we can install setuptools on different operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing setuptools for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the setuptools executable, you have to go to the PyPI website at
    [https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools).
    Then, we need to click on **Downloads** and select the right version. In this
    book, we use Version 1.1, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing setuptools for Windows](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing setuptools for Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using APT, we do not need to install setuptools. Indeed, APT will automatically
    install it before installing PIP.
  prefs: []
  type: TYPE_NORMAL
- en: Installing setuptools for Mac OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we install PIP with the `get-pip.py` file, setuptools will be directly
    installed. Therefore, we do not need to install it for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PIP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PIP is very popular among Python users, and using PIP is a Django community
    best practice. It handles the package installation, performs updates, and removes
    all the Python package extensions. Thanks to this, we can install all the required
    packages for Python.
  prefs: []
  type: TYPE_NORMAL
- en: If you have installed Python 3.4 or later, PIP is included with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PIP for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install PIP, first download it from [https://pypi.python.org/pypi/pip/1.5.4](https://pypi.python.org/pypi/pip/1.5.4).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to install PIP from the executable, but don''t forget to define
    the right Python installation folder, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PIP for Windows](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For the next set of steps, go with the default options and complete the installation.
    With PIP, we will be installing all the required Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PIP for Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install PIP and all the components including setuptools for Linux, you have
    to use the `get-pip.py` file with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing PIP for Mac OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install PIP on Mac OS, we must use the `get-pip.py` file in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will then install the framework on which we will be working. The following
    sections describe how we can install Django on different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Django with PIP, you have to open a command prompt and go to the
    `Scripts` directory that you can find in the `Python` folder. You can install
    Django with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: PIP will download and install the Django packages in the `site-packages` repository
    of Python.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django for Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To facilitate the PIP utilization that we have just installed, we have to look
    for the version installed on the system and define an alias to refer to the PIP
    version installed. Do not forget to execute the following commands as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first command looks for a usable command containing the word `pip`. You
    will certainly find a line such as `pip-3.2`. It's on this command that we will
    define an alias with the second command.
  prefs: []
  type: TYPE_NORMAL
- en: The third command installs Version 1.6 of Django.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django for Mac OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to use PIP more easily, we can create a symbolic link with the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then install Django using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Starting your project with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start using Django, you need to create an environment for your applications.
    We will create a Django project. This project will then contain our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the project of our application, we need to run the following command
    using the `django-admin.py` file (you can find it in the `Python33\Scripts` folder):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So as to facilitate the use of the Django commands, we can set the environmental
    variable of Windows. To do this, you must perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **My computer** on the desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Advanced System Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Environmental Variable**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add or update the `PATH` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it does not exist, create the `PATH` variable and set its value as `C:\Python33/Scripts`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it exists, append `;C:\Python33\Scripts` to the existing value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, you can use the precedent command without the need to put yourself in the
    `Python33/Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are different ways to perform the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will be performed in all cases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will be performed if we have defined `C:\Python33\Scripts`
    in the `PATH` variable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will be performed if we have defined `C:\Python33\Scripts`
    in the `PATH` variable and the `.py` extension file is defined to run with Python:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a `Work_manager` folder in the folder from where you run
    the command. We will find a folder and a file in that folder:'
  prefs: []
  type: TYPE_NORMAL
- en: The `manage.py` file will be used for actions performed on the project such
    as starting the development server or synchronizing the database with the models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Work_manager` folder represents an application of our project. By default,
    the `startproject` command creates a new application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Work_manager` folder contains two very important files:'
  prefs: []
  type: TYPE_NORMAL
- en: The `settings.py` file contains the parameters of our project. This file is
    common to all our applications. We use it to define the debug mode, configure
    the database, or define Django packages that we will use. The `settings.py` file
    allows us to do more things, but our use will be limited to what has been previously
    described.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `urls.py` file contains all our URLs. It is with this file that we make
    the routing in Django. We will cover this in the next chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will not program our application in the `Work_manager` folder because we
    want to create our own `Task_manager` application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, run the following command using the `manage.py` file created by the
    `startproject` command You must run the following command in the `Work_manager`
    folder which contains `manage.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a `TasksManager` folder in the folder of our project.
    This folder contains five files:'
  prefs: []
  type: TYPE_NORMAL
- en: The `__ init__.py` file defines a package. Python needs it to differentiate
    between the standard folders and the packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `admin.py` file is not useful at this moment. It contains the models that
    need to be incorporated in the administration module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `models.py` file contains all the models of our application. We use it a
    lot for the development of our application. Models allow us to create our database
    and store information. We will discuss this in [Chapter 5](part0042.html#page
    "Chapter 5. Working with Models"), *Working with Models*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tests.py` file contains the unit tests of our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `views.py` file can contain views. This file will contain all the actions
    before sending the HTML page to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know the most important files of Django, we can configure our project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To configure our project or our application, we need to edit the `settings.py`
    file in the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file contains variables. These variables are the settings that Django
    reads when initializing the web app. The following are a few of these variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEBUG`: This parameter must be set to `True` throughout the duration of development
    because it is the one that enables the errors to be displayed. Do not forget to
    set it to `False` when putting the project into production, because an error gives
    very sensitive information about the site security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME_ZONE`: This parameter sets the region referring to which it must calculate
    dates and times. The default is `UTC`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEFAULT_CHARSET`: This sets the character encoding used. On the `task_manager`
    application, we use UTF-8 encoding to simplify internationalization. To do this,
    you must add a line as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`LANGUAGE_CODE`: This sets the language to be used on the website. This is
    the main useful parameter for internationalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MIDDLEWARE_CLASSES`: This defines the different middleware used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Middleware are classes and methods, including the methods that are performed
    during the request process. To simplify the beginning of the development, we will
    remove a middleware from that parameter. This requires you to comment out the
    line by adding `#` in front of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We'll talk about this middleware in a later chapter to explain its operation
    and importance.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the general settings of Django, we can start developing
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have installed all the software needed to use Django. In
    this chapter, we learned how to create a Django project and an application. We
    also learned how to configure an application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start the Django development with an example of
    a web page containing the text `Hello World!`.
  prefs: []
  type: TYPE_NORMAL
