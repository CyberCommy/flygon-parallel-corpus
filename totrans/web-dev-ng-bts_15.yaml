- en: Deploying Angular Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have completed building your application, it then has to be deployed
    to your test environment for the testing team to test it before deploying the
    application to your production environment for your users to use it. Although
    you can host your application virtually anywhere you like, there are three main
    ways in which you can package and deploy your Angular application. We''ll explore
    these methods in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Angular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying composite Angular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying to GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Angular applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying our app is just as important as building the app itself. After all,
    our users need to access it; otherwise, it's not worth building, right?
  prefs: []
  type: TYPE_NORMAL
- en: Before we learn and explore how to deploy apps in detail, it's a prerequisite
    to have a server up and running. The server can be hosted on any operating system,
    be it Windows or Linux, and can be run on any application server, such as Apache
    Tomcat or IIS. Alternatively, we can opt to choose any reliable cloud provider,
    such as AWS, Azure, or Bluehost, which offer hosting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Technology stacks can vary from project to project; some clients prefer Java-based
    microservices, some may prefer .NET, and others may prefer Ruby on Rails. We will
    need to integrate our Angular applications with the backend APIs. The client-side
    code will mostly be Angular, which essentially means that Angular apps can be
    deployed and run on any server with any backend API services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to use the XAMPP server. XAMPP is a free distribution
    of Apache, MySQL, which makes it easy to set up our local server instantly and
    easily. You can download it at [https://www.apachefriends.org/download.html](https://www.apachefriends.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: Compilation options for Angular applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am sure by now you are aware that all the code we write for Angular is in
    TypeScript and that we will need to compile and generate deployable files using
    the `ng` command: `ng build`. This command will generate the corresponding equivalent
    JavaScript code that can just be copied into the environment we are trying to
    deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Angular applications is very simple and easy. In real-time scenarios,
    the build and deploy commands are integrated into the build pipelines. A common
    practice is to have a single Angular project running in one repository. However,
    we can also run multiple projects in a single repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will first learn about various compilation options we can
    consider for the deployment of our Angular applications. In the sections to follow,
    we will learn how to deploy a standalone application and also how to deploy composite
    Angular applications. Before we learn how to deploy our app, it's important to
    understand what happens when we build the application source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular has two compilation options, which are applied based on the commands
    and meta flags we use:'
  prefs: []
  type: TYPE_NORMAL
- en: Just-in-time compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ahead-of-time compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is just-in-time compilation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular **just-in-time** (**JIT**) compilation refers to compiling the
    code in the browser at runtime. This is the default behavior whenever we run the `ng
    build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This mechanism will add overhead to the request and Bootstrap time. The changes
    are reflected during runtime in our browser, which is great when developing an
    application. This option allows developers to quickly test changes while developing.
  prefs: []
  type: TYPE_NORMAL
- en: What is ahead-of-time compilation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular's **ahead-of-time** (**AOT**) compilation means compiling the source
    TypeScript code, components, Angular HTML, libraries, and modules into the native
    JavaScript so that it can run on any browser smoothly. In other words, Angular
    will covert the code *before* it's downloaded by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the benefits of AOT:'
  prefs: []
  type: TYPE_NORMAL
- en: Better security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller framework and application size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finds errors well in advance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ahead Of Time or just AOT compilation is applied by default when we run the `ng
    build --prod` meta flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have understood the different types of compilations offered by Angular,
    it's finally time to actually deploy an Angular app. In the next section, we will
    learn how to deploy the Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a standalone Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Armed with knowledge about deployment and compilation strategies, it's time
    to deploy our Angular application. When we run the `ng build` and `ng build --prod`
    commands, the native JavaScript files are generated, which we can deploy to our
    server. This is good if we are trying to deploy a single project application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to deploy more complex use cases, such as
    when we have multiple projects in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to keep our applications simple in order for our readers to be
    able to follow along with these steps easily. However, you can practice the deployment
    commands by deploying the Angular projects you have developed so far. Let''s get
    started by creating a new Angular app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Angular CLI, let''s quickly use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding run command. We
    have just installed the Angular CLI, which we will use to generate our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26260c53-818c-4588-9ab3-c23b88d3d986.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have successfully installed the Angular CLI, it''s time to create
    an Angular app and call it `prod-ready`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding command, we have generated a new project. The following screenshot
    shows the output that is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8bdba94-acfc-4d32-92bf-b6cb8bb01094.png)'
  prefs: []
  type: TYPE_IMG
- en: Beautiful! We have our newly generated application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s navigate to the `prod-ready` application folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'All done. We are not going to change or add any new components. For now, I
    want you to understand the simplest way to deploy an app. Now, fire up the app
    using the `ng serve` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will get the application started, and we should see the
    output displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b0be2df4-0265-4fb1-a33e-6d322eec6bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Launch the browser and then type `http://localhost:4200`. The default vanilla
    application should be displayed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4e0a92d8-d649-4218-8a1a-ef756e4161dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome. So far, so good. We got our app working on our local environment and
    now it's time to deploy it to our application—that's right!
  prefs: []
  type: TYPE_NORMAL
- en: To make you comfortable with the whole deployment process, we will deploy the
    vanilla application as it is, without making any changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy, run the following `ng` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command runs successfully, you should see that the following folders
    and files have been created. Let''s take a look at some of the important things
    to note:'
  prefs: []
  type: TYPE_NORMAL
- en: You should notice a new folder called `dist/<defaultProject>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should also notice the following files created inside the `dist` folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runtime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polyfills`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding `build` command is given as follows. The output
    will be under the `dist` folder with the same application name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eda1b30e-3db1-434d-a42b-ae752c1291e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We don''t have to necessarily use the default folder name; that is, we can
    provide the output path and folder name as an argument and Angular will generate
    the code in that folder. It''s easy to customize the output directory where we
    would want our files to be generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding command and we should see our custom folder and files generated
    in our folder. In the preceding command, we specified that we want our files to
    be generated in the folder named `compiled`, and we provided the path. The following
    is a screenshot after the command has run successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e754293e-e766-45f6-9696-c1bc715893b6.png)'
  prefs: []
  type: TYPE_IMG
- en: That's all we need to do to generate and deploy our Angular application. Just
    copy all the files to the root directory on your server and that's it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to deploy a more complex architecture
    of an Angular application, and we will then go on to deploy the composite application
    in multiple ways.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying composite Angular applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to deploy a standalone Angular application,
    which is fairly straightforward. However, we can be in situations where we may
    have to build and deploy multiple applications all running in a single repository.
    Is it possible? Certainly. In this section, we will create an Angular repository
    with multiple projects and learn how to deploy a composite application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying multiple Angular applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a more realistic real-world application, we will need to run multiple Angular
    applications, which will be composed of multiple projects, libraries, modules,
    and microservices, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b5cbe12d-1f1d-44e7-935e-b085fe9f80c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding diagram, some of the important things to note are detailed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple Angular projects and applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Library #1** and **Library #2** can be reused in multiple projects simply
    by importing the libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the development phase, we will create multiple modules that can also
    be reused in multiple projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, let''s jump right into it and create multiple projects, libraries, and
    modules. Finally, we''ll package the app in different ways. So, let''s begin by
    getting our Angular application up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first. We will need to generate an application, and we are going
    to use Angular CLI to generate the application. We will first need to install
    the Angular CLI using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/33b7aa6f-e3b6-4bbb-b683-e71fe4c0a277.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have installed Angular CLI, let''s create the app using the following
    command. We are calling it `shopping-cart`. Now, run the following `ng` command
    to generate the new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding command, we are generating a new application called `shopping-cart`.
    The output of the preceding command is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e7313e6-f27c-4f81-8203-530d35277916.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have now created our new app called `shopping cart`. Let''s modify `app.component.html`
    and add two `routerLink` hyperlinks named `list-jackets` and `list-vendors`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have created two links in the `app.component.html`
    file. The result is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7302b26d-2c27-43fd-8054-6e28bd855495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So far, so good. Essentially, we have an Angular application up and running. Now,
    we are going to learn how to run and deploy multiple Angular projects inside the
    same repository. In order to do so, we will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new application in the same repository using the following
    command. We are generating a new application called `jackets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We are creating a new application using the `ng` command, which we''ll name `jackets`.
    We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46adbd0d-be87-4f54-b76e-f828d3d8bdcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Woohoo! With the Angular CLI schematics, it''s really simple to create multiple
    projects inside the same app. Take a look at the files that have been autogenerated
    and some of the files that have been updated by the Angular CLI for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9c8081a0-95e5-4fb2-acfc-16005feecb3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look carefully, you''ll notice that the following are some of the important
    things that have happened to our application structure and files:'
  prefs: []
  type: TYPE_NORMAL
- en: A new folder called `Projects` is auto-created and its corresponding entry is
    generated in the `angular.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Projects` folder, we will see the new `Jackets` project with the same
    default vanilla application files that have been generated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to verify whether the new `Jackets` project was added, let''s check out
    the `Angular.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0af62078-7b76-407b-9c2e-53c0bd5970c0.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice inside the `Angular.json` file that we have project-specific
    entries for shopping-cart, shopping-cart-e2e, jackets, and jackets-e2e. Beautiful.
    Technically speaking, we are now running two apps inside the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s now time to extend our application by adding a few components, libraries,
    and modules. First, we will need to create a component inside our `jackets` project.
    Run the following `ng` command to generate the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding command and we should see the component and respective files
    generated. We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e2d27a15-4972-43dd-9abf-43997a02d5da.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have created a new component inside the `Jackets` project, it's
    time to add it to `app-routing.module.ts` so that it's available to use across
    the `Jackets` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following code snippet, we are importing the newly created component
    inside the `app-routing.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After importing the component, it''s time to create a route for our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, we are creating `list-jackets` and `list-vendors`
    routes that are mapped to the respective `JacketListComponent` and `VendorsComponent` components. Here
    are two important things to note in the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We are running multiple Angular projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are linking components from various projects inside each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have already added the router links to `app.component.html`. Now, let''s
    fire up our application by running the `ng serve` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the `http://localhost:4200` browser and we should see the following
    output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bb14f0e5-8b0a-4f73-a4a4-5be53a9d7115.png)'
  prefs: []
  type: TYPE_IMG
- en: So, now we have two apps running and we have components that are shared across
    different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great. Now, why don''t we add a few libraries that we can share between multiple
    projects? Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new Angular library called `vendors`. We will use the `ng`
    command and call the library `vendors`. Let''s run the following command to generate
    the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding command successfully, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dad9e045-56b4-4d82-95ec-25436dffeb3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the library is generated, Angular CLI will create the following folders
    and files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e23bad0f-b730-478d-b4c2-a8bc80896fcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some important things to note once the command runs successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `Projects`, a new `Vendors` library project is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular will also make the necessary changes and entries in the `Angular.json`
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that `projecType` is of the `library` type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the data displayed for the newly created library
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c5ac8cc0-8829-42da-8b72-21d2683133fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open the `vendors` folder and, under `src/lib`, edit the `vendors.component.ts`
    file and add some fancy text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, we have created the router link for the `vendor` component earlier,
    so we should see the changes reflected in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/52f3334a-4932-4d76-9722-1a9843029070.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have built an Angular app that has multiple projects, libraries,
    and routing systems to share different components, it's time to deploy the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deployment is simple and is just like what we did for a standalone app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run the command, here are some important things that will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: To generate the final deployment files, we are running the `ng build` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the `--prod` meta flag, to which we will apply AOT compilation
    while compiling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most importantly, we need to pass the `--base-href` meta flag, which will point
    to the server's root folder/path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a proper `--base-href` value, Angular applications will not work properly
    and will give you errors to link the generated files.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60bfd6d8-0aca-4b76-9b55-37b1b7920132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous section, we already know that after we run the `build` command,
    Angular will generate the compiled folders and files, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48fce323-8215-47f6-bbe9-22e40339499d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some important points to note from the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: The command will generate the output of compiled files that have multiple projects,
    libraries, and components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carefully consider the `--base-href` value we have set. We are running XAMPP
    locally, hence the path is pointing to the localhost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's copy all the code from the `dist` folder and paste it into our `XAMPP`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the Angular application using the local server and you should see the
    output displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f42705cd-a426-464f-aea1-13c4ba5f2909.png)'
  prefs: []
  type: TYPE_IMG
- en: That's really cool! Even so, we can improve this a lot. In a more realistic
    setup, any large Angular implementations will have feature teams, and the library
    or module developed by one team should be easily shareable with other teams as
    a module. That's where writing reusable modules comes into the picture. We are
    going to learn how to distribute Angular modules as `npm` modules.
  prefs: []
  type: TYPE_NORMAL
- en: Packing the Angular project as an npm package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s learn how to export our Angular project as an `npm` module. We
    will continue to use the same `vendors` library that we created in the previous
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we do *not* wish to deploy the entire application, rather, we only
    want to deploy the `vendors` library. We will use the same `ng build` command
    to build the `vendors` Angular project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command is successfully executed, we will see that Angular will generate
    the compiled files for our `vendors` project under the `dist` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9123103f-b243-4a45-a860-9d877123ab17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the `dist/vendors` folder and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using the `npm pack` command to generate a package out of the current
    folder, which is compiled of files from the `vendors` project. We should see the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4deb7785-1692-41da-9b44-c5a110484281.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful execution, we will see the `vendors-0.01.tgz` file created
    in the folder. We can now distribute this file as an `npm` package, which can
    be reused across any projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0d01783b-9eec-4ce6-a355-1264b7c5680c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now give it a test drive, by installing the newly generated `npm` module
    into our application. To install the package, run the `npm install` command by
    pointing to `vendors-0.0.1.tgz`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon completion, we should see the following output informing us that the package
    has been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/45a011d9-bb4e-4712-9b1c-ede73fd07d4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also verify whether the package was added successfully to the `package.json`
    file. We should see an entry in `package.json` displayed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cb95d351-8480-446a-a1e7-74eff6da775e.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! In this section, we learned how to deploy the Angular application as
    a standalone app and also as a composite app.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to create a package of the Angular project that can be distributed
    and used in multiple Angular projects.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Angular apps to GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, we learned about deploying our standalone app and deploying
    the composite app to any server by exporting the compiled source files for the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to deploy our Angular app to GitHub Pages.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we have created many Angular projects and now it's time
    to host them, for free!
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying applications in GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Pages are websites for your projects hosted on GitHub. Did we say free?
    Of course, the GitHub Pages are free! Just edit, push, and view the changes live
    on your free website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to create and host our application on GitHub Pages step
    by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started by installing Angular CLI using the `npm install` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon completion of the command, it''s time to create a new Angular project.
    Let''s call it `deploying-angular`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command is executed successfully, we should see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/355fa5a9-71f9-4309-afac-afccbb1fbd3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s time to initiate a Git repository. We can do that by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution, you will see the repository initialized or, in the
    following case, if a repository already exists, then it will be reinitialized as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e2570861-f457-4a8d-9943-60d61df9822e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Feel free to make any changes to `app.component.html` or any files that you
    would want to modify. Then, once you are ready to deploy, first commit the code/changes
    by executing the `commit` Git command. We can also pass the `-m` meta flag and
    add a message to the commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to set the `origin` to the repository. The following command
    sets the remote `origin` to the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: All right. All set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the superpowers come in. To deploy your Angular app to GitHub directly,
    we will need to install a package called `angular-cli-ghpages`. This is an official
    distribution to deploy Angular apps to GitHub Pages directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output we will get up on running the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a6a2d80-20cd-4530-854d-a6fefd2b3cf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have `angular-cli-ghpages` installed, it's time to build our application
    and get the compiled source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the `ng build` command with the `--prod` meta flag and also set
    `--base-href`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `--base-href` flag is pointing to the source repository on GitHub. You will
    need to register with GitHub and get your authorization token in order to host
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `base href` URL, which is the author''s GitHub home page, and the
    corresponding `deploying-angular` repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we build the Angular application, we will see that the compiled source
    code is generated under `dist/<defaultProject> -defaultProject`. The compiled
    source is usually the folder name that we specify as the application name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2aeb323b-e9e9-4a82-90ee-16fb32d3a1d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our compiled files generated, it''s time to deploy the application
    to GitHub Pages. We do this by running the `npx ngh --no-silent` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that, optionally, we will need to mention the corresponding `dist`
    folder that we want to deploy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/39352a35-0863-49d5-9031-fcfcea921cf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful execution of the command, the package we installed for deploying
    the Angular application to GitHub Pages will run the required jobs, such as cleaning,
    fetching the origin, checking out the code, and, finally, pushing the latest code
    to the repository, and will then be ready to host in GitHub Pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e17ec2fe-544d-4efd-ae53-509728514649.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the commands are executed, navigate to your GitHub account and click on
    Settings under the repository. You will see the site published to the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/73cda76d-6f29-4a9f-8286-5007b7ede63b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the link displayed under the repository and we should see that our
    app is up and running!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations! We just published our first Angular application to GitHub
    Pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cadc6b54-9240-4f47-a095-39aaf69c829b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding series of steps, we learned how to deploy our Angular application
    to GitHub Pages. In more realistic scenarios, we will also need to deploy the
    APIs or backend services to our server. We can do that by deploying our APIs to
    either Firebase or self-hosted servers.
  prefs: []
  type: TYPE_NORMAL
- en: Now, go ahead and just repeat the same for all the projects and applications
    created so far.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying an application holds extreme importance: all our hard work of developing will
    show up once the site is alive.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Angular applications is pretty straightforward if you generate the
    required compiled source code, and, with latest versions of Angular, the AOT compilation
    defaults to any build generated with the `--prod meta` flag. We learned about
    the importance of AOT and how critical it is to have it for overall application
    performance and security. We learned to deploy a standalone Angular application
    and also composite Angular applications with multiple projects, libraries, and
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about deploying our Angular application to GitHub Pages
    using the official `angular-cli-ghpages` package.
  prefs: []
  type: TYPE_NORMAL
- en: That brings us to the conclusion of our last chapter in this book. We have come
    a long way in our learning journey, from understanding the basics of the TypeScript
    language to learning how to build our Angular applications by implementing the
    Angular framework's components, routing systems, directives, pipes, forms, backend
    services, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about implementing various CSS frameworks, such as Bootstrap,
    Angular Material, and Flex layout with our Angular applications. Additionally,
    we learned how to design and make our application's UI much more appealing and
    interactive.
  prefs: []
  type: TYPE_NORMAL
- en: We explored unit testing using the Jasmine and Karma frameworks, which ensures
    that our applications are well-tested and are rock-solid implementations.
  prefs: []
  type: TYPE_NORMAL
- en: We have also implemented the user authentication mechanism using Auth0 and Firebase
    as part of learning Angular Advanced topics. Finally, we covered the deployment
    of Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: That is a 360-degree overview of all aspects of application development using
    the Angular framework. We hope you now feel empowered to build world-class products
    using the Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: We wish you all the best and look forward to hearing about your success stories
    soon.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck! Onward and upward.
  prefs: []
  type: TYPE_NORMAL
