- en: Useful Mind Hacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've talked a lot throughout this book about ways to think about development,
    and we've suggested once or twice before that the factor that differentiates an
    effective developer from an amateur isn't so much what they know as how they think.
  prefs: []
  type: TYPE_NORMAL
- en: Effective thinking is a skill, and, like any other, it can be practiced. As
    we saw in the last chapter, you can simplify a complicated problem by breaking
    it down and finding a starting point. Let's take a moment now to explore a few
    more tricks that can help.
  prefs: []
  type: TYPE_NORMAL
- en: Rubber-duck debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have heard this phrase before: **rubber-duck debugging**. It's been
    around a long while and it's one of the most effective problem-solving tricks
    you can perform. The idea here is simple. Take anybody who will listen, and if
    there's nobody around, a rubber duck on your desk would do just as well (hence
    the name). Describe the problem you're trying to solve, out loud, and in simple
    terms. This forces you to organize your thoughts about the problem. If you find
    that you can't describe the problem in clear, simple terms, then you don't understand
    it yet. You're not ready to try to answer the question because you're not yet
    clear on what question you need to ask. Play with it and explore it until you
    really can phrase it in simple terms. Often, this process alone will suggest a
    clear solution to you, and if not, you now have a much better shot at finding
    a solution because you now know what question you're asking. Do this out loud
    or in writing. It's too easy to stay fuzzy and gloss over things when you let
    it tumble around in your mind. Force yourself to put the words in order. You'll
    be surprised by how powerful and effective this technique is.
  prefs: []
  type: TYPE_NORMAL
- en: Just the facts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you realize something is going wrong in your software, write down what
    you see happening. Not what you think you see happening—just what you see. It's
    far too easy in debugging to jump to a conclusion about why something is happening
    and then dive into trying to solve that problem before you've really ascertained
    what problem you actually have. Take a step back and just look at what you can
    concretely observe.
  prefs: []
  type: TYPE_NORMAL
- en: Think like this: *That torch is appearing in the wrong position when it spawns*, as
    opposed to *The spawning routine is putting things in the wrong place*. You don't
    know that yet. You just know that one torch isn't where you expected it to be.
    Do an experiment. Spawn a different object. Does it appear in the right place?
    OK, then maybe there's a weird offset in your model. Another object is also out
    of position? OK, then, yes, it might be the routine that's spawning it. Or it
    might be some collision in your level that's keeping things from spawning where
    you want them and is shoving them to the closest available spot. Try moving the
    spawn point and see whether that changes things.
  prefs: []
  type: TYPE_NORMAL
- en: See what we're doing here? We're applying a basic scientific method to the problem
    we're solving. What do we see? What can we think of that might be causing that?
    How could we test it to see whether we're right? What new information did our
    test just give us? Do we know enough to work on a solution now?
  prefs: []
  type: TYPE_NORMAL
- en: It's very very easy to jump to a conclusion and burn a lot of time debugging
    the wrong problem. Taking the time to take a step back will help to keep you from
    doing this and keep you from a lot of frustrated stabbing in the dark. You'll
    solve problems this way.
  prefs: []
  type: TYPE_NORMAL
- en: Describing your solutions in positive terms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked a bit about *cargo-cult programming* in [Chapter 10](9090733f-bb14-4203-836c-f1f8e3c00dbe.xhtml),
    *Creating a Multiplayer Experience in VR*, and made you promise not to do it.
    To take this idea further, let's look at a phrase we'd like you never to utter: *It
    works—don't touch it! *
  prefs: []
  type: TYPE_NORMAL
- en: 'This isn''t how we describe a robust system. If you feel tempted to say this,
    congratulations! You''re at step one of the *make it work; make it right; make
    it fast* process, and that means you''re not done. What you''ve created is a successful
    example of what your ultimate solution may look like, but now it''s time to start
    the *make it right* phase. You''ve met the requirements for this step of your
    development when you can give three answers about your solution in positive terms:'
  prefs: []
  type: TYPE_NORMAL
- en: It needs to solve X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I know it solves X because....
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I know it's safe because....
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember these three statements. Don''t skip them. You should be able to describe
    in clear, simple terms what you''re trying to do. (Your rubber duck is a good
    listener for this too.) You should be able to explain why the thing you just did
    takes care of the thing you''re trying to do, and you should be able to do this
    in positive terms: *We needed to make sure the player can''t fire their weapon
    while the pause menu is up. This takes care of it by having the input handler
    check for a paused state before it calls the fire function.* Finally, you should
    be able to explain why this thing is safe to do: *I know this is safe because
    we''re ensuring that we clear any existing input when the pause state begins,
    and the input handler knows to allow only the unpause command through.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Discipline yourself to do this, and use clear, positive terms. If you''re being
    vague, you''re hiding from a thing you need to solve. Make this a habit: describe
    what you''re trying to do, why you know your solution does it, and why you know
    it''s safe to do it. You''ll head off a lot of bugs before they ever even have
    a chance to make it into your software this way.'
  prefs: []
  type: TYPE_NORMAL
- en: Plan how you're going to maintain and debug your code when you write it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Technical debt** is an insidious thing. This term describes the downstream
    cost of fixing a mess that was left in the code, usually as a result of rushed
    development. And it''s a project-killer.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's say, for instance, that you needed to get something ready for a demo,
    and you ran out of time so you put in a hack solution. Then, you left it there
    and built a bunch of additional systems on top of it. Now, you're trying to get
    your game online, and the thing you did shows up incorrectly on the client, and
    you realize to your horror that you have to rewrite every one of those systems
    you built on top of that hack that went in for the demo, and, even worse, you
    realize it's going to take weeks of work to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Or, let's say you were in a hurry building your blueprint, and it works but
    looks like a clump of hair in a drain. You move on to the next problem. Six months
    later, you're about to demo the game for your publisher and a weird bug keeps
    happening in your system. You haven't looked at it since you wrote it, and now
    you're forced to spend all day and all night untangling the mess you made so you
    can figure out where the bug is happening.
  prefs: []
  type: TYPE_NORMAL
- en: In both of these cases, you would have saved yourself a lot of time and heartache
    if you'd taken the time to clean up the work you did while it was fresh in your
    mind. If you absolutely have to hack, mark the hack as a hack, and if you know
    what the proper solution should really be, write it into a comment right next
    to the hack. And then fix it before you build anything else on top of it. If you've
    gotten a blueprint or a bit of code running, go straight into your *make it right* phase
    while everything you learned during your *make it work* phase is still fresh in
    your mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember this truth: *The vast majority of the life cycle of a piece of code
    is spent maintaining and debugging it*. Drill this into your head. It''s much
    harder to debug code than it is to write it the first time, so give yourself every
    advantage you can. You are not saving yourself any time if you rush when you first
    write your solution. You''re saving time on the small part of its life and creating
    a big headache that will haunt you during the long part of its life. Plan for
    your code to be debugged when you write it. You''ll be happy you did.'
  prefs: []
  type: TYPE_NORMAL
- en: Favor simple solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sadly, you're going to run into developers who write complicated, impenetrable
    code or blueprints in a mistaken effort to impress everyone else with how smart
    they are. They're secretly fantasizing that someone else is going to look over
    their shoulder at their unreadable code and think, *Wow! They must be so smart!
    I can't read any of that.* Please, oh please, don't be this developer.
  prefs: []
  type: TYPE_NORMAL
- en: The experienced developers whose respect you really want won't be impressed
    by a shambolic blueprint or obfuscated code. They'll wonder why you left it in
    such a mess and assume that it's because you didn't know any better. Amateurs
    write unreadable code. Pros know they're going to have to maintain it a year from
    now when they've forgotten everything about it, and they don't want to make that
    job any harder than it has to be.
  prefs: []
  type: TYPE_NORMAL
- en: You'll know you're doing it well if your *make it right* draft is simpler and
    cleaner than your *make it work* draft was.
  prefs: []
  type: TYPE_NORMAL
- en: Look it up before you make it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We mentioned this in [Chapter 10](9090733f-bb14-4203-836c-f1f8e3c00dbe.xhtml),
    *Creating a Multiplayer Experience in VR*, and want to reiterate it here: one
    of the core mistakes new developers make is failing to do research before they
    dive into a problem, and they wind up rewriting code that''s already been written.'
  prefs: []
  type: TYPE_NORMAL
- en: Do your homework. When you're trying to solve a problem, before you start hacking
    away at it, see whether anybody else has tacked anything similar and left footprints
    behind. Is there already a tool in the engine that does this or does most of it?
    Are there examples in the templates or the sample projects that show how it can
    be solved? Has someone written a tutorial somewhere? Sometimes, the answer is
    going to be *no*, but far more often, you're going to find something that either
    points you directly toward a solution or gets you closer than you would have gotten
    without it.
  prefs: []
  type: TYPE_NORMAL
- en: We once saw a small team of engineers waste weeks of development budget on a
    problem that had already been solved with a single function in a freely-licensed
    plugin. That's time that didn't go into making the game better, and you don't
    need to fall into this trap. Research is part of your development process and
    should always happen before you start typing or dragging nodes.
  prefs: []
  type: TYPE_NORMAL
- en: This leads us right into our next topic of discussion where can you look when
    you need to find information?
  prefs: []
  type: TYPE_NORMAL
