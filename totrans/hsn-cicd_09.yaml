- en: Installation and Basics of Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you get set up with Travis **Continuous Integration**
    (**CI**). We will explain the concept of app-embedded configuration for hosted
    solutions like Travis CI. We will also explain what a YAML configuration is and
    how to use it. We will look at the basics of using Travis CI and take some time
    to explore some of the differences between Travis CI and Jenkins, as well as Travis
    CI concepts. We will go over the different part of Travis CI including the syntax
    and the build life cycle, and look at real-world examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CI prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a simple Travis CI YAML configuration script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CI script breakdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require some basic programming skills and many of the CI concepts
    we have discussed in the earlier chapters will be utilized in this chapter. It
    will be helpful if you try to create a GitHub account and Travis CI account. You
    can follow the steps in the *Travis CI prerequisites* section. Some of the examples
    use Docker, which is a container technology, so it would be helpful if you have
    some understanding about containers and Docker. You will learn about the YAML
    syntax in this chapter. There are some commands in the chapter that use command-line
    applications, so it would be helpful to be familiar with command-line applications
    or CLIs.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Travis CI is a hosted and automated solution for CI builds. Travis CI uses an
    in-application configuration file that uses YAML ([http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html))
    syntax, which we will go over in more detail later in this chapter. Since Travis
    CI is hosted in the cloud, it therefore has the advantage that it can quickly
    be used in other environments and different operating systems without us worrying
    about setup and installation. This means that Travis CI setup is much faster than
    Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Travis CI and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is a self-contained and open source automation server that is customizable
    and requires setup and configuration at the organization level. Remember, in the
    Jenkins CI chapters we spent some time installing Jenkins on Windows, Linux, and
    macOS. We also had the ability to configure Jenkins however we wanted. While this
    is great for software companies with dedicated teams in operations, DevOps and
    more, it is not as great for open source projects where often lone developers
    are setting up environments for their personal projects.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI was designed around the principle of open source development and for
    ease of use. Travis CI can be set up within minutes of creating a project in the
    GitHub. Although Travis CI is not as customizable as Jenkins CI in this respect,
    it has the distinct advantage of fast setup and use. Travis CI uses an in-application
    configuration file to accomplish this, however must be used with GitHub ([https://github.com/](https://github.com/))
    development platform at the moment, though perhaps it may be extended to other
    platforms such as Bitbucket ([https://bitbucket.org/dashboard/overview](https://bitbucket.org/dashboard/overview)) in
    the future, but this is still an open discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started with Travis CI, you will need to create a GitHub account,
    which you can do at GitHub ([https://github.com/](https://github.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Look at the screenshot—all that you have to do is provide a Username, Email,
    and Password, then click the Sign up for GitHub button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f1afcb4-93bd-44bb-960e-5577a72e5deb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the purposes of this chapter, we will create a GitHub username called `packtci`.
    Once you click the Sign up for GitHub button, you will be taken to the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/22245307-e687-46ee-bd4b-b84a6dff3819.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice here that you can create an unlimited amount of public repositories
    in GitHub for free, while private repositories require a monthly subscription
    fee. Once you click the Continue button you will be redirected to the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4dacd282-1022-4fb5-8e8b-ba9bb57a9039.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can skip all of these options if you want by scrolling to the bottom of
    the page and clicking the Skip this step button. Once you click either the Submit
    button or the Skip this step button you will be taken to this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dd267de5-da31-43e8-802c-ca1b5df6fa0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should a receive an email from GitHub; look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d1f45090-d979-4052-919e-b10bbc0ceacc.png)'
  prefs: []
  type: TYPE_IMG
- en: You will need to click the link in order to verify your account in GitHub and
    then you should be all set up with your GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Travis CI account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to create a Travis CI account in order to get started with Travis
    CI. You will need to login with your GitHub login credentials. In the screenshot
    here, notice that you can click the Sign Up button or the Sign in with GitHub
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee84c5fa-9fc5-4e8d-8cc8-24f887892133.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the purposes of this chapter, I clicked the Sign in with GitHub button
    and then entered my login credentials for the GitHub account that I created with
    the username `packtci`. Once you enter your GitHub credentials, you will be redirected
    to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b0677cb6-f381-43a8-a54d-2e535854b6fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to click the Authorize travis-ci button in order to finalize
    Travis CI setup. Once you click the Authorize travis-ci button, you will be redirected
    to the following page once Travis CI finishes the final setup steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6f7f8089-3902-47c4-ad1d-38de841226af.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that we have an API token for Travis CI which we will use utilize
    at a later time. We don't have any GitHub projects in this new account so none
    are shown. For the purposes of this chapter, I will create a GitHub project that
    runs some basic tests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an SSH Key to your new GitHub Account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create a new GitHub repository, you will need add your SSH keys
    into your user account. If you don''t have any SSH keys in your system they can
    be created with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1123a8dc-d7b3-45ac-a896-9a184e61d44a.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that I provided an email address and specified a type of RSA which
    is a type of encryption algorithm. Once you run this command, it will create a
    public and private key on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created SSH keys you simply need to upload the public key into
    GitHub. You need to copy the contents of the file; if you are using macOS you
    can run the following command to copy it to your system clipboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to go into the Settings page in GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4d92b4c-4b96-4a2a-946a-cc779c256134.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then you will need to click the following button in the Settings page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/697d22f8-6004-48b9-b5c8-a8717413a865.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next you will need to click the New SSH key button and then provide a name
    and paste in the contents of your SSH key. In the following screenshot, I provided
    a name of `Example SSH Key` and then pasted in the contents of my public key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a57c99fe-6c96-4a3f-8149-548d6d46e159.png)'
  prefs: []
  type: TYPE_IMG
- en: You just need to click the **Add SSH key** button and then you are ready to
    commit changes to any of the repositories that you own in GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a simple Travis CI YAML configuration script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I created a sample GitHub repository that you can see at functional summer at
    Github ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)).
    This repository is a Node.js project that has a `package.json` script, a file
    called `summer.js` and a test file called `summer_test.js`. We will add configuration
    for Travis CI in a file called `.travis.yml` at the root of the repository. This
    configuration script will do a couple of things. First, it will notify Travis
    CI that we are running a Node.js project and then it will install the dependencies
    for the project, and last it will run the tests specified in the CI build.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI YML script contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will first create a file called `.travis.yml` at the root of the repository
    and then copy the following contents into this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will go into much more detail about each entry of this YML script but essentially
    what we are saying to Travis CI is that this a Node.js project and we want to
    Travis CI to use node version 6.14.1 in the CI build, then install all the dependencies
    required for the project using the **npm package manager** and then finally to
    run all of the tests using the `npm test script` command. I will commit this change
    into the `functional-summer` repository and then we will see how to toggle on
    Travis CI for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Github repository into your Travis CI account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is that you must go to [https://travis-ci.org/](https://travis-ci.org/) and
    then provide your login credentials for your GitHub account. Then go to your profile
    page by clicking your avatar in the upper-right corner of the screen, which looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/44783a25-4996-4476-8430-bc3281a9a27b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next I have added a screenshot detailing the steps to add a new repository
    into Travis CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ff98bdd-ac37-4c73-82cd-c8edca41d80c.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that in the screenshot I added a text block saying that the first step
    is to click the Sync account button which is necessary so that Travis CI will
    see any new repositories that you have added into your GitHub account. Once Travis
    CI has synced your account then should be able to see your repository in your
    account. Depending on how many projects you already have, you may need to filter
    by your repository name to find your project. The next step is to toggle the slider
    with your repository name, as the screenshot depicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we have toggled on the `functional-summer` repository
    on the Travis UI now and now we can simply click the row to go into this newly
    added Travis CI build job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd73a097-7339-488b-b014-136d97e27cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the row you be redirected to the following page in Travis CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a9044c0d-4c62-4113-9d15-4392e473a869.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We do not have any builds that have been triggered yet but Travis CI has some
    default settings that are set. If you commit changes onto any pushed branches
    or you open a pull request in GitHub, Travis CI will kick off a build. Let us
    commit a minor change to the `functional-summer` repository which will trigger
    a build in Travis CI. If you click the Build History tab you will notice that
    a build has been created with a Git commit change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96af8a43-03ae-4cdb-99f6-513715a7682a.png)'
  prefs: []
  type: TYPE_IMG
- en: Travis CI job log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can click the build job item on the left of the Travis CI screen which
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4cc49956-3e3c-4836-843f-18aed7eb12e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can click the Current tab to see the currently executing
    job for the configured repository. In order to see the job log, you need to scroll
    down to the Job Log tab and see the running commands in the Travis CI build, which
    for the `functional-summer` repository look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cce8c59-bf43-4885-8227-e0b545996c84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that in the `.travis.yml` script that we added to GitHub we specified
    four things:'
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the `.yml` script we specified a language of Node.js
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We specified version 6.14.1 of Node.js
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We ran `npm install` command to install all the dependencies for a project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we ran `npm test` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can confirm that these steps were run in the Job Log. Notice that in the
    previous screenshot, there are right arrow links that expand into further details
    on each command in the CI build.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI script breakdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have gone over YAML syntax, we can explain in more detail the various
    parts of the Travis CI script.
  prefs: []
  type: TYPE_NORMAL
- en: Select a programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this block of the `.travis.yml` script we add the programming language that
    we will be using in the continuous integration build. This is usually the first
    entry in the `.travis.yml` script that you add.
  prefs: []
  type: TYPE_NORMAL
- en: 'Travis CI supports many programming languages such as:'
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript with Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elixir
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haskell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can look at languages ([https://docs.travis-ci.com/user/languages](https://docs.travis-ci.com/user/languages))
    in the Travis CI docs for a complete list of supported programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can set a more customized environment in Travis CI by using the `sudo` and
    `dist` fields in the YML script.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual image with Ubuntu Precise (12.04) infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use Ubuntu Precise infrastructure by using the following entries in
    the Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Default infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can explicitly set the default infrastructure which is a containerized
    Ubuntu 14.04 environment by adding this entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is not necessary to do as you can just set the language and the default
    infrastructure will be done for you.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Image with Ubuntu Trusty (14.04) infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use Ubuntu Trusty infrastructure by using the following entries in
    the Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Container based infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use container based infrastructure by using the following entries in
    the Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that we explicitly set sudo privileges to false and use Ubuntu Trusty.
  prefs: []
  type: TYPE_NORMAL
- en: macOS infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use macOS infrastructure by using the following entry in the Travis
    YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Build customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Travis CI, you can customize the build in a variety of ways and we will start
    by explaining the build life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The build life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A build in Travis CI is made up of two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install**: Install any dependencies required. We saw this step in the install
    block of the YML script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script**: Run the build script. This can be a series of scripts that are
    run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: before_install step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step is formally called the **before_install** step and it is where you
    install any additional dependencies in your CI build and where you get custom
    services initiated.
  prefs: []
  type: TYPE_NORMAL
- en: install step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen this step in action; in the **install** step you install
    any dependencies needed for the CI build to run correctly.
  prefs: []
  type: TYPE_NORMAL
- en: before_script step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **before_script** step you specify any commands that need to be executed
    before your script block can execute correctly. For example, you may have a PostgreSQL
    ([https://www.postgresql.org/](https://www.postgresql.org/)) database and need
    to seed the database before you run any of your tests.
  prefs: []
  type: TYPE_NORMAL
- en: script step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **script** step, you execute any commands which are central to a healthy
    code base. For example, it is common to run any tests you have in your code base,
    to lint the code base. A linter or lint tool is a tool that analyzes a code base
    to find any programming related errors, software bugs, style errors, or any code
    that may have **code smells**.
  prefs: []
  type: TYPE_NORMAL
- en: after_script step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **after_script** step you execute any commands that are helpful such
    as reporting and analytics. You may need to publish a code coverage report or
    create a report on metrics in the code base.
  prefs: []
  type: TYPE_NORMAL
- en: List of build life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the complete life cycle for Travis CI:'
  prefs: []
  type: TYPE_NORMAL
- en: Optional install: **apt addons**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optional install: **cache components**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_install**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**install**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_script**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**script**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optional: **before_cache**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**after_success** or **after_failure**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**before_deploy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**deploy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**after_deploy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**after_script**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build failure behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If an error occurs in the before_install, install, or before_script life cycle
    events then the CI build will immediately error out and the CI build will stop.
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs in the script life cycle event then the build will fail but
    the CI build will continue to run.
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs in the after_success, after_failure, after_script, and after_deploylife
    cycle events then the build will not be marked as a failure but if any of these
    life cycle events results in a timeout then the build will be marked as a failure.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a secondary programming language for a CI build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can easily install another programming language in the CI build by adding
    an entry into the **before_install** life cycle event. It is best to specify your
    primary language and then a secondary language.
  prefs: []
  type: TYPE_NORMAL
- en: Example Travis CI YML script with multiple languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Travis CI YML script here, we specify Go version 1.10 as the primary
    programming language and then Node.js as the secondary language. We install Node.js
    dependencies in the before_install life cycle event and then we run a Golang test
    followed by a Node.js test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you would like to further explore this example, then check out the `multiple-languages`
    repository ([https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages)).
  prefs: []
  type: TYPE_NORMAL
- en: Docker in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker can be utilized in Travis CI and the only step required to enable Docker
    is to add the following entry into your Travis CI YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that we added an entry into the `services` block and we added a
    list entry of Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Example Travis CI YML script with a Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Travis YML script here, we are specifying `sudo` privileges, a programming
    language of Golang, then we are specifying the Docker service, pulling down a
    custom Docker image of `jbelmont/print-average:1.0` and then running the Docker
    container and removing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'I have added a screenshot of the Travis CI build for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ceb2fa3-3160-430f-b9c5-d81472b90627.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that Docker is running in the CI build because we specified Docker as
    a service to be run in Travis CI. When we run the Docker container, it prints
    out the average computed in the `main.go` in the `docker-travis-ci-example` repository
    ([https://github.com/packtci/docker-travis-ci-example](https://github.com/packtci/docker-travis-ci-example)).
    You can check out my Docker image at Docker Hub ([https://hub.docker.com/r/jbelmont/print-average/](https://hub.docker.com/r/jbelmont/print-average/)).
  prefs: []
  type: TYPE_NORMAL
- en: GUI and headless browsers in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run headless browsers in Travis CI in a couple of ways. You can utilize
    an X Virtual Framebuffer, or XVFB in short form, which you can read more about
    in the XVFB docs ([https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml](https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml)).
    We will look at using headless chrome with Puppeteer ([https://pptr.dev/](https://pptr.dev/)),
    which is a library developed by Google that provides a high level API to work
    with headless Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Example Travis yml script with headless Chrome, Puppeteer, and the Jest Testing
    Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Travis YML script here, we have set a number of different actions in
    the Travis CI build. First, we set the language to `node_js`, then we set the
    version of `node_js` to `8.11`, then we set a new property called `dist: trusty`
    which set the Travis CI environment to Ubuntu 14.04, which is called **Trusty**.
    We then use the add-ons block to add the latest stable Chrome version. We then
    get the stable version of Google Chrome running on the CI build on port `9222`,
    and then we use the `cache` block so that `node_modules` is cached on each CI
    build run. Then we install our Node.js dependencies and finally we run the Node.js
    tests using the Jest library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In this first screenshot, notice the section where we start running `google-chrome`
    in `headless` mode in the Travis CI build and then install the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2faf9d2c-148d-4721-b163-55d0f36ea157.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this second screenshot, we run the tests using the Google Chrome Puppeteer
    library. Notice that the build runs with an exit status of `0` and finishes successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8273904c-b838-4bb4-b1b4-8e4a46eabf88.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find this Travis CI build at [https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70) and
    you can find the source code for this repository at [https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script) and
    at GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have gone over many aspects of Travis CI in this chapter, including the differences
    between Travis CI and Jenkins. We went over some prerequisite actions in order
    to get Travis CI set up and learned to add an SSH key to your GitHub account.
    We then explained the Travis CI build job and went over the YAML syntax in detail.
    We then explored many real-world examples of Travis YML scripts and explained
    the build life cycle in Travis CI and went over different aspects such as initiating
    services such as Docker and their uses in Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over all of the Travis CLI commands, explain
    how to get Travis CLI installed on Linux, macOS, and Windows, and go over automating
    tasks like encrypting credentials using the Travis CLI commands.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the primary difference between Jenkins and Travis CI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Travis CI work in Bitbucket?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you add new repositories to Travis CI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a scalar variable in YAML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a list in YAML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are anchors useful in YAMl?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to use a secondary programming language in a Travis CI build?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you use docker in a Travis CI build?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can further explore concepts in Travis CI by looking at the user documentation
    at the Travis CI website ([https://docs.travis-ci.com/](https://docs.travis-ci.com/)).
  prefs: []
  type: TYPE_NORMAL
