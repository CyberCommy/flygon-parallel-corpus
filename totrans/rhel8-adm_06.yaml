- en: '*Chapter 5*: Securing Systems with Users, Groups, and Permissions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a key part of managing a system, and understanding the security
    concepts in order to provide the right access to the right resource to the right
    user, or group of users, is required for any system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will review the basics of security in `sudo` as a way to
    assign admin privileges to different users in the system (and even disable the
    root account). We will also take a deeper look into file permissions and how to
    change them, using an extended capability to enable commands to be run with a
    different user or group or simplify group collaboration in directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating, modifying, and deleting local user accounts and groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing groups and reviewing assignments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting password policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring sudo access for administrative tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking, reviewing, and modifying file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using special permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started in the world of permissions and security with user accounts
    and groups.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, modifying, and deleting local user accounts and groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first tasks that a system administrator has to do when preparing
    a system to be accessed by users is to create new user accounts for the people
    accessing the system. In this section, we will review how local accounts are created
    and deleted, as well as how they are assigned to groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a new user account in the system. That is done
    by using the `useradd` command. Let''s add `user01` to the system by running the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With that, the user is created.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To be able to add users, we need administrative privileges. In the current configuration,
    we do that by running the commands as `root`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The account is created using the default options configured in the system,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`su` as `root`. We will see how to add a password to the user next.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user01`, the UID is `1001`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1001`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: No description is added when creating the user. This field
    is left empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home` directory is created in `/home/$USER`, in this case `/home/user01`.
    This will be default and main directory for the user and is where their personal
    preferences and files will be stored. Initial contents are copied from `/etc/skel`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bash`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The default options applied when a new user is created are defined in the `/etc/default/useradd`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user is created, we can add (or change) the password by running, as
    `root`, the command `passwd` followed by the username to change it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the user has the new password assigned. Note two things:'
  prefs: []
  type: TYPE_NORMAL
- en: User `root` can change the password to any user without knowing the previous
    one (a full password reset). This is useful when a user comes back from their
    holidays and doesn't remember their password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the example, we show the password assigned, `redhat`, but that is not shown
    on the screen. The password is too simple and does not meet the default complexity
    criteria, however, as `root` we can still assign it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check the new user with the `id` command we learned before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After the steps taken in this section, we now have the user in the system and
    ready to be used. The main options we could have used to customize the user creation
    with `useradd` are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-u` or `--uid`: Assign a specific UID to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g` or `--gid`: Assign a main group to the user. It can be specified by number
    (GID) or by name. The group needs to be created first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-G` or `--groups`: Make the user part of other groups by providing a comma-separated
    list of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c` or `--comment`: Provide a description for the user, specified between
    quotes if you want to use spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d` or `--home-dir`: Define the home directory for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s` or `--shell`: Assign a custom shell to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p` or `--password`: A way to provide a password to the user. The password
    should be already encrypted to use this method. It is recommended *not* to use
    this option as there are ways to capture the encrypted password. Please use `passwd`
    instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r` or `--system`: To create a system account instead of a user account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What if we need to change any of the user''s properties, such as, for example,
    the description? The tool for that is `usermod`. Let''s modify the description
    to `user01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `usermod` command uses the same options as `useradd`. It will be easy to
    customize your current users now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create `user02` as an example of how to use the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When the command line is too long, the character `\` can be added, then press
    *Enter* and continue the command on a new line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we know how to create a user, but we may need to create a group too and
    add our users to it. Let''s create the `finance` group, with the `groupadd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can add the `user01` and `user02` users to the `finance` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `-aG` option to add the user to the group, instead of modifying
    the groups the user belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we know how to create users and groups, let''s check how to delete them
    with the `userdel` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we needed to manually delete the `home` directory. This way
    of removing a user is good if we want to keep its data for future use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fully remove a user, we shall apply the option `-r`. Let'' try it with `user02`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s remove the `finance` group with the `groupdel` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen, it's simple and easy to create users and groups in RHEL and
    make simple assignments. In the next section, let's check in more depth how to
    manage groups and assignments to them.
  prefs: []
  type: TYPE_NORMAL
- en: Managing groups and reviewing assignments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to create a group with `groupadd` and delete it with `groupdel`.
    Let's see how to modify a created group with `groupmod`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a group to work with. We will create the misspelled `acounting`
    group by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You see we made a mistake in the name by not spelling it `accounting`. We may
    even have added some user accounts to it, and we need to modify it. We can do
    so using `groupmod` and running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ve seen how we modify the group name. We can modify not just the name
    but the GID by using the `-g` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see which groups are assigned to a user by running the `groups` command%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are ready to manage groups and users in a Linux system. Let's
    move on to password policies.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting password policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As was mentioned in [*Chapter 3*](B16799_03_Final_SK_ePub.xhtml#_idTextAnchor029),
    *Basic Commands and Simple Shell Scripts*, users are stored in the `/etc/passwd`
    file while the encrypted passwords, or `/etc/shadow` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: A hashing algorithm is made so that it generates a precise string of characters,
    or a hash, from a provided piece of data (that is, a file or a word). It does
    it in a way so that it will always generate the same hash from the same original
    data, but the original data is almost impossible to recreate from the hash. That's
    why they are used to store passwords or verify the integrity of a downloaded file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at one example by running `grep` user as `root` against
    `/etc/shadow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As with the password file, the data stored in `/etc/shadow` has an entry per
    line and the fields are separated by colons (`:`).
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: Account name. It should be the same one as in `/etc/passwd`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$6$tOT/cvZ4PWRcl8XX$0v3.ADE/ibzlUGbDLer0ZYaMPNRJ5gK17LeKnoMfKK 9.nFz8grN3IafmHvoHPuh3XrU81nJu0.is5znztB64Y/`:
    Password hash. It contains three parts separated by `$`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- `$6`: Algorithm used to encrypt the file. In this case, the value `6` indicates
    that it is SHA-512\. The number `1` is for the old, now insecure, MD5 algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `$tOT/cvZ4PWRcl8XX`: The password `$0v3.ADE/ibzlUGbDLer0ZYaMPNRJ5gK17LeKnoMfKK9.nFz8grN3IafmHvoHPuh3XrU81nJu0.is5znztB64Y/`:
    Encrypted password hash. Using the salt and the SHA-512 algorithm, this token
    is created. When the user validates, the process is run again and if the same
    hash is generated, the password is validated and access is granted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`18650`: The time and date when the password was last changed. The format is
    the number of days since 1970-01-01 00:00 UTC (this date is also known as **the
    epoch**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`: Minimum number of days until the user can change the password again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`99999`: Maximum number of days until the user has to change the password again.
    If empty, it won''t expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`7`: Number of days the user will be warned that the password is about to expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: Number of days the user can still log in even when the password has expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`19113`: Date on which the password should expire. If empty, it won''t expire
    on a specific date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<empty>`: The last colon is left to allow us to add new fields easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert the `date` field to a human-readable date, you can run the following
    command: `date -d ''1970-01-01 UTC + 18650 days''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we change the expiration dates for passwords? The tool to do so is `chage`,
    for `/etc/shadow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-d` or `--lastday`: The time and date when the password was last changed.
    The format for it is `YYYY-MM-DD`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m` or `--mindays`: Minimum number of days until the user can change the password
    again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-W` or `--warndays`: Number of days the user will be warned that the password
    is about to expire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-I` or `--inactive`: Number of days, once the password has expired, that will
    have to pass before the account is locked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-E` or `--expiredate`: Date after which the user''s account will be locked.
    The date should be expressed in the format `YYYY-MM-DD`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try it. First, we create the `usertest` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The tools `adduser` and `useradd` are the same tool in RHEL 8\. Feel free to
    type it the way you feel most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll notice in the previous example, from the two exclamation marks, `!!`,
    in bold that the password is not set, and we are using the defaults. Let''s change
    the password and check the difference. Use any password you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The password hash is created and the date for the last change is just kept
    the same as the current date. Let''s establish some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Please notice the changes in the `/etc/shadow` file corresponding to the values
    specified for `chage`. We can check the changes with the option `–l` of `chage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the default values, we shall edit `/etc/login.defs`. Let''s check
    the section for the most common changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Please take some minutes to review the options in `/etc/login.defs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we could have a situation in which a user has left the company. How can
    we lock the account so the user cannot access the system? The `usermod` command
    has the `–L` option, for **lock**, to do so. Let''s try it. First, let''s log
    into the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – User account usertest logging into the system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_05_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – User account usertest logging into the system
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s lock the account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that there is a `!` character added before the password hash. This is
    the mechanism used to lock it. Let''s try to log in again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – User account usertest not being able to log into the system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_05_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – User account usertest not being able to log into the system
  prefs: []
  type: TYPE_NORMAL
- en: 'The account can be unlocked by using the `–U` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now you can see that the `!` character is removed. Feel free to try logging
    in again.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To fully lock the account from access, not just from logging in with a password
    (there are other mechanisms), we should set the expiry date to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another common use case is when you want users to access the system, such as
    having a network shared directory (that is, via NFS or CIFS, as explained in [*Chapter
    12*](B16799_12_Final_SK_ePub.xhtml#_idTextAnchor160), *Managing Local Storage
    and Filesystems*) but you do not want them to be able to run commands in the system.
    For that, we can use a very special shell, the `nologin` shell. Let''s assign
    that shell to the `usertest` user account using `usermod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are reviewing the changes in `/etc/passwd` this time as it is where
    the modification is applied.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it's easy to set the values for password aging for any user,
    lock them, or restrict access to the system. Let's move on to more administrative
    tasks and how to delegate admin access.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring sudo access for administrative tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a way to delegate administrative access to users in RHEL, and it is
    done so with a tool called **sudo**, which stands for **Super User Do**.
  prefs: []
  type: TYPE_NORMAL
- en: It not only allows you to grant full administrative privileges to users or groups
    but also be very granular on the privileged commands that some users may be able
    to execute.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by understanding the default configuration and how to change it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding sudo configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The tool has its main configuration file in `/etc/sudoers` and includes this
    part in the default configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's analyze the lines one by one to understand what they do.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line enables the `root` user to use `sudo` for any command that they
    want to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The second line enables the user in the `wheel` group to use `sudo` for any
    command that they want to run. We will explain the details of the syntax later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please do not disable the `wheel` group directive unless there is an important
    reason to do so. This behavior is expected by other programs to be available,
    and disabling it may cause some problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third line, and all the lines starting with `#`, are considered comments,
    and they are intended only to add descriptive content with no effect on the final
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The fourth line is the only exception to the previous rule. This line enables
    the directory `/etc/sudoers.d` as a source for configuration files. We can drop
    a file in that folder, and it will be used by `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The exception to this last rule is files that end with `~` or contain a `.`
    (dot) character.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, the default configuration enables `root` and the members of
    the `wheel` group to run any command as an administrator using `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to use it is to add a user to the `wheel` group to grant that
    user full admin privileges. An example of how to modify the `usertest` account
    to make it an admin account is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For cloud instances, the account root does not have a valid password assigned.
    To be able to manage the mentioned cloud instance, in some clouds such as `wheel`
    group. In the case of AWS, the default user account is `ec2-user`. In other clouds,
    a custom user is also created and also added to the `wheel` group.
  prefs: []
  type: TYPE_NORMAL
- en: To edit the `/etc/sudoers` file, as happens with other sensitive files, there
    is a tool that helps not only ensure that two admins are not editing it simultaneously
    but also that the syntax is correct. In this case, the tool to edit it is `visudo`.
  prefs: []
  type: TYPE_NORMAL
- en: Using sudo to run admin commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `user` account in these examples. As you may remember, in [*Chapter
    1*](B16799_01_Final_SK_ePub.xhtml#_idTextAnchor014), *Installing RHEL8*, we enabled
    the checkbox in which we requested the account to be the administrator. Under
    the hood, the account was added to the `wheel` group, so we can start using `sudo`
    to run admin commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s log in with the `user` account and try to run an administrative command
    such as `adduser`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we receive a `Permission denied` error message. To be able
    to run it with `sudo`, we only need to add it to the beginning of the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we see that we have been shown a warning message that is shown
    the first time we run `sudo` successfully. Then we are asked for *our own password*
    – not the admin password as there may not even be one, but the one we have for
    the user running `sudo`. Once the password is correctly typed, the command is
    run and registered in the system journal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have run `sudo` successfully, it will remember that validation for
    15 minutes (as the default behavior). This is done so you don''t have to type
    your password again and again if you need to run more than one administrative
    command in a session. To increase it to 30 minutes, we can add the following line
    using `visudo`: `Defaults:USER timestamp_timeout=30`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you want to have an interactive session so that there is no need
    to type `sudo` again and again. For that, the `–i` option is really useful. Let''s
    try it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let's now move on to customizing the configuration of `sudo` in the `sudoers`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring sudoers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen the details of the default `/etc/sudoers` file in the previous
    section. Let's see a couple of examples of how to make a more granular configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by making `sudo` run admin commands without requesting a password
    for the users in the `wheel` group. We can run `visudo` and make the line that
    starts with `%wheel` look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it. Note that there is a commented line in the configuration file with
    that configuration. Now let''s try it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create a file, with your favorite editor, to make the new user account,
    `ellen`, able to run admin commands. Let''s create the `/etc/sudoers.d/ellen`
    file with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are using the `/etc/sudoers.d` directory to extend the `sudo`
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will review the detailed configuration of `sudoers` here despite it not
    being part of the RHCSA exam. As you can see, there are three fields, separated
    by spaces or tabs, to define policies in the configuration files. Let''s review
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first field is to specify who is affected by the policy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- We can add users by simply putting the username in the first field.'
  prefs: []
  type: TYPE_NORMAL
- en: '- We can add groups by using the `%` character before the name of the group
    in the first field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second field is for where the policy applies:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- We have so far used `ALL=(ALL)` to specify everything.'
  prefs: []
  type: TYPE_NORMAL
- en: '- In the first part of this field, we can define a group of computers to be
    run such as `SERVERS=10.0.0.0/255.255.255.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '- In the second part, we can specify commands such as `NETWORK=/usr/sbin/ip`.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Between parentheses is the user account that can be used to run the command.'
  prefs: []
  type: TYPE_NORMAL
- en: The third field is to specify which commands will use the password and which
    won't.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We have already seen how to provide administrative access to users in RHEL,
    and even how to do it in a very granular manner. Let's move on now to the section
    on working with file permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Checking, reviewing, and modifying file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned so far how to create users and groups, and even provide administrative
    capabilities to them. It's time now to see how permissions work at the files and
    directories level.
  prefs: []
  type: TYPE_NORMAL
- en: As you'll remember, in [*Chapter 3*](B16799_03_Final_SK_ePub.xhtml#_idTextAnchor029),
    *Basic Commands and Simple Shell Scripts*, we already saw how to see the permissions
    that are applied to a file. Let's review them now and dive deeper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the permissions info for some example files by listing it with the
    `–l`, for long, option. Remember to run this as the `root` user (or using `sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Remember that, in Linux, *everything is a file*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s review the five different blocks of information that the permissions
    include by using the ones for `/usr/bin/bash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The blocks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16799_05_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's review them again, as they are very important.
  prefs: []
  type: TYPE_NORMAL
- en: 'Block 1 is for the special permissions that the file may have. If it is a regular
    file and has no special permissions (as in this case), it will appear as `-`:'
  prefs: []
  type: TYPE_NORMAL
- en: Directories will appear with `d`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links, usually symbolic links, will appear with an `l`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special permissions to run a file as a different user or group, called `s`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A special permission for directories, so that the owner can only remove or rename
    the file, called the `t`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Block 2 is permissions for the *user* owning the file, and consists of three
    characters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one, `r`, is the read permission assigned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one, `w`, is the write permission assigned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one, `x`, is the executable permission. (Note that the executable
    permission for directories means being able to enter them.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block 3 is permissions for the *group*. It consists of the same three characters
    for read, write, and execute (`rwx`). In this case, write is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Block 4 is the permissions for *others*. It also consists of the same three
    characters for read, write, and execute (`rwx`) as before. As in the previous
    block, write is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Block 5 indicates that there is an **SELinux** context applied to the file.
    More on this topic in [*Chapter 10*](B16799_10_Final_SK_ePub.xhtml#_idTextAnchor143),
    *Keeping Your System Hardened with SELinux*.
  prefs: []
  type: TYPE_NORMAL
- en: To change permissions for a file, we will use the `chmod` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the file is created with your username as the owner, your main
    group as the group, and a default set of permissions. The default set of permissions
    are defined by `umask`, and in RHEL, the defaults for newly created file permissions
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: Read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others**: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To change permissions using `chmod`, we specify the changes with three characters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one, which determines whom the change affects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- `u`: User'
  prefs: []
  type: TYPE_NORMAL
- en: '- `g`: Group'
  prefs: []
  type: TYPE_NORMAL
- en: '- `o`: Others'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second one to add or remove permissions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- `+`: Add'
  prefs: []
  type: TYPE_NORMAL
- en: '- `-`: Remove'
  prefs: []
  type: TYPE_NORMAL
- en: 'The third one, which determines the permission to be changed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- `r`: Read'
  prefs: []
  type: TYPE_NORMAL
- en: '- `w`: Write'
  prefs: []
  type: TYPE_NORMAL
- en: '- `x`: Execute'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to add write permissions to the group, we can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And to remove read permissions from others, we run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The permissions are stored in four octal digits. This means that special permissions
    are stored in a number from 0 to 7, the same way user, group, and other permissions
    are stored, each one of them with a number from 0 to 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16799_05_Table_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'How does it work? We assign a number (power of 2) for each permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nothing**: 0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute**: 2^0 = 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write**: 2^1 = 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read**: 2^2 = 4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We add them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we can assign permissions using numbers. Now let''s try it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'As we said before, the default configuration of permissions is set by `umask`.
    We can very easily see the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: All the newly created files have `execute` permissions removed (`1`).
  prefs: []
  type: TYPE_NORMAL
- en: With this `umask`, `0022`, the one provided by default in RHEL, we will have
    `write` permissions for `group` and `others` also removed (`2`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Even when it is not recommended to change `umask`, we could give it a try to
    learn how it works. Let''s start by using the most permissive `umask`, `0000`,
    to see how all `read` and `write` permissions are assigned to newly created files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s use the more restrictive `umask` for `group` and `others` permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try a higher number, it won''t work and will return an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the effect of `0066` and `0077` is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s re-establish `umask` in our session, to the defaults, to continue practicing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we may find ourselves with the need to create a directory for a specific
    user or group, or to change the owner of a file. To be able to change the ownership
    of a file or directory, the `chown` or `chgrp` tools are used. Let''s see how
    it works. Let''s move to `/var/tmp` and create the folders for `finance` and `accounting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create the groups for `finance` and `accounting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the `accounting` group was already created. Let''s change
    the group for each directory with `chgrp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create users for `sonia` and `matilde`, and assign them to `finance`
    and `accounting` respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create a personal folder for each under their group folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a way to specify a user and group to `chown`, using the `:` separator.
    Let''s use it with `matilde`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to change the permissions for a full branch, we can use `chown`
    with the `–R`, for recursive, option. Let''s copy a branch and change its permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: With this, we have a good understanding of permissions in RHEL, their default
    behaviors, and how to work with them.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to some more advanced topics about permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Using special permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen in the previous section, there are special permissions that could
    be applied to files and directories. Let's start by reviewing Set-UID (or **suid**)
    and Set-GUID (or **sgid**).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and applying Set-UID
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review how Set-UID applies to files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set-UID permission applied to a file**: When applied to an executable file,
    this file will run as if the owner of the file was running it, applying the permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set-UID permission applied to a directory**: No effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check a file with Set-UID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `passwd` command requires `root` permissions to change hashes in the `/etc/shadow`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply this permission, we can use the `chmod` command, applying `u+s` permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Be very careful when assigning `suid` to files as `root`. If you leave write
    permissions on the file, any user will be able to change the content and execute
    anything as `root`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and applying Set-GID
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review how Set-GID applies to files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set-GID permission applied to a file**: When applied to an executable file,
    this file will run with the group permissions of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set-GID permission applied to a directory**: New files created in that directory
    will have the group of the directory applied to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check a file with Set-GID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We can try applying the permission to a file with `chmod` using `g+s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try it with a directory. Let''s go to our previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: You can see how, after applying Set-GID to the folders, they show the `s` permission
    for the group (in bold). Also, when creating new files in those directories the
    group assigned to them is the same as the group that the parent directory has
    (also in bold). This way we ensure group permissions are properly assigned.
  prefs: []
  type: TYPE_NORMAL
- en: Using the sticky bit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last of the permissions to be used is the **sticky bit**. It only has an
    effect on directories and what it does is simple: when a user creates a file in
    a directory with the sticky bit, only that user can edit or delete that file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We could apply those to the previous example, also with `chmod` using `o+t`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s give it a try. We will add the user `sonia` to the `accounting` group.
    We will grant a write permission to the group for the `/var/tmp/accounting` directory.
    Then, we will create a file with the user `matilde` and try to delete it with
    the user `sonia`. Let''s go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The numeric values for special permissions are: `suid` = `4`; `sgid` = `2`;
    `sticky bit` = `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have completed how to manage permissions in RHEL.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed the permission management system in RHEL,
    implemented using traditional permissions. We have learned how to create user
    accounts and groups, and how to ensure that passwords are managed correctly. We
    have also learned how passwords are stored in the system, and even how to block
    shell access to a user. We have created files and folders, assigning permissions
    to them and ensuring that users can collaborate with an enforced set of rules.
  prefs: []
  type: TYPE_NORMAL
- en: These are the basics of managing access in RHEL and will be very useful to avoid
    security issues when managing systems. As this is such an important topic, we
    recommend reviewing this chapter carefully, reading the `man` pages for the commands
    shown, and making an effort to have a really good understanding of the topic as
    it will avoid any uncomfortable situations in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Now you are ready to start providing services to users and managing their access,
    which is what we will cover in the next chapter. Remember to practice and test
    thoroughly the lessons learned here.
  prefs: []
  type: TYPE_NORMAL
