- en: Chapter 1. Foundation for the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You are probably reading this book because you want to integrate spatial capability
    into your web application using the ArcGIS JavaScript API and make it even more
    amazing, or maybe you''re hoping to become a web mapping data scientist very soon.
    Whatever it is, we are with you. But don''t you think we need a bit of groundwork
    before working on the actual projects? This chapter is all about that—laying a
    strong foundation for the concepts used later in this book. This chapter is by
    design diverse in its content, covering a lot of ground on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first mapping application using the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brushing up on coordinate geometry, extents, and spatial reference systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing dojo and the AMD pattern of coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding ArcGIS Server and the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is a *by example* book, and we will be explaining the concepts with
    the applications that we'll develop. So, it's essential that you have the development
    environment up and running at the onset of this chapter. Most of the environments
    mentioned in the following sections are just our preferences and may not be mandatory
    to implement the code samples provided in this book. All the code samples have
    been targeted at running in a Windows-based OS and an **Integrated Development
    Environment** (**IDE**) named **Brackets**. If you have a different choice of
    OS and IDE, we welcome you to develop in the environment you're most comfortable
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Browser, web server, and IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To develop, deploy, and execute any web application, we need the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated Development Environment (IDE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have used Google Chrome throughout this book as it provides some great developer
    tools and HTML inspection tools. We think Mozilla too, is a great browser for
    development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Web server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications developed in this book are hosted using IIS Express. IIS Express
    is a lightweight webserver mainly used for hosting .NET web applications. Though,
    all the projects in this book are developed using pure HTML, CSS, and JavaScript,
    we will be using the Esri .NET resource proxy to access the ArcGIS online secured
    content and avoid cross domain issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Readers can install IIS Express either by installing Web Platform Installer
    or directly from the Microsoft downloads page, as illustrated in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To install IIS Express using Web Platform Installer visit [https://www.microsoft.com/web/downloads/platform.aspx](https://www.microsoft.com/web/downloads/platform.aspx)
    to download Web Platform Installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, search for `IIS Express` in the search text. The search results
    will display the IIS Express application. Click on the **Add** button against
    the IIS Express application name, and then click on the **Install** button at
    the bottom of the page as shown in the following screenshot:![Web server](graphics/B04959_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing IIS Express from Web Platform Installer ensures that we can get IIS
    Express' latest version against the direct download link, which we may not be
    able to provide the link for the latest version. When this book was written, the
    latest IIS Express direct download link was found at [https://www.microsoft.com/en-us/download/details.aspx?id=34679](https://www.microsoft.com/en-us/download/details.aspx?id=34679).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installing IIS, you can find the executables in the `IIS Express` folder
    inside the `Program Files` folder. The default location is usually `C:\Program
    Files\IIS Express`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will provide an executable batch (`.bat`) file within each project that helps
    to start the web server and host the project at the specified port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the following line of code in the executable file of each project
    we have developed for this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line will host the application at port `9098`. So, to access the
    app, you just need to use the URL—`http://localhost:9098/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choice of IDE for developing JavaScript code is wide, and experienced developers
    already know what they need to use. We have used Brackets throughout this book
    as is our preferred choice of IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an ArcGIS Developer account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a few exercises in the book, you will require an ArcGIS Developer account.
    It's also an opportunity for you to explore various capabilities offered by ESRI
    for the developers. To set up a Developer account, just sign up for free at [https://developers.arcgis.com/en/sign-up/](https://developers.arcgis.com/en/sign-up/).
  prefs: []
  type: TYPE_NORMAL
- en: Hello, Map – the jump-start code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're anything like us, you'd probably like to code your way to your first
    map right away. So here it is. Try adding these lines of code to a new HTML file
    in your Brackets IDE. You can also download the HTML source code, named `B04959_01_CODE01,`
    from the code repository and double-click on the HTML file to run it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello, Map – the jump-start code](graphics/B04959_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While observing the preceding lines of code, you may have observed these two
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: We didn't need any licensing, authentication, or key to run this code. In other
    words, the API is free. You just had to use the CDN link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be seeing this beautiful cartographic map in our browser as shown in
    the following screenshot:![Hello, Map – the jump-start code](graphics/B04959_01_22.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We encourage you to zoom or pan to location you want to see your map. If you
    haven''t figured how to zoom/pan the map, we''ll deal with it right away:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left-click dragging or pressing any arrow key causes a pan and the level of
    detail doesn't change.
  prefs: []
  type: TYPE_NORMAL
- en: '*Shift* + left-click drag, mouse scroll, a double click, or clicking on the
    *+* or *-* buttons on the map causes a zoom and the level of detail displayed
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other ways to achieve zooming/panning functionality. The ones mentioned
    here are just to gain a preliminary understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the jump-start code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's try to understand the code we just saw. There are three concepts in this
    code that we'd like to explain. The first one deals with the reference links for
    the API or the **Content Delivery Network** (**CDN**) that we used to download
    the ArcGIS JavaScript API (v 3.15) and its associated style sheets. The second
    concept tries to introduce you to the pattern of coding employed, which is known
    as the **Asynchronous Modular Definition** (**AMD**) pattern. This is used by
    the latest version of dojo (v1.10). The next concept is about what you see in
    the browser when you ran the code—the map and the parameters we supplied to it.
  prefs: []
  type: TYPE_NORMAL
- en: The API reference link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First things first. We need to reference the API to develop an ArcGIS JavaScript
    API-based application. Esri is the organization that owns the API, yet the API
    is free and available for public use. The latest version of the API as of March
    2016 was 3.15 and the corresponding dojo toolkit version was version 1.10.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following libraries are the only ones you may probably need to reference
    to use ArcGIS JavaScript API''s capabilities as well many dojo toolkit packages,
    such as `core dojo`, `dijit`, `dgrid`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Refer to this link for complete documentation of the ArcGIS JavaScript API—[https://developers.arcgis.com/javascript/jsapi/](https://developers.arcgis.com/javascript/jsapi/).
  prefs: []
  type: TYPE_NORMAL
- en: When you visit the preceding URL, you will see a web page providing complete
    documentation of the API with multiple tabs such as **API Reference**, **Guide**,
    **Sample Code**, **Forum**, and **Home**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also download the code files by clicking on the Code Files button on
    the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the Search box. Please note that you need to be
    logged in to your Packt account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The API reference lists all the modules available under the API as details,
    properties, methods, and events available for each module. The left pane groups
    most of the modules for easy reference. For example, the grouping named **esri/layers**
    has multiple modules that inherit from it. The following screenshot gives a snapshot
    of how the different modules that inherit from **esri/layers** are grouped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The API reference link](graphics/B04959_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Guide** section provides detailed instructions on important topics such
    as **Working with the Query Task**, **Working with ArcGIS Online Widgets**, and
    Working with symbols and renderers. The following screenshot shows a detailed
    guide on setting map extents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The API reference link](graphics/B04959_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Sample Code** tab is yet another useful section with hundreds of sample
    applications, which are used to demonstrate different concepts in the API. The
    best part of these sample codes is that they come with a sandbox facility, which
    you can use to play around with the code by modifying it.
  prefs: []
  type: TYPE_NORMAL
- en: The **Forum** tab redirects you to the following URL—[https://geonet.esri.com/community/developers/web-developers/arcgis-api-for-javascript](https://geonet.esri.com/community/developers/web-developers/arcgis-api-for-javascript).
  prefs: []
  type: TYPE_NORMAL
- en: The GeoNet community forum is a great place to ask your questions and share
    your solutions to questions from developers like you.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its close integration with the dojo framework, a working knowledge of
    the dojo toolkit is required and the reference documentation for it can be accessed
    at [http://dojotoolkit.org/reference-guide/1.10/](http://dojotoolkit.org/reference-guide/1.10/).
  prefs: []
  type: TYPE_NORMAL
- en: The AMD pattern of coding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''ve observed the code structure, it may look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The AMD pattern of coding](graphics/B04959_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you aren't familiar with this pattern of JavaScript coding, it is known as
    the AMD pattern of coding, and the ArcGIS API for JavaScript emphasizes on using
    this pattern of coding. In the initial chapters we will be introducing a lot about
    this to get ourselves familiarized with dojo and AMD. From the code structure
    you might have understood that the code *requires* certain modules and the function
    that loads these modules requires that they are in the same order. Some of the
    modules in our case were Esri modules (`esri/..`) and dojo modules (`dojo/..`).
    If you're wondering whether you could *require* custom defined modules, the answer
    is absolutely yes, and this will be a major part of our exercise in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The esri/map module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The highlighted line in the code forms the crux of our jumpstart code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `map` module accepts two arguments. The first argument is the `div` container,
    which will contain the `map` object. The second argument is an optional object,
    which accepts a lot of properties that can used to set the map's properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our jumpstart code, the `basemap` property in the optional object sets one
    of the Esri''s provided basemap code named `national-geographic` to be displayed
    as the background map. We implore you to experiment with the other Esri provided
    basemaps, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: satellite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dark-gray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: light-gray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hybrid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: topo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the initial map extent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times when the application opens up, you may want to zoom it to a particular
    area of interest, instead of showing the map at the world scale first, and then
    zoom your way to the area you want to see. To accomplish this, the map module
    provides a property to set its initial extent and also to programmatically change
    its extent any time you want.
  prefs: []
  type: TYPE_NORMAL
- en: Before this, let's look at what an extent is in the context of a map.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An extent is the minimum bounding rectangle that encloses an area of interest
    on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Brushing up some coordinate geometry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand about extent, a grasp of coordinate geometry would help. Line
    segments colored yellow will be referred to as *polyline* for our purposes. The
    blue lines represents *polygons* (a rectangle in our case):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Brushing up some coordinate geometry](graphics/B04959_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, try to observe the difference in the coordinates between the preceding
    diagram and the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Brushing up some coordinate geometry](graphics/B04959_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some notes about the preceding diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: The point is represented by just one pair of coordinates; (2, 2) in figure 1
    and (-1, -1) in figure 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The polylines are represented by a sequence of coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The polygon is also represented by a sequence of coordinates, similar to the
    polyline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might have figured out that apart from the coordinates and the axes, the
    shapes of both the figures are the same. This might mean two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram has shifted its *x* positions by -3 units and its *y* positions
    by -3 units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or it may mean that the origin has shifted its *x* and *y* positions by -3 units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second possibility is more important for us to understand because it implies
    that the actual position of the diagram hasn't changed and only the origin or
    the coordinate axes has changed its position. So, in reference to the coordinate
    axes, the coordinates of the diagram shapes (the rectangle, point, and line) have
    also changed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The same shape can have different coordinates based on the reference coordinate
    system. This kind of coordinate system is known as a **spatial reference** in
    the context of GIS.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz time!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s test our knowledge. Try solving the following quiz:'
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. What would be the coordinates of the point (with the triangle symbol) if
    the origin (the bottom-left corner of the rectangle) were (100000, 100000)?
  prefs: []
  type: TYPE_NORMAL
- en: Q2\. Since the polygon and the polyline are both represented by a sequence of
    coordinates, how can we conclude whether the shape is a polygon or polyline given
    a sequence of coordinates?
  prefs: []
  type: TYPE_NORMAL
- en: Q3\. How many coordinates are required to represent a rectangle?
  prefs: []
  type: TYPE_NORMAL
- en: Think about it and we'll give you the answers very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial reference systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When displaying the world or a part of the world on a digital screen as a map,
    which is a two-dimensional surface just like our graph, we need to use a spatial
    reference system to identify the coordinates of locations on the map. There are
    numerous standard spatial reference systems in use. The bare minimum we need to
    know to proceed with using the API is that each reference system has a unique
    identification number that is recognized by the API. The complete parameters (such
    as datum used, origin coordinates, measurement units used, and so on) used to
    define a spatial reference can also be used to identify a particular spatial reference
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The unique ID with which an SRS is identified is known as **Well-known ID**
    (**wkid**).
  prefs: []
  type: TYPE_NORMAL
- en: A string listing the parameters used to define a spatial reference system is
    known as **Well-known Text** (**wkt**).
  prefs: []
  type: TYPE_NORMAL
- en: As you might have anticipated, each spatial reference system is associated with
    different measurement systems such as feet, meters, or decimal degrees.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `4326` is the wkid of the global coordinate system known as **WGS
    84**. The measurement unit for this reference system is decimal degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '`102100` is the wkid of another global coordinate system whose measurement
    unit is meters.'
  prefs: []
  type: TYPE_NORMAL
- en: The following URLs give a list of wkids and the corresponding wkt at [https://developers.arcgis.com/javascript/jshelp/pcs.html](https://developers.arcgis.com/javascript/jshelp/pcs.html)
    and [https://developers.arcgis.com/javascript/jshelp/gcs.html](https://developers.arcgis.com/javascript/jshelp/gcs.html).
  prefs: []
  type: TYPE_NORMAL
- en: The quiz results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A 1\. (100002, 100002)—relative to the origin, the point is 2 units away in
    the positive x-direction and 2 units away in the positive y-direction.
  prefs: []
  type: TYPE_NORMAL
- en: A 2\. A sequence of coordinates can either be a polyline or a polygon unless
    mentioned explicitly in the geometry object. But a polygon has one property that
    makes it different from a polyline—the first and last coordinate must be the same.
    A polyline can have the same first and last coordinates, but not all polylines
    fulfil this criteria.
  prefs: []
  type: TYPE_NORMAL
- en: A 3\. If your answer was 4, that's great! But if your answer was 2, you're awesome.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s right. Just two coordinates are sufficient to define the rectangle,
    thanks to its perpendicularity property. The two coordinates could be any pair
    of diagonally opposite coordinates, but for the sake of the API, we will take
    the left-bottom coordinate and the upper-right coordinate. The bottom-left coordinate
    has the minimum *x* and *y* coordinate values among the 4 coordinate value pair,
    and the upper-right coordinate has the maximum *x* and *y* coordinate values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The quiz results](graphics/B04959_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting the current map extent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Zoom the map to the extent you want to set as the initial extent of the map.
    In the jump start code, the map variable is a global object since this is declared
    outside the `require` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we can access the map''s properties in the browser console.
    After zooming the map and the extent you want as the initial map extent, open
    the developer tools using the *Ctrl* + *Shift* + *I* command (in Chrome). In the
    JavaScript browser console, try to access the map properties, `getMaxScale()`,
    `getMinZoom()`, `getMinScale()`, `getMaxZoom()`, `getScale()`, and `extent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the current map extent](graphics/B04959_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scale is literally the factor with which the map measures are scaled down from
    the real-world measures. Maximum scale shows the greatest details on the map,
    and the minimum scale of the map shows the least detail. The values for `map.getMaxScale()`
    is smaller than that for `map.getMinScale()`, because the scale values represent
    reciprocal numbers. Hence *1/591657527 < 1/9027* (1/9027.977411 and 1/591657527.59…,
    respectively, in our instance).
  prefs: []
  type: TYPE_NORMAL
- en: Zoom levels, on the other hand, are the discrete scale levels at which the map
    is displayed. Most maps that involve Basemaps or Tiledmaps (which will be discussed
    in later chapters) can only be displayed at specific scale levels known as zoom
    levels. The minimum zoom level is mostly `0` and is associated with the maximum
    scale of the map.
  prefs: []
  type: TYPE_NORMAL
- en: '`map.getScale()` gives us the current scale, and `map.extent` gives us the
    current extent of the map. We can use this `extent` object to set the extent of
    the map using the `setExtent()` method in the map. Refer to the API documentation
    for the `map` module and navigate to the `setExtent` method of the map. The `setExtent()`
    method accepts two parameters—the `Extent` object and an optional fit object.
    When we click on the hyperlinked `Extent` object, as provided in the document,
    it redirects us to the API documentation page for the `Extent` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the current map extent](graphics/B04959_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The constructor for `Extent` accepts a JSON object and converts it into an
    extent object. We can obtain this JSON object from the JSON string of the map''s
    extent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the current map extent](graphics/B04959_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding image shows us the JSON string of the extent of the map that
    we have zoomed into. The following screenshot displays what the coordinates mean
    with respect to the map area we intend to zoom into (which is highlighted with
    the rectangle):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the current map extent](graphics/B04959_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can copy the JSON object, create an `Extent` object, and assign it
    the `setExtent` method of the map. But before this, we need to import the `Extent`
    module (`esri/geometry/Extent`). The following screenshot explains how to implement
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the current map extent](graphics/B04959_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we refresh the map now, the map will automatically zoom into the extent
    that we have set.
  prefs: []
  type: TYPE_NORMAL
- en: The template generator for loading modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous code where we successfully set the initial extent of the map,
    we had to use two modules: `esri/map` and `esri/geometry/Extent`. As the application
    grows, we may need to add many more modules to add additional functionality to
    the app. For a novice user, finding the module names from the API and incorporating
    them into the app might be cumbersome. This has been made easy using a web app
    template generator that can be found at [http://swingley.github.io/arg/](http://swingley.github.io/arg/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The template generator for loading modules](graphics/B04959_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The modules that are needed for our `require` function can be typed into the
    text box provided at the top of the application. There are two multi-selection
    list boxes: one listing the Esri modules and the other listing the dojo modules.
    Once we start typing the name of the modules required for our application, the
    list gets populated with the suggested modules matching the name we have typed.
    Once we select the module we need from either list box, it gets added to the list
    of modules in the `require` function, and an appropriate alias is added to the
    callback function as a parameter. Once all the required modules are selected,
    we can use the bare bone template being generated on the right side of the app.
    For setting the initial extent of the map, you may load the required modules by
    searching for the following names:'
  prefs: []
  type: TYPE_NORMAL
- en: Map (`esri/map`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extent (`esri/geometry/Extent`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding dojo and AMD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the name suggests, the AMD pattern of coding relies on modularizing your
    JavaScript code. There are lots of reason why you might need to start writing
    modular code or modules:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules are written for a single purpose and are focused
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules are hence reusable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules have a cleaner global scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are many formats for writing modular JavaScript, such as CommonJS
    and ES Harmony, we will be dealing with AMD only because the latest versions of
    ArcGIS JavaScript API and the dojo toolkit upon which it is based uses the AMD
    style of coding. Dojo loader resolves the dependencies and loads the modules asynchronously
    while running the application.
  prefs: []
  type: TYPE_NORMAL
- en: The key components of AMD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll look at the `define` and `require` methods, which are
    the key components of AMD.
  prefs: []
  type: TYPE_NORMAL
- en: The define method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `define` method defines a module. A module can have its own private variables
    and functions and only those variables and functions returned by the `define`
    function are exposed by other functions importing this module. An example for
    the `define` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The define method](graphics/B04959_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the following in our code example:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter in the `define` method is a module name or ID. This is optional.
    `dojoGreeting` is the name of our module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is an array of dependencies for our module. We didn't need
    any dependencies for this module, so we just pass an empty array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is a callback function that accepts any alias name for our
    dependencies that we might have loaded. Note that the alias names that are used
    as function parameters should be in the same order as it was defined in the dependency
    array. Since we didn't use any dependencies, we don't pass anything into this
    callback function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the callback function, we can have as many privately scoped variables
    and functions as required. Any variable or function we'd like to expose from this
    module should be included in a `return` statement within the definition function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, `_dojoGreeting` is a privately scoped variable that is returned
    by the `define` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The require method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `require` method uses custom defined modules or modules defined in an external
    library. Let''s use the module we just defined with a `require` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The require method](graphics/B04959_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s about it. Pay close attention to the parameters of the `require` method:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is an array of module dependencies. The first module dependency
    is the custom module we just defined, `dojoGreeting`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dojo/dom` module lets us interact with the `dom` elements in HTML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojo/domReady!` is an AMD plugin that will wait until the DOM has finished
    loading before returning. Note that the plugin uses a special character "`!`"
    at the end. We need not assign an alias in the callback function since its return
    is meaningless. Hence this should be one of the last modules to be used in the
    dependency array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback function uses `dojoGreeting` and `dom` as the alias for the `dojoGreeting`
    and `dojo/dom` modules respectively. As mentioned earlier, we need not use an
    alias for `dojo/domReady!`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `byId()` method of the `dom` module returns a reference of a `dom` node
    by its ID. It's very much equivalent to `document.getElementById()`, only that
    the `dom.byId()` works across all browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our register method, we are assuming we have a `div` element with its ID
    as `greeting`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some awesome dojo modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have already been introduced to two dojo modules, namely `dojo/dom` and
    `dojo/domReady`. Now, it's time to get familiarized with some other awesome `dojo`
    modules, which you should try using wherever possible while writing an ArcGIS
    JS API application. Sticking to using pure dojo and Esri JS modules will have
    enormous kickbacks in terms of code integrity and cross-browser uniformity. What's
    more? Dojo has some pleasant surprises for you in terms of the commonly used JavaScript
    functionalities, some of which we are going to introduce very shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Dojo dom modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You''ve already used the `dojo/dom` module. But there are other dojo `dom`
    modules, which will let you manipulate and work with the `dom` nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dojo/dom-attr`: This is the go-to module for anything related to `dom` attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `has()` method in the module checks whether an attribute is present in a
    given node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `get()` method returns the value of the requested attribute or null if that
    attribute does not have a specified or default value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you might have guessed, there is a `set()` method that you can use to set
    values to an attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojo/dom-class`: This module provides most of the operations you need to do
    with CSS classes associated with the `dom` nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojo/dom-construct`: The `dojo/dom-construct` module lets you construct `dom`
    elements easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dojo event handler module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dojo/on` module is an event handler module that is supported by most browsers.
    The `dojo/on` module could handle events from most types of object.
  prefs: []
  type: TYPE_NORMAL
- en: Dojo array module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should prefer dojo's array module over the native JavaScript array functions
    for a variety of reasons. Dojo's array module is named `dojo/_base/array`.
  prefs: []
  type: TYPE_NORMAL
- en: dojo/_base/array
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As you would expect from an array module, there's an iterator method known as
    `forEach()` as well as the `indexOf()` and `lastIndexOf()` methods. Now comes
    the best part. There's a `filter()` method that returns an array filtered by a
    particular condition. We find the `map()` method a gem since it not only iterates
    through an array but also allows us to modify the items in the callback function
    and return the modified array. Ever wanted to check whether each or at least one
    element of the array met a particular condition? Check out the `every()` and `some()`
    methods in this module.
  prefs: []
  type: TYPE_NORMAL
- en: 'This sample code explains two main methods of the dojo array module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![dojo/_base/array](graphics/B04959_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding code prints the following to the browser''s console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Understanding ArcGIS Server and the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ArcGIS Server is an Esri product for enabling WebGIS by sharing geospatial data
    over the web. Our JavaScript API is capable of consuming a lot of services exposed
    by this server through the REST API. It simply means that all these services exposed
    by the ArcGIS Server is available through a URL. Now, let's look at how the REST
    API interface is so helpful to developers.
  prefs: []
  type: TYPE_NORMAL
- en: Types of service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you ran the first code given in this book, you saw a cartographic map
    on the web page. The map you saw in the browser was actually a collection of images
    stitched together. You will realize this if you observed the **Networks** tab
    in the developer tools when you loaded the map. The individual images are called
    **tiles**. These tiles are also served by an ArcGIS MAP server. Here''s a URL
    for one such tile: [http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/2/1/2](http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/2/1/2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This just means that any resource published via ArcGIS Server and available
    to the API is through an URL, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Types of service](graphics/B04959_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An ArcGIS service endpoint will have the following format: `<ArcGIS_Server_Name>/ArcGIS/rest/services/<Folder_Name>/
    <ServiceType>`.'
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Server provides a user interface to view these REST endpoints. This interface
    is popularly known as the **Service Catalog**.
  prefs: []
  type: TYPE_NORMAL
- en: The Service Catalog is something the developer needs to consult before planning
    to use a particular GIS service. The Service Catalog supports multiple formats
    such as JSON and HTML, HTML being the default format. If you're unable to view
    the Service Catalog, you need to contact your GIS Administrator to enable the
    service-browsing capability for the service you're interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Service Catalog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's explore a sample GIS server provided by Esri named `sampleserver3.arcgisonline.com`.
  prefs: []
  type: TYPE_NORMAL
- en: To view the Service Catalog for any GIS server, the syntax is `<GIS Server Name>/ArcGIS/rest/services`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the URL we need to navigate to is: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see this screen in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Service Catalog](graphics/B04959_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The items of interest in the Service Catalog are the list of links below the
    **Folders** heading tag and the list of links under the **Services** heading tag.
    We encourage you to navigate to each of these links and see the kinds of service
    they expose. You will find the following types of service:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MapServer**: This serves geospatial data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FeatureServer**: This enables the editing functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ImageServer**: This serves image tiles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Didn't we mention that the Service Catalog supports multiple formats such as
    JSON? We encourage you to append a query string parameter, such as `?f=json`,
    at the end of the URL. To view the Service Catalog as an HTML, just remove the
    query string parameter from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Map server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A map server exposes GIS data as a REST endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore more about a particular map server named `Parcels` inside the
    folder `BloomfieldHillsMichigan`. Navigate to this URL: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following heading tags are of particular interest to us: layers, tables,
    and description. Now, let''s delve more into one of the layers in the map server.
    All three layers are worth navigating through. For the purpose of explanation,
    let''s choose the first layer (Layer ID: `0`), which can be navigated to directly
    using this URL: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0).'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the heading tags listed in this URL are worth contemplating. We''ll discuss
    some of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Geometry Type** describes the type of geometry of the particular layer. In
    our URL under investigation, it is named `''esriGeometryPoint''`, which means
    it is a point feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meta data such as `'Description'`, `'Copyright Text'`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about the Geographic Extent of the data under the tags `'Extent'`
    and `'Spatial Reference'`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Drawing Info` tag defines how the data is rendered on the map.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''Fields''` reveals the table schema of our layer. The actual field name is
    mentioned along with the type of the field and the alias name of the field. The
    alias and field type information is necessary to perform queries on the data.
    A field type of `''esriFieldTypeString''` and `''esriFieldTypeSmallInteger''`
    indicates that the field should be treated as a string and number respectively.
    `''esriFieldTypeOID''` is a special type of field that holds the unique Object
    ID of the features in the layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Query endpoint
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At the bottom of the page, there will be a heading tag named **Supported Operations**
    listing the links to the various endpoints exposed by this layer. There might
    a link with a text called **Query**. This link is the reason for our delving into
    ArcGIS Server and REST endpoints. Click on the link or navigate to it using this
    direct URL: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query).'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Query endpoint](graphics/B04959_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The UI provides us all possible ways that we can query with that particular
    layer (**Building Footprints**). The query operation seems to support both spatial
    as well as flat table SQL queries. As of now, let''s just discuss the flat table
    queries. The **Where** field and the **Return Fields (Comma Separated)** are the
    ones that deal with flat table queries. The **Where** field accepts a standard
    SQL `where` clause as input, and the **Return Fields** accepts a comma-separated
    value of field names that needs to be the output. But we''re explorers at this
    stage of development, and we just need to see the kind of data returned by this
    interface. Feed the following values into the corresponding textbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Where**: `1 = 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Return Fields**: `*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Query (GET)** button and scroll to the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The query literally returns all the layer data from all the fields from the
    database, but ArcGIS Server limits the results to 1000 features. Note that the
    browser URL has changed. The following URL is the REST GET request URL that was
    used to fire this query: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?text=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=1%3D1&time=&returnIdsOnly=false&returnGeometry=true&maxAllowableOffset=&outSR=&outFields=*&f=html](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?text=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&objectIds=&where=1%3D1&time=&returnIdsOnly=false&returnGeometry=true&maxAllowableOffset=&outSR=&outFields=*&f=html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following URL, removing all optional and undefined query parameters from
    the preceding URL, will also yield the same result: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?where=1%3D1&outFields=*&f=html](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?where=1%3D1&outFields=*&f=html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s analyze the result data a bit more by narrowing down our `Where`
    clause. Note the **OBJECTID** field of the first feature among the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the value in the `Where` clause text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the noted **OBJECTID** in the Object IDs text box. The object ID we noted
    was **5991** (but you could very well pick any).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's a drop-down labeled format. Select the drop-down value named `'json'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Query (GET)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Or, here''s the direct URL achieving the same operation: [http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?objectIds=5991outFields=*&f=pjson](http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer/0/query?objectIds=5991outFields=*&f=pjson).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the results look very detailed. What we are looking at is the data of a
    single feature. The JSON returns several features key value pairs with keys such
    as `displayFieldName`, `fieldAliases`, `geometryType`, `spatialReference`, `fields`,
    and `features`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the `feature` key value pair. The value for the `features` key
    is an array of objects. Each object has keys named `attributes` and `geometry`.
    The attributes hold the value of an object listing the key values of field names
    and its values. In our case, `PARCELID` is the fieldname and `"1916101009"` is
    its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Query endpoint](graphics/B04959_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The geometry object represents the polygon feature with an array of ring objects.
    And each ring is an array of floating point numbers. We earlier dealt with a polygon
    as just an array of coordinates. But ArcGIS Server treats a polygon as an array
    of rings. To understand the concept of rings, please look at the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Query endpoint](graphics/B04959_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding illustration, we dealt with two disjoint polygons, but it is
    considered as a single unit in the real world, such as a house and garage. ArcGIS
    represents the polygon feature with two rings. The first rings consists of coordinates
    called [[x1, y1], [x2, y2],…[x6,y6]], and the second ring consists of coordinates
    called [[x7,y7],..[x10, y10]].
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used the ArcGIS JS API's CDN to access the API and tried to understand the
    map and Esri geometry modules. We tried to better understand extents and spatial
    references by brushing up our knowledge of coordinate geometry. We now know that
    an extent is just a minimum bounding rectangle that could be defined using two
    coordinates, and a spatial reference system is akin to the coordinate axes on
    a graph. We tried to look at some of the amazing modules that the dojo toolkit
    provides, which we must consider using in our code. ArcGIS Server exposes its
    GIS data and other resources as a REST API, that is, it is available as a URL.
    You also learned that a developer must always consult the Service Catalog before
    starting to consume any service through the API. we laid down our preferences
    in the way of development environment for working through projects in this book.
    The next chapter deals with the different types of layer used in the API and the
    ideal context where each type is used. We will also be introduced to some of the
    most commonly used in-built widgets provided by Esri, and we will use them in
    our application.
  prefs: []
  type: TYPE_NORMAL
