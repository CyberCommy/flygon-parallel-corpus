- en: Appendix B. Using CSS Preprocessors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have already read any part of the book, you already know that I am begging
    you to use a CSS preprocessor, such as Sass or LESS. I prefer Sass for several
    reasons, but I won't really go into the details too much. Instead, I prefer to
    focus on the similarities between the two, and I will leave it to you to decide
    which framework you prefer. I am not being coy or disingenuous; I honestly find
    such arguments exhausting, especially when they come down to individual contexts.
  prefs: []
  type: TYPE_NORMAL
- en: I will say for the nth time that I prefer Sass. For me, some of it is the syntax
    but the differences from LESS are fairly minor. For me, another part of it is
    that I work mainly with Ruby on Rails, and Rails supports Sass right out of the
    box. Furthermore, I find the syntax of SCSS (rather than the older Sass that came
    earlier) to be so similar to CSS, which I've been using for about 25 percent of
    my life, so I also prefer it because it's less of a cognitive shift from CSS,
    which I know so well.
  prefs: []
  type: TYPE_NORMAL
- en: I also find some of the syntax of LESS to be confusing. The two main examples
    are how they use the `@` symbol for global variables, as opposed to the `$` symbol
    that Sass uses, and how LESS uses the notation for a CSS class, `.`(period), to
    call a mixin, whereas Sass uses the more explicit `@include`. These are admittedly
    small quibbles.
  prefs: []
  type: TYPE_NORMAL
- en: But, there, those are my reasons. I hope you find them helpful in figuring out
    what works best for you.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to understanding how all of these preprocessors help you
    work fast and efficiently. Hopefully, this is enough to whet your appetite so
    you can learn more. I will end the chapter with a list of resources, where you
    can go to learn more independently.
  prefs: []
  type: TYPE_NORMAL
- en: Why?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Why do we need something to preprocess CSS? Here are a few simple reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: There are no variables in CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When styling nested elements, your code will not be DRY, that is, you will type
    a lot of classes and/or IDs repeatedly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It isn't convenient to re-use code in CSS, so you end up with code that isn't
    DRY
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no logic at all to CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocessors allow us to manipulate color relationships in a dynamic way rather
    than statically assigning all color values; this is especially powerful when coupled
    with the ability to use variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are broad explanations. This appendix, and essentially this whole book
    should give you lots of detailed examples of when these are useful.
  prefs: []
  type: TYPE_NORMAL
- en: How?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ok, so you've never tried a preprocessor. How do you get started? Of course,
    that depends on whether you choose LESS over Sass. I will walk you through three
    simple ways to use either of the two.
  prefs: []
  type: TYPE_NORMAL
- en: CodeKit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to get started is with a Mac OS X application called CodeKit.
    I don't get kickbacks from the maker of this app. It's just a solid, simple app
    that does tons of stuff that used to be kind of a pain. It's not that expensive
    and you can get it at [http://incident57.com/codekit/](http://incident57.com).
  prefs: []
  type: TYPE_NORMAL
- en: If you use anything other than a Mac, you are sadly out of luck as this app
    is for Mac only.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've downloaded and launched it, it is trivial to add a project. The
    app is smart enough to find all the files in your project; more precisely, the
    files that fit into these categories are stylesheets, scripts, pages, and images.
  prefs: []
  type: TYPE_NORMAL
- en: CodeKit will preprocess all of these things in various ways; it will even optimize
    your images for you. As much as I am a fan of the command line, the convenience
    of this app has really won me over. I am trying to avoid gushing here but it will
    also do things such as preprocess haml and run JSLint or JSHint; it concatenates
    and minifies all your JavaScipt, optimizes the images, and has many features,
    which I won't go deep into.
  prefs: []
  type: TYPE_NORMAL
- en: But, we are not here right now to use all those things; we are here to discuss
    how it facilitates the preprocessing of LESS and Sass. I am going to continue
    to describe how to set this up with the assumption that you don't own this app
    yet but just want to know more about how it works and, more specifically, how
    it works with 320 and Up. If you are using 320 and Up, and already have all your
    project files where they should be, you don't have to do much of anything else
    to get started. Just make sure that you select the appropriate file that essentially
    pulls in all the other files, and make sure it outputs the right file to the right
    location. Since CodeKit has an easy UI, all you have to do is right-click on `320andup-scss.scss`
    (for example, there is an equivalent file for LESS and the others) and set the
    output path, filename, and so on. That's just about it. Now let's look at some
    command-line tools.
  prefs: []
  type: TYPE_NORMAL
- en: Compass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compass is a command-line tool that is community-driven. There are also GUIs
    for it. I have less experience with it, but there are lots of tutorials and guides
    on their site if you want to give it a go: [http://compass-style.org/](http://compass-style.org/).
    Compass is a Ruby gem, so you can install and run it easily on the command line.
    Compass won''t process LESS. But the LESS preprocessor is pretty simple to set
    up with the Node package manager.'
  prefs: []
  type: TYPE_NORMAL
- en: The Sass/LESS gem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This solution is similar to using Compass. You install a gem on the command
    line with a simple configuration. Just as with the previously mentioned Compass
    and CodeKit, it will look for file changes and process your preprocessed code.
    I've had issues with LESS for successfully looking out for any code changes.
  prefs: []
  type: TYPE_NORMAL
- en: Rails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, this is technically a fourth way and it's a bit redundant to mention Rails
    as a way to preprocess CSS but you can use any of the previously mentioned gems
    within a Rails project. The Sass gems will watch for code changes and process
    them without any further interaction. Again, in the past I've had issues getting
    LESS to watch for file changes and I had to restart the server to get it to process
    the code. This is unacceptable to me, since it just gobbles up time. On the other
    hand, things may have been fixed by now but I have moved on to Sass for additional
    reasons, some of which I previously outlined.
  prefs: []
  type: TYPE_NORMAL
- en: We will move on to what is happening in the preprocessed code itself in a moment,
    but I just want to tell you that, if you are intimidated by command-line tools,
    don't be. I entered this profession starting out mainly as a graphics guy, and
    have come to love the simplicity and elegance of the command line. There are many
    simple beginner courses that are free or are very cheap online and that will help
    you to get over your fears or confusion. I am a fan of the *Learn the Hard Way*
    tutorials, but there are tons more, and there will continue to be more. Once you
    know your way around the command line, I can assure that you will be able to work
    more efficiently than before.
  prefs: []
  type: TYPE_NORMAL
- en: What?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at the sample project we are working with to see how it all hangs
    together. In this book, I focused on the SCSS variant of 320 and Up, so I will
    continue using the same through this appendix. For the most part, LESS is similar
    but has some syntactic differences. I will point out a few key examples along
    the way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the `before` project file from [Chapter 2](ch02.html "Chapter 2. Building
    the Home Page"), *Building the Home Page*. Take a peek inside the `320andup` directory
    and look at the file structure for the moment. The main things I want to focus
    on are the `css` directory and the `scss` directory. The other siblings such as
    `less`, `sass-compass`, `sass`, and `scss-compass` hold the code to skin this
    cat in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the `scss` folder, you will notice the file `320andup-scss.scss`
    and a bunch of files with underscores in front of them. The files with the underscores
    in front of them, for example, `_1382.scss`, are called partials. The underscore
    lets the preprocessor know not to turn these individual files into CSS. But they
    will have to get processed eventually though, right? That happens after they get
    imported to the one and only file that doesn't have an underscore in front of
    it. (LESS, on the other hand, does not use this underscore convention. For me,
    this is another small advantage I give to Sass. With Sass, I can make a quick
    visual scan of the file tree and know which files are partials and which aren't.)
  prefs: []
  type: TYPE_NORMAL
- en: Using the `320andup-scss.scss` file as an example, think of this file as the
    mother ship. All the other little ships dock there and unload their cargo. Once
    it's all there, things begin to happen. To be specific, CSS happens.
  prefs: []
  type: TYPE_NORMAL
- en: To learn how this comes together, let's look at the mother ship—`320andup-scss.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the file is just a nice clean file that orders `imports`.
    Notice that the partials don't have the underscore in front of them in the `import`
    statements. Also, the ordering is important as, for example, you want to define
    all your variables and mixins before you try to use them. The other `imports`
    are placed inside the `@media` queries so that those files preceded by underscores
    (partials) are only used inside those queries.
  prefs: []
  type: TYPE_NORMAL
- en: What's so great about this? It keeps your code super tidy—easy to work with
    and maintain. This is the benefit of the 320 and Up framework. It takes care of
    the busy work of organizing all of this.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I want to list some resources for you to check out to learn more about
    the CSS preprocessors and their helpers. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following list is a list of resources for you to learn more about CSS preprocessors
    and their helpers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sass: [http://sass-lang.com/](http://sass-lang.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LESS: [http://lesscss.org/](http://lesscss.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compass: [http://compass-style.org/](http://compass-style.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CodeKit: [http://incident57.com/codekit/](http://incident57.com/codekit/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
