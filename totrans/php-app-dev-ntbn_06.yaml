- en: Chapter 6. Understanding Git, the NetBeans Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Commit early and commit often.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will introduce the version control system, to manage the
    changes in our source code. To do this, we will learn to use **Git**, a free and
    open source-distributed version control system. We will use Git from NetBeans
    in a step-by-step manner. In particular, we will discuss the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Version control system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed Version Control System** (**DVCS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git—the fast and distributed version control system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging files into a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing changes to a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing file revisions, and reverting changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with remote repositories—fetching, pulling, and pushing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with branches—creating, checking out, switching, merging, and deleting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A version control system (an aspect of **Source Code Management** or **SCM)**
    is a combination of technologies and practices for tracking and controlling changes
    to a project's files, particularly for source code, documentation, and web pages.
  prefs: []
  type: TYPE_NORMAL
- en: The reason version control is so universal is that it helps with virtually every
    aspect of running a project—inter-developer communications, release management,
    bug management, code stability and experimental development efforts, and attribution
    and authorization of changes by particular developers. The version control system
    provides a central coordinating force among all of these areas.
  prefs: []
  type: TYPE_NORMAL
- en: The core activity of version control is **change management**—identifying each
    discrete change made to the project's files, annotating each change with its metadata,
    such as the timestamp and author of the change, and then replaying these facts
    to whoever asks, in whatever way they ask. It is a communications mechanism where
    a change is the basic unit of information, and such changes can be compared and
    restored with some types of merged files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Version control system](graphics/5801_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s discuss the common version control system terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository:** The repository, also known as **repo**, is where the file''s
    current and historical data is stored. At the core of the version control system
    is the repository, which can have centralized or distributed storage of that system''s
    data. The repository usually stores the information in the form of a filesystem
    tree, which is a hierarchy of files and directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working copy:** A working copy is a developer''s private directory tree,
    containing the project''s source code files and possibly its web pages, or other
    documents. A working copy also contains a little bit of metadata managed by the
    version control system, telling the working copy what repository it comes from,
    what "revisions" of the files are present, and so on. Generally, each developer
    has his own working copy, in which he makes and tests the changes, and from which
    he commits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In decentralized version control systems, each working copy is a repository
    in itself, and the changes can be pushed out to (or pulled into) any repository
    that's willing to accept them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Working tree:** This is the tree of actual, checked-out files. The working
    tree is normally equal to HEAD, plus any local changes that you have made, but
    not yet committed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Origin:** This refers to the original repository, or the default, upstream
    repository. Most projects have at least one upstream project, which they track.
    By default, origin is used for this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Master:** This refers to the default development branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HEAD:** This is the latest version in a branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit:** This is used for making a change to the project; more formally,
    to store a change in the version control database in such a way that it can be
    incorporated into the future releases of the project referred to as commit. A
    commit creates a new version that is essentially a snapshot of the file(s) in
    your project at a particular point in time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Index:** This is a collection of files with stat information, whose contents
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The index is used as a staging area between your working directory and your
    repository. You can use the index to build up a set of changes that you want to
    commit together. When you create a commit, what is committed is what is currently
    in the index, not what is in your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Revision:** A "revision" is usually a specific incarnation of one particular
    file or directory. For example, if the project starts out with revision `6` of
    file `F`, and then someone commits a change to `F`, this produces revision `7`
    of `F`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Checkout:** Checkout is the process of obtaining a copy of the project, file,
    revision, and so on from a repository. A checkout usually produces a directory
    tree called a "working copy", from which changes may be committed back to the
    original repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch:** This is a copy of the project, under version control, but isolated,
    so that changes made to the branch don''t affect the rest of the project. Branches
    are also known as **lines of development**. Even when a project has no explicit
    branches, development is still considered to be happening on the "main branch",
    also known as the "main line" or "trunk".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge:** Merge requires copying a change from one branch to another. This
    involves merging from the main trunk to some other branch, or vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merge has a second related meaning—it is what the version control system does
    when it sees that two people have changed the same file but in non-overlapping
    ways. Since the two changes do not interfere with each other, when one person
    updates their copy of the file (already containing their own changes), the other
    person's changes will automatically be merged in. This is very common, especially
    on projects where multiple people are hacking into the same code. When two different
    changes do overlap, the result is a **conflict.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Conflict:** This is what happens when two people try to make different changes
    to the same area in the code. All version control systems automatically detect
    conflicts and notify at least one of the humans involved that their changes conflict
    with someone else''s. It is then up to that human to resolve the conflict and
    communicate that resolution to the version control system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Revert:** To roll back to the previous revision, we do revert changes; that
    is, we throw away the changes and return to the point of the last update. This
    is handy when you''ve broken your local build and are unable to figure out how
    to get it working again. Sometimes reverting is faster than debugging, especially
    if you have checked in recently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diff:** This is a viewable representation of a change, and it shows which
    lines were changed and how, plus a few lines of surrounding context on either
    side. A developer who is already familiar with some code can usually read a diff
    against that code, understand what the change did, and even spot bugs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tag:** A tag is a label for a particular collection of files at specified
    revisions. Tags are usually used to preserve interesting snapshots of the project.
    For example, a tag is usually made for each public release, so that one can obtain,
    directly from the version control system, the exact set of files/revisions comprising
    that release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some version control systems are centralized—there is a single master repository,
    which stores all the changes made to the project. Others are decentralized—each
    developer has their own repository, and changes can be swapped back and forth
    between repositories, arbitrarily.
  prefs: []
  type: TYPE_NORMAL
- en: In distributed version control systems (such as Git, Mercurial, or Bazaar),
    developers (clients) don't just check out the latest snapshot of the files, but
    also fully mirror the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets have look at the distributed version control schematic diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distributed version control](graphics/5801_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Git the fast and distributed version control system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a free and open source distributed version control system, designed to
    handle everything from small to very large projects with speed and efficiency.
    In Git, you can have your own local repository and nearly all the operations in
    local.
  prefs: []
  type: TYPE_NORMAL
- en: Every Git clone is a fully-fledged repository with a complete history and full
    revision-tracking capabilities, which are not dependent on network access or a
    central server. Branching and merging are fast and easy to do.
  prefs: []
  type: TYPE_NORMAL
- en: Git is used for the version control of files, much like tools such as Mercurial,
    Subversion, CVS, Perforce ([http://git-scm.com/](http://git-scm.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Git was initially designed and developed by *Linus Torvalds* for Linux kernel
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Git, the NetBeans way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NetBeans IDE provides excellent support for the Git version control client.
    The IDE's Git support allows you to perform versioning tasks directly from your
    project within the IDE. You can have the Git repository in two approaches, where
    the first one takes an existing project or directory and imports it into Git,
    and the second one clones an existing Git repository from another server computer.
  prefs: []
  type: TYPE_NORMAL
- en: In our upcoming sections, using NetBeans, we will try to initiate a Git repository
    and learn how to clone a Git repository. To do this, we will create a sample NetBeans
    project named `Chapter6` with the project metadata stored in a separate directory,
    as we don't need the project metadata under version control, and will practice
    in the project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a Git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are starting to track an existing project in Git, or want your existing
    project under version control, then you want to initiate the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — initializing a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To initialize a Git repository from your existing project or source files,
    which are not under version control yet, you can go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project `Chapter6`, and select **Versioning | Initialize
    Git Repository** from the context menu.![Time for action — initializing a Git
    repository](graphics/5801_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, specify the directory path where the repository will be created in the
    **Initialize a Git Repository** dialog box. In our case, we choose the same project
    path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** and you can check the repository creation progress or status
    in the **Output** window (*Ctrl*+*4*) as follows:![Time for action — initializing
    a Git repository](graphics/5801_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `.git` subdirectory will be created under your project directory, where all
    the data of your project snapshots is stored. Git starts versioning all the files
    in the specified directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that all the project file(s) are marked as `-/Added` in the project
    tree. To view a file status, just hover on the filename, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — initializing a Git repository](graphics/5801_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the file status has been displayed in green, to the right of
    the slash.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the newly added lines inside the `index.php` file are marked
    with green, as shown in the previous screenshot. You can see the number of added
    lines since the earlier version, hovering on the green highlights. As soon as
    the Git repository is created, all the options for Git from the IDE can be available
    directly under the **Team** menu or the **Team | Git** submenu for the current
    project.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully initialized the Git repository for placing our existing
    project files under version control using NetBeans. Thus, we have our own fully-fledged
    local Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: To work with remote repositories, you may add a remote Git repository as the
    origin of this initialized repo. In this way, you can perform a remote repository
    syncing with your local repository. Now, we can add files or directly commit them
    to the local Git repository; but before that, let's try the second approach with
    cloning a Git repository. Note that along with cloning a repository, we may also
    create another new project.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a Git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say you have been added as a collaborator into an existing project maintained
    under Git. If you want to get a copy of an existing Git repository or a project
    you would like to contribute to, you will need a Git clone of that repo for it.
    A direct collaborator is a trusted and experienced developer added by the repository
    owner, who contributes to the project and can perform regular Git operations into
    the original repository.
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, we have already created a Git repository at GitHub.com (free
    Git hosting) named `chapter6demo` ([https://github.com/mahtonu/chapter6demo](https://github.com/mahtonu/chapter6demo)),
    and for test purposes, we have added another account as a collaborator over there.
    Now, we are going to clone that repository from GitHub.com and practice regular
    Git features from the NetBeans IDE using that collaborator account. To clone via
    SSH and to perform as a collaborator on a GitHub project, you need a GitHub account,
    and need to be added as a member into the project by the corresponding project
    owner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To host your source code at GitHub.com, sign up and create your own repository
    over there.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you need to add your public key at **Settings | SSH keys** ([https://github.com/settings/ssh](https://github.com/settings/ssh))
    for Git operations via **Secure Shell** (**SSH**), from your computer.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows OS, you may use **PuTTYgen** ([http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html))
    to generate your keys, and must convert them into the **OpenSSH** format before
    using them in the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding with the following tutorial, you may create a sample repository
    at GitHub and add another GitHub test account as collaborator into the repository
    (from **ADMIN | Collaborators)**, and remember to add Public keys for those corresponding
    accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — cloning a Git repository from GitHub via the SSH protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this tutorial, we will act as a collaborator to that GitHub project, and
    have our own SSH public key added to the GitHub account. We will add our SSH private
    key using NetBeans. Along with repository cloning, NetBeans provides the option
    to create a fresh new project:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Team | Git | Clone...**, and the **Clone Repository** wizard will be
    displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the path to the repository required in the **Repository URL** field,
    for example `git@github.com:mahtonu/chapter6demo.git`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that **Username** is `git`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse the **Private Key File** location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Passphrase**, which you created during the key generation, and (optionally)
    select the **Save Passphrase** checkbox. The **Remote Repository** page at the
    **Clone Repository** wizard looks similar to the following screenshot:![Time for
    action — cloning a Git repository from GitHub via the SSH protocol](graphics/5801_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**, and select the repository branch that needs to be fetched
    (downloaded) to your local repository at the **Remote Branches** page, for example,
    `master`.![Time for action — cloning a Git repository from GitHub via the SSH
    protocol](graphics/5801_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**, and fill in or browse the **Parent Directory** where the
    clone directory will be placed at the **Destination Directory** page. The repository
    name is filled in the **Clone Name** field automatically, which will be the local
    clone directory name.![Time for action — cloning a Git repository from GitHub
    via the SSH protocol](graphics/5801_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screenshot, **Checkout Branch** is set to `master*` by default, and
    **Remote Name** is set to `origin`, which means that it is the original repository
    that we are going to clone. Also, leave the **Scan for NetBeans Projects after
    Clone** checkbox checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish** and see what is happening in the NetBeans **Output** window.
    You will be prompted to create a new NetBeans project from the cloned source,
    as shown in the following screenshot:![Time for action — cloning a Git repository
    from GitHub via the SSH protocol](graphics/5801_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created the NetBeans project from the cloned source as well, by selecting
    **New Project** with the existing sources option and storing the NetBeans project
    metadata into a separate directory, as we don't want them to be under Git. Also,
    you will find a single `README` file inside the project, which is already tracked
    and comes from the remote origin repository.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have cloned a repository via the SSH protocol, using NetBeans. Each of these
    clones acts as a fully-fledged repo, and a `.git` directory inside them contains
    all the revision information. So, now we have a working local repository and can
    work with the remote origin as well. What we have done is added one of our GitHub
    accounts into a GitHub project as the collaborator, and as we got access to that
    project, we cloned it from there using the NetBeans IDE. You can perform most
    Git operations from the IDE, and the results of these operations can be seen in
    the **Output** window.
  prefs: []
  type: TYPE_NORMAL
- en: From this point, we will learn to use Git operations from the IDE. The next
    sections are illustrated from a collaborator's perspective of adding, editing,
    comparing, committing files, pushing changes to remote, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — understanding Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which is the correct feature of Git?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Distributed version control system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue tracker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Centralized repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always network dependent
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is not a Git repository feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each Git clone is a fully-fledged repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A local Git repository is the subset of the original repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the commits are local
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: May have a remote origin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our preceding section, which key file was added into the IDE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Public Key file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Private Key file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both the key files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open SSH file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will be the file status symbol in the context of a repository in the NetBeans
    IDE for a newly created file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Added/-`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-/Added`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Added/+`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`+/Added`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Staging files to a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start tracking a new file and also to stage changes to an already tracked
    file in the Git repository, you want to add it to the repository. **Staging**
    means adding new or modified files under Git for *"changes to be committed"*.
  prefs: []
  type: TYPE_NORMAL
- en: When adding files to a Git repository, the IDE first composes and saves snapshots
    of your project in the **Index**. After you perform the commit, the IDE saves
    these snapshots in the HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — staging files to a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will learn how to stage files to our local Git repository.
    Staging is the state to add the changes to be committed. The following files can
    be called staged files:'
  prefs: []
  type: TYPE_NORMAL
- en: A newly created file added to the repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An existing file modified and added to the repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we will add a newly created file to the repo, and then we will add a
    modified file to repo:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will open the **Show Changes** viewer window of NetBeans Git.
    Right-click on the `chapter6demo` project node, and select **Git | Show Changes**.
    NetBeans will scan the repository and show any changes in the window. Now, any
    changes into the repository can be viewable in real time from this window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a new file into the NetBeans project in the usual way, which is `test.php`.
    You can see that the new `test.php` file is opened into the editor; hovering on
    the filename at the **Projects** pane shows the file status for Git.![Time for
    action — staging files to a Git repository](graphics/5801_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screenshot, we can see that the bottom of the Git window shows `test.php`
    as the newly added file, denoted as `-/Added`, which means that it's not added
    to the repo yet.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on `test.php`, and select **Git | Add** from the context menu. Now,
    the `test.php` file is available or can be tracked under Git. You can see the
    file status at the Git window as `Added/-`, which means that the file is ready
    to be committed or has been staged. Also, you can see the output window showing
    the Git operation status as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will open the existing `README` file, try to add some lines within it,
    and save it, to watch the effect it has in the local repository. Note that the
    file comes from the original remote repository. We can also view any changes in
    the Git window instantly.![Time for action — staging files to a Git repository](graphics/5801_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screenshot, we can see that a new line added to the file (marked in
    green) at the beginning states that the new line has been added from the earlier
    version. Also, at the Git window, you can see that the file status shows as `-/Modified`,
    which means the file has been modified but not added for staging yet.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **README**, and select **Git | Add** from the context menu. Now,
    the `README` file changes have been staged for commit. You can see the file status
    in the Git window as `Modified/-`, which means the file is either ready to be
    committed or has been staged. Note that each time you finish the modification
    of the file, you can repeat the step to stage the changes for the next commit.
    Also, the modified filename becomes blue, and the newly added filename becomes
    green within the NetBeans **Projects** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just learned how to stage files for the changes done so far, which are to
    be committed in the local repository. So, each time we have some changes, we may
    apply **Git | Add** to those files, in order to make them available for the next
    commit. Also, we have seen that the Git window shows the real-time status of the
    files in contrast to that of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the **Team** menu contains all the options immediately under it for
    that particular versioning system in use for the active project. For example,
    in our case, we can see that all the Git options are available under both the
    **Team** menu and the **Team | Git** submenu.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing changes in the source editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have a versioned file open in the IDE''s source editor, you can view
    real-time changes occurring to your file as you modify it against the base version
    from the Git repository. As you work, the IDE uses color codes in the source editor''s
    margins to convey the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blue: Indicates lines that have been changed since the earlier revision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Green: Indicates lines that have been added since the earlier revision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red: Indicates lines that have been removed since the earlier revision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source editor's left margin shows changes occurring on a line-by-line basis.
    When you modify a given line, changes are immediately shown in the left margin.
  prefs: []
  type: TYPE_NORMAL
- en: The source editor's right margin provides you with an overview, which displays
    changes made to your file as a whole, from top to bottom. Color coding is immediately
    generated when you make changes to your file. You can click on a specific point
    within the right margin to bring your inline cursor immediately to that location
    in the file.
  prefs: []
  type: TYPE_NORMAL
- en: Git window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already seen a real-time list of all of the changes made to the files
    within a selected folder of your local working tree in the Git window, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git window](graphics/5801_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this versioning window, you can see a toolbar with buttons, which enables
    you to invoke the most common Git tasks on all files displayed in the list. Using
    the buttons in the toolbar, you can choose to display the list of files that have
    differences in either the Index or the HEAD, the working tree and the Index, or
    the working tree and the HEAD. You can also click on the column headings above
    the listed files, to sort the files by name, status, or location.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — unstaging a staged file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's say that you have changed two files and want to commit them as two separate
    changes, but unintentionally staged them both. Try to unstage a staged file using
    **Team | Git | Reset...**; you may reset the HEAD from there.
  prefs: []
  type: TYPE_NORMAL
- en: Committing changes to the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to commit changes that have been staged.
    The changes made in the previous section will be committed into the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — committing changes to the local repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To commit changes to the local repository, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the file you want to commit to your local repository; that is `test.php`.
    Right-click on them and select **Git | Commit...** from the context menu. The
    commit dialog box will be displayed, as shown in the following screenshot:![Time
    for action — committing changes to the local repository](graphics/5801_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screenshot, you can see the **Commit Message** box. The **Files to Commit**
    list shows the staged files to be committed.
  prefs: []
  type: TYPE_NORMAL
- en: Type in a message for the **Commit Message** text area that will describe the
    intent of your source code commit. The commit message should convey a meaningful
    description of what the changes are and why.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can exclude a file from commit by unchecking the row, or you may specify
    some additional actions by right-clicking on a row. Click on **Commit** when you
    are done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IDE executed the commit and stored your snapshots to the repository. The
    IDE's status bar, located at the bottom-right of the interface, was displayed
    as the commit action took place. Upon a successful commit, versioning badges disappear
    in the **Projects, Files**, and **Favorites** windows, and the color code of committed
    files returns to normal. Also note that files at the **Git** window cleared, which
    means that the repository is up-to-date and no changes are available.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero — adding and committing all the files together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have staged new files to the repository and then committed those changes.
    Now, directly commit the new files to have them automatically staged from the
    IDE. You may add new files to the project; try to commit them directly, and see
    the difference.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing file revisions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Comparing file versions is a common job when working with versioned projects.
    The IDE enables you to compare revisions by using the `Diff` command. File revisions
    can be compared to see the source changes from one revision to another.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using diff from the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to compare the file revisions, you can use the `Diff` feature of the
    IDE and go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a versioned file that is `README`, and modify some lines of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the file, and select **Git | Diff** from the context menu. A
    graphical **Diff** viewer is opened for all the selected file(s) and revisions
    in the IDE's main window. The **Diff** viewer displays two copies in side-by-side
    panels. The more current copy appears on the right side. So if you are comparing
    a repository revision against your working tree, the working tree gets displayed
    in the right panel:![Time for action — using diff from the IDE](graphics/5801_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Diff` viewer makes use of the same color codes used elsewhere, to display
    version control changes. In the previous screenshot, the green block indicates
    the content that has been added to the more current revision. The red block indicates
    that the content from the earlier revision has been removed. The blue block indicates
    that changes have occurred within the highlighted line(s).
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Diff** viewer toolbar also includes buttons that enable you to invoke
    the most common Git tasks for all the files displayed in the list. If you are
    performing a diff on your local copy in the working tree, the editor enables you
    to make changes directly from within the **Diff** viewer. To do so, you can place
    your cursor within the right pane of the **Diff** viewer and modify your file
    accordingly. Otherwise, make use of the inline icons, which display adjacent to
    each highlighted change.
  prefs: []
  type: TYPE_NORMAL
- en: Reverting the local changes of the repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reverting is required for throwing away the local changes made to selected files
    in your working tree, and replacing these files with the ones in the Index or
    HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — reverting changes of the working tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To revert the changes, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the previous section, the **Diff** window of the modified `README` file
    provides a reverting, modification facility. Also, the Git window provides buttons
    for reverting modifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `README` file, and select **Git | Revert | Revert Modifications**
    from the context menu, or click on the **Revert Modifications** button from the
    **Diff** window. A dialog box similar to the following one opens:![Time for action
    — reverting changes of the working tree](graphics/5801_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify additional options (for example **Revert only Uncomited Changes in Index
    to HEAD)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Revert**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IDE reverted the changes specified and replaced those files with the ones
    in the Index or HEAD. In this way, you can easily revert the modifications or
    revert commits as well.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — working with Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding files to a Git repository, the IDE first composes and saves snapshots
    of your project in which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Index
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HEAD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Master
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which color in the source editor's left margin indicates lines that have been
    changed since the earlier revision?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Green
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Red
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yellow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Diff is used for which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view file history
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To compare two revisions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To compare two revisions of two files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can be done with revert in case of reverting changes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert all uncommitted changes in the working tree and Index
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert uncommitted changes in the working tree, to the state in Index
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert only uncommitted changes to HEAD in the Index
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — reverting commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try to revert specific commits from the IDE using the commit ID. To do so, you
    may select **Revert | Revert Commit...** from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Working with remote repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with other developers or in a collaborative, development environment,
    everyone wants to share their work, which involves fetching, pushing, and pulling
    data to and from remote repositories hosted on the Internet or network.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching source code updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fetching gets the changes from the original remote repository that you do not
    have yet. It doesn't change any of your local branches. Fetching gets all the
    branches from the remote repositories, which you can merge into your branch or
    just inspect at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — fetching source code updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fetch the updates, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project node, select **Git | Remote | Fetch**, and the **Fetch
    from Remote Repository** wizard is displayed.![Time for action — fetching source
    code updates](graphics/5801_06_16_New.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier) and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Remote Branches** page of the wizard, select the branches to fetch
    changes from, and click on **Finish**. Find the local copy of a remote branch
    in the repository browser window **(TEAM | Git | Repository Browser)**.![Time
    for action — fetching source code updates](graphics/5801_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A local copy of a remote branch was created. The selected branches are updated
    in the **Branches | Remote** directory in **Git Repository Browser**. Next, the
    fetched updates are merged into a local branch.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling updates from the remote repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When pulling some updates from a remote Git repository, the changes are fetched
    from it and merged into the current HEAD for your local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — pulling updates from the remote repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform pulling, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project node, select **Git | Remote | Pull**, and the **Pull
    from Remote Repository** wizard is displayed.![Time for action — pulling updates
    from the remote repository](graphics/5801_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier), and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Remote Branches** page of the wizard, select the branch, that is `master
    -> origin/master` (remote branch `origin/master` will be merged into the current
    branch), to pull the changes, and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your local repository is synchronized with the origin repository. At the **Remote
    Branches** page, the branches we choose, that is `master -> origin/master`, will
    be merged into our current branch. You can see the pulling status at the bottom
    right of the IDE or in the output window as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the simplest terms, `Git Pull` does a `Git Fetch` followed by a `Git Merge`.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing source code changes to a remote repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To share the cool commits you've done so far, you want to push your changes
    to the remote repository. Again, you can push your new branches and data to the
    remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — pushing source code changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To contribute changes from your local Git repository into a public/remote Git
    repository, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on project node, select **Git | Remote | Push**, and the **Push
    to Remote Repository** wizard is displayed.![Time for action — pushing source
    code changes](graphics/5801_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier), and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Select Local Branches** page of the wizard, select the local branches,
    that is `master -> master`, to push your changes to, and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Update Local References** page, select the branch (es), that is `master
    -> origin/master`, to be updated in the **Remotes** directory of your local repository,
    and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The specified remote repository branch was updated with the latest state of
    your local branch. Your local repo's **Branches | Remote** directory was updated
    as well. So, your changes are live at the remote repository, and other collaborators
    can pull the changes to their own repos.
  prefs: []
  type: TYPE_NORMAL
- en: Working with branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The intent to start an alternative line of development generates a branch in
    the source code management system. **Branch** helps you to manage working contexts
    and provide separate workspaces. Generally, **Master Branch** is the one where
    the finest piece of code resides; along with it, there could be a **Development
    Branch** where the continuous development code can reside. Again, sensible software
    development uses branches to maintain features, releases, hotfixes, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the development of a new version and maintenance of an old version, branching
    is a definite. In the following diagram, a generic Git branching model is described:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with branches](graphics/5801_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this diagram, we can see that **Development Branch** merged with **Master
    Branch** for a new release, and a new feature has been merged with **Development
    Branch**.
  prefs: []
  type: TYPE_NORMAL
- en: 'NetBeans supports you to do the following things with Git Branches:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking out a branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to work on a separate version of your file system for stabilization
    or experimentation purposes without disturbing the main trunk, you can create
    a branch.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a local branch, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project node, select **Git | Branch | Create Branch**, and
    the **Create Branch** dialog box is displayed.![Time for action — creating a branch](graphics/5801_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Branch Name** field, type in the desired branch name to be created,
    which is `development.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may type a specific revision of the selected item by entering a commit ID,
    existing branch, or tag name in the **Revision** field, or press **Select** to
    view the list of revisions maintained in the repository. The default **Revision**
    is the latest revision from the master branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, in the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Commit ID, Author**, and **Message** fields information, specific
    to the revision being branched from, and click on **Create**. The branch is added
    to the **Branches | Local** folder of the Git repository view at **Git Repository
    Browser**.![Time for action — creating a branch](graphics/5801_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a new branch in our local repository. The new branch contains
    the latest snapshot from the master branch. The newly created branch is not our
    working branch yet. The master branch is still the working branch; we'll choose
    to check out the new branch to make it a working one. Note that we can create
    new branches from any existing revisions.
  prefs: []
  type: TYPE_NORMAL
- en: Checking out a branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to edit files on a branch that already exists, you can check out
    the branch that needs to be used to copy the files to your working tree. It will
    simply make a switch to the desired branch.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — checking out a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check out a revision, perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project node, select **Git | Checkout | Checkout Revision**,
    and the **Checkout Revision** dialog box is displayed.![Time for action — checking
    out a branch](graphics/5801_06_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, right-click on the **Branches | Local | Branch Name** at the **Repository
    Browser** window from the context menu, as shown in the following screenshot.
    Select **Checkout Revision**, and the same dialog box is displayed, along with
    the latest revision selected from that branch.![Time for action — checking out
    a branch](graphics/5801_06_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, specify the revision required, by entering a commit ID, existing
    branch, or tag name in the **Revision** field, or press **Select** to view the
    list of revisions maintained in the repository. Note that if the specified revision
    refers to a valid commit that is not marked with a branch name, then your HEAD
    becomes detached and you are no longer on any branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, in the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Commit ID, Author**, and **Message** fields information specific
    to the revision being checked out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new branch out of the checked out revision, select the **Checkout
    as New Branch** option, and enter the name in the **Branch Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Checkout** to check out the revision.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files in the working tree and Index were updated to match the version in the
    specified revision.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to a branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to switch your files to a branch that already exists (for example,
    to a commit that is not at the top of one of your branches), you can use the **Team
    | Git | Branch | Switch To Branch** command, specify the branch in the **Switch
    to Selected Branch** dialog box, check it out as a new branch (optionally), and
    press **Switch**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to a branch](graphics/5801_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Checking out files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IDE supports context-sensitive checkout of the file(s), folder(s), or project(s)
    currently selected in the IDE. To check out some files (not a branch) from the
    Index, select **Team | Git | Checkout | Checkout Files** from the main menu, and
    the **Checkout Selected Paths** dialog box is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking out files](graphics/5801_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this dialog box, select **Update Index with Entries** from the **Selected
    Revision** option. If selected, the Index is updated with the state in the selected
    revision prior to the checkout itself (that is, the selected files in both the
    working tree and Index are updated).
  prefs: []
  type: TYPE_NORMAL
- en: Specify the required attributes and check out.
  prefs: []
  type: TYPE_NORMAL
- en: Merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Merge a branch context into your current one. Once you have work isolated in
    a branch, you will eventually want to incorporate it into your main branch. You
    can merge any branch into your current branch.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — merging into current branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To port the modifications from a repository revision to the working tree, do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Team | Git | Merge Revision** from the main menu. The **Merge Revision**
    dialog box is displayed.![Time for action — merging into current branch](graphics/5801_06_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) Specify the revision required by entering a commit ID, existing branch,
    or tag name in the **Revision** field, or press **Select** to view the list of
    revisions maintained in the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) In the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Commit ID, Author**, and **Message** fields information specific
    to the revision being merged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Merge**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A three-way merge among the current branches, your working tree content, and
    the specified branch is done. If a merge conflict occurs, the conflicting file
    is marked with a red badge to indicate this. After merging, you can still commit
    the changes, in order for them to be added to the HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To delete an unnecessary local branch, select **Team | Git | Repository Browser**
    from the main menu. In **Git Repository Browser**, select the branch that needs
    to be deleted. Note that the branch is supposed to be inactive, which means it
    has not been currently checked out in the working tree.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the selected branch, and select **Delete Branch** from the pop-up
    menu. In the **Delete Branch** dialog box, press **OK** to confirm the branch
    deletion. The branch is removed from the local repository, as well as from **Git
    Repository Browser**.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — working with remote repositories and branches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which Git operations can be the most relevant for remote repositories?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Committing, merging, and reverting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching, pulling, and pushing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching, pulling, pushing, and checking out
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding, committing, and pushing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens after you pull changes from a remote repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes are fetched from the remote repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes are fetched from it and merged into the current HEAD of your local repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes are fetched from it and merged into the current HEAD of your remote
    repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens after checking out a branch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It switches to that branch immediately, and the branch files become available
    to your working tree
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It copies the files to your working tree
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new branch is created, and it becomes your working branch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — creating tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git uses two main types of tags—**lightweight** and **annotated**. A lightweight
    tag is very much like a branch that doesn't change— it's just a pointer to a specific
    commit. Annotated tags, however, are stored as full objects in the Git database.
    Such tags check the sum and contain the tagger's name, e-mail, and date along
    with a tagging message. It's generally recommended that you create annotated tags
    so you can have all this information. Now, create a new tag, and you may select
    **Git | Tag | Create Tag...** from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Good practices and workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A few guidelines and workflows are discussed below, in order to uphold good
    practice with Git:'
  prefs: []
  type: TYPE_NORMAL
- en: Always maintain a separate branch for whatever thing you're doing. Now, when
    you would like to merge your changes back into main, simply do a Git Merge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your branch up-to-date, if possible, which involves checking out or pulling
    changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Branches can be pushed up to the origin. There are a few reasons for this. First,
    if your workstation crashes, you don't lose your changes—one of the primary reasons
    for a VCS. Second, other developers can quickly switch to your branch if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit your changes often; of course, one should always commit changes in logical
    pieces. Since your changes are committed locally, not to the origin/master server
    (can be done with a push), you should commit changes in an organized way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a message/comment for everything you do with the commit message and
    for every operation that makes a change to the revision history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push your changes often. If you're developing in your own branch that's separate
    from everyone else, your changes will not affect anyone else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Preferred Git workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a branch from the master node, check it out, and do your work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test and commit your changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, push your branch up to the remote repository (origin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out master, make sure it's up-to-date with upstream changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merge your branch into master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test again (and again)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push your local copy of master up to the remote repository master (origin/master)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete your branch (and remotely too, if you published it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, using the version control system can be worth it even for a local
    standalone project, because the code changes can be easily reviewed, rolled back,
    and backed up locally.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've discussed the version control system and why it is so
    important. Also, we have picked Git as a distributed version control system, and
    learned how to use it from NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have especially focused on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Version Control System or DVCS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging files into a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing changes to a Git Repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing file revisions and reverting changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with remote repositories—fetching, pulling, and pushing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with branches—creating, checking out, switching, merging, and deleting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have discussed the practices and the preferred workflow for Git.
    We are now much more confident to join a collaborative development using Git and
    NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create a new PHP project with a user registration,
    login, and logout, to advance our PHP application development skills to the next
    level.
  prefs: []
  type: TYPE_NORMAL
