- en: '2: Docker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No book or conversation about containers is complete without talking about
    Docker. But when somebody says “Docker” they can be referring to any of at least
    three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker, Inc. the company
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker the container runtime and orchestration technology
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker the open source project (this is now called Moby)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re going to *make it* in the container world, you’ll need to know a bit
    about all three.
  prefs: []
  type: TYPE_NORMAL
- en: Docker - The TLDR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker is software that runs on Linux and Windows. It creates, manages and orchestrates
    containers. The software is developed in the open as part of the *Moby* open-source
    project on GitHub. Docker, Inc. is a company based out of San Francisco and is
    the overall maintainer of the open-source project. Docker, Inc. also offers commercial
    versions of Docker with support contracts etc.
  prefs: []
  type: TYPE_NORMAL
- en: Ok that’s the quick version. Now we’ll explore each in a bit more detail. We’ll
    also talk a bit about the container ecosystem, and we’ll mention the Open Container
    Initiative (OCI).
  prefs: []
  type: TYPE_NORMAL
- en: Docker, Inc.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker, Inc. is the San Francisco based technology startup founded by French-born
    American developer and entrepreneur Solomon Hykes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 Docker, Inc. logo.](images/figure2-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 Docker, Inc. logo.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, Docker, Inc. started its life as a platform as a service (PaaS)
    provider called *dotCloud*. Behind the scenes, the dotCloud platform leveraged
    Linux containers. To help them create and manage these containers they built an
    internal tool that they eventually nick-named “Docker”. And that’s how Docker
    was born!
  prefs: []
  type: TYPE_NORMAL
- en: In 2013 the dotCloud PaaS business was struggling and the company needed a new
    lease of life. To help with this they hired Ben Golub as new CEO, rebranded the
    company as “Docker, Inc.”, got rid of the dotCloud PaaS platform, and started
    a new journey with a mission to bring Docker and containers to the world.
  prefs: []
  type: TYPE_NORMAL
- en: Today Docker, Inc. is widely recognized as an innovative technology company
    with a market valuation, said by some, to be in the region of $1BN. At the time
    of writing, it has raised over $240M via several rounds of funding from some of
    the biggest names in Silicon Valley venture capital. Almost all of this funding
    was raised after the company pivoted to become *Docker, Inc.*
  prefs: []
  type: TYPE_NORMAL
- en: Since becoming Docker, Inc. they’ve made several small acquisitions, for undisclosed
    fees, to help grow their portfolio of products and services.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Docker, Inc. has somewhere in the region of 300-400
    employees and holds an annual conference called Dockercon. The goal of Dockercon
    is to bring together the growing container ecosystem and drive the adoption of
    Docker and container technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book we’ll use the term “Docker, Inc.” when referring to Docker
    the company. All other uses of the term “Docker” will refer to the technology
    or the open-source project.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The word “Docker” comes from a British colloquialism meaning **dock**
    work__er__ — somebody who loads and unloads cargo from ships.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Docker runtime and orchestration engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When most *technologists* talk about Docker, they’re referring to the *Docker
    Engine*.
  prefs: []
  type: TYPE_NORMAL
- en: The *Docker Engine* is the infrastructure plumbing software that runs and orchestrates
    containers. If you’re a VMware admin, you can think of it as being similar to
    ESXi. In the same way that ESXi is the core hypervisor technology that runs virtual
    machines, the Docker Engine is the core container runtime that runs containers.
  prefs: []
  type: TYPE_NORMAL
- en: All other Docker, Inc. and 3rd party products plug into the Docker Engine and
    build around it. Figure 2.2 shows the Docker Engine at the center. All of the
    other products in the diagram build on top of the Engine and leverage its core
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2](images/figure2-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2
  prefs: []
  type: TYPE_NORMAL
- en: The Docker Engine can be downloaded from the Docker website or built from source
    from GitHub. It’s available on Linux and Windows, with open-source and commercially
    supported offerings.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing there two main editions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Edition (EE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community Edition (CE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Enterprise Edition and the Community Edition both have a stable release
    channel with quarterly releases. Each Community Edition will be supported for
    4 months and each Enterprise Edition will be supported for 12 months.
  prefs: []
  type: TYPE_NORMAL
- en: The Community Edition has an additional monthly release via an *edge* channel.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Q1 2017 Docker version numbers follow the YY.MM-xx versioning
    scheme, similar to Ubuntu and other projects. For example, the first release of
    the Community Edition in June 2018 will be 18.06.0-ce.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Prior to Q1 2017, Docker version numbers followed the `major.minor`
    versioning scheme. The last version prior to the new scheme was Docker 1.13.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Docker open-source project (Moby)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The term “Docker” is also used to refer to the open-source *Docker project*.
    This is the set of tools that get combined into things like the Docker daemon
    and client you can download and install from docker.com. However, the project
    was officially renamed as the *Moby* project at DockerCon 2017 in Austin, Tx.
    As part of this rename, the GitHub repo was moved from docker/docker to moby/moby
    and the project got its own logo.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/figure2-3.png)'
  prefs: []
  type: TYPE_IMG
- en: The goal of the Moby project is to be the *upstream* for Docker, and to break
    Docker down into more modular components — and to do this in the open. It’s hosted
    on GitHub and you can see a list of the current sub-projects and tools included
    in the Moby repository at https://github.com/moby. The core *Docker Engine* project
    is currently located at https://github.com/moby/moby, but more parts of the Engine
    are being broken out and modularized all the time.
  prefs: []
  type: TYPE_NORMAL
- en: As an open-source project, the source code is publicly available, and you are
    free to download it, contribute to it, tweak it, and use it, as long as you adhere
    to the terms of the [Apache License 2.0](https://github.com/docker/docker/blob/master/LICENSE).
  prefs: []
  type: TYPE_NORMAL
- en: If you take the time to look at the project’s commit history, you’ll see the
    who’s-who of infrastructure technology including; RedHat, Microsoft, IBM, Cisco,
    and HPE. You’ll also see the names of individuals not associated with large corporations.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the project and its tools are written in *Golang* — the relatively new
    system-level programming language from Google also known as *Go*. If you code
    in Go, you’re in a great position to contribute to the project!
  prefs: []
  type: TYPE_NORMAL
- en: A nice side effect of Moby/Docker being an open-source project is the fact that
    so much of it is developed and designed in the open. This does away with a lot
    of the *old ways* where code was proprietary and locked behind closed doors. It
    also means that release cycles are published and worked on in the open. No more
    uncertain release cycles that are kept a secret and then pre-announced months-in-advance
    to ridiculous pomp and ceremony. The Moby/Docker project doesn’t work like that.
    Most things are done in the open for all to see and all to contribute to.
  prefs: []
  type: TYPE_NORMAL
- en: The Moby project, and the wider Docker movement, is huge and gaining momentum.
    It has thousands of GitHub pull requests, tens of thousands of Dockerized projects,
    not to mention the billions of image pulls from Docker Hub. The project literally
    is taking the industry by storm!
  prefs: []
  type: TYPE_NORMAL
- en: Be under no illusion, Docker is being used!
  prefs: []
  type: TYPE_NORMAL
- en: The container ecosystem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the core philosophies at Docker, Inc. is often referred to as *Batteries
    included but removable*.
  prefs: []
  type: TYPE_NORMAL
- en: This is a way of saying you can swap out a lot of the native Docker *stuff*
    and replace it with *stuff* from 3rd-parties. A good example of this is the networking
    stack. The core Docker product ships with built-in networking. But the networking
    stack is pluggable meaning you can rip out the native Docker networking and replace
    it with something else from a 3rd-party. Plenty of people do that.
  prefs: []
  type: TYPE_NORMAL
- en: In the early days, it was common for 3rd-party plugins to be better than the
    native offerings that shipped with Docker. However, this presented some business
    model challenges for Docker, Inc. After all, Docker, Inc. has to turn a profit
    at some point to be a viable long-term business. As a result, the batteries that
    are *included* are getting better and better. This has caused tension and raised
    levels competition within the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: To cut a long story short, the native Docker batteries are still removable,
    there’s just less and less of a **need** to remove them.
  prefs: []
  type: TYPE_NORMAL
- en: Despite this, the container ecosystem is flourishing with a healthy balance
    of co-operation and competition. You’ll often hear people use terms like *co-opetition*
    (a balance of co-operation and competition) and *frenemy* (a mix of a friend and
    an enemy) when talking about the container ecosystem. This is great! **Healthy
    competition is the mother of innovation!**
  prefs: []
  type: TYPE_NORMAL
- en: The Open Container Initiative (OCI)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No discussion of Docker and the container ecosystem is complete without mentioning
    the [Open Containers Initiative — OCI](https://www.opencontainers.org).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/figure2-4.png)'
  prefs: []
  type: TYPE_IMG
- en: The OCI is a governance council responsible for standardizing the most fundamental
    components of container infrastructure such as *image format* and *container runtime*
    (don’t worry if these terms are new to you, we’ll cover them in the book).
  prefs: []
  type: TYPE_NORMAL
- en: It’s also true that no discussion of the OCI is complete without mentioning
    a bit of history. And as with all accounts of history, the version you get depends
    on who’s doing the talking. So, this is container history according to Nigel :-D
  prefs: []
  type: TYPE_NORMAL
- en: From day one, use of Docker has grown like crazy. More and more people used
    it in more and more ways for more and more things. So, it was inevitable that
    some parties would get frustrated. This is normal and healthy.
  prefs: []
  type: TYPE_NORMAL
- en: The TLDR of this *history according to Nigel* is that a company called [CoreOS](https://coreos.com)
    didn’t like the way Docker did certain things. So they did something about it!
    They created a new open standard called **[appc](https://github.com/appc/spec/)**
    that defined things like image format and container runtime. They also created
    an implementation of the spec called **rkt** (pronounced “rocket”).
  prefs: []
  type: TYPE_NORMAL
- en: This put the container ecosystem in an awkward position with two competing standards.
  prefs: []
  type: TYPE_NORMAL
- en: Getting back to the story though, this threatened to fracture the ecosystem
    and present users and customers with a dilemma. While competition is usually a
    good thing, *competing standards* is usually not. They cause confusion and slowdown
    user adoption. Not good for anybody.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, everybody did their best to act like adults and came together
    to form the OCI — a lightweight agile council to govern container standards.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the OCI has published two specifications (standards)
    -
  prefs: []
  type: TYPE_NORMAL
- en: The [image-spec](https://github.com/opencontainers/image-spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [runtime-spec](https://github.com/opencontainers/runtime-spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An analogy that’s often used when referring to these two standards is *rail
    tracks*. These two standards are like agreeing on standard sizes and properties
    of rail tracks. Leaving everyone else free to build better trains, better carriages,
    better signalling systems, better stations… all safe in the knowledge that they’ll
    work on the standardized tracks. Nobody wants two competing standards for rail
    track sizes!
  prefs: []
  type: TYPE_NORMAL
- en: It’s fair to say that the two OCI specifications have had a major impact on
    the architecture and design of the core Docker product. As of Docker 1.11, the
    Docker Engine architecture conforms to the OCI runtime spec.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the OCI has achieved good things and gone some way to bringing the ecosystem
    together. However, standards always slow innovation! Especially with new technologies
    that are developing at close to warp speed. This has resulted in some raging arguments
    passionate discussions in the container community. In the opinion of your author,
    this is a good thing! The container industry is changing the world and it’s normal
    for the people at the vanguard to be passionate, opinionated, and sometimes downright
    off the planet! Expect more *passionate discussions* about standards and innovation!
  prefs: []
  type: TYPE_NORMAL
- en: The OCI is organized under the auspices of the Linux Foundation and both Docker,
    Inc. and CoreOS, Inc. are major contributors.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we learned a bit about Docker, Inc. They’re a startup tech
    company out of San Francisco with an ambition to change the way we do software.
    They were arguably the *first-movers* and instigators of the container modern
    revolution. But a huge ecosystem of partners and competitors now exists.
  prefs: []
  type: TYPE_NORMAL
- en: The *Docker project* is open-source and the *upstream* lives in the `moby/moby`
    repo on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: The Open Container Initiative (OCI) has been instrumental in standardizing the
    container runtime format and container image format.
  prefs: []
  type: TYPE_NORMAL
