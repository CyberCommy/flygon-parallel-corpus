- en: Chapter 10. The Microservices Development Life Cycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。微服务开发生命周期
- en: Similar to the **software development life cycle** (**SDLC**), it is important
    to understand the aspects of the microservice development life cycle processes
    for a successful implementation of the microservices architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与**软件开发生命周期**（**SDLC**）类似，了解微服务开发生命周期流程的各个方面对于成功实施微服务架构至关重要。
- en: This final chapter will focus on the development process and practice of microservices
    with the help of BrownField Airline's PSS microservices example. Furthermore,
    this chapter will describe best practices in structuring development teams, development
    methodologies, automated testing, and continuous delivery of microservices in
    line with DevOps practices. Finally, this chapter will conclude by shedding light
    on the importance of the reference architecture in a decentralized governance
    approach to microservices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点关注使用BrownField航空公司PSS微服务示例的开发过程和实践。此外，本章将描述在符合DevOps实践的情况下，构建开发团队、开发方法论、自动化测试和微服务的持续交付的最佳实践。最后，本章将通过阐明参考架构在微服务的分散治理方法中的重要性来结束。
- en: 'By the end of this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解以下主题：
- en: Reviewing DevOps in the context of microservices development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在微服务开发的背景下审查DevOps
- en: Defining the microservices life cycle and related processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义微服务的生命周期和相关流程
- en: Best practices around the development, testing, and deployment of Internet-scale
    microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕互联网规模的微服务的开发、测试和部署的最佳实践
- en: Reviewing the microservice capability model
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查微服务能力模型
- en: 'This chapter will cover the following microservices capabilities from the microservices
    capability model discussed in [Chapter 3](ch03.html "Chapter 3. Applying Microservices
    Concepts"), *Applying Microservices Concepts*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖在[第3章](ch03.html "第3章。应用微服务概念") *应用微服务概念*中讨论的微服务能力模型中的以下微服务能力：
- en: '**DevOps**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps
- en: '**DevOps Tools**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps工具
- en: '**Reference Architecture & Libraries**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考架构和库
- en: '**Testing Tools (Anti-Fragile, RUM etc)**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工具（反脆弱、RUM等）
- en: '![Reviewing the microservice capability model](img/B05447_10_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![审查微服务能力模型](img/B05447_10_01.jpg)'
- en: The new mantra of lean IT – DevOps
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精益IT的新口号-DevOps
- en: We discussed the definition of DevOps in [Chapter 2](ch02.html "Chapter 2. Building
    Microservices with Spring Boot"), *Building Microservices with Spring Boot*. Here
    is a quick recap of the DevOps definition.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](ch02.html "第2章。使用Spring Boot构建微服务") *使用Spring Boot构建微服务*中讨论了DevOps的定义。以下是对DevOps定义的快速回顾。
- en: 'Gartner defines DevOps as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Gartner对DevOps的定义如下：
- en: '"DevOps represents a change in IT culture, focusing on rapid IT service delivery
    through the adoption of agile, lean practices in the context of a system-oriented
    approach. DevOps emphasizes people (and culture), and seeks to improve collaboration
    between operations and development teams. DevOps implementations utilize technology
    — especially automation tools that can leverage an increasingly programmable and
    dynamic infrastructure from a life cycle perspective."'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"DevOps代表了IT文化的变革，侧重于通过采用敏捷、精益实践在系统导向方法的背景下实现快速的IT服务交付。DevOps强调人（和文化），并致力于改善运营和开发团队之间的协作。DevOps实施利用技术-特别是可以利用越来越可编程和动态的基础设施的自动化工具，从生命周期的角度来看。"'
- en: DevOps and microservices evolved independently. [Chapter 1](ch01.html "Chapter 1. Demystifying
    Microservices"), *Demystifying Microservices*, explored the evolution of microservices.
    In this section, we will review the evolution of DevOps and then take a look at
    how DevOps supports microservices adoption.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps和微服务是独立发展的。[第1章](ch01.html "第1章。解密微服务") *解密微服务*，探讨了微服务的演变。在本节中，我们将回顾DevOps的演变，然后看看DevOps如何支持微服务的采用。
- en: 'In the era of digital disruption and in order to support modern business, IT
    organizations have to master two key areas: speed of delivery and value-driven
    delivery. This is obviously apart from being expert in leading technologies.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字颠覆的时代，为了支持现代业务，IT组织必须掌握两个关键领域：交付速度和价值驱动的交付。这显然是除了精通领先技术之外的事情。
- en: Many IT organizations failed to master this change, causing frustration to business
    users. To overcome this situation, many business departments started their own
    shadow IT or stealth IT under their control. Some smart IT organizations then
    adopted a lean IT model to respond to these situations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多IT组织未能掌握这种变革，导致业务用户感到沮丧。为了克服这种情况，许多业务部门开始在其控制下启动自己的影子IT或隐形IT。然后一些聪明的IT组织采用了精益IT模型来应对这些情况。
- en: However, many organizations still struggle with this transformation due to the
    large baggage of legacy systems and processes. Gartner coined the concept of a
    **pace-layered application strategy**. Gartner's view is that high speed is required
    only for certain types of applications or certain business areas. Gartner termed
    this a **system of innovation**. A system of innovation requires rapid innovations
    compared to a **system of records**. As a system of innovations needs rapid innovation,
    a lean IT delivery model is essential for such applications. Practitioners evangelized
    the lean IT model as DevOps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多组织仍然因为传统系统和流程的沉重包袱而在这一转变中挣扎。Gartner提出了**速度分层应用策略**的概念。Gartner认为，只有某些类型的应用程序或某些业务领域需要高速。Gartner将其称为**创新系统**。创新系统需要比**记录系统**更快的创新。由于创新系统需要快速创新，因此对于这类应用程序来说，精益的IT交付模型是必不可少的。从业者将精益的IT模型宣扬为DevOps。
- en: There are two key strategies used by organizations to adopt DevOps.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 组织采用的两种关键策略来采用DevOps。
- en: Some organizations positioned DevOps as a process to fill the gaps in their
    existing processes. Such organizations adopted an incremental strategy for their
    DevOps journey. The adoption path starts with Agile development, then incrementally
    adopts continuous integration, automated testing, and release to production and
    then all DevOps practices. The challenge in such organizations is the time to
    realize the full benefits as well as the mixed culture of people due to legacy
    processes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Many organizations, therefore, take a disruptive approach to adopt DevOps.
    This will be achieved by partitioning IT into two layers or even as two different
    IT units. The high-speed layer of IT uses DevOps-style practices to dramatically
    change the culture of the organization with no connection to the legacy processes
    and practices. A selective application cluster will be identified and moved to
    the new IT based on the business value:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![The new mantra of lean IT – DevOps](img/B05447_10_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: The intention of DevOps is not just to reduce cost. It also enables the business
    to disrupt competitors by quickly moving ideas to production. DevOps attacks traditional
    IT issues in multiple ways, as explained here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Reducing wastage
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps processes and practices essentially speed up deliveries which improves
    quality. The speed of delivery is achieved by cutting IT wastage. This is achieved
    by avoiding work that adds no value to the business nor to desired business outcomes.
    IT wastage includes software defects, productivity issues, process overheads,
    time lag in decision making, time spent in reporting layers, internal governance,
    overestimation, and so on. By reducing these wastages, organizations can radically
    improve the speed of delivery. The wastage is reduced by primarily adopting Agile
    processes, tools, and techniques.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Automating every possible step
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By automating the manually executed tasks, one can dramatically improve the
    speed of delivery as well as the quality of deliverables. The scope of automation
    goes from planning to customer feedback. Automation reduces the time to move business
    ideas to production. This also reduces a number of manual gate checks, bureaucratic
    decision making, and so on. Automated monitoring mechanisms and feedback go back
    to the development factory, which gets it fixed and quickly moved to production.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Value-driven delivery
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps reduces the gap between IT and business through value-driven delivery.
    Value-driven delivery closely aligns IT to business by understanding true business
    values and helps the business by quickly delivering these values, which can give
    a competitive advantage. This is similar to the shadow IT concept, in which IT
    is collocated with the business and delivers business needs quickly, rather than
    waiting for heavy project investment-delivery cycles.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, IT is partially disconnected from the business and works with
    IT KPIs, such as the number of successful project deliveries, whereas in the new
    model, IT shares business KPIs. As an example, a new IT KPI could be that IT helped
    business to achieve a 10% increase in sales orders or led to 20% increase in customer
    acquisition. This will shift IT's organizational position from merely a support
    organization to a business partner.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Bridging development and operations
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, IT has different teams for development and operations. In many
    cases, they are differentiated with logical barriers. DevOps reduces the gap between
    the development and operations teams so that it can potentially reduce wastage
    and improve quality. Multidisciplinary teams work together to address problems
    at hand rather than throwing mud across the wall.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: With DevOps, operations teams will have a fairly good understanding about the
    services and applications developed by development teams. Similarly, development
    teams will have a good handle on the infrastructure components and configurations
    used by the applications. As a result, operations teams can make decisions based
    exactly on service behaviors rather than enforcing standard organizational policies
    and rules when designing infrastructure components. This would eventually help
    the IT organization to improve the quality of the product as well as the time
    to resolve incidents and problem management.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: In the DevOps world, speed of delivery is achieved through the automation of
    high-velocity changes, and quality is achieved through automation and people.
    Business values are achieved through efficiency, speed of delivery, quality, and
    the ability to innovate. Cost reduction is achieved through automation, productivity,
    and reducing wastage.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Meeting the trio – microservices, DevOps, and cloud
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The trio—cloud, microservices, and DevOps—targets a set of common objectives:
    speed of delivery, business value, and cost benefit. All three can stay and evolve
    independently, but they complement each other to achieve the desired common goals.
    Organizations embarking on any of these naturally tend to consider the other two
    as they are closely linked together:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Meeting the trio – microservices, DevOps, and cloud](img/B05447_10_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Many organizations start their journey with DevOps as an organizational practice
    to achieve high-velocity release cycles but eventually move to the microservices
    architecture and cloud. It is not mandatory to have microservices and cloud support
    DevOps. However, automating the release cycles of large monolithic applications
    does not make much sense, and in many cases, it would be impossible to achieve.
    In such scenarios, the microservices architecture and cloud will be handy when
    implementing DevOps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: If we flip a coin, cloud does not need a microservices architecture to achieve
    its benefits. However, to effectively implement microservices, both cloud and
    DevOps are essential.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: In summary, if the objective of an organization is to achieve a high speed of
    delivery and quality in a cost-effective way, the trio together can bring tremendous
    success.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Cloud as the self-service infrastructure for Microservices
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main driver for cloud is to improve agility and reduce cost. By reducing
    the time to provision the infrastructure, the speed of delivery can be increased.
    By optimally utilizing the infrastructure, one can bring down the cost. Therefore,
    cloud directly helps achieve both speed of delivery and cost.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [Chapter 9](ch09.html "Chapter 9. Managing Dockerized Microservices
    with Mesos and Marathon"), *Managing Dockerized Microservices with Mesos and Marathon*,
    without having a cloud infrastructure with cluster management software, it would
    be hard to control the infrastructure cost when deploying microservices. Hence,
    the cloud with self-service capabilities is essential for microservices to achieve
    their full potential benefits. In the microservices context, the cloud not only
    helps abstract the physical infrastructure but also provides software APIs for
    dynamic provisioning and automatic deployments. This is referred to as **infrastructure
    as code** or **software-defined infrastructure**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: DevOps as the practice and process for microservices
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microservice is an architecture style that enables quick delivery. However,
    microservices cannot provide the desired benefits by themselves. A microservices-based
    project with a delivery cycle of 6 months does not give the targeted speed of
    delivery or business agility. Microservices need a set of supporting delivery
    practices and processes to effectively achieve their goal.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is the ideal candidate for the underpinning process and practices for
    microservice delivery. DevOps processes and practices gel well with the microservices
    architecture's philosophies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Practice points for microservices development
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务开发的实践要点
- en: For a successful microservice delivery, a number of development-to-delivery
    practices need to be considered, including the DevOps philosophy. In the previous
    chapters, you learned the different architecture capabilities of microservices.
    In this section, we will explore the nonarchitectural aspects of microservice
    developments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功交付微服务，需要考虑一系列从开发到交付的实践，包括DevOps理念。在前几章中，您了解了微服务的不同架构能力。在本节中，我们将探讨微服务开发的非架构方面。
- en: Understanding business motivation and value
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解业务动机和价值
- en: Microservices should not be used for the sake of implementing a niche architecture
    style. It is extremely important to understand the business value and business
    KPIs before selecting microservices as an architectural solution for a given problem.
    A good understanding of business motivation and business value will help engineers
    focus on achieving these goals in a cost-effective way.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务不应该只是为了实现一种小众的架构风格而被使用。在选择微服务作为某个问题的架构解决方案之前，了解业务价值和业务关键绩效指标非常重要。对业务动机和业务价值的深刻理解将帮助工程师们以成本效益的方式专注于实现这些目标。
- en: Business motivation and value should justify the selection of microservices.
    Also, using microservices, the business value should be realizable from a business
    point of view. This will avoid situations where IT invests in microservices but
    there is no appetite from the business to leverage any of the benefits that microservices
    can bring to the table. In such cases, a microservices-based development would
    be an overhead to the enterprise.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 业务动机和价值应该证明选择微服务的合理性。此外，使用微服务，业务价值应该从业务角度实现。这将避免IT投资于微服务，但业务没有利用微服务所带来的任何好处的情况。在这种情况下，基于微服务的开发将成为企业的负担。
- en: Changing the mindset from project to product development
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从项目开发到产品开发的思维方式转变
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Demystifying Microservices"),
    *Demystifying Microservices*, microservices are more aligned to product development.
    Business capabilities that are delivered using microservices should be treated
    as products. This is in line with the DevOps philosophy as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](ch01.html "第1章. 解密微服务")中所讨论的，*解密微服务*，微服务更加符合产品开发。使用微服务交付的业务能力应被视为产品。这也符合DevOps理念。
- en: The mindset for project development and product development is different. The
    product team will always have a sense of ownership and take responsibility for
    what they produce. As a result, product teams always try to improve the quality
    of the product. The product team is responsible not only for delivering the software
    but also for production support and maintenance of the product.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 项目开发和产品开发的思维方式是不同的。产品团队总是有一种所有权感，并对他们所生产的产品负责。因此，产品团队总是努力提高产品的质量。产品团队不仅负责交付软件，还负责产品的生产支持和维护。
- en: Product teams are generally linked directly to a business department for which
    they are developing the product. In general, product teams have both an IT and
    a business representative. As a result, product thinking is closely aligned with
    actual business goals. At every moment, product teams understand the value they
    are adding to the business to achieve business goals. The success of the product
    directly lies with the business value being gained out of the product.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 产品团队通常直接与他们正在开发产品的业务部门联系在一起。一般来说，产品团队既有IT代表又有业务代表。因此，产品思维与实际业务目标密切相关。产品团队随时了解他们为实现业务目标所增加的价值。产品的成功直接取决于产品所获得的业务价值。
- en: Because of the high-velocity release cycles, product teams always get a sense
    of satisfaction in their delivery, and they always try to improve on it. This
    brings a lot more positive dynamics within the team.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于高速发布周期，产品团队总是对他们的交付感到满意，并且总是努力改进。这给团队带来了更多的积极动力。
- en: In many cases, typical product teams are funded for the long term and remain
    intact. As a result, product teams become more cohesive in nature. As they are
    small in size, such teams focus on improving their process from their day-to-day
    learnings.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，典型的产品团队是为长期而获得资金支持并保持完整性的。因此，产品团队的凝聚力更强。由于团队规模较小，这些团队专注于根据他们日常的学习经验改进他们的流程。
- en: One common pitfall in product development is that IT people represent the business
    in the product team. These IT representatives may not fully understand the business
    vision. Also, they may not be empowered to take decisions on behalf of the business.
    Such cases can result in a misalignment with the business and lead to failure
    quite rapidly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 产品开发中的一个常见陷阱是IT人员代表业务参与产品团队。这些IT代表可能并不完全理解业务愿景。此外，他们可能没有权力代表业务做出决定。这种情况可能导致与业务的不一致，并很快导致失败。
- en: It is also important to consider a collocation of teams where business and IT
    representatives reside at the same place. Collocation adds more binding between
    IT and business teams and reduces communication overheads.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，考虑团队的协同工作也很重要，业务和IT代表在同一地方工作。团队的协同工作增加了IT和业务团队之间的联系，减少了沟通成本。
- en: Choosing a development philosophy
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择开发理念
- en: Different organizations take different approaches to developing microservices,
    be it a migration or a new development. It is important to choose an approach
    that suits the organization. There is a wide verity of approaches available, out
    of which a few are explained in this section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的组织采取不同的方法来开发微服务，无论是迁移还是新开发。选择适合组织的方法非常重要。有各种各样的方法可供选择，本节将解释其中的一些。
- en: Design thinking
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计思维
- en: 'Design thinking is an approach primarily used for innovation-centric development.
    It is an approach that explores the system from an end user point of view: what
    the customers see and how they experience the solution. A story is then built
    based on observations, patterns, intuition, and interviews.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维是一种主要用于创新型开发的方法。这是一种从最终用户的角度探索系统的方法：客户看到什么，以及他们如何体验解决方案。然后基于观察、模式、直觉和访谈建立一个故事。
- en: Design thinking then quickly devises solutions through solution-focused thinking
    by employing a number of theories, logical reasoning, and assumptions around the
    problem. The concepts are expanded through brainstorming before arriving at a
    converged solution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维通过采用一些理论、逻辑推理和对问题的假设，快速设计解决方案。在达成一致的解决方案之前，这些概念通过头脑风暴得到扩展。
- en: Once the solution is identified, a quick prototype is built to consider how
    the customer responds to it, and then the solution is adjusted accordingly. When
    the team gets satisfactory results, the next step is taken to scale the product.
    Note that the prototype may or may not be in the form of code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解决方案确定，就会快速建立原型，以考虑客户对其的反应，然后相应地调整解决方案。当团队获得满意的结果时，下一步是扩大产品规模。请注意，原型可能是代码形式，也可能不是。
- en: Design thinking uses human-centric thinking with feelings, empathy, intuition,
    and imagination at its core. In this approach, solutions will be up for rethinking
    even for known problems to find innovative and better solutions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维使用以人为中心的思维，包括情感、共鸣、直觉和想象力。在这种方法中，即使是已知的问题，解决方案也会被重新思考，以找到创新和更好的解决方案。
- en: The start-up model
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创业模式
- en: More and more organizations are following the start-up philosophy to deliver
    solutions. Organizations create internal start-up teams with the mission to deliver
    specific solutions. Such teams stay away from day-to-day organizational activities
    and focus on delivering their mission.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的组织都在遵循创业哲学来提供解决方案。组织内部创建创业团队，使命是提供特定的解决方案。这些团队远离日常组织活动，专注于实现他们的使命。
- en: Many start-ups kick off with a small, focused team—a highly cohesive unit. The
    unit is not worried about how they achieve things; rather, the focus is on what
    they want to achieve. Once they have a product in place, the team thinks about
    the right way to build and scale it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 许多初创公司都以一个小而专注的团队开始——一个高度凝聚的单位。这个团队不担心他们如何实现事情；相反，他们关注的是他们想要实现什么。一旦他们有了一个产品，团队就会考虑正确的构建和扩展方式。
- en: This approach addresses quick delivery through production-first thinking. The
    advantage with this approach is that teams are not disturbed by organizational
    governance and political challenges. The team is empowered to think out of the
    box, be innovative, and deliver things. Generally, a higher level of ownership
    is seen in such teams, which is one of the key catalysts for success. Such teams
    employ just enough processes and disciplines to take the solution forward. They
    also follow a fail fast approach and course correct sooner than later.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通过首先考虑生产来实现快速交付。这种方法的优势在于团队不受组织治理和政治挑战的干扰。团队被授权进行创新思考，创新并交付成果。通常，这些团队表现出更高的所有权水平，这是成功的关键因素之一。这些团队只采用足够的流程和纪律来推动解决方案。他们还采用快速失败的方法，尽早进行调整。
- en: The Agile practice
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏捷实践
- en: 'The most commonly used approach is the Agile methodology for development. In
    this approach, software is delivered in an incremental, iterative way using the
    principles put forth in the Agile manifesto. This type of development uses an
    Agile method such as Scrum or XP. The Agile manifesto defines four key points
    that Agile software development teams should focus on:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的方法是敏捷开发方法。在这种方法中，软件以增量、迭代的方式交付，使用敏捷宣言中提出的原则。这种开发方法使用敏捷方法，如Scrum或XP。敏捷宣言定义了敏捷软件开发团队应该关注的四个关键点：
- en: Individuals and interaction over processes and tools
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个体和互动胜过流程和工具
- en: Working software over comprehensive documentation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可工作的软件胜过详尽的文档
- en: Customer collaboration over contract negotiation
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与合同谈判相比，与客户合作
- en: Responding to change over following a plan
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应变化胜过遵循计划
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The 12 principles of Agile software development can be found at [http://www.agilemanifesto.org/principles.html](http://www.agilemanifesto.org/principles.html).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷软件开发的12个原则可以在[http://www.agilemanifesto.org/principles.html](http://www.agilemanifesto.org/principles.html)找到。
- en: Using the concept of Minimum Viable Product
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用最小可行产品的概念
- en: Irrespective of the development philosophy explained earlier, it is essential
    to identify a **Minimum Viable Product** (**MVP**) when developing microservice
    systems for speed and agility.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不论之前解释的开发哲学如何，对于为了速度和敏捷性开发微服务系统来说，识别**最小可行产品**（MVP）是至关重要的。
- en: 'Eric Ries, while pioneering the lean start-up movement, defined MVP as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Eric Ries在开创精益创业运动时，将MVP定义为：
- en: '"A Minimum Viable Product is that version of a new product which allows a team
    to collect the maximum amount of validated learning about customers with the least
    effort."'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “最小可行产品是新产品的那个版本，它允许团队以最少的努力收集关于客户的最大量的验证学习。”
- en: The objective of the MVP approach is to quickly build a piece of software that
    showcases the most important aspects of the software. The MVP approach realizes
    the core concept of an idea and perhaps chooses those features that add maximum
    value to the business. It helps get early feedback and then course corrects as
    necessary before building a heavy product.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MVP方法的目标是快速构建一个展示软件最重要方面的软件。MVP方法实现了一个想法的核心概念，并可能选择那些为业务增加最大价值的功能。它有助于获得早期反馈，然后在构建重型产品之前进行必要的调整。
- en: The MVP may be a full-fledged service addressing limited user groups or partial
    services addressing wider user groups. Feedback from customers is extremely important
    in the MVP approach. Therefore, it is important to release the MVP to the real
    users.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: MVP可能是一个针对有限用户群体的成熟服务，或者是针对更广泛用户群体的部分服务。来自客户的反馈在MVP方法中非常重要。因此，将MVP发布给真实用户非常重要。
- en: Overcoming the legacy hotspot
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克服遗留热点
- en: It is important to understand the environmental and political challenges in
    an organization before embarking on microservices development.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在着手微服务开发之前，了解组织中的环境和政治挑战是很重要的。
- en: It is common in microservices to have dependencies on other legacy applications,
    directly or indirectly. A common issue with direct legacy integration is the slow
    development cycle of the legacy application. An example would be an innovative
    railway reservation system relaying on an age-old **transaction processing facility**
    (**TPF**) for some of the core backend features, such as reservation. This is
    especially common when migrating legacy monolithic applications to microservices.
    In many cases, legacy systems continue to undergo development in a non-Agile way
    with larger release cycles. In such cases, microservices development teams may
    not be able to move so quickly because of the coupling with legacy systems. Integration
    points might drag the microservices developments heavily. Organizational political
    challenges make things even worse.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中，通常会直接或间接地依赖其他遗留应用程序。直接遗留集成的常见问题是遗留应用程序的开发周期缓慢。例如，一个创新的铁路预订系统依赖于一个古老的**事务处理设施**（**TPF**）来实现一些核心后端功能，比如预订。当将遗留的单片应用迁移到微服务时，这种情况尤其常见。在许多情况下，遗留系统继续以非敏捷方式进行开发，发布周期较长。在这种情况下，微服务开发团队可能无法因为与遗留系统的耦合而快速移动。集成点可能会严重拖累微服务的开发。组织政治挑战使情况变得更糟。
- en: There is no silver bullet to solve this issue. The cultural and process differences
    could be an ongoing issue. Many enterprises ring-fence such legacy systems with
    focused attention and investments to support fast-moving microservices. Targeted
    C-level interventions on these legacy platforms could reduce the overheads.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 没有解决这个问题的万能方法。文化和流程差异可能是一个持续的问题。许多企业都会对这些遗留系统进行重点关注和投资，以支持快速移动的微服务。对这些遗留平台进行有针对性的C级干预可以减少开销。
- en: Addressing challenges around databases
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决数据库方面的挑战
- en: Automation is key in microservices development. Automating databases is one
    of the key challenges in many microservice developments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是微服务开发的关键。自动化数据库是许多微服务开发中的关键挑战之一。
- en: In many organizations, DBAs play a critical role in database management, and
    they like to treat the databases under their control differently. Confidentiality
    and access control on data is also cited as a reason for DBAs to centrally manage
    all data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，数据库管理员在数据库管理中扮演着关键角色，他们喜欢以不同的方式处理他们控制的数据库。保密性和数据访问控制也被认为是数据库管理员集中管理所有数据的原因。
- en: Many automation tools focus on the application logic. As a result, many development
    teams completely ignore database automation. Ignoring database automation can
    severely impact the overall benefits and can derail microservices development.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许多自动化工具专注于应用逻辑。因此，许多开发团队完全忽视了数据库自动化。忽视数据库自动化可能严重影响整体效益，并可能使微服务开发偏离轨道。
- en: In order to avoid such situations, the database has to be treated in the same
    way as applications with appropriate source controls and change management. When
    selecting a database, it is also important to consider automation as one of the
    key aspects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，必须像应用程序一样对待数据库，具有适当的源代码控制和变更管理。在选择数据库时，考虑自动化也是一个关键因素。
- en: Database automation is much easier in the case of NoSQL databases but is hard
    to manage with traditional RDBMs. **Database Lifecycle Management** (**DLM**)
    as a concept is popular in the DevOps world, particularly to handle database automation.
    Tools such as DBmaestro, Redgate DLM, Datical DB, and Delphix support database
    automation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在NoSQL数据库的情况下，数据库自动化要容易得多，但在传统的关系数据库管理系统中很难管理。**数据库生命周期管理**（**DLM**）作为一个概念在DevOps世界中很受欢迎，特别是用于处理数据库自动化。诸如DBmaestro、Redgate
    DLM、Datical DB和Delphix等工具支持数据库自动化。
- en: Establishing self-organizing teams
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立自组织团队
- en: One of the most important activities in microservices development is to establish
    the right teams for development. As recommended in many DevOps processes, a small,
    focused team always delivers the best results.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务开发中最重要的活动之一是建立正确的开发团队。正如许多DevOps流程所建议的，一个小而专注的团队总是能够取得最好的结果。
- en: '![Establishing self-organizing teams](img/B05447_10_04.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![建立自组织团队](img/B05447_10_04.jpg)'
- en: As microservices are aligned with business capabilities and are fairly loosely
    coupled products, it is ideal to have a dedicated team per microservice. There
    could be cases where the same team owns multiple microservices from the same business
    area representing related capabilities. These are generally decided by the coupling
    and size of the microservices.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于微服务与业务能力对齐，并且是相当松散耦合的产品，因此最好为每个微服务设立一个专门的团队。可能会出现同一团队拥有来自同一业务领域的多个微服务的情况，代表相关能力。这些通常由微服务的耦合和大小决定。
- en: Team size is an important aspect in setting up effective teams for microservices
    development. The general notion is that the team size should not exceed 10 people.
    The recommended size for optimal delivery is between 4 and 7\. The founder of
    Amazon.com, Jeff Bezos, coined the theory of two-pizza teams. Jeff's theory says
    the team will face communication issues if the size gets bigger. Larger teams
    work with consensus, which results in increased wastage. Large teams also lose
    ownership and accountability. A yardstick is that the product owner should get
    enough time to speak to individuals in the team to make them understand the value
    of what they are delivering.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Teams are expected to take full ownership in ideating for, analyzing, developing,
    and supporting services. Werner Vogels from Amazon.com calls this *you build it
    and you run it*. As per Werner's theory, developers pay more attention to develop
    quality code to avoid unexpected support calls. The members in the team consist
    of fullstack developers and operational engineers. Such a team is fully aware
    of all the areas. Developers understand operations as well as operations teams
    understand applications. This not only reduces the changes of throwing mud across
    teams but also improves quality.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Teams should have multidisciplinary skills to satisfy all the capabilities required
    to deliver a service. Ideally, the team should not rely on external teams to deliver
    the components of the service. Instead, the team should be self-sufficient. However,
    in most organizations, the challenge is on specialized skills that are rare. For
    example, there may not be many experts on a graph database in the organization.
    One common solution to this problem is to use the concept of consultants. Consultants
    are SMEs and are engaged to gain expertise on specific problems faced by the team.
    Some organizations also use shared or platform teams to deliver some common capabilities.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Team members should have a complete understanding of the products, not only
    from the technical standpoint but also from the business case and the business
    KPIs. The team should have collective ownership in delivering the product as well
    as in achieving business goals together.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Agile software development also encourages having self-organizing teams. Self-organizing
    teams act as a cohesive unit and find ways to achieve their goals as a team. The
    team automatically align themselves and distribute the responsibilities. The members
    in the team are self-managed and empowered to make decisions in their day-to-day
    work. The team''s communication and transparency are extremely important in such
    teams. This emphasizes the need for collocation and collaboration, with a high
    bandwidth for communication:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![Establishing self-organizing teams](img/B05447_10_05.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, both **Microservice A** and **Microservice B** represent
    related business capabilities. Self-organizing teams treat everyone in the team
    equally, without too many hierarchies and management overheads within the team.
    The management would be thin in such cases. There won't be many designated vertical
    skills in the team, such as team lead, UX manager, development manager, testing
    manager, and so on. In a typical microservice development, a shared product manager,
    shared architect, and a shared people manager are good enough to manage the different
    microservice teams. In some organizations, architects also take up responsibility
    for delivery.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Self-organizing teams have some level of autonomy and are empowered to take
    decisions in a quick and Agile mode rather than having to wait for long-running
    bureaucratic decision-making processes that exist in many enterprises. In many
    of these cases, enterprise architecture and security are seen as an afterthought.
    However, it is important to have them on board from the beginning. While empowering
    the teams with maximum freedom for developers in decision-making capabilities,
    it is equally important to have fully automated QA and compliance so as to ensure
    that deviations are captured at the earliest.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 自组织团队具有一定程度的自治权，并且有权以快速和敏捷的方式做出决策，而不必等待长时间运行的官僚决策过程，这种过程存在于许多企业中。在许多情况下，企业架构和安全性被视为事后考虑。然而，从一开始就将它们纳入是很重要的。在赋予团队最大自由度的同时，对开发人员的决策能力进行全面自动化的QA和合规性同样重要，以确保偏差能够尽早被捕捉到。
- en: Communication between teams is important. However, in an ideal world, it should
    be limited to interfaces between microservices. Integrations between teams ideally
    has to be handled through consumer-driven contracts in the form of test scripts
    rather than having large interface documents describing various scenarios. Teams
    should use mock service implementations when the services are not available.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 团队之间的沟通很重要。然而，在理想的世界中，它应该仅限于微服务之间的接口。团队之间的集成理想情况下应该通过消费者驱动的合同来处理，以测试脚本的形式，而不是通过描述各种场景的大型接口文档。当服务不可用时，团队应该使用模拟服务实现。
- en: Building a self-service cloud
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自助式云
- en: One of the key aspects that one should consider before embarking on microservices
    is to build a cloud environment. When there are only a few services, it is easy
    to manage them by manually assigning them to a certain predesignated set of virtual
    machines.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在着手进行微服务之前，一个关键方面是构建一个云环境。当只有少量服务时，可以通过手动将它们分配到一组预先指定的虚拟机来轻松管理它们。
- en: However, what microservice developers need is more than just an IaaS cloud platform.
    Neither the developers nor the operations engineers in the team should worry about
    where the application is deployed and how optimally it is deployed. They also
    should not worry about how the capacity is managed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，微服务开发人员需要的不仅仅是一个IaaS云平台。团队中的开发人员和运维工程师都不应该担心应用程序部署在何处以及部署的最佳方式。他们也不应该担心如何管理容量。
- en: This level of sophistication requires a cloud platform with self-service capabilities,
    such as what we discussed in [Chapter 9](ch09.html "Chapter 9. Managing Dockerized
    Microservices with Mesos and Marathon"), *Managing Dockerized Microservices with
    Mesos and Marathon*, with the Mesos and Marathon cluster management solutions.
    Containerized deployment discussed in [Chapter 8](ch08.html "Chapter 8. Containerizing
    Microservices with Docker"), *Containerizing Microservices with Docker*, is also
    important in managing and end to-end-automation. Building this self-service cloud
    ecosystem is a prerequisite for microservice development.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种复杂程度需要一个具有自助式能力的云平台，就像我们在[第9章](ch09.html "第9章。使用Mesos和Marathon管理Docker化的微服务")中讨论的那样，*使用Mesos和Marathon管理Docker化的微服务*，使用Mesos和Marathon集群管理解决方案。在[第8章](ch08.html
    "第8章。使用Docker容器化微服务")中讨论的容器化部署，*使用Docker容器化微服务*，在管理和端到端自动化中也很重要。构建这种自助式云生态系统是微服务开发的先决条件。
- en: Building a microservices ecosystem
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建微服务生态系统
- en: As we discussed in the capability model in [Chapter 3](ch03.html "Chapter 3. Applying
    Microservices Concepts"), *Applying Microservices Concepts*, microservices require
    a number of other capabilities. All these capabilities should be in place before
    implementing microservices at scale.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ch03.html "第3章。应用微服务概念")中讨论的能力模型，*应用微服务概念*，微服务需要许多其他能力。在实施大规模微服务之前，所有这些能力都应该就位。
- en: These capabilities include service registration, discovery, API gateways, and
    an externalized configuration service. All are provided by the Spring Cloud project.
    Capabilities such as centralized logging, monitoring, and so on are also required
    as a prerequisite for microservices development.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些能力包括服务注册、发现、API网关和外部化配置服务。所有这些都由Spring Cloud项目提供。集中日志记录、监控等能力也是微服务开发的先决条件。
- en: Defining a DevOps-style microservice life cycle process
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义DevOps风格的微服务生命周期流程
- en: DevOps is the best-suited practice for microservices development. Organizations
    already practicing DevOps do not need another practice for microservices development.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是微服务开发的最合适实践。已经实践DevOps的组织不需要另一种实践来进行微服务开发。
- en: In this section, we will explore the life cycle of microservices development.
    Rather than reinventing a process for microservices, we will explore DevOps processes
    and practices from the microservice perspective.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨微服务开发的生命周期。我们将从微服务的角度探索DevOps流程和实践，而不是为微服务重新发明流程。
- en: 'Before we explore DevOps processes, let''s iron out some of the common terminologies
    used in the DevOps world:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索DevOps流程之前，让我们澄清一些DevOps世界中常用的术语：
- en: '**Continuous integration** (**CI**): This automates the application build and
    quality checks continuously in a designated environment, either in a time-triggered
    manner or on developer commits. CI also publishes code metrics to a central dashboard
    as well as binary artifacts to a central repository. CI is popular in Agile development
    practices.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）：这在指定环境中连续自动化应用程序构建和质量检查，可以按时间触发方式或开发人员提交方式进行。CI还将代码指标发布到中央仪表板，以及将二进制构件发布到中央存储库。CI在敏捷开发实践中很受欢迎。'
- en: '**Continuous delivery** (**CD**): This automates the end-to-end software delivery
    practice from idea to production. In a non-DevOps model, this used to be known
    as **Application Lifecycle Management** (**ALM**). One of the common interpretations
    of CD is that it is the next evolution of CI, which adds QA cycles into the integration
    pipeline and makes the software ready to release to production. A manual action
    is required to move it to production.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous deployment**: This is an approach to automating the deployment
    of application binaries to one or more environments by managing binary movement
    and associated configuration parameters. Continuous deployment is also considered
    as the next evolution of CD by integrating automatic release processes into the
    CD pipeline.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Release Automation** (**ARA**): ARA tools help monitor and manage
    end-to-end delivery pipelines. ARA tools use CI and CD tools and manage the additional
    steps of release management approvals. ARA tools are also capable of rolling out
    releases to different environments and rolling them back in case of a failed deployment.
    ARA provides a fully orchestrated workflow pipeline, implementing delivery life
    cycles by integrating many specialized tools for repository management, quality
    assurance, deployment, and so on. XL Deploy and Automic are some of the ARA tools.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the DevOps process for microservices development:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining a DevOps-style microservice life cycle process](img/B05447_10_06.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Let's now further explore these life cycle stages of microservices development.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Value-driven planning
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Value-driven planning is a term used in Agile development practices. Value-driven
    planning is extremely important in microservices development. In value-driven
    planning, we will identify which microservices to develop. The most important
    aspect is to identify those requirements that have the highest value to business
    and those that have the lowest risks. The MVP philosophy is used when developing
    microservices from the ground up. In the case of monolithic to microservices migration,
    we will use the guidelines provided in [Chapter 3](ch03.html "Chapter 3. Applying
    Microservices Concepts"), *Applying Microservices Concepts*, to identify which
    services have to be taken first. The selected microservices are expected to precisely
    deliver the expected value to the business. Business KPIs to measure this value
    have to be identified as part of value-driven planning.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Agile development
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the microservices are identified, development must be carried out in an
    Agile approach following the Agile manifesto principles. The scrum methodology
    is used by most of the organizations for microservices development.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The continuous integration steps should be in place to automatically build the
    source code produced by various team members and generate binaries. It is important
    to build only once and then move the binary across the subsequent phases. Continuous
    integration also executes various QAs as part of the build pipeline, such as code
    coverage, security checks, design guidelines, and unit test cases. CI typically
    delivers binary artefacts to a binary artefact repository and also deploys the
    binary artefacts into one or more environments. Part of the functional testing
    also happens as part of CI.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Continuous testing
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once continuous integration generates the binaries, they are moved to the testing
    phase. A fully automated testing cycle is kicked off in this phase. It is also
    important to automate security testing as part of the testing phase. Automated
    testing helps improve the quality of deliverables. The testing may happen in multiple
    environments based on the type of testing. This could range from the integration
    test environment to the production environment to test in production.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Continuous release
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Continuous release to production takes care of actual deployment, infrastructure
    provisioning, and rollout. The binaries are automatically shipped and deployed
    to production by applying certain rules. Many organizations stop automation with
    the staging environment and make use of manual approval steps to move to production.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 持续发布到生产环境负责实际部署、基础设施供应和发布。通过应用一定的规则，二进制文件会自动发货并部署到生产环境。许多组织在暂存环境中停止自动化，并使用手动批准步骤来移动到生产环境。
- en: Continuous monitoring and feedback
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续监控和反馈
- en: The continuous monitoring and feedback phase is the most important phase in
    Agile microservices development. In an MVP scenario, this phase gives feedback
    on the initial acceptance of the MVP and also evaluates the value of the service
    developed. In a feature addition scenario, this further gives insight into how
    this new feature is accepted by users. Based on the feedback, the services are
    adjusted and the same cycle is then repeated.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 持续监控和反馈阶段是敏捷微服务开发中最重要的阶段。在MVP场景中，这个阶段提供了有关MVP的初始接受情况的反馈，并评估了所开发服务的价值。在功能添加场景中，这进一步提供了有关用户如何接受这个新功能的见解。根据反馈，服务进行调整，然后重复相同的周期。
- en: Automating the continuous delivery pipeline
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化持续交付管道
- en: In the previous section, we discussed the life cycle of microservices development.
    The life cycle stages can be altered by organizations based on their organizational
    needs but also based on the nature of the application. In this section, we will
    take a look at a sample continuous delivery pipeline as well as toolsets to implement
    a sample pipeline.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了微服务开发的生命周期。生命周期阶段可以根据组织的需求以及应用程序的性质进行调整。在本节中，我们将看一下一个样本持续交付管道以及实施样本管道的工具集。
- en: There are many tools available to build end-to-end pipelines, both in the open
    source and commercial space. Organizations can select the products of their choice
    to connect pipeline tasks.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可用于构建端到端管道，无论是在开源空间还是商业空间。组织可以选择他们选择的产品来连接管道任务。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to the XebiaLabs periodic table for a tool reference to build continuous
    delivery pipelines. It is available at [https://xebialabs.com/periodic-table-of-devops-tools/](https://xebialabs.com/periodic-table-of-devops-tools/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参考XebiaLabs周期表，了解构建持续交付管道的工具参考。网址为[https://xebialabs.com/periodic-table-of-devops-tools/](https://xebialabs.com/periodic-table-of-devops-tools/)。
- en: The pipelines may initially be expensive to set up as they require many toolsets
    and environments. Organizations may not realize an immediate cost benefit in implementing
    the delivery pipeline. Also, building a pipeline needs high-power resources. Large
    build pipelines may involve hundreds of machines. It also takes hours to move
    changes through the pipeline from one end to the other. Hence, it is important
    to have different pipelines for different microservices. This will also help decoupling
    between the releases of different microservices.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最初设置管道可能会很昂贵，因为它们需要许多工具集和环境。组织可能无法立即从实施交付管道中获得成本效益。此外，构建管道需要高性能资源。大型构建管道可能涉及数百台机器。从一个端到另一个端将更改移动到管道需要数小时。因此，对于不同的微服务需要不同的管道非常重要。这也有助于解耦不同微服务的发布。
- en: Within a pipeline, parallelism should be employed to execute tests on different
    environments. It is also important to parallelize the execution of test cases
    as much as possible. Hence, designing the pipeline based on the nature of the
    application is important. There is no one size fits all scenario.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在管道中，应该使用并行处理在不同环境中执行测试。并且尽可能并行执行测试用例是很重要的。因此，根据应用程序的性质设计管道是很重要的。没有一刀切的情况。
- en: The key focus in the pipeline is on end-to-end automation, from development
    to production, and on failing fast if something goes wrong.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的重点在于端到端的自动化，从开发到生产，并且在出现问题时快速失败。
- en: 'The following pipeline is an indicative one for microservices and explores
    the different capabilities that one should consider when developing a microservices
    pipeline:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下管道是微服务的一个指示性示例，并探讨了在开发微服务管道时应考虑的不同能力：
- en: '![Automating the continuous delivery pipeline](img/B05447_10_07.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: 自动化持续交付管道
- en: The continuous delivery pipeline stages are explained in the following sections.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付管道阶段在以下部分进行了解释。
- en: Development
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发
- en: 'The development stage has the following activities from a development perspective.
    This section also indicates some of the tools that can be used in the development
    stage. These tools are in addition to the planning, tracking, and communication
    tools such as Agile JIRA, Slack, and others used by Agile development teams. Take
    a look at the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 开发阶段从开发的角度来看有以下活动。本节还指出了一些可以在开发阶段使用的工具。这些工具是除了规划、跟踪和沟通工具（如敏捷JIRA、Slack等）之外，敏捷开发团队使用的。看一下以下内容：
- en: '**Source code**: The development team requires an IDE or a development environment
    to cut source code. In most organizations, developers get the freedom to choose
    the IDEs they want. Having said this, the IDEs can be integrated with a number
    of tools to detect violations against guidelines. Generally, Eclipse IDEs have
    plugins for static code analysis and code matrices. SonarQube is one example that
    integrates other plugins such as Checkstyle for code conventions, PMD to detect
    bad practices, FindBugs to detect potential bugs, and Cobertura for code coverage.
    It is also recommended to use Eclipse plugins such as ESVD, Find Security Bugs,
    SonarQube Security Rules, and so on to detect security vulnerabilities.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit test cases**: The development team also produces unit test cases using
    JUnit, NUnit, TestNG, and so on. Unit test cases are written against components,
    repositories, services, and so on. These unit test cases are integrated with the
    local Maven builds. The unit test cases targeting the microservice endpoints (service
    tests) serve as the regression test pack. Web UI, if written in AngularJS, can
    be tested using Karma.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer-driven contracts**: Developers also write CDCs to test integration
    points with other microservices. Contract test cases are generally written as
    JUnit, NUnit, TestNG, and so on and are added to the service tests pack mentioned
    in the earlier steps.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mock testing**: Developers also write mocks to simulate the integration endpoints
    to execute unit test cases. Mockito, PowerMock, and others are generally used
    for mock testing. It is good practice to deploy a mock service based on the contract
    as soon as the service contract is identified. This acts as a simple mechanism
    for service virtualization for the subsequent phases.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Behavior driven design** (**BDD**): The Agile team also writes BDD scenarios
    using a BDD tool, such as Cucumber. Typically, these scenarios are targeted against
    the microservices contract or the user interface that is exposed by a microservice-based
    web application. Cucumber with JUnit and Cucumber with Selenium WebDriver, respectively,
    are used in these scenarios. Different scenarios are used for functional testing,
    user journey testing, as well as acceptance testing.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source code repository**: A source control repository is a part and parcel
    of development. Developers check-in their code to a central repository, mostly
    with the help of IDE plugins. One microservice per repository is a common pattern
    used by many organizations. This disallows other microservice developers from
    modifying other microservices or writing code based on the internal representations
    of other microservices. Git and Subversion are the popular choices to be used
    as source code repositories.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build tools**: A build tool such as Maven or Gradle is used to manage dependencies
    and build target artifacts—in this case, Spring Boot services. There are many
    cases, such as basic quality checks, security checks and unit test cases, code
    coverage, and so on, that are integrated as part of the build itself. These are
    similar to the IDE, especially when IDEs are not used by developers. The tools
    that we examined as part of the IDEs are also available as Maven plugins. The
    development team does not use containers such as Docker until the CI phase of
    the project. All the artifacts have to be versioned properly for every change.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifact repository**: The artifact repository plays a pivotal role in the
    development process. The artifact repository is where all build artifacts are
    stored. The artifact repository could be Artifactory, Nexus, or any similar product.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database schemas**: Liquibase and Flyway are commonly used to manage, track,
    and apply database changes. Maven plugins allow interaction with the Liquibase
    or Flyway libraries. The schema changes are versioned and maintained, just like
    source code.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the code is committed to the repository, the next phase, continuous integration,
    automatically starts. This is done by configuring a CI pipeline. This phase builds
    the source code with a repository snapshot and generates deployable artifacts.
    Different organizations use different events to kickstart the build. A CI start
    event may be on every developer commit or may be based on a time window, such
    as daily, weekly, and so on.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The CI workflow is the key aspect of this phase. Continuous integration tools
    such as Jenkins, Bamboo, and others play the central role of orchestrating the
    build pipeline. The tool is configured with a workflow of activities to be invoked.
    The workflow automatically executes configured steps such as build, deploy, and
    QA. On the developer commit or on a set frequency, the CI kickstarts the workflow.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'The following activities take place in a continuous integration workflow:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '**Build and QA**: The workflow listens to Git webhooks for commits. Once it
    detects a change, the first activity is to download the source code from the repository.
    A build is executed on the downloaded snapshot source code. As part of the build,
    a number of QA checks are automatically performed, similarly to QA executed in
    the development environment. These include code quality checks, security checks,
    and code coverage. Many of the QAs are done with tools such as SonarQube, with
    the plugins mentioned earlier. It also collects code metrics such as code coverage
    and more and publishes it to a central database for analysis. Additional security
    checks are executed using OWASP ZAP Jenkins'' plugins. As part of the build, it
    also executes JUnit or similar tools used to write test cases. If the web application
    supports Karma for UI testing, Jenkins is also capable of running web tests written
    in Karma. If the build or QA fails, it sends out alarms as configured in the system.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Packaging**: Once build and QA are passed, the CI creates a deployable package.
    In our microservices case, it generates the Spring Boot standalone JAR. It is
    recommended to build Docker images as part of the integration build. This is the
    one and only place where we build binary artifacts. Once the build is complete,
    it pushes the immutable Docker images to a Docker registry. This could be on Docker
    Hub or a private Docker registry. It is important to properly version control
    the containers at this stage itself.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration tests**: The Docker image is moved to the integration environment
    where regression tests (service tests) and the like are executed. This environment
    has other dependent microservices capabilities, such as Spring Cloud, logging,
    and so on, in place. All dependent microservices are also present in this environment.
    If an actual dependent service is not yet deployed, service virtualization tools
    such as MockServer are used. Alternately, a base version of the service is pushed
    to Git by the respective development teams. Once successfully deployed, Jenkins
    triggers service tests (JUnits against services), a set of end-to-end sanity tests
    written in Selenium WebDriver (in the case of web) and security tests with OWASP
    ZAP.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automated testing
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many types of testing to be executed as part of the automated delivery
    process before declaring the build ready for production. The testing may happen
    by moving the application across multiple environments. Each environment is designated
    for a particular kind of testing, such as acceptance testing, performance testing,
    and so on. These environments are adequately monitored to gather the respective
    metrics.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: In a complex microservices environment, testing should not be seen as a last-minute
    gate check; rather, testing should be considered as a way to improve software
    quality as well as to avoid last-minute failures. Shift left testing is an approach
    of shifting tests as early as possible in the release cycle. Automated testing
    turns software development to every-day development and every-day testing mode.
    By automating test cases, we will avoid manual errors as well as the effort required
    to complete testing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: CI or ARA tools are used to move Docker images across multiple test environments.
    Once deployed in an environment, test cases are executed based on the purpose
    of the environment. By default, a set of sanity tests are executed to verify the
    test environment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover all the types of tests that are required in the
    automated delivery pipeline, irrespective of the environment. We have already
    considered some types of tests as part of the development and integration environment.
    Later in this section, we will also map test cases against the environments in
    which they are executed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Different candidate tests for automation
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section, we will explore different types of tests that are candidates
    for automation when designing an end-to-end delivery pipeline. The key testing
    types are described as follows.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Automated sanity tests
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When moving from one environment to another, it is advisable to run a few sanity
    tests to make sure that all the basic things are working. This is created as a
    test pack using JUnit service tests, Selenium WebDriver, or a similar tool. It
    is important to carefully identify and script all the critical service calls.
    Especially if the microservices are integrated using synchronous dependencies,
    it is better to consider these scenarios to ensure that all dependent services
    are also up and running.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Regression testing
  id: totrans-179
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Regression tests ensure that changes in software don't break the system. In
    a microservices context, the regression tests could be at the service level (Rest
    API or message endpoints) and written using JUnit or a similar framework, as explained
    earlier. Service virtualizations are used when dependent services are not available.
    Karma and Jasmine can be used for web UI testing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: In cases where microservices are used behind web applications, Selenium WebDriver
    or a similar tool is used to prepare regression test packs, and tests are conducted
    at the UI level rather than focusing on the service endpoints. Alternatively,
    BDD tools, such as Cucumber with JUnit or Cucumber with Selenium WebDriver, can
    also be used to prepare regression test packs. CI tools such as Jenkins or ARA
    are used to automatically trigger regression test packs. There are other commercial
    tools, such as TestComplete, that can also be used to build regression test packs.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Automated functional testing
  id: totrans-182
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Functional test cases are generally targeted at the UIs that consume the microservices.
    These are business scenarios based on user stories or features. These functional
    tests are executed on every build to ensure that the microservice is performing
    as expected.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: BDD is generally used in developing functional test cases. Typically in BDD,
    business analysts write test cases in a domain-specific language but in plain
    English. Developers then add scripts to execute these scenarios. Automated web
    testing tools such as Selenium WebDriver are useful in such scenarios, together
    with BDD tools such as Cucumber, JBehave, SpecFlow, and so on. JUnit test cases
    are used in the case of headless microservices. There are pipelines that combine
    both regression testing and functional testing as one step with the same set of
    test cases.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Automated acceptance testing
  id: totrans-185
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is much similar to the preceding functional test cases. In many cases,
    automated acceptance tests generally use the screenplay or journey pattern and
    are applied at the web application level. The customer perspective is used in
    building the test cases rather than features or functions. These tests mimic user
    flows.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: BDD tools such as Cucumber, JBehave, and SpecFlow are generally used in these
    scenarios together with JUnit or Selenium WebDriver, as discussed in the previous
    scenario. The nature of the test cases is different in functional testing and
    acceptance testing. Automation of acceptance test packs is achieved by integrating
    them with Jenkins. There are many other specialized automatic acceptance testing
    tools available on the market. FitNesse is one such tool.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It is important to automate performance testing as part of the delivery pipeline.
    This positions performance testing from a gate check model to an integral part
    of the delivery pipeline. By doing so, bottlenecks can be identified at very early
    stages of build cycles. In some organizations, performance tests are conducted
    only for major releases, but in others, performance tests are part of the pipeline.
    There are multiple options for performance testing. Tools such as JMeter, Gatling,
    Grinder, and so on can be used for load testing. These tools can be integrated
    into the Jenkins workflow for automation. Tools such as BlazeMeter can then be
    used for test reporting.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Application Performance Management tools such as AppDynamics, New Relic, Dynatrace,
    and so on provide quality metrics as part of the delivery pipeline. This can be
    done using these tools as part of the performance testing environment. In some
    pipelines, these are integrated into the functional testing environment to get
    better coverage. Jenkins has plugins in to fetch measurements.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Real user flow simulation or journey testing
  id: totrans-191
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is another form of test typically used in staging and production environments.
    These tests continuously run in staging and production environments to ensure
    that all the critical transactions perform as expected. This is much more useful
    than a typical URL ping monitoring mechanism. Generally, similar to automated
    acceptance testing, these test cases simulate user journeys as they happen in
    the real world. These are also useful to check whether the dependent microservices
    are up and running. These test cases could be a carved-out subset of acceptance
    test cases or test packs created using Selenium WebDriver.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Automated security testing
  id: totrans-193
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It is extremely important to make sure that the automation does not violate
    the security policies of the organization. Security is the most important thing,
    and compromising security for speed is not desirable. Hence, it is important to
    integrate security testing as part of the delivery pipeline. Some security evaluations
    are already integrated in the local build environment as well as in the integration
    environment, such as SonarQube, Find Security Bugs, and so on. Some security aspects
    are covered as part of the functional test cases. Tools such as BDD-Security,
    Mittn, and Gauntlt are other security test automation tools following the BDD
    approach. VAPT can be done using tools such as ImmuniWeb. OWASP ZAP and Burp Suite
    are other useful tools in security testing.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory testing
  id: totrans-195
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Exploratory testing is a manual testing approach taken by testers or business
    users to validate the specific scenarios that they think automated tools may not
    capture. Testers interact with the system in any manner they want without prejudgment.
    They use their intellect to identify the scenarios that they think some special
    users may explore. They also do exploratory testing by simulating certain user
    behavior.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: A/B testing, canary testing, and blue-green deployments
  id: totrans-197
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When moving applications to production, A/B testing, blue-green deployments,
    and canary testing are generally applied. A/B testing is primarily used to review
    the effectiveness of a change and how the market reacts to the change. New features
    are rolled out to a certain set of users. Canary release is moving a new product
    or feature to a certain community before fully rolling out to all customers. Blue-green
    is a deployment strategy from an IT point of view to test the new version of a
    service. In this model, both blue and green versions are up and running at some
    point of time and then gracefully migrate from one to the other.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Other nonfunctional tests
  id: totrans-199
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: High availability and antifragility testing (failure injection tests) are also
    important to execute before production. This helps developers unearth unknown
    errors that may occur in a real production scenario. This is generally done by
    breaking the components of the system to understand their failover behavior. This
    is also helpful to test circuit breakers and fallback services in the system.
    Tools such as Simian Army are useful in these scenarios.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Testing in production
  id: totrans-201
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Testing in Production** (**TiP**) is as important as all the other environments
    as we can only simulate to a certain extend. There are two types of tests generally
    executed against production. The first approach is running real user flows or
    journey tests in a continuous manner, simulating various user actions. This is
    automated using one of the **Real User Monitoring** (**RUM**) tools, such as AppDynamics.
    The second approach is to wiretap messages from production, execute them in a
    staging environment, and then compare the results in production with those in
    the staging environment.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Antifragility testing
  id: totrans-203
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Antifragility testing is generally conducted in a preproduction environment
    identical to production or even in the production environment by creating chaos
    in the environment to take a look at how the application responds and recovers
    from these situations. Over a period of time, the application gains the ability
    to automatically recover from most of these failures. Simian Army is one such
    tool from Netflix. Simian Army is a suite of products built for the AWS environment.
    Simian Army is for disruptive testing using a set of autonomous monkeys that can
    create chaos in the preproduction or production environments. Chaos Monkey, Janitor
    Monkey, and Conformity Monkey are some of the components of Simian Army.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Target test environments
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The different test environments and the types of tests targeted on these environments
    for execution are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '**Development environment**: The development environment is used to test the
    coding style checks, bad practices, potential bugs, unit tests, and basic security
    scanning.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration test environment**: Integration environment is used for unit
    testing and regression tests that span across multiple microservices. Some basic
    security-related tests are also executed in the integration test environment.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and diagnostics**: Performance tests are executed in the performance
    test environment. Application performance testing tools are deployed in these
    environments to collect performance metrics and identify bottlenecks.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional test environment**: The functional test environment is used to
    execute a sanity test and functional test packs.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UAT environment**: The UAT environment has sanity tests, automated acceptance
    test packs, and user journey simulations.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staging**: The preproduction environment is used primarily for sanity tests,
    security, antifragility, network tests, and so on. It is also used for user journey
    simulations and exploratory testing.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production**: User journey simulations and RUM tests are continuously executed
    in the production environment.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making proper data available across multiple environments to support test cases
    is the biggest challenge. Delphix is a useful tool to consider when dealing with
    test data across multiple environments in an effective way.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Continuous deployment is the process of deploying applications to one or more
    environments and configuring and provisioning these environments accordingly.
    As discussed in [Chapter 9](ch09.html "Chapter 9. Managing Dockerized Microservices
    with Mesos and Marathon"), *Managing Dockerized Microservices with Mesos and Marathon*,
    infrastructure provisioning and automation tools facilitate deployment automation.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: From the deployment perspective, the released Docker images are moved to production
    automatically once all the quality checks are successfully completed. The production
    environment, in this case, has to be cloud based with a cluster management tool
    such as Mesos or Marathon. A self-service cloud environment with monitoring capabilities
    is mandatory.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Cluster management and application deployment tools ensure that application
    dependencies are properly deployed. This automatically deploys all the dependencies
    that are required in case any are missing. It also ensures that a minimum number
    of instances are running at any point in time. In case of failure, it automatically
    rolls back the deployments. It also takes care of rolling back upgrades in a graceful
    manner.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Ansible, Chef, or Puppet are tools useful in moving configurations and binaries
    to production. The Ansible playbook concepts can be used to launch a Mesos cluster
    with Marathon and Docker support.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and feedback
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once an application is deployed in production, monitoring tools continuously
    monitor its services. Monitoring and log management tools collect and analyze
    information. Based on the feedback and corrective actions needed, information
    is fed to the development teams to take corrective actions, and the changes are
    pushed back to production through the pipeline. Tools such as APM, Open Web Analytics,
    Google Analytics, Webalizer, and so on are useful tools to monitor web applications.
    Real user monitoring should provide end-to-end monitoring. QuBit, Boxever, Channel
    Site, MaxTraffic, and so on are also useful in analyzing customer behavior.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Automated configuration management
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration management also has to be rethought from a microservices and DevOps
    perspective. Use new methods for configuration management rather than using a
    traditional statically configured CMDB. The manual maintenance of CMDB is no longer
    an option. Statically managed CMDB requires a lot of mundane tasks to maintain
    entries. At the same time, due to the dynamic nature of the deployment topology,
    it is extremely hard to maintain data in a consistent way.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: The new styles of CMDB automatically create CI configurations based on an operational
    topology. These should be discovery based to get up-to-date information. The new
    CMDB should be capable of managing bare metals, virtual machines, and containers.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Microservices development governance, reference architectures, and libraries
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to have an overall enterprise reference architecture and a standard
    set of tools for microservices development to ensure that development is done
    in a consistent manner. This helps individual microservices teams to adhere to
    certain best practices. Each team may identify specialized technologies and tools
    that are suitable for their development. In a polyglot microservices development,
    there are obviously multiple technologies used by different teams. However, they
    have to adhere to the arching principles and practices.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: For quick wins and to take advantage of timelines, microservices development
    teams may deviate from these practices in some cases. This is acceptable as long
    as the teams add refactoring tasks in their backlogs. In many organizations, although
    the teams make attempts to reuse something from the enterprise, reuse and standardization
    generally come as an afterthought.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: It is important to make sure that the services are catalogued and visible in
    the enterprise. This improves the reuse opportunities of microservices.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the relationship between microservices and
    DevOps. We also examined a number of practice points when developing microservices.
    Most importantly, you learned the microservices development life cycle.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we also examined how to automate the microservices delivery
    pipeline from development to production. As part of this, we examined a number
    of tools and technologies that are helpful when automating the microservices delivery
    pipeline. Finally, we touched base with the importance of reference architectures
    in microservices governance.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Putting together the concepts of microservices, challenges, best practices,
    and various capabilities covered in this book makes a perfect recipe for developing
    successful microservices at scale.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
