- en: Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a deeper look at Docker Machine, which we touched
    upon in the previous chapter. It can be used to easily launch and bootstrap Docker
    hosts targeting various platforms, including locally or in a cloud environment.
    You can control your Docker hosts with it as well. Let''s take a look at what
    we will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Docker Machine to set up local Docker hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching Docker hosts in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using other base operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking at how we can use Docker Machine to launch Docker-based virtual
    machines locally using VirtualBox as well as in public clouds, so you will need
    an account with Digital Ocean if you would like to follow along with the example
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems on which we have installed Docker so far. However, some
    of the supporting commands, which will be few and far between, may only apply
    to macOS, and Linux-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Ansb5v](http://bit.ly/2Ansb5v)'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we roll our sleeves up and get stuck in with Docker Machine, we should
    take a moment to discuss what place it occupies in the overall Docker ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine's biggest strength is that it provides a consistent interface
    to several public cloud providers, such as Amazon Web Services, DigitalOcean,
    Microsoft Azure, and Google Cloud, as well as self-hosted virtual machine/cloud
    platforms, including OpenStack, and VMware vSphere. Finally, the following locally-hosted
    hypervisors are supported, such as Oracle VirtualBox and VMware Workstation or
    Fusion.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to target all of these technologies using a single command with minimal
    user interaction is a very big time saver if you need to quickly access a Docker
    host in Amazon Web Services one day and then DigitialOcean the next—you know you
    are going to get a consistent experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it is a command-line tool, it is also very easy to pass instructions to
    colleagues or even script the launch and tear down on Docker hosts: imagine starting
    work with your environment built fresh for you each morning and then, to save
    costs, it is torn down each evening.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying local Docker hosts with Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we journey out into the cloud, we are going to look at the basics of
    Docker Machine locally by launching it, using Oracle VirtualBox to provide the
    virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is a free virtualization product from Oracle. It allows you to install
    virtual machines across many different platforms and CPU types. Download and install
    VirtualBox from [https://www.virtualbox.org/wiki/Downloads/](https://www.virtualbox.org/wiki/Downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the machine, all you need to do is run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will start the deployment, during which you will get a list of tasks that
    Docker Machine is running. To launch your Docker host, each host launched with
    Docker Machine goes through the same steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, Docker Machine runs a few basic checks, such as confirming that
    VirtualBox is installed, and creating certificates and a directory structure in
    which to store all of its files and virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It then checks for the presence of the image it will use for the virtual machine.
    If it is not there, the image will be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the checks have passed, it creates the virtual machine using the selected
    driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Docker Machine creates a unique SSH key for the virtual machine.
    This means that you will be able to access the virtual machine over SSH, but more
    on that later. Once the virtual machine has booted, Docker Machine then makes
    a connection to the virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Docker Machine detects the operating system being used and
    chooses the appropriate bootstrap script to deploy Docker. Once Docker is installed,
    Docker Machine generates and shares certificates between your local host and the
    Docker host. It then configures the remote Docker installation for certificate
    authentication, meaning that your local client can connect to and interact with
    the remote Docker server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is installed, Docker Machine generates and shares certificates
    between your local host and the Docker host. It then configures the remote Docker
    installation for certificate authentication, meaning that your local client can
    connect to and interact with the remote Docker server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, it checks whether your local Docker client can make the remote connection
    and completes the task by giving you instructions on how to configure your local
    client to the newly launched Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open VirtualBox, you should be able to see your new virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e31b049f-31be-45cc-9084-ac9b2ab29006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to configure our local Docker client to connect to the newly
    launched Docker host; as already mentioned in the output of launching the host,
    running the following command will show you how to make the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This command returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This overrides the local Docker installation by giving the IP address and port
    number of the newly launched Docker host as well as the path to the certificates
    used for authentication. At the end of the output, it gives you a command to run
    and to configure your terminal session in order to make the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we run the command, let''s run `docker version` to get information on
    the current setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/68b803b8-d173-47f2-8575-63ec407bd92a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is basically the Docker for Mac installation I am running. Running the
    following command and then `docker version` again should show some changes to
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5f64477c-35a8-4f7f-abe1-54bed7e4abe9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the server launched by Docker Machine is pretty much in line
    with what we have installed locally; in fact, the only difference is the build
    time. As you can see, the Docker Engine binary on my Docker for Mac installation
    was built one minute after the Docker Machine version.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we can interact with the Docker host in the same way as if it were
    a local Docker installation. Before we move on to launching Docker hosts in the
    cloud, there are a few other basic Docker Machine commands to cover.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first lists the currently configured Docker hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/172d6b76-17f2-4e7b-84ec-a9a7d2155fb1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it lists the details on the machine name, the driver used and
    the Docker endpoint URL, as well as the version of Docker the hosts are running.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that there is an `*` in the `ACTIVE` column; this indicates
    which Docker host your local client is currently configured to interact with.
    You can also find out the active machine by running `docker-machine active`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command connects you to the Docker host using SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d13ebe1b-2e6a-468b-8155-44c1e1c2505d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is useful if you need to install additional software or configuration
    outside of Docker Machine. It is also useful if you need to look at logs and so
    on, as you can exit the remote shell by running `exit`. You can find out the IP
    address of your Docker host by running the following command once back on your
    local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be using this a lot later in the chapter. There are also commands for
    establishing more details about your Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there are also commands to `stop`, `start`, `restart`, and remove
    your Docker host. Use the final command to remove your locally launched host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `docker-machine rm` command will prompt you to determine whether
    you really want to remove the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have had a very quick rundown of the basics, let's try something
    more adventurous.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Docker hosts in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at just one of the public cloud
    drivers supported by Docker Machine. As already mentioned, there are plenty available,
    but part of the appeal of Docker Machine is that it offers consistent experiences,
    so there are not too many differences between the drivers.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be launching a Docker host in DigitalOcean using Docker Machine.
    The only thing we need to do this is an API access token. Rather than explaining
    how to generate one here, you can follow the instructions at [https://www.digitalocean.com/help/api/](https://www.digitalocean.com/help/api/).
  prefs: []
  type: TYPE_NORMAL
- en: Launching a Docker host using the API token will incur a cost; ensure you keep
    track of the Docker hosts you launch. Details on DigitalOcean's pricing can be
    found at [https://www.digitalocean.com/pricing/](https://www.digitalocean.com/pricing/).
    Also, keep your API token secret as it could be used to gain unauthorized access
    to your account. All of the tokens used in this chapter have been revoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first we are going to do is set our token as an environment variable so
    we don''t have to keep using it. To do this, run the following command, making
    sure you replace the API token with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Due to the additional flags that we need to pass to the Docker Machine command,
    I will be using `\` to split the command across multiple lines to make it more
    readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a Docker host called `docker-digtialocean`, we need to run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As the Docker host is a remote machine, it will take a little while to launch,
    configure, and be accessible. As you can see from the following output, there
    are also a few changes to how Docker Machine bootstraps the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, you should be able to see the Docker host in your DigitalOcean
    control panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bfffcab0-e5f0-466c-ad23-16bee375745f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reconfigure your local client to connect to the remote host by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can run `docker version` and `docker-machine inspect docker-digitalocean`
    to find out more information about the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, running `docker-machine ssh docker-digitalocean` will SSH you into
    the host. As you can see from the following output, and also from the output when
    you first launched the Docker host, there is a difference in the operating system
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cb1e120a-b732-47be-a345-353509316d83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can exit the remote shell by running `exit`. As you can see, we didn''t
    have to tell Docker Machine which operating system to use, the size of the Docker
    host, or even where to launch it. That is because each driver has some pretty
    sound defaults. Adding these defaults to our command makes it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is scope for you to customize the size, region, and operating
    system, and even the network your Docker host is launched with. Let''s say we
    wanted to change the operating system and the size of the droplet. In this instance,
    we can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the DigitalOcean control panel, this launches a machine that
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/766a16c6-50f5-4439-b972-9aa69d25de4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can remove the DigitalOcean Docker host by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Using other base operating systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't have to use the default operating systems with Docker Machine; it
    does come with provisioners for other base operating systems, including ones that
    are geared toward running containers. Before we finish the chapter, we are going
    to take a look at launching one of these, CoreOS.
  prefs: []
  type: TYPE_NORMAL
- en: The distribution we are going to look at has just enough of an operating system
    to run a kernel, networking stack, and containers, just like Docker's own MobyOS,
    which is used as the base for Docker for Mac and Docker for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: While CoreOS supports its own container runtime, called RKT (pronounced Rocket),
    it also ships with Docker. However, as we will see, the version of Docker currently
    shipping with the stable version of CoreOS is a little out of date.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the DigitalOcean-managed `coreos-stable` version, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As with launching our other Docker hosts on public clouds, the output is pretty
    much the same. You will notice that Docker Machine uses the CoreOS provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the content of the `release` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the following will show you more information on the version of Docker
    that is running on the CoreOS host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see this from the following output; also, as already mentioned, it
    is behind the current release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1717210e-d830-4cab-bb21-092e16c042fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that not all of the commands we are using in this book may work.
    To remove the CoreOS host, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to use Docker Machine to create the Docker
    hosts locally on VirtualBox and reviewed the commands you can use to both interact
    with and manage your Docker Machine-launched Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at how to use Docker Machine to deploy Docker hosts to your cloud
    environments, namely DigitalOcean. Finally, we took a very quick look at how to
    launch a different container-optimized Linux operating system, which was CoreOS.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you will agree that using Docker Machine made running these tasks,
    which typically have very different approaches, a very consistent experience,
    and which, in the long run, will save a lot of time as well as explaining.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to move away from interacting with single
    Docker hosts to launching and running a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which flag, when running `docker-machine create`, lets you define which service
    or provider Docker Machine uses to launch your Docker host?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Running `docker-machine env my-host` will reconfigure you local
    Docker client to interact with `my-host`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the basic principle behind Docker Machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For information on the various platforms supported by Docker Machine, refer
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Web Services: [https://aws.amazon.com/](https://aws.amazon.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft Azure: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DigitalOcean: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exoscale: [https://www.exoscale.ch/](https://www.exoscale.ch/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Compute Engine: [https://cloud.google.com/](https://cloud.google.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rackspace: [https://www.rackspace.com/](https://www.rackspace.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IBM SoftLayer: [https://www.softlayer.com/](https://www.softlayer.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft Hyper-V: [https://www.microsoft.com/en-gb/cloud-platform/server-virtualization/](https://www.microsoft.com/en-gb/cloud-platform/server-virtualization/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenStack: [https://www.openstack.org/](https://www.openstack.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMware vSphere: [https://www.vmware.com/uk/products/vsphere.html](https://www.vmware.com/uk/products/vsphere.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle VirtualBox: [https://www.virtualbox.org/](https://www.virtualbox.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMware Fusion: [https://www.vmware.com/uk/products/fusion.html](https://www.vmware.com/uk/products/fusion.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMware Workstation: [https://www.vmware.com/uk/products/workstation.html](https://www.vmware.com/uk/products/workstation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreOS: [https://coreos.com/](https://coreos.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
