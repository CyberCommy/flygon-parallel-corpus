- en: 'Chapter 6: Package Management and Software Installation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Package Managers and Repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux package managers and repositories are essential components of the Linux
    ecosystem. They enable users to easily install, update, and manage software packages
    on their Linux systems. Here are some commonly used package managers and repositories
    in the Linux world:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced Packaging Tool (APT): APT is the package manager used by Debian-based
    distributions like Debian itself, Ubuntu, and Linux Mint. It uses .deb packages
    and retrieves packages from software repositories, such as the main repository
    or additional third-party repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'YUM (Yellowdog Updater Modified): YUM is the package manager used primarily
    by Red Hat-based distributions like Red Hat Enterprise Linux (RHEL), CentOS, and
    Fedora. It uses .rpm packages and retrieves packages from software repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DNF (Dandified YUM): DNF is the next-generation package manager, introduced
    in Fedora 18, and it eventually replaced YUM in Fedora. DNF is compatible with
    YUM repositories and package management commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pacman: Pacman is the package manager used by Arch Linux and its derivatives,
    such as Manjaro Linux. It uses .pkg.tar.xz packages and retrieves packages from
    the Arch Linux repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zypper: Zypper is the package manager used by the openSUSE Linux distribution.
    It uses .rpm packages and retrieves packages from software repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Snap: Snap is a universal package management system developed by Canonical,
    the company behind Ubuntu. Snap packages are self-contained and can run on any
    Linux distribution that supports Snap. Snaps are obtained from the Snap Store,
    which is a centralized repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flatpak: Flatpak is another universal package management system designed to
    work across different Linux distributions. It uses sandboxing technology and provides
    a way to distribute and run applications independently of the host system. Flatpak
    packages can be obtained from various sources, including Flathub, a popular repository
    for Flatpak applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few examples of package managers and repositories commonly
    used in the Linux world. Each distribution may have its own package manager and
    repositories tailored to its specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Updating Software Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing and updating software packages in Linux can be done through package
    management systems. The most common package managers in Linux distributions are
    APT (Advanced Package Tool) used by Debian-based systems like Ubuntu, and YUM
    (Yellowdog Updater Modified) used by Red Hat-based systems like Fedora.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the general steps for installing and updating software packages using
    these package managers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'APT (Debian/Ubuntu-based systems):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the package lists by running:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt update
  prefs: []
  type: TYPE_NORMAL
- en: 'Install a package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt install <package-name>
  prefs: []
  type: TYPE_NORMAL
- en: 'Update all installed packages to their latest versions:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt upgrade
  prefs: []
  type: TYPE_NORMAL
- en: 'YUM (Red Hat/Fedora-based systems):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the package lists by running:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum update
  prefs: []
  type: TYPE_NORMAL
- en: 'Install a package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum install <package-name>
  prefs: []
  type: TYPE_NORMAL
- en: 'Update all installed packages to their latest versions:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo yum upgrade
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The actual commands may vary depending on the Linux distribution and
    version you are using. Additionally, some distributions might have their own package
    managers or variations of the mentioned package managers.'
  prefs: []
  type: TYPE_NORMAL
- en: It's also worth mentioning that many Linux distributions have graphical package
    managers that provide a user-friendly interface for installing and updating software
    packages. Examples include Ubuntu Software Center, GNOME Software, and KDE Discover.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, some distributions, such as Arch Linux, use a rolling release model
    where software packages are continuously updated. In such cases, updating the
    entire system using the respective package manager is usually sufficient to update
    all installed software packages.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to use the appropriate package manager commands with administrative
    privileges (sudo) to perform system-wide installations and updates.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and Installing from Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compiling and updating software from source on Linux can be a useful approach
    when you want to have the latest version of a particular application or when pre-built
    packages are not available for your distribution. Here''s a general outline of
    the process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install build tools: Before you begin, make sure your system has the necessary
    build tools installed. This typically includes packages like build-essential on
    Ubuntu/Debian or gcc, make, automake, and autoconf on other distributions. Use
    your package manager to install these tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Obtain the source code: Download the source code for the software you wish
    to compile. You can usually find it on the project''s official website or source
    code repository. Some projects provide source code archives (tarballs) that you
    can download, while others use version control systems like Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extract the source code: If you downloaded a tarball, extract its contents
    using the tar command. For example, tar xvfz source_code.tar.gz for a tarball
    compressed with gzip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navigate to the source directory: Use the cd command to enter the extracted
    source code directory. For example, cd source_code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the build: Many projects provide a configuration script (often named
    configure) that you need to run before compiling. This script checks your system
    for dependencies and sets up the build environment. Execute it using ./configure.
    You can often pass various options to customize the build, such as installation
    paths or enabled features. Run ./configure --help to see available options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build the software: Once the configuration step completes successfully, you
    can proceed with the actual compilation. Use the make command to build the software.
    This command reads the project''s Makefile and compiles the necessary source files.
    Depending on the project''s size and complexity, this step may take some time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the compiled software: After a successful build, you can install the
    software on your system using make install or sudo make install (if administrative
    privileges are required). This step typically copies the compiled binaries, libraries,
    and other necessary files to appropriate locations on your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the software: To update the software to a newer version, repeat the
    above steps with the newer source code. Before starting, ensure that you remove
    the existing installation, either by using make uninstall (if provided by the
    project) or by manually deleting the installed files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worth noting that this is a general outline, and the actual process may
    vary depending on the project and the specific instructions provided in its documentation.
    Additionally, keep in mind that compiling software from source can introduce compatibility
    issues and requires you to manage dependencies manually. Therefore, it's often
    recommended to use pre-built packages from your distribution's repositories whenever
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Managing dependencies is an important aspect of working with Linux, especially
    when installing software packages. The package manager is a powerful tool that
    helps you handle dependencies efficiently. Here''s an overview of how you can
    manage dependencies on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Package Manager: Linux distributions typically have a package manager, such
    as APT (Advanced Package Tool) for Debian-based systems (e.g., Ubuntu) or DNF
    (Dandified Yum) for Fedora-based systems. These package managers handle dependencies
    automatically when you install or remove packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package Repositories: Package managers access software repositories where packages
    and their dependencies are stored. The repositories contain pre-compiled packages
    for easy installation. The package manager resolves dependencies by checking the
    repository for the required packages and their versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dependency Resolution: When you install a package, the package manager analyses
    its dependencies and verifies if they are already installed. If a dependency is
    missing or an incompatible version is installed, the package manager retrieves
    the required packages from the repository and installs them automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update and Upgrade: Package managers also handle updates and upgrades of installed
    packages. They check for newer versions in the repository and update the installed
    packages, including their dependencies, if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dependency Tracking: Package managers keep track of installed packages and
    their dependencies. This helps prevent conflicts and ensures that the system remains
    in a consistent state. Removing a package typically triggers an automatic removal
    of its unused dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manual Dependency Resolution: In some cases, you may need to handle dependencies
    manually. For example, if you want to install a package from a source code archive,
    you may need to download and compile its dependencies separately. In such cases,
    it''s important to review the documentation and follow the instructions provided
    by the software developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package Managers and Package Formats: Different package managers support different
    package formats. For example, Debian-based systems use .deb packages, while Red
    Hat-based systems use .rpm packages. It''s important to use the appropriate package
    manager for your distribution to ensure compatibility and efficient dependency
    management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, the specifics of package management may vary between Linux distributions.
    It's always a good idea to consult the documentation or online resources specific
    to your distribution to learn more about managing dependencies effectively.
  prefs: []
  type: TYPE_NORMAL
