- en: Exploiting Vulnerabilities Using Burp Suite - Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite is an excellent tool to detect vulnerabilities. As we've seen in
    the previous chapters, it has a large variety of tools and options, and of course,
    extensions to help us to be more accurate and efficient while looking for bugs
    in an application. However, Burp Suite also has options to help us to exploit
    vulnerabilities, generate a proof about the exploitation, and reproduce the exploitation
    all of the times this is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will check how to exploit different kinds of vulnerabilities
    using Burp Suite''s options, and in some cases the tools and extensions. We will
    be looking at the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration via a blind Boolean-based ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data exfiltration via a blind Boolean-based SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An SQL injection is a vulnerability based on an input validation error, which
    allows a malicious user to insert unexpected SQL statements into an application
    to perform different actions on it. For example, extract information, delete data
    or modify the original statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of SQL injections, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-band SQL injection**: This type of SQL injection has the characteristic
    that is possible to analyze using the same channel used to send the statement.
    It means that the response generated by the **database management system** (**DBMS**)
    is received in the same analyzed application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inferential**: This type of SQL injection is different from the previous
    one, as it is not possible to see the errors or the results in the application''s
    response. We need to infer what is happening in the application''s backend or
    use external channels to get the information. At the same time, into the inferential
    SQL injections are further divided into two types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Boolean-based blind SQL injection**: In this type of SQL injection, the statements
    are focused on changing a Boolean value into the application in order to get different
    responses. Even though the SQL injection result is not showed directly, the HTTP
    response content could change to infer the result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time-based blind SQL injection**: This inferential SQL injection depends
    on the time lapsed to generate a response by the database server. With time variations,
    it is possible to infer whether the SQL injection is successful or not. To do
    so, the malicious user inserts functions included in the DBMS to determine what
    is happening in the backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Out-of-band SQL injection**: In this type of SQL injection, it is not possible
    to use the same channel to see the error response or infer the result directly.
    So, we need to use an external channel to know whether the SQL injection is successful
    or not. For example, using second data storage to receive the results, such as
    DNS resolution to infer the time lapsed in a request, which is not possible to
    see in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see how it is possible to use Burp Suite to exploit a Boolean-based
    SQL injection vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: The vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Analyze the following snippet of PHP code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code uses the `$id` variable, which is a number, to pass information to
    a query that is directly executed on the database in a `SELECT` statement. The
    `$id` variable is used in a `WHERE` expression to look for the exact `$id` variable
    passed by the user and only display filtered information depending on the number
    in the variable `$id` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing about ...
  prefs: []
  type: TYPE_NORMAL
- en: The exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine this database just has 10 registers, so if a user passes a number `1`
    as value to the `$id` variable, the application returns the first register. When
    the user enters the number `10`, the application returns the last register. However,
    when the user enters the value `11`, the application does not have a register
    to show, but it does not show any error explaining to the user that it is not
    showing anything because it has nothing more to show. The output just doesn't
    do anything.
  prefs: []
  type: TYPE_NORMAL
- en: As the application is not validating the value entered into the `$id` variable,
    a user can enter any kind of information. For example, a `'1` or `1=1--` string,
    which is a common string used to detect SQL injection flaws. However, as we said,
    the application will not show an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Forgetting that the application is not showing errors, why is it possible to
    enter a string, such as `''1` or `1=1--`? We will see in the flow given here:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user enters the `'1` or `1=1--` string, this string is converted to
    a true value, which is interpreted by the application as a number `1`, so, the
    application returns the first register.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if we pass a value out of 1 to 10? If we pass the number `11` to
    the `$id` variable, the `WHERE` conditional will try to look for the eleventh
    register, but as it is missing, the `$query_statement` variable will not have
    a register stored in itself. When the following `if` statement in the PHP code
    verifies the register stored in the `$query_statement` variable, the application
    will fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We know that when the application receives a number between 1 to 10, the application
    will work; and also, we know that we can pass an arbitrary statement when a result
    is a number between 1 to 10\. Keeping this in mind, it is valid if we pass the
    `11-1` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of *11-1* is *10;* therefore, when the `WHERE` conditional verifies
    the `$id` value, it will have a number `10`, so the application will show the
    last value. This is the key for exploiting this vulnerability!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, use a more complex statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This statement produces a final number `10` as value to `$id`; now, also consider
    the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding statement produces the same result. So, both of them could be
    accepted, executed by the backend and without showing the result. Also, if we
    generate a statement which is executed, but the final value is different from
    1 to 10, the error will not be shown.
  prefs: []
  type: TYPE_NORMAL
- en: With this statement as the base, we can use Burp Suite to perform data exfiltration
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Performing exfiltration using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps to perform data exfiltration using Burp Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, configure Burp Suite to intercept the request made by the application,
    and stop when the request which sends the `$id` value, using the `Intercept is
    on` option in the Proxy tab, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d73c09d-beb0-4fd2-bed4-0c91dc130a42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the request is stopped, right-click on it, and select the Send to intruder
    option, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76beb704-7156-48fa-a156-2c3ac0ee617d.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, Burp Suite creates wildcards for each variable detected in the request
    and creates values in the ...
  prefs: []
  type: TYPE_NORMAL
- en: Executing OS commands using an SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most severe impacts of SQL injection attacks is the command execution
    at the OS level. Most of the time, if the user executes system commands, this
    results in the whole server and the application being compromised.
  prefs: []
  type: TYPE_NORMAL
- en: The vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command injection vulnerabilities into SQL injections usually occur because
    the DBMS has a stored procedure or an allowed native option, which interacts directly
    with the OS. For example, `xp_cmdshell` on SQL Server, or a specially stored procedure
    developed in Java for Oracle.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it is also possible that the application stores the database
    strings that are extracted by a query and executed; so, if we can update the database,
    we could inject a command into the server. However, as I mentioned, this is not
    a common case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have detected a vulnerability related to command injection, we can
    use Burp Suite to exploit it. For example, let''s examine the following request
    from an application:'
  prefs: []
  type: TYPE_NORMAL
- en: This request was ...
  prefs: []
  type: TYPE_NORMAL
- en: Executing an out-of-band command injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've mentioned many times, the most important Burp Suite feature is the
    automation capability. As we will explore later on this book, we can create our
    own plugins to extend Burp Suite, or we can find a lot of extensions made by the
    community.
  prefs: []
  type: TYPE_NORMAL
- en: There is an extension called **SHELLING**, which is focused on the payload list
    creation for command injection attacks. We'll look at this more closely in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: SHELLING
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SHELLING is a plugin that is not available in the BApps Store, so you will
    need to go the GitHub to get it [https://github.com/ewilded/shelling](https://github.com/ewilded/shelling).
    Download the `.jar` file and install it using the Extender option in Burp Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, click on the Extender tab, and click on the Manual install button.
    Burp Suite will launch a window to select the `.jar` file. Because SHELLING is
    not included as an official extension, Burp Suite will launch the following warning
    message to confirm that you want to install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44863719-cf5f-417a-8360-5325e87e9f49.png)'
  prefs: []
  type: TYPE_IMG
- en: After it is installed, you will not see anything different on your Burp Suite
    instance. This is because SHELLING does not modify ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stealing session credentials using XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XSS is a vulnerability which can be used for many purposes. It launches a popup
    with a message to take control of the computer affected by the XSS. A common attack
    is to steal credentials or sessions using XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine we have the following vulnerable request, where the `name` parameter
    is vulnerable to XSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can catch it with the Burp Suite''s proxy, and modify the parameter''s
    value using the common testing string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Quit Intercept ...
  prefs: []
  type: TYPE_NORMAL
- en: Taking control of the user's browser using XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned before, perhaps the highest impact by an XSS is to take control
    of the user who is affected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to do this essentially depends on the actions allowed by the web browser
    to execute actions using JavaScript or other client interactions, which can be
    passed by the malicious user in the XSS. In fact, it is not necessary to execute
    the JavaScript directly. For example, it''s possible to exploit XSS in Internet
    Explorer executing ActiveX controls, like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code will launch another program in the remote computer, so it's possible
    to execute any kind of attacks on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting server files using XXE vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XXE is a vulnerability that affects an application that parses XML and made
    a mistaking when parsing an XML that has reference to an XXE.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine we have an application susceptible to an XXE vulnerability, where we
    have a vulnerable request as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edf64d0e-2897-44bd-ba3f-273484aa6940.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the `xml` parameter is vulnerable to an XXE and the header, as shown
    in the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It means that this is a request that is accepting XML as the input. So, we
    will modify the input using the Burp Suite''s Proxy, to see if the application
    is accepting our testing string. To do this, we are going to use the following
    input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s accepted, the application will show the message that we are passing
    in the XML input. So, modify the `xml` parameter with this input, and click on
    Intercept is on to send the request. The result will be displayed in the HTML
    website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we know the vulnerability is exploitable, so we''re going to send a string
    to extract files from the server. To extract files using an XXE attack, we need
    to have more information about the server where the application is hosted, at
    least the OS. Using the headers included in the response, it is possible to know
    what the OS is, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This header could be modified by a system administrator, if you have doubts
    you can use a network tool, such as Nmap ([www.nmap.org](http://www.nmap.org)),
    to confirm.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the server is Debian Linux. So, the testing string that we need
    to use for our attack needs to be in compliance with the Unix-like file systems,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this, we are going to retrieve the `/etc/passwd` file, which, in some
    cases, are stored as password hashes in a Linux system. So, send the original
    request to the Repeater tool, modify the `xml` parameter with this string, and
    click on Go, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/920f6273-fd0f-4598-a157-f208a61c373f.png)'
  prefs: []
  type: TYPE_IMG
- en: Currently, not all of the Linux systems use the `/etc/passwd` file to store
    the hashes; in the past, as a pentester, presenting a screenshot like the preceding
    one was the perfect evidence to show the vulnerability risk. However, nowadays,
    there are a lot of Linux systems that store their hashes in `/etc/shadow`, which
    is ciphered, or in many cases, limit the access that the server user has to the
    file system.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the context of the application, you need to determine which files
    to extract. For example, as a tip, it's very useful to extract files from the
    web server's root directory, in order to get access to source code.
  prefs: []
  type: TYPE_NORMAL
- en: Performing out-of-data extraction using XXE and Burp Suite collaborator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite collaborator is a service used to detect vulnerabilities mostly when
    an application tries to interact with external services. Burp Suite analyzes the
    interactions with external systems and detects unusual behaviors. In order to
    analyze the application, Burp Suite collaborator sends inputs or payloads to the
    application and waits for a response.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this case, Burp Suite is working a server, where the application interacts
    using common services, such as DNS, SMTP, or HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Suite to exploit the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Burp Suite in the main Dashboard tab, and click on the New scan option,
    as demonstrated in the following screenshot. Remember that these options are only
    available in Burp Suite Professional, and not in the Community Edition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d50fcee4-b164-4b3a-86a0-151c17dc7bf3.png)'
  prefs: []
  type: TYPE_IMG
- en: When you use the scanner, Burp Suite tests the application for vulnerabilities.
    Here, you can modify options about how the scanner did its job, and also configure
    credentials for automatic login. This is very important for the most part of application,
    because most of them have authentication control. For exploiting the XXE, we are
    going to launch a simple scan to the URL that we have. After clicking on the OK
    button, the scan starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the scan finishes, Burp Suite will show us the XXE detected in the URL,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecac7d4c-b9d6-4e75-8c63-14a0b90f3727.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding list, we can see that there are some issues that include the
    phrase External service interaction, followed by the protocol used. If we select
    one of these issues, Burp Suite will show us a new tab called Collaborator interaction,
    as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56410108-9297-44e2-a71b-231c63537bbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Burp Suite collaborator allows the users to configure their own server, but
    if you do not configure one, the collaborator uses the Portswigger''s server by
    default. By analyzing the request, we can detect that the collaborator sent the
    following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The response was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The collaborator used a string to identify the vulnerability. If we review
    the collaborator''s request and response, not the HTTP request, it is different.
    We can see which string is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d0908f5-3088-4842-80fb-ecd98349801d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reading the HTML code in the response, we can find the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Exploiting SSTI vulnerabilities to execute server commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSTI is a vulnerability that occurs when an application is using a framework
    to display how it is presented to the user. These templates are inputs, and if
    those inputs are not correctly validated, they can change the behavior.
  prefs: []
  type: TYPE_NORMAL
- en: These vulnerabilities depend a lot on the technology used by the developers
    to create the application, so not all of the cases are the same, and as a pentester,
    you need to identify these differences and its effects on how vulnerability is
    exploited.
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Suite to exploit the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you have a vulnerable application to SSTI that is using Twig. Twig ([https://twig.symfony.com/](https://twig.symfony.com/))
    is a template engine developed in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can detect the use of an engine because of the source code. Consider the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see that the application is waiting for data to present the final
    website to the user. When PHP reads the template, it executes all of the things
    that are contained there. For example, in 2015, James Kettle published a vulnerability
    that allows injecting a backdoor in Twig using the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the same idea, it is possible to execute any command, even getting
    shell, using the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This happens because, in the code, it is possible to inject any PHP function,
    without validation. Kettle showed the vulnerability in the source code, as demonstrated
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Basically, the code accepts any kind of PHP function, so, in the string, Kettle
    entered the `exec()` function to execute a command directly to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Twig is not the only engine that has problems. The other engines researched
    by Kettle included Smarty, another PHP engine that in theory disallows the direct
    use of the `system()` function. However, Kettle discovered that it allows invoking
    methods in other classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The vulnerable code snippet is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e83a91da-a8ce-4c53-a9f9-6ff3a3ce96d4.png)'
  prefs: []
  type: TYPE_IMG
- en: In this snippet of code, we can see that the `getStreamVariable()` method could
    be susceptible to read any file, with the server permissions. Furthermore, we
    can call other methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to execute a command on the server, Kettle showed us the following testing
    string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Where we can add the command in the `$_GET` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Burp Suite, we can add these testing strings for different template engines
    as a list, and then launch the attack using the payloads options in the Intruder
    tool, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/499cb38c-972e-45a5-8f4d-6961fb673c3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the normal tools that Burp Suite uses to exploit
    different types of vulnerabilities. In particular, we explored blind SQL injections,
    OS command injections, exploiting XSS, stealing sessions using XSS, taking control
    of web browsers using XSS, exploiting XXE, extracting files from servers using
    XXE, and exploiting SSTI through template engines.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be exploiting other types of vulnerabilities, showing
    more options and capabilities in Burp Suite.
  prefs: []
  type: TYPE_NORMAL
