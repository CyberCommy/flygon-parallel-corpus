- en: SOAP and REST API Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at SOAP and REST API basics. We will also look
    at the Python libraries for SOAP and REST APIs. We are going to learn about the
    Zeep library for SOAP and requests for REST API. You will learn to work with the
    JSON data. We are going to see simple examples of working with JSON data, such
    as converting JSON strings into Python objects and converting Python objects into
    JSON strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is SOAP?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using libraries for SOAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a RESTful API?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standard libraries for RESTful API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with JSON data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is SOAP?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SOAP** is **Simple Object Access Protocol**. SOAP is the standard communication
    protocol system that permits processes to use different operating systems. These
    communicate via HTTP and XML. It is a web services technology. SOAP APIs are mainly
    designed for tasks such as creating, updating, deleting, and recovering data.
    SOAP API uses the Web Services Description language to describe the functionalities
    offered by web services. SOAP describes all the functions and the types of data.
    It builds an XML-based protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: Using libraries for SOAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about Python libraries for SOAP. There
    are various libraries used for SOAP listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOAPpy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zeep`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ladon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`suds-jurko`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pysimplesoap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the SOAP API libraries for Python. In this section, we are going to
    learn about the Zeep library only.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the functionality of Zeep, you need to install it first. Run the following
    command in your Terminal to install Zeep:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Zeep` module is used for WSDL documents. It generates the code for the
    services and the documents and provides the programming interface to the SOAP
    server. The `lxml` library is used to parse the XML documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see an example. Create a `soap_example.py` script and
    write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we first imported the `zeep` module. We first mentioned
    the website name. Then we created the `zeep` client object. The WSDL we used previously
    defines a simple `Method1` function that is made available by `zeep` via `client.service.Method1`.
    It takes two arguments and returns a string.
  prefs: []
  type: TYPE_NORMAL
- en: What is a RESTful API?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**REST** stands for **Representational State Transfer**. RESTful API has an
    approach to communication used in the development of web services. It is a style
    of a web service that works as a channel of communication between different systems
    over the internet. It is an application interface and is used to `GET`, `PUT`,
    `POST`, and `DELETE` data using `HTTP` requests.'
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of REST is that it uses less bandwidth, which is suitable for
    internet usage. The REST API uses uniform interfaces. All the resources are handled
    by `GET`, `POST`, `PUT`, and `DELETE` operations. The `REST` API uses `GET` to
    retrieve a resource, uses `PUT` to update the resource or to change the state
    of resource, uses `POST` to create a resource, and uses `DELETE` to delete the
    resource. Systems using REST APIs deliver fast performance and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: The REST API handles every request independently. The request from client to
    server must contain all the information that is necessary to understand that request.
  prefs: []
  type: TYPE_NORMAL
- en: Using standard libraries for RESTful APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to use RESTful APIs. To do this,
    we are going to use the `requests` and JSON modules of Python. We will see an
    example now. First, we are going to use the `requests` module to get the information
    from an API. We will see `GET` and `POST` requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you must install the `requests` library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see an example. Create a `rest_get_example.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we imported the `requests` module to get the request.
    Next, we created a request object, `req_obj`, and specified a link from where
    we want to get the request. And next, we printed it. The output we got is a status
    code `200`, which indicates success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see the `POST` request example. `POST` requests are used
    for sending data to a server. Create a `rest_post_example.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we learned about the `POST` request. First, we imported
    the necessary module requests and JSON. Next, we mentioned the URL. Also, we entered
    the data that we want to post in a dictionary format. Next, we mentioned headers.
    And then we posted, using a `POST` request. The output we got is status code `200`,
    which is a success code.
  prefs: []
  type: TYPE_NORMAL
- en: Working with JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about JSON data. **JSON** stands for
    **JavaScript Object Notation**. JSON is a data interchange format. It encodes
    Python objects as JSON strings and decodes JSON strings into Python objects. Python
    has a JSON module that formats the JSON output. It has functions for serializing
    and deserializing JSON.
  prefs: []
  type: TYPE_NORMAL
- en: '`json.dump(obj, fileObj)`: This function will serialize an object as a JSON-formatted
    stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json.dumps(obj)`: This function will serialize an object as a JSON formatted
    string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json.load(JSONfile)`: This function will deserialize a JSON file as a Python
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json.loads(JSONfile)`: This function will deserializes a string-type JSON
    file to a Python object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also has two classes for encoding and decoding listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSONEncoder`: Used to convert Python objects into JSON format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JSONDecoder`: Used to convert a JSON formatted file into a Python object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we are going to see some examples using a JSON module. First, we are going
    to see the conversion from JSON to Python. For that, create a script `json_to_python.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have written a code that will covert a JSON string
    to a Python object. The `json.loads()` function is used to convert a JSON string
    to a Python object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see how to convert Python to JSON. For that, create a `python_to_json.py`
    script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we converted a Python object to a JSON string. The
    `json.dumps()` function is used for this conversion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see how to convert Python objects of various types into
    the JSON string. For that, create a `python_object_to_json.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we converted various types of Python objects into
    JSON string using the `json.dumps()` function. After conversion, the Python list
    and tuples are converted into arrays. Integers and floats are treated as numbers
    in JSON. The following is the chart of conversion from Python to JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Python** | **JSON** |'
  prefs: []
  type: TYPE_TB
- en: '| `dict` | Object |'
  prefs: []
  type: TYPE_TB
- en: '| `list` | Array |'
  prefs: []
  type: TYPE_TB
- en: '| `tuple` | Array |'
  prefs: []
  type: TYPE_TB
- en: '| `str` | String |'
  prefs: []
  type: TYPE_TB
- en: '| `int` | Number |'
  prefs: []
  type: TYPE_TB
- en: '| `float` | Number |'
  prefs: []
  type: TYPE_TB
- en: '| `True` | true |'
  prefs: []
  type: TYPE_TB
- en: '| `False` | false |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | null |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about SOAP APIs and RESTful APIs. You learned about
    the `zeep` Python library for SOAP APIs and the requests library for REST APIs.
    You also learned to work with JSON data, for instance, converting JSON to Python
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about web scrapping and the Python library
    for performing this task.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between SOAP and REST API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `json.loads` and `json.load`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does JSON support all the platforms?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output of the following code snippet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: What is the output of the following code snippet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON documentation: [https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST API information: [https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer](https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
