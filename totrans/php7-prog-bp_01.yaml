- en: Chapter 1.  Create a User Profile System and use the Null Coalesce Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin this chapter, let's check out the new **null coalesce** in PHP 7\.
    We'll also learn how to build a simple profiles page with listed users that you
    can click on, and create a simple CRUD-like system which will enable us to register
    new users to the system and delete users for banning purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We'll learn to use the PHP 7 null coalesce operator so that we can show data
    if there is any, or just display a simple message if there isn't any.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a simple `UserProfile` class. The ability to create classes has
    been available since PHP 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'A class in PHP starts with the word `class`, and the name of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We've made the table private and added a `private` variable, where we define
    which table it will be related to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add two functions, also known as a method, inside the class to simply
    fetch the data from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The null coalesce operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use PHP 7's null coalesce operator to allow us to check whether our results
    contain anything, or return a defined text which we can check on the views, this
    will be responsible for displaying any data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put this in a file which will contain all the define statements, and
    call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On the client side, we'll need to come up with a template to show the list of
    user profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a basic HTML block to show that each profile can be a `div` element
    with several list item elements to output each table.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following function, we need to make sure that all values have been filled
    in with at least the name and the age. Then we simply return the entire string
    when the function is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Separation of Concerns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a proper MVC architecture, we need to separate the view from the models that
    get our data, and the controllers will be responsible for handling business logic.
  prefs: []
  type: TYPE_NORMAL
- en: In our simple app, we will skip the controller layer since we just want to display
    the user profiles in one public facing page. The preceding function is also known
    as the template render part in an MVC architecture.
  prefs: []
  type: TYPE_NORMAL
- en: While there are frameworks available for PHP that use the MVC architecture out
    of the box, for now we can stick to what we have and make it work.
  prefs: []
  type: TYPE_NORMAL
- en: PHP frameworks can benefit a lot from the null coalesce operator. In some codes
    that I've worked with, we used to use the ternary operator a lot, but still had
    to add more checks to ensure a value was not falsy.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the ternary operator can get confusing, and takes some getting
    used to. The other alternative is to use the `isSet` function. However, due to
    the nature of the `isSet` function, some falsy values will be interpreted by PHP
    as being a set.
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our model complete, a template render function, we just need
    to create the view with which we can look at each profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our view will be put inside a `foreach` block, and we''ll use the template
    we wrote to render the right values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's put the code above into `index.php` .
  prefs: []
  type: TYPE_NORMAL
- en: While we may install the Apache server, configure it to run PHP, install new
    virtual hosts and the other necessary features, and put our PHP code into an Apache
    folder, this will take time. So, for the purposes of testing this out, we can
    just run PHP's server for development.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the built-in PHP server (read more at [http://php.net/manual/en/features.commandline.webserver.php](http://php.net/manual/en/features.commandline.webserver.php)
    ) we will use the folder we are running, inside a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we open up our browser, we should see nothing yet, **No results found**.
    This means we need to populate our database.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an error with your database connection, be sure to replace the correct
    database credentials we supplied into each of the `mysql_connect` calls that we
    made.
  prefs: []
  type: TYPE_NORMAL
- en: 'To supply data to our database, we can create a simple SQL script like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save it in a file such as `insert_profiles.sql`. In the same directory
    as the SQL file, log on to the MySQL client by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then type use <name of database>:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the script by running the source command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our user profiles page should show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating views](graphics/image_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a profile input form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's create the HTML form for users to enter their profile data.
  prefs: []
  type: TYPE_NORMAL
- en: Our profiles app would be no use if we didn't have a simple way for a user to
    enter their user profile details.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create the profile input form like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this profile post, we'll need to create a PHP script to take care of anything
    the user posts. It will create an SQL statement from the input values and output
    whether or not they were inserted.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the null coalesce operator again to verify that the user has inputted
    all values and left nothing undefined or null:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This prevents us from accumulating errors while inserting data into our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a variable to hold each of the inputs in one array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a new PHP 5.4+ way to write arrays. In PHP 5.4+, it is
    no longer necessary to put an actual `array()`; the author personally likes the
    new syntax better.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should create a new method in our `UserProfile` class to accept these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Instead of creating a parameter in our function to hold each argument as we
    did with our profile template render function, we can simply use an array to hold
    our values.
  prefs: []
  type: TYPE_NORMAL
- en: This way, if a new field needs to be inserted into our database, we can just
    add another field to the SQL `insert` statement.
  prefs: []
  type: TYPE_NORMAL
- en: While we are at it, let's create the edit profile section.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we'll assume that whoever is using this edit profile is the administrator
    of the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need to create a page where, provided the `$_GET[''id'']` has been set,
    that the user that we will be fetching from the database and displaying on the
    form. Here is how that code will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we're using what is known as the shortcut `echo` statement in the
    form. It makes our code simpler and easier to read. Since we're using PHP 7, this
    feature should come out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Once someone submits the form, it goes into our `$_POST` variable and we'll
    create a new `Update` function in our `UserProfile` class.
  prefs: []
  type: TYPE_NORMAL
- en: Admin system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s finish off by creating a simple *grid* for an admin dashboard portal
    that will be used with our user profiles database. Our requirement for this is
    simple: we can just set up a table-based layout that displays each user profile
    in rows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the grid, we will add the links to be able to edit the profile, or delete
    it, if we want to. The code to display a table in our HTML view would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s one thing that we haven''t yet created: A `delete_profile.php` page.
    The view and edit pages have been discussed already.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how the `delete_profile.php` page would look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Of course, since we might have a lot of user profiles in our database, we have
    to create a simple pagination. In any pagination system, you just need to figure
    out the total number of rows and how many rows you want displayed per page. We
    can create a function that will be able to return a URL that contains the page
    number and how many to view per page.
  prefs: []
  type: TYPE_NORMAL
- en: 'From our queries database, we first create a new function for us to select
    only up to the total number of items in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For our pagination, we can create a simple `paginate` function which accepts
    the `base_url` of the page where we have pagination, the rows per page - also
    known as the number of records we want each page to have - and the total number
    of records found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will help display the above page links in a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we're following the principle that there should rarely be any `echo`
    statements inside a function. This is because we want to make sure that other
    users of these functions are not confused when they debug some mysterious output
    on their page.
  prefs: []
  type: TYPE_NORMAL
- en: By requiring the programmer to echo out whatever the functions return, it becomes
    easier to debug our program. Also, we're following the Separation of Concerns,
    our code doesn't output the display, it just formats the display.
  prefs: []
  type: TYPE_NORMAL
- en: So any future programmer can just update the function's internal code and return
    something else. It also makes our function reusable; imagine that in the future
    someone uses our function, this way, they won't have to double check that there's
    some misplaced `echo` statement within our functions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A note on alternative short tags**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you know, another way to `echo` is to use the `<?=` tag. You can use it
    like so: `<?="helloworld"?>`.These are known as short tags. In PHP 7, alternative
    PHP tags have been removed. The RFC states that `<%`, `<%=`, `%>` and `<script
    language=php>` have been deprecated. The RFC at [https://wiki.php.net/rfc/remove_alternative_php_tags](https://wiki.php.net/rfc/remove_alternative_php_tags)
    says that the RFC does not remove short opening tags (`<?`) or short opening tags
    with `echo` (`<?=`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have laid out the groundwork of creating paginate links, we now just
    have to invoke our functions. The following script is all that is needed to create
    a paginated page using the preceding function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML output of our page links in `listprofiles.php` will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, we have a lot of use cases for the null coalesce.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to make a simple user profile system, and how to use PHP 7's
    null coalesce feature when fetching data from the database, which returns null
    if there are no records. We also learned that the null coalesce operator is similar
    to a ternary operator, except this returns null by default if there is no data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll have more use cases for other PHP 7 features, especially
    when creating the database abstraction layer for use in our projects.
  prefs: []
  type: TYPE_NORMAL
