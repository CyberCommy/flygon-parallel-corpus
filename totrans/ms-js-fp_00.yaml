- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In computer programming, paradigms abound: Some examples are imperative programming,
    structured (*go to less*) programming, object-oriented programming, aspect-oriented
    programming, and declarative programming. Lately, there has been renewed interest
    in a particular paradigm that can arguably be considered to be older than most
    (if not all) of the cited ones--functional programming. **Functional Programming**
    (**FP**) emphasizes writing functions, and connecting them in simple ways to produce
    more understandable and more easily tested code. Thus, given the increased complexity
    of today''s web applications, it''s logical that a safer, cleaner way of programming
    would be of interest.'
  prefs: []
  type: TYPE_NORMAL
- en: This interest in FP comes hand-in-hand with the evolution of JavaScript. Despite
    its somewhat hasty creation (reportedly managed in only 10 days, in 1995, by Brendan
    Eich at Netscape), today it's a standardized and quickly growing language, with
    features more advanced than most other similarly popular languages. The ubiquity
    of the language, which can now be found in browsers, servers, mobile phones, and
    whatnot, has also impelled interest in better development strategies. Also, even
    if JavaScript wasn't conceived as a functional language by itself, the fact is
    that it provides all the features you'd require to work in that fashion, which
    is another plus.
  prefs: []
  type: TYPE_NORMAL
- en: It must also be said that FP hasn't been generally applied in industry, possibly
    because it has a certain aura of difficulty, and is thought to be *theoretical*
    rather than *practical*, even *mathematical*, and possibly uses vocabulary and
    concepts that are foreign to developers--Functors? Monads? Folding? Category theory?
    While learning all this theory will certainly be of help, it can also be argued
    that even with zero knowledge of the previous terms, you can understand the tenets
    of FP, and see how to apply it in your programming.
  prefs: []
  type: TYPE_NORMAL
- en: FP is not something you have to do on your own, without any help. There are
    many libraries and frameworks that incorporate, in greater or lesser degrees,
    the concepts of FP. Starting with jQuery (which does include some FP concepts),
    passing through Underscore and its close relative LoDash, or other libraries such
    as Ramda, and getting to more complete web development tools such as React and
    Redux, Angular, or Elm (a 100% functional language, which compiles into JavaScript),
    the list of functional aids for your coding is ever growing.
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to use FP can be a worthwhile investment, and even though you may
    not get to use all of its methods and techniques, just starting to apply some
    of them will pay dividends in better code. You need not try to apply all of FP
    from the start, and you need not try to abandon every non-functional feature in
    the language either. JavaScript assuredly has some bad features, but it also has
    several very good and powerful ones. The idea is not to throw everything you learned
    and use and adopt a 100% functional way; rather, the guiding idea is *evolution,
    not revolution*. In that sense, it can be said that what we'll be doing is not
    FP, but rather **Sorta Functional Programming** (**SFP**), aiming for a fusion
    of paradigms.
  prefs: []
  type: TYPE_NORMAL
- en: 'A final comment about the style of the code in this book--it is quite true
    that there are several very good libraries that provide you with functional programming
    tools: Underscore, LoDash, Ramda, and more are counted among them. However, I
    preferred to eschew their usage, because I wanted to show how things really work.
    It''s easy to apply a given function from some package or other, but by coding
    everything out (a *vanilla FP*, if you wish), it''s my belief that you get to
    understand things more deeply. Also, as I will comment in some places, because
    of the power and clarity of arrow functions and other features, the *pure JS*
    versions can be even simpler to understand!'
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we''ll cover **Functional Programming** (**FP**) in a practical
    way, though at times we will mention some theoretical points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](395f5897-0ecc-4841-86ed-21521e148beb.xhtml), *Becoming Functional
    - Several Questions*, discusses FP, gives reasons for its usage, and lists the
    tools that you''ll need to take advantage of the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](7e6035b4-9ad0-4301-820a-0b34194bf471.xhtml), *Thinking Functionally
    - A First Example*, will provide the first example of FP by considering a common
    web-related problem and going over several solutions, to finally center on a functional
    way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml), *Starting Out with
    Functions - A Core Concept*, will go over the central concept of FP: functions,
    and the different options available in JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](943d8f5d-2e39-409a-a1aa-26c1a5b36a6d.xhtml), *Behaving Properly
    - Pure Functions*, will consider the concept of purity and pure functions, and
    show how it leads to simpler coding and easier testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](3cf24154-32aa-4bcd-bfbe-e9de8fe35096.xhtml), *Programming Declaratively
    - A Better Style*, will use simple data structures to show how to produce results
    working not in an imperative way, but in a declarative fashion.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](9f36fbcb-da30-4a75-9b47-01cd3427633e.xhtml), *Producing Functions
    - Higher-Order Functions*, will deal with higher-order functions, which receive
    other functions as parameters and produce new functions as results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](44b5eafa-dc7f-45e4-8b9e-9bb5bb9b02ec.xhtml), *Transforming Functions
    - Currying and Partial Application*, will show some methods for producing new
    and specialized functions from earlier ones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](8e0f575a-87f7-4601-b47c-6872aaacb954.xhtml), *Connecting Functions
    - Pipelining and Composition*, will show the key concepts regarding how to build
    new functions by joining previously defined ones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](0f9ddfc4-d3d9-40a9-941b-edbec62cc890.xhtml), *Designing Functions
    - Recursion,* will show how a key concept in FP, recursion, can be applied to
    designing algorithms and functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](383f5538-72cc-420a-ae77-896776c03f27.xhtml), *Ensuring Purity
    - Immutability*, will show some tools that can help you work in a pure fashion
    by providing immutable objects and data structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](24b391f7-abaf-439e-9bfc-a71d989cfd48.xhtml), *Implementing Design
    Patterns - The Functional Way*, will show how several popular OOP design patterns
    are implemented (or not needed!) when you program in FP ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](0d82d215-9bfc-436b-b09d-8ed2e2ebd441.xhtml), *Building Better
    Containers - Functional Data Types*, will show some more high-level functional
    patterns, introducing types, containers, functors, monads, and several other more
    advanced FP concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: I tried to keep examples simple and down-to-earth, because I wanted to focus
    on functional aspects and not on the intricacies of this or that problem. Some
    programming texts are geared toward learning, say, a given framework, and then
    work on a given problem, seeing how to fully work it out with the chosen tools.
    (Also, in fact, at the very beginning of planning for this book, I entertained
    the idea of developing an application that would use all the FP things I had in
    mind, but there was no way to fit all of that within a single project. Exaggerating
    a bit, I felt like an MD trying to find a patient on whom to apply all of his
    medical knowledge and treatments!) So, I opted to show plenty of individual techniques,
    which can be used in multiple situations. Rather than building a house, I want
    to show you how to put bricks together, how to wire things up, and so on, so that
    you will be able to apply whatever you need, as it may fit.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand the concepts and code in this book, you don't need much more than
    a JavaScript environment and a text editor. To be honest, I even developed some
    of the examples working fully online, with tools such as JSFiddle (at [https://jsfiddle.net/](https://jsfiddle.net/))
    or the like, with absolutely nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: However, you will need some experience with the latest version of JavaScript,
    because it includes several features that help writing more concise and compact
    code. We will frequently include pointers to online documentation, such as the
    documentation available on the MDN (Mozilla Development Network at [https://developer.mozilla.org/](https://developer.mozilla.org/))
    to help you get more in-depth knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is geared toward programmers with a good working knowledge of JavaScript,
    working either on the client-side (browsers) or the server side (Node.JS), who
    are interested in applying techniques to be able to write better, testable, understandable,
    and maintainable code. Some background in Computer Science (including, for example,
    data structures) and good programming practices will also come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Just
    assign the names of the layers you want to activate to the `VK_INSTANCE_LAYERS`
    environment variable".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.Tips and tricks appear
    like this.
  prefs: []
  type: TYPE_NORMAL
