- en: Testing in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we examined the role of Babel in modern JavaScript
    development. We''ve also seen some practical examples of using it in Vue. In this
    chapter, we will introduce testing in JS. We will get acquainted with testing
    in general and see it in practice using Jest and Cypress. We''ll discuss assertions
    and **test-driven development** (**TDD**). We''ll then move on to understanding
    how Jest and Cypress work with Vue CLI 3\. We''ll discuss test utils and test
    cases. Specifically, we''ll look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Jest plugin to our Vue app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing unit tests inside a Vue app with Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tasks from the project tasks page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running unit tests inside the Vue CLI UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with assertions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Cypress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll begin this chapter with a brief overview of Vue plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When making a new Vue app with the help of the Vue CLI from the command line,
    we use the `vue create` command. We are then taken through a number of steps and
    prompts that we need to choose, so that our app is properly configured. What we
    are actually doing, among other things, is choosing which Vue plugins will end
    up being used in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins are a way to add functionality to our Vue projects. Some plugins are
    more complex than others; they sometimes have their own prompts that appear during
    installation. Our Vue app's configurations, that is, the underlying code, will
    reflect our choices. The way our app is set up will be based on the answers we
    provide to these installation prompts.
  prefs: []
  type: TYPE_NORMAL
- en: All the official `npm` packages of a project are scoped with the `@` symbol,
    followed by the project name. Thus, official Vue plugins, built by the Vue maintainers,
    begin with `@vue`.
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about scoped `npm` packages, visit: [https://docs.npmjs.com/about-scopes.](https://docs.npmjs.com/about-scopes)
  prefs: []
  type: TYPE_NORMAL
- en: To add a plugin from the command line, we use the `vue add` command, but we
    can use the Vue UI as well, as we'll see in this chapter. The Vue UI is also a
    great way to search for Vue plugins, which we'll also examine in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning testing on a brand new Vue app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen many different options available in the Vue CLI and UI in previous
    chapters. We'll begin this chapter by utilizing the best approach to start a new
    app, the Vue CLI UI. This will help us learn about some other features of the
    UI. Along the way, we'll also slowly introduce testing to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new project with Vue CLI UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us now add a new project with Vue CLI UI:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, let's open Git Bash and navigate to the root folder for all of our
    projects, `vue-cli-3-qsg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we''ll run the Vue CLI UI command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will result in a new page being served in the browser. The default address
    is `http://localhost:8000/dashboard`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, click on the home icon (or simply type out this URL in the address bar: `http://localhost:8000/project/select`),
    which will take you to the Vue Project Manager screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note from the following that the home icon is the leftmost icon in the footer
    of the Vue CLI UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d066d2d2-1d87-47c5-b479-ab4fdbc8733d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: The home icon in the Vue CLI UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of how you access the Vue Project Manager screen, it will show a
    list of available apps, together with three tabs at the top: *Projects*, *Create*,
    and *Import*. Click on the Create tab to create a new project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve clicked on the Create tab, you need to get back to the root of
    your project, and then click on the Create a new project here button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f50337fd-3de7-414c-8e66-f6dfbf260fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Create, get to root of all projects, Create a new project here
    button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click the Create a new project here button, you''ll see the Create
    a new project screen. We will only type our new app''s folder name. We''ll call
    it `testing-debugging-vuecli3`. We will not change anything else: we''ll accept
    the default package manager and other default options as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e3d7bf4e-ac4d-4f63-993d-57ce8e52c478.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Adding the name for the folder that will hold our new app'
  prefs: []
  type: TYPE_NORMAL
- en: We've completed all the necessary changes in the Details tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the Next button, we''ll be taken to the Presets screen. There,
    we can just accept the Default preset (babel, eslint) as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3f893d8b-40a4-48d6-a106-e6516ad9c3c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Accepting the default presets'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll click Create Project to scaffold our project. It will take some
    time for the Vue CLI UI to complete the project scaffolding. Once done, we'll
    be greeted with the Welcome to your new project! screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the Jest plugin to our Vue app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let us add our Jest plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Plugins icon (marked with number 1 in the following screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the Project plugins screen appears, click on the Add Plugin button (2
    in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3e2f0239-9789-4a2b-a913-9d2b1e852732.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Adding a new plugin to our installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this will take us to the Add a plugin screen, where we have an input
    field to search for plugins. We need to locate a unit testing plugin, so we can
    just type out `cli-plugin-unit` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e2c3fc8e-4a03-426c-a3d6-6a4149a1c21f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Finding unit testing plugins for Vue'
  prefs: []
  type: TYPE_NORMAL
- en: Typing out this search term will show all the available unit testing plugins.
    Jest should be right there on top. You can see it in the previous screenshot,
    flagged as 2. In the description under the plugin name, you can see that it's
    an Official plugin. Similar to what we've already seen with the `@vue/cli-plugin-babel`,
    you can click the More info link to see the corresponding GitHub repository for
    the plugin in question (flagged as 3 in the preceding screenshot). Doing this
    will take you to the vue-cli GitHub page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find out more about `@vue/cli-plugin-unit-jest` at the `npm` package
    page, at the following URL: [https://www.npmjs.com/package/@vue/cli-plugin-unit-jest.](https://www.npmjs.com/package/@vue/cli-plugin-unit-jest)
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Jest plugin, simply click on it in the plugins list. Doing this
    will add a checkbox in a green circle next to the Jest plugin (flagged as 1 in
    the following screenshot). A new install button will also appear (box number 2
    in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/368f8688-3b3a-4c26-b205-e6b72c0b1597.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Adding the Jest plugin'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Install @vue/cli-plugin-unit-jest button will result in a loader
    appearing on the page, with the following message being shown: Installing @vue/cli-plugin-unit-jest....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, just click the Finish installation button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/126f5dc8-06e3-4d38-9c8a-8de33ee9ef8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Finishing the installation of the Jest plugin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the Finish installation button will show the following message on
    the screen: Invoking @vue/cli-plugin-unit-jest....'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this update is finished, we''ll be greeted with another screen as follows,
    showing the changes to files, and asking us to commit the updates made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/585749c2-edc5-4796-adb5-4a2e44f640c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Vue CLI UI showing changes after the installation of the Jest plugin'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see that the Files changed tab is active.
    Inside the Files changed tab, we can see the number of files changed (box 1).
  prefs: []
  type: TYPE_NORMAL
- en: When we were building our project with the Vue CLI UI, we were offered the default
    option to track changes to our project with Git, and we accepted this default
    setting; that's why we now see the Commit changes button (flagged as 2 in the
    preceding screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see all the changes and updates made to the two existing files: `package-lock.json` and  `package.json`,
    as well as the contents of the three new files added when we installed the plugin:
    `jest.config.js`, `tests/unit/.eslintrc.js`, and `tests/unit/example.spec.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be beneficial to inspect the contents of each of these files to get
    more familiar with how they are set up and what changes have been made to them.
    One of the most important changes that we need to be aware of is in the `package.json`
    file, inside the `scripts` key, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous line shows that our `vue-cli-service` just got a new command, `test:unit`,
    specifically set up for unit testing with Jest.
  prefs: []
  type: TYPE_NORMAL
- en: Once we click the Commit changes button, we'll see a dialog that invites us
    to Enter a commit message. We can type a simple message, such as `Add Jest plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we''ve added the commit, we''ll be taken back to the Installed plugins
    screen. Now we can see that `@vue/cli-plugin-unit-jest` is also added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/963f0ed0-fd7e-4e6e-84e7-07617b09ec13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Vue CLI UI showing changes after the installation of the Jest
    plugin'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll be adding our app so that we can begin testing it
    with Jest.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the code for our Vue application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add our app, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate in Windows Explorer to the `testing-debugging-vuecli3` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click on an empty space inside the folder, and click the Git Bash
    here command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Git Bash is open, type `code .` and press the *Enter* key. This will open
    our `testing-debugging-vuecli3` project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our focus at this point is on Jest. To avoid unnecessary complications, we'll
    simply copy and paste the entire `add-one-counter` app from the previous chapter.
    The easiest way to do that is to point Windows Explorer to the `add-one-counter`
    app and start another instance of Git Bash with a right-click inside the folder,
    as already explained. We'll again type out the `code .` command inside Git Bash,
    and another instance of VS Code will open, this time showing the files inside
    the `add-one-counter` app. Now it's just a matter of copying and pasting all the
    files and folders from `add-one-counter` to `testing-debugging-vuecli3`.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use Linux commands inside Git Bash to copy the relevant
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of how you do it, the updated project structure will now look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4a82f25-9ba3-4340-82b4-3b4c35180c74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: The updated project structure of testing-debugging-vuecli3'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to start our first unit test with Jest.
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first unit test inside a Vue app with Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside the `tests` folder, there is another folder called `unit`. Let's add
    a new file to the `unit` folder. We'll call this new file `AnotherComponent.spec.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Any file that has a `spec.js` extension will be recognized by Jest.
  prefs: []
  type: TYPE_NORMAL
- en: 'To describe a test, we use the `describe` function, so let''s add it to `AnotherComponent.spec.js` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `describe` function takes two arguments. The first argument is the name
    of the Vue component we are testing, and the second argument is an anonymous function
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can rewrite the preceding code using an arrow function as our second argument as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body of the anonymous function, we call another function, the `test`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `test` function accepts two arguments: the first argument is the name of
    our test, and the second argument is another anonymous arrow function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We are specifying a test we''ve called `setup working` , and we need to give
    it an assertion inside the second argument, that is, inside the body of the anonymous
    function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This assertion will always be true, and so we give it the following code: `expect(true).toBeTrue()`.'
  prefs: []
  type: TYPE_NORMAL
- en: We have just seen an example of a Jest matcher in action. A matcher is a way
    to test values in Jest. One way to check if something is true is to use the `toBeTrue`
    matcher. There are many other Jest matchers. For more information, check out the
    official Jest documentation at the following URL: [https://jestjs.io/docs/en/using-matchers.](https://jestjs.io/docs/en/using-matchers)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go to the Vue CLI UI, and run our unit test.
  prefs: []
  type: TYPE_NORMAL
- en: Running our first unit test inside the Vue CLI UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run our unit test inside the Vue CLI UI, we need to navigate to the `localhost:8080/tests`
    page, either by visiting the URL right from the address bar, or by clicking the
    lowest icon on the main navigation (the Tests icon in the leftmost column in the
    Vue CLI UI dashboard). Once we do, we''ll see the following list of tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8606c869-2f64-41d4-a36f-e97e81302adf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: Viewing the available tasks inside Vue CLI UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s get ready to run the `test:unit` task by clicking on it. Doing
    so will result in a panel appearing on the right-hand side of the Project tasks
    page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75190c61-419f-4020-9037-b4bcf0fedffd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: The run tasks panel for running the test:unit command'
  prefs: []
  type: TYPE_NORMAL
- en: This Run task panel gives us a nice overview of everything that is happening.
    Let's now run our test by clicking the Run task button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following information will be shown in the Output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, our `AnotherComponent.spec.js` test passed successfully. The
    test that failed and whose output is logged before the `AnotherComponent.spec.js`
    test, is the test for the `HelloWorld.vue` component. We have removed this `HelloWorld.vue`
    file from our default app after the app was built by Vue UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `example.spec.js` file inside the `./tests/unit` folder is the
    `test` file that calls the non-existing `HelloWorld.vue` file. Looking at `example.spec.js`,
    we can see that it imports the `HelloWorld.vue` component, on line number 2 as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Why is this the case? Haven't we already specified `AnotherComponent.vue` inside
    the `describe` function?
  prefs: []
  type: TYPE_NORMAL
- en: 'As it turns out, we could have specified any name as the first argument of
    the describe function inside our unit test. For example, we could update our `AnotherComponent.spec.js`
    file to this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If we ran our test again, it would still run.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that the string `AnotherComponent.vue` is what we developers
    pass in as the first argument to our `describe` function so that it is easier
    for us to work in our project. Jest doesn't care what name it has.
  prefs: []
  type: TYPE_NORMAL
- en: 'What it does care about, however, is importing the file to be tested. As we
    saw in the `HelloWorld.vue` import, we need to add a similar import to our `AnotherComponent.spec.js`
    file, so that now it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Interestingly, we are importing a Vue file, but our tests are still passing,
    even though the `.vue` extension is not JS. How is this achieved?
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily see what is going on if we open the `jest.config.js` file, located
    at the root of our project. Looking at the first 12 lines of this file, we see
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `vue` extension is listed on line 6, and the `.vue` file
    extension will be transformed using the `vue-jest` plugin, as specified on line
    9.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue, let's rename our `example.spec.js` file to `example.js`,
    so that Jest doesn't catch it. We still need the contents of the file, so let's
    not delete it, but rather just rename it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing mount from test-utils and writing another unit test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll begin by adding a  `mount` import from `@vue/test-utils` in the very
    first line our `AnotherComponent.spec.js` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Before we continue, we need to look at what this syntax does. Why the curly
    brackets around `mount`?
  prefs: []
  type: TYPE_NORMAL
- en: To answer this question, it's good to know that this is accepted JS syntax.
    To explain what is happening, we need to begin with the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: This file was created by our Vue CLI, when we built our project. If we look
    at the contents of the `package.json` file, we'll see `@vue/test-utils` listed
    as one of our project's `devDependencies`.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, we are importing a single function, `mount`, from this
    `@vue/test-utils` JS module. By doing this, we are inserting the `mount` function
    into our `AnotherComponent.spec.js` file's scope.
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, we are importing the `mount` functionality from `@vue/test-utils`,
    so that we can use it in the `AnotherComponent.spec.js` file, and only test this
    component alone.
  prefs: []
  type: TYPE_NORMAL
- en: With the Vue CLI UI running in our browser, let's look at a list of our project's
    dependencies by visiting the following URL: `http://localhost:8000/dependencies`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a screen similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8abc325a-aef6-4f62-9908-666c2197b2a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: Our project''s devDependencies listed in the Vue CLI UI dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: As usual, clicking the More info link for our `@vue/test-utils` project dependency
    will take us to the corresponding GitHub repository for the project: [https://github.com/vuejs/vue-test-utils#readme.](https://github.com/vuejs/vue-test-utils#readme)
  prefs: []
  type: TYPE_NORMAL
- en: Mounting the component to be tested
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We begin by importing the `mount` method and the component to be tested as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mount` function receives a component as its argument. The result of the
    call to the `mount` function is a wrapper with an instance of the component we
    gave it. This wrapper also comes with additional functions that help our testing
    process. Let''s first assign the returned value of the call to `mount(AnotherComponent)`
    to a variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Writing a failing assertion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When our app is initially loaded into a browser, we are expecting the current
    value of the counter to be `0`. However, since we want our assertion to initially
    fail, let''s assert that the value of the counter is going to be `1` instead of
    `0` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have written a failing assertion in the preceding code. We claim that we
    are expecting that our wrapped component will contain the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The initial value of our counter is not going to be `1`; it will actually be
    `0`, thus the preceding assertion should fail.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's save and run our unit test by going to the Project tasks screen and
    running the test as described earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be shown in the Output panel of Run task inside Project tasks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll fix the preceding test by writing a passing assertion.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a passing assertion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write a passing assertion, all we need to do is revert our `1` to a `0,` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s run our task again inside the Vue UI, and we''ll get back the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll trigger a button click in our test.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering a button click in our test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How can we test for a button click in our unit test? Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to find the button to be clicked. This is easy, since there is only
    one button in our app. We will use the find method to do that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are going to trigger a click on a button, using the trigger method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to check for the value of the counter to change from `0` to `1`. However,
    since we first need to write a failing test, we''ll write out the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, the output of running our test in the Vue CLI UI is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make things a bit more interesting by writing two tests, and asserting
    them in such a way that they both pass as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's save our test again and run it as a task inside the Vue CLI UI one more
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully written two separate unit tests in one test suite for a
    Vue component, and both our tests have passed.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driven development in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TDD is development based on the idea of the **red-green-refactor** cycle. Similar
    to what we've seen in the preceding code, we first write our code so that our
    test fails. Next, we write our code so that our test passes, and finally we refactor
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: For each new feature in our apps, we repeat the same process. This is essentially
    what TDD is.
  prefs: []
  type: TYPE_NORMAL
- en: TDD is just a streamlined way of writing any application in any language or
    framework. It streamlines our work by allowing us to split our entire project
    into testable, clearly separated chunks of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The red-green-refactor approach is clearly visible in our output on the Project
    tasks page too. If we write a failing test, we'll see a red background on the
    word fail. It we write a passing test, we'll see a green background on the work
    pass.
  prefs: []
  type: TYPE_NORMAL
- en: Through the rest of this chapter, we'll look at some other concepts related
    to testing with the help of Vue CLI 3.
  prefs: []
  type: TYPE_NORMAL
- en: Improving our tests in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways in which we can utilize Jest and other testing platforms
    in Vue CLI 3 for a better testing experience. In the next sections, we''ll look
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Watching our unit tests in Vue CLI 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting parameters for our tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing end-to-end tests with Cypress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's begin by working with the `--watch` flag.
  prefs: []
  type: TYPE_NORMAL
- en: Watching our tests in Vue CLI 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `test:unit` command comes with a `--watch` flag. To see it in action, all
    we need to do is go back to the Project tasks page in Vue UI and, with the `test:unit`
    task selected, click on the Parameters button as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ce2cf08-6d56-4f96-9e0c-967d4a04cd8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: The Parameters button inside the test:unit task'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the Parameters button will trigger a dialog with the following two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: Watch files for changes and re-run tests related to changed files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-record every snapshot that fails during this test run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the first option to turn on watch mode. The following option will
    appear right under it:'
  prefs: []
  type: TYPE_NORMAL
- en: Display a notification after each run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This option is available only when watch mode is enabled. Let's enable the Display
    a notification after each run option too, and click Save.
  prefs: []
  type: TYPE_NORMAL
- en: You can set these options inside scripts in `package.json`. The first option
    is `--watch`, and the display a notification option is the `--notify` flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, simply update the scripts key inside your project''s `package.json` to
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see that your task list has now expanded to include another testing
    task: `test:unit-watch`.'
  prefs: []
  type: TYPE_NORMAL
- en: However, even though you can, it's better not to do it like this. It's not a
    best practice and it kind of defeats the purpose of using Vue UI in the first
    place. Still, understanding that this is how it can be done gives us a better
    understanding of what is happening under the hood of the Vue CLI UI.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see if watch mode is working properly by adding a change to the `AnotherComponent.spec.js`
    file. It's enough to just add a space somewhere and save the updates.
  prefs: []
  type: TYPE_NORMAL
- en: Writing end-to-end tests with Cypress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: End-to-end testing is a testing practice in which we test the application flow
    from beginning to end. With end-to-end testing, we simulate a scenario in which
    a user flows through our application from some kind of an entry point to a certain
    outcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an end-to-end test of a web app could include the following flow:'
  prefs: []
  type: TYPE_NORMAL
- en: User opening the URL of the web app in their browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User clicking the login link and logging in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User checking notifications in the web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User logging out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Cypress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll be using Cypress for our end-to-end tests. Cypress works
    great with the Chrome browser. Alternatively, if you'd like to work with a Selenium-based
    tool, you could look at Nightwatch.js at this website: [http://nightwatchjs.org/.](http://nightwatchjs.org/)
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about Cypress, visit the official web site at the following
    URL: [https://www.cypress.io/](https://www.cypress.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you visit the Cypress website, you''ll see it described as:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast, easy, and reliable testing for anything that runs in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dive right in.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Cypress plugin to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add a Cypress plugin to our project with your Vue CLI UI running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the following address in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/plugins/add`'
  prefs: []
  type: TYPE_NORMAL
- en: Next, type `cypress` into the search field, and locate the `@vue/cli-plugin-e2e-cypress` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go through the plugin installation steps just like we did before with the Jest
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once our Cypress plugin is added, we need to commit the changes. Similar to
    how we did it with Jest, we can just commit with a simple message such as `Add
    Cypress plugin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that installing Cypress added a new folder called `e2e` to our `tests`
    folder.  Inside the `e2e` folder, we can find the following subfolders: `plugins`,
    `specs`, and `support`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's inspect the contents of the `package.json` file next.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying updates to package.json made by the Cypress plugin installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s inspect our project''s `package.json` inside VS Code. We''ll notice
    a new entry inside the `scripts` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Also, our `devDependencies` have been updated with the Cypress plugin, which
    we can also see by visiting our Vue UI dashboard and inspecting the installed
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if we click on the Tasks icon, we'll see that the `test:e2e` task has
    been added to the bottom of the tasks list for our project, exactly the same as
    what we saw inside the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we clicked on the `test:e2e` task, the right-hand pane will be updated accordingly,
    with the Run task button ready to be clicked. Clicking the Run task button would
    produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A new Electron-powered window will open on our computer. Working with Cypress
    is easy. As the To help you get started... window tells us, you can run tests
    in the `examples` folder or add your own test files to `cypress/integration`.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the top-right of the Cypress window, you'll see the Run all specs
    button. By default it will run in Chrome (with the version number specified).
    If you click on the dropdown that has Chrome selected, you can switch to Electron.
    Regardless of what option you choose, your tests will be run in a new window,
    either a new Chrome window or a new Electron window.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, our end-to-end Cypress tests will fail, because Cypress is trying
    to run tests on a default Vue scaffold project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/971f01f8-35ae-4c62-8801-adb5dd518409.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: A failing test in Cypress'
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to see these test pass from the get go, you'd need to create a
    brand-new project and set up Cypress `e2e` testing in the configuration. We'll
    look at these different options later in the book. For now, let's update our tests
    so that they pass.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Cypress tests in our Vue app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in VS Code, open the `test.js` file inside the `./tests/e2e/specs/` folder.
    You'll see a `describe` function with two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand Cypress terminology better, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Support-file),
    and'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.cypress.io/guides/references/bundled-tools.html#Mocha.](https://docs.cypress.io/guides/references/bundled-tools.html#Mocha)'
  prefs: []
  type: TYPE_NORMAL
- en: 'While in Jest, we saw the word `test` as the name of a single unit test''s
    function, whereas in Cypress, we see the word `it` being used. The `cy` object
    is the actual Cypress test runner. Let''s look at the following updated code for
    the `test.js` file, and explain how and why it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This time our tests are pass. Notice that we only had to save the updated test
    file in VS Code for the tests to be run automatically. You can navigate to `http://localhost:8000/tasks/`
    and click the `test:e2e` task for more information on the running task as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb9f0ea0-0c56-4be6-b23e-a2b9d57488f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: A screenshot of a passing Cypress test for our Vue app''s homepage'
  prefs: []
  type: TYPE_NORMAL
- en: Also notice that, if you hover over the CONTAINS section in your test results,
    the appropriate part of the served Vue app will be highlighted, a wonderful visual
    cue as to the exact section of our Vue app that is being tested.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed many testing-related topics through the lens of
    the Vue CLI 3\. TDD is a great technique that should be utilized by teams and
    individuals alike, and Vue CLI 3, its UI, and Jest make a wonderful match for
    streamlining this process. Like any other aspect of development with Vue CLI 3,
    a lot of the piping is hidden away from us, which makes for a great coding experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at routing in Vue CLI 3.
  prefs: []
  type: TYPE_NORMAL
