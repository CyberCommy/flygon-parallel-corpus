- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 desktop application development is gaining momentum, and it s no wonder
    if you take into consideration that JavaScript is now the most popular programming
    language on the web. The set of HTML5 features combined with Node.js and the runtime
    API is impressively rich, to say nothing of the countless Node.js modules available
    on GitHub. In addition, HTML5 desktop applications can be distributed across different
    platforms (Window, macOS, and Linux) without any modifications in the code.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to help the reader discover what exciting opportunities
    unlock Node.js-driven runtime (NW.js and Electron) to a JavaScript developer and
    how surprisingly easy it is to catch up on programming specifics in this area.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build and run the examples in this book, you need either Linux or macOS;
    you will also need npm/Node.js. At the time of writing, the author tested the
    examples with the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: npm v.5.2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: node v.8.1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 16.04 LTS, Windows 10, and macOS Sierra 10.12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book has been written for any developers interested in creating desktop
    applications with HTML5\. The first two chapters require essential web-master
    skills (HTML, CSS, and JavaScript) and the basics of Node.js. This part of the
    book includes a crash course on npm, which will be used across the book to build
    and run examples, given that you have experience with the command line in your
    OS (Linux, macOS, or Windows). The next four chapters welcome a minimal experience
    with React. And finally, for the last two chapters, it would be helpful to have
    a basic knowledge of TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Well,
    we can change the locale and trigger the event. What about consuming modules?'
  prefs: []
  type: TYPE_NORMAL
- en: In the `FileList` view, we have the `formatTime` static method that formats
    the passed-in `timeString` for printing. We can make format it in accordance with
    the currently chosen `locale`."
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'New terms and important words are shown in bold. Words that you see on the
    screen, for example, in menus or dialog boxes, appear in the text like this: "The
    menu Show Item contains Folder, Copy, Paste, and Delete."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
