- en: Chapter 4. Starting your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are ready to start developing the framework behind our application!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple PHP framework from scratch - Bones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use Git for source control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add functionality to Bones to handle URL requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build out support for views and layouts, so that we can add a frontend to our
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add code to allow us to handle all of the HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up complex routing and build it into an example application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the ability to use public files and use them with our framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish our code to GitHub, so that we can manage our source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's jump right into it!
  prefs: []
  type: TYPE_NORMAL
- en: What we'll build in this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the rest of this book, we will create a simple social network that is similar
    to Twitter. Let's call it `Verge`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Verge` will allow users to sign up, log in, and create posts. By building
    this application, we''ll jump over the same hurdles that most developers do when
    they build an application, and we''ll learn to rely on CouchDB for some of the
    heavy lifting.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to build Verge, we are going to make a light PHP wrapper that will
    handle the basic routing and HTTP requests that we mentioned in the previous chapter.
    Let's call this framework `Bones`.
  prefs: []
  type: TYPE_NORMAL
- en: Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we are going to build a very lightweight framework called `Bones`
    to run our application. You will probably wonder to yourself *why are we building
    another framework?* It''s a valid question! There are tons of PHP frameworks out
    there such as: Zend framework, Cake, Symfony, and so on. These are all powerful
    frameworks, but they also have a steep learning curve, and it would be impossible
    to touch on each of them in this book. Instead, we''ll create an extremely light
    PHP framework that will help simplify our development but won''t have a lot of
    other bells and whistles. By building this framework, you''ll have a greater understanding
    of HTTP methods and how to build light applications from the ground up. Once you''ve
    developed this application using Bones, it should be easy for you to apply your
    knowledge to another framework, because we''ll be using some pretty standard processes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run into any problems through this chapter or are eager to see the finished
    product, then you can access the full Bones framework on GitHub: [https://github.com/timjuravich/bones](http://https://github.com/timjuravich/bones).
    I''ll also cover an easy way for you to grab all of this code at the end of this
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by setting up our project.
  prefs: []
  type: TYPE_NORMAL
- en: Project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll go through the steps of creating folders for our code
    and make sure that we initialize Git so that our source code can be tracked as
    we add new features to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the directories for Verge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin the setup of our project by creating a directory in the `/Library/WebServer/Documents`
    folder, and name that directory `verge`. This directory will contain all of the
    code for your project. For the sake of brevity, throughout this chapter, we'll
    call `/Library/WebServer/Documents/verge` our **working** directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our working directory, let''s create four new folders for our source
    files to go into:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `classes`. This folder will contain the PHP class objects
    that we'll be using in this project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called `lib`. This folder will contain PHP libraries that our
    application relies on, which, in our case, will be the `Bones` framework and the
    class that will communicate with CouchDB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called `public`. This folder will contain all of our public
    files, such as **Cascading Style Sheets (CSS)** , JavaScript, and images that
    our applications will need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder called `views`. This folder will contain our layout and the
    different pages of our web application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you were to look at your working directory, the end result of this section
    should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — creating the directories for Verge](graphics/3586_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We quickly created some placeholder folders for the organization of the code
    that we'll add throughout the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Source control with Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for us to keep track of our application, our progress, and to allow
    us to roll back if we make mistakes, we need to have source control on our repository
    up and running. We installed Git in [Chapter 2](ch02.html "Chapter 2. Setting
    up your Development Environment"), *Setting Up Your Development Environment*,
    so let's put it to good use. There are a few desktop clients out there that you
    can use, but we'll use the command line for simplicity, so that it works for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — initializing a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git needs to be initialized in the root of each development project so that
    it can keep a track of all of the project files. Let's do this for our newly created
    `verge` project!
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following command to initialize our Git directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Git will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Keep your **Terminal** window open so that you can interact with Git in this
    chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used **Terminal** to initialize our Git repository by using the command `git
    init` in our working directory. Git responded to let us know that everything went
    okay. Now that we have our Git repository set up, we'll need to add each file
    under source control when new ones are created. The syntax for adding a file to
    Git is simple, `git add path_to_file`. You can also add all of the files within
    a directory recursively with a wildcard statement by typing `"git" add .`". In
    most parts of this chapter, we'll be quickly adding files, so we will use `"git
    add .".`
  prefs: []
  type: TYPE_NORMAL
- en: Implementing basic routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start creating `Bones`, let's first look into why we'll need its help.
    Let's start by creating a simple file that will just make sure that our application
    is all set up and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time for action — creating our first file: index.php'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first file we'll create is a file called `index.php`. This file will handle
    all of the requests to our application and eventually will be the main application
    controller that will talk to `Bones`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `index.php` in the working directory, and add the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser, and go to the url: `http://localhost/verge/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `index.php` file will display the following words:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a simple PHP file called `index.php` that simply returns text to
    us at this point. We can access this file only if we directly go to `http://localhost/verge/`
    or `http://localhost/verge/index.php`. However, our goal is that `index.php` will
    be hit for almost every request inside of our working directory (with the exception
    being our `public` files). In order for us to do this, we need to add a `.htaccess`
    file that will allow us to use URL rewriting.
  prefs: []
  type: TYPE_NORMAL
- en: .htaccess files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`.htaccess` files are known as distributed configuration files, and they allow
    Apache configurations to be overridden on a directory basis. If you remember,
    in [Chapter 1](ch01.html "Chapter 1. Introduction to CouchDB"), *Introduction
    to CouchDB* we made sure that we could use the `.htaccess` files by changing some
    lines of code to `Override All`. Most PHP frameworks utilize the `.htaccess` files
    in the same way that we will, so it''s important for you to get familiar with
    this process.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the .htaccess file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for us to handle all requests to a directory, we'll create a `.htaccess`
    file in the working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `.htaccess` in the working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Open the file `index.php` in the working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the code inside of `index.php` to match the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser, go to `http://localhost/verge/test/abc`, and go to `http://localhost/verge/test/123`.
    Notice that the page will respond back to you with the same value that you entered
    at the end of the root URL.![Time for action — creating the .htaccess file](graphics/3586_04_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first created a `.htaccess` file to enable us to do URL rewriting. The first
    line,`<IfModule mod_rewrite.c>`, checks to make sure that we enabled the `mod_rewrite`
    module. This will be `true` because we enabled `mod_rewrite` in our `http.conf`
    file in [Chapter 2](ch02.html "Chapter 2. Setting up your Development Environment").
  prefs: []
  type: TYPE_NORMAL
- en: The next line of the file says `RewriteEngine On`, and it does it exactly what
    you think it does; it turns Apache's `RewriteEngine` on and waits for some conditions
    and rules. Next, we set two `RewriteCond` (rewrite conditions). The first `RewriteCond`
    tells `RewriteEngine` to rewrite URLs if the passed URL does not match the location
    of an existing file (which is what the `f` stands for). The second `RewriteCond`
    tells `RewriteEngine` to rewrite URLs that are not already an existing directory
    (which is what the `-d` stands for). Lastly, we set our `RewriteRule`, which says
    that when a URL is entered for the first value, forward it to the second value
    (target). This `RewriteRule` tells the `RewriteEngine` that any URL that is passed
    to this directory should be forced to go through the index file and passed the
    route to the `index.php` file in the form of a query string named `request`.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, the string is `[QSA, L]`. Let me explain what this means. `QSA`
    means, if there are any query strings added to the request, append it to the rewrite
    target. `L` means, stop trying to find matches, and don't apply any more rules.
  prefs: []
  type: TYPE_NORMAL
- en: You then opened up the `index.php` file and changed the code to output the `request`
    variable. You now know that the route entered into the browser will be passed
    to the `index.php` file in the form of a query string.
  prefs: []
  type: TYPE_NORMAL
- en: With all of this code in place, we tested everything out, and by going to the
    URL `http://localhost/verge/test/abc`, our `index.php` file returned `test/abc`.
    When we changed the URL to `http://localhost/verge/test/123`, our `index.php`
    file returned `test/123` back to us.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking together URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we technically could scrap things together with a bunch of `if`
    statements, allowing our website to serve up different content. For example, we
    could show different content based on the URL, by just adding a few pieces of
    code into `index.php` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this piece of code, if a user went to the URL `http://localhost/verge`,
    their browser would display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, if a user went to `http://localhost/verge/signup`, their browser
    would display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We could extend this way of thinking further and further, by writing a variety
    of `if` statements, stringing our code into one long file, and jumping right into
    programming our application. However, this would be an absolute nightmare to maintain,
    difficult to debug, and is just bad practice, in general.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let's delete all of the code in our `index.php` file and focus on building
    our project the right way. For the rest of this chapter, we'll work on creating
    a simple framework called `Bones`, which will handle some of the heavy lifting
    of requests for us.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the skeleton of Bones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I've mentioned before, `Bones` is an extremely lightweight framework consisting
    of a little over 100 lines of code in all, which resides in one file. In this
    section, we'll begin to form the structure onto which we will build more and more
    functionality in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — hooking up our application to Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by creating the `Bones` library and then connecting our `index.php`
    file to it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `bones.php` inside of the `lib` folder of our working directory
    (`/Library/Webserver/Documents/verge/lib/bones.php`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `index.php` file in our working directory, so
    that we can talk to the newly created `bones.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All that this code is doing is including our `lib/bones.php` file, and that's
    good enough for us right now! Notice that we didn't end the file with a `?>`,
    as you may be accustomed to seeing. The `?>` tag is actually optional, and, in
    our case, leaving it will allow us to reduce the unwanted whitespace and to add
    headers to response later in the code, if we would like.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bones to handle requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To illustrate what we are planning to do with the `Bones` class, let's go through
    a quick example on what we would like to accomplish by the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: If a browser was to hit the URL `http://localhost/verge/signup`, we want `Bones`
    to intercept the call and interpret it as `http://localhost/verge/index.php?request=signup`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Bones` will then look through a list of routes that we''ve defined in our
    `index.php` file and see if there''s a match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is indeed a match, `Bones` will perform a callback to the matching
    function and execute the actions inside of that route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of that was confusing, don't worry. Hopefully it'll start to make sense
    as we slowly build this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the class structure of Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start building out the `Bones` class by adding the following code to
    the `lib/bones.php` file inside our working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created our `Bones` class, added a few `private` and `public` variables,
    and a strange function called `get_instance()`. The private static variable `$instance`,
    mixed with the function `get_instance()`, forms something that is called **The
    Singleton Pattern**.
  prefs: []
  type: TYPE_NORMAL
- en: The Singleton Pattern allows our `Bones` class to not just be a simple class,
    but also to be one object. This means that each time we call our `Bones` class,
    we are accessing a single existing object. But if the object does not exist, it
    will create a new one for us to use. It's a bit of a complex idea; however, I
    hope it starts to make sense as we make use of it down the road.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the basic concept of our class, let's add some functions to
    grab and interpret the route (URL that was passed to `Bones)` each time a new
    request is created. We will then compare the result against each possible route
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating functions to access the route on Bones creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order for us to figure out what route was passed in a request, we''ll need
    to add the following two functions to the `lib/bones.php` file underneath the
    closing bracket of the `get_instance()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this piece of code, we added a function called `__construct()`, which is
    a function that is automatically called each time a class is created. Our `__construct()`
    function then calls another function named `get_route()`, which will grab the
    route (if there is one) from our request query string and return it to the instance's
    `route` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Matching URLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for us to match up the routes of our application, we will need to push
    each possible route through a function called `register`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the register function to match routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `register` function will be one of the most important functions in the
    `Bones` class down the road, but we''ll just get started by adding the following
    code at the end of our `lib/bones.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We started by creating a public static function called `register`. This function
    has two parameters: `$route` and `$callback. $route` contains the route that we
    are attempting to match against the actual route, and `$callback` is the function
    that will be executed if the routes do match. Notice that, at the start of the
    `register` function, we call for our `Bones` instance, using the `static:get_instance()`
    function. This is the Singleton Pattern in action, returning the single instance
    of the `Bones` object to us.'
  prefs: []
  type: TYPE_NORMAL
- en: The `register` function then checks to see if the route that we visited through
    our browser matches the route that was passed into the function. If there is a
    match, our `$route_found` variable will be set to `true`, which will allow us
    to skip looking through the rest of the routes. The `register` function will then
    execute a callback function that will do the work that was defined in our route.
    Our `Bones` instance will also be passed with the callback function, so that we
    can use it to our advantage. If the route is not a match, we will return `false`
    so that we know the route wasn't a match.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now at the end of what we''ll do in `Bones` for now. So, make sure to
    end your class with a closing bracket as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Calling the register function from our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have a basic understanding of what `Bones` is supposed to do, but we're
    missing a function that will tie our `index.php` and `lib/bones.php` files together.
    We'll eventually create four functions that will do this, one for each HTTP method.
    But, for now, let's just create our `get` function.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a get function in our Bones class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a `get` function at the top of the `lib/bones.php` file, right
    after the`<?php` tag and before we define the `Bones` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function lies in the `lib/bones.php` file and is called for each `get`
    route that you have defined in your `index.php` file. This function is a simple
    pass-through function that hands off the route and callback to the `register`
    function of `Bones`.
  prefs: []
  type: TYPE_NORMAL
- en: Are we on the same page?
  prefs: []
  type: TYPE_NORMAL
- en: 'We did a whole lot in this section. Let''s double check that your code matches
    my code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding routes to our application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are finished with our `lib/bones.php` file for now. All we need to do is
    add a few routes to our `index.php` file that call the `get` function that lives
    in the `lib/bones.php` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating routes for us to test against Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up the `index.php` file and add the following two routes so that we can
    test our new code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created two routes for our `Bones` class to handle `/` (which is the
    root URL) and `/signup`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things to notice in the code that we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: Our two `get` routes are now clean, little functions, including our route and
    a function that will act as our callback function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the function is executed, we are using `echo` to display the simple text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a route is matched and a callback is executed from `Bones`, the instance
    of `Bones` is returned as the variable `$app`, which can be used anywhere in the
    callback function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing it out!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're all set to test out our new additions to `Bones!` Open up your browser,
    and go to `http://localhost/verge/`. You'll see the word `Home`. Then direct your
    browser to `http://localhost/verge/signup`, and you'll see the text `Signup!`
  prefs: []
  type: TYPE_NORMAL
- en: While our application is still very basic, I hope you see the strength in adding
    routes in this simple fashion. Feel free to play around and add a few more routes
    before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we started our `lib/bones.php` library and added some simple
    routing. Let's add all of our changes to Git so that we can track our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all of the files that we''ve created in this directory by typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Handling layouts and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to take a break from routes for a bit and add some fun frontend
    functionality. Every application consists of a number of pages which we'll call
    **views**. Each view has a standard layout that these views will populate. Layouts
    are a wrapper for views and may contain links to CSS references, navigation, or
    whatever else you think makes sense to be common to each view.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bones to support views and layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to support views and layouts, we will need to add some additional functionality
    to our `Bones` class.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using constants to get the location of the working directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing that we need to do is create a named constant called `ROOT`,
    which will give us the full location of our working directory. Until now, we haven't
    had to do any extra including of files, but with our layouts and views, it'll
    start to get a bit difficult if we don't add some functionality to get the working
    directory. In order to support this, let's add a simple line of code right at
    the top of our `lib/bones.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This line of code creates a constant named `ROOT` that we can then use throughout
    our code to reference the working directory. `__DIR__` gives us the root of the
    current file (`/Library/Webserver/Documents/verge/lib`). So, we'll want to look
    at one more directory back by appending `/.`. to the path.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — allowing Bones to store variables and the content path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to be able to set and receive variables to our views from `index.php`.
    So, let's add that support into `Bones`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define a `public` array called `$vars` that will allow us to store variables
    from our routes in `index.php` and a string called `$content` that will house
    the path to the view that will be loaded into our layout. We''ll start by adding
    two variables just inside our `lib/bones.php` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In order for us to set variables from our `index.php` file, we'll create a simple
    function called `set` that will allow us to pass an index and a value for a variable
    and save it to the current `Bones` instance. Let's create a function in `lib/bones.php`
    called `set`, right after the `get_route()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added two new variables, `$vars` and `$content`, to our `Bones` class. Both
    of them will be utilized in the next section. We then created a `set` function
    to allow us to send variables to our `Bones` class from our `index.php` file so
    that we can display them in our views.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add the ability for us to call views from `index.php` and have
    them displayed. The function that will house this functionality will be called
    `render`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — allowing our application to display a view by calling it in
    index.php
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start by creating a `public` function, called `render` that accepts
    two arguments. The first is `$view`, which is the name (or path) of the view you
    want to display, and the second is `$layout`, which will define which layout we
    use to show the view. Layout will also have a default value, so that we can keep
    things simple, in order to handle the displaying of views. Add the following code
    to the `lib/bones.php` file, right after the `set` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `render` function that will set the path of the view that we
    want to display in our layout. All of the views will be saved inside the `views`
    directory that we created earlier in this chapter. The code then loops through
    each of the variables set in the instance's `vars` array. For each variable, we
    use a strange syntax `$$`, which allows us to set a variable using the key we
    defined in our array. This will allow us to reference the variables directly in
    our views. Finally, we added a simple `if` statement that checks to see if a `layout`
    file is defined. If `$layout` is not defined, we'll simply return the content
    of the view. If `$layout` is defined, we'll include the layout, which will return
    our view wrapped in the defined layout. We do this so that we can avoid using
    layouts down the road, if we want. For instance, in an AJAX call, we might just
    want to return the view without the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a simple layout file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a simple layout file called `layout.php`. Remember
    that in our `render` function, there is a default value for `$layout`, and that
    is set to `layout`. This means that, by default, `Bones` will look for `views/layout.php`.
    So, let's create that file now.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new file in our `views` directory called `layout.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code in the newly created `views/layout.php:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a very simple HTML layout that will be used in all of our views in
    the application. If you remember, our `render` function in `Bones` uses the path
    set as the `$content` variable that we set in the previous function and also includes
    it, so that we can display the view.
  prefs: []
  type: TYPE_NORMAL
- en: Adding views to our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have all of the pieces in place for views, we just need to add a
    few lines of code to the `index.php` file, so that we can render views.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — rendering views inside of our routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s replace the existing portions of code inside our routes that just echoed
    out text with the following code that will actually use our new framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the root route, we used our new function `set` to pass a variable with the
    key of`'message'` and its contents being`'Welcome Back!'`, and we then told `Bones`
    to render the home view. For the `signup` route, we are just rendering the `signup`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are just about ready to test this new code out, but we need to create the
    actual views so that we can display them.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating two new files in the `views` folder, inside our working directory,
    called `home.php` and `signup.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `views/home.php` file by writing the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `views/signup.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created two simple views that will be rendered by the `index.php` file. The
    line of code inside `views/home.php` that says`<?php echo $message; ?>`, will
    display the variable with the name message that was passed to our `Bones` library
    from our `index.php` file. Test it out!
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser, go to `http://localhost/verge/` or `http://localhost/verge/signup`,
    and you'll see that all of our hard work has paid off. Our layout is now rendering,
    and our views are being displayed. We were also able to pass a variable, called
    `message`, from `index.php` and output the value on our home view. I hope you
    can start to see the strength of what we are adding to `Bones` so far!
  prefs: []
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we added support for layouts and views, which will help us build out
    all of the pages of our application. Let's add all of our changes to Git, so that
    we can track our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all of the files that we''ve created in this directory, by typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Adding support for other HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we''ve been handling `GET` calls, but in a web application, we will
    have to be able to support all of the `HTTP` methods that we have talked about
    in the previous chapter: `GET, PUT, POST`, and `DELETE`.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — retrieving the HTTP method used in a request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have done most of the heavy lifting required to support, capture, and handle
    HTTP requests. We just need to plug in a few extra lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a variable to our `Bones` class, called `$method`, after our `$route`
    variable. This variable will store the `HTTP` method that was performed on each
    request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for us to get the method on each request, we will need to add a line
    of code in our `__construct()` function, named `get_route()`, and save the value
    of the result in our instances variable `$method`. This means that when `Bones`
    is created on each request, it will also retrieve the method and save it to our
    `Bones` instance, so that we can use it down the road. Do this by adding the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the function called `get_method()`, so that our `__construct()`
    function can call it. Let''s add it right after our `get_route()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a variable `$method` to your `Bones` class. This variable is set by
    the function `get_route()`, and returns a value to the instances `$method` variable
    each time a request is made to `Bones` through the `__construct()` method. That
    probably sounds super confusing, but bear with me.
  prefs: []
  type: TYPE_NORMAL
- en: The `get_route()` function uses an array called `$_SERVER` that is created by
    the web server, and allows us to retrieve information on request and execution.
    This simple one liner is saying that if `REQUEST_METHOD` is set in `$_SERVER`,
    then return it, but if `REQUEST_METHOD` is not set for whatever reason, just return
    `GET` for the method to be safe.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — altering the register to support different methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are retrieving the method on each request, we need to alter our
    register function so that we can pass `$method` along with each of our routes
    in order for them to match properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `$method` onto the `register` function in `lib/bones.php` so that we can
    pass a method into the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to update our simple route matching in our register function to
    also check that the passed routes `$method` matches our instance variables `$bones->method`,
    which is the method that actually happened on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a `$method` argument to be passed into our `register` function. We
    then used this `$method` variable in our `register` function by adding it to the
    list of arguments that have to be `true` in order for a route to be considered
    a match. Therefore, if the routes match, but if it's a different `HTTP` method
    than expected, it will be ignored. This will allow you to create routes with the
    same name but act differently based on the method that is passed. Sounds just
    like `REST`, which we talked about in the previous chapter, doesn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to execute the `register` functions, let''s look back at the `get`
    function that we have at the beginning of our `lib/bones.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, it should be pretty easy to see what we're going to do next. Let's
    expand our current `get` function and create three more functions, one for each
    of the remaining HTTP methods, making sure we pass in each method's name in caps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We have added all of the functionality needed in our Bones library to allow
    us to use other HTTP methods, pretty simple right?
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding simple but powerful helpers to Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add two little functions to our `lib/bones.php` file that will help us
    use forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a function called `form` that looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a function called `make_route`. This function will allow our `Bones` instance
    to create clean links so that we can link to other resources in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a simple function called `form` that serves as a wrapper around the
    `$_POST` array, which is an array of variables passed through the `HTTP POST`
    method. This will allow us to collect values after we `POST` them. The next function
    we created is called `make_route`. This function will soon be used everywhere
    to create clean links so that we can link to other resources in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using a form to test our HTTP method support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've added some cool stuff here. Let's move on to test the support of the newly
    added HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the file `verge/views/signup.php`, and add a simple form, similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We set the form's `action` attribute by using `$this->make_route. $this->make_route`
    used our `Bones` instance to make a route that would resolve to our `signup` route.
    We then defined the method as using the `post` method. The rest of the form is
    pretty standard with a label and textbox for `name`, and a `submit` button to
    process the form.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to go in your browser to `http://localhost/verge/signup`, you would
    now see the form, but if you click on the `submit` button, you will be sent to
    a blank page. This is because we haven't yet defined our `post` method in our
    `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `index.php` file, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Let's walk through this piece of code and make sure it's clear what we're doing
    here. We're telling `Bones` to look for the route `/signup` with a `post` method
    being sent to it. Once this route is resolved, the callback will set the value
    of a variable `message` with some text. The text includes the new function we
    created called `$app->form('name')`. This function is grabbing the posted value
    from the form with the attribute `name`. We are then going to tell `Bones` to
    render the home view, allowing us to see the message.
  prefs: []
  type: TYPE_NORMAL
- en: Testing it out!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's try all of this out now!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your browser, and go to: `http://localhost/verge/signup`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser should show the following:![Testing it out!](graphics/3586_04_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your name (I entered `Tim)`, and click on **Submit**.![Testing it out!](graphics/3586_04_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we added support for all of the HTTP methods, which will allow
    us to handle any type of requests. Let's add all of our changes to Git, so that
    we can track our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Adding support for complex routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our framework is technically all ready for us to start building on top. However,
    we don't have enough support to match and handle complex routes. Since most applications
    will need this, let's quickly add it.
  prefs: []
  type: TYPE_NORMAL
- en: Handling complex routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, in the `index.php` file, we'll want to be able to define a route
    for a user profile. This route might be `/user/:username`. In this case, `:username`
    will be a variable that we can then access. So, if you went to the URL `/user/tim`,
    you could access the username `tim` by using `Bones` to grab that section of the
    URL, and return its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding another variable and another call in our `__construct`
    function to our `lib/bones.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We just added two variables to our `Bones` instance called `$route_segments`
    and `$route_variables. $route_segments` is set each time the `Bones` object is
    created using `__construct()`. The `$route_segments` array splits `$route` into
    usable segments by splitting them on a slash (/). This will allow us to examine
    the URL that the browser sends to `Bones`, and then decide if the route matches.
    `$route_variables` will be a library of variables that were passed in through
    the route, and it will enable us to use the `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start doctoring up the `register` function so that we can handle
    these special routes. Let's remove all of the code that's in there, and slowly
    add some code back.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We added an `if` statement that checked to see if the route has already matched.
    If it has, we just ignore everything else in the `register` function. Then, we
    added `$url_parts`. This will split up the route that we pass into the register
    function, and will help us compare this route against the actual route the browser
    hit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll be closing the `if` statement and register function when we finish up
    this section; don't forget to do that!
  prefs: []
  type: TYPE_NORMAL
- en: Let's start to compare `$bones->route_segments`, which is the route that the
    browser hit, against `$url_parts`, which is the route that we are trying to match.
    First, let's check to make sure that `$route_segments` and `$url_parts` are the
    same length. This will make sure that we save time by not digging deeper into
    the function, since we already know it doesn't match.
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code into our `register` function in `lib/bones.php:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's add a `for` loop inside the `if` statement that will loop each of
    the `$url_parts`, and try to match it against `route_segments`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In order to identify variables, we'll check for the existence of a colon (:).
    This represents the fact that this segment contains a variable value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's add a line of code that will take the value of the segment and save
    it into our `$route_variables` array, allowing us to use it later. Just because
    we found one matching variable, it does not mean that the whole route is a match,
    so we aren't going to set `$matched = true` just yet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Let's break the line of code that we just added down. The second part, `$bones->route_segments[$key]`,
    is grabbing the value of the segment that was passed to the browser and has the
    same index as the segment we are currently looping through.
  prefs: []
  type: TYPE_NORMAL
- en: Then, `$bones->route_variables[substr($part, 1)]` saves the value into the `$route_variables`
    array with the index set to the `$part` value and then uses `substr` to make sure
    that we don't include the colon in the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'This piece of code is a bit confusing. So, let''s just go through a quick use
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser, and enter the URL `/users/tim`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This register route starts checking the route `/users/:username`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$bones->route_segments[$key]` would return `tim`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$bones->route_variables[substr($part, 1)]` would save the value with the index
    username, enabling us later retrieve the value `tim`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's finish off this if statement by inspecting the segments that do not
    contain route variables (the `else` part of the `if` statement). In this area,
    we are going to check to make sure that the segment we are checking matches the
    segment that was passed from the URL of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The code we just added checks to see if the value we were looping through `$part`
    matches the parallel segment in `$route_segments`. We then check to see if we've
    already marked this route as not matching. This shows us that we've already marked
    it as not matching in a previous segment check. If the routes do not match, we
    are going to set `$matched = false`. This will tell us that the URLs do not match,
    and we can ignore the rest of the route.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the final piece to the routing matching puzzle. This statement will
    look quite a bit similar to our old matching statement, but it will actually be
    quite a bit cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code checks to make sure that our route matches in the matching
    statements above, by looking at the `$matched` variable. Then, we check to see
    that the HTTP method matches the route we check. If there is no match, we return
    `false` and exit out of this function. If there is a match, we set `$route_found
    = true`, and then perform a callback on the route, which will execute the code
    inside of the route defined in the `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's just close out the `if $route_found` statement and the `register`
    function by adding the closing brackets to end this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We added a lot of code in the past section. So, check to make sure your code
    matches up with what I have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Accessing route variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are saving the route variables into an array, we need to add a
    function called `request` into the `lib/bones.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This function accepts a variable called `$key` and returns the value of the
    object in our `route_variables` array by returning the value with that same key.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more complex routes to index.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've done a lot of hard work. Let's test to make sure that it all went smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a quick route to `index.php` to test out the route variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: We added a route with a route variable `message`. When the route was found and
    executed through the callback, we set a variable `message` to the value of the
    route variable message. Then, we rendered the home page, just as we've done a
    few times before.
  prefs: []
  type: TYPE_NORMAL
- en: Testing it out!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you open your browser and access the URL `http://localhost/verge/say/hello`,
    the browser will display: `hello`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you change the value to anything different, it will display the same value
    right back to you.
  prefs: []
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section added more detailed route matching and allowed us to have route
    variables in our URLs. Let's add all of our changes to Git so that we can track
    our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Adding support for public files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of developing web applications is the ability to use CSS and
    JS files. Currently, we really don't have a good way to use and display them.
    Let's change that!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — altering .htaccess to support public files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to alter the `.htaccess` file, so that the request for the `public`
    files is not passed to the `index.php` file, but instead goes into to the `public`
    folder and finds the requested resource.
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening up the .htaccess file that's in the root of our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added `RewriteRule` to bypass our*"catch* all" rule that directs all
    requests if it's a `public` file. We then simplify the route to allow the URL
    to resolve to `/css` and `/js` instead of `/public/css` and `/public/js`.
  prefs: []
  type: TYPE_NORMAL
- en: We're ready to use public files. We just need to implement them, which should
    be just as easy as setting it up.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a stylesheet for the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by adding a stylesheet to change the look of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `views/layout.php`. This file currently drives the layout for all of the
    pages in our project. We just need to add code to include our stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file named `master.css`, and place it in our working directory's
    `public/css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a quick piece of code to `public/css/master.css` that will display a different
    color background, so that we can test that this all works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a reference to a new stylesheet for our application called `master.css`.
    We used the standard markup to include a stylesheet, and used one of the functions
    of `Bones, make_route`, to properly create the path to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test to make sure our stylesheet is now being displayed properly.
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser, and go to `http://localhost/verge/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser should show the following:![What just happened?](graphics/3586_04_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the background color of our page has changed to grey, showing that
    the stylesheet has kicked in!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding changes to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we added support for public files such as stylesheet, JavaScript,
    and images. We then tested it out by creating a `master.css` file. Let's add all
    of our changes to Git, so that we can track our progress.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Publishing your code to GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've created our framework and all of the underlying code, we can
    push our code to any service provider that supports Git. In this book, we'll use
    **GitHub**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create an account on GitHub by going to: [https://github.com/plans](http://https://github.com/plans).
    GitHub has a variety of plans that you can choose from, but I recommend you pick
    the free account, so that you don''t have to pay anything at this time. If you
    already have an account, you can log in and skip the creation of a new account.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing your code to GitHub](graphics/3586_04_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Create a free account**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to note that, by choosing a free account, all of your repositories
    will be `public`. This means that anyone will be able to see your code. This is
    fine for now, but as you get further in development, you might want to register
    for a paid account, so that it's not publicly available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing your code to GitHub](graphics/3586_04_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will be shown a quick signup form. Fill it out completely, and click on
    **Create an account** when you are done.
  prefs: []
  type: TYPE_NORMAL
- en: With your account created, you will be shown your account dashboard. On this
    screen, you will see any activity on your account or repositories that you are
    watching. Since we do not yet have any repositories, we should start by clicking
    on **New Repository**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing your code to GitHub](graphics/3586_04_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Create A New Repository** page will allow you to make a new repository
    for your code to live in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing your code to GitHub](graphics/3586_04_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Complete the rest of this form by filling in each field.
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Name:** `verge`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description:** `A social network called verge built using Bones`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage URL:** You can leave this blank for now'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Create Repository**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your repository is now created and ready for you to push your code to. All you
    need to do is run a few statements in **Terminal**.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Add GitHub as your remote repository by entering the following command and
    replacing **username** with your GitHub username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Push your local repository to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Git will return a bunch of text and will stop when it's complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If refresh the URL of your Git repository on [https://github.com](https://github.com)
    (my URL is [https://github.com/timjuravich/verge](https://github.com/timjuravich/verge)),
    you will see all of your files, and if you click on **history** you will see all
    of the changes that you have added in each section as we've gone through this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing your code to GitHub](graphics/3586_04_045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you start adding more code, you have to manually push your code to GitHub
    each time by performing the command `git push origin master`. We'll continue to
    add to this repository as we go through this book.
  prefs: []
  type: TYPE_NORMAL
- en: Get complete code from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If somewhere along the way you got lost, or weren't able to get everything working
    exactly like it should, you can easily clone Bones from a Git repository from
    GitHub, and you'll have a fresh copy with all of the changes we've made in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the repository to your local machine by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Git will grab all of the files from GitHub, and move them to your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have done a tremendous amount of work in this chapter! We have:'
  prefs: []
  type: TYPE_NORMAL
- en: Created a PHP framework from scratch to handle web requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added functionality for clean URLs, route variables, HTTP method support, a
    simple view and layout engine, and a system to display `public` files such as
    stylesheets, JavaScript, and images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tested each part our framework with our browser to make sure we could access
    our changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Published our code to GitHub so that we can see our changes and manage our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get ready! In the next chapter, we're going to dive headfirst into connecting
    our newly created application to CouchDB.
  prefs: []
  type: TYPE_NORMAL
