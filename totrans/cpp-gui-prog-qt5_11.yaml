- en: Implementing a Graphics Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt provides us with low-level graphics rendering using the `QPainter` class.
    Qt is capable of rendering both bitmap and vector images. In this chapter, we
    will learn how to draw shapes using Qt, and finally, create a paint program of
    our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing vector shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving vector images to an SVG file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a paint program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Drawing vector shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will learn how to render vector graphics on our
    Qt application using the QPainter class.
  prefs: []
  type: TYPE_NORMAL
- en: Vector versus bitmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two types of format in computer graphics—bitmap and vector. Bitmap
    images (also known as raster images) are images that are stored as a series of
    tiny dots called **pixels**. Each pixel will be assigned a color and gets displayed
    on screen exactly how it's stored—a one-to-one correspondence between the pixels
    and what is displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, vector images are not based on bitmap patterns but rather
    use mathematical formulas to represent lines and curves that can be combined to
    create geometrical shapes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main characteristics of both formats are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitmap:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually a larger file size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cannot be enlarged into a higher resolution as the image quality will be affected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to display complex images with many colors, such as photographs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vector:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very small in file size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics can be resized without affecting the image quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only a limited amount of color can be applied to each shape (single color, gradient,
    or pattern)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex shapes require high-processing power to be generated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The diagram here compares bitmap and vector graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94527953-3456-480e-92b6-2303f304d7c4.png)'
  prefs: []
  type: TYPE_IMG
- en: We will focus on learning how to draw vector graphics using Qt in this section,
    but we will also cover bitmap graphics later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing vector shapes using QPainter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create another Qt project by going to File | New File or Project. Then
    select Qt Widget Application under the Application category. After the project
    has been created, open up `mainwindow.h` and add in the `QPainter` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we also declare a virtual function called `paintEvent()`, which
    is a standard event handler in Qt that gets called whenever there is something
    that needs to be painted, be it a GUI update, a window resize, or when the `update()`
    function is being called manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.cpp` and add the `paintEvent()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you build the program now, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24aed423-bb6e-4adc-b33f-3804ca1972c2.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding code is really long. Let's break it down, so it's easier for you
    to understand. Whenever the `paintEvent()` is called (usually it will be called
    once when the window needs to be drawn), we call `QPainter::begin()` to tell Qt
    we're about to draw something, and we call `QPainter::end()` when we're done.
    Therefore, the code that draws graphics will be contained within `QPainter::begin()`
    and `QPainter::end()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we drew was a straight line, which is quite simple – just
    call `QPainter::drawLine()` and insert the start point and end point values to
    the function. Do note that the coordinate system used by Qt is in pixel format.
    Its origin starts from the top-left corner of the application window and increases
    to the right and bottom directions, depending on the *x* and *y* values. The increment
    of the *x* value moves the position to the right direction, while the increment
    of the *y* value moves the position to the bottom direction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, draw a rectangle that has a hatching pattern within the shape. This time,
    we called `QPainter::setBrush()` to set the pattern, before calling `drawRect()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we drew an elliptical shape with a dash-dot outline and hatching
    pattern within the shape. Since we have already set the pattern in the previous
    step, we don't have to do it again. Instead, we use the QPen class to set the
    outline style before calling `drawEllipse()`. Just remember that in Qt's terms,
    a brush is used to define the inner color or pattern of a shape, while a pen is
    used to define the outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next two shapes are basically similar to the previous ones; we only changed
    different colors and patterns so that you can see the distinctions between them
    and the previous examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drawing text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additionally, you can also draw text using the `QPainter`class. All you need
    to do is to call `QPainter::setFont()` to set the font properties before calling
    `QPainter::drawText()`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `setFont()` function is optional as you will get a default font if you
    don''t specify it. Once you''re done, build and run the program. You should see
    the word Hello World! displayed in the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69667eda-dc36-4753-be48-1c8ac3a0143f.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see here, the vector shapes are basically generated by Qt in real
    time, which looks perfectly fine regardless of how you rescale the window and
    change its aspect ratio. If you're rendering a bitmap image instead, its visual
    quality may get degraded when its rescaled along with the window or changed in
    its aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: Saving vector images to an SVG File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beside drawing vector graphics, Qt allows us to save these graphics into a vector
    image file, called the **SVG** (**Scalable Vector Graphics**) file format. The
    SVG format is an open format used by a lot of software, including web browsers
    to display vector graphics. In fact, Qt can also read SVG files and render them
    on screen, but we'll skip that for now. Let's check out how we can save our vector
    graphics to an SVG file!
  prefs: []
  type: TYPE_NORMAL
- en: This example continues from where we left it in the previous section. Therefore,
    we don't have to create a new Qt project and can just stick to the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add a menu bar to our main window if it doesn''t already have
    one. Then, open `mainwindow.ui`, and in the form editor, right-click on the MainWindow
    object on the hierarchy window and select Create Menu Bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6041e5ce-79df-4fd0-8b7f-0308f37da1b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re done, add File to the menu bar, followed by Save as SVG underneath
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22dbdd71-1359-46bb-8a7e-6537dc52034e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to the Action Editor at the bottom and right-click on the menu option
    we just added and select Go to slot...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6fe895f-60a5-4fd8-9328-d937ea068f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A window will pop up and ask you to pick a signal. Choose triggered() and click
    OK. A new slot function will be created for you in `mainwindow.cpp`. Before we
    open up `mainwindow.cpp`, let''s open up our `project file`(`.pro`) and add the
    following `svg` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `svg` keyword tells Qt to add relevant classes to your project that can
    help you to handle the SVG file format. Then, we also need to add two more headers
    to our `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.cpp` and add the following code to the slot
    function we just added in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we used `QFileDialog` to let the users choose where they
    want to save their SVG file. Then, we used the `QSvgGenerator` class to export
    the graphics into an SVG file. Finally, we called the `paintAll()` function, which
    is a custom function we are going to define in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, we need to modify the existing `paintAll()` method and put our rendering
    code into it. Then, pass the `QSvgGenerator` object into the function input as
    the paint device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, our `paintEvent()` now simply looks like this in `mainwindow.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The procedure here might seem a little confusing, but what it does is basically
    call the `paintAll()` function to draw all the graphics once when the window is
    being created, and then you call `paintAll()` again when you want to save the
    graphics to an SVG file.
  prefs: []
  type: TYPE_NORMAL
- en: The only difference is the paint device – one is the main window itself, which
    we use as the drawing canvas, and for the latter one we will pass the `QSvgGenerator` object
    as the paint device, which will save the graphics into an SVG file instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the program now, click File | Save SVG File, you should be able
    to save the graphics into an SVG file. Try and open up the file with the web browser
    and see what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/982756a6-c52f-45d4-ab97-f9429e05366c.png)'
  prefs: []
  type: TYPE_IMG
- en: It seems like my web browser (Firefox) does not support the hatching pattern,
    but other things turn out to be fine. Since vector graphics are generated by the
    program and the shapes are not stored in the SVG file (only the mathematical formula
    and its variables are stored), you may need to make sure the features that you
    use are supported by the user's platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to create our own paint program and draw
    bitmap images using it!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a paint program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will move over to the realm of pixels and learn
    how to create a paint program using Qt. Users will be able to express their creativity
    by using different sizes and colors of the brush to draw pixel images!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Again, for this example, we will create a new Qt Widget Application. After
    that, open up `mainwindow.ui` and add a menu bar to the main window. Then, add
    the following options to the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c4c1e46-259b-4888-a009-0a1ddbbac18c.png)'
  prefs: []
  type: TYPE_IMG
- en: We have three menu items on the menu bar—File, Brush Size, and Brush Color.
    Under the File menu are functions for saving the canvas into a bitmap file, as
    well as clearing the entire canvas. The Brush Size category contains different
    options for the brush size; last but not least, the Brush Color category contains
    several options for setting the brush color.
  prefs: []
  type: TYPE_NORMAL
- en: You can go for something more *paint-like* or *Photoshop-like* for the GUI design,
    but we will use this for now for the sake of simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re done with all that, open up `mainwindow.h` and add the following
    headers on top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we also declare a few virtual functions, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides the `paintEvent()` function which we used in the previous example,
    we can also add a few more for handling mouse events and window resize events.
    Then, we also add the following variables to our `MainWindow` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, let''s open up `mainwindow.cpp` and  start with the class constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We need to first create a `QImage` object, which acts as the canvas, and set
    its size to match our window size. Then, we set the default brush color to black
    and its default size to `2`. After that, we will look at each of the event handlers
    and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the `paintEvent()` function, which we also used
    in the vector graphics, example. This time, all it does is call `QPainter::drawImage()`
    and render the `QImage` object (our image buffer) on top of our main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will look at the `resizeEvent()` function, which gets triggered whenever
    the main window is being resized by the user. To avoid image stretching, we must
    resize our image buffer to match the new window size. This can be achieved by
    creating a new `QImage` object and setting its size the same as the resized main
    window, then copying the previous QImage's pixel information and placing it at
    the exact same spot on the new image buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that your image will be cropped if the window size is smaller than
    the drawing, but at least the canvas will not be stretched and distort the image
    when the window is resized. Let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will look at the mouse event handlers, which we use to apply colors
    on the canvas. First, the `mousePressEvent()` function, which will be triggered
    when we start pressing our mouse button (left mouse button in this case). We are
    still not drawing anything at this point, but set the drawing Boolean to `true`
    and save our cursor position to the `lastPoint` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, here is the `mouseMoveEvent()` function, which will be called when the
    mouse cursor is moved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we check if indeed we are moving the mouse while holding
    the left mouse button. If we are, then we draw a line from the previous cursor
    position to our current cursor position. Then, we save the current cursor position
    to the `lastPoint` variable and call `update()` to notify Qt to trigger the `paintEvent()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when we release the left mouse button, the `mouseReleaseEvent()` will
    be called. We simply set the drawing variable to `false`, and we''re done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we build the program and run it now, we should be able to start drawing
    something on our little paint program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89598a8c-02fa-4d93-9868-37aa3a30d6f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even though we can draw something now, it''s all the same brush size and with
    the same color all the time. That''s a little boring! Let''s right-click on each
    of the options on the Brush Size category in the main menu and select Go to slot...,
    then pick the triggered() option and then press OK. Qt will then create the slot
    functions accordingly for us, and what we need to do within these functions is
    basically change the brushSize variable, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The same goes for all the options under the Brush Color category. This time,
    we set the `brushColor` variable accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you build and run the program again, you will be able to draw your images
    with a variety of settings for your brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9b9ff12-8980-45c0-8cf2-ed3f9eaab8fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Other than that, we can also add an existing bitmap image to our canvas so
    that we can draw on top of it. Let''s say I have a penguin image in the form of
    a PNG image (called `tux.png`), we can then add the following code to the class
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code basically opens up the image file and moves it to position
    100 x 100 before drawing the image onto our image buffer. Now we can see a penguin
    on the canvas whenever we start the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1eb1fc12-4d31-4fd6-be34-8c5c174ff48d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will look at the Clear option under File. When the user clicks on
    this option on the menu bar, we use the following code to clear the entire canvas
    (including the penguin) and start all over again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, when the user clicks on the Save option under File, we open up a file
    dialog and let the users save their artwork into a bitmap file. In the following
    code, we filter out the image formats and only allow the users to save PNG and
    JPEG formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it, we have successfully created a simple paint program from scratch
    using Qt! You may even combine the knowledge learned from this chapter with the
    previous chapter to create an online collaborative whiteboard! The only limitation
    is your creativity. Lastly, I would like to say thank you to all the readers for
    creating the following masterpiece, using our newly created paint program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d43a36a-906f-4b53-8e78-f4a72b9416c6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to draw vector and bitmap graphics, and
    subsequently we created our very own paint program using Qt. In the following
    chapter, we will look into the aspects of creating a program that transfers and
    stores our data on to the cloud.
  prefs: []
  type: TYPE_NORMAL
