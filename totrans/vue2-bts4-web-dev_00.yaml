- en: Chapter 1. Please Introduce Yourself – Tutorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。请介绍你自己 - 教程
- en: Hello, user
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，用户
- en: Hello dear reader, my name is Olga. Would you like to introduce yourself as
    well? Open [https://pleaseintroduceyourself.xyz/](https://pleaseintroduceyourself.xyz/)
    and leave a message for me and the other readers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你好亲爱的读者，我的名字是Olga。你也想介绍一下自己吗？打开[https://pleaseintroduceyourself.xyz/](https://pleaseintroduceyourself.xyz/)给我和其他读者留言。
- en: 'The page itself doesn''t look like anything special. It''s just a web page
    that allows users to write a message, and then, this message is immediately displayed
    along with the other users'' messages in a reverse chronological order:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 页面本身看起来并不特别。它只是一个允许用户写消息的网页，然后，这条消息立即与其他用户的消息一起以倒序显示：
- en: '![Hello, user](../images/00002.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![你好，用户](../images/00002.jpeg)'
- en: The please introduce yourself page
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请介绍你自己页面
- en: Do you want to know how long it took me to create this page? It took me around
    half an hour, and I am not only talking about writing the HTML markup or reversing
    the order of the messages but also about the database setup, deployment, and hosting.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你想知道我创建这个页面花了多长时间吗？大约花了我半个小时，我不仅指的是编写HTML标记或者倒序排列消息，还包括数据库设置、部署和托管。
- en: You probably noticed that the very first message never changes, and it's actually
    my message where I wrote that I love to learn and teach. This is indeed true.
    That's why I will devote this chapter to teaching you how to create the exact
    same page in just 15 minutes. Are you ready? Let's go!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到第一条消息从未改变，实际上这是我的消息，我写道我喜欢学习和教学。这是真的。这就是为什么我会把这一章节专门用来教你如何在短短15分钟内创建完全相同的页面。你准备好了吗？让我们开始吧！
- en: Creating a project in the Firebase console
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Firebase控制台中创建一个项目
- en: If you still don't have a Google account but you really want to continue with
    this tutorial, then well, I am really sorry, but you will have to create one this
    time. Firebase is a service powered by Google, so a Google account is more than
    required.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有谷歌账号，但是你真的想继续这个教程，那么，很抱歉，你这次必须创建一个。Firebase是由谷歌提供的服务，所以谷歌账号是必须的。
- en: 'If you already have your account, log in to the Firebase console:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有账号，请登录Firebase控制台：
- en: '[https://console.firebase.google.com/](https://console.firebase.google.com/).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://console.firebase.google.com/](https://console.firebase.google.com/)。'
- en: 'Let''s start by creating your new Firebase project. Click on the **Add project**
    button. Give it a meaningful name and select your country from the list. Once
    you are done, click on **CREATE PROJECT**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建你的新Firebase项目。点击**添加项目**按钮。给它一个有意义的名字，并从列表中选择你的国家。完成后，点击**创建项目**：
- en: '![Creating a project in the Firebase console](../images/00003.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![在Firebase控制台中创建一个项目](../images/00003.jpeg)'
- en: Create a project using the Firebase console
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase控制台创建一个项目
- en: You're done! Now, you can use the Firebase-powered backend for your application,
    including a real-time database, authentication mechanism, hosting, and analytics.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！现在，你可以使用Firebase后端为你的应用程序提供支持，包括实时数据库、认证机制、托管和分析。
- en: Adding a first entry to the Firebase application database
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Firebase应用程序数据库添加第一个条目
- en: 'Let''s add the first database entry. Click on the **Database** tab on the left-hand
    side. You should see a dashboard similar to this one:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第一个数据库条目。点击左侧的**数据库**选项卡。你应该看到类似这样的仪表板：
- en: '![Adding a first entry to the Firebase application database](../images/00004.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![向Firebase应用程序数据库添加第一个条目](../images/00004.jpeg)'
- en: Real-time database on the Firebase project dashboard
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase项目仪表板上的实时数据库
- en: 'Let''s add an entry called `messages` and the very first message as a key-value
    object containing `title`, `text`, and `timestamp` by clicking on the plus sign:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击加号来添加一个名为`messages`的条目，以及作为键值对象包含`title`、`text`和`timestamp`的第一条消息：
- en: '![Adding a first entry to the Firebase application database](../images/00005.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![向Firebase应用程序数据库添加第一个条目](../images/00005.jpeg)'
- en: Adding the first value to the Firebase real-time database
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 向Firebase实时数据库添加第一个值
- en: 'Click on the **ADD** button, and your database will persist the added entry.
    Add as many message entries as you wish or leave it like that. Now, for the sake
    of simplicity, let''s change the rules of our database and make it readable and
    writable for everyone. Beware! Never do this for something in production for public
    usage. In this example, we just want to test some Firebase features, but your
    future applications must be smart and secure. Click on the **RULES** tab and type
    the following rules in the opened text area:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加**按钮，您的数据库将保留添加的条目。添加尽可能多的消息条目，或者保持原样。现在，为了简单起见，让我们改变我们数据库的规则，使其对每个人都可读可写。注意！不要为公共使用的生产环境做这个操作。在这个例子中，我们只是想测试一些Firebase功能，但是您未来的应用程序必须是智能和安全的。点击**规则**选项卡，在打开的文本区域中输入以下规则：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, your **RULES** tab now looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您的**规则**选项卡现在看起来是这样的：
- en: '![Adding a first entry to the Firebase application database](../images/00006.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![向Firebase应用程序数据库添加第一个条目](../images/00006.jpeg)'
- en: Rules tab after changing the rules
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更改规则后的规则选项卡
- en: Click on the **PUBLISH** button and you're done! Now, it would be interesting
    to start using this data within our application. However, first we have to create
    this application and connect it to our project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**发布**按钮，您就完成了！现在，开始在我们的应用程序中使用这些数据将会很有趣。但是，首先我们必须创建这个应用程序，并将其连接到我们的项目中。
- en: Scaffolding a Vue.js application
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建Vue.js应用程序
- en: In this section, we will create a *Vue.js* application and connect it to the
    Firebase project that we created in the previous step. Make sure you have *Node.js*
    installed on your system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个*Vue.js*应用程序，并将其连接到我们在上一步中创建的Firebase项目。确保您的系统上已安装*Node.js*。
- en: 'You must also install Vue.js. Check out the instructions page from the official
    Vue documentation at [https://vuejs.org/v2/guide/installation.html](https://vuejs.org/v2/guide/installation.html).
    Alternatively, simply run the `npm install` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须安装Vue.js。请查看官方Vue文档的说明页面[https://vuejs.org/v2/guide/installation.html](https://vuejs.org/v2/guide/installation.html)。或者，只需运行`npm
    install`命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, everything is ready to start scaffolding our application. Go to the folder
    where you want your application to reside and type the following line of code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切都准备好开始搭建我们的应用程序了。转到您希望应用程序驻留的文件夹，并输入以下代码行：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will ask you several questions. Just choose the default answer and hit *Enter*
    for each of them. After the initialization, you are ready to install and run your
    application:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它会问您几个问题。只需选择默认答案，然后对每个问题按*Enter*。初始化后，您就可以安装和运行您的应用程序了：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If everything is fine, the following page will automatically open in your default
    browser:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，以下页面将自动在您的默认浏览器中打开：
- en: '![Scaffolding a Vue.js application](../images/00007.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![搭建Vue.js应用程序](../images/00007.jpeg)'
- en: Default Vue.js application after installing and running
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和运行后的默认Vue.js应用程序
- en: If not, check the Vue.js official installation page again.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是，请再次检查Vue.js官方安装页面。
- en: Connecting the Vue.js application to the Firebase project
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Vue.js应用程序连接到Firebase项目
- en: 'To be able to connect your application to the Firebase project, you must install
    *Firebase* and *VueFire*. Run the `npm install` command while being in the root
    directory of your new application:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够将您的应用程序连接到Firebase项目，您必须安装*Firebase*和*VueFire*。在您的新应用程序的根目录中运行`npm install`命令：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, you can use Firebase''s powerful features inside your application. Let''s
    check if it worked! We just have to do the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在应用程序内部使用Firebase强大的功能。让我们检查一下是否成功！我们只需执行以下操作：
- en: Import Firebase
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入Firebase
- en: Create a `config` object containing the Firebase app ID, project domain, database
    domain, and some other stuff needed to connect it to our project
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含Firebase应用程序ID、项目域、数据库域和连接到我们项目所需的其他一些内容的`config`对象
- en: Write the code that will use the Firebase API and the created `config` file
    to connect to the Firebase project.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写将使用Firebase API和创建的`config`文件连接到Firebase项目的代码。
- en: Use it
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用它
- en: 'Where do we get the necessary information for the configuration of our Firebase
    instance? Go to the Firebase console, click on the cog to the right of the **Overview**
    tab, and select **Project Settings**. Now, click on the **Add Firebase to your
    web app** button:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从哪里获取配置我们的Firebase实例所需的信息？转到Firebase控制台，单击**概述**选项卡右侧的齿轮图标，然后选择**项目设置**。现在，单击**将Firebase添加到您的网络应用**按钮：
- en: '![Connecting the Vue.js application to the Firebase project](../images/00008.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![将Vue.js应用程序连接到Firebase项目](../images/00008.jpeg)'
- en: Click on the Add Firebase to your web app button
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**将Firebase添加到您的网络应用**按钮
- en: 'A popup with all the information we need will open:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将打开一个包含我们所需所有信息的弹出窗口：
- en: '![Connecting the Vue.js application to the Firebase project](../images/00009.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![将Vue.js应用程序连接到Firebase项目](../images/00009.jpeg)'
- en: All the information needed for the config object is here
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的配置对象的所有信息都在这里
- en: 'OK, now, just leave this popup open, go to your Vue application, and open the
    `main.js` file that resides in the `src` directory of your application. Here,
    we need to tell our Vue application that it will use VueFire. In this way, we
    will be able to use all the features provided by Firebase inside our application.
    Add the following lines to the import section of the `main.js` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在，只需保留此弹出窗口打开，转到您的Vue应用程序，并打开位于应用程序的`src`目录中的`main.js`文件。在这里，我们需要告诉我们的Vue应用程序它将使用VueFire。这样，我们就能在应用程序内部使用Firebase提供的所有功能。将以下行添加到`main.js`文件的导入部分：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Great! Now, open the `App.vue` file. Here, we will import Firebase and initialize
    our Firebase application inside the Vue application. Add the following lines of
    code inside the `<script>` tags:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，打开`App.vue`文件。在这里，我们将导入Firebase并在Vue应用程序内初始化我们的Firebase应用程序。在`<script>`标签内添加以下代码行：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Copy what's needed for the `config` object information from the popup that we
    opened in the previous step.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们在上一步中打开的弹出窗口中复制`config`对象信息所需的内容。
- en: 'Now, we will obtain the reference to our messages database object. It is pretty
    simple using the Firebase API:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将获取到我们的消息数据库对象的引用。使用Firebase API非常简单：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''re almost done. Now, we just have to export the `messages` object in the
    Vue data object so that we are able to use it inside the template section. So,
    inside the `export` section, add an entry with the `firebase` key and point `messages`
    to `messagesRef`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了。现在，我们只需在Vue数据对象中导出`messages`对象，以便我们能够在模板部分内使用它。因此，在`export`部分内，添加一个带有`firebase`键的条目，并将`messages`指向`messagesRef`：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, inside the `<template>` tag, we will use a `v-for` directive to iterate
    through the `messages` array and print all the information about each message.
    Remember that each message is composed of `title`, `text`, and `timestamp`. So,
    add the following `<div>` to the template:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`<template>`标签内，我们将使用`v-for`指令来遍历`messages`数组并打印有关每条消息的所有信息。请记住，每条消息由`title`、`text`和`timestamp`组成。因此，请在模板中添加以下`<div>`：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the end, your `App.vue` component will look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您的`App.vue`组件将如下所示：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you had chosen the default linter settings on the app initialization, the
    code that you will copy from Firebase and paste into your application will not
    pass linter. That's because the default linter settings of Vue-cli initialization
    would require the use of single quotes and no use of semicolon at the end of the
    line. By the way, *Evan You* is particularly proud of this no semicolon rule.
    So, bring him this pleasure; remove all the semicolons from the copied code and
    replace the double quotes with single quotes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在应用程序初始化时选择了默认的代码检查设置，那么您从Firebase复制并粘贴到应用程序中的代码将无法通过代码检查。这是因为Vue-cli初始化的默认代码检查设置要求使用单引号，并且行尾不使用分号。顺便说一下，*Evan
    You*特别自豪于这个不使用分号的规则。所以，请让他高兴一下；从复制的代码中删除所有分号，并将双引号替换为单引号。
- en: 'Aren''t you curious to check out the page? If you are not running your application
    already, switch inside the application folder and run it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您难道不好奇去查看页面吗？如果您还没有运行应用程序，请切换到应用程序文件夹并运行它：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I am pretty sure that you are seeing the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常确定您看到了以下截图：
- en: '![Connecting the Vue.js application to the Firebase project](../images/00010.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![将Vue.js应用程序连接到Firebase项目](../images/00010.jpeg)'
- en: The Vue.js web application displaying the information from the Firebase database
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 显示来自Firebase数据库的Vue.js Web应用程序信息
- en: Congratulations! You have successfully completed the first part of our tutorial,
    connecting the Vue.js application to the Firebase real-time database.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功完成我们教程的第一部分，将Vue.js应用程序连接到Firebase实时数据库。
- en: Adding a Bootstrap-powered markup
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基于Bootstrap的标记
- en: Let's add basic styling to our application by adding Bootstrap and using its
    classes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加Bootstrap并使用其类来为我们的应用程序添加基本样式。
- en: 'First of all, let''s include Bootstrap''s `CSS` and `JS` files from Bootstrap''s
    `CDN`. We will use the upcoming version 4, which is still in alpha. Open the `index.html`
    file and add the necessary `link` and `script` tags inside the `<head>` section:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从Bootstrap的CDN中包含Bootstrap的`CSS`和`JS`文件。我们将使用即将推出的版本4，目前还处于alpha版。打开`index.html`文件，在`<head>`部分添加必要的`link`和`script`标签：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You've probably noticed that I added *jQuery* and *Tether* dependencies as well;
    this is because Bootstrap depends on them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我还添加了*jQuery*和*Tether*依赖项；这是因为Bootstrap依赖于它们。
- en: Now, we can use Bootstrap classes and components in our application. Let's start
    by adding a bit of styling using Bootstrap's classes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在应用程序中使用Bootstrap类和组件。让我们从使用Bootstrap的类开始添加一些样式。
- en: 'I will wrap the whole app `div` tag into the `jumbotron` class, and then, I
    will wrap the content of it into the `container` class. So, the template will
    look a bit different:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我将整个应用程序`div`标签包装到`jumbotron`类中，然后将其内容包装到`container`类中。因此，模板将会有些不同：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check out the page; doesn''t it look different? Now, I would like to wrap up
    the content of each message into the `card` class. Cards seem to be an appropriate
    container for this kind of things. Check out the official Bootstrap documentation
    regarding cards at [https://v4-alpha.getbootstrap.com/components/card/](https://v4-alpha.getbootstrap.com/components/card/).
    I will add `div` tag with a `card-group` class and put all the cards with messages
    inside this container. Thus, I don''t need to be worried about the positioning
    and layout. Everything becomes responsive just by itself! So, the markup for the
    messages will look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 查看页面；它看起来不一样吗？现在，我想将每条消息的内容包装在`card`类中。卡片似乎是这种东西的适当容器。查看官方Bootstrap关于卡片的文档[https://v4-alpha.getbootstrap.com/components/card/](https://v4-alpha.getbootstrap.com/components/card/)。我将添加一个带有`card-group`类的`div`标签，并将所有带有消息的卡片放在这个容器中。因此，我不需要担心定位和布局。一切都会自动变得响应！因此，消息的标记将如下所示：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Check out the page. It''s almost looking nice! In a few steps, we were able
    to nicely display the messages that are stored in our Firebase database. Try to
    add another message using the Firebase real-time database dashboard. Keep the
    web page open! Fill in the Firebase database fields:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 查看页面。它看起来几乎很好！在几个步骤中，我们能够很好地显示存储在我们Firebase数据库中的消息。尝试使用Firebase实时数据库仪表板添加另一条消息。保持网页打开！填写Firebase数据库字段：
- en: '![Adding a Bootstrap-powered markup](../images/00011.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap增加标记](../images/00011.jpeg)'
- en: Adding an entry to the Firebase database
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 向Firebase数据库添加条目
- en: 'Now, click on the **ADD** button. The new message automatically appears on
    your web page:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击“添加”按钮。新消息会自动出现在您的网页上：
- en: '![Adding a Bootstrap-powered markup](../images/00012.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap增加标记](../images/00012.jpeg)'
- en: Once we click on the ADD button, the new message immediately appears on our
    web page
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击“添加”按钮，新消息立即出现在我们的网页上
- en: Isn't it great? Now, we can add as many messages as we want. We can also delete
    them and manipulate them, and all changes will be automatically propagated to
    our web page. This is pretty nice, but do we really want to keep playing with
    our backend database to see something changing on the web page? Of course, not!
    We want the users of our page to be able to add their messages using our page
    and not our database dashboard. Let's go back to our Vue.js application and add
    a form that will allow us to add new messages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是很棒吗？现在，我们可以添加任意多的消息。我们还可以删除它们并操纵它们，所有的更改都会自动传播到我们的网页上。这很不错，但我们真的想继续在后端数据库上玩耍，看到网页上的变化吗？当然不！我们希望我们网页的用户能够使用我们的页面而不是我们的数据库仪表板来添加他们的消息。让我们回到我们的Vue.js应用程序，并添加一个表单，让我们能够添加新的消息。
- en: Adding a form using Bootstrap
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap添加表单
- en: Let's add a simple form to our application that will enable us to add new messages
    to our message board. Check Bootstrap's documentation regarding forms at [https://v4-alpha.getbootstrap.com/components/forms/](https://v4-alpha.getbootstrap.com/components/forms/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的应用程序添加一个简单的表单，这样我们就可以向我们的留言板添加新消息。查看Bootstrap关于表单的文档[https://v4-alpha.getbootstrap.com/components/forms/](https://v4-alpha.getbootstrap.com/components/forms/)。
- en: 'Let''s add a form just before the list of messages. This form will contain
    the input for the title, the text area for the message, and the submit button.
    It will look like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在消息列表之前添加一个表单。这个表单将包含标题的输入，消息的文本区域和提交按钮。它将看起来像这样：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Look at the page. Doesn't look that beautiful, does it?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 看看页面。看起来不太美观，是吗？
- en: '![Adding a form using Bootstrap](../images/00013.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap添加表单](../images/00013.jpeg)'
- en: Our form doesn't look so beautiful
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单看起来不太美观。
- en: In fact, let's be honest, it just looks ugly! However, with Bootstrap classes,
    it is really easy to fix it. If we add the `form-control` class to the `input`
    and `textarea` elements, the `form-group` class to each `div` tag that surrounds
    these elements, and probably the `btn btn-primary` class to the `submit` button…well,
    we will have something nicer!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，让我们诚实一点，它看起来很丑！但是，使用Bootstrap类，修复它真的很容易。如果我们将`form-control`类添加到`input`和`textarea`元素中，将`form-group`类添加到围绕这些元素的每个`div`标签中，可能还将`btn
    btn-primary`类添加到`submit`按钮中…嗯，我们会得到更好的东西！
- en: '![Adding a form using Bootstrap](../images/00014.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap添加表单](../images/00014.jpeg)'
- en: The form looks really nice with the Bootstrap classes
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表格看起来真的很漂亮，使用了Bootstrap类
- en: OK, so now we have a nice-looking form, but if we try to fill it out, nothing
    will happen. We have to make it functional, and for that, we will use the power
    of Vue.js.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们有一个看起来不错的表单，但是如果我们尝试填写它，什么也不会发生。我们必须使其功能化，为此，我们将使用Vue.js的强大功能。
- en: Making things functional with Vue.js
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue.js使事情功能化
- en: So, what do we want to achieve with our form? We want the new message to be
    created. This message has to be composed of title, text, and the timestamp. We
    also want to add this message to our messages reference array.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们想要通过我们的表单实现什么？我们希望创建新消息。这条消息必须由标题、文本和时间戳组成。我们还希望将此消息添加到我们的消息引用数组中。
- en: 'Let''s call this new message `newMessage` and add it to the `data` attributes
    of `App.vue`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这条新消息称为`newMessage`，并将其添加到`App.vue`的`data`属性中：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s bind the title and the text of this `newMessage` object to `input`
    and `textarea` of our form. Let''s also bind a method called `addMessage` to the
    submit handler of our form so that the whole form''s markup looks like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`newMessage`对象的标题和文本绑定到表单的`input`和`textarea`上。我们还将一个名为`addMessage`的方法绑定到表单的提交处理程序，使整个表单的标记看起来像这样：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Well, we have bound the `"addMessage"` method to the `submit` callback of the
    form, but we haven't defined this method yet! So, let's define it. Add the `methods`
    object to our `App.vue` export section and define the `addMessage` method inside
    it. This method will receive the event attribute from our form and will just grab
    the `newMessage` object and push it into the `messagesRef` array. Doesn't it sound
    easy?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们已经将`"addMessage"`方法绑定到表单的`submit`回调，但是我们还没有定义这个方法！因此，让我们定义它。在我们的`App.vue`导出部分添加`methods`对象，并在其中定义`addMessage`方法。此方法将从我们的表单接收事件属性，然后只需获取`newMessage`对象并将其推送到`messagesRef`数组中。听起来很容易吧？
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, open the page, fill in the form, and hit the **Send** button. You''ll
    see your message immediately appearing on the list of messages:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开页面，填写表单，然后点击**发送**按钮。您会立即看到您的消息出现在消息列表中：
- en: '![Making things functional with Vue.js](../images/00015.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js使事情功能化](../images/00015.jpeg)'
- en: The message we introduce in the form is immediately propagated to the messages
    list
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在表单中输入的消息立即传播到消息列表中
- en: 'There is still something we need to fix. We don''t want the values we fill
    the form with to remain there after our message is added to the messages list.
    So, we need to clear it inside the `addMessage` method. Probably, some basic check,
    at least for the title, would also be nice. So, rewrite the method as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些东西我们需要修复。我们不希望填写表单的值在消息添加到消息列表后仍然保留在那里。因此，我们需要在`addMessage`方法中清除它。可能，至少对标题进行一些基本检查也会很好。因此，将方法重写如下：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, if you start adding more messages, things look a bit weird. The way we're
    displaying the messages is probably not the best way for our case. Do you remember
    we wrapped up our message cards into `div` with the `card-group` class? Let's
    try to replace it with the `card-columns` class and check whether it looks better.
    In fact, it does. Let's keep it like that.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Adding utility functions to make things look nicer
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already have a fully functional single-page application, but it still lacks
    some awesomeness. For example, it's not really beautiful that the time appears
    as a timestamp. Let's write the utility function that will transform our timestamp
    into something beautiful.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the *Moment.js* library ([https://momentjs.com/](https://momentjs.com/)).
    Install it in the application folder:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a folder and call it `utils`. Add a file called `utils.js` to this folder.
    Import `moment` and write the following function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Export it in the end of the file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s import this function to `App.vue` and use it to format our timestamp.
    Open the `App.vue` file and add the `import` statement at the beginning of the
    `script` section:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In order to be able to use this function within the Vue template, we have to
    export it in the `methods` section. Just add a new entry to the `methods` object:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Since we use ES6, we can just write the following lines of code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we can use this method inside the template section. Just wrap the `message.timestamp`
    binding object in the `dataToString` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Check out the page! Now, you can see beautiful dates instead of Unix timestamps.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have a small exercise for you. You saw how easy it was to add a utility function
    to transform the timestamp into the nicely formatted date. Now, create another
    utility function and call it `reverse`. This function should be used to display
    the array of messages in the reversed order, so the most recent messages should
    appear first. Check the code for this chapter in case you're in doubt.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Extracting message cards to their own component
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You probably noticed that the first message of the demo application is always
    there. It''s not moved by other, fresh message items. So, it seems that it''s
    kind of a special message, and it''s treated in a special way. In fact, it is.
    If you want to make a card sticky, just add it before the `card` element that
    iterates through other messages. You can also add some class to this card to show
    that it''s really special. In my case, I added Bootstrap''s `card-outline-success`
    class that outlines the element in a nice green color:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, you have a nice sticky card with a color that differs from other cards''
    color. But… don''t you see any problem? We have the very same code repeated twice
    in our template. I''m pretty sure that you are aware of the rule of thumb of any
    developer: DRY—don''t repeat yourself!'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extract the card to an individual component. It''s really easy. Add
    a component called `Card.vue` to the `components` folder. The code for this component
    is really simple:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s invoke this component from `App.vue` with different values for
    title, text, and footer. First of all, it should be imported and exported in the
    Vue `components` object:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we can use the `<card>` element within our template. We need to bind title,
    text, and footer. Footer is actually the text that says **Added on …**. So, the
    markup for the first card will look like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The list of other messages will follow the same logic. For each message from
    the `messages` array, we will bind the corresponding message''s entries (title,
    text, and timestamp). So, the markup for the list of message cards will look like
    this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we have replaced fourteen lines of code with only two lines!
    Of course, our component also contains some lines of code, but now, we can reuse
    it again and again.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The way we've extracted the card code into its individual component is, without
    any doubt, great, but the way we are binding attributes for the first message
    is a bit ugly. What if at some point we need to change the message's text? First
    of all, it's not easy to find the text inside the markup. Also, it is pretty difficult
    to manage the text inside the markup attributes, because we have to be really
    careful not to mess up with double/single quotes. And, admit it, it's just ugly.
    Your task for this exercise is to extract title, text, and date for the first
    message into something nicer (for example, export it in the data object) and bind
    it the same way we bind other messages. If you have doubts regarding this exercise,
    check out this chapter's code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't be confused by the `v-bind` directive in the provided code. We've been
    using it already, just its shortened version—the name of a bound property written
    after the semicolon. So, for example, `v-bind:messages` is the same as `:messages`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your application
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, now that we have a fully working application in our hands, it's time to
    make it public. In order to do this, we will deploy it to Firebase.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing Firebase tools:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, you have to tell your Firebase tools that you are actually a Firebase
    user who has an account. For this, you have to log in using Firebase tools. Run
    the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Follow the instructions to log in.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you must initialize Firebase in your application. From the application
    root, call the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You will be asked some questions. Select the third option for the first question:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying your application](../images/00016.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Select the Hosting option for the first question
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Select the `PleaseIntroduceYourself` project from the list of projects to associate
    to the application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialization is over. Check whether the file called `firebase.json` has been
    created in the project''s folder. This file can contain an innumerous number of
    configurations. Check out the official Firebase documentation in this regard at
    [https://firebase.google.com/docs/hosting/full-config](https://firebase.google.com/docs/hosting/full-config).
    For us, the very basic indication of the public directory to be deployed would
    be enough. The directory where `vue-cli` builds the production-ready assets is
    called `dist`; therefore, we will want the content of this directory to be deployed.
    So, add the following line of code to your `firebase.json` file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Do not forget to save your `firebase.json` file. Let''s now build and deploy
    our application. Sounds like a big devops task, right? It''s not really huge.
    Run `npm build` and then `firebase deploy`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How difficult is it? After the successful deployment, Firebase will output the
    URL of your project. Now, you can start playing with it and send it to your friends.
    It's probably not the most beautiful URL in the world, right? Maybe you would
    like to connect it to your domain? Of course, it is possible!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Extra mile – connecting your Firebase project to a custom domain
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s fairly easy to connect the Firebase project to a custom domain. First
    of all, of course, you need to buy this domain. For this application, I bought
    the *pleaseintroduceyourself* domain with the cheapest top-level domain, `.xyz`.
    It cost me a bit more than a dollar per year on GoDaddy ([https://godaddy.com](https://godaddy.com)).
    After you have your domain, it''s really easy. Go to the Firebase web console
    of the project. Click on the **Hosting** tab on the left-hand side. Then, click
    on the **CONNECT DOMAIN** button:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Extra mile – connecting your Firebase project to a custom domain](../images/00017.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: Click on the CONNECT DOMAIN button
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'In the popup, input your domain name:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Extra mile – connecting your Firebase project to a custom domain](../images/00018.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: Input your domain name
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'It will suggest that you add a TXT DNS record to your domain. Just open your
    DNS provider page, select your domain, find out how to add DNS records, and add
    the record with the `TXT` type. In my case, with GoDaddy, the record adding section
    looks like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![Extra mile – connecting your Firebase project to a custom domain](../images/00019.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: Adding the DNS TXT record to our domain
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: After the handshake is established (mind, it might take some time), Firebase
    will propose you the final step—adding the **A** record to your domain. Follow
    the exact same procedure as in the previous step; just instead of records of type
    `TXT`, add records of type **A**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: It will take some time until the changes are completely propagated. In my case,
    it took around an hour. After a while, you will be able to open your new page
    with the `https://<your domain>.<your top level domain>` address. In my case,
    as you already know, it's [https://pleaseintroduceyourself.xyz/](https://pleaseintroduceyourself.xyz/).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we followed a tutorial where we have developed a single-page
    application from scratch. We used the Vue.js framework to structure our application,
    the Bootstrap framework to apply style to it, and the Firebase platform to manage
    the application's persistence layer and hosting.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: In spite of being able to achieve a considerable result (a fully functional
    deployed application), we did everything without a deep understanding of what
    is going on behind the scenes. The tutorial didn't explain what Vue.js, Bootstrap,
    or Firebase was. We just took it for granted.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will understand the underlying technologies in detail.
    We will do the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Take a closer look at the Vue.js framework, starting from a basic understanding
    and then covering topics such as directives, data binding, components, routing,
    and so on
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a deeper look at the Bootstrap framework, and check what is possible to
    achieve using it and how to do it
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get to know the Firebase platform better; we'll gain some basic understanding
    about it and go through more complex topics such as data storage or functions
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out different techniques to use these three different projects to add
    simplicity, power, and flexibility to our applications
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
