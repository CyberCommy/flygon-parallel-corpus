- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Securing installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting networks and users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password-less authentication using mysql_config_editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resetting the root password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up encrypted connections using X509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SSL replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, security aspects of MySQL are covered, which include restricting
    the network, strong passwords, using SSL, access control within a database, securing
    an installation, and security plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Securing installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As soon as the installation is done, it is recommended that you secure your
    installation using the `mysql_secure_installation` utility.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `mysqld` process runs under the `mysql` user. You can also run
    `mysqld` under another user by changing the ownership of all the directories used
    by `mysqld` (such as `datadir`, the `binlog` directory if any, tablespaces in
    other disks, and so on) and adding `user=<user>` in `my.cnf`. Refer to [https://dev.mysql.com/doc/refman/8.0/en/changing-mysql-user.html](https://dev.mysql.com/doc/refman/8.0/en/changing-mysql-user.html)
    to know more about changing the MySQL user.
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly recommended not to run `mysqld` as a Unix root user. One reason
    is that any user with the `FILE` privilege is able to cause the server to create
    files as root.
  prefs: []
  type: TYPE_NORMAL
- en: The FILE privilege
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Be cautious while granting the `FILE` privilege to any user because the user
    can write a file anywhere in the filesystem with privileges of the `mysqld` daemon,
    which includes the server''s `data directory`. However, they cannot overwrite
    existing files. Also, users can read any file accessible to MySQL (or the user
    that runs `mysqld`) into a database table. `FILE` is a global privilege, meaning
    you cannot restrict it to a particular database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the company user with the `FILE` privilege is able to read data
    from the `employees` table.
  prefs: []
  type: TYPE_NORMAL
- en: You do not need to worry about the preceding hack as the location in which files
    can be read and written is limited to `/var/lib/mysql-files` by default, using
    the `secure_file_priv` variable. The problem arises when you set the `secure_file_priv`
    variable to `NULL`, an empty string, the MySQL `data directory`, or any sensitive
    directory that MySQL has access to (for example, the tablespaces outside the MySQL
    `data directory`). If you set `secure_file_priv`  to a non-existent directory,
    it leads to an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is recommended to leave `secure_file_priv` as default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Never give anyone access to the `mysql.user` table. To know more about the security
    guidelines, refer to [https://dev.mysql.com/doc/refman/8.0/en/security-guidelines.html](https://dev.mysql.com/doc/refman/8.0/en/security-guidelines.html)
    and [https://dev.mysql.com/doc/refman/8.0/en/security-against-attack.html](https://dev.mysql.com/doc/refman/8.0/en/security-against-attack.html).
  prefs: []
  type: TYPE_NORMAL
- en: Restricting networks and users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do not open your database to the whole network, meaning the port on which MySQL
    runs (`3306`) should not be accessed from other networks. It should be open only
    to the application server. You can set up a firewall using iptables or the `host.access`
    file to restrict access to port `3306`. If you are using MySQL on the cloud, the
    provider will also give a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test this, you can use `telnet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If telnet hangs or the connection is refused, it means that the port is closed.
    Please note that if you see an output like this, it means that the port is not
    blocked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It means that the port is open but MySQL is restricting the access.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating users, avoid giving access from anywhere (the `%` option). Restrict
    access to an IP range or subdomain. Also restrict the user to access only the
    database that is needed. For example, the `read_only` user of the `employees`
    database should not be able to access other databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `employee_read_only` user will be able to access only from the `10.10.%.%`
    subnet and access only the `employee` database.
  prefs: []
  type: TYPE_NORMAL
- en: Password-less authentication using mysql_config_editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever you enter a password using a command-line client, you might have noticed
    the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not pass the password in the command line and enter when it prompts,
    you won''t get that warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'However, when you are developing some scripts over the client utilities, it
    is difficult to use with password prompt. One way to avoid this is by storing
    the password in the `.my.cnf` file in the `home` directory. The `mysql` command-line
    utility, by default, reads the `.my.cnf` file and does not ask for a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that you are able to connect without giving any password, but this leads
    to a security concern; the password is in cleartext. To overcome this, MySQL has
    introduced `mysql_config_editor`, which stores the password in encrypted format.
    The file can be decrypted by client programs (only used in memory) to connect
    to the server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the `.mylogin.cnf` file using `mysql_config_editor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add multiple hostnames and passwords by changing the login path. If
    the password is changed, you can run this utility again, which updates the password
    in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to log in to `35.186.157.16` using the `dbadmin` user, you can
    simply execute `mysql --login-path=dbadmin_remote`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To connect to `localhost`, you can simply execute `mysql or mysql --login-path=dbadmin_local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the password for `dbadmin` is the same across all your servers, you can
    connect to any of them by specifying the hostname. You do not need to specify
    the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to print all the login paths, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can notice that the utility masks the passwords. If you try to read the
    file, you will only see gibberish characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This utility only helps you to avoid storing cleartext passwords and ease the
    process of connecting to MySQL. There are many methods to decrypt the passwords
    stored in the `.mylogin.cnf` file. So do not think that the password is safe if
    you use `mysql_config_editor`. Instead of creating the `.mylogin.cnf` file every
    time, you can copy this file to other servers also (this works only if the username
    and password are the same).
  prefs: []
  type: TYPE_NORMAL
- en: Resetting the root password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you forget the root password, you can reset it by two methods, explained
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Using init-file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Unix-like systems, you stop the server and start it by specifying init-file.
    You can save the `ALTER USER ''root''@''localhost'' IDENTIFIED BY ''New$trongPass1''`
     SQL code in that file. MySQL executes the contents of the file at startup, changing
    the password of the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the SQL code in `/var/lib/mysql/mysql-init-password`; make it readable
    to MySQL only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the MySQL server with the `--init-file` option and other options as required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the error log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that you are able to log in with the new password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the most important thing! Remove the `/var/lib/mysql/mysql-init-password`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Optionally, you can stop the server and start it normally without the `--init-file`
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using --skip-grant-tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this method, you stop the server and start it by specifying `--skip-grant-tables`,
    which will not load the grant tables. You can connect to the server as root without
    a password and set the password. Since the server runs without grants, it is possible
    for users from other networks to connect to the server. So as of MySQL 8.0.3, `--skip-grant-tables`
    automatically enables `--skip-networking`, which does not allow remote connections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the server with the `--skip-grant-tables` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect to MySQL without a password, execute `FLUSH PRIVILEGES` to reload the
    grants, and alter the user to change the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the connection to MySQL with the new password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Setting up encrypted connections using X509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the connections between the client and MySQL server are not encrypted, anyone
    who has access to the network could inspect the data. If the client and server
    are in different data centers, it is recommended to use encrypted connections.
    By default, MySQL 8 uses an encrypted connection, but if the encrypted connection
    fails, it falls back to an unencrypted connection. You can test that by checking
    the status of the `Ssl_cipher` variable. If the connection is established by `localhost`,
    cipher won''t be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If you are not using SSL, `Ssl_cipher` will be blank.
  prefs: []
  type: TYPE_NORMAL
- en: You can mandate some users to connect only through an encrypted connection (by
    specifying the `REQUIRE SSL` clause) and leave it as optional for other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the MySQL documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL supports encrypted connections between clients and the server using the
    **TLS** (**Transport Layer Security**) protocol. TLS is sometimes referred to
    as **SSL** (**Secure Sockets Layer**) but MySQL does not actually use the SSL
    protocol for encrypted connections because its encryption is weak. TLS uses encryption
    algorithms to ensure that data received over a public network can be trusted.
    It has mechanisms to detect data change, loss, or replay. TLS also incorporates
    algorithms that provide identity verification using the X509 standard.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn about setting up SSL connections using X509.
  prefs: []
  type: TYPE_NORMAL
- en: All the SSL (X509) related files (`ca.pem`, `server-cert.pem`, `server-key.pem`,
    `client-cert.pem`, and `client-key.pem`) are created by MySQL during installation
    and kept under the `data directory`. The server needs the `ca.pem`, `server-cert.pem`,
    and `server-key.pem` files, and the clients use the `client-cert.pem` and `client-key.pem`
    files to connect to the server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Verify the files in the `data directory`, update `my.cnf`, restart the server,
    and check the SSL-related variables. In MySQL 8, by default, the following values
    are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the `client-cert.pem` and `client-key.pem` files from the server''s `data
    directory` to the client location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect to the server by passing the  `--ssl-cert` and `--ssl-key` options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Mandate the user to connect only by X509:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not specify `--ssl-cert` or `--ssl-key`, you will not be able to
    log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: By default, all SSL-related files are kept in the60;`data directory`. If you
    want to keep them elsewhere, you can set `ssl_ca`, `ssl_cert`, and `ssl_key` in
    the `my.cnf` file and restart the server. You can generate a new set of SSL files
    through either MySQL or OpenSSL. To know the more detailed steps, refer to [https://dev.mysql.com/doc/refman/8.0/en/creating-ssl-rsa-files.html](https://dev.mysql.com/doc/refman/8.0/en/creating-ssl-rsa-files-using-mysql.html). There
    are many other authentication plugins available. You can refer to [https://dev.mysql.com/doc/refman/8.0/en/authentication-plugins.html](https://dev.mysql.com/doc/refman/8.0/en/authentication-plugins.html)
    to know more details.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SSL replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you enable SSL replication, the binary log transfer between master and slave
    will be sent through an encrypted connection. This is similar to the server/client
    connection explained in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**On the master**, as explained in the preceding section, you need to enable
    SSL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**On the master**, copy the `client*` certificates to the slave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**On the slave**, create the `mysql-ssl` directory to hold the SSL-related
    files and set the permissions correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**On the slave**, execute the `CHANGE_MASTER` command with the SSL-related
    changes on the slave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the slave''s status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have made the SSL-related changes on all the slaves, on the master,
    enforce the replication user to use X509:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note that, this can affect other replication users. As an alternative, you can
    create one replication user with SSL and one normal replication user.
  prefs: []
  type: TYPE_NORMAL
- en: Verify the slave status on all slaves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
