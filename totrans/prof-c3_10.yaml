- en: Chapter 10. Don't Repeat Yourself – Let's Create a Simple CSS Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。不要重复自己-让我们创建一个简单的CSS框架
- en: 'How many times have you done some work, only to repeat it in the next project?
    How many times have you thought about elements that are repeatable? All the time
    when you are coding, you should think how many operations you can omit the next
    time you''re working on the same or another project. This means that you need
    to use the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你有多少次做了一些工作，只是在下一个项目中重复了一遍？你有多少次想到了可重复使用的元素？在编码时，你应该考虑下一次在同一个或另一个项目上工作时可以省略多少操作。这意味着你需要使用以下内容：
- en: Automatization
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化
- en: Code templates or frameworks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码模板或框架
- en: 'This chapter is about building reusable code and how to finally use it as a
    foundation for projects. In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章是关于构建可重用代码以及如何最终将其用作项目基础的。在这一章中，我们将涵盖以下主题：
- en: Making a plan for a small and simple CSS framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为一个小而简单的CSS框架制定计划
- en: Creating your own grid system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的网格系统
- en: Creating reusable elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用元素
- en: Remember that this code can and should be extended. Showed process should make
    you more aware about how you can help yourself with frameworks you've already
    created but that can still evolve with your code. Of course, you can use other
    frameworks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这段代码可以并且应该被扩展。所示的过程应该让你更加清楚如何利用你已经创建的框架来帮助自己，但仍然可以随着你的代码发展而发展。当然，你也可以使用其他框架。
- en: File structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'File structure is very important when you are planning a system/framework.
    When you start creating something, it needs an evolution. So according to development
    process your system is evolving. It changes a lot when your system is evolving.
    So, let''s create a simple structure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你计划一个系统/框架时，文件结构是非常重要的。当你开始创建某些东西时，它需要一个演变。所以根据开发过程，你的系统在不断演变。当你的系统在演变时，它会发生很多变化。所以，让我们创建一个简单的结构：
- en: 'Useful mixins:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的mixin：
- en: Short forms of useful elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用元素的简化形式
- en: Inline list
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联列表
- en: Primitives
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本元素
- en: Clearfix
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除浮动
- en: Simple gradient generators
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的渐变生成器
- en: 'Grid mixins:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格mixin：
- en: n of n grid
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: n列中的第n列
- en: 'Forms:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单：
- en: Input/textarea styling helpers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入/文本区样式助手
- en: Input placeholders
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入占位符
- en: 'Buttons:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮：
- en: Inline (with auto-width)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联（自动宽度）
- en: Full-width
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全宽度
- en: 'Standard navigation:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准导航：
- en: One level
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一级
- en: Two level
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两级
- en: We will use mixins instead of already created classes. Why? We want to reduce
    CSS code as much as we can so that, when we generate full 12 grid, we will produce
    12 classes in each breakpoint in media queries. As frontend developers, we want
    to create as much code as needed. Of course, we can reuse some classes and extend
    them with SASS, but the main approach of this framework is simple and reusable
    mixins.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用mixin而不是已经创建的类。为什么？我们希望尽量减少CSS代码，这样当我们生成完整的12列网格时，我们将在媒体查询中的每个断点产生12个类。作为前端开发人员，我们希望创建尽可能少的代码。当然，我们可以重用一些类并用SASS扩展它们，但这个框架的主要方法是简单和可重用的mixin。
- en: Short forms of useful elements
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用元素的简化形式
- en: 'In CSS code (and not only CSS), you wish to get the final effect more quickly
    each time you repeat a part of the code. So why don''t you create short forms
    for some CSS declarations as well? Let''s check what we can make shorter:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS代码（不仅仅是CSS），每次重复代码的一部分时，你希望更快地获得最终效果。那么为什么不为一些CSS声明创建简短的形式呢？让我们看看我们可以做些什么来缩短它：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, each time you want to make some text uppercase, you are just using code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次你想将一些文本转换为大写时，只需使用以下代码：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s the compiled CSS:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another example of usage of short mixins is a element which will be displayed
    as a block element and text will be centered:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用短mixin的例子是一个元素，它将显示为块元素，文本将居中显示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here''s the compiled CSS:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Other mixins
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他mixin
- en: 'There are other mixins that are good for our framework:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他对我们的框架有用的mixin：
- en: Gradients
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变
- en: Animation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画
- en: Clearfix
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除浮动
- en: 'Lets begin with gradient mixins:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从渐变mixin开始：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Animate all:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 全部动画：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Clearfix
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清除浮动
- en: 'Don''t forget to add `clearfix` to your mixins in your private SASS framework.
    You will be using it as an invocation of a mixin or as a class, and all the other
    elements will extend the previously created class:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在你的私人SASS框架中的mixin中添加`clearfix`。你将使用它作为mixin的调用或作为一个类，并且所有其他元素将扩展之前创建的类：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each time you wish to create a reusable `clearfix` class, you can do it this
    way:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你想创建一个可重用的`clearfix`类时，可以这样做：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s the compiled CSS:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or a shorter version can be written as:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以写一个更简短的版本：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s the compiled CSS:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you can extend it with `@extend` in SASS code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在SASS代码中使用`@extend`来扩展它：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s the compiled CSS:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Center an absolute element in an other relative element:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将绝对元素居中在另一个相对元素中：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Media queries
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体查询
- en: In each responsive web project, you will need to create media queries. You need
    to choose steps that you will implement and then start creating the project based
    on these steps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个响应式网页项目中，你都需要创建媒体查询。你需要选择要实施的步骤，然后开始根据这些步骤创建项目。
- en: Media queries template
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体查询模板
- en: Media queries are rather simple to use and create. The main problem with media
    queries is reusable steps that you can keep in one place. In some projects, you
    will need to add a few more queries because of project visibility problems or
    some extra code that will affect your code. Let's focus on how to make it once
    with some settings and then use it in our code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询非常简单易用。媒体查询的主要问题是可重用的步骤，你可以将它们保存在一个地方。在一些项目中，你需要添加更多的查询，因为项目可见性问题或一些额外的代码会影响你的代码。让我们专注于如何通过一些设置来做一次，然后在我们的代码中使用它。
- en: 'The basic settings are focused on the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 基本设置集中在以下内容上：
- en: Mobile devices (phones)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备（手机）
- en: Mobile devices (tablets)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备（平板）
- en: Desktop devices
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面设备
- en: Desktop devices (large)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面设备（大屏）
- en: In some cases, you can extend this list with mobile device position (portrait
    and landscape), but a smaller number of media queries is better and easier for
    maintenance. So how can we keep the sizes?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`$small`: 320px'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$medium`: 768px'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$large`: 1024px'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grids
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In standard HTML/CSS projects the most repeatable element is grid. Of course,
    you can use somebody else's grid or take it from a CSS framework such as Bootstrap
    or Foundation. Is it hard to create it from scratch? Not really. In this chapter,
    we will create a basic grid system and will use it to see how it creates rows
    and columns.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Standard grids 16/12
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard grid is based on a 16-column or 12-column system. What are the
    advantages of both systems? It depends on your structure. For example, after analyzing
    the layout, say you need:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 3-column composition
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2-column composition
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6-column composition
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, you can use the 12-columns system. However, as you can see, you need to
    stick to this system, so how can you create your own code so it''s more elastic?
    You can use the following naming convention:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, `N` is the number of columns and `K` is the divider, for example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you are working with grids, you need to remember that sometimes you need
    to push some columns from the left. This is the case when you need to create `.push`
    classes:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'What are the pros of this naming convention? There is no static divider. In
    classic grids, you have a grid with 12 columns or 16 columns and their combinations.
    Here''s a sample of grids written class by class:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Grid of 12:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Grid of 16:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That was a lot of writing...
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create a code that we can use in media queries and on responsive
    websites. In the most popular CSS frameworks such as Bootstrap and Foundation,
    you can use classes for phones/tablets/desktops:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For example, when the divider is set to `12`, you will see this box on small
    devices with `2` columns wide, on medium devices `4` columns wide, and on large
    documents `5` columns wide. We can create all of these classes, but I recommend
    you create a mixin that we can invoke in each element described in CSS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The SASS Code will look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'How can we use it in SASS code? Let''s imagine that we have a block based on
    grid `16` and we want to give it width of `12` of `16` and push it with `2` of
    `16`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s the compiled CSS:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Standard reusable structures
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a frontend developer, you are always struggling with repeatable elements.
    In almost all cases, you feel as if you are trying to reinvent the wheel, so what
    can you do to not repeat yourself? Let's create a few standard and reusable structures.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Reusable multilevel menus
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A multilevel menu is the most reusable code. All bigger websites have a menu
    that you can describe as reusable code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the HTML code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'SASS code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here''s the compiled CSS:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s rebuild this code a little to create a reusable mixin in SASS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To use it, you will need to invoke a mixin like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The generated CSS:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to create reusable buttons
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Buttons are the next elements that you can see and reuse. Let's think about
    button parameters. For sure, we need to have the opportunity to set the background
    and font color. We need to have an opportunity to change the border color and
    padding.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with a simple CSS definition:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'So based on this, the mixin can look as follows in SASS:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`$bgc`: Background color'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$fc`: Font color'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use this mixin, you just need to execute this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here''s the compiled CSS:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'How can you extend this mixin? Let''s think about other values that you can
    parameterize. For sure, a border radius. So, let''s add a new mixin:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`$bc`: border color'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$br`: border radius'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s use this mixin:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here''s the compiled CSS:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you need to create a bunch of buttons with three sizes, you can do it like
    this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here''s the compiled CSS:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Gathering other reusable mixins
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we need is a bunch of useful and reusable mixins. What can be additionally
    helpful? Let''s think:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Primitives
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline lists
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitives
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can remember from one of the previous chapters, we have been using primitives.
    List of mixins which creates primitives can be very useful and helpful part of
    our framework. We will we have mixins for:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能还记得之前的章节中所提到的，我们一直在使用基元。创建基元的mixin列表可以成为我们框架非常有用和有帮助的一部分。我们将为以下内容创建mixin：
- en: Rectangle (with and without a fill)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩形（带或不带填充）
- en: Circle/ring
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆/环
- en: Triangle
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三角形
- en: 'Let''s have a quick reminder:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's test and use our framework
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试和使用我们的框架
- en: 'To check how our framework is working and how easy it is to append all of our
    stuff, let''s create a blog template. In this template, let''s include views:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们的框架是如何工作的，以及添加所有内容有多容易，让我们创建一个博客模板。在这个模板中，让我们包括视图：
- en: List of posts
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子列表
- en: Single post
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个帖子
- en: Single page
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页
- en: 'Let''s create regions:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建区域：
- en: Header
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页眉
- en: Footer
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: Content
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容
- en: 'Here''s our simplified design:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们简化的设计：
- en: '![Let''s test and use our framework](img/00146.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: ！[让我们测试和使用我们的框架]（img/00146.jpeg）
- en: 'Let''s begin with the simple structure of a blog page (the Home page):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从博客页面（主页）的简单结构开始：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As you can see, we have a structure based on tags:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们有一个基于标签的结构：
- en: Header
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页眉
- en: Nav
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航
- en: Main
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要
- en: Footer
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: 'This is our file structure:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的文件结构：
- en: '![Let''s test and use our framework](img/00147.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: ！[让我们测试和使用我们的框架]（img/00147.jpeg）
- en: 'Let''s describe the header:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述页眉：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Describing the footer:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 描述页脚：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Describing the navigation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 描述导航：
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the `fed` directory, we store our reusable code (our framework). In the remaining
    directories, we store code related to the project. In describing the structure,
    we store styles of elements that repeat on all views. In the views directory,
    we will keep styles for elements related to specific views.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在“fed”目录中，我们存储可重复使用的代码（我们的框架）。在其余的目录中，我们存储与项目相关的代码。在描述结构中，我们存储在所有视图上重复的元素的样式。在视图目录中，我们将保留与特定视图相关的元素的样式。
- en: Remember!
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记住！
- en: When you are creating some reusable code or even any other code, you need to
    leave comments. For some reason, there is a current (and discourteous) trend for
    programmers not to add comments "their code doesn't need additional description."
    Another school of thought is, "That's my code. I understand what I am writing".
    Do you think it is fair to leave it as it is? Of course, the answer is no! Even
    your memory isn't perfect. You can forget what you mean in your code and what
    the purpose was. It is recommended you at least write short comments for yourself
    and other people who will work on the project.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一些可重复使用的代码甚至任何其他代码时，你需要留下评论。出于某种原因，程序员们当前（并且不礼貌地）趋向于不添加评论“他们的代码不需要额外的描述”。另一种思路是，“那是我的代码。我知道我在写什么”。你认为把它留下是公平的吗？当然，答案是否定的！即使你的记忆也不完美。你可能会忘记你在代码中的意思和目的是什么。建议你至少为自己和将来在项目上工作的其他人写一些简短的评论。
- en: In the golden era of Github and Bitbucket, you can share your code in seconds
    and work with another programmer from another part of the world who can fork your
    code or contribute to your project.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在Github和Bitbucket的黄金时代，你可以在几秒钟内分享你的代码，并与来自世界另一部分的另一位程序员一起工作，他可以fork你的代码或为你的项目做出贡献。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As you can see, there are a lot of reusable structures that you can decorate
    each time you create a new project. It's better to write something once and then
    add some new functionalities, rather than write something every time and describe
    repeatable elements.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有很多可重复使用的结构，每次创建新项目时都可以装饰。最好是写一次东西，然后添加一些新功能，而不是每次都写一些东西并描述可重复的元素。
- en: In the next chapter, we will try to create a simple CSS framework with components
    ready to use!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试创建一个简单的CSS框架，其中包含准备好使用的组件！
