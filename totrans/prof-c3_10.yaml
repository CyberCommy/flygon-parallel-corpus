- en: Chapter 10. Don't Repeat Yourself – Let's Create a Simple CSS Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How many times have you done some work, only to repeat it in the next project?
    How many times have you thought about elements that are repeatable? All the time
    when you are coding, you should think how many operations you can omit the next
    time you''re working on the same or another project. This means that you need
    to use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code templates or frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter is about building reusable code and how to finally use it as a
    foundation for projects. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Making a plan for a small and simple CSS framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own grid system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reusable elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that this code can and should be extended. Showed process should make
    you more aware about how you can help yourself with frameworks you've already
    created but that can still evolve with your code. Of course, you can use other
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: File structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'File structure is very important when you are planning a system/framework.
    When you start creating something, it needs an evolution. So according to development
    process your system is evolving. It changes a lot when your system is evolving.
    So, let''s create a simple structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful mixins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short forms of useful elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearfix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple gradient generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Grid mixins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n of n grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input/textarea styling helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input placeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Buttons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline (with auto-width)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Standard navigation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use mixins instead of already created classes. Why? We want to reduce
    CSS code as much as we can so that, when we generate full 12 grid, we will produce
    12 classes in each breakpoint in media queries. As frontend developers, we want
    to create as much code as needed. Of course, we can reuse some classes and extend
    them with SASS, but the main approach of this framework is simple and reusable
    mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Short forms of useful elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CSS code (and not only CSS), you wish to get the final effect more quickly
    each time you repeat a part of the code. So why don''t you create short forms
    for some CSS declarations as well? Let''s check what we can make shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, each time you want to make some text uppercase, you are just using code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example of usage of short mixins is a element which will be displayed
    as a block element and text will be centered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Other mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other mixins that are good for our framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearfix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lets begin with gradient mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Animate all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Clearfix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Don''t forget to add `clearfix` to your mixins in your private SASS framework.
    You will be using it as an invocation of a mixin or as a class, and all the other
    elements will extend the previously created class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each time you wish to create a reusable `clearfix` class, you can do it this
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Or a shorter version can be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can extend it with `@extend` in SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Center an absolute element in an other relative element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In each responsive web project, you will need to create media queries. You need
    to choose steps that you will implement and then start creating the project based
    on these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Media queries are rather simple to use and create. The main problem with media
    queries is reusable steps that you can keep in one place. In some projects, you
    will need to add a few more queries because of project visibility problems or
    some extra code that will affect your code. Let's focus on how to make it once
    with some settings and then use it in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic settings are focused on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices (phones)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile devices (tablets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desktop devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desktop devices (large)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, you can extend this list with mobile device position (portrait
    and landscape), but a smaller number of media queries is better and easier for
    maintenance. So how can we keep the sizes?
  prefs: []
  type: TYPE_NORMAL
- en: '`$small`: 320px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$medium`: 768px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$large`: 1024px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In standard HTML/CSS projects the most repeatable element is grid. Of course,
    you can use somebody else's grid or take it from a CSS framework such as Bootstrap
    or Foundation. Is it hard to create it from scratch? Not really. In this chapter,
    we will create a basic grid system and will use it to see how it creates rows
    and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Standard grids 16/12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard grid is based on a 16-column or 12-column system. What are the
    advantages of both systems? It depends on your structure. For example, after analyzing
    the layout, say you need:'
  prefs: []
  type: TYPE_NORMAL
- en: 3-column composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2-column composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6-column composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, you can use the 12-columns system. However, as you can see, you need to
    stick to this system, so how can you create your own code so it''s more elastic?
    You can use the following naming convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `N` is the number of columns and `K` is the divider, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are working with grids, you need to remember that sometimes you need
    to push some columns from the left. This is the case when you need to create `.push`
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'What are the pros of this naming convention? There is no static divider. In
    classic grids, you have a grid with 12 columns or 16 columns and their combinations.
    Here''s a sample of grids written class by class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grid of 12:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Grid of 16:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That was a lot of writing...
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create a code that we can use in media queries and on responsive
    websites. In the most popular CSS frameworks such as Bootstrap and Foundation,
    you can use classes for phones/tablets/desktops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: For example, when the divider is set to `12`, you will see this box on small
    devices with `2` columns wide, on medium devices `4` columns wide, and on large
    documents `5` columns wide. We can create all of these classes, but I recommend
    you create a mixin that we can invoke in each element described in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SASS Code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'How can we use it in SASS code? Let''s imagine that we have a block based on
    grid `16` and we want to give it width of `12` of `16` and push it with `2` of
    `16`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Standard reusable structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a frontend developer, you are always struggling with repeatable elements.
    In almost all cases, you feel as if you are trying to reinvent the wheel, so what
    can you do to not repeat yourself? Let's create a few standard and reusable structures.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable multilevel menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A multilevel menu is the most reusable code. All bigger websites have a menu
    that you can describe as reusable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s rebuild this code a little to create a reusable mixin in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To use it, you will need to invoke a mixin like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How to create reusable buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Buttons are the next elements that you can see and reuse. Let's think about
    button parameters. For sure, we need to have the opportunity to set the background
    and font color. We need to have an opportunity to change the border color and
    padding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with a simple CSS definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'So based on this, the mixin can look as follows in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$bgc`: Background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$fc`: Font color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use this mixin, you just need to execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'How can you extend this mixin? Let''s think about other values that you can
    parameterize. For sure, a border radius. So, let''s add a new mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$bc`: border color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$br`: border radius'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s use this mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to create a bunch of buttons with three sizes, you can do it like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Gathering other reusable mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we need is a bunch of useful and reusable mixins. What can be additionally
    helpful? Let''s think:'
  prefs: []
  type: TYPE_NORMAL
- en: Primitives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can remember from one of the previous chapters, we have been using primitives.
    List of mixins which creates primitives can be very useful and helpful part of
    our framework. We will we have mixins for:'
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle (with and without a fill)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circle/ring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triangle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s have a quick reminder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Let's test and use our framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check how our framework is working and how easy it is to append all of our
    stuff, let''s create a blog template. In this template, let''s include views:'
  prefs: []
  type: TYPE_NORMAL
- en: List of posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create regions:'
  prefs: []
  type: TYPE_NORMAL
- en: Header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s our simplified design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s test and use our framework](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s begin with the simple structure of a blog page (the Home page):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have a structure based on tags:'
  prefs: []
  type: TYPE_NORMAL
- en: Header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nav
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is our file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s test and use our framework](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s describe the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In the `fed` directory, we store our reusable code (our framework). In the remaining
    directories, we store code related to the project. In describing the structure,
    we store styles of elements that repeat on all views. In the views directory,
    we will keep styles for elements related to specific views.
  prefs: []
  type: TYPE_NORMAL
- en: Remember!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are creating some reusable code or even any other code, you need to
    leave comments. For some reason, there is a current (and discourteous) trend for
    programmers not to add comments "their code doesn't need additional description."
    Another school of thought is, "That's my code. I understand what I am writing".
    Do you think it is fair to leave it as it is? Of course, the answer is no! Even
    your memory isn't perfect. You can forget what you mean in your code and what
    the purpose was. It is recommended you at least write short comments for yourself
    and other people who will work on the project.
  prefs: []
  type: TYPE_NORMAL
- en: In the golden era of Github and Bitbucket, you can share your code in seconds
    and work with another programmer from another part of the world who can fork your
    code or contribute to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, there are a lot of reusable structures that you can decorate
    each time you create a new project. It's better to write something once and then
    add some new functionalities, rather than write something every time and describe
    repeatable elements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will try to create a simple CSS framework with components
    ready to use!
  prefs: []
  type: TYPE_NORMAL
