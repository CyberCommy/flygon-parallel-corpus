- en: Rules of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about using various Hooks that have been
    developed by the React community, as well as where to find more of them. We learned
    about replacing React life cycle methods with Hooks, utility and data management
    Hooks, responsive design with Hooks, and implementing undo/redo functionality
    with Hooks. Finally, we learned where to find other Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about everything that there is to know
    about using Hooks, and what to watch out for when using and developing our own
    Hooks. Hooks have certain limitations regarding the order that they are called.
    Violating the rules of Hooks can cause bugs or unexpected behavior, so we need
    to make sure that we learn and enforce the rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Names of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcing the rules of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with `useEffect` dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important to
    write the code yourself in order to learn and understand properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Calling Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hooks should only be called in*React function components* or *custom Hooks*.
    They cannot be used in class components or regular JavaScript functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooks can be called at the top level of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: React function components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Hooks (we are going to learn about creating custom Hooks in the next
    chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, Hooks are mostly normal JavaScript functions, except that they
    rely on being defined in a React function component. Of course, custom Hooks that
    use other Hooks can be *defined* outside of React function components, but when
    *using* Hooks, we always need to make sure that we call them inside a React function
    component. Next, we are going to learn about the rules regarding the order of
    Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Order of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Only call Hooks **at the top level**/**beginning** of function components or
    custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Do not call Hooks inside conditions, loops, or nested functions—doing so changes
    the order of Hooks, which causes bugs. We have already learned that changing the
    order of Hooks causes the state to get mixed up between multiple Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 2](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml), *Using the State
    Hook*, we learned that we cannot do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We rendered a checkbox and two input fields for the `firstName` and `lastName`,
    and then we entered some text in the `lastName` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cc2657a7-8583-4cb4-8266-c13e22d2d7bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Revisiting our example from Chapter 2, Using the State Hook
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, the order of Hooks is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableFirstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lastName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we clicked on the checkbox to enable the `firstName` field. Doing so
    changed the order of Hooks, because now our Hook definitions look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableFirstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`firstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lastName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since React solely relies on the order of Hooks to manage their state, the
    `firstName` field is now the second Hook, so it gets the state from the `lastName`
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8742fba-6847-40a0-9ce7-de2c5e7f560d.png)'
  prefs: []
  type: TYPE_IMG
- en: Problem of changing the order of Hooks from Chapter 2, Using the State Hook
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the real `useState` Hook from React in example 2 *Can we define conditional
    Hooks?* from [Chapter 2](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml), *Using the
    State Hook*, we can see that React automatically detects when the order of Hooks
    has changed, and it will show a warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b1132d7-6f4a-4342-94e4-101b9bf33b36.png)'
  prefs: []
  type: TYPE_IMG
- en: React printing a warning when detecting that the order of Hooks has changed
  prefs: []
  type: TYPE_NORMAL
- en: 'When running React in development mode, it will additionally crash with an
    Uncaught Invariant Violation error message when rendering more Hooks than in the
    previous render:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/217c1d37-366b-414a-a70d-64d9d5252f7e.png)'
  prefs: []
  type: TYPE_IMG
- en: React crashing in development mode when the number of Hooks changed
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, changing the order of Hooks or conditionally enabling Hooks is
    not possible, as React internally uses the order of Hooks to keep track of which
    data belongs to which Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Names of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a convention that Hook functions should always be prefixed with `use`,
    followed by the Hook name starting with a capital letter; for example: `useState`,
    `useEffect`, and `useResource`. This is important, because otherwise we would
    not know which JavaScript functions are Hooks, and which are not. Especially when
    enforcing the rules of Hooks, we need to know which functions are Hooks so that
    we can make sure they are not being called conditionally or in loops.'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, naming conventions are not technically required, but they make
    life a lot easier for developers. Knowing the difference between normal functions
    and Hooks makes it very easy to automatically enforce the rules of Hooks. In the
    next section, we are going to learn how to automatically enforce the rules using
    the `eslint` tool.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing the rules of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we stick to the convention of prefixing Hook functions with `use`, we can
    automatically enforce the other two rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Only call Hooks from React function components or custom Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only call Hooks at the top level (not inside loops, conditions, or nested functions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to enforce the rules automatically, React provides an `eslint` plugin
    called `eslint-plugin-react-hooks`, which will automatically detect when Hooks
    are used, and will ensure that the rules are not broken. ESLint is a linter, which
    is a tool that analyzes source code and finds problems such as stylistic mistakes,
    potential bugs, and programming errors.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, `create-react-app` is going to include this plugin by default.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up eslint-plugin-react-hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to set up the React Hooks `eslint` plugin to automatically
    enforce the rules of Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start installing and enabling the `eslint` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the plugin via `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We use the `--save-dev` flag here, because `eslint` and its plugins are not
    required to be installed when deploying the app. We only need them during the
    development of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create a new `.eslintrc.json` file in the root of our project folder,
    with the following contents. We start by extending from the `react-app` ESLint
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we include the `react-hooks` plugin that we installed earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we enable two rules. First, we tell `eslint` to show an error when we violate
    the `rules-of-hooks` rule. Additionally, we enable the `exhaustive-deps` rule
    as a warning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we adjust `package.json` to define a new `lint` script, which is going
    to call `eslint`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can execute `npm run lint`, and we are going to see that there are
    5 warnings and 0 errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/647045f4-5f7a-4179-a026-a2f7a347dab1.png)'
  prefs: []
  type: TYPE_IMG
- en: Executing ESLint with the react-hooks plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now try to break the rules of Hooks; for example, by editing `src/user/Login.js` and
    making the second Input Hook conditional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute `npm run lint` again, we can see that there is now an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53184548-1539-43e2-8ab0-4bd38f34e9c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Executing ESLint after breaking the rules of Hooks
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, `eslint` helps us by forcing us to stick to the rules of Hooks.
    The linter will throw an error when we violate any rules, and show warnings when
    Effect Hooks have missing dependencies. Listening to `eslint` will help us to
    avoid bugs and unexpected behavior, so we should never ignore its errors or warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter09/chapter9_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and execute `npm
    run lint` to run the linter.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with useEffect dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to enforcing the rules of Hooks, we are also checking whether all
    the variables that are used in an Effect Hook are passed to its dependency array.
    This *exhaustive dependencies* rule ensures that whenever something that is used
    inside the Effect Hook changes (a function, value, and so on), the Hook will trigger
    again.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the previous section, there are a couple warnings related
    to the exhaustive dependencies rule when running the linter with `npm run lint`.
    Often, it has to do with the `dispatch` function or other functions not being
    part of the dependency array. Usually, these functions should not change, but
    we can never be sure, so it is better to just add them to the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically fixing warnings with eslint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the exhaustive dependencies rule is quite simple and straightforward to fix,
    we can automatically let `eslint` fix it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we need to pass the `--fix` flag to `eslint`. Using `npm run`, we
    can pass flags by using an additional `--` as a separator, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding command, we can run `npm run lint` again, and we
    are going to see that all warnings have automatically been fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aec44b71-f218-47d5-bcde-25306ede9272.png)'
  prefs: []
  type: TYPE_IMG
- en: No warnings after letting eslint fix them
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, `eslint` not only warns us about problems, it can even fix some
    of them automatically for us!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter09/chapter9_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and execute `npm
    run lint` to run the linter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we first learned about two rules of Hooks: that we should
    only call Hooks from React function components, and that we need to ensure that
    the order of Hooks stays the same. Furthermore, we learned about the naming convention
    of Hooks, and that they should always start with the `use` prefix. Then, we learned
    how to enforce the rules of Hooks using `eslint`. Finally, we learned about `useEffect`
    dependencies, and how to fix missing dependencies automatically using `eslint`.'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing about the rules of Hooks, and enforcing them, is very important in order
    to avoid bugs and unexpected behavior. These rules will be especially important
    when creating our own Hooks. Now that we have a good grasp on how Hooks work,
    including their rules and conventions, in the next chapter, we are going to learn
    how to create our own Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try answering the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Where can Hooks be called?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use Hooks in React class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we need to watch out for regarding the order of Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Hooks be called inside conditions, loops, or nested functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the naming convention for Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we automatically enforce the rules of Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the exhaustive dependencies rule?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we automatically fix linter warnings?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Rules of Hooks in the official React documentation: [https://reactjs.org/docs/hooks-rules.html](https://reactjs.org/docs/hooks-rules.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official website of ESLint: [https://eslint.org/](https://eslint.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
