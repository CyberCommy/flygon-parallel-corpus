- en: '*Chapter 7*: Understanding Element Interaction in Cypress'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with how Cypress interacts with elements when running
    tests, it would be good to have a solid idea of the principles that make up Cypress,
    how it works, different Cypress commands, and even practical examples of the usage
    of Cypress. To fully understand this chapter, you will need to have followed the
    previous chapters, which will have set you up for success in your learning journey.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover how Cypress interacts with elements and how it
    responds to different states of an element during interaction. We will also cover
    the fundamentals of how Cypress determines whether an element is ready for interaction
    or not through built-in mechanisms in Cypress commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding actionability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing actionability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've worked through each of these topics, you will have the knowledge
    required to understand how Cypress interprets tests as they are executed and how
    it interprets errors that have occurred while executing tests.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we recommend that you clone the repository that contains the
    source code and all the tests that we will write in this chapter from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitHub repository for this chapter can be found at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)'
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found in the `chapter-07` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding actionability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what Cypress commands are, and where and when to use them,
    we need to understand the thought and operation process of Cypress when executing
    tests. In this section, we will cover how Cypress interacts with commands, how
    it ensures that elements are visible and actionable, and even how animation in
    elements is handled. We will also cover how Cypress determines **actionability**
    before any command is completed.
  prefs: []
  type: TYPE_NORMAL
- en: Actionability is the ability of Cypress to perform an action on a specific element
    in the **Document Object Model** (**DOM**). Cypress has commands whose sole intention
    is to interact with DOM elements. The commands act "as a user" and simulate interaction
    with the user interface of an application. Cypress events are responsible for
    the behavior of the commands as it sends the events to the browser, making it
    seem like user interaction on the application's user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some commands in Cypress that directly interact with the
    DOM; for the actions to be completed, the DOM elements have to be actionable.
    These commands come with built-in Cypress mechanisms for checking the actionability
    of the elements that they interact with. The commands include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cy.type()`: Types into a DOM element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.clear()`: Clears the value of a text area or an input box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.click()`: Performs a click action on a DOM element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.dbclick()`: Performs a double-click action on a DOM element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.rightclick()`: Performs a right-click action on a DOM element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.select()`: Selects an `<option>` choice from a `<select>` dropdown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.trigger()`: Performs a trigger event on an element on the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.check()`: Checks radios and checkboxes on the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy.uncheck()`: Unchecks radios and checkboxes on the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `cy.rightclick()` command will not open the browser menus, but instead will
    check the behavior of your elements in relation to the browser's **context menu**.
  prefs: []
  type: TYPE_NORMAL
- en: Before any of the preceding commands can be run, Cypress takes actions to ensure
    that the DOM is ready to receive the action. For any of the commands to take place,
    Cypress performs its own checks to verify that the conditions are right for the
    commands to be performed on the DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the checks take place within a specified time that can be configured through
    the **defaultCommandTimeout** configuration option, which can be modified in the
    `cypress.json` file. The following are the actions taken by Cypress to check for
    DOM element readiness:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visibility**: Scrolls the element to view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disability**: Ensures that the element is not hidden'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detached**: Checks that element has not been removed from the DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readonly**: Checks that an element is not in a read-only state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animations**: Checks that animations have completed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Covering**: Checks that an element is not being covered by a parent element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scrolling**: Checks for the scrolling of elements covered by elements with
    fixed positions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coordinates**: Checks that the event is fired at the desired coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To better understand how Cypress interprets responses from the DOM and how it
    determines actionability, we will go through these listed actions and describe
    how Cypress checks the state through every single action when an actionable command
    is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress uses different factors to determine whether an element is visible or
    not. The default way that Cypress determines the visibility of an element is by
    checking the **Cascading Style Sheets** (**CSS**) properties of that element.
    The CSS properties of any element define how the element behaves and if, by default,
    the CSS properties are defined in a way that means the element is hidden, Cypress
    will automatically know that the element is not visible due to its properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cypress considers an element to be hidden if any of the following conditions
    are met:'
  prefs: []
  type: TYPE_NORMAL
- en: The CSS `width` and `height` of an element are `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element or its ancestors have a `visibility: hidden` CSS property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element or its ancestors have a `display: none` CSS property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element has a `position: fixed` CSS property and it is covered up or not
    present on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, Cypress uses the `hidden overflow` CSS property to determine
    whether an element is hidden or not during the execution of tests. The following
    additional instances are some that Cypress uses to determine whether an element
    is hidden or not:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ancestors have hidden overflow and `width` or `height` values of `0`, and there
    is an element between the ancestor and the element that has a CSS property of
    `position: absolute`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ancestors have hidden overflow and the element has a CSS property of `position:
    relative` and is positioned outside the ancestor''s bounds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden overflow means that the CSS property can be any of the following overflows:
    `hidden`, `overflow: auto`, `overflow: scroll`, `overflow-x: hidden`, or `overflow-y:
    hidden`.'
  prefs: []
  type: TYPE_NORMAL
- en: All of the following calculations of transformations and translations are handled
    by Cypress, and if by any chance Cypress does not find that the element is visible,
    the test will fail with an error saying that visibility is hidden for the element
    that Cypress is trying to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Disability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When checking for actionability, Cypress also checks whether an element is
    disabled or not. When an element has the `disabled: true` CSS property, Cypress
    cannot interact with it as no action can be performed on an element when it is
    disabled on the DOM. When Cypress encounters a disabled element and needs to perform
    an action on the element, it will return an error describing the state of the
    disabled element and why it is not able to interact with the element through Cypress
    actionable commands.'
  prefs: []
  type: TYPE_NORMAL
- en: Detached
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Detached elements are elements that have been removed from the DOM but are still
    present in the memory because of the JavaScript. Most applications work by removing
    elements from the DOM and inserting other elements in the DOM, hence constantly
    detaching and attaching elements in the DOM. When evaluating an element for actionability,
    Cypress checks that an element is not detached before any actionable command is
    run on an element. In the event that Cypress encounters a detached element, it
    throws an error before the actionable command is executed by Cypress on the tests.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that Cypress will only search for an element in the
    DOM and will not check whether a detached element exists in the memory or not.
  prefs: []
  type: TYPE_NORMAL
- en: Readonly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Readonly elements are disabled for viewing only and cannot accept new content
    or editing. Cypress checks for the `readonly` CSS property in the `.type()` command;
    if the `readonly` CSS property is encountered, the test will fail with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress has built-in mechanisms that determine whether animations are present
    in an element. When evaluating whether an element is actionable, Cypress waits
    for the animation to complete before interaction with the element begins.
  prefs: []
  type: TYPE_NORMAL
- en: For Cypress to determine whether an element in a test is animating, it has to
    use a sample of the last coordinates of the element and then apply its algorithms
    to calculate the slope.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The slope is calculated by picking two different points and recording their
    coordinates. Differences between the y-coordinates and the x-coordinates are then
    recorded. Division of the difference in the y-coordinates and the x-coordinates
    is then carried out to determine the slope of the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The animation of an element and the slope is determined by checking the current
    and previous positions of that element. Cypress comes with an in-built animation
    threshold that checks for the distance in pixels that an element must exceed to
    be considered to be animating. You can configure this in the `cypress.json` file
    and change the default values as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When this value is changed, either by increasing it or decreasing it, Cypress
    will change its sensitivity and behavior of determining whether an element is
    animating or not. A higher animation threshold means that Cypress will reduce
    its sensitivity when it comes to detecting the changed distance of the pixels
    while a lower animation threshold will mean more sensitivity of Cypress when detecting
    elements that are animating.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to turn off animations when running tests. To do this,
    we need to configure our `cypress.json` configuration file to ignore animations
    and continue with the execution of our commands. The following can be achieved
    with the configuration in this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we have specified that our tests should not wait for animations, as shown
    here, our tests will ignore animations and will execute as if the animations are
    not present. This configuration can, however, be changed back to the `true` value
    to continue executing our tests while waiting for animations to execute in the
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Covering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress checks that an element is not covered by a parent element as part of
    verifying actionability before a command is issued. There are many instances where
    an element could be visible in the DOM but just covered by a parent element such
    as a modal, a popup, or a dialog box. Cypress will not allow the execution of
    a command if there is a parent that is covering the element.
  prefs: []
  type: TYPE_NORMAL
- en: In instances where a parent element covers an element that Cypress is supposed
    to carry out an action on, Cypress will throw an error, as even in real life it
    would be impossible for a user to interact with a covered-up element.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In the event that a child element is covering the element, Cypress will continue
    to issue the event to the child and execution continues without any problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code block, we have a `button` element that is partially or
    fully covered up by a `span` element, which will be clicked instead of the `button`
    element itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this code block, although the `span` element covers the `button` element,
    Cypress will issue the command to the child `span` element, which will trigger
    a click event to our `button` element without encountering errors.
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress performs scrolling on the elements and has this behavior enabled by
    default in the actionable commands specified at the beginning of this section.
    By default, before interaction with an element, Cypress scrolls to the position
    of that element and ensures that it is in view.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Commands such as `cy.get()` or `cy.find()` do not have the Cypress scroll-into-view
    mechanism built into them as actionable commands in Cypress do.
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling in Cypress is enabled by an algorithm that first tries to determine
    whether an element is visible on the DOM. It then uses coordinates to navigate
    to the actual element by calculating coordinates from the present element to the
    desired location of the element being acted upon by Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: The Cypress scroll algorithm continually scrolls until an element becomes visible
    or until an element is no longer being covered up by other elements. The algorithm
    does a good job of ensuring that most elements on the DOM can be scrolled to and
    interacted with when they are in view.
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Cypress has completed the verification process of checking whether the
    elements are actionable or not, by default it fires events to the center of the
    element. Cypress provides a mechanism to override the default position of firing
    the events and the behavior can be customized for most commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows changing the firing behavior of a click event
    on a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code block, we navigate to our Todo application and add two todo items,
    then mark one of the todo items as completed. When marking our first todo item
    as complete, we changed the position of the click and instructed Cypress to click
    on the `topLeft` position instead of the default `center` position. The following
    screenshot shows the **event hitbox** of the `click` command on the top-left part
    of the clicked todo item action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Changing the coordinates of a Cypress click position'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_7.1_B15616.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Changing the coordinates of a Cypress click position
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: An event hitbox is a highlight that pops up on the pinned Cypress snapshots
    to show that the test interacted with the element. An event hitbox can be triggered
    by Cypress events such as the `.click()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'As *Figure 7.1* illustrates, Cypress has the ability to calculate the coordinates
    of an element and determine the exact coordinates of where to click an element.
    In addition, when the coordinates of the firing behavior have changed, Cypress
    records them on the command log of the Cypress test runner. We can further check
    the console for the coordinates that Cypress prints after executing the top-left
    click on the element. The following figure shows printed coordinates of the `click`
    event of the first completed todo item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – New click position coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_7.2_B15616.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – New click position coordinates
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates shown in the screenshot are the new `.click()` command coordinates
    that we have instructed Cypress to use instead of the default commands that come
    with the actionable commands.
  prefs: []
  type: TYPE_NORMAL
- en: Recap – understanding actionability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned about how Cypress determines the actionability of
    elements and how it evaluates different elements for conditions such as visibility,
    disability, detached modes, animations, scroll properties, coordinates, and even
    `readonly` properties. We also learned how Cypress calculates animations in elements
    and how we can increase the animation threshold to reduce the sensitivity of Cypress
    detecting animations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how we can force Cypress to continue performing
    actions even when the actionability checks fail for an element and when it is
    safe to perform the forced actions on elements.
  prefs: []
  type: TYPE_NORMAL
- en: Forcing actionability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having understood what actionability is, and the checks that are required by
    Cypress to determine whether an element is actionable or not, it is also important
    to know how we can override mechanisms set in place by Cypress to check for actionability.
    In this section, we will focus on performing actions and commands even when the
    elements do not pass the actionability checks that Cypress enforces for the actionable
    commands. We will also learn how to safely implement override mechanisms for some
    elements and tests.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding Cypress actionability checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Actionability is very useful in Cypress tests as it helps us to find situations
    where users may not be able to interact with our application elements. At times,
    though, the actionability checks can get in the way of proper testing, which leads
    us to our next mission: overriding the safety checks.'
  prefs: []
  type: TYPE_NORMAL
- en: In some tests, "acting like a user" may not be worth it as, at the end of the
    day, the goal is to write meaningful tests that can prevent bugs and defects in
    an automated manner. Instances such as nested navigation structures and interfaces
    may lead to complicated tests that can just be made possible by eliminating the
    nested navigation structures and instead directly interacting with the elements
    that we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'To override the Cypress actionability checks, we can pass the `{force: true}`
    parameter option to the Cypress actionable commands. The option will instruct
    Cypress to override all the checks that check for actionability and instead proceed
    with the default actions. The following code block is a test to mark all the todo
    items as completed using a `toggle-all` button in our Todo application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When this test runs, it will fail, as trying to toggle the first element and
    mark it as complete will lead to a test failure and an error as it is already
    marked as complete. The following screenshot shows Cypress actionability in play,
    where the test failed as a todo it could not be marked as complete due to it being
    covered by another element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Failed tests with Cypress actionability checks'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_7.3_B15616.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Failed tests with Cypress actionability checks
  prefs: []
  type: TYPE_NORMAL
- en: 'On further investigation, from *Figure 7.3*, we can verify that the first item
    could not be toggled as complete as it was already complete, which led to the
    failure. We can override this test behavior by telling Cypress to ignore the actionability
    checks before toggling all the todo items to complete, as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the test shown in the code block, it passes as we have prevented
    Cypress from checking whether the element that we need to click is covered by
    another element or not. The following screenshot shows the code running and the
    successful test of marking both todo items as completed by clicking the toggle-all
    drop-down button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Passed test with the override of the Cypress actionability checks'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_7.4_B15616.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Passed test with the override of the Cypress actionability checks
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 7.4*, Cypress ignored the checks associated with the actionability
    of the items and instead proceeded with the default action, which in our case
    was to toggle both todo items and mark them as complete. We achieved the override
    by passing the `{force: true}` option to the `click` command of the toggle button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a Cypress event is forced to happen with a forced option, Cypress does
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Continues to perform all the default actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcibly fires the event at the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, Cypress will not do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the element is visible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll the element to view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the element is not disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the element is not detached
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the element is not animating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the element is not covered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the element is not readonly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire the event at the descendant element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Forcing actionability is useful especially when you do not need to go through
    the pain of automating steps that are not worth the time it will take to automate
    them; however, at times, it is not the best solution to the problem at hand. Most
    of the issues that we face when we are forcing actionability can be addressed
    by writing better application code and ensuring the proper alignment of items
    such that no element is blocking another. We can also utilize Cypress to overcome
    situations such as animations as we can wait for the animations to stop running
    and then execute our tests once we are sure that the page animations have been
    completed.
  prefs: []
  type: TYPE_NORMAL
- en: When actionability is forced on a command, Cypress forgoes its role of ensuring
    that the right conditions are met before any action can be performed on an element
    and instead just performs the issued condition on the test.
  prefs: []
  type: TYPE_NORMAL
- en: Recap – forcing actionability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we have learned that it is possible to force actionability
    on an element, and this is achieved by passing in a `{force: true}` parameter
    to the actionable command being issued on an element. We have also seen that there
    is a significant difference when we force a command to be executed in Cypress
    as exemplified by the test of toggling our todo items as complete. In this section,
    we also understood when it is important to override Cypress actionability and
    how it can potentially reduce test complexity.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how Cypress enforces actionability for elements
    by ensuring that they are in the correct state before commands are performed on
    the elements. We learned that Cypress checks for visibility, disability, DOM detachment,
    `readonly` modes, animations, covering, scrolling, and element coordinates before
    it performs any action on an element. We also went through how Cypress calculates
    the animation of elements and even how it changes the coordinates when actions
    are being performed on elements. We also learned that it is possible to override
    the default checks that Cypress puts in place by forcing actionability in our
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this chapter, I believe you have the skills needed to understand
    how Cypress determines actionability for elements and also how we can override
    actionability in our tests to reduce complexity. In the next chapter, we will
    look at using variables and aliases, and we will dive into reusing variables and
    aliases that we define in our tests more than once.
  prefs: []
  type: TYPE_NORMAL
