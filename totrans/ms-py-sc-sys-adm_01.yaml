- en: Python Scripting Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a scripting language, created by Guido van Rossum in 1991, which is
    used in various applications, such as game development, GIS programming, software
    development, web development, data analytics, machine learning, and system scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Python is an object-oriented, high-level programming language with dynamic semantics.
    Mainly, Python is an interpreted language. Python is used for rapid application
    development, as it has all of the advanced features for development.
  prefs: []
  type: TYPE_NORMAL
- en: Python is simple and easy to learn, as its syntax makes programs more readable.
    Hence, the program maintenance cost is low.
  prefs: []
  type: TYPE_NORMAL
- en: Python has one more important feature of importing modules and packages. This
    feature allows for code reuse. The Python interpreter is easy to understand. We
    can write the complete code one by one in it and, as Python is an interpreted
    language, the code gets executed line by line. Python also has a wide range of
    libraries for advanced functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Python scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using Python and various tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables, numbers, and strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python supported data structures and how to use all of these concepts in a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision making; that is, the `if` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looping statements; that is, the `for` and `while` loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start reading this book, you should know the basics of Python programming,
    such as the basic syntax, variable types, tuple data type, list dictionary, functions,
    strings, and methods. Two versions, 3.7.2 and 2.7.15, are available at [python.org/downloads/](https://www.python.org/downloads/).
    In this book we'll work with version 3.7 for code examples and package installing.
  prefs: []
  type: TYPE_NORMAL
- en: Examples and source code for this chapter are available in the GitHub repository: [https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-](https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-).
  prefs: []
  type: TYPE_NORMAL
- en: Why Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has a wide range of libraries for open source data analysis tools, web
    frameworks, testing, and so on. Python is a programming language that can be used
    on different platforms (Windows, Mac, Linux, and embedded Linux H/W platforms,
    such as Raspberry Pi). It's used to develop desktop as well as web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can write programs with fewer lines if they use Python. Prototyping
    is very quick, as Python runs on an interpreter system. Python can be treated
    in an object-oriented, a procedural, or a functional way.
  prefs: []
  type: TYPE_NORMAL
- en: Python can do various tasks, such as creating web applications. It is used with
    the software to create workflows; it connects to database systems, handles files,
    handles big data, and performs complex mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: Python syntax compared to other programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code written in Python is highly readable because it's similar to the English
    language. To complete a command, Python uses new lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has a great feature: indentation. Using indentations, we can define
    the scope for decision-making statements, loops such as `for` and `while` loops,
    functions, and classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Python installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be learning about the installation of Python on different
    platforms, such as Linux and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on the Linux platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most Linux distributions have Python 2 in their default installations. Some
    of them also have Python 3 included.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `python3` on Debian-based Linux, run the following command in the
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `python3` on `centos`, run the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are unable to install Python using the preceding commands, download Python
    from [https://www.python.org/downloads/](https://www.python.org/downloads/) and
    follow the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on the Windows platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For installing Python in Microsoft Windows, you'll have to download the executable
    from `python.org` and install it. Download `python.exe` from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and choose the Python version that you want install on your PC. Then, double-click
    on the downloaded `exe` and install Python. On the installation wizard, there's
    checkbox that says **Add Python to the path**. Check this checkbox and then follow
    the instructions to install `python3`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using pip to install packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Linux, install `pip` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows, install `pip` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installation on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install `python3`, first we must have `brew` installed on our system. To
    install `brew` on your system, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By running the preceding command. `brew` will get installed. Now we will install
    `python3` using `brew`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Installing Jupyter notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For installing the Jupyter Notebook, download Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: Install the downloaded version of Anaconda and follow the instructions on the
    wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Jupyter using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux, `pip install jupyter` will install Jupyter for `python 2`. If you
    want to install `jupyter` for `python 3`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installing and using the virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will see how to install the virtual environment and how to activate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the virtual environment on Linux, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First check whether `pip` is installed or not. We are going to install `pip`
    for `python3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the virtual environment using `pip3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the virtual environment. You can give it any name; I have
    called it `pythonenv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Activate your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After your work is done, you can deactivate `virtualenv` by using following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In Windows, run the `pip install virtualenv` command to install the virtual
    environment. The steps for installing `virtualenv` are same as with Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Geany and PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download Geany from [https://www.geany.org/download/releases](https://www.geany.org/download/releases)
    and download the required binaries. Follow the instructions while installing.
  prefs: []
  type: TYPE_NORMAL
- en: Download PyCharm from [https://www.jetbrains.com/pycharm/download/#section=windows](https://www.jetbrains.com/pycharm/download/#section=windows)
    and follow the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Python interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is an interpreted language. It has an interactive console called the
    Python interpreter or Python shell. This shell provides a way to execute your
    program line by line without creating a script.
  prefs: []
  type: TYPE_NORMAL
- en: You can access all of Python's built-in functions and libraries, installed modules,
    and command history in the Python interactive console. This console gives you
    the opportunity to to explore Python. You're able to paste code into scripts when
    you are ready.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between Python and Bash scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to learn about the difference between Python
    and Bash scripting. The differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Python is a scripting language, whereas Bash is a shell used for entering and
    executing commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with larger programs is easier with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Python, you can do most things just by calling a one-line function from imported
    modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the interactive console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access Python''s interactive console from any computer that has Python
    already installed. Run the following command to start Python''s interactive console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will start the default Python interactive console.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, if we write `Python` in the Terminal, the `python2.7` console starts.
    If you want to start the `python3` console, then enter `python3` in the Terminal
    and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, when you enter `Python` in Command Prompt, it will start the console
    of the downloaded Python version.
  prefs: []
  type: TYPE_NORMAL
- en: Writing scripts with the Python interactive console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python interactive console starts from `>>> prefix`. This console will
    accept the Python commands, which you''ll write after `>>> prefix`. Refer to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9a71f44-f130-456b-bbaa-3dbbe4b47bed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will see how to assign values to the variable, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''ve assigned a character value of `John` to the `name` variable. We
    pressed *Enter* and received a new line with `>>> prefix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see an example of assigning values to variables and then we will
    perform a math operation to get the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we assigned values to variables, added two variables, stored the result
    in a third variable, and printed the result on to the Terminal. Next, we subtracted
    one variable from the result variable, and the output will get stored in the fourth
    variable. Then, we printed the result on to the Terminal. So this tells us that
    we can also use the Python interpreter as a calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we performed a division operation. We divided `509` by `22` and the result
    we got is `23.136363636363637.`
  prefs: []
  type: TYPE_NORMAL
- en: Multiple lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we write multiple lines of code in the Python interpreter (for example,
    the `If` statement and `for` and `while` loop functions), then the interpreter
    uses three dots (`...`) as a secondary prompt for line continuation. To come out
    of these lines, you have to press the *Enter* key twice. Now we will look at the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we''ve assigned integer values to two variables, `val1` and
    `val2`, and we''re checking whether `val1` is greater than `val2` or not. In this
    case, `val1` is greater than `val2`, so the statement in the `if` block gets printed.
    Remember, statements in `if` and `else` blocks are indented. If you don''t use
    indentation, you will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Importing modules through the Python interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are importing any module, then the Python interpreter checks if that
    module is available or not. You can do this by using the `import` statement. If
    that module is available, then you will see the `>>>` prefix after pressing the *Enter*
    key. This indicates that the execution was successful. If that module doesn''t
    exist, the Python interpreter will show an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After importing the `time` module, we get the `>>>` prefix. This means that
    the module exists and this command gets executed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the module doesn''t exist, then you will get `Traceback` error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So here, `matplotlib` isn''t available, so it gives an error: `ImportError:
    No module named ''matplotlib''.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this error, we will have to install `matplotlib` and then again try
    to import `matplotlib`. After installing `matplotlib`, you should be able to import
    the module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Exiting the Python console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can come out of the Python console in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard shortcut: *Ctrl + D*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `quit()` or `exit()` functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keyboard shortcut
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The keyboard shortcut, *Ctrl + D,* will give you the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using the quit() or exit() functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`quit()` will take you out of Python''s interactive console. It will also take
    you to the original Terminal you were previously in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Indentation and tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Indentation is a must when writing block code in Python. Indentation is useful
    when you are writing functions, decision-making statements, looping statements,
    and classes. This makes it easy to read your Python programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use indentation to indicate the block of code in Python programs. To indent
    a block of code, you can use spaces or tabs. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we indented the `print` statement because it comes
    under the `if` block. The next print statement doesn't come under the `if` block
    and that's why we didn't indent it.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like other programming languages, there's no need to declare your variables
    first. In Python, just think of any name to give your variable and assign it a
    value. You can use that variable in your program. So, in Python, you can declare
    variables whenever you need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the value of a variable may change during the program execution,
    as well as the type. In the following line of code, we assign the value `100`
    to a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of a type of variable that can change during execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Python takes care of the representation for the different data types; that
    is, each type of value gets stored in different memory locations. A variable will
    be a name to which we''re going to assign a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This example makes three assignments. The first assignment is a string assignment
    to the variable named `msg`. The second assignment is an integer assignment to
    the variable named `a` and the last assignment is a `pi` value assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of a variable is the type of the value it refers to. Look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Creating and assigning values to variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, variables don't need to be declared explicitly to reserve memory
    space. So, the declaration is done automatically whenever you assign a value to
    the variable. In Python, the equal sign `=` is used to assign values to variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we assigned `John` to the `name` variable, `25` to
    the `age` variable, `USA` to the `address` variable, and `85.5` to the `percentage`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: We don't have to declare them first as we do in other languages. So, looking
    at the value interpreter will get the type of that variable. In the preceding
    example, `name` and `address` are `strings`, age is an integer, and percentage
    is a floating type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple assignments for the same value can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created three variables and assigned an integer
    value `1` to them, and all of these three variables will be assigned to the same
    memory location.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, we can assign multiple values to multiple variables in a single
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, we declared one string variable, `y`, and assigned the value `John` to
    it and two integer variables, `x` and `z`, and assigned values `10` and `80` to
    them, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python interpreter can also act as a calculator. You just have to type
    an expression and it will return the value. Parentheses `( )` are used to do the
    grouping, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The integer numbers are of the `int` type and a fractional part is of the `float` type.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, the division (`/`) operation always returns a float value. The `floor`
    division (`//`) gets an integer result. The `%` operator is used to calculate
    the remainder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate powers, Python has the `**` operator, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The equal sign (`=`) is used for assigning a value to a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If a variable does not have any value and we still try to use it, then the
    interpreter will show an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If the operators have mixed types of operands, then the value we get will be
    of a floating point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Python interactive console, `_` contains the last printed expression
    value, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Number data types store numeric values, which are immutable data types. If we
    do this, Python will allocate a new object for the changed data type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create number objects just by assigning a value to them, as shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `del` statement is used to delete single or multiple variables. Refer to
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Number type conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some situations, you need to convert a number explicitly from one type to
    another to satisfy some requirements. Python does this internally in an expression
  prefs: []
  type: TYPE_NORMAL
- en: Type `int(a)` to convert `a` into an integer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type `float(a)` to convert `a` into a floating-point number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type `complex(a)` to convert `a` into a complex number with real part `x` and
    imaginary part `zero`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type `complex(a, b)` to convert `a` and `b` into a complex number with real
    part `a` and imaginary part `b`. `a` and `b` are numeric expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like numbers, strings are also one of the data structures in Python. Python
    can manipulate strings. Strings can be expressed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enclosed in single quotes (`'...'`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enclosed in double quotes (`"..."`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A string is a set of characters. We can access the characters one at a time,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second statement, we are selecting the character number `1` from `city`
    and assigning it to `letter`. The number in those square brackets is an index.
    The index indicates which character you want to access. It starts from `0`. So,
    in the preceding example, when you will execute `letter = city[1]`, you will get
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Concatenation (+) and repetition (*)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, comes concatenation and repetition. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are doing string concatenation and repetition.
    `3 * 'hi'` means `hi` gets printed `3` times and, using the `+` sign, we are joining
    the `hello` string next to `hi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can automatically concatenate two strings just by writing them next to each
    other. These two strings must be enclosed between quotes, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This feature is really helpful when you have long strings and you want to break
    them. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: String slicing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strings support slicing, which means getting characters by a specified range
    from your string. Let's take a look at the following example. Note that starting
    index value is always included and an end value is always excluded.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a string, `str = "Programming":`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the default of an omitted first index is zero, as in the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Accessing values in strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access characters from strings using slicing by using square brackets.
    We can also access characters from strings between the specified range. Refer
    to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Updating strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can update a string by reassigning a new value to the specified index. Refer
    to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Escape characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python supports escape characters that are non-printable and can be represented
    with a backslash notation. An escape character gets interpreted in both single
    and double quoted strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Notations** | **Hex characters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | `0x07` | Bell or alert |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | `0x08` | Backspace |'
  prefs: []
  type: TYPE_TB
- en: '| `cx` |  | Control-`x` |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | `0x0a` | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| `C-x` |  | Control-`x` |'
  prefs: []
  type: TYPE_TB
- en: '| `e` | `0x1b` | Escape |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | `0x0c` | Form feed |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | `0x20` | Space |'
  prefs: []
  type: TYPE_TB
- en: '| `M-C-x` |  | Meta-control-`x` |'
  prefs: []
  type: TYPE_TB
- en: '| `x` |  | Character `x` |'
  prefs: []
  type: TYPE_TB
- en: '| `nnn` |  | Octal notation, where `n` is in the range 0.7 |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | `0x0d` | Carriage return |'
  prefs: []
  type: TYPE_TB
- en: '| `xnn` |  | Hexadecimal notation, where `n` is in the range `0.9`, `a.f`,
    or `A.F` |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | `0x09` | Tab |'
  prefs: []
  type: TYPE_TB
- en: '| `v` | `0x0b` | Vertical tab |'
  prefs: []
  type: TYPE_TB
- en: Special string operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table shows string''s special operators. Consider `a` is `Hello`
    and `b` is `World`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Concatenation: adds values on either side of the operator | `a + b`
    will give `HelloWorld` |'
  prefs: []
  type: TYPE_TB
- en: '| `[]` | Slice: gives the character from the given index | `a[7]` will give
    `r` |'
  prefs: []
  type: TYPE_TB
- en: '| `[ : ]` | Range slice: gives the characters from the given range | `a[1:4]`
    will give `ell` |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Repetition: creates new strings, concatenating multiple copies of the
    same string | `a*2` will give `HelloHello` |'
  prefs: []
  type: TYPE_TB
- en: '| `not in` | Membership: returns `true` if a character does not exist in the
    given string | `Z` not in a `will` give `1` |'
  prefs: []
  type: TYPE_TB
- en: '| `in` | Membership: returns `true` if a character exists in the given string
    | `H` in `a` will give `1` |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | Format: performs string formatting |  |'
  prefs: []
  type: TYPE_TB
- en: '%  string formatting operator'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`%` is a string formatting operator in Python. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows a list of symbols used along with `%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **S.No.** | **Format symbol and conversion** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `%c` – character |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `%s` – string conversion via `str()` prior to formatting |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `%i` – signed decimal integer |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `%d` – signed decimal integer |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `%u` – unsigned decimal integer |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `%o` – octal integer |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `%x` – hexadecimal integer (lowercase letters) |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `%X` – hexadecimal integer (uppercase letters) |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `%e` – exponential notation (with lowercase `e`) |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `%E` – exponential notation (with uppercase `E`) |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | `%f` – floating point real number |'
  prefs: []
  type: TYPE_TB
- en: Triple quotes in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python''s triple quotes functionality for strings is used to span multiple
    lines, including newlines and tabs. The syntax for triple quotes consists of three
    consecutive single or double quotes. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'It produces the following output. Note the tabs and newlines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Strings are immutable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Strings are immutable, meaning we can''t change the values. Refer to the given
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'As the strings are immutable; we cannot change an existing string. But we can
    create a new string that will be different from the original:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Understanding lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python supports a data structure called `list`, which is a mutable and ordered
    sequence of elements. Each element in that list is called as item. Lists are defined
    by inserting values between square brackets `[ ]`. Each element of `list` is given
    a number, which we call as a position or index. The index starts from zero; that
    is, the first index is zero, the second index is 1, and so on. We can perform
    the following operations on lists: indexing, slicing, adding, multiplying, and
    checking for membership.'
  prefs: []
  type: TYPE_NORMAL
- en: Python's built-in `length` function returns the length of that list. Python
    also has function for finding the largest and smallest item of `list`. Lists can
    be numbered lists, string lists, or mixed list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for creating a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''ve created three lists: the first is `numbers`, the second is `animals`,
    and the third is `list1`. A list within another list is called as nested list.
    Our `list1` is a nested list. A list containing no elements is called an empty
    list; you can create one with empty brackets, `[]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might expect, you can assign list values to variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Accessing values in lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access the values from a list by using index values. We will specify
    the index number in `[ and ]`. Index starts from `0`. Refer to the given example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Updating lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can update elements of lists, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Deleting list elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remove a list element, you can use either the `del` statement if you know
    exactly which element(s) you are deleting. You can use the `remove()` method if
    you do not know exactly which items to delete. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Basic list operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five basic list operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repetition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Membership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Description** | **Expression** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '|  Concatenation | ` [30, 50, 60] + [''Hello'', 75, 66]` | ` [30,50,60,''Hello'',75,66]`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Membership | ` 45 in [45,58,99,65]` | ` True` |'
  prefs: []
  type: TYPE_TB
- en: '|  Iteration | ` for x in [45,58,99] : print (x,end = '' '')` | ` 45 58 99`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Repetition | ` [''Python''] * 3` | ` [''python'', ''python'', ''python'']`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Length | ` len([45, 58, 99, 65])` | ` 4` |'
  prefs: []
  type: TYPE_TB
- en: List operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about basic list operations: concatenation
    and repetition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `+` operator concatenates lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the `*` operator repeats a list a given number of times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Indexing, slicing, and matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: List indices work the same way as string indices. Values can be accessed using
    `index`. If you try to read or write an element that does not exist, you get `IndexError`.
    If an index has a negative value, it counts backward from the end of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a list named `cities` and we will see the index operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cities = [''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'']`'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **Expression** | **Results** |'
  prefs: []
  type: TYPE_TB
- en: '| Index start at zero | `cities[2]` | `''Chennai''` |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing: getting sections | `cities[1:]` | `[''Bangalore'', ''Chennai'',
    ''Pune'']` |'
  prefs: []
  type: TYPE_TB
- en: '| Negative: count from the right | `cities[-3]` | `''Bangalore''` |'
  prefs: []
  type: TYPE_TB
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python''s tuple data structure is immutable, meaning we cannot change the elements
    of the tuples. Basically, a tuple is a sequence of values that are separated by
    commas and are enclosed in parentheses `( )`. Like lists, tuples are an ordered
    sequence of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Tuples are enclosed in parentheses `( )`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create a tuple with a single element. You just have to put a final
    comma in the tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'A value in parentheses is not a tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create an empty tuple using the `tuple()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If the argument is a sequence (string, list, or tuple), the result is a tuple
    with the elements of the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Tuples have values between parentheses `( )` separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The slice operator selects a range of elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Accessing values in tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To access values in a tuple, use the square brackets for slicing along with
    the index or indices to obtain the value available at that index or indices, as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Updating tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tuple updating is not possible in Python, as tuples are immutable. But you
    can create a new tuple with an existing tuple, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Deleting tuple elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We cannot remove individual tuple elements. So, to remove an entire tuple explicitly,
    use the `del` statement. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Basic tuple operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like lists, there are five basic tuple operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repetition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Membership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iteration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Description** | **Expression** | **Results** |'
  prefs: []
  type: TYPE_TB
- en: '|  Iteration | ` for x in (45,58,99) : print (x,end = '' '')` | ` 45 58 99`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Repetition | ` (''Python'') * 3` | ` (''python'', ''python'', ''python'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Length | ` len(45, 58, 99, 65)` | ` 4` |'
  prefs: []
  type: TYPE_TB
- en: '|  Concatenation | ` (30, 50, 60) + (''Hello'', 75, 66)` | ` (30,50,60,''Hello'',75,66)`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Membership | ` 45 in (45,58,99,65)` | ` True` |'
  prefs: []
  type: TYPE_TB
- en: Indexing, slicing, and matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tuple indices work the same way as list indices. Values can be accessed using
    index. If you try to read or write an element that does not exist, you get `IndexError`.
    If an index has a negative value, it counts backward from the end of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a tuple named `cities` and perform some index operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cities = (''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **Expression** | **Results** |'
  prefs: []
  type: TYPE_TB
- en: '| Index starts at zero | `cities[2]` | `''Chennai''` |'
  prefs: []
  type: TYPE_TB
- en: '| Slicing: getting sections | `cities[1:]` | `(''Bangalore'', ''Chennai'',
    ''Pune'')` |'
  prefs: []
  type: TYPE_TB
- en: '| Negative: count from the right | `cities[-3]` | `''Bangalore''` |'
  prefs: []
  type: TYPE_TB
- en: max() and min()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `max()` and `min()` functions, we can find the highest and lowest
    values from the tuple. These functions allow us to find out information about
    quantitative data. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `max(),` we will get the highest value in our tuple. Similarly, we can
    use the `min()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: So, here we are getting the minimum value.
  prefs: []
  type: TYPE_NORMAL
- en: Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A set is an unordered collection of elements with no duplicates. The basic use
    of a set is to check membership testing and eliminate duplicate entries. These
    set objects support mathematical operations, such as union, intersection, difference,
    and symmetric difference. We can create a set using curly braces or the `set()`
    function. If you want create an empty set, then use `set()`, not `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a brief demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Set comprehensions are also supported in Python. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dictionary is a data type in Python, which consists of key value pairs and
    is enclosed in curly braces `{}`. Dictionaries are unordered and indexed by keys,
    where each key must be unique. These keys must be immutable type. Tuples can be
    used as keys if they contain only strings, numbers, or tuples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a pair of braces creates an empty dictionary: `{ }`. The main operations
    on a dictionary are storing a value with some key and extracting the value given
    to the key. It is also possible to delete a key value pair with `del`. If you
    store using a key that is already in use, the old value associated with that key
    is forgotten. It is an error to extract a value using a non-existent key. Here
    is a small example using a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Arbitrary key and value expressions along with dictionary comprehensions are
    used to create dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'When the keys are simple strings, it is sometimes easier to specify pairs using
    keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Parsing command-line arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about parsing arguments and the module
    used to parse arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line arguments in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can start a program with additional arguments, in the command line. Python
    programs can start with command-line arguments. Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Here, `program_name.py` and `img.jpg` are arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to use modules to get the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module** | **Use** | **Python version** |'
  prefs: []
  type: TYPE_TB
- en: '| `optparse` | Deprecated | `< 2.7` |'
  prefs: []
  type: TYPE_TB
- en: '| `sys` | All arguments in `sys.argv` (basic) | All |'
  prefs: []
  type: TYPE_TB
- en: '| `argparse` | Building a command-line interface | `>= 2.3` |'
  prefs: []
  type: TYPE_TB
- en: '| `fire` | Automatically generating **Command-Line Interfaces** (**CLIs**)
    | All |'
  prefs: []
  type: TYPE_TB
- en: '| `docopt` | Creating CLIs interfaces | `>= 2.5` |'
  prefs: []
  type: TYPE_TB
- en: Sys.argv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sys` module is used to access command-line parameters. The `len(sys.argv)` function
    contains the number of arguments. To print all of the arguments, simply execute
    `str(sys.argv)`. Let''s have a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Decision making
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to execute a code block when the condition is `true`, decision
    making comes to the rescue. The `if...elif...else` statement is used in Python
    for decision making.
  prefs: []
  type: TYPE_NORMAL
- en: Python if statement syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the syntax for the `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Here, the program evaluates the test expression and will execute `statement(s)`
    only if the text expression is `true`. If the text expression is `false`, `statement(s)`
    isn't executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the body of the `if` statement is indicated by the indentation.
    The body starts with an indentation and the first unindented line marks the end.
    Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Python if...else statement syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about the `if..else` statement. The
    `else` block will get executed only when the `if` condition is `false`. Refer
    to the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The `if..else` statement evaluates the test expression and will execute the
    body of `if` only when the test condition is `true.` If the condition is `false,`
    the body of `else` is executed. Indentation is used to separate the blocks. Refer
    to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Python if...elif...else statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `elif` statement checks multiple statements for a `true` value. Whenever
    the value evaluates to `true`, that code block gets executed. Refer to the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '`elif` is short for `else if`. It allows us to check for multiple expressions.
    If the condition written in the `if` statement is `false`, then it will check
    the condition of the next `elif` block, and so on. If all of the conditions are
    `false`, the body of `else` is executed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Only one block among the several `if...elif...else` blocks is executed according
    to the condition. The `if` block can have only one else block. But it can have
    multiple `elif` blocks. Let''s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To handle all of the looping requirements in your script, Python supports two
    loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '`for loop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while loop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we are going to learn about `for loop` and `while loop`.
  prefs: []
  type: TYPE_NORMAL
- en: for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`for loop` iterates over each item of the sequence or any other iterable object
    and it will execute the statements in the for block each time. Refer to the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `i` is the variable that takes the value of the item inside the sequence
    on each iteration. This loop continues until we reach the last item in the sequence.
    This is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/822a75d6-353a-4464-9de9-1cfbff43b9e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The range() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python `range()` function will generate a sequence of numbers. For example,
    `range(10)` will generate numbers from `0` to `9` (10 numbers).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also define the start, stop, and step size as parameters and `range()`
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: while loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`while` is a looping statement that will iterate over a block of code until
    the entered test expression is `true`. We use this loop when we don''t know how
    many times the iterations will go on. Refer to the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'In the while loop, first we will check the test expression. The `while` block
    will get executed only if the test expression is `true`. After one iteration,
    the expression will be checked again and this process continues until `test_expression`
    evaluates to `false`. This is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ce57a7e-fd01-43c8-87d0-61c72da1a24f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is an example of the `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Iterators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, an iterator is an object that can be iterated upon. It is an object
    that will return data, one element at a time. Python's iterator object implements
    two methods, `__iter__()` and `__next__()`. Mostly, iterators are implemented
    within loops, generators, and comprehensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we are using the `next()` function, which will iterate
    through all of the items. After reaching the end and there is no more data to
    be returned, it will raise `StopIteration`, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create iterators using Python generators. In Python, a generator is a
    function that returns an object that we can iterate over.
  prefs: []
  type: TYPE_NORMAL
- en: How to create a generator in Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a generator is easy in Python. You can create a generator just by
    defining a function with a `yield` statement instead of a `return` statement.
    If a function contains at least one `yield` statement, it becomes a generator
    function. `yield` and `return` statements will return some value from a function.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A function is a set of statements that perform a specific task. Using functions
    helps in breaking our program into smaller parts. Programs will be more organized
    if we use functions as it avoids repetition and makes code reusable. Look at the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The return statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `return` statement is used to exit a function. Refer to the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'This statement may contain an expression where a value has to be returned.
    If there is no expression, then the function will return a None object, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Lambda functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, an anonymous function is a function that is defined without a name
    and is called a `lambda` function, as it is defined using a keyword `lambda`.
    We use these functions whenever we require a function for a short period of time.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda functions are used along with built-in functions, such as `filter()`,
    and `map()`.
  prefs: []
  type: TYPE_NORMAL
- en: The filter() function returns a list of elements and has only one iterable as
    input. The following shows an example using `filter():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `filter()` function is taking a `lambda` function and a
    list as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: The `map()` function returns a list of results after applying the specified
    function. Now, let's look at an example using `map():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `map()` function is taking a `lambda` function and a list.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules are just files that contain Python statements and definitions. A file
    that contains Python code (for example, `sample.py`) is called a module and its
    module name would be `sample`. Using modules, we can break larger programs into
    small and organized ones. An important feature of a module is re-usability. Instead
    of copying the definitions of the most used functions in different programs, you
    can define them in the module and just import them whenever needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a module and import it. We will create two scripts: `sample.py`
    and `add.py`. We will import a sample module in our `add.py`. Now, save the following
    code as `sample.py`. Let''s take a look with the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined a `addition()` function inside a module named `sample`.
    The function takes in two numbers and returns their sum. Now we have created a
    module. You can import this in any Python program.
  prefs: []
  type: TYPE_NORMAL
- en: Importing modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, after creating a module, we will learn how to import that module. In the
    previous example, we created a sample module. Now we will import the sample module
    in `add.py script`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've given an overview of the Python scripting language. We
    have learned about how to install Python and various tools. We also learned about the
    Python interpreter and how to use it. We learned about Python-supported data types,
    variables, numbers and strings, decision-making statements, and looping statements
    in Python. We also learned about functions and how to use them in scripts and
    modules and how to create and import them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, *Debugging and Profiling Python Scripts*, you will learn
    about Python debugging techniques, error handling (exception handling), debuggers
    tools, debugging basic program crashes, profiling and timing programs, and making
    programs run faster.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are iterators and generators ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are lists mutable or immutable ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the data structures in Python ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to access values in a list ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are modules ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the Python documentation is available on the following site: [www.python.org](http://www.python.org).
  prefs: []
  type: TYPE_NORMAL
- en: You can also check the following books, *Learn Python Hard Way* and *Byte of
    Python*, to cover the basics of Python.
  prefs: []
  type: TYPE_NORMAL
