- en: Chapter 4. Demonstrating Nonfunctional Reactive Programming – A Live Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at a live example that incorporates some
    principles of reactive programming with ReactJS. Some portions of the program
    remain imperative as a port of something that was previously written in jQuery
    after other ports from HP-28S RPN and Unix C, but ReactJS's power still shines
    through, even with code that, like much of the code in the real world, has gone
    through multiple iterations. We will briefly look at the HTML requirements of
    the web page, before going through the real meat in JavaScript. The web page offers
    a port of a video game originally developed on an HP-28S graphing scientific calculator,
    and retains much of the calculator's look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The HTML for the web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JavaScript that animates the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here we see the game, as rendered against the background of a classic HP28S
    calculator. Effort has been taken so that character graphics mimic the dark and
    light colors as existed on the LED screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Demonstrating Nonfunctional Reactive Programming – A Live Example](img/B04108_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The history of a game with multiple ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The title specifies that we are making a port of an HP28S RPN game, so let's
    look at a bit of history of the specific game that we are implementing.
  prefs: []
  type: TYPE_NORMAL
- en: This game has had different implementations and different ports, including reimplementation
    in C, and a couple of ways with HTML or JavaScript. The original version was on
    an HP28S, a hackerly scientific calculator that could have 32 KB or a whopping
    512 KB of RAM (mine had 512 KB). Programming and use (the two are not terribly
    different, as in Unix/Linux shell programming) **Reverse Polish Notation** (**RPN**)
    ([http://en.wikipedia.org/wiki/Reverse_Polish_notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation)).
    There were a lot of interesting depths in the calculator as far as hacking was
    concerned, and I made two programs that I specifically remember. One was a fractal
    screen saver with the humble two-dimensional *staggering drunk* algorithm (see
    [http://tinyurl.com/reactjs-staggering-drunk](http://tinyurl.com/reactjs-staggering-drunk)),
    and the other was the video game that will be reimplemented here.
  prefs: []
  type: TYPE_NORMAL
- en: The basic game, implemented with dingbat character graphics, had a spaceship
    moving from left to right, in a field with asteroids that grew denser from level
    to level. The primary game mechanics was intended to be the dodging of asteroids
    as you went through. You could shoot asteroids as well. This was really necessary
    because some of the (naïvely) randomly drawn levels did not necessarily have a
    clear route available. To discourage the game mechanics of simply shooting all
    the way through each level, shooting asteroids was penalized, and intended as
    more of a last resort than the maneuvering that intended as the primary game mechanics.
    A friend of mine commented that it was the first video game he knew where the
    player actually lost points for shooting things.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML for the web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We open with a standard HTML5 DOCTYPE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Following this, we open the document, specifying UTF-8 as the charset. If the
    web page is served correctly, the charset should be specified with the page download,
    but this is still potentially helpful in terms of defensive coding, which is always
    something to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence the document title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The font used here is a retro VT series font, associated with the venerable
    VT100 and other series of Unix terminals. Note—as will be seen in code later—that
    while the VT100 series was a monospaced terminal, the font is not strictly a monospaced
    font and simply displaying each row of spaces or asteroids inline will have undesired
    spacing, so each character is positioned absolutely. Perhaps another font may
    not have this problem, but there's a nice retro tint to the VT100 font.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will be including dingbats for much of the character graphics.
    They are dealt within the JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The font tags, like some other tags used on the HTML side, are written via
    the HTTP/HTTPS ambidextrous format of two leading slashes, with `http:` or `https:`
    not specified, and being supplied to be the same as in the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using a content distribution network wherever we can
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We load ReactJS from a **content distribution network** (**CDN**), following
    Steve Souders' widely established Yslow ("Why is my web page slow to load?") recommendation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Steve Souders ([http://SteveSouders.com](http://SteveSouders.com)) pioneered
    a realization, initially just at Yahoo!, that rendering web pages that would be
    working more quickly wasn't really about shaving off milliseconds or microseconds
    of server-side performance. There was a significant low-hanging fruit in terms
    of influencing the client to be more performant, for instance, by not loading
    the same resource from the network again and again when it could be loaded with
    lightning speed from a computer's cache.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a lot of JavaScript libraries and frameworks available from
    a CDN hit, including ReactJS, but there are also almost any other major or minor
    JavaScript tool you would want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Some simple styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We give the page some basic styling. The background image is loaded from [http://haywardfamily.org/hp28s.png](http://haywardfamily.org/hp28s.png).
    You can make a local copy if you wish, or if there are issues over HTTPS or if
    you are serving up the files locally where the HTTP/HTTPS ambidextrous hack sadly
    fails to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The color for the text in **p#display** is taken from a screenshot of an HP28S
    calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Some simple styling](img/B04108_04_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the last part of the page header.
  prefs: []
  type: TYPE_NORMAL
- en: A fairly minimal page body
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We build the page body, which has an image of an HP-28S calculator as the background.
    We also include a brief legend and space for the game to display on the virtual
    calculator screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Before closing the body tag, we load the main script, which will use ReactJS
    to animate the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is the end of the HTML for the page. The JavaScript, which contains the
    real meat as far as programming is concerned, will now follow.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript that animates that page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We might briefly note that the script is regular JavaScript, rather than ReactJS's
    JSX format, which allows mixing of HTML-like XML and JavaScript and has been called
    the tool that puts angle brackets in your scripts. Not all people will go with
    JSX, but the tool is worth knowing about if nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: JSX has many merits and is worth considering. It is used by perhaps some, but
    not all non-Facebook ReactJS users, as well as by Facebook. Facebook has been
    careful to support JSX but has not required it to use ReactJS. For development
    purposes, JSX scripts can be loaded after a web page loads, from [http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js](http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js)
    for example, and compiled in the browser. For production purposes, they need to
    be compiled in JavaScript, in which case you can run `npm install jsx` and then
    run the `jsx` compiler from the command line, as documented at [https://www.npmjs.com/package/jsx](https://www.npmjs.com/package/jsx).
  prefs: []
  type: TYPE_NORMAL
- en: A brief syntax note – Immediately Invoked Function Expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our script, we use an **Immediately Invoked Function Expression** (**IIFE**)
    so that our local variables, defined with the `var` keyword somewhere within the
    function or its dependencies, will be protected as private within a closure. This
    will avoid the concern of a shared mutable state (as it has a nonshared mutable
    state). A shared mutable state leaves the program''s stability at the mercy of
    anyone who has sufficient access to modify the state. The function is wrapped
    in parentheses due to a quirk of JavaScript syntax, wherein a line beginning with
    a function is considered a function definition, so the following syntax will not
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution is to put the function within an enclosing pair of parentheses,
    and then it will work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Back to our main script!
  prefs: []
  type: TYPE_NORMAL
- en: Variable declaration and initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our main `wrapper` function begins nonreactively and imperatively by writing
    state variables that are only used in the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Having declared—and in some cases, initialized—these variables, we move on to
    the function used to start the game. This initializes or reinitializes variables,
    but does not include initializing the level. It starts the game by setting the
    `game_over` variable to `false`, placing the player on level 1, setting a (horizontal)
    position at the beginning, over to the left of the screen/asteroid field in the
    first of the 23 characters' width, and a vertical position in row 1 (the row below
    the top, out of 4), a score of 0, and the chance of most spaces being clear (that
    is, free of asteroids and therefore safe for the player's ship to travel in) by
    the asteroids keep getting denser! This 5/6 is the start of an exponential decay
    in the chances of a space being asteroid-free each time the player goes to a new
    level. The latter is a parameter that can be adjusted to influence the overall
    difficulty of the game, a lower value making a more difficult-to-navigate field.
    Elsewhere, between levels, the chance that a space is clear decreases exponentially;
    the rate of exponential decay, or perhaps other aspects of that feature are also
    something that could be modified to affect the difficulty of the game between
    levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we see what the display looks like when the player has almost cleared
    the first level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variable declaration and initialization](img/B04108_04_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The levels that are generated have mostly spaces, with a random chance of an
    asteroid being present, but the space that holds the spaceship initially and the
    space in front of it are always clear. This is intended to allow the player to
    get some space to react, instead of an automatic death.
  prefs: []
  type: TYPE_NORMAL
- en: The function used to start or restart the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function is invoked immediately after it is declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The function that creates game levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `get_level()` function, the level is built. The probability that a space
    is clear undergoes exponential decay (the first level, after decay, being .75,
    then .675, then .6075, and so on), with the density of asteroids increasing correspondingly,
    and then a rectangular *array of arrays of characters* is built (arrays of characters
    are used for collections of characters undergoing near-constant changes, rather
    than strings, which are immutable, even though the original implementation manipulated
    strings). Note that in internal representations here, things are represented by
    character codes: `a` for an asteroid, `s` for the player''s ship, a space for
    a blank space, and so on. (Now it may be a bit strange to store an array of arrays
    of characters that are references to other characters. On the original legacy
    system, the approach that would now be obvious was not yet available. This could
    well be refactored out now, but this chapter is the one code chapter intended
    to resemble what it''s like to get good results while dealing legacy code, and
    this wart''s presence is intended. Most of the work most developers do includes
    interfacing with legacy functionality.) Initially, all the spaces are potentially
    populated with asteroids. After that, the ship''s initial slot, and the space
    immediately in front of it, are cleared. This is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Although this function returns a grid of rows, the grid of rows will be assigned
    to be a field of an object that will be used with ReactJS. ReactJS works better
    with a property on an object than on an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of the preceding function call is stored in a field of the board
    variable, and an array is defined for keystrokes. At the end of a move, the last
    keystroke (if any) is taken from the `keystrokes` array, and then the array is
    emptied so that the ship moves according to the last keystroke (if any) entered
    during a turn. All other keystrokes are ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Getting our hands dirty with ReactJS classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will directly start interacting with ReactJS. We create a ReactJS class,
    working on a hash of functions with specific fields named as per the documentation.
    The `componentDidMount()` function and field, for instance, is a function invoked
    when a ReactJS component mounts. This means that more or less, it is displayed
    and represented in the DOM. In this case, we add event listeners to the document''s
    body, rather than add something directly to the component in ReactJS. This is
    because we want to listen to key press/key down events, and it is difficult to
    get `DIV` to respond to these events. Therefore, the body has event listeners
    added. They will address event handlers in ReactJS, which are still meant to be
    defined as you would display them normally. Note that some other types of events,
    such as some mouse events (at least), will register through ReactJS''s usual means,
    as introduced here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Components in ReactJS have **properties** and a **state**. Properties are something
    defined once and they cannot be changed. They are available from within ReactJS,
    and they should be treated as immutable. The state is mutable information. Both
    properties and the state are available within ReactJS. We can briefly comment
    that the shared mutable state is rightly treated by Facebook and ReactJS as begging
    for Heisenbugs. Here, we handle all of the mutable state from within a closure.
    The mutable state is not shared, nor should it be shared (in other words, it is
    a nonshared mutable state):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We next define the key down and key press event handlers as they would normally
    be used, as or at least as they would normally be handled if DIVs responded to
    key events. (We will in fact be monitoring the body, because key-related events,
    unlike a hover or mouse click, does not propagate to a containing DIV. This approximates
    how you would normally demonstrate event handling with ReactJS. The specific keys
    we are listening for, arrow keys and the spacebar, present a problem. In essence,
    arrow keys trigger key down events, but not key press events (most other keys
    generate key press events). This behavior is stupid, but it is deeply entrenched
    in JavaScript and is now more or less non-negotiable. We delegate to a common
    event handler that will handle both events. Here, key presses are converted to
    key codes: left or up arrow key to go up (or left, from the orientation of the
    game), right or down arrow key to go down (or right, from the orientation of the
    game), and the spacebar to shoot. These are represented in the `keystrokes` array
    by `u`, `d`, and `s` respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we create the `render()` function, which is a core ReactJS member
    to define. What this render function does is create DIVs and SPANs that represent
    the grid of spaces and symbols as appropriate. The leaf nodes are positioned absolutely.
  prefs: []
  type: TYPE_NORMAL
- en: Having built the leaf SPAN nodes and then the intermediate DIVs, we build up
    to the main DIV element.
  prefs: []
  type: TYPE_NORMAL
- en: The `out_symbol` variable is a UTF-8 character and not an ASCII escape; this
    is for a very specific reason. ReactJS, although with a clearly documented escape
    hatch `dangerouslySetInnerHTML()` (see [http://tinyurl.com/reactjs-inner-html](http://tinyurl.com/reactjs-inner-html)),
    is normally set up to resist XSS (cross-site scripting) attacks. As such, its
    normal behavior is to escape angle brackets and much ampersand usage. This means
    that `&nbsp;` will be rendered as it is in source, `&nbsp;` rather than with a
    (non-breaking and non-collapsing) space. Therefore, the dingbat symbols that we
    use are not given as they might be elsewhere—with escape codes (though those are
    left in here in comments)—but symbols pasted in the JavaScript that are stored
    as UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re not sure how to enter the dingbats, you can simply use something
    else. Alternatively, you can take the escapes in the comments, copy them to a
    **Plain Old Simple HTML** (**POSH**) file, and then copy and paste the half dozen
    symbols from the rendered POSH page in your JavaScript source with your editor.
    Your JavaScript source should be treated as UTF-8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The children and subchildren defined in the preceding code populate the argument
    lists for `React.createElement()`.
  prefs: []
  type: TYPE_NORMAL
- en: Having built things in an inner loop, we add a leaf node to the `subchildren`
    array. It is specified to be a span, with inline CSS styling delivered in a hash
    and content equal to the `out_symbol` variable. This in turn is added to the `children`
    array. It contains the rows of the screen, which in turn is built into the complete
    board.
  prefs: []
  type: TYPE_NORMAL
- en: In ReactJS, components are defined in `React.createElement()` and subsequently
    made available for use. The usual invocation for `React.createElement()` is something
    like `React.createElement( 'div', null, ...)`, where the part represented by the
    ellipsis holds all the children. We use `apply()` to call `React.createElement()`
    with the initial Arg that is requested, and then, in the array, what the arguments
    should be.
  prefs: []
  type: TYPE_NORMAL
- en: Tick-tock, tick-tock – the game's clock ticks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This closes the `render()` field and the `React.createElement()` class definition.
    In the source code, we move on to the `tick()` function. It handles whatever is
    supposed happen at each turn. As of now, the code calls `tick()` at an interval
    of 300 milliseconds (0.3 seconds), although this is something that could be tweaked
    to influence the gameplay and perhaps refactored slightly so that the gameplay
    would accelerate with higher levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the game is over, which can only be due to the ship crashing into an asteroid,
    nothing happens in the `tick()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `React.render()` is called, specifying the class that is being rendered
    and what HTML element to render to. `React.render()` should be called at least
    each time you want things to render. If you call it once, it will render once,
    which means that it needs to be called repeatedly if you want repeated updates
    to show up. Here, we call it inside each call of the `tick()` method, asking to
    create an element based on `DisplayGrid` defined in a good chunk of the preceding
    code, and to put the rendered HTML into the DIV with the display ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here we see the screen as the player shoots an asteroid. The asteroid explodes
    into an asterisk!
  prefs: []
  type: TYPE_NORMAL
- en: '![Tick-tock, tick-tock – the game''s clock ticks](img/B04108_04_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If, in the previous turn, the ship shot an asteroid (which will be represented
    in the character symbols as zero or more hyphens and an asterisk to their right;
    the hyphens fill the space leading up to the asteroid that has been shot, and
    the asterisk represents the explosion as a shot hits the asteroid), we clear the
    slots that show the shot taken in that turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, we clear the variable indicating that a shot has been taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We clear the space where the ship was:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `keystrokes` array is cleared at the end of each tick, and we pay attention
    to the last keystroke stored. In other words, we are attending to the last keystroke,
    if any, since the previous turn. Keystrokes do not accumulate between turns. At
    the end of a turn, the last keystroke is the only keystroke that wins.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `keystroke` array stores key codes rather than exact keystrokes. Arrow
    keys have been processed such that a left or up arrow key press will store a `u`
    for up, a right or down arrow key press will store a `d` for down, and a spacebar
    press will store an `s` for shoot. If someone enters up or down, the ship moves
    up or down respectively within bounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user shoots an asteroid, in the next turn, a row of hyphens will extend
    from the front of the ship to the asteroid, and the asteroid will become an asterisk,
    representing an explosion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: GAME OVER
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the user runs over, or collides with an asteroid, the game is over. Then
    we display a **GAME OVER** screen and stop further processing, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GAME OVER](img/B04108_04_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As long as the user hasn''t hit an asteroid, the game is still going on, and
    we replace the present slot in the row with a marker for the ship. Then we increment
    the player''s (horizontal) position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user has "fallen off the right edge of the screen", we take the game
    to the next level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Having defined all of this, we start the game, and if we haven''t started the
    ticks in motion, we do so with an interval of 300 milliseconds (a value that can
    be played with to make the game easier or harder; it might be made into a configurable
    interval that speeds up with the gameplay):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter. Earlier, we had covered some theory,
    but it was here that we began to piece together an application using some of ReactJS.
    Later on, we will work with a more in-depth application.
  prefs: []
  type: TYPE_NORMAL
- en: The topics covered included the HTML for the web page. This is a simple HTML
    skeleton, that serves as a rack to hold reactive JavaScript. Another topic covered
    was the reactive JavaScript. This includes a mix of JavaScript with a clear example
    that shows how to write reactive JavaScript for ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue with further coverage of functional programming in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
