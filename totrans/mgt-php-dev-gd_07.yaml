- en: Chapter 7. Testing and Quality Assurance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered:'
  prefs: []
  type: TYPE_NORMAL
- en: The Magento fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frontend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending and working with the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, we omitted a critical step of the development of any extension or
    custom code: testing and quality assurance.'
  prefs: []
  type: TYPE_NORMAL
- en: Despite the fact that Magento is a very complex and large platform, there is
    no included/integrated unit test suite on versions previous to Magento2.
  prefs: []
  type: TYPE_NORMAL
- en: For that reason, proper testing and quality assurance is often overlooked by
    most Magento developers either by lack of information or because of the large
    overhead of some of the testing tools, and while there are not many tools available
    for running a proper test with Magento, the ones that exist are of very high quality.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the different options available for
    testing our Magento code, and we will also build some very basic tests for our
    custom extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s go over the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The different testing frameworks and tools available for Magento
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of testing our Magento code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up, install, and use Ecomdev PHPUnit extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up, install, and use Magento Mink for running functional tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing any test, it is important that we understand the concepts
    related to testing and more particularly to each of the available methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea behind unit testing is writing tests for certain areas (units) of our
    code, so we can verify that the code works as expected and that function is returning
    expected values.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unit testing is a method by which individual units of source code, sets of
    one or more computer program modules together with associated control data, usage
    procedures, and operating procedures, are tested to determine if they are fit
    for use.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Another advantage of writing unit tests is that by performing the test, so we
    are more likely to write code that is easier to test.
  prefs: []
  type: TYPE_NORMAL
- en: This means our code tends to be broken down into smaller but more specialized
    functions as we continue to write more and more tests. We start building a test
    suite that can be run against our codebase every time we introduce changes or
    functionalities; this is known as regression testing.
  prefs: []
  type: TYPE_NORMAL
- en: Regression testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regression testing mostly refers to the practice of re-running existing test
    suites after making code changes to check whether a new functionality is not also
    introducing new bugs.
  prefs: []
  type: TYPE_NORMAL
- en: '*Regression testing is any type of software testing that seeks to uncover new
    software bugs, or regressions, in existing functional and non-functional areas
    of a system after changes, such as enhancements, patches, or configuration changes,
    have been made to them.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the particular case of a Magento store or any e-commerce site, we want to
    perform regression testing on critical features of the store such as checkout,
    customer registration, adding to the cart, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Functional tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functional testing is more concerned with testing that the application returns
    the appropriate output based on a specific input, rather than what happens internally.
  prefs: []
  type: TYPE_NORMAL
- en: '*Functional testing is a type of black-box testing that bases its test cases
    on the specifications of the software component under test. Functions are tested
    by feeding them input and examining the output, and internal program structure
    is rarely considered.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is especially important for e-commerce websites like ours where we want
    to test the site as the customer would experience it.
  prefs: []
  type: TYPE_NORMAL
- en: TDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One testing methodology that has gained popularity in recent years and that
    is now coming to Magento is known as **Test-driven development** (**TDD**).
  prefs: []
  type: TYPE_NORMAL
- en: '*Test-driven development (TDD) is a software development process that relies
    on the repetition of a very short development cycle: first the developer writes
    an (initially failing) automated test case that defines a desired improvement
    or new function, then produces the minimum amount of code to pass that test and
    finally refactors the new code to acceptable standards.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The basic concept behind TDD is to first write a failing test and then write
    code to pass the test; this generates very short development cycles and helps
    to streamline the code.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you want to start the development of your modules and extensions by
    using TDD in Magento. We omitted this in previous chapters due to the fact that
    it would add unnecessary complexity and confuse the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full tutorial on TDD with Magento from scratch, visit `http://magedevguide.com/getting-started-with-tdd`.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and testing frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned before, there are several frameworks and tools available for testing
    PHP code and Magento code. Let''s get to know each one of them a little better:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ecomdev_PHPUnit`: This extension is just amazing; the developers at Ecomdev
    created an extension that integrates PHPUnit with Magento and also adds Magento-specific
    assertions to PHPUnit, all without having to modify core files or affect the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Magento_Mink`: Mink is a PHP library for the Behat framework that allows you
    to write functional and acceptance tests; Mink allows writing tests that simulate
    user behavior and browser interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Magento_TAF`: `Magento_TAF` stands for Magento Test Automation Framework,
    which is the official testing tool provided by Magento. `Magento_TAF` includes
    over 1,000 functional tests and is very powerful. Unfortunately, it has a major
    drawback; it has a large overhead and steep learning curve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before `Ecomdev_PHPUnit`, testing Magento with PHPUnit was problematic and really
    not very practical from the different methods that were available. Almost all
    required core code modifications or developers had to jump through hoops to set
    up basic PHPUnits.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ecomdev_PHPUnit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way to install `Ecomdev_PHPUnit` is to grab a copy directly from
    the GitHub repository. Let''s write the following command on our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now copy the file over to your Magento root folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Composer and Modman are alternative options available for installation. For
    more information on each, please visit [http://magedevguide.com/module-managers](http://magedevguide.com/module-managers).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to set the configuration to instruct the PHPUnit extension
    which database to use; `local.xml.phpunit` is a new file added by `Ecomdev_PHPUnit`.
    This file holds all the extension-specific configuration and specifies the name
    of the test database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/etc/local.xml.phpunit`. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will need to create a new database for running tests and replace the example
    configuration values in the `local.xml.phpunit` file.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this extension does not allow you to run the test on the same database;
    keeping the test database separate from the development and production allows
    us to run our test with confidence.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the configuration for our extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have the PHPUnit extension installed and set up, we need to prepare
    our gift registry extension for running unit tests. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Gift Registry extension, `config.xml` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code (the file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This new configuration node allows the PHPUnit extension to recognize the extension
    and run the matching tests.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to create a new directory called `Test` that we will use to place
    all our test files. One of the advantages about using `Ecomdev_PHPUnit` over previous
    methods is that this extension follows the Magento standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means we have to keep the same module directory structure inside the `Test`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Based on that, the naming convention for each `Test` case class would be `[Namespace]_[Module
    Name]_Test_[Group Directory]_[Entity Name]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `Test` class must extend one of the following three base `Test` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case`: This class is used for testing helpers, models,
    and blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case_Config`: This class is used for testing the module
    configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EcomDev_PHPUnit_Test_Case_Controller`: This class is used for testing the
    layout rendering process and the controller logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of a Test case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before jumping ahead and trying to create our first test, let''s break down
    one of the examples provided by `Ecomdev_PHPUnit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The first important thing to notice in the example `test` class is the comment
    annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'These annotations are used by the PHPUnit extension to identify which of the
    class functions are tests, and also, they allow us to set up specific settings
    for running each test. Let''s take a look at some of the available annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@test`: This annotation identifies a class function as a PHPUnit test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@loadFixture`: This annotation specifies the use of fixtures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@loadExpectation`: This annotation specifies the use of expectations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@doNotIndexAll`: By adding this annotation, we are telling the PHPUnit tests
    that they should not run any index after loading the fixtures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@doNotIndex [index_code]`: By adding this annotation, we can instruct PHPUnit
    not to run a specific index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So now, you are probably a bit confused. Fixtures? Expectations? What are they?
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a little description on Fixtures and Expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixtures**: Fixtures are **yet another markup language** (**YAML**) files
    that represent database or configuration entities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expectations**: Expectations are useful if we don''t want to have hard-coded
    values in our tests and are also specified in YAML values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the YAML markup, visit `http://magedevguide.com/resources/yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: So, as we see, fixtures provide the data for the tests to process, and the expectations
    are used to check if the results returned by the test are what we are expecting
    to see.
  prefs: []
  type: TYPE_NORMAL
- en: Fixtures and expectations are stored inside each `Test` type directory. Following
    the example earlier, we would have a new directory called `Product/`. Inside it,
    we need a new directory for expectations and one for our fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the revised folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Anatomy of a Test case](graphics/3060OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a unit test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our first UnitTest, let's create a very basic test that allows us to test
    the Gift Registry Models that we previously created.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned before, `Ecomdev_PHPUnit` uses a separate database for running
    all the tests; for this, we need to create a new fixture that will provide all
    the data for our test case. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `Registry`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Registry` folder, create a new folder called `fixtures`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryList.yaml` and paste the following code in
    it (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It might not look like it, but we add a lot of information with this fixture.
    We will create the following fixture data:'
  prefs: []
  type: TYPE_NORMAL
- en: A website scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A store group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A store view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A customer record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two gift registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using fixtures, we are creating data on the fly that will be available for
    our test case. This gives us the consistency of running the test multiple times
    against the same data and the flexibility to easily change it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be wondering how the PHPUnit extension knows how to pair a `Test`
    case with a specific fixture.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways the extension loads fixtures: one is by specifying the fixture
    inside the comment annotations, or if the fixture name is not specified, the extension
    will search a fixture with same name as the `Test` case function being executed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing that, let''s create our first `Test` case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `Test` class called `Registry.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following base code (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We just created the base function, but we haven't added any logic yet. Before
    doing that, let's take a look at what actually constitutes a `Test` case.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Test` case works by using assertions to evaluate and test our code. Assertions
    are special functions that our `Test` cases inherit from the parent `TestCase`
    class. Among the default assertions available, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEquals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGreaterThan()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGreaterThanOrEqual()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLessThan()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLessThanOrEqual()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTrue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, these default assertions are great if we want to check variable's values;
    search for an array key, check attributes, and so on. But testing Magento code,
    using only these types of assertions, can prove difficult or even impossible.
    This is where `Ecomdev_PHPUnit` comes to the rescue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only has this extension integrated PHPUnit with Magento cleanly, by following
    their standards, it also adds Magento-specific assertions to the PHPUnit tests.
    Let''s take a look at some of the assertions added by the extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEventDispatched()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertBlockAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModelAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertHelperAlias()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModuleCodePool()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertModuleDepends()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertConfigNodeValue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLayoutFileExists()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those are only a few of the assertions available, and as you can see, they give
    a lot of power for building comprehensive tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know a little more about how PHPUnit `Test` cases work, let''s
    proceed to creating our first Magento `Test` case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registry.php` test case class that we created before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `registryList()` function (the file location
    is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a very basic test; the only thing that we are doing is loading a registry
    collection. In this case, all the registries are available, and then they run
    an assertion to check if the collection count matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is not very useful. It would be even better if we were able to
    load only the registries that belong to a specific user (our test user) and check
    that collection size. That said, let''s change the code a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`.
    Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Just by changing a few lines of code, we created a test that allows checking
    whether our registry collections are working properly and if they are correctly
    linked to a customer record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything went as expected, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also run `$phpunit`—colors for a nicer output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we only need a test to verify that the registry items are working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registry.php` test case class that we created before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `registryItemsList()` function (the file
    location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need a new fixture for our new `Test` case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryItemsList.yaml` (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/
    registryItemsList.yaml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run our test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see both tests passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s replace our hard-coded variables with proper expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Module Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Registry` folder, create a new folder called `expectations`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `registryList.yaml` (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Wasn''t that easy? Well, it was so easy that we will do it again for the `registryItemsList`
    test case:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Module Test/Model` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Registry` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `registryItemsList.yaml` inside the `expectations`
    folder (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the last thing that we need to do is to update our `Test` case class
    to use the expectations. Make sure the update file has the following code (the
    file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The only change here is that we are replacing the hard-coded value inside our
    assertions with the expectations, values. If we ever need to make any changes,
    we don't need to change our code; we can just update the expectations and the
    fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: Functional tests with Mink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have learned how to run unit tests against our code, and while unit
    tests are great for testing individual parts of our code and the logic, when it
    comes to large applications such as Magento, it is important to test from the
    user's perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functional testing mostly involves black-box testing and is not concerned about
    the source code of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, we can use Mink. Mink is a simple PHP library that can
    virtualize a web browser. Mink works by using different drivers. Out of the box,
    it supports the following drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GoutteDriver`: This is a pure-PHP headless browser written by the creator
    of Symfony framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SahiDriver`: This is a new JS browser controller that is quickly replacing
    Selenium'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZombieDriver`: This is a browser emulator written in `Node.js` and currently
    is only limited to one browser (Chromium)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SeleniumDriver`: This is currently the most popular browser driver; the original
    version relies on a third-party server for running the tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Selenium2Driver`: The current version of Selenium is fully supported in Python,
    Ruby, Java, and C#'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magento Mink installation and setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using Mink with Magento is extremely easy, thanks to Johann Reinke, who created
    a Magento extension that facilitates Mink integration with Magento.
  prefs: []
  type: TYPE_NORMAL
- en: We will install this extension using Modgit, a module manager inspired by Modman.
    Modgit allows us to deploy Magento extensions directly from a GitHub repository
    without creating symlinks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Modgit can be achieved with three lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Wasn''t that easy? Now we can proceed to install Magento Mink, for which we
    should thank Modgit that it is even easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Move to the Magento root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Modgit will take care of installing the file for us directly from
    the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Mink` tests are also stored inside the `Test` folder. Let''s create the base
    skeleton of our `Mink` test class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Test` folder on our module root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `Mink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Mink` directory, create a new PHP class called `Registry.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code (the file location is `app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Just at first glance, you can tell that this functional test is quite different
    from the unit tests that we built previously, and although it seems like a lot
    of code is quite simple. The previous test has been down in code blocks. Let''s
    break down what the previous test is doing:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the browser driver and the current store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the home page and check for a valid category link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to log in as a test user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to a category page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the first product on that category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to add the product to the customer's gift registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This test makes few assumptions and is expecting a valid customer within an
    existing gift registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some considerations that we have to keep in mind when creating `Mink`
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Each test class must extend `JR_Mink_Test_Mink`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each test function must start with the test keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the only thing that we have to perform is run our tests. We can do
    this by going to the command line and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything was successful, we should see something similar to the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went over the basics of Magento testing. The purpose of
    this chapter was not to build complex tests or go in too deep, but rather get
    our feet wet and get a clear idea of what we can do to test our extensions.
  prefs: []
  type: TYPE_NORMAL
- en: We covered several important topics in this chapter, and by having proper test
    suites and tools, it can save us from future headaches and improve the quality
    of our code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will learn how to package and distribute custom
    code and extensions.
  prefs: []
  type: TYPE_NORMAL
