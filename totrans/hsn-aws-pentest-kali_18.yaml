- en: Pentesting and Securing AWS RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS **Relational Database Service** (RDS) often hosts the most crucial and sensitive
    data that is relevant to a specific application. Hence, there is a strong need
    to focus on identifying exposed AWS RDS instances to enumerate access, and subsequently
    the data stored in the database instance. This chapter focuses on explaining the
    process of setting up a sample RDS instance and connecting it to a WordPress instance
    in both a secure and insecure way. In addition to this, we will focus on gaining
    access to an exposed database, as well as the identification and exfiltration
    of sensitive data from this database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an RDS instance and connecting it to an EC2 instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying and enumerating exposed RDS instances using Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation and data extraction from a vulnerable RDS instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following tools will be used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hydra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a vulnerable RDS instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start by creating a simple RDS instance and then connecting it to an
    EC2 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Services menu, go to Amazon RDS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6f4b790-568c-49fb-b97f-0fce1154f5bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create database. For this tutorial, we''ll use MySQL; select MySQL,
    and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be781ce6-4811-4cff-8412-723ef378bd92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this is only a tutorial, we''ll be using the Dev/Test – MySQL option.
    This is a free tier, hence it won''t charge you. Select Dev/Test – My SQL and
    continue by clicking on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29659e8d-0dd7-4e38-8414-59a252b36feb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, click on Only enable options eligible for RDS Free Usage
    Tier. Then select the db.t2.micro instance in DB instance class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37a6d7e2-a325-41ec-9a9c-e677da3d7fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the details displayed in the following screenshot, such as the DB name,
    Master username, and Master Password. For this tutorial, we''ll set up the database
    to be vulnerable to brute-force attacks; we''re naming it `vulndb` and setting
    the username and password to `admin` and `password`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/098fe6eb-5031-40dd-9cf7-4128cae3b832.png)'
  prefs: []
  type: TYPE_IMG
- en: On the next page, set publicly accessible to `Yes`; leave everything else as
    it is. Finally, click on Create Database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your DB instance will be created shortly. The DB instance will not be accessible
    to any public IP address by default. In order to change this, open the security
    group of the RDS instance and allow incoming connections on port `3306` from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will create a database for our WordPress website. Connect to the RDS
    instance from your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the MySQL shell, type the following commands to create a new database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Our database has now been set up. In the next section, we will look at connecting
    our newly created database to an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an RDS instance to WordPress on EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once our RDS instance has been created, we will set up WordPress on our EC2
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this tutorial, we''ll be using an Ubuntu 16.04 instance. Go ahead, and
    spin up an Ubuntu EC2 instance. In the inbound rules settings, ensure that you
    allow traffic to port `80` and `443` (HTTP and HTTPS):'
  prefs: []
  type: TYPE_NORMAL
- en: SSH into the Ubuntu instance. We'll now set up the instance to be able to host
    the WordPress website. Before proceeding, run `apt update` and `apt upgrade`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Apache server on your EC2 machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the Apache service, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To see whether the instance is working, you can visit `http://<<EC2 IP Address>>`,
    and you should get the default page of Apache.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now install PHP and a few modules for it to work with the web and database
    servers, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To test whether PHP is working with the web server, we need to create the `info.php` file
    inside `/var/www/html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and paste the following code into the file, save it, and exit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When that is done, open your web browser and type in this address: `http://<<EC2
    IP Address>>/info.php`. You should be able to view the following PHP information
    page as confirmation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e90b3bf-0195-40d1-9ec4-7c8edcd6086f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will download the latest WordPress website on our EC2 machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to move all the WordPress files from the extracted folder into the
    Apache default directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to configure the permissions of the website directory, as well
    as assign ownership of the WordPress files to the web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now we will connect our WordPress website to our RDS instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `/var/www/html/` folder and rename `wp-config-sample.php` to `wp-config.php` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the `MySQL settings` section with the details of the RDS instance.
    We named our database `newblog` in the previous section; so, we will use the same
    name here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and then restart the Apache server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your web browser and then enter the `http://<<EC2 IP Address>>/index.php`
    server address to get the welcome page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c6048dd-35e7-4b5a-85c3-b322e14b4b90.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the language of your choice, and then click on Continue. Finally, click
    on Let's go!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in all the requested information, and then set your username and password.
    Finally, click on Install WordPress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this is complete, you can log in to the WordPress installation using the
    username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a2d20a5-0b6c-436d-a436-54dbbbd92d30.png)'
  prefs: []
  type: TYPE_IMG
- en: Our WordPress target has been set up. However, we have left the RDS instance
    accessible to the entire internet. This is a vulnerable configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how we can discover such vulnerable RDS instances.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying and enumerating exposed RDS instances using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember when we made our RDS instance publicly accessible? Well, it's time
    to identify such public RDS instances and exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this scenario, we already know the hostname of our RDS instance, which makes
    it slightly easy for us. We''ll start by running `nmap` scan on our instance to
    identify what ports are open:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH into your Kali machine, and issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that port `3306` is open, and is listening for any incoming connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f463258-a025-4cea-ae6c-0d602186390d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s find out what service is running on port `3306`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f653b623-9e31-41d0-a4ea-47475ee6e905.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, it is a MySQL service. Let''s find out more information about the MySQL
    service using **Nmap Scripting** **Engine** (**NSE**) scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Quite a bit of information comes up, especially the set of valid usernames,
    such as `admin`. This will be crucial in our next section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d63c96e-cf0b-4bbe-812a-a09508e39ecb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have identified our target and found some information, such as which ports
    are open, what services are running, and what database server it is running. Moreover,
    we have found a crucial piece of data, that is, a list of valid usernames. In
    the next section, we will see what attacks can be performed using such data.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation and data extraction from a vulnerable RDS instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now discovered an RDS instance whose MySQL service is listening publicly.
    We have also identified a set of valid usernames.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to brute-force the login and the valid password for our `admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, we will use Hydra to brute-force the MySQL service and find
    the password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Kali instance, download a wordlist dictionary for the brute-force attack;
    I find `rockyou.txt` to be adequate. Then, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Hydra will brute-force the service using the wordlist that has been provided,
    and will give you the valid password for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9b7cc72-fbfd-4ddf-87ad-b6f617b30494.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have our valid set of credentials, it's time to connect to the MySQL
    service and create a new user for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to compromise the WordPress installation, we will create a new admin
    user for WordPress, and then log in using those credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the MySQL service again from your Kali machine using the password
    we have discovered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In order to add a new user, we will have to add a new row to the `wp_users` table
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, change the database to the one being used by WordPress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now list the tables, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/82545061-cf71-4124-a074-254276c7ed67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the `wp_users` table; now it's time to add a new row to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this tutorial, we are creating a `newadmin` user with a `pass123` password.
    Issue the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now visit the login page at `http://<<EC2 IP Address>>/wp-login.php`. Enter
    the new credentials, and you will be logged in as a new administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what RDS instances are and how to create an RDS
    instance. We then set up a WordPress website on an EC2 machine and then configured
    it to use the RDS instance as the database server. We saw how an RDS instance
    can be made vulnerable. Furthermore, we used Nmap and Hydra to identify and exploit
    vulnerable RDS instances. Finally, we learned how we can tamper the data of an
    RDS instance to create a new WordPress user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to pentest various other AWS APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Brute Forcing Passwords with ncrack, hydra, and medusa**: [https://hackertarget.com/brute-forcing-passwords-with-ncrack-hydra-and-medusa/](https://hackertarget.com/brute-forcing-passwords-with-ncrack-hydra-and-medusa/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring Security in Amazon RDS**: [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encrypting Amazon RDS Resources**: [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
