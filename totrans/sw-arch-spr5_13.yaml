- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a field that teams often do not pay close attention to when developing
    their products. There are a few key considerations that developers should keep
    in mind when writing code. Most of the considerations listed in this chapter are
    obvious, but others aren't, so we will discuss all of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover, the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why security is important as part of an application's architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key recommendations for keeping your software secure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptographic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data input validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start by introducing the importance of security as part of an application's
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Why security is important as a part of an application's architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past few years, I have seen many cases of organizations or companies
    reviewing their software security concerns after having already gone into production.
    This usually happens when their systems face security issues or their businesses
    lose money due to downtime or compromised data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is widely known that security concerns and processes should be included
    as a part of the **Software Development Life Cycle** (**SDLC**). Since security
    is an aspect that should be considered as part of every single application, it
    is imperative to ensure that our applications and code have security constraints
    that allow us to feel confident about our software at all stages (design, development,
    testing, and deployment):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/598ebe0b-f094-42dc-be13-a423f0082059.png)'
  prefs: []
  type: TYPE_IMG
- en: Security as a part of the SDLC
  prefs: []
  type: TYPE_NORMAL
- en: Our main goal should be to prevent our application from being compromised before
    we deliver it to a production environment. This avoids exposing sensitive data
    and to ensures that the application was designed while keeping possible vulnerabilities in
    mind. Ideally, we should address all of our security concerns before our systems
    are used by customers. As developers, we mostly only receive functional requirements.
    However, sometimes we don't receive a security requirement. When developing our
    code and applications, we must care about security as much as we care about performance,
    scalability, and other non-functional requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key aspects to keep in mind when writing software that is designed to
    avoid security threats are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Systems are hard to decrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system security should be tested in every stage of the SDLC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration tests should be executed against the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A secure end-to-end communication should be ensured in the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-phishing practices should be applied in the application code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will provide a set of recommendations that should be
    followed to address security concerns during the SDLC process.
  prefs: []
  type: TYPE_NORMAL
- en: Key security recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several types of attacks that can be directed at a system or network
    and can be used to establish communications. Common examples include viruses,
    malware, phishing, spear phishing, **Denial-of-Service** (**DoS**), and so on.
    Every year, even more sophisticated attacks are discovered, with many different
    targets. In this section—which will be about key security recommendations—we will
    focuson securing the code and environment for web and mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: There are several processes and models that can be used to ensure security in
    web and mobile applications. In the upcoming sections, we will explore the main
    recommendations for keeping your software safe from common security threats.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest definition of authentication is the process of verifying the identity
    of a user; authorization is the process of verifying what an authenticated user
    can do. For example, when we log in as a user on our computer, we are granted
    access, allowing us to execute actions with the available resources (this includes
    files, applications, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: In the applications that we create, authentication is the process of validating
    access to the application, and authorization is the process of protecting our
    resources, like pages, web services, databases, files, queues, and so on. During
    the authentication process, we validate the identities of those using the application.
    Authentication includes processes such as preventing to our application before
    providing valid credentials, multi-factor authentication (such as a secure image),
    **one-time password (OTP)**, tokens, and more.
  prefs: []
  type: TYPE_NORMAL
- en: With regards to implementation, we already created a few application examples
    in previous chapters using Spring Security, which is an extensible framework that
    can be used to secure Java applications. Spring Security can be used to handle
    authentication and authorization, as well, using a declarative style that is not
    intrusive to our existing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, there are several identity industry standards, open specifications,
    and protocols that specify how to design an authentication and authorization mechanism,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic authentication**: This is the most common method, involving sending
    usernames and passwords with every request. We already implemented this method
    with Spring Security in our banking app example, which we used in [Chapter 10](8762b4ca-6a2e-4b00-acf3-3f8f5e2f00b9.xhtml),
    *Containerizing Your Applications*, [Chapter 11](81e880b2-2345-4231-b7d5-d558f3c55955.xhtml),
    *DevOps and Release Management*, and [Chapter 12](f58465fa-861d-4800-a2a3-fe19c06e8789.xhtml),
    *Monitoring*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON Web Tokens** (**JWT**): This is an open standard that defines how to
    establish a secure mechanism to securely exchange messages (information) between
    two parties. There are several well-tested libraries to use here, and we created
    an example of this in [Chapter 4](e3dbe5c7-7ae9-49a8-816b-69d18300218b.xhtml),
    *Client-Server Architectures*. The sequence can be illustrated as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eacccf78-9aa2-4f58-9bcd-2e9bdcb9c842.png)'
  prefs: []
  type: TYPE_IMG
- en: JWT authentication flow
  prefs: []
  type: TYPE_NORMAL
- en: As explained previously, the preceding sequence diagram can help us to understand
    the process of token validation. For authentication, the clients should send their
    credentials to the server, which will respond with a token in the form of a string.
    This token should be used for the subsequent requests. When they are executed,
    if the provided token is invalid or expired, we will receive a 401 UNAUTHORIZED
    status code from the server. Otherwise, the request will be successful. The authentication
    mechanisms that we mentioned earlier follow the basic authentication model, which
    is preferred for web applications. However, when you're writing APIs, you will
    need other approaches, in order to deal with security based on the use of tokens
    (such as JWT). If you are not writing APIs, your application can be secured using
    the JSON Web Tokens RFC ([https://tools.ietf.org/html/rfc7519](https://tools.ietf.org/html/rfc7519)).
  prefs: []
  type: TYPE_NORMAL
- en: Today, this is the most common method for authenticating mobile applications,
    modern single-page applications (SPA), and REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review some standards created around authentication mechanisms using
    tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OAuth** (**Open Authorization**): This is an open standard for authentication
    and authorization based on tokens that enable the use of a third-party actor to
    delegate the authentication process. You should only use this standard when you
    have three parties: yourself, your users, and third-party app developers that
    need your user data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OAuth 2**: This is a more developed version of the OAuth standard, which
    allows the user to grant limited access to transfer resources from one application
    to another, without giving their credentials. You should use this standard whenever
    you log in to the site using your Google or GitHub account. When doing so, you
    will be asked whether or not you agree with sharing your email address or account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full request signature**: This was popularized by AWS authentication, and
    was explored in [Chapter 9](e43eb939-ae8d-4ae1-9fc5-101a46110923.xhtml), *Serverless
    Architectures,* when we illustrated deploying our **functions as services** (**FaaS**)
    to AWS. We use this concept by sharing a secret between the server and the client.
    The client signs the completed request using the shared secret, and the server
    verifies it. For more detailed information, go to [http://docs.aws.amazon. com/general/latest/gr/sigv4_si
    gning.html](http://docs.aws.amazon.%20com/general/latest/gr/sigv4_si%20gning.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cryptography is the process of changing text information to unintelligible text,
    and vice-versa: from crypto-text into intelligible text. In our application, we
    use cryptography in the process of creating data confidentiality and protecting
    it from unauthorized modification.
  prefs: []
  type: TYPE_NORMAL
- en: We use cryptography to encrypt communication between the client and the server.
    This is done through public key encryption  using HTTPS, which uses the **Transport
    Layer Security (TLS)** protocol. The TLS protocol is the successor of the **Secure
    Sockets Layer (SSL)** protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Data input validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data input validation refers to the process of controlling the data received
    in each integration, or layer, of our application. We need to validate the data
    input, in order to avoid creating any inconsistencies in our system. In other
    words, we should validate that the data in our application is consistent, and
    doesn't encounter any problems associated with SQL injection, the resource's control
    of the application, or servers, for example. More advanced techniques include
    whitelist validation and input type validation.
  prefs: []
  type: TYPE_NORMAL
- en: Sensitive data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This practice involves protecting sensitive data and determining how to do so
    in the right way. Data sensitivity involves the use of cryptography to preserve
    data confidentiality or integrity and redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it is a common practice to use nonsense text in the passwords that
    our application uses to connect to a database, so we make this recommendation
    accurate by keeping credentials encrypted. Another case might involve working
    on a banking application and needing to present a credit card number. In this
    case, we would encrypt the number, and might even mask the number, to make it
    illegible to humans.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To help you understand what social engineering is, we are going to provide a
    simple definition; that is, the psychological manipulation of a person so that
    the person provides confidential information.
  prefs: []
  type: TYPE_NORMAL
- en: Taking this definition as a starting point, social engineering has become a
    security problem that is difficult for applications to control. That's because
    the point of failure is in the fact that the user is a human, capable of being
    analyzed and manipulated into handing over secret information or credentials that
    make it possible to access a system.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Top 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Open Web Application Security Project (OWASP)** Top 10 lists the ten most
    important security risks in web applications, and is published and updated every
    three years by the OWASP organization. We need to follow the OWASP checklist in
    order to ensure that our web applications aren't leaving security holes. The list
    can be found at[https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)[.](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest checklist published in 2017 includes the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A1: Injection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A2: Broken authentication and session management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A3: **Cross-site scripting** (**XSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A4: Insecure direct object references'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A5: Security misconfiguration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A6: Sensitive data exposure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A7: Missing function level access control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A8: **Cross-site request forgery** (**CSRF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A9: Using components with known vulnerabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A10: Unvalidated redirects and forwards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test and verify several of these vulnerabilities, we can use the Burp suite
    ([https://portswigger.net/burp](https://portswigger.net/burp) ). The process is
    easy to understand, and will check the application for most known security holes.
    As a tool, Burp comes with Kali Linux distributions, which we will explain in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **penetration test (pen test) **is a simulated attack on a system that evaluates
    its security. For this test, we can use tools like Kali Linux ([https://www.kali.org/](https://www.kali.org/))), which
    is a Debian-based Linux distribution, with a penetration testing platform that
    has several tools available for verifying the OWASP Top 10, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Kali has an extensive list of tools that can be used for several purposes such
    as wireless attacks, information gathering, exploiting and verifying web applications,
    and so on. If you'd like to see a detailed list of tools, go to the following
    link: [https://tools.kali.org/tools-listing](https://tools.kali.org/tools-listing).
    Teams should provide a pen test before delivering an application to a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create a Java application based on Spring Security.
    We will use Auth0 as the authentication and authorization as a service platform,
    which is a third-party authorization based on the OAuth2 standard and JWTs.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization as a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using Auth0 as the provider of a platform for authentication and
    authorization as a service. We will create an example of this to secure our application;
    you don''t have to be a security guru to achieve this.The following screenshot
    was borrowed from the Auth0 getting started guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99af84d6-085d-4ccc-9eb6-69a9881c762d.png)Auth0 authentication and identity
    validation process'
  prefs: []
  type: TYPE_NORMAL
- en: After we plug in or connect to Auth0, this will be the authentication and authorization
    server used to verify their identity and send the required information back to
    the application each time a user tries to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: We are not limited to Java; Auth0 provides several SDKs and APIs for different
    technologies and languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to create an example of authentication and authorization as a service
    using Auth0 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your free developer account in Auth0 at [https://auth0.com/](https://auth0.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to the Auth0 portal and create an application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2943a2d8-8e4e-4d3e-a81a-82303ee5da2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Auth0 create application
  prefs: []
  type: TYPE_NORMAL
- en: 'Give a name to the application, and then select the Regular Web Application option,
    which includes Java applications (you can also create native mobile applications,
    single-page applications, and **Internet of Things** (**IoTs**)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d88efe8-9be6-4310-955b-34ce4b038238.png)'
  prefs: []
  type: TYPE_IMG
- en: Select an example application that uses Spring Security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Download the application and change the folder name of the project
    to `packt-secure-sample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run the example, we need to set the **callback URL** (`http://localhost:3000/callback`) in
    the Settings tab of the application that we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this on the console, execute the following commands in the sample''s
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the application at the URL, `http://localhost:3000/`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47495cee-1d34-4ed1-88a5-9b27a7336b89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the application login page redirects to Auth0\. After we log in via
    a third-party application, through our Google account or with the credentials
    provided by Auth0, we will see the following result, which shows the token that
    was generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/463f6bfd-ff5d-4218-8a62-fbc5fecdb729.png)'
  prefs: []
  type: TYPE_IMG
- en: You have now learned how to use Auth0 as a platform for authentication and authorization
    as a service, using standards such as OAuth2 and JWT.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explained how to apply security guidelines and practices
    to cover the most common security issues that you may encounter with your applications.
    Here, we covered authentication and authorization, cryptography, data input validation,
    sensitive data, the OWASP Top 10, social engineering, and penetration testing.
    These concepts and methodologies will strengthen the security of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will review high-performance techniques and recommendations
    in order to complete our journey of creating applications using Spring 5.
  prefs: []
  type: TYPE_NORMAL
