- en: Chapter 6. Music and Sound Effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The music and sound effects are like the cherry on a cake: they can greatly
    improve the game experience when implemented correctly, but if not, at least you
    still have the cake. The big-budget games are nowadays always accompanied by original
    and exquisite songs and tunes. The game music niche has grown in the past decades,
    and there are many composers out there who are dedicated to making game music.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of a few such great composers:'
  prefs: []
  type: TYPE_NORMAL
- en: Koji Kondo (Mario and Zelda series)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nobuo Uematsu (Final Fantasy series)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Masato Nakamura (Sonic, Metal Gear Solid, and Metroid Prime series)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Michael Giacchino (Call of Duty, Medal of Honor: Allied Assault)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bill Brown (Command and Conquer Generals, Enemy Territory, Rainbow Six)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeremy Soule (Elder Scroll series, Star Wars Old Republic, Total Annihilation,
    Neverwinter Nights, Baldur's Gate, Guild Wars, Company Of Heroes, Putt-Putt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These people certainly know how to make mind-blowing music that gives an incredible
    added value to the game experience. The tunes used in these games often become
    as iconic and memorable as the games themselves. If you watch a very old movie,
    you will notice that they used a lot less music and sound effects than they do
    nowadays and this makes them practically unwatchable to many of us today. Try
    stripping all the background music from any recent movie and you might find it
    dull to watch, even though the story stays the same. The same goes for many games,
    especially for adventure games, where well-composed background music is very important
    because it helps drag you into the storyline.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, horror games without sound effects and threatening music are almost
    unthinkable. Tunes and sound effects are vitally important to set the mood for
    a scene. A good example is the celebrated game **Resident Evil**. In this zombie
    game, even if nothing happens for 20 minutes, you will still be on the edge at
    all times. It's the sounds and the threatening music that makes you instinctively
    hesitant to open the next door. So, before choosing music and sound effects, think
    about the feeling you want your gamers to have when playing. For invoking feelings,
    nothing is more influential than perfectly picked music and sounds.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will have a look at a few sources for game music, apart from
    these rather expensive composers. We will have a quick look at FL Studio, which
    can be used to compose your own music. Finally we shall integrate the music and
    sound effects in ImpactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Making or buying the music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In case you decide that you want to add some music to your game, it is still
    a question of either making it or buying it. It seems that as a 2D game builder,
    you need to know a little bit of everything: you must be able to understand game
    psychology, actually program your game, make graphics for it, and even compose
    its music. Sounds like you need to be a one-man army to pull off such a feat.
    However, educating yourself in the fields of graphic design and music might be
    a waste of time. Although being a generalist is a great characteristic, consider
    how much time it would cost for you to compose music for your games, as opposed
    to buying it from someone else.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter both options are supported. First, let's have a look at some
    websites that can provide you with music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Buying tunes and sound effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need some **music** for your game, you could hire a personal composer
    like Jeremy Soule. However, assuming you don''t have a multimillion-dollar budget,
    the following websites can be of use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.craze.se](http://www.craze.se)'
  prefs: []
  type: TYPE_NORMAL
- en: On *Craze*, a wide repertoire of music can be found. The songs can be listened
    to in advance and the prices range from $15 to $60 per track. They can also be
    bought as packs, which significantly reduces the overall cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are looking for a somewhat more affordable supplier, you can take a
    look at *Lucky Lion Studios* at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.luckylionstudios.com](http://www.luckylionstudios.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Most tracks are sold at $5\. They accept custom commissions and will even make
    a difference between buying exclusive or non-exclusive rights to the custom project,
    allowing you to cut costs on a custom assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you are looking for some free music there is *Nosoapradio*, which
    can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.nosoapradio.us](http://www.nosoapradio.us)'
  prefs: []
  type: TYPE_NORMAL
- en: This website has it all; you can listen to and download over 300 tracks (over
    12 hours of music) and it is all free to use as you please. The website even provides
    the tracker to a torrent file for you to download the 1 gigabyte of music all
    at once. This is a great site in case you wish to have some music as a placeholder
    or even release an actual game with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also a few sites out there for buying sound effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pro sound effects* allows you to buy from a wide array of different sounds
    for $5 per effect at the following link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.prosoundeffects.com](http://www.prosoundeffects.com)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also buy entire libraries on a certain topic, such as animal sounds,
    for example. The prices for these packages can range anywhere from $40 to $15,000.
  prefs: []
  type: TYPE_NORMAL
- en: '*Radish patch* does custom work for $45 per hour but also sells premade sound
    effects for $8 or $80, depending on what you plan to do with it. It can be found
    at the following link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.radish-patch.com](http://www.radish-patch.com)'
  prefs: []
  type: TYPE_NORMAL
- en: If you plan on selling over 5000 copies of your game, they charge $80 instead
    of $8 for each sound effect you use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list wouldn''t be complete without a free site for you to plunder, which
    can be found at the following link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.mediacollege.com/downloads/sound-effects/](http://www.mediacollege.com/downloads/sound-effects/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Media college* provides a reasonable number of free sound effects over a wide
    array of topics. The only thing they ask in return is a donation in case you like
    what they offer.'
  prefs: []
  type: TYPE_NORMAL
- en: Sound effects, unlike good music, aren't too difficult to make. All you need
    is a list of sounds you require, a decent sound recorder, and a little bit of
    spare time (and maybe a few crazy friends to help you produce them). So when it
    comes to deciding whether you have to make or buy sound effects, making them yourself
    is recommended, except if you need some really exceptional-quality effects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at the basics of FL Studio for our music.
  prefs: []
  type: TYPE_NORMAL
- en: Making a basic tune using FL Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FL Studio** is a digital audio workstation, formerly known as FruityLoops.
    Following is the logo of FL Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'FL Studio is not a freeware but a demo that can be downloaded at their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.fl-studio.en.softonic.com](http://www.fl-studio.en.softonic.com)'
  prefs: []
  type: TYPE_NORMAL
- en: FL Studio is regarded as the most complete virtual studio that is currently
    out there. However, FL Studio is not yet available for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux users, **LMMS** can be a good (and free) though less powerful alternative.
    Following is the logo of LMMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can download LMMS from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://lmms.sourceforge.net/download.php](http://lmms.sourceforge.net/download.php)'
  prefs: []
  type: TYPE_NORMAL
- en: Since the aim of this book is not to give an in-depth insight into music development,
    only the basics of FL Studio are covered here.
  prefs: []
  type: TYPE_NORMAL
- en: 'When opening FL Studio, the first elements to notice are the top menu bars
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can roughly distinguish between three main parts. On the left-hand side
    are all the menus you can expect any program to have these days: **FILE**, **TOOLS**,
    **VIEW**, **OPTIONS**, and so on. The middle of the bar provides quick access
    to the play, stop, and other buttons directly related to the song you are working
    on. On the right-hand side we find some quick-access buttons for the important
    elements of FL Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: When creating a new file, FL Studio allows you to start from a template, which
    is great for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For instance, **Basic with limiter** will immediately provide the user with
    the different elements of a drumline. That way you don''t need to figure out the
    basic components yourself. The quick-access buttons to the five most important
    elements of FL Studio are from left to right: the playlist, step sequencer, piano
    roll, file browser, and the mixer as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you open the step sequencer, you will notice that your first sequence, called
    **Pattern 1**, has four elements predefined: **Kick**, **Clap**, **Hat**, and
    **Snare**. These four form the basis to your drumline as explained in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kick** can be compared to your big drum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clap** is an approximation of the clapsticks. Clap (also called tala) itself
    is a term used in Indian classical music for the rhythmic pattern of any composition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snare** represents a smaller drum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hat** is the cymbal of your drumline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Pattern 1** sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A sequence of rectangles is present for every instrument in your pattern. By
    clicking on a rectangle you tell FL Studio to activate this instrument at that
    particular point. Right-clicking on a highlighted rectangle will turn it off again.
    Almost everything in FruityLoop studio is turned on or added by left-clicking,
    while right-clicking is used for turning off or deleting. Try making a nice-sounding
    drumline by activating some of the instruments at particular time intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created a pattern, it can be added to a playlist. The **Playlist**
    console will hold all the pieces of music for your project as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All your patterns can be cued or played simultaneously or sequentially, depending
    on how you use the different tracks it provides. When left-clicking on a spot
    in the **Playlist** console you basically *paint* a pattern on that spot. Right-clicking
    on a pattern will remove it. To change the pattern, you are currently placing
    a drop-down box at the top-right corner of the **Playlist** console.
  prefs: []
  type: TYPE_NORMAL
- en: 'FL Studio provides the user with a wide array of instruments, sound effects,
    and even premade music and some voice effects as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All these resources can be accessed with the **file browser**. From here you
    can add an instrument to your sequence builder, for instance, a synthesizer or
    a guitar. Every sound type has a different symbol as shown in the following screenshot,
    and the premade music can even be previewed (or heard in advance) in the browser
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding precomposed melodies allows you to quickly make a rather decent song,
    which in turn can be incorporated into your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have added an instrument, such as the synthesizer to your sequencer,
    try opening the **Piano roll** console for it as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Piano roll** consoleallows you to define every note that the instrument
    needs to play. For some instruments, such as a drum, this is not always necessary
    but for others, it''s definitely recommended to make your own little tune in the
    **Piano roll** console. You can do this in the same pattern as your drumline,
    or you could start a different pattern and unleash your creativity there as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Eventually, every piece of music you create should end up in the playlist. Working
    with different tracks is the key to keep a good view on all the things that are
    going on at the same time. If you forgot to allocate your different instrument
    categories to different tracks, don't worry, there is an option for splitting
    them in the **Playlist** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'At some point you will want to hear how your different tracks sound when played
    together. For this, you need to switch from the pattern to the **SONG** mode as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you feel that some extra tweaking needs to be done to your different instruments,
    this is where the **Mixer** console comes into play. The **Mixer** console allows
    you to change things such as volume, balance, and special effects as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a special effect or filter to the music can quickly give you that extra
    touch you are looking for. There are many preset filters to choose from and they
    can all be tweaked separately. If you are looking for a quick fix, you are of
    course free to leave them at their default settings and work with that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In every single one of these four elements: sequencer, playlist, piano roll,
    and mixer, some templates and/or defaults are available. Always look for these
    in case you don''t want to put too much effort into creating your own music. You
    can use what is already there, tweak it a little, and you have your own soundtrack
    in no time!'
  prefs: []
  type: TYPE_NORMAL
- en: When you are done with your first song you might not only want to save it, but
    also export it as both `.mp3` and `.ogg` files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a basic tune using FL Studio](img/4568_6_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, don't forget to put the project to the song mode instead of the pattern
    mode, or you will only export the pattern you had currently selected.
  prefs: []
  type: TYPE_NORMAL
- en: Once the song is exported you can use what you just created in ImpactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding background music to your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background music is something that you will want to be played at all times.
    A lot of games change the music from a calm to a more upbeat track when the going
    gets tough. All these things can be done using the `if` conditions either in your
    main code or in a separate file dedicated to managing your playlists.
  prefs: []
  type: TYPE_NORMAL
- en: 'ImpactJS has two important classes that are responsible for all the sound you
    will want to use: `ig.music` and `ig.sound`. `ig.music` is what we need for our
    background music. Let''s say you want to add your music to the projects of [Chapter
    3](ch03.html "Chapter 3. Let''s Build a Role Playing Game"), *Let''s Build a Role
    Playing Game* or [Chapter 4](ch04.html "Chapter 4. Let''s Build a Side Scroller
    Game"), *Let''s Build a Side Scroller Game*. Add the following code to `main.js`
    in the `MyGame` definition''s `init()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we added our song as `background.*`, not as `background.ogg` or
    `background.mp3`. This way the game knows that it needs to look for all files
    called `background`, regardless of their extension. Since we made a separate `music`
    folder within the `media` folder, we should have no naming conflicts here. Using
    `background.*` is not only conveniently short (one line of code instead of two),
    but also helpful to the system for using the `music` file which it is able to
    play. Sometimes this will be `.mp3`, and sometimes `.ogg`; at least now the `music`
    file to use can be determined automatically. Chrome now seems to prefer WebM over
    `.mp3` or `.ogg` but will still work with `.mp3` and `.ogg`. Firefox, on the other
    hand, prefers to use `.ogg` and doesn't work with `.mp3`.
  prefs: []
  type: TYPE_NORMAL
- en: '`ig.music` is in itself a sort of playlist with several functions. Using the
    `add()` method will add another song to the end of the playlist. You can populate
    this list with virtually an endless number of songs. The `music.volume` method
    sets your song volume and ranges from `0` to `1`. The `music.play()` method will
    activate the first song from the playlist. The previous piece of code will not
    only activate your song, but also loop it indefinitely because it does this by
    default. There are many other functions apart from the ones used to simply start
    the loop.'
  prefs: []
  type: TYPE_NORMAL
- en: '`fadeout(time)` will make your song fade out over the time you specified as
    input argument. When the song''s volume reaches `0`, it will call the `stop()`
    method, which stops the song from playing. Whatever you expect on a regular radio
    is present in ImpactJS. You have the `pause()` and `next()` methods, and the `loop`
    and `random` properties to make the songs loop and play randomly. Another interesting
    property is `currentIndex` since this will return the position of the currently
    playing song in the playlist. This is extremely useful in managing the order of
    your songs and switching between them when necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: Playing a sound when an action has happened
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ig.music` is convenient for music use since it has many functions in common
    with a basic media player. While for playing music `ig.music` is the best option,
    for playing sound effects, you should use `ig.sound` for best results.'
  prefs: []
  type: TYPE_NORMAL
- en: A sound effect is not constantly active but only happens when certain actions
    are performed. Let's say we want to hear a gunshot when the player fires a projectile.
    We need to add the sound in the player's `init()` method so it becomes available
    as a resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `player.js` add `this.gunshotsound` using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then actually play the sound when the projectile is fired by adding the
    following code to `player.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: While in `ig.music` songs are added to a playlist, sounds are initiated by calling
    a new instance of `ig.sound`. When only one song is added to the music playlist,
    by default it is looped forever. This is not the case for the sound effects initiated
    with `ig.sound`, there is no `loop` property, and sounds are thus played only
    once when the `.play()` method is called. `ig.sound` has the property `.enabled`,
    which is set to `true` by default. Setting it to `false` will deactivate all sound
    and music for the game. This is useful since some mobile devices still have trouble
    when they need to play two different sounds at once. Playing two different sounds
    at the same time is extremely common, especially if you already have your background
    music playing at all times. By using Ejecta, the ImpactJS direct canvas solution,
    this issue can be resolved. The code remains the same but Ejecta currently only
    supports iPhone and iPad, not Android or Windows devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tips when using sound files in your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Optimizing sound files is about keeping it short and simple. Most games have
    short songs which aren''t too intrusive so they don''t always get noticed. A song
    that doesn''t get noticed can still affect a mood while it doesn''t get too repetitive.
    For optimization purposes a few are a few things you should certainly take care
    of:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep the songs short and load them into memory only when needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare the same song in both `.ogg` and `.mp3` so that the system on which
    it needs to be played can choose which extension is most efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-check whether your sound works on the mobile devices on which you aim
    to release the game using the following code. If it doesn't, make sure to turn
    off all the sound on these devices until it becomes possible to make the sound
    work on them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not so much an optimization as a user-friendliness measure, but make
    sure you allow the player to turn off the music and sound effects. Best is to
    separate both: some players like to hear their guns fire but just don''t like
    your music. If you use game analytics, make sure to track these changes so that
    you can learn which kind of songs are acceptable and which ones aren''t.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we have discussed music and sound effects as an important element
    that aids in creating an atmosphere in your game. We talked about whether you
    should buy or create music and where you can find it: for free or at a price.
    We created our own basic background tune using FL Studio and added this to our
    game. Finally we went over some pointers for using music in ImpactJS.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will take a look at graphics. We will check if it is
    better to buy or to make them, and how to create graphics with Inkscape or Photoshop.
  prefs: []
  type: TYPE_NORMAL
