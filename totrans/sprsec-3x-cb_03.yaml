- en: Chapter 3. Spring Security with JSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating JSF with Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSF with form-based Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSF and form-based authentication using Spring Security to display logged-in
    user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSF with digest/hashing-based Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging out with JSF using Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating database with Spring Security and JSF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ApacheDS authentication with JSF and Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication error message with JSF and Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many applications developed in Apache Faces/JSF. It's not an action
    oriented framework like Struts 2, but purely meant for the view layer. To implement
    Spring Security with JSF, we need to figure out some work around. Let's see some
    recipes with respect to JSF and Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: I have used the latest stable version of Spring Security and Spring-core. If
    you want to do an update with your libraries, you can read the following section.
    For Maven users, it's all about updating the dependencies and for the normal Eclipse
    users, it's about adding the `.jar` files to the `lib` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting up JSF application on Eclipse**'
  prefs: []
  type: TYPE_NORMAL
- en: Use Eclipse Java EE developer tools and set up a dynamic web project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give project name: `JSf_Spring_Security_Chapter_3_Recipe1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a dynamic web module Version 2.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configurations: JavaServer Faces v1.2 project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next **New Dynamic Web Project** window, click on **Download library**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Apache MyFaces lib.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Spring Security MAJOR/MINOR/PATCH versions**'
  prefs: []
  type: TYPE_NORMAL
- en: When I was setting up security for my applications, I faced a lot of errors
    with the schema versioning.
  prefs: []
  type: TYPE_NORMAL
- en: Spring source gives a good description about which version to download. It suggests
    that the PATCH version is the safest and will not affect the existing code, since
    it will use backward compatibility. The MINOR version comes with the design changes
    and MAJOR version comes with major API changes. For the JSF recipe I have been
    using 3.1.4 security version and I have downloaded Spring-3.1.4 related JARs.
  prefs: []
  type: TYPE_NORMAL
- en: You can download spring-security-3.1.4.RELEASE-dist, which comes with all the
    latest JARs.
  prefs: []
  type: TYPE_NORMAL
- en: 'JARs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-security-config` does the namespace parsing and will read the `spring-security.xml`
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security web interacts with the web application filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save these JARs in your `WEB-INF/lib` folder of your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating JSF with Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a simple Apache MyFaces application in Eclipse. Also let's integrate
    Spring Security to JSF, and then demonstrate basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need Eclipse Indigo or a higher version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a dynamic web project JSF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your Eclipse IDE, create a dynamic web project: `JSf_Spring_Security_Chapter_3_Recipe1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a source folder: `src/main/java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a package: `com.packt.jsf.bean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a Managed Bean: `User.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Tomcat server to deploy the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to implement a basic authentication mechanism with
    JSF and Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User.java` is the Managed Bean of the application. It has two methods: `sayHello()`
    and `reset()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`User.java class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a JSP file, which is based on the `ApacheMyFaces` tags. It expects
    a mandatory `<f:view>` tag. It''s a convention to create a JSP file with the same
    name as its bean. It has a form which accepts the name and says **"hello"** on
    clicking the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`User.jsp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `faces-config.xml` file with the Managed Bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Spring-security.xml` file remains the same but I have used the latest
    jar- 3.1.4 security jars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `web.xml` file should be updated with Spring filters and listeners. It
    also has configurations of MyFaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Spring-security.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user tries to access the secured `user.jsp` page, Spring Security intercepts
    the URL and redirects the user to the login page. On successful authentication,
    the user is redirected to the success `url` mentioned in the `spring-security.xml`
    file. The following screenshots show the workflow of implementing basic authentication
    with JSF and Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the following URL: `http://localhost:8086/JSf_Spring_Security_Chapter_3_Recipe1/faces/User.jsp`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a basic authentication dialog box asking you to log in as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot is the secured page of JSF, which can be accessed
    after successful authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *JSF with form-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *JSF and form-based authentication using Spring Security to display logged-in
    user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging out with JSF using Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating database with Spring Security and JSF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSF with form-based Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will implement the form-based authentication with JSF and
    Spring Security. Integrating Apache MyFaces with Spring Security is not as simple
    as Struts 2 integration.
  prefs: []
  type: TYPE_NORMAL
- en: It needs a work around. The `/j_spring_security` method can't be understood
    by ApacheMyfaces. The work around is to create a custom login method in our Managed
    Bean class. We will use the JSF external context class to pass the authentication
    request to the Spring Security Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new project in you Eclipse IDE: `JSF_Spring_Security_Chapter_3_Recipe2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do the configurations as shown in the following screenshot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a package: `com.packt.jsf.beans`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to integrate JSF with Spring Security to implement
    form-based authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a web project in Eclipse:![How to do it...](img/7525OS_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Credential Manager Bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This bean has all the properties of a form-based authentication bean and customized
    login method ();
  prefs: []
  type: TYPE_NORMAL
- en: The `j_username` and `j_password` values will be set and the user is displayed
    in the secured page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `doSpringSecurityLogin()` bean: Just like we access `ServletContext` and
    we bind it with the request dispatcher, we can use `ExternalContext` with request
    dispatcher to execute the `/j_spring_security_check`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `phaseListener` implementation is meant to capture the authentication exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: '`CredentialManager.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update the `Spring-security.xml` file. The `login-processing`-`url`
    is mapped to `j_security_check`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Managed Bean into the `faces-config.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now comes the `login.jsp` file for Apache MyFaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `login.jsp` file should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`prependID=false`'
  prefs: []
  type: TYPE_NORMAL
- en: It should submit to the custom login method defined in the `ManagedBean`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the following URL: `localhost:8086/JSF_Spring_Security_Chapter_3_Recipe2/faces/Supplier.jsp`.'
  prefs: []
  type: TYPE_NORMAL
- en: When the user accesses the URL, they will be redirected to the login page. The
    user then enters their credentials and clicks on **Submit**. The `ExternalContext`
    object is instantiated using the `FacesContext` object using the `PhaseListener`
    implementation. The `context` object is passed to the request object with `'j_spring_security_check'`
    URL. The Spring Security will do the authentication and authorization. On authentication
    failure, an exception is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *JSF and form-based authentication using Spring Security to display logged-in
    user* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging out with JSF using Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating database with Spring Security and JSF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSF and form-based authentication using Spring Security to display logged-in
    user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we demonstrated the implementation of form-based authentication
    using Spring Security and JSF `phaseListener`. In this section we will display
    the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to perform some minor changes in the `Supplier.jsp` file.
  prefs: []
  type: TYPE_NORMAL
- en: How do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to display the logged in user details on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: To display the logged in user, access the managed bean object in your secured
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Supplier.jsp` file, edit the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user is redirected to the login page the faces context object submits
    the user information to Spring Security. On success the user POJO's getters and
    setters sets the user information, which is used to display the user information
    on the JSP page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the workflow for displaying the user information
    in the browser using JSF and Spring Security with form-based authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On successful authentication, the user will be directed to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using JSF with digest/hashing-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging out with JSF using Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating database with Spring Security and JSF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSF with digest/hashing-based Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will implement digest authentication with JSF and Spring
    Security. The user's password is hashed using one of the encryption algorithms
    and configured in the `.xml` file. The algorithm used to hash the password is
    also mentioned in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring digest authentication works fine with JSF as well. We need to hash the
    password using `jacksum.jar`. Provide the hashed password in the configuration
    file. Also mention the algorithm used for hashing in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for implementing the digest authentication mechanism
    with JSF and Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s encrypt the password: `packt123456`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to use an external jar, Jacksum, which means Java checksum.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It supports both MD5 and SHA1 encryption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `jacksum.zip` file and extract the ZIP folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/7525OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's create a new project to demonstrate this and we will use basic authentication.
    Create a dynamic web project in Eclipse and name it `JSF_Spring_Security_DIGEST_Recipe3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `web.xml`, `face-config.xml`, and JSP settings remain the same as the `JSF_Spring_Security_Chapter3_Recipe1`.
    We need to update the `Spring-security.xml` file to authenticate using the SHA
    encryption and decryption:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Spring-security.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run the application, you will be prompted with a dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: On entering the username and password, the Spring Framework will decrypt the
    password and will compare it with the user's entered details. When they match,
    it flags an authentication success message, which will make the context object
    redirect the user to the success URL.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots show the workflow of digest authentication with JSF
    and Spring.
  prefs: []
  type: TYPE_NORMAL
- en: It is a basic form but the authentication mechanism is digest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring has authenticated the user by decrypting the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_07.jpg)![How it works...](img/7525OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Logging out with JSF using Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating database with Spring Security and JSF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging out with JSF using Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will implement the logging out scenario using Spring Security
    in a JSF application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the `PhaseListener` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `commandButton` on the JSF page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for implementing Spring Security logout in a JSF
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a **New Dynamic Web Project** in your Eclipse:![How to do it...](img/7525OS_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will create a `CredentialManager` bean again. It will have another custom
    logout method. `Login.jsp` remains the same as the previous example. Do not forget
    to copy it into the new project. We will use form-based authentication here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s provide a **Logout** button in our secured page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Supplier.jsp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `Spring-security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `CredentialManager` class implements the `phaseListener interface`. The
    `doSpringSecurityLogout` method handles the Spring logout by creating a context
    object using `ExternalContext`. The context then submits the logout request that
    is `"/j_spring_security_logout"` to the Spring Security Framework, which logs
    out the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On clicking on logout, the user is redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Authenticating database with Spring Security and JSF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating database with Spring Security and JSF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the database to authenticate users with Spring
    Security in a JSF application. We have referred to the logout example and have
    used the database for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a dynamic web project in Eclipse: `JSF_Spring_DBAuthentication_Recipe6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the files and folders remain the same as the logout application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `security.xml` file and the `web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following JARs into the `lib` folder or update your POM file if you
    are using Maven:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-jdbc-3.1.4RELEASE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysql-connector-java-5.1.17-bin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commons-dbcp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commons-pool-1.5.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to authenticate the user information by retrieving
    data from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `Spring-security.xml` file to read the database configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`applicationContext-security.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data source reference is given in the `Sping-security.xml` file. When the
    user clicks on **Login**, the Spring Security filter will invoke the database
    authentication related classes, which will read the `db-beans.xml` file to establish
    the connection. The `<jdbc-user-service>` tag implements the database authentication
    by executing the query and retrieving the user information from the database based
    on the parameter submitted by the user in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *ApacheDS authentication with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ApacheDS authentication with JSF and Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will authenticate users in the JSF application using ApacheDS
    and Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ApacheDS authentication is similar to Struts 2 ApacheDS authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a dynamic web project in Eclipse: `JSF_Spring_ApacheDSAuthentication_Recipe7`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the files and folders remain the same as the logout application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `spring-security-ldap.jar` to your `web-inf/lib` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for configuring LDAP with Spring and the JSF application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `Spring-security.xml` file to read the LDAP configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JSF filters are used for delegation. Spring filters are used for authentication.
    We have used ldap-authentication-provider for setting the LDAP parameters to the
    Spring Security engine. When the application receives a request for authentication
    and authorization, spring-security-ldap provider sets the LDAP parameters and
    connects with the LDAP using the ldap-server-url parameter. It then retrieves
    the user details and gives it to the Spring authentication manager and filter
    to handle the response of the authentication.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Authentication error message with JSF and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication error message with JSF and Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can capture the authentication error message
    and display it to the user on the browser. The `credentialmanager` bean as displayed
    in the previous example will capture the authentication failure exceptions. We
    will see how to capture it in JSP.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `credentialmanager` bean has captured the bad credential exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to display it to the user. This can be done by using the `<h: messages>`
    tag in our JSP file. This should be given inside the grid tag. The very purpose
    of implementing the `phaselistener` in Managed Bean is to capture the message
    and display it to the user. This is the updated `login.jsp`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to capture the authentication failure message in
    JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `login.jsp` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `beforePhase()` method in the `credentialmanager` captures the authentication
    exceptions message. The exception is added to `FacesMessage`, which is captured
    in the JSP file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the screen on authentication failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the screen when empty credentials are entered
    in the username and password fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Spring Security with Grails"), *Spring Security
    with Grails*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
