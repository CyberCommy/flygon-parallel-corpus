- en: Test Design Phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A test case can be defined as a set of instructions for a user (tester) so that
    they can perform tests on an application in a predefined state. They will also
    need the predefined set of test data to get the expected results that are mentioned
    in the requirements. Testing cannot be done without a test case, as the product
    verification process starts with these test cases. They can either be automated
    or manual, but the objective remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics, as well as learn about
    the test design phase in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and maintaining test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing test cases and test data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the test team understands the requirements of the project, the test plan
    is prepared and approved. Now, the test team can start the **test design phase**—this
    phase requires the test team to create the test scenarios and test cases. In cases
    where automation testing is involved, a testable version of the product becomes
    available, which leads to the creation of the test scripts as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test case should briefly describe the purpose of the test, user actions,
    and the expected results as a result of those actions. The following are the details
    that are added while creating a test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Test Case Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| TC-ID | A test case ID helps you identify test cases uniquely. Usually, it
    is added by the testing ... |'
  prefs: []
  type: TYPE_TB
- en: Prioritizing test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are various methods for organizing test cases. You can add a label, project
    name, the requirement''s details, or even test suite details to group them under
    a single branch. An example of this is the **test priority**. The test priority
    is an effective way of organizing the test cases. Test priority sets the importance
    for the selected test case to verify the stated functionality by defining the
    level of urgency that dictates the order of execution. The priority status is
    usually one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Critical**: These need to be added to the project verification iterations
    and need to be executed at the beginning of the iteration. Designing and executing
    the critical test cases helps in reducing product risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**: These are important for the requirement verification process. After
    verifying critical priority test cases, the test team moves on to the high priority
    test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medium**: These include features worth validating; however, their impact
    is medium. Hence, during a tight execution schedule, the team cherry—picks a handful
    of test cases that will be the most relevant from the list for execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**: These have a minimal impact on the functionality of the application
    and are mostly designed to verify cosmetic changes in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test case status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The test case status during the test designing phase signifies the current
    state of the test case. Therefore, it''s helpful for the team to take an action
    based on it. The test status during the test design phase can vary and be any
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Draft/In Progress**: As the name suggests, when the test case is still under
    the designing phase and is incomplete, its status is marked as Draft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready for Review**: Once the tester has finished adding the details in the
    test case and it''s good to undergo review, the status can be set as Ready for
    Review.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review Completed**: Once the test case has been peer reviewed, its status
    can be updated as Review Completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready/Not Executed/No Run**: The test case can be marked as Ready to ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing test artifacts and their formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test cases can be written and captured in a variety of formats, such as being
    stored in text files, Word documents, Excel workbooks, or by utilizing specialized
    test capture tools. The most prevalent way, however, is creating test cases in
    Excel sheets and loading them into the test management tools such as HP ALM, Jira
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the detailed test execution steps, a test case can also have a variety
    of support documents or artifacts attached, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A prototype document that testers want to refer to during the execution phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of SQL queries and/or procedures that are needed for test execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details regarding the scheduled jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links to documents that can be referred to during execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, if the same test case has been utilized for one or more releases,
    then it can contain the execution artifacts, such as log files or screenshots
    that were generated during the previous release test. It is quite helpful to refer
    to the previously attached artifacts and compare the results of the current execution.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can create test cases and add the relevant details to them
    using the Jira tool.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a test case in synapseRT, test professionals need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Test Case option from the Issue Type field. The default issue type
    is Story; change it to Test Case and select the relevant project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After selecting the issue type, it''s time to enter all of the other required
    details, such as Summary, Description, Priority, Labels, Assignee, and Epic link.
    Once you are ready to create the test case, click on the Create button. We can
    always configure the fields that we want to display on this page using the Configure
    Fields icon from the top-right corner in the Jira issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/88ec0ecc-dd21-4eb8-b16e-c4fe79b82511.png)'
  prefs: []
  type: TYPE_IMG
- en: Jira will successfully create ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr also identifies a test case as another issue type. To create a test
    case in Zephyr, we need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the issue type as Test. We also need to enter the other required details
    such as Summary, Description, Priority, Linked Issues, Assignee, Test Step with
    Expected Result, and Test Data. Click on the Create button to create the test
    case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/0b98beb3-6784-4c36-aea8-e01d1aae360b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After creating the test case, you will see that it has all the details that
    we have entered. Like any Jira ticket, we can always modify these details. We
    also have the option to Clone the test case, add more related issues or requirements,
    or even start executing by clicking the Execute button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c5550981-c547-4da5-b1fb-1e28f86e5909.png)'
  prefs: []
  type: TYPE_IMG
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a test case in the Test Management tool, we need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the Tests section from the main tab and then click on the
    +New button to add a new test case. Now, we need to add a new test case under
    the `Test Mgmt project for Banking website` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/fae48c0c-1415-45a8-8aa2-6d1d01940989.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on the +New button, enter the required details in the Details
    tab, such as the Name of the test case, Objective, Preconditions (if any), and
    other relevant details such as Label, Status, Priority, Owner, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it's time to add the test steps. Click on the Test Script tab to add STEP,
    EXPECTED RESULT, and relevant ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reusing test cases across different projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned how to write new test cases, let's look at how we can
    efficiently reuse existing ones for the project.
  prefs: []
  type: TYPE_NORMAL
- en: For a completely new project or release that doesn't have any dependent or related
    artifacts from past projects or releases, the test team must design all the test
    cases for all of the feature requests being released. However, as the product
    evolves and undergoes multiple releases, some of the common untouched features
    remain stable. This makes way for an opportunity to reuse test cases for future
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various reasons why you would want to reuse existing test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a new team member joining the team, the existing test cases can
    help them familiarize with the product by going through the existing test cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reduces the overhead of creating all the test cases for the unchanged and
    already verified functionality from the previous releases. Testers can simply
    pull the existing valid test cases as part of the current iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides a baseline with the attached artifacts for testers to compare the
    functionality of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to find missing functionality by comparing the execution results from
    previous releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps in regression testing and verifying those parts of the application
    that haven't changed in the targeted release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps the team to be aware of any existing reported defects that could be
    linked to the relevant test cases. This provides direction for testers to verify
    the functionality that broke during the last release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It saves time and effort in reviewing the test cases for the same functionality
    for which a relevant test case already exists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also help other teams that are a part of the larger project to learn
    more about the previously released product or service when they want to refer
    to the existing test cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a new project has been introduced as an extension of the previous product,
    existing test cases can be reused by the team to perform integration or compatibility
    testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see how we can reuse existing test cases and link them across multiple
    projects by using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can reuse existing test cases in synapseRT by adding them to the test suites
    under a different project. As shown in the following screenshot, the test cases
    `SYN-1`, `SYN-3`, and `SYN-4` are part of `SynapseTestProject`, and have been
    added to a `Reusing Existing Test Cases` test suite, which is a part of the `Banking
    payment using mobile devices project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/95dc45d4-6ca2-4787-9719-438a8639a15e.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zephyr doesn't support the functionality to copy the test cases or test cycles
    from one project to another. However, to reuse the existing test cases in another
    project, you can copy the structure of the test case, which only clones the issue
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to explore this option, feel free to refer to the following page: [https://wiki.almworks.com/display/structure/Copying+a+Structure](https://wiki.almworks.com/display/structure/Copying+a+Structure).
  prefs: []
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test cases can be copied to another project in the Test Management tool so
    that they can be reused. To add them to a new project, we need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Test tab and click on the ellipses. Select the option to Import
    from other projects**…**. As shown in the following screenshot, we are adding
    test cases to a new project, the `TM Mobile payment project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7eba8b94-2755-48ab-9626-17c791f6bfb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, from the Projects drop-down menu, select the name of the project from which
    you want to copy the test cases. As soon as you select the project name, it shows
    the test cases that exist under that project. Select the checkbox for all of the
    test cases ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Organizing test cases in main and subtest suites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various factors that you need to consider while creating the main
    test suite and subtest suites to organize test cases. The main test suites can
    be created based on the project name or the module, and adding subtest suites
    helps to further categorize them based on the types of testing, environment, user
    role, and so on. As described in the test creation table, we can use one or more
    fields to categorize them, such as by project name, requirement ID, test verification
    environments, build number, or testing types.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good practice to add test cases as and when you create them, instead
    of sorting them out in bulk.
  prefs: []
  type: TYPE_NORMAL
- en: Jira plugins also provide us with the flexibility to organize test cases based
    on our criteria. Let's look at this in detail now.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test cases pertaining to a project can be viewed from the Test Suites tab.
    As shown in the following screenshot, we can see all of the active test suites
    for a `SynapseTestProject` project in the active section of the Test Suites tab.
    We do have an option to Clone the test cases across different test suites in the
    same project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ab416ee6-40f5-4c56-9834-a0b2ce25fc08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view all subtest suites and test cases, click on the edit icon for that
    test suite. As shown in the following screenshot, we have a test suite view in
    edit mode. It has two subtest suites with a total of four test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Zephyr, all the test cases of the current projects are organized into separate
    cycles and sub-cycles under the Tests tab. As shown in the following screenshot,
    we can view the number of test cases and their current execution status by selecting
    the test cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/92cff1f6-619e-4290-8733-744fe2ea6bcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Test Management tool, all of the test cases can be organized under the
    Tests tab. The following screenshot shows all the test cases under the All test
    cases folder, which can then be further organized under main and sub test suites:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/213819f9-1936-4ce2-a18d-e453b9906444.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the test design phase by creating and organizing
    test cases for a current project, as well as reusing them under a different project. A
    test case describes the step-by-step actions that a tester needs to perform to
    get their expected results. Setting up the current data or appropriate environment
    is essential for getting accurate results, since any change to the environment
    and test data can alter these results. Reusing these test cases across different
    projects as and when needed minimizes the time and effort spent on creating and
    reviewing test cases.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how test cases can be reused across projects using Jira plugins. There
    are various ways to organize test cases in the test repositories. We can segregate
    them based on test suites, sub-test suites, label, requirement ID, and so on.
    We saw how Jira plugins can be used to create these test repositories for the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a closer look at the test execution phase
    and how this will be managed using Jira.
  prefs: []
  type: TYPE_NORMAL
