- en: Chapter 7.  Routing with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have learned about the Redux architecture and how
    we can handle the two states, the data state and the UI state, to create single
    page applications or components. For now, if needed, our application UI will be
    in sync with the URL and we need to use the React router to make our application
    UI in-sync.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of React router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at some of the advantages of the React router:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing declarations in a standardized structure helps us to instantly understand
    what are our app views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy code loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the React router, we can easily handle the nested views and the progressive
    resolution of views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the browsing history feature, the user can navigate backwards/forwards
    and restore the state of the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic route matching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS transitions on views when navigating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardized app structure and behavior, useful when working in a team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The React router doesn't provide any way to handle data fetching; we need to
    use `asyncProps` or another React data fetching mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll take a look at how we can create routes, as well as
    routes containing parameters. Before we begin, let''s plan out exactly what routes
    we''re going to need for our **Employee Information System** (**EIS**). Observe
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advantages of React router](graphics/image_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is from [Chapter 2](ch02.html "Chapter 2. Lets Build
    a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React* for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Lets Build a Responsive Theme with React-Bootstrap
    and React"), *Lets Build a Responsive Theme with React-Bootstrap and React,* we
    created the responsive theme layout for our app moving forward. Now we'll add
    the routing in this to navigate to each page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Home**: This is going to be our home page, which will show the employee profile
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit Profile**: Here, we''ll able to edit information about the employee'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Tickets**: In this page, the employee will be able to see the tickets
    which he has submitted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New Ticket**: Here, the employee can submit the tickets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are all of our essential routes; so let's take a look at how we can create
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Installing router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The React router has been packaged as a different module outside the React
    library. We can use the React router CDN at: [https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can include it in our project like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can use the `npm` package for React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using an ES6 transpiler, like Babel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Not using an ES6 transpiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: OK, now let's do the setup of our project and include the React router.
  prefs: []
  type: TYPE_NORMAL
- en: Application setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React router doesn't look the same as other JS routers. It uses the JSX
    syntax that makes it different to other routers. First we will create a sample
    app without using the `npm` package for a better understanding of the router concept.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to do the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `Chapter 2` directory structure and files into `Chapter 7`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the existing HTML files and create a new `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy this boilerplate code in your HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open the `index.html` in the browser. Make sure that the output does not show
    any errors in the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've already created HTML, now we need to add a Bootstrap `navbar` component
    in `bootstrap-navbar.js` that we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'For configuring the routing, let''s create one component in `routing.js` that
    will be in sync with the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open it in your browser and here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating routes](graphics/image_07_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add the `Router` to render our `homePage` component with the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, using the `<Route>` tag defines a rule where visiting
    the home page will render the `homePage` component into the `''main''`. As we
    already know, the React router used JSX to configure the router. `<Router>` and
    `<Route>` both are different things. The `<Router>` tag should always be the primary
    parent tag that wraps the multiple URLs with the `<Route>` tag. We can declare
    multiple `<Route>` tags with attribute components that make your UI in-sync. When
    the history changes, the `<Router>` will render the component with the matching
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It looks very simple and clear that the router will switch the routes with the
    view without making a request to the server and render them into the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Page layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's assume that if we need a different layout for every component, such as
    the home page, there should be two columns, and other pages should have one column,
    but they both share common assets such as headers and footers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the layout mock-up of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Page layout](graphics/image_07_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'OK, so now let''s create our main layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have created the main layout for our app that handles
    the child layout components with `this.props.children` instead of a hard-coded
    component. Now we''ll create child components that are rendered in our main layout
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have created two components, `RightSection` and `ColumnLeft`,
    to wrap and divide our components in different sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'So it should be easy for us to manage the layout in a responsive design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have split our components into two sections: `<ColumnLeft/>`
    and `<RightSection/>`. We have given the reference of both components in the `<TwoColumnLayout/>`
    component. In the parent component, we have `this.props.children` as a prop, but
    it only works when components are nested and React is responsible for filling
    this prop automatically. `this.props.children` will be null if the components
    aren''t parent components.'
  prefs: []
  type: TYPE_NORMAL
- en: Nested routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK, we have done with creating layout specific components, but we still need
    to look at how we can create nested routes for them so that the components are
    passed into parents with props. This is important, so as to allow a level of dynamism
    within our EIS application. Here is our HTML, showing what it looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the router which we created earlier once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So now we have added the extra element, `<IndexRoute />`, to the mapping with
    our parent, setting its view to be our `{TwoColumnLayout}` component. The `IndexRoute`
    element is responsible for which component is being displayed when our app initially
    loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to wrap inside the `{PageLayout}` component. We can also define
    the path rule on `<indexRoute>,` the same as `<Route>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nested routes](graphics/image_07_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That looks good. As mentioned in our `<IndexRoute>`, it always loads the `<TwoColumnLayout>`
    on the first page load. Now let's navigate and take a look at some other pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'React also provides us with a way to redirect the route using the `<IndexRedirect>`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nested routes](graphics/image_07_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You'll have noticed that I've clicked on the **Edit Profile** page and it rendered
    the edit page component but it didn't add the active class on the current active
    link. For this we need to replace the `<a>` tag with the React `<Link>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: React router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The React router used the `<link>` component instead of the `<a>` element which
    we have used in `nav`. It's necessary to use this if we are working with the React
    router. Let's add `<link>` in our navigation instead of the `<a>` tag and replace
    the `href` attribute with two.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<a>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace this with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look in the browser to see the behavior of `<link>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![React router](graphics/image_07_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s showing an error in the console because we have not added the `Link`
    component reference in the `ReactRouter` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have also added the `browserHistory` object, which we'll explain later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what our `PageLayout` component looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To activate the default link, we''ve used `<IndexRoute>`. This automatically
    defines the default link''s active class. The `activeClassName` attribute will
    match the URL with the `to` value and add the active class to it. If we do not
    use `activeClassName` then it cannot add the class automatically on the active
    link. Let''s take a quick look at the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![React router](graphics/image_07_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s working as expected. Let''s take a look at the DOM HTML in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![React router](graphics/image_07_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We just need to overwrite the Bootstrap default style on `<li> .active` to
    `<a>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also pass a parameter in the route to match, validate, and render the
    UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the router we need to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We can add as many parameters as required, and it's easy to pull these out in
    our component. We'll have access to all the `route` parameters as objects.
  prefs: []
  type: TYPE_NORMAL
- en: The React router supports the IE9+ browser version but for IE8 you can use the
    Node `npm` package, `react-router-ie8`
  prefs: []
  type: TYPE_NORMAL
- en: NotFoundRoute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The React router also provides a way to show a 404 error on the client side
    if the path is not matched with the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NotFoundRoute](graphics/image_07_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's amazing how easily we can handle the unmatched URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what our router looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the list of other `link` attributes that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeStyle`: We can use this for the custom inline style. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`onlyActiveOnIndex` : We can use this attribute when we add a custom inline
    style with the `activeStyle` attribute. It will apply only when we are on an exact
    link. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Browser history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One more cool feature of the React router is that it uses the `browserHistory`
    API to manipulate the URL and create a clean URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the default `hashHistory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When we use the `browserHistory` in our app, the URL will look clean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The URL now looks clean and user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Query string parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also pass query strings as `props` to any component that will be rendered
    at a specific route. For accessing these prop parameters, we need to add the `props.location.query`
    property in our component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how this works, let''s create a new component called `RouteQueryString`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Include this route path in the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see the output in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query string parameters](graphics/image_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great, it's working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what our `Router` configuration looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Customizing your history further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to customize the history options or use other enhancers from history,
    then we need to use the `useRouterHistory` component of React.
  prefs: []
  type: TYPE_NORMAL
- en: '`useRouterHistory` already pre-enhances from the history factory with the `useQueries`
    and `useBasename` from history. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `useBeforeUnload` enhancer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Before using the React router, we must be aware of React router version updates.
  prefs: []
  type: TYPE_NORMAL
- en: Please visit this link [https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md](https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md)
    to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the short list of deprecated syntax in the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`history.isActive` is replaced with `router.isActive`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`RoutingContext` is renamed `RouterContext`.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we transformed our application from one single page to multiple
    pages and a multiroute app that we can build our EIS application upon. We started
    by planning out the main routes in our application before creating a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then looked at how we can use the `<Router>` and `<Route>` methods to set
    up our routes. This was done by `var { Router, Route, IndexRoute,IndexLink, Link,
    browserHistory } = ReactRouter`. We have also looked at other methods: `<Link>`, `<IndexLink>`,
    and `<IndexRoute>`.'
  prefs: []
  type: TYPE_NORMAL
- en: This allowed us to set up static and dynamic routes containing parameters to
    make our app UI sync perfectly with the URL.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how we can integrate other APIs with React.
  prefs: []
  type: TYPE_NORMAL
