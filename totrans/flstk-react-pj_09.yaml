- en: Customizing the Media Player and Improving SEO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users visit a media-streaming application mainly to play the media and explore
    other related media. This makes the media player, and the view that renders the
    related media details, crucial to a streaming application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on developing the play media page for the MERN
    Mediastream application that we started building in the previous chapter. We will
    address the following topics to bolster the media-playing functionalities, and
    to help boost the presence of the media content across the web so that it reaches
    more users:'
  prefs: []
  type: TYPE_NORMAL
- en: Customize controls on `ReactPlayer`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play next from a list of related videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoplay a list of related media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side render the Media view with data to improve SEO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MERN Mediastream with a custom media player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN Mediastream application developed in the previous chapter implemented
    a simple media player with default browser controls that played one video at a
    time. In this chapter, we will update the view that plays the media with a customized
    `ReactPlayer` and a related media list that can be set to play automatically when
    the current video ends. The updated view with the custom player and related playlist
    will look as pictured in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f2b187f-d816-4640-a728-d3627fbf0a39.png)The code for the complete
    MERN Mediastream application is available on GitHub at [github.com/shamahoque/mern-mediastream](https://github.com/shamahoque/mern-mediastream). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following component tree diagram shows all the custom components that make
    up the MERN Mediastream frontend, highlighting the components that will be improved
    or added in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48f71397-98ac-4e74-92de-dfb7d6758f4c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: New components added in this chapter include the `MediaPlayer` component, which
    adds a `ReactPlayer` with custom controls, and a `RelatedMedia` component, which
    contains a list of related videos.
  prefs: []
  type: TYPE_NORMAL
- en: The play media page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When visitors want to view specific media on MERN Mediastream, they will be
    taken to the play media page, which will contain the media details, a media player
    to stream the video, and a list of related media that can be played next.
  prefs: []
  type: TYPE_NORMAL
- en: Component structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will compose the component structure in the play media page in a way that
    allows the media data to trickle down to the inner components from the parent
    component. In this case, the `PlayMedia` component will be the parent component,
    containing the `RelatedMedia` component, and the `Media` component with a nested
    `MediaPlayer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3e134b6-0f5f-4e9b-93cb-cce0c5a316b5.png)'
  prefs: []
  type: TYPE_IMG
- en: When individual media links are accessed, the `PlayMedia` component will mount
    and retrieve the media data and related media list from the server. Then, the
    relevant data will be passed as props to the `Media` and `RelatedMedia` child
    components.
  prefs: []
  type: TYPE_NORMAL
- en: The `RelatedMedia` component will link to a list of other related media, and
    clicking each will re-render the `PlayMedia` component and inner components with
    the new data.
  prefs: []
  type: TYPE_NORMAL
- en: We will update the `Media` component we developed in [Chapter 8](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml), *Building
    a Media-Streaming Application*, to add a customized media player as a child component.
    This customized `MediaPlayer` component will also utilize the data passed from
    `PlayMedia` to stream the current video and link to the next video in the related
    media list.
  prefs: []
  type: TYPE_NORMAL
- en: In the `PlayMedia` component, we will add an autoplay toggle that will let users
    choose to autoplay the videos in the related media list, one after the other.
    The autoplay state will be managed from the `PlayMedia` component but this feature
    will require the data in state to re-render when a video ends in the `MediaPlayer`,
    which is a nested child component, so the next video can start playing automatically
    while keeping track of the related list.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, the `PlayMedia` component will need to provide a state updating
    method as a prop, which will be used in the `MediaPlayer` component to update
    the shared and interdependent state values across these components.
  prefs: []
  type: TYPE_NORMAL
- en: Taking this component structure into consideration, we will extend and update
    the MERN Mediastream application to implement a functional play media page.
  prefs: []
  type: TYPE_NORMAL
- en: Related media list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The related media list will consist of other media records that belong to the
    same genre as the given video and is sorted by the highest number of views.
  prefs: []
  type: TYPE_NORMAL
- en: Related list API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to retrieve the list of related media from the database, we will set
    up an API on the server that will receive a GET request at `'/api/media/related/:mediaId'`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `listRelated` controller method will query the Media collection to find
    records with the same genre as the media provided, and also exclude this media
    record from the results returned. The results returned will be sorted by the highest
    number of views and limited to the top four media records. Each `media` object
    in the returned results will also contain the name and ID of the user who posted
    the media.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: On the client side, we will set up a corresponding `fetch` method that will
    be used in the `PlayMedia` component to retrieve the related list of media using
    this API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/api-media.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The RelatedMedia component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `RelatedMedia` component takes the list of related media as a prop from
    the `PlayMedia` component, and renders the details along with a video snapshot
    of each video in the list.
  prefs: []
  type: TYPE_NORMAL
- en: We iterate through the media list using the `map` function to render each media
    item.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To show the video snapshot, we will use a basic `ReactPlayer` without the controls.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking on the snapshot will re-render the PlayMedia view to load the linked
    media details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/087a88c8-0ee4-46c9-a3c7-0e0942fe6fb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Beside the snapshot, we will display the details of each video including title,
    genre, created date, and number of views.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To use this `RelatedMedia` component in the view, we will add it in the `PlayMedia`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The PlayMedia component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `PlayMedia` component consists of the `Media` and `RelatedMedia` child components
    along with an autoplay toggle, and it provides data to these components when it
    loads in the view. To render the `PlayMedia` component when individual media links
    are accessed by the user, we will add a `Route` in `MainRouter` to mount `PlayMedia`
    at `'/media/:mediaId'`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When the `PlayMedia` component mounts, it will fetch the media data and the
    related media list from the server using the `loadMedia` function based on the
    `media ID` parameter in the route link.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `loadMedia` function uses the media ID and the `read` API `fetch` method
    to retrieve the media details from the server. Then, it uses the `listRelated`
    API fetch method to retrieve the related media list from the server and sets the
    values to state.
  prefs: []
  type: TYPE_NORMAL
- en: The `loadMedia` function is called with the `mediaId` value when the component
    mounts and also when it will receive props.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To access the `mediaId` parameter in the route URL when the component mounts,
    we need to access the react-router `match` object in the component's constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The media and related media list values stored in the component's state are
    used to pass relevant props to the child components that are added in the view. For
    example, the `RelatedMedia` component is only rendered if the list of related
    media contains any items, and passed to the list as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Later in the chapter, in the *Autoplaying related media* section, we will add
    the autoplay toggle component above the `RelatedMedia` component only if the length
    of the related media list is greater than zero. We will also discuss the implementation
    of the `handleAutoPlay` method that will be passed as a prop to the `Media` component,
    along with the media detail object, and the video URL for the first media in the
    related media list as the next URL to play.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `Media` component renders the media details, and also a media player that
    allows viewers to control the streaming of the video.
  prefs: []
  type: TYPE_NORMAL
- en: Media player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will customize the player controls on `ReactPlayer` to replace the default
    browser controls with a custom look and functionality, as seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c97a393-aea9-4d2b-ad38-f61da596bf40.png)'
  prefs: []
  type: TYPE_IMG
- en: The controls will be added below the video and will include the progress seekbar,
    the play, pause, next, volume, loop, and fullscreen options, and also display
    the played-duration time.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Media component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a new `MediaPlayer` component that will contain the customized
    `ReactPlayer`. In the `Media` component, we will replace the previously used `ReactPlayer`
    with the new `MediaPlayer` component, and pass on the video source URL, the next
    video's URL and the `handleAutoPlay` method, which are received as `props` from
    the `PlayMedia` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/Media.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Initializing the media player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MediaPlayer` component will contain the `ReactPlayer` component, starting
    with the initial control values before we add the custom controls and handling
    code.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will set the initial control values to `state`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the view, we will add `ReactPlayer` with the control values and source URL,
    using the prop sent from the `Media` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We will get a reference to this player, so it can be used in the change-handling
    code for the custom controls.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If the source video cannot be loaded, we will catch the error.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then we will conditionally show an error message in the view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Custom media controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add custom player control elements below the video and manipulate their
    functionality using the options and events provided by the `ReactPlayer` API.
  prefs: []
  type: TYPE_NORMAL
- en: Play, pause, and replay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users will be able to play, pause, and replay the current video, and we will
    implement these three options using `Material-UI` components bound to `ReactPlayer`
    attributes and events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52a12bc4-9e39-4efc-bfba-c5d77ff41219.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement the play, pause, and replay functionality, we will add a play,
    pause, or replay icon button conditionally depending on whether the video is playing,
    paused, or has ended.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks the button, we will update the playing value in state,
    so that `ReactPlayer` is updated.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Play next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users will be able to play the next video in the related media list using the
    next button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26dd9561-6f17-4f76-b118-a5755e88fef7.png)'
  prefs: []
  type: TYPE_IMG
- en: The next button will be disabled if the related list does not contain any media.
    The play next icon will basically link to the next URL value passed in as a prop
    from `PlayMedia`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on this `next` button will reload the `PlayMedia` component with the
    new media details and start playing the video.
  prefs: []
  type: TYPE_NORMAL
- en: Loop on ended
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users will also be able to set the current video to keep playing in a loop
    using the loop button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bd40c922-9269-4e12-abb0-13d1cc516a7c.png)'
  prefs: []
  type: TYPE_IMG
- en: We will set up a loop icon button that will render in a different color to indicate
    whether it is set or unset.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When the loop icon button is clicked, it updates the `loop` value in state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will need to catch the `onEnded` event, to check whether `loop` has been
    set to true, so the `playing` value can be updated accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: So if the `loop` is set to true, when the video ends, it will start playing
    again, otherwise it will stop playing and render the replay button.
  prefs: []
  type: TYPE_NORMAL
- en: Volume control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to control the volume on the video being played, users will have the
    option to increase or decrease the volume, as well as to mute or un-mute. The
    rendered volume controls will be updated based on the user action and current
    value of the volume:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A volume up icon will be rendered if the volume is raised:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/74ba3641-fea7-48d8-8b15-8a36ad7f0df4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A volume off icon will be rendered if the user decreases the volume to zero:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/cef09c93-73fe-48bc-a36b-d97965b28e14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A volume mute icon button will be shown if the user clicks the icon to mute
    the volume:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/b34a64a7-d26b-487d-9783-48b66f54b040.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To implement this, we will conditionally render the different icons in an `IconButton`,
    based on the `volume`, `muted`, `volume_up`, and `volume_off` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When this volume button is clicked, it will either mute or unmute the volume.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To allow users to increase or decrease the volume, we will add an `input range`
    that will allow users to set a volume value between `0` and `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Changing the `value` on the input range will set the `volume` value accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Progress control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use a Material-UI `LinearProgress` component to indicate how much of
    the video has been buffered, and how much has been played. Then we''ll combine
    this component with a `range input` to give users the ability to move the time
    slider to a different part of the video and play from there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3406e0dd-b022-472d-aec1-16d1f4697a25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `LinearProgress` component will take the `played` and `loaded` values to
    show each in a different color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To update the `LinearProgress` component when the video is playing or loading,
    we will use the `onProgress` event listener to set the current values for `played`
    and `loaded`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: For time-sliding control, we will add the `range input` element and use CSS
    styles to place it over the `LinearProgress` component. The current value of the
    range will update as the `played` value changes, so the range value seems to be
    moving with the progression of the video.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the case where the user drags and sets the range picker on their own, we
    will add code to handle the `onMouseDown`, `onMouseUp`, and `onChange` events
    to start the video from the desired position.
  prefs: []
  type: TYPE_NORMAL
- en: When the user starts dragging by holding the mouse down, we will set seeking
    to true, so that the progress values are not set to `played` and `loaded`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As the range value change occurs, we will set the `played` value and also the
    `ended` value, after checking whether the user dragged the time slider to the
    end of the video.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When the user is done dragging and lifts their click on the mouse, we will set
    `seeking` to `false`, and set the `seekTo` value for the player to the current
    value in the `range input`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This way, the user will be able to select any part of the video and also get
    visual information of the time progress of the video being streamed.
  prefs: []
  type: TYPE_NORMAL
- en: Fullscreen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users will be able to view the video in fullscreen by clicking the fullscreen
    button in the controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/94d9b7b1-191f-48ae-87bf-ad155addb093.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to implement a fullscreen option for the video, we will use the `screenfull`
    npm module to track when the view is in fullscreen, and `findDOMNode` from `react-dom`
    to specify which DOM element will be made fullscreen with `screenfull`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the `fullscreen` code, we first install `screenfull`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Then import `screenfull` and `findDOMNode` into the `MediaPlayer` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: When the `MediaPlayer` component mounts, we will add a `screenfull` change event
    listener that will update the `fullscreen` value in state to indicate whether
    the screen is in fullscreen or not.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the view, we will add an `icon` button for `fullscreen` with the other control
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks this button, we will use `screenfull` and `findDOMNode`
    to make the video player fullscreen.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The user can then watch the video in fullscreen, where they can press *Esc* at
    any time to exit fullscreen and get back to the PlayMedia view.
  prefs: []
  type: TYPE_NORMAL
- en: Played duration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the custom media controls section of the media player, we want to show the
    time that has already passed, and the total duration of the video in a readable
    time format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc1f8bcf-a2d9-4303-9243-5ec1f87e922d.png)'
  prefs: []
  type: TYPE_IMG
- en: To show the time, we can utilize the HTML `time` element.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We will get the `duration` value for a video by using the `onDuration` event
    and then set it to state, so it can be rendered in the time element.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: To make the duration value readable, we will use the following `format` function.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `format` function takes the duration value in seconds, and converts it to
    the `hh/mm/ss` format.
  prefs: []
  type: TYPE_NORMAL
- en: The controls added to the custom media player are all mostly based on some of
    the available functionality in the `ReactPlayer` module, and its examples provided
    as documentation. There are more options available for further customizations
    and extensions, which may be explored more depending on specific feature requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Autoplaying related media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will complete the autoplay functionality discussed earlier by adding a toggle
    in `PlayMedia`, and implementing the `handleAutoplay` method, which needs to be
    called when a video ends, in the `MediaPlayer` component.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling autoplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides letting the user set autoplay, the toggle will also indicate whether
    it is currently set or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cc0fa409-f523-44c3-9234-d5ebe695c302.png)'
  prefs: []
  type: TYPE_IMG
- en: For the autoplay toggle, we will use a `Material-UI` `Switch` component along
    with a `FormControlLabel`, and add it to the `PlayMedia` component over the `RelatedMedia`
    component to be rendered only when there are media in the related media list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: To handle the change to the toggle and reflect it in the state's `autoplay`
    value, we will use the following `onChange` handler function.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Handle autoplay across components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PlayMedia` passes the `handleAutoPlay` method to the `Media` component as
    a prop to be used by the `MediaPlayer` component when a video ends.'
  prefs: []
  type: TYPE_NORMAL
- en: The functionality desired here is that when a video ends, if autoplay is set
    to true and the current related list of media is not empty, `PlayMedia` should
    load the media details of the first video in the related list. In turn, the `Media`
    and `MediaPlayer` components should update with the new media details, start playing
    the new video and render the controls on the player appropriately. The list in
    the `RelatedMedia` component should also update with the current media removed
    from the list, so only the remaining playlist items are visible.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `handleAutoplay` method takes care of the following when a video ends in
    the `MediaPlayer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: It takes a callback function from the `onEnded` event listener in the `MediaPlayer`
    component. This callback will be executed if autoplay is not set or the related
    media list is empty, so that the controls on the `MediaPlayer` are rendered to
    show that the video has ended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If autoplay is set and there is more than one related media in the list, then:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first item in the related media list is set as the current media object
    in state so it can be rendered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The related media list is updated by removing this first item that will now
    start playing in the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If autoplay is set and there is only one item in the related media list, this
    last item is set to media so it can start playing, and the `listRelated` fetch
    method is called to repopulate the RelatedMedia view with the related media of
    this last item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update state when video ends in MediaPlayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MediaPlayer` receives the `handleAutoplay` method as a prop from `PlayMedia`.
    We will update the listener code for the `onEnded` event to execute this method
    only when the `loop` is set to `false` for the current video.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: A callback function is passed to the `handleAutoplay` method, in order to set
    playing to false and render the replay icon button instead of the play or pause
    icon button, after it is determined in `PlayMedia` that the autoplay has not been
    set or that the related media list is empty.
  prefs: []
  type: TYPE_NORMAL
- en: The autoplay functionality will continue playing the related videos one after
    the other with this implementation. This implementation demonstrates another way
    to update state across the components when the values are interdependent.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side rendering with data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Search engine optimization is important for any web application that delivers
    content to its users, and wants to make the content easy to find. Generally, content
    on any webpage will have a better chance of getting more viewers if the content
    is easily readable to search engines. When a search engine bot accesses a web
    URL, it will get the server-side rendered output. Hence to make the content discoverable,
    the content should be part of the server-side rendered output.
  prefs: []
  type: TYPE_NORMAL
- en: In MERN Mediastream, we will use the case of making media details popular across
    search engine results, to demonstrate how to inject data into a server-side rendered
    view in a MERN application. We will focus on implementing server-side rendering
    with data injected for the `PlayMedia` component that is returned at the `'/media/:mediaId'` path.
    The general steps outlined here can be used to implement SSR with data for other
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Route config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to load data for the React views when these are rendered on the server,
    we will use the React Router Config npm module, which provides static route configuration
    helpers for React Router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We will create a route configuration file that will be used to match routes
    with incoming request URLs on the server to check whether data must be injected
    before the server returns the rendered markup.
  prefs: []
  type: TYPE_NORMAL
- en: For the route configuration in MERN Mediastream, we will only list the route
    that renders the `PlayMedia` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/routeConfig.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: For this route and component, we will specify the `read` fetch method from `api-media.js`
    as the load data method. Then it will be used to retrieve and inject the data
    into the PlayMedia view when the server generates the markup.
  prefs: []
  type: TYPE_NORMAL
- en: Updating SSR code for the Express server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will update the existing basic server-side rendering code in `server/express.js`
    to add the data-loading functionality for the React views that will get rendered
    server side.
  prefs: []
  type: TYPE_NORMAL
- en: Using route config to load data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will define `loadBranchData` to use `matchRoutes` from `react-router-config`,
    and the routes defined in the route configuration file to look for a route matching
    the incoming request URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If a matching route is found, then any associated `loadData` method will be
    executed to return a `Promise` containing the fetched data or `null` if there
    were no `loadData` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `loadBranchData` defined here will need to be called whenever the server
    receives a request, so if any matching route is found, we can fetch the relevant
    data and inject it into the React components while rendering server side.
  prefs: []
  type: TYPE_NORMAL
- en: Isomorphic-fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will also import isomorphic-fetch in `express.js` so that the `read` fetch
    method, or any other fetch that we defined for the client, can now be used on
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Absolute URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One issue with using `isomorphic-fetch` is that it currently requires the fetch
    URLs to be absolute. So we need to update the URL used in the `read` fetch method,
    defined in `api-media.js`, into an absolute URL.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of hardcoding a server address in the code, we will set a `config` variable
    in `config.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/config/config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Then we will update the `read` method in `api-media.js` to make it use an absolute
    URL to call the read API on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/api-media.js:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will make the `read` fetch call compatible with `isomorphic-fetch` so it
    can be used without a problem on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting data into React app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the existing server-side render code in the backend, we use `ReactDOMServer`
    to convert the React app to markup. We will update this code in `express.js` to
    inject data as a prop into `MainRouter` after it is fetched using the `loadBranchData`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: For this data to be added in the rendered `PlayMedia` component when the server
    generates the markup, we need to update the client-side code to consider server
    injected data.
  prefs: []
  type: TYPE_NORMAL
- en: Applying server-injected data in client code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the client side, we will access the data passed from the server and add it
    to the PlayMedia view.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data props to PlayMedia from MainRouter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While generating markup with `ReactDOMServer.renderToString`, we pass the preloaded
    data to `MainRouter` as a prop. We can access that data prop in the constructor
    for `MainRouter`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: To give `PlayMedia` access to this data, we will change the `Route` component
    for `PlayMedia` to pass this data as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Rendering received data in PlayMedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `PlayMedia` component, we will check for data passed from the server
    and set the values to state so the media details are rendered in the view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This will produce server-generated markup with media data injected in the PlayMedia
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the implementation of SSR with data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For MERN Mediastream, any of the links that render PlayMedia should now generate
    markup on the server side with media details preloaded. We can verify that the
    implementation for server-side rendering with data is working properly by opening
    the app URL in a browser with JavaScript turned off. We will look into how to
    achieve this in the Chrome browser and what the resulting view should show to
    the user and to the search engine.
  prefs: []
  type: TYPE_NORMAL
- en: Test in Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing this implementation in Chrome just requires updating the Chrome settings
    and loading the application in a tab with JS blocked.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a page with JS enabled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, open the application in Chrome, then browse to any media link and let
    it render normally with JavaScript enabled. This should show the implemented PlayMedia
    view with the functioning media player and the related media list.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling JS from settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, disable JavaScript on Chrome. For this you can go to advanced settings
    at `chrome://settings/content/javascript`, and use the toggle to block JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b2d5eb9-1018-48e8-9041-05b34aa960dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, refresh the media link in the MERN Mediastream tab, and there will be
    an icon next to the address URL showing that JavaScript is indeed disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d31d57c-a0f6-42de-b110-195cba56852b.png)'
  prefs: []
  type: TYPE_IMG
- en: PlayMedia view with JS blocked
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PlayMedia view should render similar to the following picture, with only
    the media details populated. But the user interface is no longer interactive as
    JavaScript is blocked and only the default browser controls are operational:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4559f8f-6d44-4ccd-a87a-6ab9e218e3b1.png)'
  prefs: []
  type: TYPE_IMG
- en: This is what a search engine bot will read for media content and what a user
    will see when no JavaScript loads on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: MERN Mediastream now has fully operational media-playing tools that will allow
    users to browse and play videos with ease. In addition, the media views that display
    individual media content are now search-engine optimized because of server-side
    rendering with preloaded data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completely upgraded the play media page on MERN Mediastream
    by adding custom media player controls using options available with `ReactPlayer`
    enabling the autoplay functionality for a related media playlist after retrieving
    the related media from the database and making the media details search engine
    readable by injecting data from the server when the view is rendered on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored advanced capabilities, such as streaming and SEO,
    with the MERN stack technologies, in the upcoming chapters, we will test the potential
    of this stack further by incorporating virtual reality elements into a web application.
  prefs: []
  type: TYPE_NORMAL
