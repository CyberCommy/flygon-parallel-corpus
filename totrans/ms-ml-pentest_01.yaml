- en: Introduction to Machine Learning in Pentesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, machine learning techniques are some of the hottest trends in information
    technology. They impact every aspect of our lives, and they affect every industry
    and field. Machine learning is a cyber weapon for information security professionals. In
    this book, readers will not only explore the fundamentals behind machine learning
    techniques, but will also learn the secrets to building a fully functional machine
    learning security system. We will not stop at building defensive layers; we will
    illustrate how to build offensive tools to attack and bypass security defenses.
    By the end of this book, you will be able to bypass machine learning security
    systems and use the models constructed in penetration testing (pentesting) missions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning models and algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance evaluation metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dimensionality reduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensemble learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning development environments and Python libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning in penetration testing – promises and challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to build a development environment. Therefore,
    we are going to install the following Python machine learning libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SciPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keras
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MatplotLib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scikit-learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NLTK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theano
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also find all of the scripts and installation guides used in this GitHub
    repository: [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter01](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: Artificial intelligence and machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making a machine think like a human is one of the oldest dreams. Machine learning
    techniques are used to help make predictions based on experiences and data.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning models and algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to teach machines how to solve a large number of problems by themselves,
    we need to consider the different machine learning models. As you know, we need
    to feed the model with data; that is why machine learning models are divided,
    based on datasets entered (input), into four major categories: supervised learning,
    semi-supervised learning, unsupervised learning, and reinforcement. In this section,
    we are going to describe each model in a detailed way, in addition to exploring
    the most well-known algorithms used in every machine learning model. Before building
    machine learning systems, we need to know how things work underneath the surface.'
  prefs: []
  type: TYPE_NORMAL
- en: Supervised
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talk about supervised machine learning when we have both the input variables
    and the output variables. In this case, we need to map the function (or pattern)
    between the two parties. The following are some of the most often used supervised
    machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Bayesian classifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the *Cambridge English Dictionary*, bias is the action of supporting
    or opposing a particular person or thing in an unfair way, allowing personal opinions
    to influence your judgment. Bayesian machine learning refers to having a prior
    belief, and updating it later by using data. Mathematically, it is based on the
    Bayes formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: One of the simplest Bayesian problems is randomly tossing a coin and trying
    to predict whether the output will be heads or tails. That is why we can identify
    Bayesian methodology as being probabilistic. Naive Bayes is very useful when you
    are using a small amount of data.
  prefs: []
  type: TYPE_NORMAL
- en: Support vector machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **support vector machine** (**SVM**) is a supervised machine learning model
    that works by identifying a hyperplane between represented data. The data can
    be represented in a multidimensional space. Thus, SVMs are widely used in classification
    models. In an SVM, the hyperplane that best separates the different classes will
    be used. In some cases, when we have different hyperplanes that separate different
    classes, identification of the correct one will be performed thanks to something
    called a **margin**, or a **gap**. The margin is the nearest distance between
    the hyperplanes and the data positions. You can take a look at the following representation
    to check for the margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The hyperplane with the highest gap will be selected. If we choose the hyperplane
    with the shortest margin, we might face misclassification problems later. Don''t
    be distracted by the previous graph; the hyperplane will not always be linear.
    Consider a case like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding situation, we can add a new axis, called the *z *axis, and
    apply a transformation using a kernel trick called a kernel function, where `z=x^2+y^2`.
    If you apply the transformation, the new graph will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.gif)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can identify the right hyperplane. The transformation is called a **kernel**.
    In the real world, finding a hyperplane is very hard. Thus, two important parameters,
    called regularization and gamma, play a huge role in the determination of the
    right hyperplane, and in every SVM classifier to obtain better accuracy in nonlinear
    hyperplane situations.
  prefs: []
  type: TYPE_NORMAL
- en: Decision trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Decision trees are supervised learning algorithms used in decision making by
    representing data as trees upside-down with their roots at the top. The following
    is a graphical representation of a decision tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Data is represented thanks to the Iterative Dichotomiser 3 algorithm. Decision
    trees used in classification and regression problems are called CARTs. They were
    introduced by Leo Breiman.
  prefs: []
  type: TYPE_NORMAL
- en: Semi-supervised
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Semi-supervised learning is an area between the two previously discussed models.
    In other words, if you are in a situation where you are using a small amount of
    labeled data in addition to unlabeled data, then you are performing semi-supervised
    learning. Semi-supervised learning is widely used in real-world applications,
    such as speech analysis, protein sequence classification, and web content classification.
    There are many semi-supervised methods, including generative models, low-density
    separation, and graph-based methods (discrete Markov Random Fields, manifold regularization,
    and mincut).
  prefs: []
  type: TYPE_NORMAL
- en: Unsupervised
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In unsupervised learning, we don't have clear information about the output of
    the models. The following are some well-known unsupervised machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Artificial neural networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Artificial networks are some of the hottest applications in artificial intelligence,
    especially machine learning. The main aim of artificial neural networks is building
    models that can learn like a human mind; in other words, we try to mimic the human
    mind. That is why, in order to learn how to build neural network systems, we need
    to have a clear understanding of how a human mind actually works. The human mind
    is an amazing entity. The mind is composed and wired by neurons. Neurons are responsible
    for transferring and processing information.
  prefs: []
  type: TYPE_NORMAL
- en: We all know that the human mind can perform a lot of tasks, like hearing, seeing,
    tasting, and many other complicated tasks. So logically, one might think that
    the mind is composed of many different areas, with each area responsible for a
    specific task, thanks to a specific algorithm. But this is totally wrong. According
    to research, all of the different parts of the human mind function thanks to one
    algorithm, not different algorithms. This hypothesis is called **the one algorithm
    hypothesis**.
  prefs: []
  type: TYPE_NORMAL
- en: Now we know that the mind works by using one algorithm. But what is this algorithm?
    How is it used? How is information processed with it?
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer the preceding questions, we need to look at the logical representation
    of a neuron. The artificial representation of a human neuron is called a **perceptron**.
    A perceptron is represented by the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many **Activation Functions** used. You can view them as logical
    gates:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step function**: A predefined threshold value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sigmoid function**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00011.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Tanh function**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00012.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**ReLu function**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Many fully connected perceptrons comprise what we call a **Multi-Layer Perceptron**
    (**MLP**) network. A typical neural network contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An input layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will discuss the term **deep learning** once we have more than three hidden
    layers. There are many types of deep learning networks used in the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convolutional neural networks** (**CNNs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recursive neural networks** (**RNNs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Long short-term memory** (**LSTM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shallow neural networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoencoders** (**AEs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricted Boltzmann machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't worry; we will discuss the preceding algorithms in detail in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build deep learning models, we follow five steps, suggested by Dr. Jason
    Brownlee. The five steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Network definition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network compiling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network fitting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network evaluation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prediction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linear regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linear regression is a statistical and machine learning technique. It is widely
    used to understand the relationship between inputs and outputs. We use linear
    regression when we have numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Logistic regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logistic regression is also a statistical and machine learning technique, used
    as a binary classifier - in other words, when the outputs are classes (yes/no,
    true/false, 0/1, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Clustering with k-means
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**k-Nearest Neighbors** (**kNN**) is a well-known clustering method. It is
    based on finding similarities in data points, or what we call the feature similarity.
    Thus, this algorithm is simple, and is widely used to solve many classification
    problems, like recommendation systems, anomaly detection, credit ratings, and
    so on . However, it requires a high amount of memory. While it is a supervised
    learning model, it should be fed by labeled data, and the outputs are known. We
    only need to map the function that relates the two parties. A kNN algorithm is
    non-parametric. Data is represented as feature vectors. You can see it as a mathematical
    representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The classification is done like a vote; to know the class of the data selected,
    you must first compute the distance between the selected item and the other, training
    item. But how can we calculate these distances?
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, we have two major methods for calculating. We can use the Euclidean
    distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Or, we can use the cosine similarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.gif)'
  prefs: []
  type: TYPE_IMG
- en: The second step is choosing *k* the nearest distances (*k* can be picked arbitrarily).
    Finally, we conduct a vote, based on a confidence level. In other words, the data
    will be assigned to the class with the largest probability.
  prefs: []
  type: TYPE_NORMAL
- en: Reinforcement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the reinforcement machine learning model, the agent is in interaction with
    its environment, so it learns from experience, by collecting data during the process;
    the goal is optimizing what we call a long term **reward**. You can view it as
    a game with a scoring system. The following graph illustrates a reinforcement
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Performance evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Evaluation is a key step in every methodological operation. After building
    a product or a system, especially a machine learning model, we need to have a
    clear vision about its performance, to make sure that it will act as intended
    later on. In order to evaluate a machine learning performance, we need to use
    well-defined parameters and insights. To compute the different evaluation metrics,
    we need to use four important parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: True positive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False positive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: True negative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False negative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The notations for the preceding parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*tp*: True positive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fp*: False positive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tn*: True negative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fn*: False negative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many machine learning evaluation metrics, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precision**: Precision, or positive predictive value, is the ratio of positive
    samples that are correctly classified divided by the total number of positive
    classified samples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00018.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Recall**: Recall, or the true positive rate, is the ratio of true positive
    classifications divided by the total number of positive samples in the dataset:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00019.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**F-Score**: The F-score, or F-measure, is a measure that combines the precision
    and recall in one harmonic formula:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00020.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Accuracy**: Accuracy is the ratio of the total correctly classified samples
    divided by the total number of samples. This measure is not sufficient by itself,
    because it is used when we have an equal number of classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confusion matrix**: The confusion matrix is a graphical representation of
    the performance of a given machine learning model. It summarizes the performance
    of each class in a classification problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dimensionality reduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dimensionality reduction is used to reduce the dimensionality of a dataset.
    It is really helpful in cases where the problem becomes intractable, when the
    number of variables increases. By using the term dimensionality, we are referring
    to the features. One of the basic reduction techniques is feature engineering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, we have many dimensionality reduction algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low variance filter**: Dropping variables that have low variance, compared
    to others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High correlation filter**: This identifies the variables with high correlation,
    by using pearson or polychoric, and selects one of them using the **Variance Inflation
    Factor** (**VIF**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backward feature elimination**: This is done by computing the **sum of square
    of error** (**SSE**) after eliminating each variable *n* times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linear Discriminant Analysis** (**LDA**): This reduces the number of dimensions, *n*,
    from the original to the number of classes — 1 number of features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Principal Component Analysis** (**PCA**): This is a statistical procedure
    that transforms variables into a new set of variables (principle components).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving classification with ensemble learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, when you build a machine learning model, you receive low accuracy
    and low results. In order to get good results, we can use ensemble learning techniques.
    This can be done by combining many machine learning techniques into one predictive
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can categorize ensemble learning techniques into two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parallel ensemble methods—**The following graph illustrates how parallel
    ensemble learning works:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Sequential ensemble methods—**The following graph illustrates how sequential
    ensemble learning works:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the three most used ensemble learning techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bootstrap aggregating** (**bagging**):This involves building separate models
    and combining them by using model averaging techniques, like weighted average
    and majority vote.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Boosting**: This is a sequential ensemble learning technique. Gradient boosting
    is one of the most used boosting techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stacking**: This is like boosting, but it uses a new model to combine submodels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning development environments and Python libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have acquired knowledge about the fundamentals behind the
    most used machine learning algorithms. Starting with this section, we will go
    deeper, walking through a hands-on learning experience to build machine learning-based
    security projects. We are not going to stop there; throughout the next chapters,
    we will learn how malicious attackers can bypass intelligent security systems.
    Now, let's put what we have learned so far into practice. If you are reading this
    book, you probably have some experience with Python. Good for you, because you
    have a foundation for learning how to build machine learning security systems.
  prefs: []
  type: TYPE_NORMAL
- en: I bet you are wondering, why Python? This is a great question. According to
    the latest research, Python is one of the most, if not *the* most, used programming
    languages in data science, especially machine learning. The most well-known machine
    learning libraries are for Python. Let's discover the Python libraries and utilities
    required to build a machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The numerical Python library is one of the most used libraries in mathematics
    and logical operations on arrays. It is loaded with many linear algebra functionalities,
    which are very useful in machine learning. And, of course, it is open source,
    and is supported by many operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install NumPy, use the `pip` utility by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can start using it by importing it. The following script is a simple
    array printing example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In addition, you can use a lot of mathematical functions, like `cosine`, `sine`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: SciPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scientific Python** (**SciPy**) is like NumPy—an amazing Python package,
    loaded with a large number of scientific functions and utilities. For more details,
    you can visit [https://www.scipy.org/getting-started.html](https://www.scipy.org/getting-started.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have been into machine learning for a while, you will have heard of
    TensorFlow, or have even used it to build a machine learning model or to feed
    artificial neural networks. It is an amazing open source project, developed essentially
    and supported by Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the main architecture of TensorFlow, according to the official
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If it is your first time using TensorFlow, it is highly recommended to visit
    the project's official website at [https://www.tensorflow.org/get_started/](https://www.tensorflow.org/get_started/).
    Let's install it on our machine, and discover some of its functionalities. There
    are many possibilities for installing it; you can use native PIP, Docker, Anaconda,
    or Virtualenv.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that we are going to install it on an Ubuntu machine (it also
    supports the other operating systems). First, check your Python version with the `python
    --version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Install PIP and Virtualenv using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00028.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the packages are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new repository using the `mkdir` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Virtualenv by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00030.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Upgrade TensorFlow by using the `pip install -upgrade tensorflow` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.gif)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the full steps to display a `Hello World!` message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.gif)'
  prefs: []
  type: TYPE_IMG
- en: Keras
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keras is a widely used Python library for building deep learning models. It
    is so easy, because it is built on top of TensorFlow. The best way to build deep
    learning models is to follow the previously discussed steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fitting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prediction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before building the models, please ensure that SciPy and NumPy are preconfigured.
    To check, open the Python command-line interface and type, for example, the following
    command, to check the NumPy version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Keras, just use the PIP utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00033.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'And of course to check the version, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To import from Keras, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to load data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use any publicly available dataset. Next, we need to create the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to compile the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to fit the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As discussed previously, evaluation is a key step in machine learning; so,
    to evaluate our model, we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To make a prediction, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas is an open source Python library, known for its high performance; it
    was developed by Wes McKinney. It quickly manipulates data. That is why it is
    widely used in many fields in academia and commercial activities. Like the previous
    packages, it is supported by many operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it on an Ubuntu machine, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00034.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Basically, it manipulates three major data structures - data frames, series,
    and panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'I resumed all of the previous lines in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.gif)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you know, visualization plays a huge role in gaining insights from data,
    and is also very important in machine learning. Matplotlib is a visualization
    library used for plotting by data scientists. You can get a clearer understanding
    by visiting its official website at [https://matplotlib.org](https://matplotlib.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install it on an Ubuntu machine, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00037.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To import the required packages, use `import`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this example to prepare the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To plot it, add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a legend, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s show the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Voila! This is our plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I highly recommend this amazing Python library. scikit-learn is fully loaded,
    with various capabilities, including machine learning features. The official website
    of scikit-learn is [http://scikit-learn.org/](http://scikit-learn.org/). To download
    it, use PIP, as previously discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00039.gif)'
  prefs: []
  type: TYPE_IMG
- en: NLTK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Natural language processing is one of the most used applications in machine
    learning projects. NLTK is a Python package that helps developers and data scientists
    manage and manipulate large quantities of text. NLTK can be installed by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00040.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, import `nltk`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `nltk` packages with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can install all of the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are using a command-line environment, you just need to follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'If you hit `all`, you will download all of the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.gif)'
  prefs: []
  type: TYPE_IMG
- en: Theano
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Optimization and speed are two key factors to building a machine learning model.
    Theano is a Python package that optimizes implementations and gives you the ability
    to take advantage of the GPU. To install it, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00045.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To import all Theano modules, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we imported a sub-package called `tensor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s suppose that we want to add two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the full steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.gif)'
  prefs: []
  type: TYPE_IMG
- en: By now, we have acquired the fundamental skills to install and use the most
    common Python libraries used in machine learning projects. I assume that you have
    already installed all of the previous packages on your machine. In the subsequent
    chapters, we are going to use most of these packages to build fully working information
    security machine learning projects.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning in penetration testing - promises and challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning is now a necessary aspect of every modern project. Combining
    mathematics and cutting-edge optimization techniques and tools can provide amazing
    results. Applying machine learning and analytics to information security is a
    step forward in defending against advanced real-world attacks and threats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hackers are always trying to use new, sophisticated techniques to attack modern
    organizations. Thus, as security professionals, we need to keep ourselves updated
    and deploy the required safeguards to protect assets. Many researchers have shown
    thousands of proposals to build defensive systems based on machine learning techniques.
    For example, the following are some information security models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Supervised learning**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network traffic profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spam filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semi-supervised learning**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network anomaly detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C2 detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unsupervised learning**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User behavior analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insider threat detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware family identification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, there are great applications to help protect the valuable assets
    of modern organizations. But generally, black hat hackers do not use classic techniques
    anymore. Nowadays, the use of machine learning techniques is shifting from defensive
    techniques to offensive systems. We are moving from a defensive to an offensive
    position. In fact, building defensive layers with artificial intelligence and
    machine learning alone is not enough; having an understanding of how to leverage
    those techniques to perform ferocious attacks is needed, and should be added to
    your technical skills when performing penetration testing missions. Adding offensive
    machine learning tools to your pentesting arsenal is very useful when it comes
    to simulating cutting-edge attacks. While a lot of these offensive applications
    are still for research purposes, we will try to build our own projects, to get
    a glimpse of how attackers are building offensive tools and cyber weapons to attack
    modern companies. Maybe you can use them later, in your penetration testing operations.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Exploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many great publicly available tools appeared lately that use machine learning
    capabilities to leverage penetration testing to another level. One of these tools
    is Deep Exploit. It was presented at black hat conference 2018\. It is a fully
    automated penetration test tool linked with metasploit. This great tool uses uses
    reinforcement learning (self-learning).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is able to perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Intelligence gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To download Deep Exploit visit its official GitHub repository: [https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit](https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is consists of a machine learning model (A3C) and metasploit. This is a
    high level overview of Deep Exploit architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The required environment to make Deep Exploit works properly is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2017.3 (guest OS on VMWare)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory: 8.0GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit framework 4.16.15-dev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Home 64-bit (Host OS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CPU: Intel(R) Core(TM) i7-6500U 2.50GHz'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory: 16.0GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6.1 (Anaconda3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow 1.4.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keras 2.1.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have learned the most commonly used machine learning techniques; before
    diving into practical labs, we need to acquire a fair understanding of how these
    models actually work. Our practical experience will start from the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, I assume that we can build our own development environment.
    The second chapter will show us what it takes to defend against advanced, computer-based,
    social engineering attacks, and we will learn how to build a smart phishing detector.
    Like in every chapter, we will start by learning the techniques behind the attacks,
    and we will walk through the practical steps in order to build a phishing detecting
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although machine learning is an interesting concept, there are limited business
    applications in which it is useful. (True | False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Machine learning applications are too complex to run in the cloud. (True | False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For two runs of k-means clustering, is it expected to get the same clustering
    results? (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Predictive models having target attributes with discrete values can be termed
    as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Regression models
  prefs: []
  type: TYPE_NORMAL
- en: (b) Classification models
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following techniques perform operations similar to dropouts in
    a neural network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Stacking
  prefs: []
  type: TYPE_NORMAL
- en: (b) Bagging
  prefs: []
  type: TYPE_NORMAL
- en: (c) Boosting
  prefs: []
  type: TYPE_NORMAL
- en: Which architecture of a neural network would be best suited for solving an image
    recognition problem?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Convolutional neural network
  prefs: []
  type: TYPE_NORMAL
- en: (b) Recurrent neural network
  prefs: []
  type: TYPE_NORMAL
- en: (c) Multi-Layer Perceptron
  prefs: []
  type: TYPE_NORMAL
- en: (d) Perceptron
  prefs: []
  type: TYPE_NORMAL
- en: How does deep learning differ from conventional machine learning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Deep learning algorithms can handle more data and run with less supervision
    from data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: (b) Machine learning is simpler, and requires less oversight by data analysts
    than deep learning does.
  prefs: []
  type: TYPE_NORMAL
- en: (c) There are no real differences between the two; they are the same tool, with
    different names.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is a technique frequently used in machine learning projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Classification of data into categories.
  prefs: []
  type: TYPE_NORMAL
- en: (b) Grouping similar objects into clusters.
  prefs: []
  type: TYPE_NORMAL
- en: (c) Identifying relationships between events to predict when one will follow
    the other.
  prefs: []
  type: TYPE_NORMAL
- en: (d) All of the above.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To save you some effort, I have prepared a list of useful resources, to help
    you go deeper into exploring the techniques we have discussed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended books:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Python Machine Learning - Second Edition* by Sebastian Raschka and Vahid Mirjalili: [https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning-second-edition ](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building Machine Learning Systems with Python* by Luis Pedro Coelho and Willi
    Richert: [https://www.amazon.com/Building-Machine-Learning-Systems-Python/dp/1782161406 ](https://www.amazon.com/Building-Machine-Learning-Systems-Python/dp/1782161406)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data Science from Scratch: First Principles with Python* by Joel Grus:[ https://www.amazon.com/Data-Science-Scratch-Principles-Python/dp/149190142X/ref=pd_sim_14_4?_encoding=UTF8&pd_rd_i=149190142X&pd_rd_r=506TTMZ93CK4Q4KZWDRM&pd_rd_w=5Eqf8&pd_rd_wg=1HMzv&psc=1&refRID=506TTMZ93CK4Q4KZWDRM](https://www.amazon.com/Data-Science-Scratch-Principles-Python/dp/149190142X/ref=pd_sim_14_4?_encoding=UTF8&pd_rd_i=149190142X&pd_rd_r=506TTMZ93CK4Q4KZWDRM&pd_rd_w=5Eqf8&pd_rd_wg=1HMzv&psc=1&refRID=506TTMZ93CK4Q4KZWDRM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommended websites and online courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine Learning Mastery**: [https://machinelearningmastery.com](https://machinelearningmastery.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coursera — Machine Learning (Andrew Ng)**: [https://www.coursera.org/learn/machine-learning#syllabus](https://www.coursera.org/learn/machine-learning#syllabus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Neural Networks for Machine Learning**: [https://www.coursera.org/learn/neural-networks](https://www.coursera.org/learn/neural-networks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
