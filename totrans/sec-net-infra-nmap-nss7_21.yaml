- en: Vulnerability Reporting and Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing the relevance of reporting vulnerabilities
    to create an impact on different types of audience. We will also be exploring
    various metrics that could be built around the vulnerability management program.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative vulnerability management with Faraday v2.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability assessments and penetration tests are lengthy processes. They
    need a lot of time, effort, and dedication in order to complete. However, all
    the time and effort spent won't be of any use unless the findings of the assessment
    are presented in a meaningful way.
  prefs: []
  type: TYPE_NORMAL
- en: It's quite common that security, in general, is considered as an overhead. So
    there would be very less number of people in the organization who would be actually
    interested in knowing the results of the security assessment. However, it is essential
    to present the findings in the most crisp and clear way so that they appear to
    be interesting as well as actionable to a wider audience within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting is also critical from the audit perspective. Most organizations undergo
    some kind of audit, internal or external, each year. These audits demand security
    assessment reports. Hence, it is worth making an effort in creating and maintaining
    assessment reports.
  prefs: []
  type: TYPE_NORMAL
- en: Type of reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single size garment cannot fit everyone. Similarly, one single report may
    not be useful and meaningful to everyone across the organization. In any given
    organization, people at various hierarchical levels may have different areas of
    interest. So, it is important to understand and classify the target audience before
    creating and publishing any of the reports.
  prefs: []
  type: TYPE_NORMAL
- en: Executive reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Senior executives, mainly at the CXO level, are particularly interested in getting
    only the high-level summary of vulnerabilities in the organization. Executive
    reports are specifically prepared for such a senior level audience and typically
    contain a summary of the vulnerabilities found. They are more focused on the critical
    and high severity issues and their current remediation status. Executive reports
    contain a lot of demographics to quickly portray the security posture of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed technical reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Detailed technical reports are specially prepared for the teams who are actually
    responsible for fixing the identified vulnerabilities. These reports contain in-depth
    information about the vulnerability found, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE details, if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability severity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Affected platforms/application components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proof of concept, if available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete request and response headers in the case of web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations for fixing the vulnerability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any external references, if available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These technical details help the teams to precisely understand and remediate
    the vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any given vulnerability assessment or a penetration test, reports can be
    created manually using any word editor. However, as the number of assessments
    increases, it can be difficult to create and manage reports manually. While we
    perform our security assessment, we can simultaneously keep track of our work
    with some specialized tools and then generate reports with ease. The following
    section describes a few tools that can help us in creating reports and are available
    out of the box in default Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Dradis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dradis is an excellent reporting framework and is part of the default Kali Linux
    installation. It can be accessed by navigating to Applications | Reporting Tools
    | dradis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial screen gives the option to configure the Dradis setup including
    the login credentials, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60788bd3-7c6e-405b-a2f4-b727637cc262.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the login credentials are configured, you can log in using your credentials,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/193d4985-01b1-40b7-be39-42669ca989f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in, the initial Dradis dashboard looks like the one shown in the
    following screenshot. It provides various options for importing reports, exporting
    reports, adding issues and methodologies, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0c2290b-3a42-4710-8fbb-20045fcce365.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get started with Dradis, you can use the **Upload Manager** to import scan
    results from the supported tools. Dradis currently supports report imports from
    the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Brakeman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NTOSpider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nexpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qualys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Dradis Upload Manager for importing scan
    results from external tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44d21bb3-aec6-44c8-b123-47b1bf6e1d69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While Dradis offers to import scan results from external tools, it also provides
    options to manually add issues, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/725a818a-2b77-48b1-a902-51d1b903a81e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once all the issues are added, either manually or by importing scan results,
    we can now generate a consolidated report using the Dradis **Export Manager**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a6c108a-26ea-41b5-98d1-04359d8a6795.png)'
  prefs: []
  type: TYPE_IMG
- en: KeepNote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: KeepNote is another simple but useful reporting tool and is available in the
    default Kali Linux installation. It may not be as advanced as Dradis, but it does
    serve the purpose of consolidating findings into a single report.
  prefs: []
  type: TYPE_NORMAL
- en: It can be accessed by navigating to Applications | Reporting Tools | keepnote.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial screen of KeepNote:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/671ca58a-3402-4efe-bf29-057a67594902.png)'
  prefs: []
  type: TYPE_IMG
- en: 'KeepNote is indeed quite simple to use, with a standard toolbar at the top
    and panes to manage the data. In the left pane, you can create a new folder/page
    and create a hierarchical structure, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db428d40-17ee-47e5-8422-73bce13eeb42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the hierarchy is ready and all the required data is in the tool, we can
    export it as a single report, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe239dc9-91aa-4a00-8d2e-1dce8ad1011e.png)'
  prefs: []
  type: TYPE_IMG
- en: Collaborative vulnerability management with Faraday v2.6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faraday is a tool for collaborative vulnerability management. Instead of working
    in isolation, Faraday allows multiple penetration testers to work simultaneously
    and collect test data in one single place. Faraday is part of the default Kali
    Linux installation and can be accessed by navigating to Applications | Reporting
    Tools | faraday IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial dashboard of the **faraday IDE**
    after starting the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05485506-52f8-4622-94ab-f40f2d9c9619.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Faraday also has a command-line console that can be used to initiate scans,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bebbcf48-e498-4232-a350-c2d1ae328a6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the scan is triggered from the Faraday console, the results start reflecting
    in the web dashboard, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05b2d6da-4d40-4d05-bd35-02daca178798.png)'
  prefs: []
  type: TYPE_IMG
- en: Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An organization may have a very robust vulnerability management program in place.
    However, there has to be some way by which the progress, success, or failure of
    the program can be measured. This is when metrics come in handy. Metrics are the
    key indicators of performance of the vulnerability management program. The organization
    leadership can take key decisions on strategy and budgeting based on the metrics.
    Metrics also help to showcase the overall security posture of the organization
    and raise an alarm for issues that need to be addressed as a priority.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics can be derived based on the various compliance standards or can be completely
    customized based on the specific organizational needs. The section ahead describes
    a few such metrics and their relevance. These metrics can be reported at a frequency
    as per the organizational policy. These metrics can be best represented when shown
    using various charts, such as bar graphs, pie charts, line graphs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Mean time to detect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always good to know about the existence of a vulnerability as soon as
    possible. **Mean time to detect** is a metric that essentially measures how long
    it would take before a vulnerability gets detected, throughout the organization.
    Ideally, it would be best to have the least value for this metric. For example,
    if a heart-bleed vulnerability got published today, then how long would it take
    to determine all the affected systems throughout the organization? Data for this
    metric can be published and compared on a quarterly basis, with the value for
    every quarter ideally lesser than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Mean time to resolve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it is important to detect vulnerabilities quickly, it is equally important
    to fix or mitigate the identified vulnerabilities quickly. The more the time a
    vulnerability is open, the more exposure it gives an attacker to exploit. **Mean
    time to resolve** is the metric that takes into consideration the average time
    interval taken to remediate any given vulnerability following its identification.
    Data for this metric can be published and compared on a quarterly basis, with
    the value for every quarter ideally lesser than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Scanner coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if an organization has a robust vulnerability management program in place
    along with good scanning tools, it is important to know whether or not all assets
    are getting scanned. The **scanner coverage** metric measures the ratio of all
    known assets in the organization to those that actually get scanned. Assets could
    be in form of infrastructure components, such as operating system, databases,
    and so on, or application code blocks as well. Data for this metric can be published
    and compared on a quarterly basis, with the value for every quarter ideally greater
    than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Scan frequency by asset group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many vulnerability management programs are derived and driven by some of the
    compliance needs. While some of the compliance standards may require the assets
    to be scanned annually, other standards may even demand quarterly scans. This
    metric showcases the scan frequency of various asset groups.
  prefs: []
  type: TYPE_NORMAL
- en: Number of open critical/high vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every vulnerability can be of the same severity level. Vulnerabilities are
    usually classified in various categories, such as critical, high, medium, low,
    and informational. However, the ones with critical and high severity levels need
    to be given priority action. This metric gives a quick overview of all the open
    critical and high vulnerabilities within the organization. This helps the management
    in prioritizing vulnerability remediation. Data for this metric can be published
    and compared on a quarterly basis, with the value for every quarter ideally lesser
    than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Average risk by BU, asset group, and so on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every organization consists of different business units. This metric highlights
    the average risks classified based on the business units. There might be a few
    business units with minimal open risks while others might have multiple risks
    open that need priority attention.
  prefs: []
  type: TYPE_NORMAL
- en: Number of exceptions granted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it is good to fix all the vulnerabilities before making any system
    live in production, exceptions do occur. Business is always a priority and information
    security must always align and support with business objectives. So there might
    be a scenario where, due to some urgent business priorities, a system is made
    live in production with security exceptions. It then becomes extremely critical
    to keep a track of such exceptions and make sure they get fixed as per the plan.
    The **number of exceptions granted** metric helps track the number of vulnerabilities
    that have not been remediated and granted exceptions. Tracking this metric is
    important from audit perspectives. Data for this metric can be published and compared
    on a quarterly basis, with the value for every quarter ideally lesser than the
    previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability reopen rate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **vulnerability reopen rate** metric helps measure the effectiveness of
    the remediation process. Once a vulnerability has been fixed, it should not reappear
    in any of the subsequent scans. If it is reoccurring even after remediation, that
    indicates a failure of the remediation process. A higher vulnerability reopen
    rate would indicate that the patching process is flawed. Data for this metric
    can be published and compared on a quarterly basis, with the value for every quarter
    ideally lesser than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Percentage of systems with no open high/critical vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen earlier in this chapter different types of reports. The
    executive reports are the ones that are meant for the top-level executives within
    the organization who are more interested in knowing the status of critical and
    high severity vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: This metric indicates the percentage of total systems in which the critical
    and high severity vulnerabilities have been fixed or mitigated. This can give
    confidence in the overall remediation strategy of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability ageing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A typical vulnerability management policy in an organization defines the time
    in which an identified vulnerability must be fixed or mitigated. Ideally, the
    time period for fixing the vulnerability as specified in the policy must be strictly
    followed. However, there might be exceptions where vulnerability mitigation has
    slipped the due dates. This metric attempts to identify vulnerabilities that have
    crossed the mitigation due date. Such vulnerabilities may need priority attention.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the importance of effective reporting along
    with some useful reporting tools. We also had an overview of the various metrics
    that are critical in measuring the success of the vulnerability management program.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter essentially concludes the course. We have come a long way starting
    from the absolute security basics, setting up the assessment environment, going
    through various phases of vulnerability assessment and then covering some important
    procedural aspects like vulnerability scoring, threat modelling, patching, reporting
    and metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for taking the course and hope that it gave the essential insights into
    the entire vulnerability assessment process.
  prefs: []
  type: TYPE_NORMAL
