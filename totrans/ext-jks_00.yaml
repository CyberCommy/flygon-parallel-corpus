- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins provides many interfaces and extension points to enable users to customize
    and extend its functionality. In this book, we will explore these interfaces in
    depth and provide practical real-world examples that will take your usage of Jenkins
    to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you will learn how to develop and test your own Jenkins plugin,
    find out how to set up fully automated build pipelines and development processes,
    discover how to interact with the API and CLI, and how to enhance the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0014_split_000.html#DB7S1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 1. Preparatory Steps"), *Preparatory Steps*, will cover the initial setup
    steps—getting your development environment set up, an overview of Jenkins and
    some options to install and run it as well as extend the basic setup. We will
    also review the principles of Continuous Integration, which are explored in greater
    detail later.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0019_split_000.html#I3QM2-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 2. Automating the Jenkins UI"), *Automating the Jenkins UI*, will discuss
    how several common issues and bottlenecks may be alleviated through the automation
    and adaptation of the Jenkins frontend. Here, we will look at four fairly typical
    use cases, identify the root cause of the issues, and propose some possible improvements
    that can be made through the alteration and automation of the GUI.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0024_split_000.html#MSDG1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 3. Jenkins and the IDE"), *Jenkins and the IDE*, builds on the Continuous
    Integration principals that we looked at earlier and provides an introduction
    to the Mylyn project.'
  prefs: []
  type: TYPE_NORMAL
- en: It then details how to set up a process that enables developers to interact
    with Jenkins directly from within their IDE. A selection of examples covers Eclipse,
    NetBeans, and IntelliJ.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0029_split_000.html#RL0A1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 4. The API and the CLI"), *The API and the CLI*, illustrates how we can
    automate and extend Jenkins through its API and CLI. In this chapter, we will
    illustrate how to use these interfaces by working through the high-level "building
    blocks" of an example "Information Radiator" project.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explain how to create a dynamic application that consumes
    information from Jenkins via its exposed interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: We will also review other ways in which you could extend Jenkins via the CLI—by
    kicking off jobs and making other changes to Jenkins automatically and remotely.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0036_split_000.html#12AK81-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 5. Extension Points"), *Extension Points*, introduces many important
    concepts that provide a foundation for the Jenkins Extension points topics in
    the subsequent chapters. We will run through Java interfaces, Design by Contract,
    abstract classes, and Singletons. We will then take a look at how these patterns
    are used in the real world when we define our own Extension Point in Jenkins.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0043_split_000.html#190861-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 6. Developing Your Own Jenkins Plugin"), *Developing Your Own Jenkins
    Plugin*, will combine the skills, concepts, and tools from the preceding chapters
    to build our first Jenkins plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at Maven and learn how to set it up and use it for Jenkins
    plugin development. We will then create our first Jenkins plugin, learn how to
    install it locally, and then learn how to quickly make, build, and deploy subsequent
    changes using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0046_split_000.html#1BRPS1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 7. Extending Jenkins Plugins"), *Extending Jenkins Plugins*, makes use
    of a simple plugin with the "Hello world" functionality we created in the previous
    chapter to keep the focus on getting to grips with the processes and tools. This
    chapter takes a look at the best way to get started with adding your own implementations.
    You will learn how to reuse existing code and functionality and understand how
    and where to find them.'
  prefs: []
  type: TYPE_NORMAL
- en: After taking a look at some existing plugins and using those as examples, we
    will then take a detailed look at some of the additional resources and technologies
    you could take advantage of in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0057_split_000.html#1MBG22-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 8. Testing and Debugging Jenkins Plugins"), *Testing and Debugging Jenkins
    Plugins*, explains how to test and debug your own code and how to apply the same
    approach to existing plugins for troubleshooting.'
  prefs: []
  type: TYPE_NORMAL
- en: It covers running tests with Maven, examines some existing tests from a popular
    plugin, and uses these to demonstrate how you can adapt these approaches to suit
    your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will also take a look at debugging live code through the IDE and show how
    to integrate these useful functions into popular development IDEs. The final section
    of this chapter will introduce the inbuilt Jenkins Logger Console.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0061_split_000.html#1Q5IA2-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 9. Putting Things Together"), *Putting Things Together*, takes a look
    at how Jenkins can be extended to work with other technologies and languages.
    We will start off with a look at the Jenkins Scripting console and see how useful
    it can be when combined with some Groovy scripting by providing some examples.
    We will then discuss developing applications using Groovy, Grails, and Gradle
    as possible alternatives to Maven and Java. The final part of this chapter covers
    Jenkins and Docker and then discusses how to set up build and deployment pipelines
    for iOS and Android development.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader is assumed to have some working knowledge of Jenkins and programming
    in general, an interest in learning the different options to take things to the
    next level, and an inclination to understand how to customize and extend Jenkins
    to suit their requirements and needs.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed primarily at developers and administrators who are interested
    in taking their interaction and usage of Jenkins to the next level—extending it
    to fit their needs, interacting with Jenkins via its interfaces, and developing
    their own custom unit-tested plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Note that the [http://jenkins-ci.org/](http://jenkins-ci.org/) home page
    also hosts **Native Installers** for many popular operating systems under the
    **Native packages** column."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
