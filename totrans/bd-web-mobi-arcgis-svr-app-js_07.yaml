- en: Chapter 7. Identifying and Finding Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover two ArcGIS Server tasks related to returning
    feature attributes: `IdentifyTask` and `FindTask`. Identifying features is another
    common operation found in GIS applications. This task returns the attributes of
    features that have been clicked on a map. The attribute information is often presented
    in a pop-up window. This functionality is accomplished through the ArcGIS API
    for JavaScript with the `IdentifyTask` class. As with the other task processes
    that we have seen, the `IdentifyTask` object uses an input parameter object, which
    in this case is called `IdentifyParameters`. The `IdentifyParameters` object contains
    various parameters that control the results of the identify operation. These parameters
    give you the ability to perform an identification on individual layers, the topmost
    layer in a service, all visible layers in a service, or all layers in a service
    along with a search tolerance. An instance of `IdentifyResult` is used to hold
    the results of the task.'
  prefs: []
  type: TYPE_NORMAL
- en: The tasks that you can execute with the ArcGIS API for JavaScript replicate
    some of the most commonly used functions in ArcGIS Desktop. `FindTask` is one
    such tool. Just as in the desktop version of ArcGIS, this task can be used to
    find features in a layer that match a string value. Before executing a Find operation
    with a `FindTask` object, you will need to set various parameters of the operation
    in an instance of `FindParameters`. `FindParameters` gives you the ability to
    set various options, including the search text, fields to search, and others.
    Using a `FindParameters` object, `FindTask` then executes its tasks against one
    or more layers and fields then returns a `FindResult` object that contains `layerID`,
    `layerName`, and feature that matched the search string.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will deal with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `IdentifyTask` to get feature attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `FindTask` to get feature attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IdentifyTask to get feature attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attributes from the fields in a layer can be returned to your application using
    `IdentifyTask`. In this section, you will learn how to use the various objects
    associated with `IdentifyTask` to return this information.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IdentifyTask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with the other tasks in ArcGIS Server, the `IdentifyTask` functionality
    is separated into three distinct classes in the API including `IdentifyParameters`,
    `IdentifyTask`, and `IdentifyResult`. These three classes are illustrated in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing IdentifyTask](graphics/7965OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The IdentifyParameters object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The input parameter object for `IdentifyTask` is `IdentifyParameters`. A number
    of properties can be set for your identification operation using the `IdentifyParameters`
    class. Parameters include the geometry used to select features (`IdentifyParameters.geometry`),
    the layer IDs on which to perform the identification (`IdentifyParameters.layerIds`),
    and the tolerance (`IdentifyParameters.tolerance`) from the specified geometry
    within which the identification should be performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll need to import the identify resource shown as follows before you can
    use the identify functionality provided by ArcGIS Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Before setting the various parameters on the `IdentifyParameters` object, you
    need to first create an instance of this object. This can be done with code shown
    as follows. The code for this constructor doesn''t accept any parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you''ve created a new instance of `IdentifyParameters`, you can set
    various properties shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, an identification operation is performed using a point that the
    user has clicked on the map. You can obtain this using the point returned from
    the map-click event as seen in the preceding code example. The layers that should
    be searched can be defined using an array of layer IDs, which are passed into
    the `IdentifyParameters.layerIds` property. The array should contain numeric values
    that reference the layers to be searched. You can obtain the layer index numbers
    by consulting the services directory. The tolerance property is especially important.
    It sets the distance in pixels around the geometry. Remember that most of the
    time the geometry will be a point so you can think of this as a circle that is
    placed around the point at whatever tolerance value you have set. The value will
    be in screen pixels. When the `IdentifyTask` attribute is executed, any features
    from the layers to be identified (that are within or intersect the circle) will
    be returned.
  prefs: []
  type: TYPE_NORMAL
- en: It's likely that you'll need to experiment with this tolerance value to obtain
    a value that is best for your application. If the value is set too low, you run
    the risk of the identify operation not identifying any features and conversely,
    if the value is set too high, you may get too many features returned. It can be
    difficult to find the right balance, and the tolerance value that works for one
    application may not work for another.
  prefs: []
  type: TYPE_NORMAL
- en: The IdentifyTask attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`IdentifyTask` performs the identify operation on one or more layers using
    the parameters specified in `IdentifyParameters`. As with the other tasks that
    we''ve examined, `IdentifyTask` needs a pointer to a URL that identifies the map
    service to be used in the identify operation.'
  prefs: []
  type: TYPE_NORMAL
- en: A new instance of `IdentifyTask` can be created with the following code example.
    The constructor for this task simply accepts a URL that points to the map service
    containing the layer against which an identify operation can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once you've created a new instance of the `IdentifyTask` object, you can initiate
    the execution of this task through the `IdentifyTask.execute()` method, which
    accepts an `IdentifyParameters` object along with optional `success` callback
    and `error` callback functions. In the following code example, the `IdentifyTask.execute()`
    method is called. An instance of `IdentifyParameters` is passed as a parameter
    into the method, along with a reference to an `addToMap()` method, which will
    process the results that are returned to the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The results of an identify operation performed with `IdentifyTask` are stored
    in an instance of `IdentifyResult`. We'll examine this result object in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: IdentifyResult
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The result returned by the `IdentifyTask` operation is an array of `IdentifyResult`
    objects. Each `IdentifyResult` object contains the feature returned from the identify
    operation, along with the layer ID and layer name where the feature was found.
    The following code illustrates how an array of `IdentifyResult` objects is processed
    by a callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Time to practice – implementing the identify functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will learn how to implement the identify functionality
    in an application. You are going to create a simple application that will display
    attribute information from buildings and land parcels in an info window when the
    user clicks the map. We have prewritten some of the code for you so that you can
    focus on the functionality directly related to the identification of features.
    Before we begin, I'll have you copy and paste the prewritten code into the sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the variables that you''ll use in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `require()` function that defines the resources you''ll use in this
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new instance of the `Map` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new dynamic map service layer and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `Map.click` event that will trigger the execution of a function, which
    will respond when the map is clicked on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `IdentifyTask` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `IdentifyParameters` object and set various properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `executeIdentifyTask()` function, which is the function that responds
    to the `Map.click` event. In a previous step, you had set up the event handler
    for the `Map.click` event. The `executeIdentifyTask()` function was specified
    as the JavaScript function that will handle this event when it occurs. In this
    step, you''ll create this function by adding the code shown as follows. The `executeIdentifyTask()`
    function accepts one parameter, which is an instance of the `Event` object. Each
    event generates an `Event` object, which has various properties. In the case of
    a `Map.click` event, this `Event` object has a property that contains the point
    that was clicked. This can be retrieved with the `Event.mapPoint` property and
    is used when setting the `IdentifyParameters.geometry` property. The `IdentifyTask.execute()`
    method also returns a `Deferred` object. You then add a callback function to this
    `Deferred` object, which parses the results. Add the following code to create
    the `executeIdentifyTask()` function. This function should be created outside
    the `require()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You may want to review the solution file (`identify.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the code by clicking on the **Run** button and you should see the following
    output if everything has been coded correctly:![Time to practice – implementing
    the identify functionality](graphics/7965OT_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using FindTask to get the feature attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `FindTask` to search a map service exposed by the ArcGIS Server
    REST API, based on a string value. The search can be conducted on a single field
    of a single layer, on many fields of a layer, or on many fields of many layers.
    As with the other tasks that we''ve examined, the Find operation is composed of
    three complementary objects including `FindParameters`, `FindTask`, and `FindResult`.
    The `FindParameters` object serves as the input parameter object, which is used
    by `FindTask` to accomplish its work, and `FindResult` contains the results returned
    by the task. Take a look at the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FindTask to get the feature attributes](graphics/7965OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FindParameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `FindParameters` object is used to specify the search criteria for a Find
    operation and includes a `searchText` property that includes the text that will
    be searched for along with properties that specify the fields and layers that
    will be searched. In addition to this, setting the `returnGeometry` property to
    `true` indicates that you want to return the geometry of the features that matched
    the Find operation, and can be used to highlight the results.
  prefs: []
  type: TYPE_NORMAL
- en: The following code example shows how to create a new instance of `FindParameters`
    and assign various attributes. Before using any of the objects associated with
    a Find operation, you'll need to import the `esri/tasks/find resource`. The `searchText`
    property defines the string value that will be used in the search across fields,
    defined in the `searchFields` property. The layers that will be searched are defined
    through an array of index numbers assigned to the `layerIds` property. The index
    numbers correspond to the layers in the map service. The `geometry` property defines
    whether the geometric definition of a feature should be returned in the results.
    There may be times when you don't need the feature geometry, such as when the
    attributes simply need to be populated inside a table. In such a case, you would
    set the `geometry` property to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `contains` property to determine whether to look for an exact
    match of the search text or not. If it is set to `true`, it searches for a value
    that contains the `searchText` property. This is a case-insensitive search. If
    it is set to `false`, it searches for an exact match of the `searchText` string.
    The exact match is case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: FindTask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`FindTask`, illustrated in the preceding figure, executes a Find operation
    against the layers and fields specified in `FindParameters` and returns a `FindResult`
    object, which contains the records that were found. Take a look at the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Just as with `QueryTask`, you must specify a URL pointer to the map service
    that will be used in the Find operation, but you do not need to include an integer
    value specifying the exact data layer to be used. This is not necessary because
    the layers and fields to be used in the Find operation are defined in the `FindParameters`
    object. Once created, you can then call the `FindTask.execute()` method to initiate
    the Find operation. The `FindParameters` object is passed into this method as
    the first parameter, and you can also define optional `success` and `error` callback
    functions. This is shown in the preceding code example. The `success` callback
    function passes an instance of `FindResults`, which contains the results of the
    Find operation.
  prefs: []
  type: TYPE_NORMAL
- en: FindResult
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`FindResult` contains the results of a `FindTask` operation and also contains
    features that can be represented as graphics, layer IDs and names where the feature
    was found, and the field name that contains the search string. Take a look at
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The return of attributes associated with features is one of the most common
    operations in GIS. ArcGIS Server has two tasks that can return attributes: `IdentifyTask`
    and `FindTask`. The `IdentifyTask` attribute is used to return the attributes
    of a feature that has been clicked on the map. `FindTask` also returns attributes
    of a feature but uses a simple attribute query to return the attributes. In this
    chapter, you learned how to use both tasks using the ArcGIS API for JavaScript.
    In the next chapter, you will learn how to perform geocoding and reverse geocoding
    using a `Locator` task.'
  prefs: []
  type: TYPE_NORMAL
