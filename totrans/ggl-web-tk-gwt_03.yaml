- en: Chapter 3. Creating Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create services, which is the GWT term
    for providing server-side functionality. The term **service**, as used in the
    GWT context does not bear any relation to a web service. It refers to the code
    that the client invokes on the server side in order to access the functionality
    provided by the server. Most of the applications that we develop will require
    access to a server to retrieve some data or information, and then display it to
    the user in an intuitive and non-intrusive way using AJAX. The best way in a GWT
    application to accomplish this is through a service.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will go through the necessary steps for creating services.
    We will first create the various artifacts required for creating a simple `Prime
    Number` service that verifies if the provided number is a prime number. The application
    is trivial but the concepts apply to any GWT service that you will create. We
    are also going to create a simple client that will consume the `Prime Number`
    service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service definition interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an asynchronous service definition interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a service implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first three tasks need to be done for every GWT service that you create.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Service Definition Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A service definition interface acts as a contract between the client and the
    server. This interface will be implemented by the actual service that we build
    later on in this chapter. It defines the functionality that is to be provided
    by the service, and lays down the ground rules for clients wanting to consume
    the functionality provided by this service.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating a Prime Number Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the definition for our Prime Number service. We will also create
    a new project called `Samples` to contain the code we create in this chapter and
    the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Eclipse GWT project named `Samples` using the `projectCreator`
    and `applicationCreator`. Specify the name of the application class as `com.packtpub.gwtbook.samples.client.Samples`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the newly created project into the Eclipse IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Java file named `PrimesService.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `PrimesService` interface with one method that verifies if a
    number is a prime number. It takes an integer as a parameter and returns a Boolean
    value upon verification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `PrimesService` is a service definition interface. It specifies the supported
    method, and the parameters that should be passed to it, in order for the service
    to return a response. The term RPC in the GWT context refers to a mechanism for
    easily passing Java objects between a client and the server via the HTTP protocol.
    The GWT framework does this automatically for us, as long as we use only the supported
    types for our method parameters and return values. Currently, the following Java
    types and objects are supported by GWT:'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive types—character, byte, short, integer, long, Boolean, float, and double
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitive type wrapper classes—character, byte, short, integer, long, Boolean,
    float, and double
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays of any of these `serializable` types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom classes implementing the `isSerializable` interface, and whose non‑transient
    fields are one of the above supported types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also use collections of the supported object types as method parameters
    and return types. However, in order to use them, you need to explicitly mention
    the type of objects they are expected to contain by utilizing a special `Javadoc`
    annotation `@gwt.typeArgs`. For instance, here is how we would define a service
    method that takes a list of integers as input parameters, and returns a list of
    strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first annotation indicates that this method accepts only a parameter that
    is a list of integer objects, and the second annotation indicates that the return
    parameter from this method is a list of string objects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Asynchronous Service Definition Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface created in the previous task is a synchronous one. In order to
    take advantage of the AJAX support in GWT, we will need to create the asynchronous
    version of this interface, which will be used for making remote calls in the background
    to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Utilizing the AJAX Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create an asynchronous version of the service definition
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Java file named `PrimesServiceAsync.java` in the `com.packtpub.gwtbook.samples.client`
    package. Define a `PrimesServiceAsync` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The asynchronous version of our service definition interface must have the same
    methods as the synchronous interface, except for the requirement that all of its
    methods must have an `AsyncCallback` object as a parameter, and the methods may
    not return anything. The callback object acts as the binding between the client
    and the server. Once an asynchronous call is made by the client, the notification,
    when the call completes its processing on the server side is made through this
    callback object. Essentially this makes the AJAX magic happen! You do not have
    to do anything special for all this magic to happen, other than making sure that
    you provide this asynchronous interface for your service definition. The GWT framework
    will automatically take care of all the communication between the client and the
    server. A client application that is using this service will invoke the service
    through this method, passing it a callback object and will automatically be notified
    of either success through a callback to the `onSuccess()` method in the client
    application or failure through a callback to the `onFailure()` method in the client
    application. The current release of GWT only supports making an asynchronous call
    back to the server. Even though the service definition interface is synchronous,
    that does not mean that you can use it to make a synchronous call to the server.
    So any service that you build using GWT can currently only be accessed asynchronously
    via AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Service Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have so far created the interfaces that define the functionality of our Prime
    Number service. In this section, we are going to start implementing and filling
    out the service class and create the actual implementation of the Prime Number
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Implement Our Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to create the implementation of the Prime Number service. It checks
    to see if the provided number is a prime number by ensuring that it is only divisible
    by one and itself. The verification result is returned as a Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Java file, named `PrimesServiceImpl.java` in the `com.packtpub.gwtbook.samples.server`
    package. Define a `PrimesServiceImpl` class that extends `RemoteServiceServlet`
    and implements the previously created `PrimesService` interface. Add functionality
    to this class to verify if the provided number is a prime number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since this is the implementation of the Prime Number service, this class needs
    to implement the service definition interface, and add functionality to the implemented
    methods. This task and the previous tasks delineate the steps that are always
    required in order to create a GWT service. Creating and using RPC services is
    a critical step on the path to unlocking the power of GWT and for using it efficiently
    and effectively. The basic architecture of a GWT application consists of a client-side
    user interface that is rendered in a web browser and interacts with the server-side
    functionality implemented as an RPC service to asynchronously retrieve data and
    information without refreshing the page. The service in a GWT application wraps
    the server-side model of an application, and thus usually maps to the role of
    a model in the MVC architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '![What Just Happened?](img/1007_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us look at the relationships between the various classes and interfaces
    that we are creating for a service. Every time we create an RPC service we utilize
    some GWT framework classes, and create some new classes and interfaces. Here are
    the classes and interfaces that are created after completion of the above task:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PrimesService:` Our service definition interface. It defines the methods in
    our service and extends the `RemoteService` marker interface that indicates that
    this is a GWT RPC service. This is the synchronous definition and the server-side
    implementation must implement this interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PrimesServiceAsync:` The asynchronous definition of our interface. It must
    have the same methods as the synchronous interface, except for the requirement
    that all of its methods must have an `AsyncCallback` object as a parameter and
    the methods may not return anything. The naming convention recommended for this
    interface is to suffix the name of our synchronous interface with the word `Async`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PrimesServiceImpl:` This is the server-side implementation of our service.
    This must extend `RemoteServiceServlet` and implement our synchronous interface—`PrimesService.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GWT framework classes used by us to create the `PrimesService:`
  prefs: []
  type: TYPE_NORMAL
- en: '`RemoteService:` A marker interface that should be implemented by all the RPC
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RemoteServiceServlet:` The `PrimesServiceImpl` service implementation class
    extends this class and adds the required functionality. This class provides support
    for serializing and deserializing requests, and ensures that the requests invoke
    the right method in the `PrimesServiceImpl` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is a diagram depicting the relationship between the various classes and
    interfaces that were involved in creating the Prime Number service.
  prefs: []
  type: TYPE_NORMAL
- en: '![What Just Happened?](img/1007_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our service implementation extends the `RemoteServiceServlet`, which inherits
    from the `HttpServlet` class. The `RemoteServiceServlet` takes care of automatically
    deserializing incoming requests and serializing the outgoing responses. GWT probably
    opted to use the servlet-based approach because it is simple and is well known
    and used in the Java community. It also makes it easy to move our service implementation
    between any servlet containers, and opens the door to a wide variety of integration
    possibilities between GWT and other frameworks. This has been used by several
    members of the GWT community to implement integration between GWT and other frameworks
    such as Struts and Spring. The RPC wire format used by GWT is loosely based on
    the JavaScript Object Notation (JSON). This protocol is proprietary to GWT and
    it is currently undocumented. However, the `RemoteServiceServlet` provides two
    methods—`onAfterResponseSerialized()` and `onBeforeRequestDeserialized()`, which
    you can override to inspect and print out the serialized request and response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic pattern and architecture for creating any GWT service is always the
    same and consists of these basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a service definition interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an asynchronous version of the service definition interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the service implementation class. In the service implementation class
    we access the functionality provided by the external service and convert the results
    to match our requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will create a simple client that consumes this new service.
    We will learn about deploying this service to external servlet containers such
    as Tomcat in[Chapter 10](ch10.html "Chapter 10. Deployment"). The concepts from
    this example are applicable to every GWT service that we create. We will create
    at least these two interfaces and an implementation class for every service that
    we create. This will help us to provide server functionality that can be accessed
    in an asynchronous way by a GWT client. The service that we have created above
    is independent of the GWT client application, and can be used by multiple applications.
    We only need to ensure that we register the service correctly in a servlet container,
    so that it can be accessed by our client applications.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed implementing the Prime Number service. Now we are going to
    create a simple client that can consume the `PrimesService`. This will help us
    test the functionality of the service to ensure that it does things that it is
    supposed to do.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating the Client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a simple client that will connect to the Prime Number service
    and check if a given number is a prime number. We will add a text box for typing
    in the number to check, and a button that will invoke the service when clicked.
    It will display the results of the call in an alert dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Create the client in a new file named `PrimesClient.java` in the `com.packtpub.gwtbook.samples.client`
    package that extends the `EntryPoint` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Add an `onModuleLoad()` method to this new class, and create a text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate the `PrimesService` and store it in a variable in the `onModuleLoad()method`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Create a new button, and add an event handler to listen for clicks on the button.
    In the handler, invoke the `PrimesService` using the text typed into the text
    box as the input parameter to the service. Display the result in an alert dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Add the following entry to the application's `module.xml` file in order for
    the client to find this service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here is the client. Type in a number, and click the button to check if the number
    is a prime number.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating the Client](img/1007_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The response is displayed in an alert dialog as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating the Client](img/1007_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Prime Number` service client invokes the service, by passing in the required
    parameter to the `PrimesService`. We make an entry for the service in the `module.xml`
    file so that the GWT framework can initialize things correctly and the client
    can find the service. We have followed a common pattern for creating simple clients
    that consume GWT services:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class that implements the `EntryPoint` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the `onModuleLoad()` method to add the desired user-interface widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event handler to one of the user interface widgets to invoke the service
    when the handler is triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the event handler, handle the `callbacks` for success and failure of the
    call to the service method, and take some action with the results of the call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an entry to the GWT application `module.xml` for the service to be consumed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use this common pattern along with some variations when creating sample
    applications throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we took a look at creating the various classes and interfaces
    that are required as part of creating a new Prime Number GWT service. We also
    created a client that can consume the prime number service.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to create interactive web user interfaces
    using GWT.
  prefs: []
  type: TYPE_NORMAL
