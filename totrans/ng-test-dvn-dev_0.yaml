- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will provide the reader with a complete guide to test-driven development
    (TDD) focused on JavaScript and then dive into an Angular approach. It will provide
    clear, step-by-step examples to continually reinforce the best practices in TDD.
    This book will look at both unit testing with Karma and end-to-end testing with
    Protractor, and not only focus on how to use the tools but understand the reason
    they were built and why they should be used. Throughout, there will be a focus
    on when, where, and how to use these tools, constantly reinforcing the principles
    of the test-driven development life cycle (test, execute, and refactor).
  prefs: []
  type: TYPE_NORMAL
- en: All examples in this book are based on Angular v2 and are compatible with Angular
    v4.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Introduction to Test-Driven Development")*,
    Introduction to Test-Driven Development*, introduces us to the fundamentals of
    test-driven development by explaining why and how TDD can help in the development
    process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Details of JavaScript Testing")*, Details
    of JavaScript Testing*, covers TDD in a JavaScript context. This chapter explores
    the types of tests that need in JavaScript applications, such as unit testing,
    behavior testing, integration testing, and E2E testing. This also explains different
    types of JavaScript testing tools, frameworks, and their uses in the Angular app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. The Karma Way")*, The Karma Way*, explores
    the origins of Karma and why it has to be used in any Angular project. By the
    end of this chapter, readers will not only understand the problem that Karma solves but
    also will walk through a complete example using Karma.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. End-to-End Testing with Protractor")*, End-to-End
    Testing with Protractor*, takes a look at end-to-end testing applications, through
    all the layers of an application. This chapter introduced readers to Protractor,
    the end-to-end testing tool from the Angular team. Then it explained why Protractor
    was created and how it solve the problems. Finally, it guide the readers step
    by step how to install, configure, and use Protractor with TDD on an existing
    Angular project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Protractor, a Step Ahead")*, Protractor,
    a Step Ahead*, goes a bit deeper with Protractor and explores some advanced configurations.
    And then it explains the test suite debugging process with examples. This also
    explores some commonly used Protractor APIs with the relevant example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. The First Step")*, The First Step*, provides
    an introductory walk-through of how to use TDD to build an Angular application
    with classes, components, and services. This chapter helps readers to begin the
    TDD journey and see the fundamentals in action. Up to this point, this book stays
    focused on a foundation of TDD and the tools. And then, by going a step forward
    it dives into TDD with Angular.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Flip Flop")*, Flip Flop*, continues to expand
    our knowledge of applying TDD with Angular features such as routes and navigation
    to get the result set through our sample Angular application. Besides the Angular
    features, this also guides the readers how to apply end-to-end tests for those
    specific features with the help of Protractor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Telling the World")*, Telling the World*,
    covers more unit testing for the sample Angular application, including routes
    and navigation. Besides that, this chapter also refactor the existing code to
    make it more testable. And then it introduces to Angular services and event broadcasting
    while refactoring the code and introduce MockBackend to test HTTP requests in
    the service.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we have used **Node Package Manager** (**npm**) as our command
    tool to run the application and various testing tools. So it's a prerequisite
    to have npm globally installed on your operating system. To install it, you must
    have Node.js installed on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: We will not look at how to install Node.js and npm. There are a lot of resources
    already available for installing them on any operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers who have basic experience with Angular but want
    to understand the wider context of when, why, and how to apply testing techniques
    and the best practices to create quality clean code. To get the most out of this
    book, you should have a good understanding of HTML, CSS, and JavaScript, and a
    basic understanding of Angular with TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    next lines of code read the link and assign it to the to the `Calculator` function."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "In order to download new modules, we will go to **Files** | **Settings**
    | **Project Name** | **Project Interpreter**".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
