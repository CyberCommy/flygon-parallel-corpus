- en: Chapter 7. Using SVGs for Resolution Independence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entire books have, are being, and will be written about SVG (an abbreviation
    for scalable vector graphics). SVG is an important technology for responsive web
    design as it provides pin-sharp and future-proof graphical assets for all screen
    resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Images on the web, with formats such as JPEG, GIF, or PNG have their visual
    data saved as set pixels. If you save a graphic in any of those formats with a
    set width and height, and zoom the image to twice its original size or more, their
    limitations can be easily exposed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screen grab of just that. A PNG image I''ve zoomed into in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using SVGs for Resolution Independence](img/3777_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Can you see how the image looks obviously pixelated? Here is the exact same
    image saved as a vector image, in SVG format, and zoomed to a similar level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using SVGs for Resolution Independence](img/3777_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully the difference is obvious.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the smallest graphical assets, where at all possible, using SVG rather
    than JPEG, GIF, or PNG will produce resolution independent graphics that require
    far smaller file sizes compared to bitmap images.
  prefs: []
  type: TYPE_NORMAL
- en: While we will touch upon many aspects of SVG in this chapter, the focus will
    be on how to integrate them into your workflow, while also providing an overview
    of what is possible with SVG.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: SVG, a brief history, and an anatomy of a basic SVG document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating SVGs with popular image editing packages and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting SVGs into a page with `img` and `object` tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting SVGs as background images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting SVGs directly (inline) into HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-using SVG symbols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing external SVG symbols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What capabilities are possible with each insertion method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating SVGs with SMIL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling SVGs with an external style sheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling SVGs with internal styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amending and animating SVGs with CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media queries and SVGs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing SVGs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SVGs to define filters for CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating SVGs with JavaScript and JavaScript libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVG is a dense subject. Which portions of this chapter are most relevant to
    your needs will depend on what you actually need from SVG. Hopefully, I can offer
    a few shortcuts right up front.
  prefs: []
  type: TYPE_NORMAL
- en: If you simply want to replace static graphical assets on a website with SVG
    versions, for sharper images and/or smaller file sizes, then look at the shorter
    sections on using SVG as background images and within `img` tags.
  prefs: []
  type: TYPE_NORMAL
- en: If you're curious about what applications and services can help you generate
    and manage SVG assets, skip down to the section, *Creating SVGs with popular image
    editing packages and services*, for some useful links and pointers.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to understand SVG more fully, or animate and manipulate SVG, you
    had better get yourself comfy and get a double size of your favorite beverage
    as this is quite a long one.
  prefs: []
  type: TYPE_NORMAL
- en: To begin our journey of understanding, step with me back into 2001.
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first release of SVG was in 2001\. That was not a typo. SVG has been ''a
    thing'' since 2001\. While it gained traction along the way, it''s only since
    the advent of high-resolution devices that they have received widespread interest
    and adoption. Here is the introduction to SVGs from the 1.1 specification ([http://www.w3.org/TR/SVG11/intro.html](http://www.w3.org/TR/SVG11/intro.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'SVG is a language for describing two-dimensional graphics in XML [XML10]. SVG
    allows for three types of graphic objects: vector graphic shapes (for example,
    paths consisting of straight lines and curves), images, and text.'
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, SVGs allow two-dimensional images to be described in code
    as vector points. This makes them a great candidate for icons, line drawings,
    and charts.
  prefs: []
  type: TYPE_NORMAL
- en: As vectors describe relative points, they can scale to any size, without loss
    of fidelity. Furthermore, in terms of data, as SVG are described as vector points,
    it tends to make them tiny, compared to a comparably sized JPEG, GIF, or PNG file.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support for SVG is now also very good. Android 2.3 and above, and Internet
    Explorer 9 and above, support them ([http://caniuse.com/#search=svg](http://caniuse.com/#search=svg)).
  prefs: []
  type: TYPE_NORMAL
- en: The graphic that is a document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ordinarily, if you try and view the code of a graphics file in a text editor
    the resultant text is completely unintelligible.
  prefs: []
  type: TYPE_NORMAL
- en: Where SVG graphics differ is that they are actually described in a markup style
    language. SVG is written in **Extensible Markup Language** (**XML**), a close
    relative of HTML. Although you may not realize it, XML is actually everywhere
    on the Internet. Do you use an RSS reader? That's XML right there. XML is the
    language that wraps up the content of an RSS feed and makes it easily consumable
    to a variety of tools and services.
  prefs: []
  type: TYPE_NORMAL
- en: So not only can machines read and understand SVG graphics, but we can too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me give you an example. Take a look at this star graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The graphic that is a document](img/3777_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is an SVG graphic, called `Star.svg` inside `example_07-01`. You can either
    open this example in the browser where it will appear as the star or you can open
    it in a text editor and you can see the code that generates it. Consider this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That is the entirety of the code needed to generate that star as an SVG graphic.
  prefs: []
  type: TYPE_NORMAL
- en: Now, ordinarily, if you've never looked at the code of an SVG graphic before,
    you may be wondering why you would ever want to. If all you want is vector graphics
    displayed on the web, you certainly don't need to. Just find a graphics application
    that will save your vector artwork as an SVG and you're done. We will list a few
    of those packages in the coming pages.
  prefs: []
  type: TYPE_NORMAL
- en: However, although it's certainly common and possible to only work with SVG graphics
    from within a graphics editing application, understanding exactly how an SVG fits
    together and how you can tweak it to your exact will can become very useful if
    you need to start manipulating and animating an SVG.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's take a closer look at that SVG markup and get an appreciation of what
    exactly is going on in there. I'd like to draw your attention to a few key things.
  prefs: []
  type: TYPE_NORMAL
- en: The root SVG element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The root SVG element here has attributes for `width`, `height`, and `viewbox`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Each of these plays an important role in how an SVG is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully at this point you understand the term 'viewport'. It's been used in
    most chapters of this book to describe the area of a device through which content
    is viewed. For example, a mobile device might have a 320px by 480px viewport.
    A desktop computer might have a 1920px by 1080px viewport.
  prefs: []
  type: TYPE_NORMAL
- en: The `width` and `height` attributes of the SVG effectively create a viewport.
    Through this defined viewport we can peek in to see the shapes defined inside
    the SVG. Just like a web page, the contents of the SVG may be bigger than the
    viewport but that doesn't mean the rest isn't there, it's merely hidden from our
    current view.
  prefs: []
  type: TYPE_NORMAL
- en: The viewbox on the other hand defines the coordinate system in which all the
    shapes of the SVG are governed.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the viewbox values 0 0 198 188 as describing the top left and
    bottom right area of a rectangle. The first two values, known technically as **min-x**
    and **min-y**, describe the top left corner, while the second two, known technically
    as width and height, describe the bottom right corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having the `viewbox` attribute allows you to do things like zoom an image in
    or out. For example, if you halve the width and height in the `viewbox` attribute
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The shape will 'zoom' to fill the size of the SVG width and height.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To really understand the viewbox and SVG coordinate system and the opportunities
    it presents, I recommend this post by Sara Soueidan: [http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/)
    and this post by Jakob Jenkov: [http://tutorials.jenkov.com/svg/svg-viewport-view-box.html](http://tutorials.jenkov.com/svg/svg-viewport-view-box.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This SVG has an additional namespace defined for the Sketch graphics program
    that generated it (`xmlns` is short for XML namespace).
  prefs: []
  type: TYPE_NORMAL
- en: These namespace references tend to only be used by the program that generated
    the SVG, so they are often unneeded when the SVGs are bound for the web. Optimization
    processes for reducing the size of SVGs will often strip them out.
  prefs: []
  type: TYPE_NORMAL
- en: The title and desc tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are `title` and `desc` tags which make an SVG document highly accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These tags can be used to describe the contents of the graphics when they cannot
    be seen. However, when SVG graphics are used for background graphics, these tags
    can be stripped to further reduce file size.
  prefs: []
  type: TYPE_NORMAL
- en: The defs tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is an empty `defs` tag in our example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Despite being empty in our example, this is an important element. It is used
    to store definitions of all manner of reusable content such as gradients, symbols,
    paths, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The g element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `g` element is used to group other elements together. For example, if you
    were drawing an SVG of a car, you might group the shapes that make up an entire
    wheel inside a `g` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In our `g` tag we can see the earlier namespace of sketch reused here. This
    will help that graphics application open this graphic again but it serves no further
    purpose should this image be bound elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: SVG shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The innermost node in this example is a polygon.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: SVGs have a number of readymade shapes available (`path`, `rect`, `circle`,
    `ellipse`, `line`, `polyline`, and `polygon`).
  prefs: []
  type: TYPE_NORMAL
- en: SVG paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG paths differ from the other shapes of SVG as they are composed of any number
    of connected points (giving you the freedom to create any shape you like).
  prefs: []
  type: TYPE_NORMAL
- en: So that's the guts of an SVG file, and hopefully now you have a high-level understanding
    of what's going on. While some will relish the opportunity to hand write or edit
    SVG files in code, a great many more would rather generate SVGs with a graphics
    package. Let's consider some of the more popular choices.
  prefs: []
  type: TYPE_NORMAL
- en: Creating SVGs with popular image editing packages and services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While SVGs can be opened, edited, and written in a text editor, there are plenty
    of applications offering a **graphical user interface** (**GUI**) that make authoring
    complex SVG graphics easier if you come from a graphics editing background. Perhaps
    the most obvious choice is Adobe''s Illustrator (PC/Mac). However, it is expensive
    for casual users so my own preference is Bohemian Coding''s Sketch (Mac only:
    [http://bohemiancoding.com/sketch/](http://bohemiancoding.com/sketch/)). That
    itself isn''t cheap (currently at $99), but it''s still the option I would recommend
    if you use a Mac.'
  prefs: []
  type: TYPE_NORMAL
- en: If you use Windows/Linux or are looking for a cheaper option, consider the free
    and open-source, Inkscape ([https://inkscape.org/en/](https://inkscape.org/en/)).
    It's by no means the prettiest tool to work with but it is very capable (if you
    want any proof, view the Inkscape gallery at [https://inkscape.org/en/community/gallery/](https://inkscape.org/en/community/gallery/)).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there are a few online editors. Google has SVG-edit ([http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html](http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html)).
    There is also Draw SVG ([http://www.drawsvg.org](http://www.drawsvg.org)), and
    Method Draw, an arguably better looking fork of SVG-edit ([http://editor.method.ac/](http://editor.method.ac/)).
  prefs: []
  type: TYPE_NORMAL
- en: Save time with SVG icon services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aforementioned applications all give you the capability to create SVG graphics
    from scratch. However, if it's icons you're after, you can probably save a lot
    of time (and for me, get better results) by downloading SVG versions of icons
    from an online icon service. My personal favorite is [http://icomoon.io/](http://icomoon.io/)
    is also great.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly illustrate the benefits of an online icon service, loading the icomoon.io
    application gives you a searchable library of icons (some free, some paid):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Save time with SVG icon services](img/3777_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You select the ones you want and then click download. The resultant file contains
    the icons as SVGs, PNGs, and also SVG symbols for placement in the `defs` element
    (remember the `defs` element is a container element for referenced elements).
  prefs: []
  type: TYPE_NORMAL
- en: To see for yourself, open `example_07-02` and you can see the resultant download
    files after I'd chosen five icons from [http://icomoon.io/](http://icomoon.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Inserting SVGs into your web pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of things that you can do (browser dependent) with SVG images
    that you can't do with normal image formats (JPEG, GIF, PNG). The range of what's
    possible is largely dependent upon the way that the SVG is inserted into the page.
    So, before we get to what we can actually do with SVGs, we'll consider the various
    ways we can actually get them on the page in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Using an img tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most straightforward way to use an SVG graphic is exactly how you would
    insert any image into an HTML document. We just use a good ol'' `img` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This makes the SVG behave more or less like any other image. Not much more to
    say about that.
  prefs: []
  type: TYPE_NORMAL
- en: Using an object tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `object` tag is the container recommended by the W3C for holding non-HTML
    content in a web page (the specification for object is at [http://www.w3.org/TR/html5/embedded-content-0.html](http://www.w3.org/TR/html5/embedded-content-0.html)).
    We can make use of it to insert an SVG into our page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Either a `data` or `type` attribute is required, although I would always recommend
    adding both. The `data` attribute is where you link out to the SVG asset in the
    same manner you would link to any other asset. The `type` attribute describes
    the MIME type relevant for the content. In this instance, `image/svg+xml` is the
    MIME (Internet media type) type to indicate the data is SVG. You can also add
    a `width` and `height` attribute too if you want to constrain the size of the
    SVG with this container.
  prefs: []
  type: TYPE_NORMAL
- en: An SVG inserted into the page via an `object` tag is also accessible with JavaScript
    so that's one reason to insert them this way. However, an additional bonus of
    using the `object` tag is that it provides a simple mechanism for when a browser
    doesn't understand the data type. For example, if that prior `object` element
    was viewed in Internet Explorer 8 (which has no support for SVG), it would simply
    see the message 'Your browser doesn't support SVG'. You can use this space to
    provide a fallback image in an `img` tag. However, be warned that from my cursory
    testing, the browser will always download the fallback image, regardless of whether
    it actually needs it. Therefore, if you want your site to load in the shortest
    possible time (you do, trust me) this might not actually be the best choice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to manipulate an SVG inserted via an `object` tag with jQuery, you'll
    need to use the native `.contentDocument` JavaScript property. You can then use
    the jQuery `.attr` to change things like `fill`.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative approach to providing a fallback would be to add a `background-image`
    via the CSS. For example, in our example above, our fallback span has a class
    of `.fallback-info`. We could make use of this in CSS to link to a suitable `background-image`.
    That way the `background-image` will only be downloaded if required.
  prefs: []
  type: TYPE_NORMAL
- en: Insert an SVG as a background image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SVGs can be used as a background image in CSS, much the same way as any other
    image format (PNG, JPG, GIF). There''s nothing special about the way you reference
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For older browsers that don''t support SVG, you might want to include a ''fallback''
    image in a more widely supported format (typically PNG). Here''s one way to do
    that for Internet Explorer 8 and Android 2, as IE8 doesn''t support SVG or `background-size`,
    and Android 2.3 doesn''t support SVG and requires a vendor prefix for `background-size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In CSS, where two equivalent properties are applied, the one further down the
    style sheet will always overrule those above. In CSS, a browser will always disregard
    a property/value pair in a rule it cannot make sense of. Therefore, in this case
    the older browsers get the PNG, as they cannot make use of the SVG or understand
    an un-prefixed `background-size` property, while newer browsers that could actually
    use either, take the bottom one as it supersedes the first.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also provide fallbacks with the aid of Modernizr; the JavaScript tool
    for feature testing the browser (Modernizr is discussed more fully in [Chapter
    5](ch05.html "Chapter 5. CSS3 – Selectors, Typography, Color Modes, and New Features"),
    *CSS3 – Selectors, Typography, Color Modes, and New Features*). Modernizr has
    individual tests for some of the different SVG insertion methods, and the next
    version of Modernizr (unreleased at the time of writing) may have something more
    specific for SVG in CSS. For now however, you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Or invert the logic if preferred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When Feature Queries are more fully supported, you could also do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `@supports` rule works here because `fill` is a SVG property so if the browser
    understands that, it would take the lower rule over the first.
  prefs: []
  type: TYPE_NORMAL
- en: If your needs for SVG are primarily static background images, perhaps for icons
    and the like, I highly recommend implementing SVGs as background images. That's
    because there are a number of tools that will automatically create image sprites
    or style sheet assets (which means including the SVGs as data URIs), fallback
    PNG assets, and requisite style sheets from any individual SVGs you create. Using
    SVGs this way is very well supported, the images themselves cache well (so performance
    wise they work very well), and it's simple to implement.
  prefs: []
  type: TYPE_NORMAL
- en: A brief aside on data URIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re reading that prior section and wondering what on earth a data **Uniform
    Resource Identifier** (**URI**) is, in relation to CSS, it''s a means of including
    what would ordinarily be an external asset, such as an image, within the CSS file
    itself. Therefore, where we might do this to link at an external image file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We could simply include the image inside our style sheet with a data URI like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It's not pretty but it provides a way to negate a separate request over the
    network. There are different encoding methods for data URIs and plenty of tools
    available to create data URIs from your assets.
  prefs: []
  type: TYPE_NORMAL
- en: If encoding SVGs in this manner, I would suggest avoiding the base64 method
    as it doesn't compress as well as text for SVG content.
  prefs: []
  type: TYPE_NORMAL
- en: Generating image sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My personal recommendation, tool wise, for generating image sprites or data
    URI assets, is Iconizr ([http://iconizr.com/](http://iconizr.com/)). It gives
    you complete control over how you would like your resultant SVG and fallback PNG
    assets. You can have the SVGs and fallback PNG files output as data URIs or image
    sprites and it even includes the requisite JavaScript snippet for loading the
    correct asset if you opt for data URIs; highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you are wondering whether to choose data URIs or image sprites for
    your projects, I did further research on the pros and cons of data URIs or image
    sprites that you may be interested in should you be facing the same choice: [http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/](http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/)'
  prefs: []
  type: TYPE_NORMAL
- en: While I'm a big fan of SVGs as background images, if you want to animate them
    dynamically, or inject values into them via JavaScript, then it will be best to
    opt for inserting SVG data 'inline' into the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting an SVG inline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As SVG is merely an XML document, you can insert it directly into the HTML.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There is no special wrapping element needed, you literally just insert the SVG
    markup inside the HTML markup. It's also worth knowing that if you remove any
    `width` and `height` attributes on the `svg` element, the SVG will scale fluidly
    to fit the containing element.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting SVGs into your documents is probably the most versatile in terms of
    SVG features.
  prefs: []
  type: TYPE_NORMAL
- en: Re-using graphical objects from symbols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier in the chapter I mentioned that I had picked and downloaded some icons
    from IcoMoon ([http://icomoon.io](http://icomoon.io)). They were icons depicting
    touch gesture: swipe, pinch, drag, and so on. Suppose in a website you are building
    you need to make use of them multiple times. Remember I mentioned that there was
    a version of those icons as SVG symbol definitions? That''s what we will make
    use of now.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `example_07-09` we will insert the various symbol definitions inside the
    `defs` element of an SVG in the page. You''ll notice that on the SVG element,
    an inline style is used: `display:none` and the `height` and `width` attributes
    have both been set to zero (those styles could be set in CSS if you would rather).
    This is so that this SVG takes up no space. We are only using this SVG to house
    symbols of the graphical objects we want to use elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, our markup starts like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `symbol` element inside the `defs` element? This is the element to
    use when we want to define a shape for later reuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the SVG defining all necessary symbols for our work, we have all our
    ''normal'' HTML markup. Then, when we want to make use of one of those symbols,
    we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'That will display the drag left and right icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Re-using graphical objects from symbols](img/3777_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The magic here is the `use` element. As you might have guessed from the name,
    it's used to make use of existing graphical objects that have already been defined
    elsewhere. The mechanism for choosing what to reference is the `xlink` attribute
    that in this case is referencing the symbol ID of the 'drag left and right' icon
    (`#icon-drag-left-right`) we have inline at the beginning of the markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you re-use a symbol, unless you explicitly set a size (either with attributes
    on the element itself or with CSS) the `use` will be set to width and height 100%.
    So, to re-size our icon we could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `use` element can be used to re-use all sorts of SVG content: gradients,
    shapes, symbols, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Inline SVGs allow different colors in different contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With inline SVGs you can also do useful things like change colors based on
    context, and that''s great when you need multiple versions of the same icon in
    different colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Make dual-tone icons that inherit the color of their parent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With inline SVGs you can also have some fun and create a two-tone effects from
    a single color icon (as long as the SVG is made up of more than one path) with
    the use of `currentColor`, the oldest CSS variable. To do this, inside the SVG
    symbol, set the `fill` of the path you want to be one color as `currentColor`.
    Then use the color value in your CSS to color the element. For the paths in the
    SVG symbol without the fill, set as `currentColor`, they will receive the fill
    value. To exemplify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s that same symbol re-used three times, each with different colors and
    sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Make dual-tone icons that inherit the color of their parent](img/3777_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember you can dig around the code in `example_07-09`. It's also worth knowing
    that the color doesn't have to be set on that element itself, it can be on any
    parent element; the `currentColor` will inherit a value from up the DOM tree to
    the nearest parent with a color value set.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of positives to using SVG in this way. The only downside being
    that it's necessary to include the same SVG data on every page you want to use
    the icons. Sadly, this is bad for performance, as the assets (the SVG data) isn't
    going to be cached easily. However, there is another option (if you are happy
    to add a script to support Internet Explorer).
  prefs: []
  type: TYPE_NORMAL
- en: Re-using graphical objects from external sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rather than paste in an enormous set of SVG symbols in each page, while still
    using the `use` element, it''s possible to link out to external SVG files and
    grab the portion of the document you want to use. Take a look at `example-07-10`
    and the same three icons as we had in `example_07-09` are put on the page in this
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The important part to understand is the `href`. We are linking to an external
    SVG file (the `defs.svg` part) and then specifying the ID of the symbol within
    that file we want to use (the `#icon-drag-left-right` part).
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of this approach are that the asset is cached by the browser (just
    like any other external image would/could be) and it saves littering our markup
    with an SVG full of symbol definitions. The downside is that, unlike when the
    `defs` are placed inline, any dynamic changes made to the `defs.svg` (for example,
    if a path was being manipulated by JavaScript) won't be updated in the `use` tags.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, Internet Explorer does not allow referencing symbols from external assets.
    However, there's a polyfill script for IE9-11, called **SVG For Everybody** that
    allows us to use this technique regardless. Head over to [https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: When using that piece of JavaScript, you can happily reference external assets
    and the polyfill will insert the SVG data directly into the body of the document
    for Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: What you can do with each SVG insertion method (inline, object, background-image,
    and img)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, SVGs differ from other graphical assets. They can
    behave differently, depending upon the way they are inserted into a page. As we
    have seen, there are four main ways in which to place SVG onto the page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside an `img` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside an `object` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a background image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And depending upon the insertion method, certain capabilities will or will not
    be available to you.
  prefs: []
  type: TYPE_NORMAL
- en: To understand what should be possible with each insertion method, it might be
    simpler to consider this table.
  prefs: []
  type: TYPE_NORMAL
- en: '![What you can do with each SVG insertion method (inline, object, background-image,
    and img)](img/3777_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now there are caveats to consider, marked within numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '***1**: When using an SVG inside an object you can use an external style sheet
    to style the SVG but you have to link to that style sheet from within the SVG'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***2**: You can use SVGs in an external asset (which is cacheable) but it doesn''t
    work by default in Internet Explorer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***3**: A media query inside the styles section of an ''inlined'' SVG works
    on the size of the document it lives in (not the size of the SVG itself)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser schisms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be aware that browser implementations of SVG also vary. Therefore, just because
    those things should be possible (as indicated above), doesn't mean they actually
    will be in every browser, or that they will behave consistently!
  prefs: []
  type: TYPE_NORMAL
- en: For example, the results in the preceding table are based upon the test page
    in `example_07-03`.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of the test page is comparable in the latest version of Firefox,
    Chrome, and Safari. However, Internet Explorer sometimes does things a little
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in all the SVG capable versions of Internet Explorer (at this
    point, that''s 9, 10, and 11), as we have already seen, it is not possible to
    reference external SVG sources. Furthermore, Internet Explorer applies the styles
    from the external style sheet onto the SVGs regardless of how they have been inserted
    (all the other browsers only apply styles from external style sheets if the SVGs
    have been inserted via an `object` or inline). Internet Explorer also doesn''t
    allow any animation of SVG via CSS; animation of SVG in Internet Explorer has
    to be done via JavaScript. I''ll say that one again for the folks at the back
    in the cheap seats: you cannot animate SVGs in Internet Explorer by any means
    other than JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Extra SVG capabilities and oddities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's put aside the foibles of browsers for a moment and consider what some
    of these features in the table actually allow and why you may or may not want
    to make use of them.
  prefs: []
  type: TYPE_NORMAL
- en: SVGs will always render as sharp as the viewing device will allow and regardless
    of the manner of insertion. For most practical situations, resolution independence
    is usually reason enough to use SVG. It's then just a question of choosing whichever
    insertion method suits your workflow and the task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are other capabilities and oddities that are worth knowing about
    such as SMIL animation, different ways to link to external style sheets, marking
    internal styles with character data delimiters, amending an SVG with JavaScript,
    and making use of media queries within an SVG. Let's cover those next.
  prefs: []
  type: TYPE_NORMAL
- en: SMIL animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SMIL animations ([http://www.w3.org/TR/smil-animation/](http://www.w3.org/TR/smil-animation/))
    are a way to define animations for an SVG within the SVG document itself.
  prefs: []
  type: TYPE_NORMAL
- en: SMIL (pronounced 'smile' in case you were wondering) stands for synchronized
    multimedia integration language and was developed as a method of defining animations
    inside an XML document (remember, SVG is XML based).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of how to define a SMIL based animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: I've grabbed a section of the earlier SVG we looked at. The `g` is a grouping
    element in SVG, and this one includes both a star shape (the `path` element with
    the `id="star_Path"`) and the SMIL animation within the `animate` element. That
    simple animation tweens the fill color of the star from yellow to green over two
    seconds. What's more, it does that whether the SVG is put on the page in an `img`,
    `object`, `background-image`, or inline (no, honestly, open up `example_07-03`
    in any recent browser other than Internet Explorer to see).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tweening**'
  prefs: []
  type: TYPE_NORMAL
- en: In case you didn't already know (I didn't), 'tweening' as a term is simply a
    shortening of 'inbetweening' as it merely indicates all the inbetween stages from
    one animation point to another.
  prefs: []
  type: TYPE_NORMAL
- en: Wow! Great, right? Well, it could have been. Despite being a standard for some
    time, it looks like SMILs days are numbered.
  prefs: []
  type: TYPE_NORMAL
- en: The end of SMIL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SMIL has no support in Internet Explorer. None. Nada. Zip. Zilch. I could go
    on with other words that amount to very little but I trust you understand there's
    not much support for SMIL in Internet Explorer at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Worse still (I know, I''m giving you both barrels here) Microsoft have no plans
    to introduce it either. Take a look at the platform status: [https://status.modern.ie/svgsmilanimation?term=SMIL](https://status.modern.ie/svgsmilanimation?term=SMIL)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plus Chrome have now indicated an intent to deprecate SMIL in the Chrome browser:
    [https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM](https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM)'
  prefs: []
  type: TYPE_NORMAL
- en: Mic. Dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you still have a need to use SMIL, Sara Soueidan wrote an excellent, in-depth
    article about SMIL animations at [http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/).
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, there are plenty of other ways we can animate SVGs, which we will
    come to shortly. So if you have to support Internet Explorer hang on in there.
  prefs: []
  type: TYPE_NORMAL
- en: Styling an SVG with an external style sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's possible to style an SVG with CSS. This can be CSS enclosed in the SVG
    itself, or in the CSS style sheets you would write all your 'normal' CSS in.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you refer back to our features table from earlier in the chapter, you
    can see that styling SVG with external CSS isn't possible when the SVG is included
    via an `img` tag or as a background-image (apart from Internet Explorer). It's
    only possible when SVGs are inserted via an `object` tag or `inline`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two syntaxes for linking to an external style sheet from an SVG.
    The most straightforward way is like this (you would typically add this in the
    `defs` section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s akin to the way we used to link to style sheets prior to HTML5 (for example,
    note the `type` attribute is no longer necessary in HTML5). However, despite this
    working in many browsers, it isn''t the way the specifications define how external
    style sheets should be linked in SVG ([http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)).
    Here is the correct/official way, actually defined for XML back in 1999 ([http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/](http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to add that above the opening SVG element in your file. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Interestingly, the latter syntax is the only one that works in Internet Explorer.
    So, when you need to link out to a style sheet from your SVG, I'd recommend using
    this second syntax for wider support.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to use an external style sheet; you can use inline styles directly
    in the SVG itself if you would rather.
  prefs: []
  type: TYPE_NORMAL
- en: Styling an SVG with internal styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can place styles for an SVG within the SVG itself. They should be placed
    within the `defs` element. As SVG is XML based, it''s safest to include the **Character
    Data** (**CDATA**) marker. The CDATA marker simply tells the browser that the
    information within the character data delimited section could possibly be interpreted
    as XML markup but should not be. The syntax is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: SVG properties and values within CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that `stroke` property in that prior code block. That isn''t a CSS property,
    it''s an SVG property. There are quite a few specific SVG properties you can use
    in styles (regardless of whether they are declared inline or via an external style
    sheet). For example, with an SVG, you don''t specify a `background-color`, instead
    you specify a `fill`. You don''t specify a `border`, you specify a `stroke-width`.
    For the full list of SVG specific properties, take a look at the specification
    here: [http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)'
  prefs: []
  type: TYPE_NORMAL
- en: With either inline or external CSS, it's possible to do all the 'normal' CSS
    things you would expect; change an elements appearance, animate, transform elements,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Animate an SVG with CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's consider a quick example of adding a CSS animation inside an SVG (remember,
    these styles could just as easily be in an external style sheet too).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the star example we have looked at throughout this chapter and
    make it spin. You can look at the finished example in `example_07-07`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you load that example in the browser, after a 1 second delay, the star will
    spin a full circle over the course of 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how a transform origin of `50% 50%` has been set on the SVG? That's because,
    unlike CSS, the default `transform-origin` of an SVG is not 50% 50% (center in
    both axis), it's actually 0 0 (top left). Without that property set, the star
    would rotate around the top left point.
  prefs: []
  type: TYPE_NORMAL
- en: You can get quite far animating SVGs with CSS animations alone (well, assuming
    you don't need to worry about Internet Explorer). However, when you want to add
    interactivity, support Internet Explorer, or synchronize a number of events, it's
    generally best to lean on JavaScript. And the good news is that there are great
    libraries that make animating SVGs really easy. Let's look at an example of that
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Animating SVG with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With an SVG inserted into the page via an `object` tag or inline, it's possible
    to manipulate the SVG directly or indirectly with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'By indirectly, I mean it''s possible with JavaScript to change a class on or
    above the SVG that would cause an CSS animation to start. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: However, it's also possible to animate an SVG via JavaScript directly.
  prefs: []
  type: TYPE_NORMAL
- en: If animating just one or two things independently, it's probable things would
    be lighter, code wise, by writing the JavaScript by hand. However, if you need
    to animate lots of elements or synchronize the animation of elements as if on
    a timeline, JavaScript libraries can really help. Ultimately, you will need to
    judge whether the weight of including the library in your page can be justified
    for the goal you are trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: My recommendation for animating SVGs via JavaScript is the GreenSock animation
    platform ([http://greensock.com](http://greensock.com)), Velocity.js ([http://julian.com/research/velocity/](http://julian.com/research/velocity/)),
    or Snap.svg ([http://snapsvg.io/](http://snapsvg.io/)). For the next example,
    we'll cover a very simple example using GreenSock.
  prefs: []
  type: TYPE_NORMAL
- en: A simple example of animating an SVG with GreenSock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we want to make an interface dial, that animates around when we click
    a button from zero to whatever value we input. We want not only the stroke of
    the dial to animate in both length and color, but also the number from zero to
    the value we input. You can view the completed implementation in `example_07-08`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we entered a value of 75, and clicked animate, it would fill around
    to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A simple example of animating an SVG with GreenSock](img/3777_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of listing out the entire JavaScript file (which is heavily commented
    so should make some sense to read in isolation), for brevity's sake, we'll just
    consider the key points.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is that we have made a circle as an SVG `<path>` (rather than
    a `<circle>` element). As it's a path it means we can animate the path as if it
    were being drawn using the `stroke-dashoffset` technique. There's more info on
    this technique in the boxed out section below but briefly, we use JavaScript to
    measure the length of the path and then use the `stroke-dasharray` attribute to
    specify the length of the rendered part of the line and the length of the gap.
    Then we use `stroke-dashoffset` to change where that `dasharray` starts. This
    means you can effectively start the stroke 'off' the path and animate it in. This
    gives the illusion that the path is being drawn.
  prefs: []
  type: TYPE_NORMAL
- en: If the value to animate the `dasharray` to was a static, known value, this effect
    would be relatively simple to achieve with a CSS animation and a little trial
    and error (more on CSS animations in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, besides a dynamic value, at the same time as we are ''drawing'' the
    line we want to fade in the stroke color from one value to another and visually
    count up to the input value in the text node. This is an animation equivalent
    of patting our heads, rubbing our tummy, and counting backwards from 10,000\.
    GreenSock makes those things trivially easy (the animation part; it won''t rub
    your tummy or pat your head, although it can count back from 10,000 should you
    need to). Here are the lines of JavaScript needed to make GreenSock do all three:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In essence, with the `TweenLite.to()` function you pass in the thing you want
    to animate, the time over which the animation should occur, and then the values
    you want to change (and what you want them to change to).
  prefs: []
  type: TYPE_NORMAL
- en: The GreenSock site has excellent documentation and support forums so if you
    find yourself needing to synchronize a number of animations at once, be sure to
    clear a day from your diary and familiarize yourself with GreenSock.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you haven't come across the SVG 'line drawing' technique before it was
    popularized by Polygon magazine when Vox Media animated a couple of line drawings
    of the Xbox One and Playstation 4 games consoles. You can read the original post
    at [http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit](http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit)
  prefs: []
  type: TYPE_NORMAL
- en: There's also an excellent and more thorough explanation of the technique by
    Jake Archibald at [http://jakearchibald.com/2013/animated-line-drawing-svg/](http://jakearchibald.com/2013/animated-line-drawing-svg/).
  prefs: []
  type: TYPE_NORMAL
- en: Optimising SVGs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As conscientious developers, we want to ensure that assets are as small as possible.
    The easiest way to do this with SVGs is to make use of automation tools that can
    optimize various particulars of SVG documents. Besides obvious economies such
    as removing elements (for example, stripping the title and description elements)
    it's also possible to perform a raft of micro-optimizations that, when added up,
    make for far leaner SVG assets.
  prefs: []
  type: TYPE_NORMAL
- en: Presently, for this task I would recommend SVGO ([https://github.com/svg/svgo](https://github.com/svg/svgo)).
    If you have never used SVGO before I would recommend starting with SVGOMG ([https://jakearchibald.github.io/svgomg/](https://jakearchibald.github.io/svgomg/)).
    It's a browser-based version of SVGO that enables you to toggle the various optimization
    plugins and get instant feedback on the file savings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember our example star SVG markup from the beginning of the chapter? By
    default, that simple SVG is 489 bytes in size. By passing that through SVGO, it''s
    possible to get the size down to just 218 bytes, and that''s leaving the `viewBox`
    in. That''s a saving of 55.42%. If you''re using a raft of SVG images, these savings
    can really add up. Here''s what the optimized SVG markup looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Before you spend too long with SVGO, be aware that such is the popularity of
    SVGO, plenty of other SVG tools also make use of it. For example, the aforementioned
    Iconizr ([http://iconizr.com/](http://iconizr.com/)) tool runs your SVG files
    through SVGO by default anyway, before creating your assets so ensure you aren't
    unnecessarily double-optimizing.
  prefs: []
  type: TYPE_NORMAL
- en: Using SVGs as filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 6](ch06.html "Chapter 6. Stunning Aesthetics with CSS3"), *Stunning
    Aesthetics with CSS3*, we looked at the CSS filter effects. However, they are
    not currently supported in Internet Explorer 10 or 11\. That can be frustrating
    if you want to enjoy filter effects in those browsers. Luckily, with help from
    SVG, we can create filters that work in Internet Explorer 10 and 11 too but as
    ever, it''s perhaps not as straight forward as you might imagine. For example,
    in `example_07-05`, we have a page with the following markup inside the `body`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s an image of the Queen of England. Ordinarily, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using SVGs as filters](img/3777_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, also in that example folder, is an SVG with a filter defined in the `defs`
    elements. The SVG markup looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Within the filter, we are first defining a hue rotation of 90 (using the `feColorMatrix`,
    and then passing that effect, via the `result` attribute, to the next filter (the
    `feGaussianBlur`) with a blur value of 6\. Be aware that I've been deliberately
    heavy handed here. This doesn't produce a nice aesthetic, but it should leave
    you in no doubt that the effect has worked!
  prefs: []
  type: TYPE_NORMAL
- en: Now, rather than add that SVG markup to the HTML, we can leave it where it is
    and reference it using the same CSS filter syntax we saw in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In most evergreen browsers (Chrome, Safari, Firefox) this is the effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using SVGs as filters](img/3777_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sadly, this method doesn''t work in IE 10 or 11\. However, there is another
    way to achieve our goal, and that''s using SVGs own image tag to include the image
    within the SVG. Inside `example_07-06`, we have the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The SVG markup here is very similar to the external `filter.svg` filter we used
    in the previous example but `height`, `width`, and `viewbox` attributes have been
    added. In addition, the image we want to apply the filter to is the only content
    in the SVG outside of the `defs` element. To link to the filter, we are using
    the `filter` attribute and passing the ID of the filter we want to use (in this
    case from within the `defs` element above).
  prefs: []
  type: TYPE_NORMAL
- en: Although this approach is a little more involved, it means you can get the many
    and varied filter effects that SVG affords, even in versions 10 and 11 of Internet
    Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: A note on media queries inside SVGs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All browsers that understand SVG should respect the CSS media queries defined
    inside. However, when it comes to media queries inside SVGs there are a few things
    to remember.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose you insert a media query inside an SVG like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: And that SVG is displayed on the page at a width of 200px while the viewport
    is 1200px wide.
  prefs: []
  type: TYPE_NORMAL
- en: We might expect the stroke of the star to be violet when the screen is 800px
    and above. After all, that's what we have our media query set to. However, when
    the SVG is placed in the page via an `img` tag, as a background image or inside
    an `object` tag, it is has no knowledge of the outer HTML document. Hence, in
    this situation, `min-width` means the min-width of the SVG itself. So, unless
    the SVG itself was displaying on the page at a width of 800px or more, the stroke
    wouldn't be violet.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, when you insert an SVG inline, it merges, (in a manner of speaking),
    with the outer HTML document. The `min-width` media query here is looking to the
    viewport (as is the HTML) to decide when the media query matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this particular problem and make the same media query behave consistently,
    we could amend our media query to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: That way, regardless of the SVG size or how it is embedded it is looking to
    the device width (effectively the viewport).
  prefs: []
  type: TYPE_NORMAL
- en: Implementation tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re almost at the end of the chapter now and there is still so much we could
    talk about regarding SVG. Therefore, at this point I''ll just list a few unrelated
    considerations. They aren''t necessarily worthy of protracted explanations but
    I''ll list them here in note form in case they save you from an hour of Googling:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have no need to animate your SVGs, opt for an image sprite of your assets
    or a data URI style sheet. It's far easier to provide fallback assets and they
    almost always perform better from a performance perspective.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate as many steps in the asset creation process as possible; it reduces
    human error and produces predictable results faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To insert static SVGs in a project, try and pick a single delivery mechanism
    and stick to it (image sprite, data URI, or inline). It can become a burden to
    produce some assets one way and some another and maintain the various implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no easy 'one size fits all' choice with SVG animation. For occasional
    and simple animations, use CSS. For complex interactive or timeline style animations,
    that will also work in Internet Explorer, lean on a proven library such as Greensock,
    Velocity.js, or Snap.svg.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I mentioned at the start of this chapter, I have neither the space, nor
    the knowledge, to impart all there is to know about SVG. Therefore, I''d like
    to make you aware of the following excellent resources which provide additional
    depth and range on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '*SVG Essentials, 2nd Edition* by J. David Eisenberg, Amelia Bellamy-Royds ([http://shop.oreilly.com/product/0636920032335.do](http://shop.oreilly.com/product/0636920032335.do))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A Guide to SVG Animations (SMIL)* by Sara Soueidan ([http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Media Queries inside SVGs Test* by Jeremie Patonnier ([http://jeremie.patonnier.net/experiences/svg/media-queries/test.html](http://jeremie.patonnier.net/experiences/svg/media-queries/test.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*An SVG Primer for Today''s Browsers* ([http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html](http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding SVG Coordinate Systems and Transformations (Part 1)* by Sara
    Soueidan ([http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands On: SVG Filter Effects* ([http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm](http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full set of SVG tutorials by Jakob Jenkov ([http://tutorials.jenkov.com/svg/index.html](http://tutorials.jenkov.com/svg/index.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered a lot of the essential information needed to
    start making sense of, and implementing, SVGs in a responsive project. We have
    considered the different graphics applications and online solutions available
    to create SVG assets, then the various insertion methods possible and the capabilities
    each allows, along with the various browser peculiarities to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: We've also considered how to link to external style sheets and re-use SVG symbols
    from within the same page and when referenced externally. We even looked at how
    we can make filters with SVG that can be referenced and used in CSS for wider
    support than CSS filters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we considered how to make use of JavaScript libraries to aid animating
    SVGs and also how to optimize SVGs with the aid of the SVGO tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be looking at CSS transitions, transforms and animations.
    It's also worth reading that chapter in relation to SVG, as many of the syntaxes
    and techniques can be used and applied in SVG documents too. So grab yourself
    a hot beverage (you're worth it) and I'll see you again in a moment.
  prefs: []
  type: TYPE_NORMAL
