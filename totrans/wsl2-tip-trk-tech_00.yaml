- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows Subsystem for Linux (WSL) is an exciting technology from Microsoft
    that brings Linux side by side with Windows and allows you to run unmodified Linux
    binaries on Windows. Unlike the experience of running Linux in an isolated virtual
    machine, WSL brings rich interoperability capabilities that allow you to bring
    tools from each operating system together, allowing you to use the best tool for
    the job.
  prefs: []
  type: TYPE_NORMAL
- en: With WSL 2, Microsoft has advanced WSL by improving performance and giving full
    system call compatibility to give you even more capabilities when leveraging the
    feature. Additionally, other technologies, such as Docker Desktop and Visual Studio
    Code, have added support for WSL, adding more ways to take advantage of it.
  prefs: []
  type: TYPE_NORMAL
- en: With Docker Desktop's WSL integration, you can run the Docker daemon in WSL,
    offering a range of benefits including improved performance when mounting volumes
    from WSL.
  prefs: []
  type: TYPE_NORMAL
- en: The WSL integration in Visual Studio Code enables you to install your project
    tools and dependencies in WSL along with your source code and have the Windows
    user interface connect to WSL to load your code and to run and debug your application
    in WSL.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, WSL is an exciting technology that has made a huge improvement to
    my daily workflow and I hope to share that excitement with you as you read this
    book!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers who want to use Linux tools on Windows, including
    Windows-native programmers looking to ease into a Linux environment based on project
    requirements or Linux developers who've recently switched to Windows. This book
    is also for web developers working on open source projects with Linux-first tools
    such as Ruby or Python or developers looking to switch between containers and
    development machines for testing apps.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16412_01_Final_JC_ePub.xhtml#_idTextAnchor017), *Introduction
    to the Windows Subsystem for Linux*, gives an overview of what the WSL is, and
    explores the differences between WSL 1 and WSL 2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023), *Installing
    and Configuring the Windows Subsystem for Linux*, takes you through the process
    of installing WSL 2, how to install Linux distributions with WSL, and how to control
    and configure WSL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16412_03_Final_JC_ePub.xhtml#_idTextAnchor037), *Getting Started
    with Windows Terminal*, introduces the new Windows Terminal. This new, open source
    terminal from Microsoft is evolving rapidly and provides a great experience for
    working in your shell with WSL 2\. You will see how to install Windows Terminal,
    work with it, and customize its appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16412_04_Final_JC_ePub.xhtml#_idTextAnchor047), *Windows to
    Linux Interoperability*, starts to dig into the interoperability features that
    WSL offers, by looking at how to access files and applications in your Linux distributions
    from Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054), *Linux to Windows
    Interoperability*, continues exploring the WSL interoperability features by showing
    how to access Windows files and applications from Linux, and some interoperability
    tips and tricks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16412_06_Final_JC_ePub.xhtml#_idTextAnchor069), *Getting More
    from Windows Terminal*, explores some more in-depth aspects of Windows Terminal,
    such as customizing tab titles and splitting tabs into multiple panes. You will
    see various options for this, including how to control Windows Terminal from the
    command line (and how to reuse command-line options to work with a running Windows
    Terminal). You will also see how to add custom profiles to boost your day-to-day
    workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16412_07_Final_JC_ePub.xhtml#_idTextAnchor082), *Working with
    Containers in WSL*, covers working with Docker Desktop to run the Docker daemon
    in WSL 2\. You will see how to build and run a container for a sample web application.
    The chapter also shows how to enable and work with the Kubernetes integration
    in Docker Desktop to run the sample web application in Kubernetes in WSL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16412_08_Final_JC_ePub.xhtml#_idTextAnchor098), *Working with
    WSL Distros*, walks you through the process of exporting and importing a WSL distro.
    This technique can be used to copy a distribution to another machine or to create
    a copy on the local machine. You will also see how to use container images to
    quickly create new WSL distros.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B16412_09_Final_JC_ePub.xhtml#_idTextAnchor111), *Visual Studio
    Code and WSL*, gives a quick introduction to Visual Studio Code before exploring
    the Remote-WSL extension for working with code in your WSL distro file system
    from Visual Studio Code. With this approach, you retain the rich GUI experience
    of Visual Studio Code with your code files, tools, and application all running
    in WSL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125), *Visual Studio
    Code and Containers*, continues the exploration of Visual Studio Code by looking
    at the Remote-Containers extension, which allows you to package all your project
    dependencies into a container. This approach allows you to isolate dependencies
    between projects to avoid conflicts, and also enables new team members to rapidly
    get started.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B16412_11_Final_JC_ePub.xhtml#_idTextAnchor148), *Productivity
    Tips with Command-Line Tools*, takes a look at some tips for working with Git
    at the command line, followed by some ways to handle JSON data. After this, it
    explores both the Azure and Kubernetes command-line utilities and ways they can
    each be used to query information, including further exploration of handling JSON
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the examples in the book, you will need a version of Windows
    10 compatible with WSL version 2 (see the following table). You will also need
    Docker Desktop and Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior programming or development experience and a basic understanding of running
    tasks in PowerShell, Bash, or Windows Command Prompt will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16412_Preface_Table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code via the GitHub repository (link available in
    the next section). Doing so will help you avoid any potential errors related to
    the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional features for WSL that Microsoft has announced (such as
    support for GPU and GUI applications) but at the time of writing, these are not
    stable and are only available in early preview form. This book has opted to focus
    on the stable, released features of WSL so is currently focused on the current,
    command-line centric view of WSL.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781800562448_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781800562448_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "To change the order of the profiles in the UI, we
    can change the order of the entries in the `list` under `profiles` in the `settings`
    file."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "The playground can be a helpful environment when you are working
    on a complex query, and the **Command Line** section at the bottom even gives
    you the command line that you can copy and use in your scripts."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '`customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copyright@packt.com` with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
