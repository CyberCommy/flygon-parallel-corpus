- en: Controlling the Robot Car with Web Service Calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One day, driverless cars will dominate our streets and highways. Although the
    sensory information and control algorithms will be located in the car itself,
    we will have the ability (and it will possibly be a legislative requirement) to
    control the cars from elsewhere. Controlling driverless cars will require sensory
    information from the car to be sent to a control station in the form of speed,
    GPS location, and so on. Conversely, information from the control station will
    be sent to the car in the form of traffic and directions.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore both the sending of sensory information from
    T.A.R.A.S and the receiving of control information by T.A.R.A.S.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading the robot car's data from the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Python program to control a robot car through the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter, you should have a completed T.A.R.A.S robot car, as
    described in detail in [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*. As with our other chapters in this book,
    a working knowledge of Python is required, as well as a basic understanding of
    object-oriented programming.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The projects in this chapter will involve communicating with T.A.R.A.S through
    the internet. We will take a deeper look at the dashboard analogue dial that we
    created in [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting
    Sensory Inputs from the Robot Car to the Web*, before we create switches on the
    dashboard that control T.A.R.A.S. These projects should take about 2 hours to
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A completed T.A.R.A.S robot car kit (see [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the robot car's data from the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, we were able to send the distance sensory
    data to the cloud using the website [https://thingsboard.io/](https://thingsboard.io/).
    We ended by showing an analogue meter displaying the distance value. In this section,
    we will dig a little deeper into the analogue widget by customizing it.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the look of the distance gauge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is how we change the look of the distance gauge:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into your ThingsBoard account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on DASHBOARDS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ROBOTEYES title
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange pencil icon in the bottom-right corner of the screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that the distance analogue dial has changed (see the following
    screenshot)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For one thing, there are three new icons located at the top-right corner of
    the dial
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom-right corner, the color has changed to light gray as well
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may resize the widget by hovering your mouse over the bottom-right corner
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may also move the widget around the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The X in the top-right corner allows you to remove this widget from the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The icon with the underlined arrow allows you to download the widget as a `.json`
    file. This file may be used to import the widget into another dashboard on ThingsBoard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on the pencil icon on the widget produces a menu that slides out from
    the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/947e50b2-1c6b-43f3-8c1b-029d601c9124.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, the menu options are DATA, SETTINGS,
    ADVANCED, and ACTION. The default is DATA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the SETTINGS tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Title, change the name to `RobotEyes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/67a0e9ed-a1df-4a5d-8e13-0909edd17784.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Display title check box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the white circle under Background color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3fcf61fa-9959-41d4-99b6-cdb3aae1e365.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the color selection dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3045209d-d736-42a9-9e1e-00babfd775ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the top to `rgb(50,87,126)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange checkbox to accept the changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice the distance gauge has a few cosmetic changes (see the following
    screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e12eee79-c197-47b5-afc4-fb904b89f9d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the range on the distance gauge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the distance analogue gauge, it''s pretty obvious that having negative
    numbers doesn''t make a lot of sense for our application. Let''s make the range `0`
    to `100`:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the pencil icon on the widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ADVANCED tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the Minimum value to `0` and the Maximum value to `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2292aa38-1f4e-4055-8dca-42262a44e8e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the orange checkbox in the top-right corner to accept the changes to
    the widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the ROBOTEYES dialog
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange checkbox in the bottom-right corner to accept the changes
    to the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that the distance analogue gauge now shows a range of `0` to
    `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c8e1a9b6-5b28-423b-9cf2-dd21c16c35c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing the dashboard outside of your account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our final trick, we will display our dashboard outside of our account (we
    did this in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing
    to Web Services*, as well). This also allow us to send our dashboard to a friend.
    So, why would we want to view our dashboard outside of the account? At the core
    of the Internet of Things is the concept that we may take information from one
    place and show it somewhere else, maybe somewhere on the other side of the world.
    By making our dashboard accessible outside of our account, we allow dashboards
    to be set up anywhere without the need to share our account information. Picture
    a large computer screen somewhere in the world, where a small section of the screen
    shows our dashboard. Showing distance information from T.A.R.A.S may not be of
    great interest to many, but the concept is what is important.
  prefs: []
  type: TYPE_NORMAL
- en: 'To share our dashboard, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the ThingsBoard app, click on the DASHBOARDS option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the middle icon under the RobotEyes dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2218b998-0b43-4bdd-af3e-69b5d68724f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see a dialog similar to the following (the URL has been partially
    blurred):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0368bece-b8e4-42b2-9dc1-4f059ad502e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the icon beside the URL to copy the URL to the clipboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test out the URL, paste it into a completely different browser on your computer
    (or email it to a friend and have them open it)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be able to see the dashboard with our distance analogue gauge
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a Python program to control a robot car through the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to see sensory data in a dashboard is pretty impressive. However,
    what if we wanted to actually control something from our dashboard? In this section,
    we will do just that. We will start by constructing a simple switch to control
    an LED on T.A.R.A.S. We will then expand on this and have T.A.R.A.S do its dance
    from a push of a button over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by changing the name of the dashboard from `RobotEyes` to `RobotControl`:'
  prefs: []
  type: TYPE_NORMAL
- en: In the ThingsBoard application, click on the DASHBOARDS option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the pencil icon under the RobotEyes dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5d584ac7-e3ca-4193-adf0-9c86c0a719e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the orange pencil icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the tile from `RobotEyes` to `RobotControl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0c99f107-af76-44a2-b4c6-0ec5cb7863b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the orange check to accept the changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit out of the side dialog
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's control an LED on T.A.R.A.S from our ThingsBoard dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a switch to our dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to control an LED, we need to create a switch:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the RobotControl dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange pencil icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the + icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create new widget icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select CONTROL WIDGETS and click on Switch control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a2a3f9d4-ab05-4e65-82a0-4581d1c2b6b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Under Target device, select RobotControl
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the SETTINGS tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ad038ebb-a391-4dc2-8d92-901d1b7f5870.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the title to `Green Tail Light` and click on Display title
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ADVANCED tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the RPC set value method to `toggleGreenTailLight`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5b306916-8573-4478-922b-6930261347a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the orange check mark icon to accept the changes to the widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the side dialog
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange check mark icon to accept the changes to the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, what did we just do here? We have added a switch to our dashboard that will
    publish a method called `toggleGreenTailLight`, which will return a value of either
    `true` or `false` (the default return values as `this is a switch`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the switch, let's write some code on our Raspberry Pi that
    will respond to it.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the green LED on T.A.R.A.S
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To control the green LED on T.A.R.A.S, we will need to write some code to the
    Raspberry Pi on T.A.R.A.S. We will need the access token for our dashboard (see
    [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, on how to get that):'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `control-green-led-mqtt.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to our ThingsBoard dashboard (if you haven't been using a computer other
    than the Raspberry Pi on T.A.R.A.S, now is a good time to do so)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the switch to turn it on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the green LED on T.A.R.A.S turn on and off with the switch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, what did we just do here? Using boilerplate code taken from the ThingsBoard
    website, we have built a **Message Querying Telemetry Transport** (**MQTT**) client
    that listens to the dashboard and responds whenever the `toggleGreenTailLight`
    method is received. We accomplish this by subscribing to `'v1/devices/me/rpc/request/+'` in
    the `on_connect` method. We used MQTT in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml),
    *Publishing to Web Services*, as well. However, as this code is pretty much just
    MQTT code, let's look into it a little closer.
  prefs: []
  type: TYPE_NORMAL
- en: MQTT is a lightweight messaging protocol based on a `publisher` and `subscriber`
    method, perfect for use in the Internet of Things. A good way to understand publishers
    and subscribers is to relate them to newspapers of the past. The publisher was
    the entity that produced the newspaper; the subscribers were the people that bought
    and read the newspaper. The publisher did not know, or even have to know, how
    many subscribers it had in order to print the newspaper (not taking the cost of
    publishing into account). Think of the giant newspapers that published every day,
    not knowing how many people would buy their newspaper. So, the publisher can have
    many subscribers and, conversely, the subscriber can subscribe to many publishers,
    as a reader could read many different newspapers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by importing the libraries we need for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Of note here are the `json` and `pho.mqtt.client` libraries, which are needed
    for communication to the MQTT server. `THINGSBOARD_HOST` and `ACCESS_TOKEN` are
    standard variables needed to connect to the right server and service. Then, of
    course, there is the `GPIO Zero LED` class, which sets the `green_led` variable
    to GPIO pin `21` (which happens to be the green taillight on T.A.R.A.S).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `on_connect` method prints out connection information and then subscribes
    to the service that will connect us to `rpc` methods from our ThingsBoard dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It is the `on_message` method that allows us to really modify the code for
    our purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We first collect the `data` from our `msg` variable and convert it to a `json`
    file using the `json.loads` method. The `method` declaration, `on_message(client,
    userdata, msg)`, is again standard boilerplate code from the ThingsBoard website.
    We are really only concerned with getting the `msg` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first `if` statement, `if data[''method''] == ''toggleGreenTailLight''`,
    checks our `msg` for the `toggleGreenTailLight` method we set up with our switch
    on the ThingsBoard dashboard. Once we know that `msg` contains this method, we
    extract the other key-value pair in `data`, using `if data[''params'']` to check
    for a `True` value. So, in other words, the `json` file we get back calling the
    `on_message` method will look something like `{''params'': True, ''method'': ''toggleGreenTailLight''}`.
    This is basically a Python dictionary of two key-value pairs. This may seem confusing,
    but the easiest way to think about it would be to imagine this as a `json` version
    of a method (`toggleGreenTailLight`) with a return value (`True`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to really understand what is going on is to put a `print` statement
    to `print data` inside of the `on_message` method, just after `data = json.loads(msg.payload.decode("utf-8"))`.
    Hence, the method would look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the value returned from `params` is `True`, we simply turn on the LED using
    standard GPIO Zero code. We turn the LED off when the value returned from `params`
    is not `True` (or `False`, as there are only two values possible).
  prefs: []
  type: TYPE_NORMAL
- en: Seeing the LED turn on and off by using the internet is pretty impressive. However,
    that's not enough. Let's utilize some of the code we used in previous chapters
    and make T.A.R.A.S dance. This time, we will make it dance using the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Using the internet to make T.A.R.A.S dance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make T.A.R.A.S dance again, we are going to need to ensure that the code
    from [Chapter 14](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling the
    Robot Car Using Python*, is in the same directory as the code we are going to
    write.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a dance switch on our dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the previous steps 1 through 9 under Adding a switch to our dashboard
    to create a switch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the title to Dance Switch and click on Display title
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ADVANCED tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `RPC set value method` to `dance`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange check mark icon to accept the changes to the widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the side dialog
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange check mark icon to accept the changes to the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the switch, let''s modify our code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following from step 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `internet-dance.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go to the dashboard and flick on the dance switch (unfortunately, it's a
    switch and not a button). T.A.R.A.S should start dancing just like it did in [Chapter
    14](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling the Robot Car Using
    Python*.
  prefs: []
  type: TYPE_NORMAL
- en: So, what did we just do? Well, we took simple code, modified it a bit, and through
    the power of object-oriented programming, we were able to get T.A.R.A.S to dance
    without having to change or even go through our old `RobotDance` code (isn't OOP
    the best thing since whatever you think the best thing is?).
  prefs: []
  type: TYPE_NORMAL
- en: For the MQTT code, all we had to do was add `import` to the `RobotDance` class,
    take away the redundant GPIO Zero import, take away any reference to the LED (as
    this would cause conflict), and then modify our `on_message` method to look for
    `dance` as the method.
  prefs: []
  type: TYPE_NORMAL
- en: The `robot_dance` object of the `RobotDance` class type does all the work. When
    we call the `lets_dance_incognito` method on this object, it puts into motion
    the methods used for movement in the `RobotWheels`, `RobotBeep`, `TailLights`,
    and `RobotCamera` classes. The end result is a way to make T.A.R.A.S dance through
    the use of a switch on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked a bit further into the dashboard analogue gauge we
    used for distance sensory information. We modified it cosmetically before changing
    the range and making it available publicly. We then turned our attention to controlling
    T.A.R.A.S thorough the internet. Through the use of a simple program, we were
    able to turn on the green LED on T.A.R.A.S. with a dashboard switch. We took this
    knowledge and modified our code to make T.A.R.A.S dance via another dashboard
    switch.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building the JavaScript
    Client*, we will continue with this by writing a JavaScript client to control
    T.A.R.A.S through the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What type of information would a driverless car need from a central station?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True/false? It is not possible to change the background color of widgets in
    the ThingsBoard dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you change the range on a dashboard analogue gauge?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True/false? The information returned from the line `print(data)` cannot be read
    by humans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method from the `RobotDance` class do we call to make T.A.R.A.S dance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True/false? The library that we require to work with `json` data is called `jason`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a switch on our dashboard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True/false? The green LED on T.A.R.A.S is connected to GPIO pin 14.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True/false? A publisher can only have one subscriber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many key-value pairs are returned from `msg` with the `on_message` method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we only briefly touched on ThingsBoard, it is a good idea to check out their
    documentation at [https://thingsboard.io/docs/guides/](https://thingsboard.io/docs/guides/).
  prefs: []
  type: TYPE_NORMAL
