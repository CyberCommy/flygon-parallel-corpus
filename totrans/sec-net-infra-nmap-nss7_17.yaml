- en: Maintaining Access and Clearing Tracks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about privilege-escalation concepts along
    with practical escalation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be learning about maintaining access on a compromised
    system and cleaning up tracks using anti-forensic techniques. We will learn how
    to make persistent backdoors on the compromised system and use Metasploit's anti-forensic
    abilities to clear penetration trails.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing tracks and trails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-forensics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have seen the various phases in a penetration test.
    All these phases require substantial time and effort. Let's assume you are conducting
    a penetration test on a target and have worked hard to get remote system access
    using Metasploit. You want to keep this hard-earned access for a few days while
    your assignment continues. However, there's no guarantee whether the compromised
    system will reboot during this period. If it reboots, your access will be lost
    and you may have to work again to gain the same access. This is the exact scenario
    where we want to maintain, or persist, access to our compromised system irrespective
    of whether it reboots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit offers some excellent built-in mechanisms that can help us maintain
    the persistent access to the compromised system. The first step will be to use
    a suitable exploit available against the vulnerable target system and get Meterpreter
    access, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2851627-c0a8-49fd-ae4a-d4bad9f6ab73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the exploit is successful, we get Meterpreter access to the remote system.
    Meterpreter within Metasploit offers a utility known as `persistence`, which helps
    us install a permanent backdoor on the compromised system. We can learn more about
    the `persistence` utility with the `run persistence -h` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33782514-af5a-4d03-ba41-9d06880628bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we execute the `persistence` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will execute the `persistence` script and start a matching handler
    (`-A`), place the Meterpreter at `c:\\` on the target system (`-L c:\\`), automatically
    start the listener when the system boots (`-X`), check every 60 seconds for a
    connection (`60`), connect on port `443` (`-p 443`), and connect back to us on
    IP address `192.168.25.130`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the execution of the `persistence` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56119311-b4c1-483d-b8a7-b8957aa3c1cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the `persistence` script has been successfully installed on the target
    system, we need not worry about reboots. Even if the target system reboots, either
    intentionally or accidentally, the `persistence` script will automatically connect
    back to us, giving us Meterpreter access again.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing tracks and trails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A penetration test consists of a sequence of complex tasks executed against
    the target. The execution of these tasks impacts the target system in many ways.
    Several configuration files may get modified, a lot of audit records may get recorded
    in log files, and there might be changes in the registry in the case of Windows
    systems. All these changes may help the investigators or blue team members to
    trace back the attack vector.
  prefs: []
  type: TYPE_NORMAL
- en: After completing a penetration test, it would be good to clear all the residual
    files that were used during the compromise. However, this needs to be in agreement
    with the blue team. Another intent behind clearing out all the tracks could be
    testing the post-incident response methods of an organization. However, the real-world
    attackers would simply use this to cover their tracks and stay undetected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit has certain capabilities that help with clearing tracks. First,
    we need to exploit a vulnerability and give Meterpreter access to our target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4b9c3e8-0a35-43c7-89a5-a005d39b34ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Application event logs on our target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/859e6c25-02ed-4a4f-aa7f-836700e5be7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the `System` event logs on our target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d874c0a5-b473-4d67-ac9a-08eb488805be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have given Meterpreter access to our target system, we''ll escalate
    our privileges to that of the administrator using the `getsystem` command. The
    Meterpreter has a utility called `clearev`, which is used to wipe out audit records
    on a target system. When we execute `clearev`, all the audit records on the target
    get erased:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9af5879-b8c8-4663-a119-06756ff7c95e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that there are no Application event logs as
    they got erased by `clearev`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43af6a3f-66f7-4d6c-97d7-9fb54a1229c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that there are no System event logs as they
    got erased by `clearev`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/584ee98d-d327-4501-a7c7-3527a8dfb78c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, on a target with a Linux operating system, we can do a few things
    to clear our tracks and traces. The Linux Terminal maintains a command history
    and it can be viewed using the `history` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3565782-5d49-40e3-bc10-7d4be4436499.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On a Linux system (Debian-based), the parameter that is responsible for controlling
    the command history is `$HISTSIZE`. If we are able to set its value to `0`, there
    won''t be any history of commands stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8ea765e-028f-4410-8cd5-3aefe4474b63.png)'
  prefs: []
  type: TYPE_IMG
- en: Anti-forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw that the penetration testing tasks leave behind
    multiple tracks and trails. A post-incident forensic investigation can reveal
    a lot about how the compromise happened. One of the important factors when performing
    a forensic analysis is timestamps. File timestamps help recreate a series of activities
    that might have happened.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit offers capabilities that could effectively be used in overriding
    timestamp values and mislead the forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, we use an exploit against our target to get Meterpreter access. Then
    we use the `timestomp <filename> -v` command to list the various timestamps associated
    with the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9eb1336c-08a4-4383-bef5-962afcf88a93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now try to erase the timestamps of a file using the `timestamp <filename>
    -b` command. This command will wipe out all the timestamps associated with the
    target file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c098fc8-9bb8-4442-98c3-046974762c61.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned various techniques to make persistent access to
    a compromised target. We also learned various methods to clear traces from the
    compromised system along with some of the anti-forensic abilities of the Metasploit
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the importance of correct vulnerability
    scoring.
  prefs: []
  type: TYPE_NORMAL
