- en: Getting Started with Authoring SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've dipped your toes in the water of SVG, it is time to take a deeper
    look at common SVG elements and their usage. This chapter will focus on the most
    common SVG elements and their usage, covering some that you've already learned
    about in more depth, and then introducing many other elements that you'll use
    in creating SVG images.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic SVG shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SVG positioning system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradients and patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SVG images generated from software programs, such as Adobe Illustrator,
    Inkscape, and Sketch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Positioning in SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you saw in [Chapter 1](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml),* Introducing
    Scalable Vector Graphics*, SVG elements use a coordinate plane positioning system.
    Elements in an SVG document are located using *x* and *y* coordinates. This should
    be familiar to you from your geometry class or, more specifically to the web,
    if you''re used to working with CSS, absolutely positioned elements. The following
    code shows two variations on the positioning scheme that you''ve already seen
    with both a circle element, which uses (`cx`, *center x)*, and (`cy`, *center
    y)*, attributes to place the `circle` element based on the center of the circle
    and the `rect` element, which will use the `x` and `y` attributes to place the
    upper left-hand corner of the square on the coordinate plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in the browser, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/076383f9-55e3-4c21-93cc-6f3c730dcbe7.png)'
  prefs: []
  type: TYPE_IMG
- en: With the exception of using the two center properties to place an element based
    on its center, *x* and *y*, this should look just like positioning an element
    in CSS. Where it gets interesting is in the intersection of `height` and `width`
    and the value of the `viewBox` attribute on the SVG element itself.
  prefs: []
  type: TYPE_NORMAL
- en: viewBox and viewport in SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `height` and `width` attributes define the *viewport* of the SVG element.
    The viewport can be thought of in the same way as the viewport in your browser.
    It defines the visible dimensions of the SVG document. The dimensions of the underlying
    SVG document can be larger than the viewport and, as with HTML, elements can be
    offscreen entirely. Everything that is visible is within the dimensions of the
    viewport.
  prefs: []
  type: TYPE_NORMAL
- en: If you just set the `height` and `width` attributes of an SVG element and don't
    use the `viewBox` attribute, it will behave in a manner equivalent to what you
    would expect if you've worked with CSS. In the case of the previous example, the
    viewport coordinate system will start with the coordinates `(0,0)` and will end
    at `(350, 150)`.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, coordinates will be rendered as (`x` value, `y` value).
  prefs: []
  type: TYPE_NORMAL
- en: In this case, each user unit will default to one pixel on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `viewBox` attribute lets you change that initial viewport coordinate system.
    By redefining that coordinate system, you can shift and scale the underlying SVG
    document in interesting ways. Instead of trying to *describe* what's possible,
    let's look at some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In every example we''ve shown so far, we''ve used the `viewBox` attribute and
    it''s been set to match the dimensions of the `height` and `width` attributes
    of the viewport. What happens if we change the `height` and `width` attributes
    of the SVG element and don''t change `viewBox` to match? Adding a second SVG element
    with new `height` attributes and `width` equal to double the original values creates
    a second version of the image at twice the size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what it looks like in a browser. As you can see, the viewport has been
    doubled, but since `viewBox` has the same dimensions, the exact same coordinates
    on the `circle` and `rect` elements create a scaled-up version of the image. In
    this case, the user units are no longer equivalent to one pixel, but the calculations
    inside the SVG element remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d718d17-2dc6-4d61-bf3f-9615ad69d6a5.png)'
  prefs: []
  type: TYPE_IMG
- en: You could scale this up as large as you like and it would render perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if we adjust the `viewBox` attribute itself? What does the value
    of the `viewBox` attribute represent?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `viewBox` attribute takes four parameters: `min-x`, `min-y`, `width`, and
    `height`. `min-x` and `min-y` define the upper-left corner of `viewBox`. Now, `width`
    and `height` determine the width and height of that `viewBox`. Playing with these
    values shows how they interact with the height and width of the viewport. The
    first two examples change the *x* and *y* positions of the viewport''s coordinate
    system. The first example offsets it by 20% (70 and 30 are 20% of the SVG width
    and height) in the positive direction. The second example offsets it by 20% in
    the negative direction. The third example changes the width and height of the
    `viewBox `attribute, shrinking it by half:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in the browser, you can see the effect of those changes to the `viewBox`
    attribute. The offsets move the circle and square closer relative to the upper
    left-hand corner of the viewport. Shrinking the size of the `viewBox` attribute
    by half and keeping the size of `rect` and `circle` the same, effectively doubles
    the size of the rendered elements. The viewport stays the same size so the `viewBox` attribute
    and associated user units scales up by a factor of 2 to fit. All the elements
    inside it are scaled up as necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b93e1b64-083b-4385-9195-4bb01af354d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows what''s at work in a little more depth (the black
    outline overlay represents the `viewBox` viewport):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f15b03dc-6375-46a7-9ca9-5797364429de.png)'
  prefs: []
  type: TYPE_IMG
- en: There is still more to learn about positioning in SVG, but we're going to tackle
    those topics as they arise throughout this rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a deeper look at some of the other elements that make up the
    SVG experience.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By far the most important element in the SVG specification is the `path` element.
    `path` allows you to draw lines and shapes using vectors defined by a series of
    commands passed in as values to the `d` attribute. Remember when I mentioned that
    one of the biggest roadblocks to SVG adoption was the lack of a friendly API?
    This `path` element is likely to be the biggest sore spot in the entire specification.
    The values you might see in a `d` attribute can be incredibly dense and difficult
    to read. How difficult to read? Feast your eyes on the *S* element from the SVG
    logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Without knowing what's going on, that's impossible to parse and even knowing
    the rules for the `d` attribute, it's difficult to keep track of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simpler example so that you can get your head around the syntax.
    In this document, we''ve created a stylized letter R. Here''s how to read the
    instructions of the `d` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: (M)ove to point `(100,100)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(100,300)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(150,300)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(150,150)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (S)mooth cubic Bézier curve from the current point to the point `(150,175)`
    with `(250,150)` as the second control point. Control points provide directional
    information used to draw the curve. This version of the cubic Bézier `curveto`
    instruction is actually shorthand indicating that the control points are reflected.
    It's possible in other formats to define multiple control points in pointing in
    different directions. This will create a more complex curve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(200,300)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(250,300)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a (L)ine to `(225,225)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Draw a (S)mooth cubic Bézier curve from the current starting point to the point
    `(100,100)` with `(350,100)` as the second control point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in a browser, these commands produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ec9c126-a3cd-4db4-9a18-3d8407a76cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: This set of instructions is still complicated and it doesn't even touch on all
    of the possible options for a `path` element. The good news is that most of the
    time when you work with SVG these complex `path`s will be generated — either for
    you (using a graphical SVG editor) or by you through JavaScript. So, in reality,
    you just need to be able to understand the instructions and their usage. You don't
    need to sit there and parse through this data instruction by instruction.
  prefs: []
  type: TYPE_NORMAL
- en: More on basic shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've learned about `path`, let's take a look at some more straightforward
    parts of the SVG universe and let's examine some more basic shapes. You've already
    learned about `circle` and `rect`. Let's take a look at a few more basic shapes.
  prefs: []
  type: TYPE_NORMAL
- en: The line element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `path` element allows you to draw anything you can imagine using a long
    series of instructions. Thankfully, there are many convenient elements that define
    common shapes that are a lot easier to work with than the `path` element. The
    first of these that you'll learn about is the `line` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example draws a grid on a `500` by `500` square. The `line` elements
    in use here take five arguments: `x1`, `y1`, `x2`, `y2`, and a `stroke`. The *x*
    and *y* coordinates indicate the beginning (`x1`, `y1`) and ending points (`x2`,
    `y2`) of the line. This SVG document draws a grid `100` pixels on each side in
    a `500` pixel square:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in the browser, the previous markup produces the following grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44bd8c61-3400-4e40-8877-2637debf5ddb.png)'
  prefs: []
  type: TYPE_IMG
- en: As an aside, generating a grid like this can be helpful with generating and
    debugging SVG documents. With a finer grained mesh on the grid, you can more easily
    pinpoint where calculated or manually generated positions are on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The ellipse element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ellipse` is just like `circle`, except it takes *two radius* arguments, `rx`
    and `ry` for the *x* and *y* radius, respectively. This additional radius argument
    is needed as, otherwise, we would just be drawing a standard circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output of that straightforward markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75731a0d-fd92-4b16-bf29-fa5b22c9b6dc.png)'
  prefs: []
  type: TYPE_IMG
- en: The polygon element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `polygon` element creates close-ended shapes consisting of multiple straight
    lines starting from an initial `x,y` coordinate and ending with a final point
    on the coordinate plan. The `points` attribute takes a list of points on the coordinate
    plan to define the `polygon` element. The final point of a `polygon` element automatically
    connects to the first point. The following code sample draws a star:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the output of the preceding SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf25a9a8-ae58-4c18-9431-e846e7844f53.png)'
  prefs: []
  type: TYPE_IMG
- en: With `polygon` and `polyline`, it's just a suggestion, but not a requirement
    to separate the `x,y` pairs with commas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is programmatically equivalent to the previous example (although
    much harder to read). It renders the exact same shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The polyline element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `polyline` element creates *open-ended* shapes consisting of multiple straight
    lines. The `points` attribute takes a list of `x,y` points on the coordinate plan
    to define `polyline`. The following code sample traces the pattern of the constellation
    Draco (the dragon) in the night sky:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run in the browser, the previous example looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35eebdb5-2607-4906-8d0b-913440737686.png)'
  prefs: []
  type: TYPE_IMG
- en: More on fills and strokes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've seen them in use in most of the examples, now let's take a little bit
    of a more complete look at fills and strokes. These presentation attributes are
    important to SVG, especially when working with them dynamically, as it's much
    easier to manipulate elements directly as compared to writing dynamic CSS.
  prefs: []
  type: TYPE_NORMAL
- en: '`fill` and `stroke` are collectively referred to as `paint` properties. `fill`
    sets the inside color of the object and `stroke` sets the color of the line drawn
    around the object. As you''ve already seen, they can accept any valid CSS color
    value. They can also accept a reference to a *paint server element* (these are
    `hatch`, `linearGradient`, `meshgradient`, `pattern`, `radialGradient`, and `solidcolor`),
    which are elements that define a paint style for the element. You''ve already
    seen one of these (`linearGradient`) and will learn about the more commonly supported
    ones shortly. Before you do, however, it''s time to take a look at some stroke-specific
    attributes that control the way the lines appear and fit together.'
  prefs: []
  type: TYPE_NORMAL
- en: stroke-dasharray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `stroke-dasharray` attribute defines a list of comma-and/or whitespace-separated
    lengths or percentages that specify an alternating pattern of dashes and gaps
    that are used to stroke the line. The following example shows several different
    examples. The first is a series of 10 pixels on and 5 pixels off. The second example
    turns the pixels on and off based on the Fibonacci sequence. The third series
    turns the pixels on and off based on a series of prime numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in the browser, the preceding code produces the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2025b07-1ba6-4eba-969d-b3e61f798f48.png)'
  prefs: []
  type: TYPE_IMG
- en: If an odd number of values are provided as the value of the attribute then the
    list is repeated in order to yield an even number of values. This may not result
    in a pattern you expect as values might shift from dashes to spaces and create
    an unexpected result. In the following example the single value of `10` produces
    `10` on and `10` off, which is probably what you envisioned. The `"15,10,5"` pattern,
    on the other hand, produces `15` on, `10` off, `5` on, `15` off, `10` on, and `5`
    off. If you expect the pattern to *always* have `15` as an `"on"` then this might
    come as a surprise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see this in the browser. This may be the look you''re after, but if
    it''s not, now you know why:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47f7ec9e-eade-4984-bcb8-bb8df372e6fe.png)'
  prefs: []
  type: TYPE_IMG
- en: stroke-dashoffset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `stroke-dashoffset` attribute accepts positive or negative length or percentage
    values and specifies the distance into the dash pattern to start rendering the
    dash. This offset can be seen in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect of this attribute can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f8fde1a-648d-44d7-9e2b-ccd0bcc31383.png)'
  prefs: []
  type: TYPE_IMG
- en: stroke-linecap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `stroke-linecap` attribute indicates the shape to be rendered at the end
    of an open line. The options are `butt`, `round`, `square`, and `inherit`. The
    following code sample shows the different rendering options in action. The two
    red lines are there to show the difference between `butt` and `square`. `butt`
    ends the `stroke` flush with the ends of the line. The `square` cap extends beyond
    the end of the line to include the thickness of the `stroke`''s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1782030a-be88-4926-9da7-50084b773ba7.png)'
  prefs: []
  type: TYPE_IMG
- en: stroke-linejoin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `stroke-linejoin` attribute defines the way that the corners of `path`s
    and basic shapes are rendered. The possible values are `miter`, `round`, `bevel`,
    and `inherit`. `Round` renders smoothly curved corners, `miter` produces sharp
    edges with only one angle for the corner, and `bevel` adds a new angle to the
    corner to create a compound corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'These options can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb037f61-1dd0-4512-b36d-2b1e7b8b1cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: stroke-opacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `stroke-opacity` attribute does what you might expect. It sets the opacity
    of a stroked object. The following sample sets three different opacities on three
    separate rectangles. You can see `stroke` interact not just with the background
    of the page, but with the fill of the rectangle as well, as `stroke` is centered
    on the edge of the rectangle and part of it covers the filled-in area:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no easy way to change the positioning of the `stroke` attribute on
    an SVG element. In graphics programs, it's possible to set the `stroke` attribute
    to be on the inside of the box, centered on the edge of the box (which is how
    SVG does it) and outside the box. There is a proposal in the new SVG strokes ([https://www.w3.org/TR/svg-strokes/](https://www.w3.org/TR/svg-strokes/))
    specification to change the alignment of `stroke` (called stroke-alignment) but
    there isn't anything in the browser at the present time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08f5190d-b200-48be-813e-03fcba8be4a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've looked at the different options for `stroke`s, it's time to look
    at some of the other options for fills. These are the paint server elements that
    we mentioned before. You've already encountered one of them, `linearGradient`.
    You'll also learn about two others that are commonly used, `radialGradient` and
    `pattern`.
  prefs: []
  type: TYPE_NORMAL
- en: linearGradient and radialGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've already seen the `linearGradient` element in [Chapter 1](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml),
    *Introducing Scalable Vector Graphics*. There's also `radialGradient` that works
    in much the same way, except it renders gradients that radiate around a center
    point. Both elements are added to the `defs` section and each has a series of
    `stop`s with `offset`s and `stop-color`s defining the gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'They are then referenced by their `id` attribute as the argument to the  `fill`
    attribute of `rect`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/bc18b819-7837-4a13-adac-ad5c7c7558ea.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: The pattern element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final paint server we''ll look at is the `pattern` element. `pattern` allows
    you to define a small graphic element that you can reference as `fill` or `stroke`
    and tile over an element in a repeating pattern. In this example, we''re using
    a `pattern` element with a single child `polygon` element that defines two diagonal
    lines that combine to create a long pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered out in the browser, this creates the following jagged pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ef53558-7377-4576-908f-a4f2f59c5d6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Authoring programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the examples so far in the book have been generated by hand. In practice,
    as you'll learn throughout this book, SVG is often generated by software. Most
    of this book will look at creating and manipulating SVG using web-based tools
    and libraries, but SVG images can also be generated by desktop drawing applications.
    While working on the web, you will often work with SVG images that have been created
    by designers in applications, such as Inkscape ([https://inkscape.org/en/](https://inkscape.org/en/)),
    Adobe Illustrator ([https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html)),
    or Sketch ([https://www.sketchapp.com/](https://www.sketchapp.com/)). These applications
    are wonderful because they allow non-technical designers to work with SVG to create
    images using advanced drawing tools.
  prefs: []
  type: TYPE_NORMAL
- en: While it's not a requirement for the rest of this book, I would suggest getting
    your hands on something you can use to author SVG in this way. While you want
    to learn how to work with SVG in a dynamic, web-based environment, it's great
    to have the option to use advanced drawing tools to update and manipulate SVG
    elements. I have used both Adobe Illustrator and Inkscape over the years and many
    people swear by Sketch, so those are three options to start with. For just starting
    out, I would suggest looking first at Inkscape. Inkscape is a free, open source
    software released under the GNU license and it's pretty solid from a feature perspective,
    so it's a good default choice.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever application you choose (and even if you don't choose one and simply
    inherit SVG images authored in one), it's good to know that there are some downsides
    to these applications. These applications are designed for the authoring experience
    and aren't producing SVG images optimized for the web so it's important to keep
    that in mind when pulling SVG images created by graphics program into a web project.
    You'll learn more about optimizing SVG images later on in the book, but you should
    be aware of what you're up against from the start.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following screenshot. It shows a difference between two files that
    both render the exact same image. The one on the left is the SVG source file output
    by Inkscape. The file on the right is an optimized version. As you can see, there''s
    a lot of extra data sloshing around in the Inkscape file. That data is required
    by the application, but wouldn''t be required on the web, so removing it allowed
    us to cut the file down significantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5571d0a1-6b7a-4b87-9626-045e516d07de.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll learn about tools to clean up SVG files like this in [Chapter 11](af31515b-b7c2-4a61-a991-c2ba912b9d11.xhtml),
    *Tools to Optimize Your SVG*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about multiple SVG features. You learned about
    `path`, which allows you to draw complex shapes using lines and curves. You also
    learned about a number of basic drawing tools that allow you to draw lines, ellipses,
    polygons, and polylines. In addition, you learned about a number of stroke and
    fill options.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned a little bit about the options for using software to draw
    static SVG and learned a little bit about the potential drawbacks of doing so.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](54409c55-8ae8-4ddc-962c-d0f2908137ef.xhtml), *Digging Deeper
    with SVG Authoring*, you'll continue to learn about SVG authoring, adding on to
    the growing list of tools you've experienced, and allowing you to create even
    more complex SVG images.
  prefs: []
  type: TYPE_NORMAL
