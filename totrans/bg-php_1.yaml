- en: Chapter 1. Getting Started with PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP, or Pre-Processor Hypertext, is a programming language that is used to design
    web applications and to make a website look more intuitive and interesting. PHP
    has also gained a lot of popularity over the years as a server-side scripting
    language. PHP is an easy to use, but powerful, language. PHP works on multiple
    operating systems and can support multiple servers. All of these features of PHP
    make it an ideal candidate for a web designing language.
  prefs: []
  type: TYPE_NORMAL
- en: This book will take you through the basics of PHP, including declaring the syntax,
    declaring and using the variables and data types, operators, and conditionals.
    It will then cover the principles of building a PHP framework along with building
    your own PHP web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will begin to learn the building blocks of the PHP programming
    language. We will be covering the syntax and how to declare and use variables
    in PHP. We will also look at controlling the execution flow using the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to write simple programs using
    these elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the basic syntax of PHP to write simple programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use variables for different data, and manipulate them using different operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use conditionals to control the flow of execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start our journey with a look at PHP syntax and executing our first
    file. Let's begin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In PHP, syntax is very important; you need proper syntax for your server to
    know where it should start parsing PHP, and you have to show it via the open and
    close PHP tags, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Through using the PHP tags, you can add your code just about anywhere in the
    document. This means that if you have an HTML website, you can just add the tags,
    along with some PHP code, and it will process. In addition to using the open and
    close PHP tags, you must also use the `.php` extension in your file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with a quick example.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP to Display "Hello World"
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to use what we''ve learned so far to display
    a string to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file and name it `syntax.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following, and save your document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Open your working directory in the **Terminal.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Using PHP to Display "Hello World"](graphics/1_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch back to your document and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to the Terminal and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You should now see the string, "Hello World" printed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our learning with PHP, we must first look at the core building blocks
    that will be used to build every project. In our applications, we will always
    need a way to store our data temporarily (in our case, we call the storage methods
    variables).
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding example, variables start off using the `$` symbol,
    followed by the name, and the value is assigned using the assignment operator.
    Here, we have a variable named `VARIABLENAME,` with a string value of `VALUE`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Variable names cannot start with numbers or special symbols, besides the `$`
    sign, used to define the variable itself.
  prefs: []
  type: TYPE_NORMAL
- en: PHP is one of the few languages that doesn't require you to declare a data type
    before assigning a value.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Types** | **Examples** |'
  prefs: []
  type: TYPE_TB
- en: '| String | "Hello World" |'
  prefs: []
  type: TYPE_TB
- en: '| Number | 123 |'
  prefs: []
  type: TYPE_TB
- en: '| Float | 1.095 |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | TRUE or FALSE |'
  prefs: []
  type: TYPE_TB
- en: We will now try to implement variables in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will illustrate a real-world example of using variables
    in a program. We will start off by creating a variable to store a user''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file and name it `variables.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following, and save your document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open your working directory in the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following command, and then press *Enter*:![Working with Variables](graphics/1_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to insert a variable''s value into a string is to use this special
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now have a look at the various operators that are available in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the section on variables, we saw the = symbol, which, in PHP, is known as
    an assignment operator. This operator does exactly what the name implies, allowing
    you to give a variable a value. The first operators are known as comparison operators.
    Comparison operators allow you to compare two values within a given conditional
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Inside of the set of comparison operators are the equal, identical, not equal,
    not identical, less than, and greater than operators.
  prefs: []
  type: TYPE_NORMAL
- en: '| Usage | Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$a == $b` | Equal | TRUE if `$a` is equal to `$b.` |'
  prefs: []
  type: TYPE_TB
- en: '| `$a === $b` | Identical | TRUE if $a is equal to `$b`, and they are of the
    same type. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a!= $b` | Not Equal | TRUE if `$a` is not equal to `$b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a!== $b` | Not Identical | TRUE if `$a` is not equal to `$b`, or they are
    not of the same type. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a < $b` | Less Than | TRUE if `$a` is strictly less than `$b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a > $b` | Greater Than | TRUE if `$a` is strictly greater than `$b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a <= $b` | Less Than or Equal To | TRUE if `$a` is less than or equal to
    `$b`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a >= $b` | Greater Than or Equal To | TRUE if `$a` is greater than or equal
    to `$b`. |'
  prefs: []
  type: TYPE_TB
- en: Logical Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up next are logical operators. Logical operators are used to check for multiple
    cases at one time. The set of logical operators gives you the `NOT`, `AND`, and
    `OR` operators.
  prefs: []
  type: TYPE_NORMAL
- en: '| Usage | Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `! $a` | NOT | TRUE if `$a` is not TRUE. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a && $b` | AND | TRUE if both `$a` and `$b` are TRUE. |'
  prefs: []
  type: TYPE_TB
- en: '| `$a &#124;&#124; $b` | OR | TRUE if either `$a` or `$b` is TRUE. |'
  prefs: []
  type: TYPE_TB
- en: Mathematical Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your program, you will sometimes need to do a little math; this is where
    mathematical operators come in. They give you the ability to add, subtract, multiply,
    divide, and get the remainder of two divided numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '| Usage | Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$a + $b` | Addition | Sum of `$a` and `$b` |'
  prefs: []
  type: TYPE_TB
- en: '| `$a - $b` | Subtraction | Difference of `$a` and `$b` |'
  prefs: []
  type: TYPE_TB
- en: '| `$a * $b` | Multiplication | Product of `$a` and `$b` |'
  prefs: []
  type: TYPE_TB
- en: '| `$a / $b` | Division | Quotient of `$a` and `$b` |'
  prefs: []
  type: TYPE_TB
- en: '| `$a % $b` | Modulus | Remainder of `$a` divided by `$b` |'
  prefs: []
  type: TYPE_TB
- en: Let's try to use these operators in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Variables and Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will be extending our previous example to calculate the
    annual salary of our user. Here we go with the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file and name it `operators.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get started, copy the contents from our `variables.php` document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will add an additional variable to the document, which will hold the
    number of weeks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will use the multiplication operator to calculate our weekly pay and
    assign it to a new variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with our weekly pay rate, we can calculate our salary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Our last step is to display our final calculations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Your final document should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll open our directory in our `Terminal` and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We should now see our data being displayed:![Combining Variables and Operators](graphics/1_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a foundation for operators, we can start to use them in what
    are known as conditionals. Conditionals allow you to control the flow of your
    program, and they come in the form of `if` statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic `if` statement is represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Inside of the parentheses, you will hold the condition that is required to activate
    the code within the curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can add an `else` statement, which will allow you to give
    alternate code to run if the condition isn''t met:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Conditionals](graphics/1_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A helpful function to use with conditionals is the `empty` function. The `empty`
    function is used to check whether a variable is empty
  prefs: []
  type: TYPE_NORMAL
- en: Working with Conditionals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will be implementing conditionals where we will check the
    name of the animal and if it matches, we will be printing the sound of the particular
    animal.
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file and name it `conditionals.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to start by adding our open and close `php` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll create a new function to hold our animal name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can write our first conditional; here, we want to check whether the
    animal is a cat, and if it is, we will print meow to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and open your working directory in the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command, and see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Working with Conditionals](graphics/1_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we''ll expand our conditional a bit further, to add other animal sounds
    and change our animal to a lion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's save it again and run the command in the Terminal; you should get
    the following result:![Working with Conditionals](graphics/1_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activity: Building an Employee Salary Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that you are a PHP developer for a department store chain, and the store
    is preparing for its upcoming Black Friday sale. Staff who work during the sale
    hours will be given time and a half, as well as a 10% commission on all sales
    that they make. Additionally, if they make over $1,000 in gross sales, they will
    earn a $1,000 bonus. Management wants you to create a calculator that makes it
    easy for the staff members to calculate how much they earned.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this activity is to help you understand variables and conditionals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory and name it `salary_calculator`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the new directory, create an `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the placeholder variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next step will be to define our calculations and assign the outcomes to
    their respective variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to check the gross sales variable to see if the staff member
    has made over $1,000, to be awarded with a bonus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the default rates and the calculators, we can display the
    results to our user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: All that a staff member would have to do now is change the value of their hourly
    rate and gross sales and run the program to get their total pay amount.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now reached the end of this chapter. In this chapter, we began with
    the PHP syntax. We then moved on to variables and the different operators that
    are used in PHP. Finally, we saw how to implement conditionals and control the
    execution flow.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a clear understanding of variables, data types, and conditionals,
    as well as how they are used together. In the next chapter, you will learn about
    how arrays and loops are implemented in PHP.
  prefs: []
  type: TYPE_NORMAL
