- en: Developing Your Location-Based Alarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to know the location of the user and providing customized services to
    them is one of the powerful features of Android devices. Android app developers
    can take advantage of this powerful feature and provide a fascinating service
    to the users of their app. Hence, understanding Google location services, the
    Google Maps APIs, and location APIs, are very important for the developers of
    Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop our own **location-based alarm** (**LBA**)
    and, in the process of developing the app, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a map based on Android activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of Google Maps in Android applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process for registering and obtaining the key required for Google Maps activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a screen for the user to provide input to the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to complete our app and make a workable model in the next chapter by adding
    the alarm feature and using Google Location Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will look at the steps involved in creation of a LBA. We will use our favorite
    IDE, Android Studio, for developing the LBA.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by launching Android Studio. Once it's up and running, click
    on Start a new Android Studio Project. If you have a project opened already, click
    on File | New Project.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the following screen, enter the details shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: `LocationAlarm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company domain**: Android Studio uses the domain name to generate the package
    name for the application we develop. The package ensures our app gets a unique
    identifier in the Play Store. Generally, the package name will be the reverse
    of the domain name, for example, it would be `com.natarajan.locationalarm` in
    this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project location**: The path where we would like to have the project code
    developed and saved. You can chose and select the path where you are developing
    the app. As we are developing our app using Kotlin, we must select Include Kotlin
    support:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/730f30c7-4125-4be5-bfa2-2da610d797bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the screen that follows, we will be making a decision about the Android
    devices we target based on:'
  prefs: []
  type: TYPE_NORMAL
- en: APIs they provide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our app, we will choose Phone and Tablet and the API as API 15\. The text
    beneath the API selection box informs us that by selecting API 15 and later, we
    will be choosing to have our app run on approximately 100% of devices.
  prefs: []
  type: TYPE_NORMAL
- en: The Help me choose option would help you to understand the distribution of Android
    devices across the globe grouped by the android version (API) they run.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will not be running our app on any other form factors; hence, we can skip
    those selection areas and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a03eeb24-e179-4e91-9767-4479079768d9.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next screen, we will be provided with an option to add an activity to
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio makes it easier for developers to include the kind of activity
    they require for their app by providing ready-made templates on the most frequently
    used activities.
  prefs: []
  type: TYPE_NORMAL
- en: We are developing a LBA, so we require a map that shows the location for which
    the alarm is set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Google Maps Activity** and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a73de5b-a2a7-4727-b45c-0166738c9413.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be configuring the activity on the next screen. Native Android apps
    are, in general, a combination of the Kotlin/Java class and the user interface
    defined by XML. The following inputs are provided on the screen to configure our
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Activity Name**: This is the name of the Kotlin class for our map''s activity.
    The name appears by default as MapsActivity when we select a maps activity; we
    will use the same here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout Name**: The name of the XML layout we will use to design our user
    interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Title**: The title we want the app to display for this activity. We will
    leave this as Map, which is shown by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once these entries are made, click on the Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e64162cd-046e-4798-8c82-20e4bdb8dac7.png)'
  prefs: []
  type: TYPE_IMG
- en: On clicking the button, we will see the Building 'LocationAlarm' Gradle project
    info screen.
  prefs: []
  type: TYPE_NORMAL
- en: Generation of a Google Maps API key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As soon as the build process is complete, we will see the following resources
    file screen being opened by default and displayed by Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: The file is named `google_maps_api.xml` by default. The file clearly indicates
    that before we run our application, we need to get a Google Maps API key. The
    procedure to get the Google Maps API key for the app is listed in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key that is generated should be replaced by the placeholder YOUR_KEY_HERE mentioned
    in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will generate the key required for our app using the link provided in the
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://console.developers.google.com](https://console.developers.google.com/apis/dashboard) requires
    the user to sign in with their Google ID. Once they sign in, the option for creating
    the project and enabling the API will be presented.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select and copy the link in full ([https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm))and
    enter it into your favorite browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d94b1a65-5970-4aee-aa60-14b56ea58f32.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the user signs in to the Console, the user will be asked to register the
    application for the Google Maps Android API in the Google API Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see couple of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As indicated in the text below Select a project where your application will
    be registered, the user can use one project to manage the API keys for all the
    applications developed, or choose to have a different project for each application.
  prefs: []
  type: TYPE_NORMAL
- en: The choice of using one project to manage all API keys required for various
    Android applications developed or having one project for each application, depends
    on the user. At the time of writing, by default, the user will be allowed to create
    12 projects for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following this, you need to read and agree to the terms of service of the Google
    Play Android Developer API and the Firebase APIs/Services Terms of Service ([https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm) ):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf107574-6da2-4e5f-b34c-97cdf75ca2d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose Create a project and agree to the terms and conditions. Once that is
    done, click on **Agree and continue**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc592428-7e92-4030-877e-874c5e0b50db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the creation of the project is successful, the user will see a screen.
    The screen reads The project has been created and Google Maps Android API has
    been enabled. Next you''ll need to create an API key in order to call the API. The
    user will also see a button that reads **Create API** **Key**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8873375-6a3f-4d8e-b51a-f0d22c2edea6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On clicking the Create API Key button, the user will be shown a console with
    a message pop up that reads API key created. This is the API key that we need
    to use in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44c63930-3055-4847-a8ba-f0279d8fb298.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the API key and then replace the YOUR_API_KEY text in the `google_maps_api.xml`
    file with the API key generated, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66097bc6-8513-42c9-b691-06dbf048d28f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The modified file with the generated Google Maps API key should look like the
    one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ac786d7-90d2-427b-bd2c-f8f1a6994396.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Developers can always check the API key generated by logging into the Google
    API console and cross checking the usage of the correct API key generated specifically
    for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae855389-1b7c-4ee5-9ac5-d1f2f79ca290.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have got the API key generated and have modified the file to reflect
    this, we are all set for analyzing the code and running the app.
  prefs: []
  type: TYPE_NORMAL
- en: To quickly recap, we created the app to include Google Maps activity and created
    a layout file. Then we generated the Google Maps API key and replaced that in
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run the app, go to Run | Run app or click on the **play** button.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio will prompt us to select the deployment target, the physical
    device that has developer options and USB debugging enabled OR the emulator, also
    known as the virtual device the user has set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we select one of the options and click on Okay, the app will be built
    and run on the deployment target. The app will be up and running and we should
    see map activity being loaded with Marker in Sydney:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca5f912d-0ac1-4a11-89c6-a52da0f5a02b.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could successfully run the app, and now it is time to delve deeper into the
    code and understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the `MapsActivity.kt` Kotlin class file.
  prefs: []
  type: TYPE_NORMAL
- en: The `MapActivity` class extends the `AppCompatActivity` class and also implements
    the `OnMapReadCallback` interface. We have a couple of variables, `GoogleMap`,
    `mMap` and `btn` button initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the `onCreate` method, the app is set to load the content from the
    XML file, `activity_maps.xml`, as and when the app is launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resources for the `mapFragment` and `btn` are set from the resources file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default code generated shows the market in Sydney. The method `onMapReady`shown
    here gets called when the map is ready and loaded and displays a marker. The location
    is found based on the `LatLng` value mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's now customize this code to display the marker over Chennai, Tamil Nadu,
    India. To make the change, the first step is to understand what Lat and Lng stand
    for.
  prefs: []
  type: TYPE_NORMAL
- en: Latitude and longitude are used together to specify the precise location of
    any part of the earth. In Android, the class `LatLng` is used for specifying the
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the Lat and Lng of a place
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding the latitude and longitude of a place can be done easily using Google
    Maps in the browser. For our purpose, we will launch Google Maps in our favorite
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Search for the location for which you need to find the latitude and longitude.
    Here, we search for Vasantham, a special school for mentally challenged children
    in Chennai, Tamil Nadu, India.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the location we''ve searched for is found, we can see the latitude and
    longitude value in the URL, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cb68afc-f61c-4acd-b428-f1332d7342e9.png)'
  prefs: []
  type: TYPE_IMG
- en: The latitude and longitude values we see for the place we searched for are 13.07
    and 80.17\. Let us go ahead and make the following changes in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `onMapReady` method, let us make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the `Sydney` variable to `chennai`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the Lat and Lng from Sydney's to Chennai's
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `Marker` text to read `Marker in Chennai`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the `newLatLng` to take `chennai` as the input value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As we save the changes done and run the app once again, we will be able to
    see that the map now loads with the marker on Chennai, India:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51949d18-eff8-4e7f-83f1-98c0b97d0bc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we touch the marker, we should be able to see the text Marker in Chennai
    displayed on top of the red marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/755f5fcc-207d-4fdb-a149-3c968e98feb6.png)'
  prefs: []
  type: TYPE_IMG
- en: The XML layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have looked at the Kotlin class in detail and also ways to customize the
    Lat and Lng input.
  prefs: []
  type: TYPE_NORMAL
- en: Let us quickly check out the XML layout files. We will also understand the process
    to add a button that will take us to the screen through which the user will be
    able to enter the Lat and Lng input for the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `activity_maps.xml` file, we have the map fragment and button element
    wrapped in the `LinearLayoutCompat` as shown here. We have the button element
    linked to the `onClickSettingsButton` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MapsActivity` Kotlin class, we can define a method called `onClickSettingsButton`
    and, on invocation of the same, we fire up another activity called `SETTINGACTVITY`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Developing a screen for user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When clicking the `Settings` button, our app will take the user to a screen
    where they can enter the Lat and Lng values for the new location that user wants
    the alarm to be set for.
  prefs: []
  type: TYPE_NORMAL
- en: We have a very simple screen for input purposes. We have a `LinearLayout` that
    has a  couple of `EditText`, one for the latitude and the other for longitude
    input. These edit texts are followed by a button that allows for the submission
    of the new location coordinates entered by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have an `onClickButton` method linked to the button to be called upon
    as and when the user clicks on the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have the XML layout for the user input ready; now let's create a new Kotlin
    activity class that will use this setting's XML and interact with the user.
  prefs: []
  type: TYPE_NORMAL
- en: The class `SettingsActivity` extends `AppCompatActivity` and contains a couple
    of edit text elements and button element initialized. The variables are identified
    and set to the correct resources from the resources file by their IDs. The activity
    loads the `settings_activity` XML as and when the activity is invoked and loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `onClickButton` method, we have a simple Toast message that says Alarm
    Set. In the following chapter, we will be saving the input entered and will have
    the alarm trigger when the user enters the location of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e21e552f-6b2e-470a-b34d-79272293a859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the OK button after entering the Lat and Lng details,
    the Toast message will be displayed, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ef9237f-56b1-4017-baa9-3cb85efa06cd.png)'
  prefs: []
  type: TYPE_IMG
- en: The AndroidManifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A manifest file is one of the most important files of the project. In this file,
    we have to list all the activities we intend to use in our app and also provide
    details about the API keys we use for the Google Maps API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following important pointers in the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: Our app uses the permission `ACCESS_FINE_LOCATION`. This is to get the details
    about the user's location; we require this to enable the alarm as and when the
    user reaches the location the alarm is set for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACCESS_COARSE_LOCATION` is the permission-enabled app to get the location
    details provided by `NETWORK_PROVIDER`. The `ACCESS_FINE_LOCATION` permission
    enables the app to get the location details provided by `NETWORK_PROVIDER` and
    `GPS_PROVIDER`.'
  prefs: []
  type: TYPE_NORMAL
- en: We have the metadata for the Android geo API Key which is nothing but the API
    key we generated and placed in `google_maps_api.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a Launcher MAIN activity, the one that launches the map with the marker
    on the Chennai location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also have the default activity settings that get triggered when clicking
    the `Submit` button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Build.gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `build.gradle` file includes the dependencies required for the Google Maps
    services. We must include the Play services maps from the Google Play services.
    From the Google Play services, we include the services of interest to us. Here,
    we would like to have a map service available to us, and, hence we are including
    `play-services-maps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed and learned about creating our own LBA. We understood
    the details of the Google Maps API, the generation of API keys, the creation of
    the user interface for maps, adding markers to the map, customizing the marker,
    creating user interface screens for input from the user, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the important components in the manifest file, the `build.gradle`
    file, and the XML layout files and corresponding Kotlin classes. In the next chapter,
    we will save the input we received from the user using shared preferences, use
    the location-based services from Google APIs, and enable and trigger the alarm
    as and when the user enters the location.
  prefs: []
  type: TYPE_NORMAL
