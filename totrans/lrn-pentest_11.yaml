- en: Getting Started with Wireless Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The wireless industry continues to grow with an increasing number of wireless
    gadgets. An average family possesses access points, media centers, phones, consoles,
    PCs, and even security systems. Businesses rely on wireless networks for convenience
    as employees move around freely inside and even outside of the corporate building.
    The downside to being able to freely access the network is that it opens up the
    network to attacks through vulnerabilities. Thus, it is important for companies
    to identify and fix vulnerabilities in their wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about wireless attacks and how to execute them.
    We will discuss various components of a wireless packet, such as beacon frames,
    and what is contained within the packet. You will learn about the types of wireless
    adapters that can be used for wireless packet injection and monitoring. We will
    dive into various tools that can be used to perform different attacks. Finally,
    you will learn how to crack various wireless encryption protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through the chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring wireless attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless attack tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WPA/WPA2 and WEP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible network card for packet injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless router supporting WPA/WPA2 and WEP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring wireless attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireless networking has really evolved from a **nice to have** to a **must have**
    requirement in organizations. Wireless networks are available almost everywhere.
    For example, you probably have a wireless network running at home to facilitate
    internet access. This access connects devices such as mobile phones, smart TVs,
    media players, gaming consoles, tablets, and personal computers to the internet
    at all times. All your neighbors probably have similar setups.
  prefs: []
  type: TYPE_NORMAL
- en: In enterprises, wireless networks are a powerful tool that boost productivity
    and promote the exchange of information. Employees can roam and have untethered access
    to shared documents, emails, applications, and other network resources. Wireless
    networks provide simplicity, ease of use, convenience to guests, and network access
    in hard-to-reach areas.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, there is often a lack of security on wireless devices, which leads to
    severe vulnerabilities. Companies often do not configure wireless devices securely,
    and some might even use wireless equipment with default configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how wireless networks work, and the various encryption algorithms
    and attacks against wireless networks, is crucial if you want to perform a successful
    penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless network architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before performing a penetration test blindly against a wireless network, it
    is important to understand the architecture of a wireless network. This will help
    you gain a good understanding of the different modes and what types of wireless
    frames are important from a penetration testing perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireless networks operate in two main modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both modes, there is a common component called a **Service Set Identifier**
    (**SSID**), which is required for network verification. When using infrastructure
    mode, the SSID is set by an **access point** (**AP**). In ad hoc mode, the SSID
    is set by the station that is creating the network.
  prefs: []
  type: TYPE_NORMAL
- en: In **infrastructure mode**, there should be at least one access point and one
    station. Both of these form a **Basic Service Set** (**BSS**). An **Extended Service
    Set** (**ESS**) is when two or more access points are connected to the same IP
    subnet or **virtual local area network** (**VLAN**), thus creating a single logical
    network segment.
  prefs: []
  type: TYPE_NORMAL
- en: In **ad hoc mode**, **Independent Basic Service Set** (**IBSS**) is created
    when two or more stations begin communicating without an access point. This mode
    can be referred to as peer-to-peer mode. One of the stations will take the liberty
    of handling responsibilities that the access point would handle, such as beaconing
    and authenticating new clients.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In wireless networks, communication takes place using frames. Within a wireless
    frame, the first two bytes belong to a component called **frame control**. Within
    this frame control frame, we have multiple fields, which have various bit sizes.
    The notable one is the `type` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `type` field contains the following categories of frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Management frames**: These are responsible for keeping the communication
    going between stations and access points. Some subtypes of these frames include
    authentication, deauthentication, association, beacon, probe request, and probe
    response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control frames**: These are responsible for data exchange between access
    points and stations. Some subtypes here include request to send, clear to send,
    and ACK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data frames**: These are the frames that carry the actual data. They have
    no subtypes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to dig deeper into the following frames, as these frames can reveal some
    key information.
  prefs: []
  type: TYPE_NORMAL
- en: Notable wireless frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Beacon frames** are the most common packets that are sent across wireless
    networks. These are sent out rather quickly, usually a couple of times per second.
    Of course, this can be controlled in various wireless access points. Beacon frames
    contain useful information, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: SSID name (unless the SSID broadcast is disabled)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac address of the access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security capabilities (WPA2 passphrase, WPA, WEP, WPA enterprise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beacon interval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel and channel width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Country
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection speeds supported by the access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 1* shows what is contained within a beacon frame. You will notice that
    the interval is 0.102400 [Seconds]. Point number 1 shows that the frame was sent
    by an AP, and since the second bit is not set, this indicates that it is not an
    ad hoc network. Point number 2 contains details about the SSID, supported data
    rates, channel width, and Country Information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b3e0c13-c2c3-49d2-b5cd-96375db5cefc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Beacon frame'
  prefs: []
  type: TYPE_NORMAL
- en: The filter applied (`wlan.fc.type_subtype==0x8`) is specific to beacon frames,
    since they are part of management frames (frame zero) and subtype 8.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deauthentication **frames are used to disassociate clients that are currently
    associated with an access point. There are a number of reasons why you would force
    a client to disassociate; for example, if you want to uncover a hidden SSID or
    you want to capture the WPA/WPA2 handshake.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2* shows a sample capture of a Deauthentication packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0a4d9fe-8f8a-4cd8-84fe-1ac8b0fd0f5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Deauthentication frame'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the reason code defined is `class 3` means that the station is
    leaving or has left the independent basic service set. This deauthentication was
    made using aireplay-ng. We will cover this tool in detail later in this chapter.
    There are a number of reason codes, and in *Table 1* I have listed the common
    reason codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Reason code** | **Description** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | No reason code | This is normal behavior |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Unspecified reason | The client is currently associated but is no longer
    authorized |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Previous authentication no longer valid | The client is associated
    but not authorized |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Deauthentication leaving | Station has been deauthenticated because
    it is leaving IBSS or ESS |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | Disassociation due to inactivity | Client session has been timed out
    |'
  prefs: []
  type: TYPE_TB
- en: '| `5` | Disassociation AP busy | The access point is currently busy and cannot
    handle the current associated clients |'
  prefs: []
  type: TYPE_TB
- en: '| `6` | `Class2` frame from non-authenticated station | Client tried to transfer
    data before authentication could take place |'
  prefs: []
  type: TYPE_TB
- en: '| `7` | `Class3` frame from non-associated station | Client tried to transfer
    data before it was associated with the access point |'
  prefs: []
  type: TYPE_TB
- en: '**Authentication **frames make up the authentication process. The amount of
    authentication frames that are exchanged varies; the **authentication transaction
    sequence number** is responsible for keeping track of the authentication process,
    and it can handle values from `1` to `65535`. The **authentication algorithm**is
    used to identify the type of authentication being used. The following sample capture
    (*Figure 3*) shows that open authentication is being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ee4d2f3-9c1b-485d-b230-de6fef2c764c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Authentication frame'
  prefs: []
  type: TYPE_NORMAL
- en: Using a value of `0` indicates that open authentication is being used. The value
    of `1` denotes that shared key authentication is used.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless security protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As wireless technologies have evolved and become widely used, so have security
    protocols to provide security on wireless technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Passwords are just half the battle in wireless security. It is just as vital
    to choose the correct level of encryption, and the right choice will determine
    whether your wireless LAN is an easily exploitable or not. Most wireless access
    points enable one of three standards for wireless encryption: **wired equivalent
    privacy** (**WEP**), or **Wi-Fi protected access** (**WPA** or **WPA2**).'
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into performing penetration tests on wireless networks. We need
    to examine the encryption standards that exist today and understand the vulnerabilities
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: WEP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WEP was created to address the issues of open networks that were susceptible
    to eavesdropping due to no encryption being used. It provided a reasonable degree
    of security back when it was created. It uses a **Rivest Cipher 4** (**RC4**)
    to encrypt traffic and provides message integrity using CRC32 checksums. RC4 is
    a symmetric cipher, which means that the same key is used for both encryption
    and decryption of data. The cipher creates a stream of bits that are XOR'd with
    plain text, resulting in encrypted data. Of course, decrypting the data can be
    done by simply performing a XOR on the encrypted data using the keystream.
  prefs: []
  type: TYPE_NORMAL
- en: WEP made use of a 24-bit **initialization vector** (**IV**). An IV is used to
    make sure that the first block of plain text data that is encrypted is random.
    This ensures that if the same plain text is encrypted, the results will be different
    ciphertexts. Due to the small size of the IV, the likelihood of key reuse is high,
    which makes cracking the encryption easily achievable.
  prefs: []
  type: TYPE_NORMAL
- en: In 2001, cybersecurity experts identified several serious flaws in WEP, leading
    to industry-wide recommendations to phase out the use of WEP in both business
    and consumer devices.
  prefs: []
  type: TYPE_NORMAL
- en: WPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on the flaws in WEP, there was an urgent need to provide more security
    for wireless devices. This was when WPA was introduced. WPA introduced two new
    link layer encryption protocols; these are **temporal key integrity protocol**
    (**TKIP**) and **counter mode with CBC-MAC** (**CCMP**).
  prefs: []
  type: TYPE_NORMAL
- en: 'WPA has two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WPA personal**: This uses a pre-shared key for authentication, which is shared
    by all peers in the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPA enterprise**: This leverages 802.1x authentication using a radius server
    for **authentication, authorization, and accounting** (**AAA**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WPA still used WEP as an encryption algorithm to support backward compatibility
    and legacy hardware. However, using TKIP, it addressed a number of security flaws
    by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 256-bit keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Per-packet key mixing by generating a unique key for each packet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic transmission of updated keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrity checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 48-bit IV size and IV sequencing to reduce replay attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi Protected Access version 2 (WPA2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPA2 was introduced as a successor to WPA. It makes use of a stronger **Advanced
    Encryption Standard** (**AES**) algorithm. AES is made up of three symmetric block
    ciphers that are 128 bits each. Encryption and decryption of the blocks can take
    place using 128-bit, 192-bit, and 256-bit keys. AES requires a lot more computing
    power, but with the advancements made with wireless devices, performance issues
    are only common on older hardware.
  prefs: []
  type: TYPE_NORMAL
- en: WPA2 uses counter mode with **Cipher Block Chaining Message Authentication Code
    Protocol** (**CCMP**). CCMP provides data confidentiality by allowing only devices
    or users who are authorized to receive data. Cipher block chaining is used to
    provide integrity of data.
  prefs: []
  type: TYPE_NORMAL
- en: WPA2 is not compatible with older hardware as it was redesigned from the ground
    up. It supports both the **personal** and **enterprise** mode that was introduced
    by WPA.
  prefs: []
  type: TYPE_NORMAL
- en: In 2017, a serious flaw was announced that affected WPA2\. It was called **KRACK**,
    which stands for **Key Reinstallation Attacks**. A key reinstallation attack happens
    when an attacker tricks the target into reinstalling an already-in-use key. This
    can be done by manipulating and replaying the cryptographic handshake messages
    of WPA2\. When this key is installed, parameters such as the nonce (incremental
    transmit packet number) and replay counter are reset to their initial value. By
    forcing nonce reuse, packets can be replayed, forged, and decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi Protected Access version 3 (WPA3)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPA3, which was announced in 2018, is designed as a successor to the widely
    used WPA2, and brings several core enhancements to enhance security protection
    and procedures across personal and corporate networks.
  prefs: []
  type: TYPE_NORMAL
- en: WPA3 introduces a different handshake process, which is called **simultaneous
    authentication of equals** (**SAE**), also known as the **Dragonfly** key exchange.
    Encryption is handled by AES-GCM, and the session key length used by WPA3 is 192
    bits for enterprise mode, and personal mode is 128 bits (192 bits is optional).
    Data integrity is handled by **Secure Hash Algorithm 2** (**SHA2**).
  prefs: []
  type: TYPE_NORMAL
- en: Even for Wi-Fi networks without passwords, WPA3 Security provides a data protection
    mechanism called **Individual Data Encryption**. This mechanism encrypts data
    packets of each device with separate keys, so other devices cannot decrypt each
    other's data.
  prefs: []
  type: TYPE_NORMAL
- en: WPA3 sounds really secure; however, there has been a vulnerability called **Dragonblood**.
    This vulnerability allows the attacker to recover the password by abusing timing
    or cache-based side channel leaks.
  prefs: []
  type: TYPE_NORMAL
- en: WPA3 is not within the scope of this book, but it is worth keeping abreast with
    the new standards and vulnerabilities that exist in them.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on WPA3, you can visit the Wi-Fi Alliance page found here: [https://www.wi-fi.org/discover-wi-fi/security](https://www.wi-fi.org/discover-wi-fi/security).
  prefs: []
  type: TYPE_NORMAL
- en: Types of wireless attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the various types of wireless attacks that exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access control attacks**: These types of attacks attempt to gain access to
    a wireless network by evading access control protections, such as MAC filters
    or `802.1x` port security. Some examples of access control attacks are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rogue access points**: These are unsecured access points that are used to
    create a back door into a trusted network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac spoofing**: This attack attempts to spoof the mac address of an already
    authorized access point or station.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ad hoc associations**: This type of attack attempts to connect directly to
    a station via ad hoc mode. This enables the security of an access point to be
    bypassed, as the station can be attacked or used as a pivot point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confidentiality attacks**: These types of attacks are aimed at intercepting
    traffic that is sent across a wireless network. Some examples of confidentiality
    attacks are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evil Twin AP**: This is a malicious access point that masquerades as a legitimate
    access point in the attempt to fool clients into authenticating to it. This can
    be used to steal credentials or perform man-in-the-middle attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fake portals**: In this attack, a fake captive portal is used in an attempt
    to fool a user into providing information such as the pre-shared key, sensitive
    information, or login details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity attacks**: These types of attacks utilize forged frames to mislead
    the recipient. They can also be used to perform a denial of service attack. Some
    examples of integrity attacks are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radius replay attacks**: Utilizing techniques such as sniffing and interception,
    request authenticators, identifiers, and server responses can be captured and
    stored. These can later be replayed for malicious purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frame injection attacks**: In this attack, wireless frames can be manipulated.
    For example, forcing a deauthentication frame to force a device to reauthenticate
    to the access point so that the handshake can be captured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication attacks**: These types of attacks are aimed at stealing authentication
    information, which can be used to access resources or services. Some examples
    of authentication attacks are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WEP/WPA/WPA2** **key cracking**: This attack entails capturing the authentication
    handshakes and performing an offline brute force to obtain the pre-shared key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Downgrade attacks**: These attacks can be used against `802.1x` by forcing
    the server to offer a weaker authentication using forged EAP packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having the right hardware is key in performing penetration tests against wireless
    networks. Not all wireless adapters enable you to switch to monitor mode or perform
    packet injection.
  prefs: []
  type: TYPE_NORMAL
- en: Monitor mode allows a wireless adapter to switch into **promiscuous** mode so
    that it can **monitor** the packets without any filtering. Many tools, such as
    `airodump-ng` and `aireplay-ng`, require a wireless adapter to be placed in monitor
    mode to operate.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless adapters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing the right wireless adapter can be tricky, especially with the many
    options that exist today. The right adapter is specific to your needs. You might
    require a small compact adapter or an adapter that you can leverage various antenna
    sizes. It all depends on what your preferences are and if it will work for you.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note with wireless adapters is that TX power and RX sensitivity
    should be taken into consideration. For example, lower sensitivity is better for
    reception but higher power is better for transmission of data. Generally, you
    will only use high-powered adapters if you are considering range.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless adapters that have an Atheros, Realtek, or Ralink chipset generally
    support monitor mode and packet injection. However, not all of them do. There
    are multiple reviews and write-ups on the internet that are updated regularly
    with the latest supported hardware. A quick search on your favorite search engine
    for keywords such as `Kali Linux compatible wireless adapters` will provide you
    with ample results.
  prefs: []
  type: TYPE_NORMAL
- en: The most common wireless adapters used are the Alfa wireless adapters. These
    are found on Amazon and other vendors, and are relatively cheap. Be careful of
    fakes, as there have been a number of fakes on the market. The wireless adapter
    that I am using is the **Alfa** **AWUSO36NH**. This card has an impressive TX
    power of 2000 mW. It is available on Amazon for $31.99 at the time of writing.
    As some networks use 2.4 GHz and 5 GHz frequencies, you may want a wireless adapter
    that can work across both frequencies. The **Panda PAU09** works well with Kali
    linux and supports both the 2.4 GHz and the 5 GHz frequency; at the time of writing,
    this adapter is available on Amazon for $39.99.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that some wireless cards will work straight out of the
    box with Kali Linux. Some will require drivers to be compiled. Sometimes, minor
    revisions of the same card model will produce different results. Ensure that you
    research your wireless card thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: The primary difference between 2.4 GHz and 5 GHz frequencies is the range. 2.4
    GHz is able to reach a much further distance compared to 5 GHz. Alternatively,
    2.4 GHz suffers from a lot more interference than 5 GHz. The number of overlapping
    channels are a lot more in 2.4 GHz, which has three non-overlapping channels,
    while 5 GHz has twenty-three non-overlapping channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a compatible wireless adapter, you can put it into monitor mode
    by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal window in Kali Linux and issue the `iwconfig` command. Note
    the interface name of your wireless card (*Figure 4*). In the following example,
    the wireless adapter interface name is `wlan0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed4ead75-d972-488e-b6b4-cb50673fc375.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Using iwconfig to identify the wireless adapter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before changing the mode, it is a good practice to shut down the interface.
    This can be done using the `ifconfig wlan0 down` command. To change the mode from
    managed to monitor, the `iwconfig wlan0 mode monitor` command is used. Lastly,
    the interface is brought back online using the `ifconfig wlan0 up` command as
    shown in *Figure 5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/faf78388-c2ee-4ac4-8b10-acf751f8f3dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Putting the wireless adapter in monitor mode'
  prefs: []
  type: TYPE_NORMAL
- en: Now the wireless adapter is operating in monitor mode (`Mode:Monitor`). To change
    the interface back to monitor mode, follow *step 2* from before, but use the `iwconfig
    wlan0 mode managed`.
  prefs: []
  type: TYPE_NORMAL
- en: There is a much quicker way of enabling monitor mode by using `airmon-ng`; this
    will be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using an Alfa wireless card which supports a transmit power rating
    of 1000 mW, depending on your location, your `Tx-Power` might be set to 20 dBm
    (as per *Figure 6*). To enable the cards full capability, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down the interface using the `ifconfig wlan0 down` command. `Wlan0` is
    the interface name; in your environment it might be different.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the region to US using the `iw reg set US` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bring the interface online using the `ifconfig wlan0 up` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the power rating using the `iwconfig wlan0` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d128a900-7072-4022-aa8b-058349940ea6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Increasing Alfa TX power'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the power rating has increased now to `30 dBm` (*Figure 6*). Every `10
    dBm` increases the power in mW 10 times.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless attack tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali Linux includes a number of built-in tools that can be used for attacking
    wireless networks. We will explore the various tools and how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that as you progress through this chapter, you should perform the
    attacks on your own wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Wifiphisher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wifiphisher is an excellent rogue access point tool that can be used for conducting
    penetration tests or Wi-Fi security testing. This tool works by creating a man-in-the-middle
    attack against wireless clients that are performing associations to access points.
    Wifiphisher can be customized by using third-party login pages, or you can create
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: Wifiphisher is installed by default in Kali Linux. It can be run using the `wifiphisher`
    command. Note that `wifiphisher` requires `roguehostapd`, however, you can use
    `hostapd`, which is installed in Kali. To use `hostapd`, you can run the `wifiphisher
    --force-hostapd` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a simple phishing campaign using the built-in phishing pages
    of `wifiphisher`. Remember to have your wireless adapter in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From a Kali Terminal window, run the `wifiphisher --force-hostapd` command.
    You will be presented with the main screen of `wifiphisher` (*Figure 7*). Here,
    you will be presented with a list of discovered wireless networks. Select the
    one that you want to create a rogue access point of:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f97fe321-0577-4fff-81c4-77924d4faeeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Wifiphisher wireless network selection'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the network is selected, you will be presented with a selection of available
    phishing scenarios. I have selected the standard `Firmware Upgrade Page` as shown
    in *Figure 8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6be66c70-62a5-4718-8ac9-5fe4e91ea850.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Phishing scenarios of wifiphisher'
  prefs: []
  type: TYPE_NORMAL
- en: You can build your own phishing scenarios, and leverage pre-built custom pages
    that are available on the internet. These pages need to be stored in the `wifiphisher/data/phishingpages`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected the page, `wifiphisher` will automatically create the
    rogue access point and start to deauthenticate any connected clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user tries to connect to the wireless network again, they will be
    presented with the phishing page you have selected. In my case, it is the firmware
    upgrade page as shown in *Figure 9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c545c84-c63d-4543-8276-d57c3f2dcf1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Firmware upgrade phishing page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the pre-shared key is provided, the page begins to `upgrade the firmware`,
    but of course, nothing is actually happening. However, on the Wifiphisher Terminal,
    we have the captured credentials in clear text as shown in *Figure 10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c29a3e7f-9bb5-4a32-8a8b-592265b03d16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Captured PSK'
  prefs: []
  type: TYPE_NORMAL
- en: When using this tool in a penetration test, you need to make the phishing page
    convincing. Some end users are tech-savvy and would not easily fall for a simple
    phishing page. You also need to consider that in an enterprise Wi-Fi authentication
    uses their domain credentials; in this case, you need to create a crafty phishing
    page that will resemble an enterprise portal.
  prefs: []
  type: TYPE_NORMAL
- en: More information on creating custom phishing pages can be found here: [https://wifiphisher.org/docs.html](https://wifiphisher.org/docs.html).
  prefs: []
  type: TYPE_NORMAL
- en: Aircrack-ng suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aircrack-ng is a powerful set of tools that comes pre-installed with Kali Linux.
    The suite includes tools that address the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring**: Performs packet captures and provides capabilities to export
    data to text files for use in third-party tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attacking**: Used to perform replay attacks, frame attacks such as deauthentication,
    and more, using packet injection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: Views Wi-Fi adapter capabilities, performs captures, and packet
    injection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cracking**: Performs attacks against WEP, WPA, and WPA2 pre-shared keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive into the various tools and how these can be used for penetration
    testing. Keep in mind that your wireless adapter must be in monitor mode for the
    tools to work. We will begin with using `airmon-ng` to enable monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: Airmon-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Airmon-ng is a script that is used for enabling and disabling monitor mode on
    your wireless adapter. Your current wireless interface status will be displayed
    by running `airmon-ng` without any parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Airmon-ng is simple and straightforward. Use the following steps to enable
    monitor mode on the wireless adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window and view the name of your wireless adapter using the
    `airmon-ng` command. This command will display the current wireless adapter, its
    interface name, driver, and chipset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To put the adapter into monitor mode you can use the `airmon-ng start [interface
    name]` command. For example, in *Figure 11*, my adapter has the interface name
    of `wlan0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ba2cc42-89e3-469b-822d-7f6e4c67d497.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Using airmon-ng to enable monitor mode'
  prefs: []
  type: TYPE_NORMAL
- en: An `airmon-ng` can be used to check if there are any processes that will interfere
    with the tools of the `aircrack-ng` suite. The command to check this is `airmon-ng
    check`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 12,* we see there are a few processes that can cause problems with
    the `aircrack-ng` suite of tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae45beff-a984-483f-8ca9-42da6ff809bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Identifying problematic processes'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have the ability to let `airmon-ng` kill any process that will interface
    by using this command: `airmon-ng check kill`.'
  prefs: []
  type: TYPE_NORMAL
- en: To put your wireless adapter back into `managed` mode, you can use this command: `airmon-ng
    stop [interface name]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An `airmon-ng` enables the ability to set your adapter in monitor mode on a
    specific channel. This can be done using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This comes in handy when there are a lot of wireless networks and you want to
    focus on a specific channel which your target network operates on.
  prefs: []
  type: TYPE_NORMAL
- en: Airodump-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Airodump-ng is used to perform a packet capture of raw 802.11 frames. This tool
    can be used to collect WPA handshakes or weak WEP initialization vectors for use
    with Aircrack-ng. It has the functionality to log GPS coordinates of the detected
    wireless networks, which can later be imported into online Wi-Fi mapping tools.
  prefs: []
  type: TYPE_NORMAL
- en: The command syntax for `airodump-ng` is `airodump-ng [options][interface name]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a lot of options available for `airodump-ng`. Just issuing the `airodump-ng`
    command will display the full list. Some of the notable options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-w`: This is used to write the output to a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: This is used to specify the channel to capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-bssid`: This is used to define the target BSSID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sniffing for wireless networks using `airodump-ng` is done using the `airodump-ng [interface
    name]` command, without any options. The output displayed will show the current
    wireless networks in range including the stations that are connected as shown
    in *Figure 13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44f55a6c-1e0f-4dae-8a25-cfb9ab21da70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Airodump-ng output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not be overwhelmed with the information displayed, as making sense of it
    is simple. Airodump-ng has two separate sections. The top portion displays information
    about the discovered networks. The fields are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `BSSID`  | This is the MAC address of the access point. |'
  prefs: []
  type: TYPE_TB
- en: '| `PWR`  | This is the signal level. The closer you are to the access point,
    the higher the signal level rating. Some might show up as `-1`, meaning that you
    are too far, or there is a driver issue with detecting the signal level. |'
  prefs: []
  type: TYPE_TB
- en: '| `Beacons`  | Number of beacon frames sent by the AP. |'
  prefs: []
  type: TYPE_TB
- en: '| `#Data`  | Number of captured data packets. If WEP is being used, it will
    be the unique IV count. |'
  prefs: []
  type: TYPE_TB
- en: '| `#/s` | Number of data packets captured over 10-second periods. |'
  prefs: []
  type: TYPE_TB
- en: '| `CH` | This is the channel number, which is derived from the beacon frames.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `MB` | Maximum speed supported by the AP. |'
  prefs: []
  type: TYPE_TB
- en: '| `ENC`  | Encryption algorithm in use. |'
  prefs: []
  type: TYPE_TB
- en: '| `Cipher` | Cipher that has been detected. |'
  prefs: []
  type: TYPE_TB
- en: '| `Auth` | Authentication protocol that is in use. |'
  prefs: []
  type: TYPE_TB
- en: '| `ESSID` | The SSID of the network. If the SSID is hidden, then this value
    will be blank; however, `airodump-ng` will try to recover the SSID from probe
    and association responses. |'
  prefs: []
  type: TYPE_TB
- en: The bottom section displays the MAC address of the detected access points and
    the clients (stations) that are connected to the access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'For demo purposes, I am targeting the Hackme wireless network. I will tell
    `airodump-ng` to focus on that access point and channel, and I want to write the
    captures to disk. This can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, the `-c 6` denotes the channel number, `--bssid` denotes the
    access point MAC address, `-w` denotes the filename for the captures, and `interface
    name` is my wireless adapter, which is in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a504b269-1f5d-41de-a2ce-1be79bea675b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Customizing airodump-ng for a specific network'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the output in *Figure 14*, where a WPA handshake has been captured. We
    will cover cracking that handshake in the *Aircrack-ng* section later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Aireplay-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aireplay-ng is primarily used to inject frames and to generate traffic for later
    use with `aircrack-ng`. One of the common attacks is the deauthentication attack;
    the purpose of this attack is to capture handshake data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command syntax for `aireplay-ng` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An `aireplay-ng` has a wealth of options, where for each of the various attack
    methods, the attack methods can be defined by name or number. For example, the
    `deauthentication attack is attack number 0` or `--deauth` can be used. An `aireplay-ng`
    supports the following attack methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deauthentication**: The purpose of this attack is to disassociate the clients
    that are connected to an access point. This forces them to reassociate and enables
    you to capture the handshake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fake** **authentication**: This attack allows you to associate with an access
    point. It is useful when you need to leverage various attacks and there are no
    stations associated with the access point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive packet replay**: This attack is used when you want to choose
    a specific packet to replay to the access point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ARP request replay attack**: This attack is effective in generating new IVs.
    It works by retransmitting ARP packets back to the access point, which forces
    the access point to repeat the ARP packet with a new IV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KoreK** **chopchop** **attack**: This attack is able to decrypt a WEP data
    packet without having the key. It does not recover the WEP key but reveals it
    in plain text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragmentation attack**: This attack is used to obtain a **pseudo-random generation
    algorithm** (**PRGA**). This PRGA can be used with `packetforge-ng` to generate
    packets for various other injection attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cafe-latte attack**: This attack enables you to obtain a WEP key from a client
    station instead of the access point. It manipulates ARP packets which get sent
    to the client, who in turn sends it back, and it is captured and analyzed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client-oriented fragmentation attack**: This extends the cafe-latte attack
    by using any packets and not just an ARP packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPA migration mode**: This attack is specific to bugs found in Cisco access
    points that enabled both WPA and WEP clients to associate to an access point using
    the same SSID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Injection test**: This test determines if your wireless adapter can successfully
    inject packets to an access point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each attack can be defined using a number. For example, the deauthentication
    attack can be defined as `-0`. You will notice later in this chapter, will use
    numbers for the various attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use `aireplay-ng` to perform a deauthentication attack as shown in *Figure
    15 *using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, `-0 10` is used to specify a deauthentication attack and only
    `10` packets will be sent, `-a`is used to define the MAC address of the access
    point, `-c` is used to define the client mac address, and the `interface name`
    is the wireless adapter, which is in monitor mode. Sometimes, it might take a
    few more packets to cause the station to deauthenticate. You can use the `-0 0`
    option to send an unlimited number of packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/003f1c81-2205-49e9-a0d1-ab54d1295157.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Deauthentication attack'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ACKs` represent the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This provides you with a good indication whether the packets were received.
    Higher values are better.
  prefs: []
  type: TYPE_NORMAL
- en: Airgeddon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving away from multiple tools within the `aircrack-ng` suite, let's now focus
    on a tool that has multiple capabilities built into it—and is simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Airgeddon (developed by `v1s1t0r1sh3r3`) is a tool that is written in `bash`
    for multiple attacks against wireless networks. Some of the features of Airgeddon
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to manage the interface mode (monitor and managed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for 2.4 GHz and 5 GHz bands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assisted WPA/WPA2 handshake capturing, with cleaning and optimizing the files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline password cracking for WPA/WPA2 enterprise and personal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evil twin attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WPS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Airgeddon is not installed by default in Kali Linux. To install it, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Airgeddon can be done by cloning the repository. Use the following
    command to clone Airgeddon in Kali Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve cloned Airgeddon, use the following command to run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When Airgeddon starts up, it will perform a series of checks to ensure that
    you have all the required tools. If it detects that tools are missing, it will
    highlight these and including the package name as shown in *Figure 16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0822180-f420-4ddf-9a32-be0d2ce86271.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Airgeddon optional tools check'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 16*, there are some tools missing. Take note of the package name.
    To install the missing tools, we can simply use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After the initial checks are completed, Airgeddon will prompt for the network
    card that will be used as shown in *Figure 17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/50af05a0-3115-4003-8e78-fcfcf86aed1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Interface selection'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have selected your interface, you will be presented with the main
    menu of Airgeddon as shown in *Figure 18*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6c39546-25bf-442b-8482-3ce0b1a52ed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: Main menu of Airgeddon'
  prefs: []
  type: TYPE_NORMAL
- en: The main menu presents a number of options. In the first section, we have the
    ability to put the selected interface into monitor or managed mode. The next section
    defines the various attacks that Airgeddon is capable of performing. Finally,
    the last section is for options and credits.
  prefs: []
  type: TYPE_NORMAL
- en: The Evil Twin attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will perform an Evil Twin attack using Airgeddon. An Evil Twin attack
    is a malicious access point that is set up to obtain sensitive information, obtain
    credentials, or drop malicious payloads. In our example, we will create an Evil
    Twin that is set up to steal the pre-shared key of a wireless network using a
    captive portal:'
  prefs: []
  type: TYPE_NORMAL
- en: You should only perform this attack against networks you are authorized for.
    For learning purposes, you should perform this attack against your own wireless
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start up Airgeddon using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Select your wireless adapter, and put it into monitor mode using the main menu
    of Airgeddon. Next, select option `7`, the Evil Twin attacks menu (*Figure 19*).
    Once the menu has loaded, select option `9`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/200decdf-0cf6-4d3c-8593-454aacea43ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: The Evil Twin attacks menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step that Airgeddon will perform is exploring for wireless networks.
    It will automatically set the filters for WPA/WPA2, and the scan will be started
    in a new window as shown in *Figure 20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae7cf8a3-e42d-43d6-b7a1-33eac642d702.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Airgeddon exploring for targets'
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave this window open for a while so that you can obtain an accurate reading
    of the wireless network. Once you close the window, Airgeddon will prompt you
    to select the network you want to attack (*Figure 21*). Note that the `*` denotes
    it is an active network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a946f9cf-00fc-4fdd-b1a5-f533f4f07efc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Airgeddon network selection'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you select the network you want to attack, you will be presented with
    the deauth attack menu as shown in *Figure 22*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49fb2635-90d2-426a-a893-f7f25a9fa0cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Deauth attack menu'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few options to choose here; you will need to find the best match
    for the network you are attacking. Generally, the `mdk4` attack is very effective.
  prefs: []
  type: TYPE_NORMAL
- en: Once you select the deauth mode, Airgeddon will prompt you for some additional
    settings, such as DOS pursuit mode and enabling internet access on the interface.
    For simplicity, we will select `NO` for these. The next batch of options is related
    to spoofing your mac addresses, and defining a capture file if you already have
    this. If you select `NO` for the capture file, you can define the value in seconds
    to wait for the WPA proposal. Depending on how active the network is, you will
    need to increase this value. If you don't, and use the default, you might not
    obtain the WPA handshake.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you complete the options, two new windows will open. Once the WPA handshake
    is captured, Airgeddon will notify you to move on to the next step, which is defining
    the language for the captive portal. Once the language is defined, Airgeddon will
    launch multiple windows (*Figure 23*) to perform the Evil Twin attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/031b5e24-ce0b-40b8-a82c-a957c6ef8305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: Airgeddon Evil Twin attack'
  prefs: []
  type: TYPE_NORMAL
- en: The windows that were spawned relate to DNS (for intercepting DNS requests),
    DHCP (for providing the stations a valid network address in order to communicate
    with the fake access point), fake access point (the fake access point configuration),
    web server (used to host the captive portal) and finally, the information window.
    All of these are needed in order to host a fake captive portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when the station connects to the access point, it will be presented with
    a captive portal. Once the pre-shared key is entered, it will be presented in
    clear text (*Figure 24*). The captive portal can be tweaked as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b2cb785-98ac-4172-a802-eaa6265a97e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Pre-shared key captured'
  prefs: []
  type: TYPE_NORMAL
- en: Airgeddon is really simple to use. It has a wealth of attacks that it is capable
    of performing. As you progress, you will likely find more tools, but knowing how
    to use the tools in `aircrack-ng` is still beneficial, as you may have noticed
    some of the attacks within Airgeddon still leverage parts of the `aircrack-ng`
    suite.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WEP, WPA, and WPA2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aircrack-ng is a program that enables you to crack WEP, WPA, and WPA2 pre-shared
    keys. It supports a number of methods for password cracking; these methods are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pyshkin, Tews, Weinmann** (**PTW**), which uses ARP packets to crack WEP
    keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FMS/KoreK uses statistical attacks coupled with brute force techniques to crack
    WEP keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dictionary method leverages dictionary files, which can be used to brute
    force WEP, WPA/WPA2 keys. Note that for WPA/WPA2 cracking, this is the only method
    used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The command syntax for `aircrack-ng` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are a bunch of options available to use with `aircrack-ng`. These can
    be viewed by running the `aircrack-ng` command without anything else defined.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WPA/WPA2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at an example of using `aircrack-ng` to crack WPA2\. It's
    important to note that the only possible way of cracking WPA2 is using a dictionary
    file with brute force techniques. With all brute force attempts, success is dependant
    on the quality of your wordlist. Remember that larger wordlists will require a
    lot more time and processing power.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 25*, you will notice that a WPA handshake was captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6de235e2-cb05-43a5-8cfc-4b3435e9c04a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: WPA handshake capture'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cracking this handshake using `aircrack-ng` is done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-w` switch denotes the location of a wordlist that will be used. You can
    define the capture file by name, or you can use `*.cap` if you have multiple capture
    files. Using the command, observe the results as shown in *Figure 26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d9df36f-2350-4f18-bf37-08f22f1e24a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: WPA key cracked using aircrack-ng'
  prefs: []
  type: TYPE_NORMAL
- en: The process of cracking a WPA2 handshake is the exact same as the process for
    WPA.
  prefs: []
  type: TYPE_NORMAL
- en: WPA/WPA2 supports a number of authentication methods apart from pre-shared keys.
    Aircrack-ng can only crack WPA networks that use pre-shared keys. If `airodump-ng`
    shows the network having something other than PSK, do not bother cracking it as
    it will waste your time.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WEP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple ways to crack WEP keys. In the previous section, we discussed
    attacks such as fake authentication, caffe-latte attacks, PTW attacks, and so
    forth.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will perform a few attacks to crack a WEP key. This attack requires
    at least one station connected to the access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my setup, I have used my host machine as a connected client. If the router
    you are using to test this attack supports WEP, please set up WEP on the router
    prior to performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that your wireless adapter is in monitor mode. Using `airodump-ng`,
    we will specify the wireless network that is using WEP and begin capturing the
    packets. In my setup, the wireless network is called `Hackme`*. *Using the command
    defined in the `airodump-ng` section earlier, I am tuning `airodump` to capture
    packets specifically for the wireless network using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To crack a 64-bit WEP key requires a lot of IVs, around 250,000 at least. Leaving
    the capture idle, it will take a bit of time to obtain a sufficient amount of
    IVs. In order to speed up the process, we will capture and replay packets back
    to the access point in order to generate unique IVs. Before we do this, we need
    to authenticate to the access point, or else any packets we send will be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: 'To authenticate to the access point, we will perform a fake authentication
    attack (*Figure 27*). This attack works by convincing the access point that we
    know the WEP key, but we do not send it. To perform this attack, we use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, we are defining the attack using `-1`; `0` is the retransmission
    time, `-e` denotes the SSID, `-a`is the MAC address of the access point that we
    want to authenticate to, `-h` is the MAC address of the network card, and `interface
    name` is the wireless `interface name`, which is in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43d8c861-0675-4f61-baa3-4b00fee3f0cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: Performing a fake authentication attack'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the authentication was successful; we can begin sending packets
    to the access point. The access point will not accept traffic unless the WEP key
    is sent first. Since we did not send the key (because we don't know it as yet)
    we will need to capture packets from clients who are authenticated, and replay
    them. To do this, we will use the ARP request replay attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leveraging `aireplay-ng`, we will tell it to capture and re-broadcast any ARP
    packets it received. The command we will use is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command (*Figure 28*), we define the attack using `-3`; `-b` is used
    to define the access point MAC address, `-h` is used to define the MAC address
    of the wireless adapter that is in monitor mode, and `interface name` is the interface
    name of the wireless adapter, which is in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8485d682-b95e-4748-807c-3c8a89df910b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Performing an ARP request replay attack'
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the warning. If you define the wrong MAC address, `aireplay-ng`
    will alert you.
  prefs: []
  type: TYPE_NORMAL
- en: As traffic traverses from the authenticated client to the access point, and
    ARP requests are captured, you will notice the ARP request count increasing. You
    might receive a message stating that you got a `deauth/disassoc` packet. If this
    happens, ensure that you re-run the fake authentication attack again (*step 2*);you
    might have to do this a number of times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have received enough IVs, as shown in *Figure 29 *under the `#Data`
    column, you are ready to crack the key using `aircrack-ng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9625617-44de-41f6-a421-815de46dc291.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29: Large number of IVs received as depicted by the #Data column'
  prefs: []
  type: TYPE_NORMAL
- en: 'To crack the WEP key, the following command is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we define the access points MAC address using the `-b` option,
    then we define the capture name, which can also be defined as `*.cap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have capture enough IVs, the key will be cracked as shown in *F**igure
    30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/926fb949-de2f-4a92-801f-208793d3f03c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 30: WEP key cracked'
  prefs: []
  type: TYPE_NORMAL
- en: Remember to remove the colons, `:`, to obtain the actual key.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between cracking WPA/WPA2 and WEP is the approach. WEP uses statistical
    methods, which can be used to speed up the cracking process, but in WPA/WPA2,
    the only option that exists is brute force.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about the various wireless attack methods.
    We have identified a key component of a wireless network, wireless frames, and
    the various information that can be obtained from some of these frames. You have
    learned which network cards are capable of performing packet injection, intercepting
    wireless packets, and how to increase power ratings of an Alfa wireless card.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the various encryption methods that exist in wireless networks,
    and the vulnerabilities of them. You have gained knowledge about various attack
    tools, and how to perform different types of attacks. Lastly, you have learned
    how to crack WEP and WPA/WPA2 pre-shared keys.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](aa2258b0-f6da-4c68-a2e0-d9ef6d53d9ed.xhtml), *Moving Laterally
    and Escalating Your Privileges*, we will look at how to move around laterally
    within a network, with the objective of finding a high-privileged account. You
    will also learn how to escalate privileges within a network.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name the three types of wireless frames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of information can be obtained from a beacon frame?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is WPA2 more secure than WPA?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name four types of wireless attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three wireless attack tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
