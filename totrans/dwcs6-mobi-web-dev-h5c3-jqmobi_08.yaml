- en: Chapter 8. Enhancing Mobile Sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.html "Chapter 7. Creating Mobile Pages with jQuery Mobile"),
    *Creating Mobile Pages with jQuery Mobile*, we walked through the basic steps
    required to build a jQuery Mobile site in Dreamweaver. In the process, we focused
    on adding page-elements to a jQuery Mobile HTML page, and building listviews which
    links to those pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In doing that, we covered the bulk of what is required to build a functional
    jQuery Mobile site. You can browse the Web with a mobile device and find many
    professional-level sites that rely simply on jQuery Mobile page elements and listviews.
    In fact, it might be worthwhile to whip out your closest mobile device and browse
    a bit. You''ll appreciate how essential basic listviews are to jQuery Mobile sites—similar
    to the one shown in the following screenshot for the San Francisco Chronicle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing Mobile Sites](img/4742_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, there's more to mobile page design than just listviews! There are alternate
    ways to provide page content in a mobile device. You can design pages with grids
    (columns). And you can employ expanding blocks that allow users to expand or contract
    vertically to present content.
  prefs: []
  type: TYPE_NORMAL
- en: If you do a bit more mobile browsing, you'll find sites that have some form
    of expandable/collapsible elements. For example, Google News uses expandable elements
    to show (or, by default, hide) **More sources** for news stories.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing Mobile Sites](img/4742_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, there is the challenge of building really inviting and accessible
    forms for mobile devices that do not drive the users nuts by forcing them to attempt
    to click on a tiny checkbox or radio button with their fingernails, but instead
    provide nice, big form elements that are easy to tap in a smart phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll address and solve all these challenges in this chapter; the following
    are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting layout grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing mobile pages with collapsible blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding jQuery form objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a web-friendly site with collapsible blocks and a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a layout grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Columns play a diminished role in pages designed for mobile devices, compared
    to pages designed for full-sized viewports.
  prefs: []
  type: TYPE_NORMAL
- en: If you allowed lines of text to flow across the entire width of a 960-pixel
    page in a full-sized browser, the text would be hard to read. For that reason,
    and others, two or three column layouts are generally the best way to make content
    inviting and accessible in a full-sized browsing environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, mobile viewports are different: there isn''t much width in the viewport
    of a mobile phone, and even tablets have a narrower screen than laptops. Nevertheless,
    there are plenty of situations where it is useful to design page content in columns
    in mobile-friendly pages. When that is appropriate, the tool is jQuery grids.
    Grids allow you to easily build columns into jQuery Mobile page elements, as shown
    in the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting a layout grid](img/4742_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tables, div tags, and grids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For eons, or at least several years, tables were a staple of web design page
    layout technique. Creative designers adapted something that was intended to present
    rows and columns of data to lay out content on web pages.
  prefs: []
  type: TYPE_NORMAL
- en: We are past that era now. Instead, full-sized web pages are designed with `div`
    tags, something we explored in the first chapter, particularly in the *Using ID
    and class div styles for Layout* section. Tables are still around; older websites
    that were designed with tables are still online. Today, tables have been superseded
    by ID and class `div` tag styles because the latter is a much more powerful and
    flexible way to design pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what about *using* tables for mobile page layout? Well, that technique
    is supported within jQuery Mobile. But we don''t use tables for page layout in
    jQuery pages for the same reasons we don''t use them in full-sized page design:
    tables are clunky, hard to apply global styles to, hard to update, and don''t
    support a lot of the attributes that `div` containers support. That said, table
    design enthusiasts take note: you *can* design page layouts with tables in jQuery
    Mobile pages.'
  prefs: []
  type: TYPE_NORMAL
- en: Can we use the good ol' `<div>` tags that served us so well in HTML to lay out
    page content in columns? Yes. But we have to do that in a special way that enables
    the formatting, animation, and interactivity that is so valuable in jQuery Mobile.
    I'll walk you through how that works in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: The most flexible, standard way to design column layouts within a jQuery Mobile
    page is grids. The standard jQuery Mobile CSS file comes with a set of defined
    class styles called `ui-block` and `ui-grid`. Moreover, there are two sets of
    these styles, one for two-column layouts, and one for three-column layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Dreamweaver's jQuery Mobile widget for a layout grid does a very complete job
    of generating a wide variety of grids, with definable numbers of columns and rows.
    Remember, as you generate such grids, that you are designing for a relatively
    narrow viewport of one kind or another, and will want to be restrained in how
    many columns (and rows) you generate.
  prefs: []
  type: TYPE_NORMAL
- en: But as you are vigilant from a design standpoint, you can relax on the technical
    front. The Layout Grid widget in Dreamweaver strings together fairly complex combinations
    of the 2-column and 3-column grids to create grids of four, five, six, and more
    columns if you choose to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Generating grids in Dreamweaver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To generate a layout grid in a jQuery Mobile page, make sure your insertion
    point is in the `content` div data-role. An easy way to do that is to select the
    text content in the code that is generated when you create a jQuery Mobile "page",
    and replace it with the layout grid, or, to place your cursor after the "content"
    placeholder text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, navigate to **Insert** | **jQuery Mobile** | **Layout Grid**. The **jQuery
    Mobile Layout Grid** dialog opens. Select a value for **Rows** and **Columns**,
    and click on **OK** to generate the layout grid, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating grids in Dreamweaver](img/4742_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining styles for layout grids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery Mobile layout grid uses two class styles—`.ui-grid-a` for two-column
    grids, and `.ui-grid-b` for three-column grids. Dreamweaver, as noted, will generate
    HTML from the **jQuery Mobile Layout Grid** dialog to string together combinations
    of these two grids to create grids of more than three columns. In addition, Dreamweaver
    generates `.ui-grid` class styles to define specific block formatting.
  prefs: []
  type: TYPE_NORMAL
- en: The point? By editing the properties of `.ui-grid` and `.ui-block` class styles,
    you can define the appearance of elements of layout grids.
  prefs: []
  type: TYPE_NORMAL
- en: As you do that, avoid editing the widths of the grids or blocks, or the margins,
    padding or border dimensions. Changing those properties will destroy the generated
    layout. But you can edit background colors and images.
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through how this works.
  prefs: []
  type: TYPE_NORMAL
- en: The `.ui-grid-a` class style (that defines a two-column grid) can be overridden
    by a local grid class style. But that doesn't open up much formatting freedom
    since the grid itself only provides the frame that holds the two blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the look of the left block (`.ui-block-a`), follow the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New CSS Styles Rule** icon at the bottom of the **CSS Styles**
    panel. The **New CSS Rule** dialog box opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Selector Type** field, select **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Selector Name** field, enter `.ui-block-a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Rule Definition** box, select **This Document Only**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the dialog and open the **CSS Rule Definition** dialog
    for `.ui-block-a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **background-color** field, select a background color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the box category, enter a height of `200px`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to define this local style, and examine the effect in **Live**
    view, and examine the style rules in the **CSS Styles** panel.![Defining styles
    for layout grids](img/4742_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's reflect on what happened and why. Many of the attributes of the `.ui-block-a`
    class style, that defines how left-side blocks within a grid appear, are fixed
    as part of the universal CSS style file that makes jQuery Mobile tick. We linked
    to that CSS file when we generated a new jQuery Mobile page in Dreamweaver.
  prefs: []
  type: TYPE_NORMAL
- en: But some of the attributes of a `.ui-block-a` class style are not fixed, and
    we can edit them in a local stylesheet that applies only to our HTML page. `background-color`
    and `height` are two attributes we can edit, and provide a way to customize the
    look of our grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, of course, we can apply the same technique to the `.ui-block-b` class
    style that defines how right-side blocks within a grid appear, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining styles for layout grids](img/4742_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How useful are formatted grids and blocks? They are increasingly useful because
    more and more mobile designers are using jQuery Mobile to create multicolumn layouts
    for larger and medium-sized tablets. Blocks and grids provide the most flexible,
    accessible tool for column layout in jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Designing Mobile Pages with collapsible blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery Mobile Pages, as you saw in the previous chapter ([Chapter 7](ch07.html
    "Chapter 7. Creating Mobile Pages with jQuery Mobile"), *Creating Mobile Pages
    with jQuery Mobile*), essentially create the sense of navigating from page to
    page while relying on JavaScript to actually display and hide content. That is
    the technique used in the sample jQuery Mobile pages generated in Dreamweaver.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expandable blocks operate on a similar principle—they show and hide content
    depending on a visitor''s actions. However, with expandable panels, this takes
    place through sections of the page appearing to expand or shrink, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing Mobile Pages with collapsible blocks](img/4742_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building a collapsible block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like other jQuery Mobile objects, collapsible panels require the framework of
    a jQuery Mobile page. So, the first step in implementing them is to create a jQuery
    Mobile page. This is done by navigating to **Insert** | **jQuery Mobile** | **Page**.
    We explored the options for generating jQuery Mobile pages in Dreamweaver a bit
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have generated a jQuery Mobile page, with all the attendant CSS and
    JavaScript files that make that work, you can define collapsible panels. Do that
    by setting your insertion point (this is most easily done in the code side of
    **Split** view, with **Live** view turned on).
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Insert** | **jQuery Mobile** | **Collapsible Block**. No dialog
    appears, Dreamweaver generates HTML code for a set of three collapsible sections
    within the block.
  prefs: []
  type: TYPE_NORMAL
- en: After our experience with starter pages in the previous chapter, and layout
    grids in this chapter, and with your background in HTML5 and CSS, you've already
    conceptualized how we will customize the look and content of the collapsible block.
    We can change the formatting through a combination of using the jQuery Mobile
    data-theme sets and customized CSS styles. Moreover, we can change the content
    by editing the HTML, including by copying and pasting collapsible blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the initial block state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The entire set of collapsible elements is defined by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In between the opening and closing `<div>` tags for a collapsible set are individual
    expandable blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or blocks that are expanded by default when the page opens, defined with this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: By default, the first of the three expandable sections is expanded when the
    page opens, and the other two are collapsed. Adding the `data-collapsed="true"`
    parameter to the initially opened panel changes it to collapsed when the page
    opens.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the initial block state](img/4742_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, conversely removing `data-collapsed="true"` from a panel changes it
    to display expanded when the page opens.
  prefs: []
  type: TYPE_NORMAL
- en: Changing block data-themes and styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can add a `data-theme` parameter to any data block. For example, changing
    `<div data-role="collapsible">` to `<div data-role="collapsible" data-theme="e">`
    applies data-theme `e` (a yellow and red color scheme) to that block, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing block data-themes and styles](img/4742_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, there are rather severe limits to what you can do with the default
    set of theme color schemes. Not to worry, in the next chapter, we'll explore customizing
    themes.
  prefs: []
  type: TYPE_NORMAL
- en: CSS styles associated with the collapsible panels can be customized in the **CSS
    Styles** panel. These styles generally start with `.ul-collapsible`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.ui-collapsible-contain` style, for example, controls many of the properties
    of the content of an expanded block, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing block data-themes and styles](img/4742_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be cautious in changing dimensions of the `.ul-collapsible` class styles. Avoid
    changing padding, margins, and borders, as messing with these parameters might
    wreck the collapsible columns. You can customize fonts, colors, font sizes, background
    colors, and other properties. And, again, we'll explore a whole world of themes
    customization in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Editing collapsible block HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on your inclinations, you can edit the content of collapsible blocks
    either in Design view, with Live view turned off, or in Live view, by editing
    the content on the Code side of Split view. In either case, you just add HTML
    tags (such as headings, paragraph tags, ordered or unordered lists, and so on),
    and text, images, and media.
  prefs: []
  type: TYPE_NORMAL
- en: If you edit content in the **Code** side of **Split** view, click on the **Refresh**
    button in the **Document** toolbar periodically to update the **Design** side
    of the view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing collapsible block HTML](img/4742_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage of the game, you''ve figured out on your own how to add a collapsible
    block to a set: just copy, paste, and edit an existing block.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing collapsible block HTML](img/4742_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since you asked (I read your mind), yes, you can embed collapsible blocks within
    a collapsible block. But the point, remember, is to keep mobile page layouts fairly
    simple, so, as the saying goes, when organizing content for mobile, less is more.
  prefs: []
  type: TYPE_NORMAL
- en: Adding jQuery form objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The experience of filling out a form in a mobile device environment is substantially
    different than filling out a form on a laptop or desktop. There is no mouse, or
    even (often) a *Tab* key to navigate between form fields. Big fingers and tiny
    options in pop-up menus make for a bad match.
  prefs: []
  type: TYPE_NORMAL
- en: 'A form that might work fine in a full-sized browser may well be terribly uninviting
    and inconvenient in a mobile device. Take Apple''s store locator (shown in the
    following screenshot) for example, it is poorly designed for mobile users, requiring
    mobile users to invoke their frustrating keyboards to enter a zip code into a
    tiny text field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding jQuery form objects](img/4742_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Part of the solution to that challenge is that mobile devices often convert
    form fields to more accessible elements. For example, options in a select menu
    might display much larger when tapped, making it easier to make a selection. The
    same Apple form I just criticized has a better option for choosing a product—a
    drop-down menu that is easier to access with a mobile device and chubby fingers
    like mine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding jQuery form objects](img/4742_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The other part of the solution to making forms accessible and inviting in mobile
    devices is to implement new form fields, such as sliders (where visitors can select
    from a range of values by sliding a thumb on a bar) or flip toggle switches (with
    easy to use "on" and "off" switch options) to make filling out forms online more
    functional and more fun.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following form utilizes both a flip toggle (**On** switch and a value slider
    (0-100)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding jQuery form objects](img/4742_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Forms in Dreamweaver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dreamweaver has historically provided three methods for creating forms. You
    can, of course, define forms and form fields using HTML in Code view. You can
    generate forms by navigating to **Insert** | **Form** and define a form, then
    within it insert form fields (such as a text field) and the requisite buttons
    (such as a **Submit** button to make the form do something).
  prefs: []
  type: TYPE_NORMAL
- en: More recent versions of Dreamweaver, including Dreamweaver CS6, have added Spry
    Validation form fields that first test data (for example, to see if it looks like
    an e-mail address) before allowing a visitor to submit the form. I note this history
    because a) you can't get where you're going if you don't know where you've been,
    or whatever that saying is; and b) all these techniques still work in mobile devices,
    so if you know any or all of them, you can supplement the new jQuery Mobile form
    tools in Dreamweaver with those tools.
  prefs: []
  type: TYPE_NORMAL
- en: Here, however, we'll focus on the jQuery Mobile form tools that are geared to
    creating mobile-friendly forms, and include form fields such as the slider, and
    the toggle switch, that until now have not been easily accessible in Dreamweaver.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before diving into those tools, here''s the world''s most compressed course
    in creating forms in Dreamweaver (in general, not just using jQuery Mobile form
    tools):'
  prefs: []
  type: TYPE_NORMAL
- en: All form fields (such as a text field, or a **Submit** button) have to be enclosed
    within a single set of `<form>` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to work, forms must have a defined action. For forms that connect to
    server-side scripts (scripts written in programming languages such as PHP or Perl,
    and reside on a server), the action is a link to post the data to the location
    of that script at a server. There are many free, fairly intuitive online resources
    for generating such scripts, with directions on how to upload them to your server
    and connect them to a form. One such resource is [TheSiteWizard.com](http://TheSiteWizard.com).
    A very simple, but functional action is to simply e-mail form content to an e-mail
    address using the action `mailto:xxx@xxx.xxx`, where `xxx@xxx.xxx` is an e-mail
    address. This simple solution then launches an e-mail client (program) and prompts
    the user to e-mail the form content to the provided e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With those two basic rules in mind, let's examine tools in Dreamweaver for creating
    forms with particularly mobile-friendly form fields.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a jQuery Mobile form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like the other jQuery Mobile objects we''ve examined in this chapter, jQuery
    Mobile form elements can only be inserted into an already generated jQuery Mobile
    page. But beyond that, it is also necessary to create both a form and a **Submit**
    button using more traditional form features in Dreamweaver. So, the process of
    setting up a form that will enclose jQuery Mobile form elements is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a jQuery Mobile page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a form inside that jQuery Mobile page with a **Submit** (button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then you can add specifically mobile-friend jQuery Mobile form fields to that
    form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That three-step process isn't the only way to create jQuery Mobile forms, and
    it doesn't incorporate every possible option for such forms. But it is a basic
    foundation for making it possible to implement jQuery Mobile form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s work through an example, creating a basic form that, when submitted,
    will send content to an e-mail address through an e-mail client. These steps assume,
    of course, that you are working in a defined Dreamweaver site, and that you have
    created an HTML5 page with a jQuery Mobile page. With those pieces in place, the
    following steps flesh out the "three-step process" outlined in rougher strokes
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the jQuery Mobile page (you can select the placeholder "content" text
    in either the **Code** view or **Design** view to make sure you're doing this
    right), navigate to **Insert** | **Form** | **Form**. The **Tag Editor – form**
    dialog appears. Only the options in the **General** tab are essential for creating
    a form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Action** field, enter `mailto:[an email address]` using, of course,
    a real e-mail address. If you were working with a form linked to a server-side
    script, you would enter the URL of that script here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **post** from the **Method** pop-up, this is the method almost always
    used to send form data to a location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Encoding type** parameters are defined by the script that is managing
    the data. If you are uploading via e-mail, enter `text/plain`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your form in the **Name** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Target** pop-up allows you to select `_blank` if you want to open the
    linked form script in a new browser window (generally this is not necessary).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing the **Tag Editor – form** dialog, click **OK** to generate
    the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating a jQuery Mobile form](img/4742_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This set of steps simply defines a form. There are no form fields in that form
    yet, so nothing in **Live** view indicates there even is a form. You can see the
    form code in **Code** view of course, and you can see the form itself, indicated
    by a red outline, in the **Design** view with **Live** view turned off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember rule #1 from earlier in this section: in order to be acted on by a
    form action, *all form fields have to be inside a form*. So make sure you are
    clear on where your form is on your page, even though it has no content as yet.'
  prefs: []
  type: TYPE_NORMAL
- en: With your cursor *inside your form*, navigate to **Insert** | **Form** | **Button**.
    We are not (quite) yet at the stage of integrating special jQuery Mobile form
    fields, so this option will be available by simply navigating to **Insert** |
    **Form**. When the **Input Form Accessibility Attributes** dialog appears, you
    do not need to enter anything in any of the fields, simply click on **OK** to
    generate a **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have the basic elements of a form: the form itself with a defined action,
    and a **Submit** button. Next, it is time to add the jQuery Mobile form fields.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a jQuery Mobile form](img/4742_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Special mobile form fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As noted earlier, mobile devices often have built-in interface tools to make
    form content more accessible. So does jQuery Mobile. When you place standard HTML
    form fields, such as textboxes, checkboxes, and buttons, jQuery Mobile substitutes
    custom form fields that are more accessible in mobile devices. Checkboxes are
    made larger, select menus pop up lists of large buttons, form field labels and
    field names are resized to maximize screen real-estate.
  prefs: []
  type: TYPE_NORMAL
- en: So, some of the "special" form fields available from the jQuery Mobile submenu
    are simply adaptations of standard HTML form fields. Others are new to the HTML
    form field set. In either case, the jQuery Mobile form fields include, as noted,
    special formatting that makes them more mobile-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's examine three of these form fields, and based on those examples, you'll
    be able to work with additional form fields in the jQuery Mobile set. In each
    of these examples, *be sure that you are inserting the jQuery Mobile form fields
    within the set of* `<form>` *tags*.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a text input field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text fields are the most flexible way of collecting data in forms. They are
    used to collect usernames, passwords, e-mail addresses, shipping addresses, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: To insert a jQuery Mobile text input field in a form, navigate to **Insert**
    | **jQuery Mobile** | **Text Input** (if you want to allow multiple-line input,
    select **Text Area** instead). The jQuery Mobile text input field is automatically
    sized, but you have to replace the label placeholder text (**Text Input**) with
    your own text. You can do this in Design view (with Live View off) or in Split
    view.
  prefs: []
  type: TYPE_NORMAL
- en: You can also replace the input name by changing the default field name for the
    text field by editing the code `name="textinput"` with another field name inside
    the quotes. But avoid spaces and special characters (stick to letters and numbers).
    So, for example, to rename a text input field named `email`, you would change
    this code to `name="email"`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting a text input field](img/4742_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inserting a slider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Everybody's rating everything these days. You might not have read much physics,
    but how would you rate Bosonic string theory on a scale of 1-100? Well, ok… there
    *are* valid reasons to include rating options in a mobile form. And, if you're
    going to include a "rate this … (whatever)" in your form, you should make it easy
    for people to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the *slider*, a particularly handy way to input values in a mobile form.
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert a slider in a jQuery Mobile form, navigate to **Insert** | **jQuery
    Mobile** | **Slider**. Customize the slider as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the **Slider** label text with your own text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `value="0"` code with a value that will display by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `min="0"` code with any value you select that will be the minimum
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `max="0"` code with any value you select that will be the maximum
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Inserting a slider](img/4742_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inserting a toggle switch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Toggle switches provide a handy way for large fingers to easily select "yes"
    or "no"; "in" or "out"; or make some other two-option choice in a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: To insert a toggle switch in a jQuery Mobile form, navigate to **Insert** |
    **jQuery Mobile** | **Flip Toggle Switch**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Customize the toggle switch as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the **Option** label text with your own text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `Off` (not in quotes) in the code `<option value="off">Off</option>`
    with your own text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `On` (not in quotes) in the code `<option value="on">On</option>` with
    your own text.![Inserting a toggle switch](img/4742_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a page with collapsible blocks and a mobile-friendly form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's walk through a specific example to summarize, review, flesh out, and provide
    a model of building jQuery Mobile collapsible blocks in Dreamweaver, and mix in
    a mobile-friendly form.
  prefs: []
  type: TYPE_NORMAL
- en: Surveys tell us that a huge percentage of people looking to grab a taco somewhere
    search online for a place to get one—on their mobile devices. So let's use my
    non-existent taco stand at Coney Island as a model for this recipe, and you can
    easily adapt it to your own needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mobile page we build will have four collapsible blocks: menu, location,
    place orders, and a bit about the taco shop. In the course of building it, we''ll
    walk through creating four collapsible blocks, and embedding a form within one
    of the blocks. Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we're assuming you are working within a Dreamweaver site. If not,
    create a new one or open an existing one. Then navigate to **File** | **New**
    and in the **New Document** dialog, select **Blank Page** in the **Category**
    column, **HTML** in the **Page Type** column, **<none>** in the **Layout** column,
    and **HTML5** from the **DocType** popup. Then click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Save**, and save the file as `index.html`. As this
    is going to be a one-page site, the `index.html` filename will open the page when
    the site's URL is addressed in a browser. Assign a page title of "Mobile Tacos".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage of the process, by default, your cursor is in between the set
    of `<body>` tags. That's right where it should be. Insert a jQuery Mobile page
    by navigating to **Insert** | **jQuery Mobile** | **Page**. As we are going to
    be keeping this project relatively simple and standard (but not *too* simple,
    or standard—don't worry), you can select the **Remote (CDN)** link type option,
    and we'll avail ourselves of the online version of the jQuery Mobile CSS file.
    With **Remote (CDN)** selected, click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **jQuery Mobile Page** dialog opens. Click on **OK** with the default settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the original `Header` placeholder text with "Coney Island Tacos". Or,
    you can depart from my recipe right from the start, and freelance your own content
    from here on. Replace the footer text with the imaginary website of Coney Island
    Tacos – `www.coneyislandtacos.com`. Navigate to **Insert** | **Hyperlink** if
    you wish to define the hyperlink.![Building a page with collapsible blocks and
    a mobile-friendly form](img/4742_08_NEW.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a work environment: select **Split View** and then **480x800** from
    the **Window Size** popup at the bottom of the **Design** view. Turn on **Live
    View**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start with applying one of the jQuery Mobile themes for formatting. In the code
    side of **Split** view, enter the code `data-theme="e"` or experiment with other
    themes (try `a`, `b`, `c`, `d`, or `e`).![Building a page with collapsible blocks
    and a mobile-friendly form](img/4742_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s walk through the process of adding four collapsible panels to our
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the placeholder `content` text, and navigate to **Insert** | **jQuery
    Mobile** | **Collapsible Block**. Copy and paste one of the sets of collapsible
    block code to create a forth block. The code is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Customize the headers for all four blocks. You''ll find the headers enclosed
    in `<h3>` codes. I''m going with: **Menu**, **Email Order**, **Find / Call Us**,
    and **About Coney Island Tacos** as headers, but feel free to improvise.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the content of all the collapsible blocks *except* the **Email Order**
    block—we'll create a form for that next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Email Order** block (or whichever block you are using in a custom project
    for an input form), select the placeholder `content` text and navigate to **Insert**
    | **Form** | **Form**. In the **Tag Editor – form** dialog, make the action `mailto:youremail@youremail.xxx`
    (substituting your own e-mail address). Change the method to **POST**. Enter `text/plain`
    in the **Encoding Type** field and click on **OK**. Here, it might be helpful
    to pop out of live view to create the input form. Enter `Order Form` inside the
    form and press *Return* or *Enter* to create a new line.![Building a page with
    collapsible blocks and a mobile-friendly form](img/4742_08_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making sure your insertion point is inside the form, navigate to **Insert**
    | **jQuery Mobile** | **Select Menu**. Change the label to **Taco**. Click on
    the **Select** menu itself, and use the **List Values** button in the **Properties**
    inspector to open the **List Values** dialog. Enter labels (which appear in the
    form) and values (which are sent via e-mail when the form is submitted), using
    the **+** button to add new rows, and the up and down arrows to reorder items
    as necessary.![Building a page with collapsible blocks and a mobile-friendly form](img/4742_08_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add additional select menu to allow people to select a taco shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still within the form, navigate to **Insert** | **jQuery Mobile** | **Checkbox**.
    In the **jQuery Mobile Checkbox** dialog, enter `Sides` in the **Name** box, and
    select four checkboxes and a horizontal layout, and click on **OK**. Edit the
    labels right in **Design** view in the **Document** window, and use the **Properties**
    inspector to define values for each checkbox that match the labels.![Building
    a page with collapsible blocks and a mobile-friendly form](img/4742_08_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the form by inserting a **Submit** button. Again, *make sure your insertion
    point is inside the form*, and navigate to **Insert** | **Form** | **Button**.
    Click on **OK** without making any selection as a **Submit** button is the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To customize the look of the page, create a new class style. Use the **New CSS
    Rule** option at the bottom of the **CSS Styles** panel to create a new CSS rule.
    Name the class style `Format`. As we are using a remote version of the associated
    CSS file, and as this is a one-page site, we can break the rule of relying exclusively
    on linked, external stylesheets, so select **(This Document Only)** from the pop-up
    menu at the bottom of the **New CSS Rule** dialog, and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define some custom properties, such as font family, font size, and font color.
    Use the **Properties** inspector, as shown in the following screenshot, to apply
    the class style to selected elements on your page:![Building a page with collapsible
    blocks and a mobile-friendly form](img/4742_08_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further customize the project by creating additional class styles and
    applying them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can test the order form in a browser.![Building a page with collapsible
    blocks and a mobile-friendly form](img/4742_08_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One page-design technique in jQuery Mobile is a layout grid. A layout grid,
    with blocks, is essentially `div` style columns, but with special properties that
    make the columns display effectively in mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: The two most important jQuery Mobile techniques we introduced in this chapter
    are collapsible blocks, and jQuery Mobile form objects. Collapsible blocks expand
    and collapse, and provide a very comfortable way to present content in a small
    viewport. Adding jQuery form objects creates more mobile-friendly versions of
    familiar input form objects (such as text boxes), but also enables new form fields
    such as sliders and toggle flip switches.
  prefs: []
  type: TYPE_NORMAL
- en: To customize the look and feel of jQuery Mobile-based pages, we can utilize
    the broad brush formatting of data-themes, supplemented with custom CSS. But to
    really uncork the power of themes, we need to create our own custom theme color
    swatches. We'll do that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
