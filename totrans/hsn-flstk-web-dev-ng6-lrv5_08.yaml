- en: Dealing with the Angular Router and Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have come to one of the most important parts of **Single Page Applications**
    (**SPAs**): the use of routes. As you saw in [Chapter 3](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml),
    *Understanding the Core Concepts of Angular 6*, the Angular framework provides
    a powerful tool for dealing with application routing: @ angular/router dependency.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next few sections, you'll learn how to use some of these features, such
    as child-views, and how to create master detail pages. In addition, we will start
    building the application's visual field, filling in the templates with HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding components to the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with Angular routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring child routes for detail pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building frontend views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to prepare our baseline code, a process very similar to that under
    previous chapters. Let''s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all of the content from the `chapter-08` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder to `chapter-08`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `storage-db` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `docker-compose.yml` and replace the contents with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container_name: chapter-08-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-08-webserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-08-php-fpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE=chapter-08`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER=chapter-08`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the changes that we made to the Git source control. Open your Terminal
    window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding components to our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to continue to add some more components to our application.
    We must remember that, in the application summary, we defined a page for the bikes
    list that refers to the `api/bikes` endpoint of our API; also, we will have a
    bike details page that refers to the `api/bikes/id `   endpoint, containing the
    details of the selected bike. And, we will do the same to the `api/builders` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start creating the components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside `./Client/src/app`, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the previous command, you will see the following structure, inside
    the `bikes` modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a86529d5-b1bd-40f2-8754-81253a80502b.png)Bikes module structure'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command will create a root `bikes` folder to store every module
    related to the `bikes` endpoint; this pattern allows us to have a modular application,
    where each new feature (for example, `bikes-detail` or `bike-list`) will be organized
    in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can add a new inventory module that will be created inside its
    own module (`inventory.module.ts`) and stored inside the `bikes` module directory.
  prefs: []
  type: TYPE_NORMAL
- en: Consider this a good practice, and keep your modules and components organized
    in this way; avoid grouping more than one component in the root of the same folder.
    This prevents your code from turning into spaghetti code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside `./Client/src/app`, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will see the following result for the `builders` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7536e17-72e0-41b3-8e11-05e841199fdb.png)Builders folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the `builders` module (at `./Client/src/app/pages/builders/builders.module.ts`)
    was updated with the new Builder-detail component added to the declarations property,
    as you can see in the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The best part of this is that the Angular CLI is clever enough to add the newly
    created component to the module it belongs to. The same was done when we created
    the `bike-detail` component.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Angular routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we will continue with the development of our sample application.
    In the previous chapter, we created some Angular components for the frontend application,
    but before we write the contents of each one of them, we are going to create some
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into the code, it’s important for you to understand how the Angular
    router works.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on a link or go to a URL (for example, `http://localhost:4200/bikes`),
    the Angular router:'
  prefs: []
  type: TYPE_NORMAL
- en: Checks the browser URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finds which router state corresponds to the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Applies route guards, if they were defined in the router state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activates the respective Angular component to display the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, each route can contain the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path**: String; the path to match the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**patchMatch**: String; how to match the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**component**: Class reference; component to activate when the route is activated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**redirectTo**: String; URL to redirect to when this route is activated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data**: Static data to assign to the route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resolve**: Dynamic data to resolve and merge with the data, when resolved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**children**: Child routes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sections, we will see two methods for creating routes for our application,
    one of them using children routes.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about routes in the official documentation at [https://angular.io/guide/router](https://angular.io/guide/router).
  prefs: []
  type: TYPE_NORMAL
- en: Creating authentication routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the current folder structure of our authentication module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef1b4d55-2a3d-41ac-becc-b7111c4ab23d.png)Auth module folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, note that we created only one route file inside the
    root of the `auth` folder; we did not include any route files in any of the other
    folders/modules inside the `auth` folder, such as `login`, `register`, and `logout`.
    This is because we will use the `auth-routing.module.ts` file to create all of
    the routes related to authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create the authentication routes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **`auth-routing.module.ts`** file inside the `./Client/src/app/pages/auth`
    directory, and add the following block of code right after `Router import`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code inside the `routes`constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's work on the other routes for the application, starting with the `home`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating home routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create the `home` routes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/home/home-routing.module.ts` and `import` the
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./Client/src/app/pages/home/home-routing.module.ts` and add the following
    route object inside the `routes` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As our home page is very simple, it contains only one route; later on, in other
    modules, you will see more complex routes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring child routes for details pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use another approach to create the builders and bikes routes in Angular.
    We will use child routes, also called nested views.
  prefs: []
  type: TYPE_NORMAL
- en: When you are using multiple children, it is pretty important to be careful with
    the route object order.
  prefs: []
  type: TYPE_NORMAL
- en: When the router receives a URL, it follows the contents in order, starting with
    the first element of the array; if it finds a match to the complete URL, it stops
    and instantiates the corresponding component(s).
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, you will see how to implement a well-known UI pattern
    called **master detail page**. We will make another component to help us organize
    the folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Adding builders child routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the child routes for the following views in our frontend application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`builders-list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`builders-detail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builders-routing.module.ts` and `import`
    the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in `./Client/src/app/pages/builders/builders-routing.module.ts`, add
    the following `routes` object inside the `routes` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, you will notice two things that are different:
    one is that we are using a `children` route array property, and the other is a
    new component, called `BuilderListComponent`. So, let''s create this new component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside **`./Client/src/app`**, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following structure in the `builders` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bb4f792e-1343-4ecf-ae04-882a97be677e.png)Builders module with builder-list
    module'
  prefs: []
  type: TYPE_NORMAL
- en: Adding bikers child routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the child routes for the following views in our frontend application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bike-list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bike-detail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we will import the components at the top of file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bikes-routing.module.ts` and `import` the
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in `./Client/src/app/pages/bikes/bikes-routing.module.ts`, add the following
    route object inside the `routes` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, it is time to create the new `BikeListComponent`, as we did previously,
    with `Builders`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `./Client/src/app`, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following structure in the `bikes` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2174a330-819c-497e-a2ba-e12e2698afa0.png)Bikes module with bike-list
    module'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring app.component.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed previously, let's now make our views a little more attractive.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add our navigation component. For now, we will not put content in this
    file; we'll do that later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/app.component.html` and replace the code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that the preceding code doesn't have any content right now – just a simple
    markup for footer notes. In the next section, you will see how to add something
    more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Building frontend views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the components that we create with Angular receive an HTML template,
    as you saw in previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This ability that the framework has – to create the component connected to its
    respective view – is fantastic. It has that feature out of the box. It also includes
    a style sheet totally independent of the rest of the application, as you can see
    in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we will add the HTML necessary to give our application a pleasant
    look, as we suggested in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the navigation component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/layout/nav/nav.component.html` and replace the paragraph
    with the `nav works` string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two important things about the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `routerLink` property; later in this chapter, you will see
    how to use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are setting the title page with the `<title>` tag, using the `Title` service,
    a built-in service from Angular. As we are building an SPA, we need to use this
    resource to give a title to our views; without it, all of the pages in our application
    will have the same client name. Remember, the `Title` tag was set when we first
    created the application with the Angular CLI, and it will receive the application
    name that we defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s update the `<title>` tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/layout/nav/nav.component.ts`and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./Client/src/app/app.module.ts` and add the `Title` import to the top
    of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the `Title` provider to the `@ngModules` provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if we check the browser at the same URL again (`http://localhost:4200/`),
    we can see a list of links, and we can navigate through them. The result will
    be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49f889df-1199-4cf6-b5d8-993499dfbc3b.png)Navigation links'
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the class names in our markup; later on in the book, we will
    add some style sheets, including some Bootstrap components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the home view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/home/home.component.html` and replace the paragraph
    with the `home works` string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating the bikes router-outlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.html`and replace the paragraph
    with the `bikes works` string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating the bike-list view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.html` and
    replace the paragraph with the `bike-list` works string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating the bike-detail view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bike-detail/bike-detail.component.html`
    and replace the paragraph with the `bike-detail` works string with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Creating the builders router-outlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builders.component.html`and replace the
    paragraph with the `builders` works string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Creating the builder-list view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builder-list/builder-list.component.html` and
    replace the paragraph with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating the builder-detail view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builder-detail/builder-detail.component.html`
    and replace the paragraph with `builder-detail` works string with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating the login view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and replace the
    paragraph with the `login` works string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Creating the register view and template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and replace
    the paragraph with the `register` works string with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We now have the necessary code in our templates. However, we have not applied
    any style sheets yet. Don't worry about it at the moment; in the next sections,
    you'll see some more important points in the application, before we apply our
    style sheet. Let's take a look at what we have so far.
  prefs: []
  type: TYPE_NORMAL
- en: Testing routes and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start the application in development mode and check some URLs, to see
    the results of our routes and templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside the `./Client` folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Open your default browser, and go to `http://localhost:4200/bikes/1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a result very similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3eb62e63-740a-465f-ab6b-a6b9050dcac2.png)Bike detail page'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have come to the end of another chapter. In this chapter, you learned how
    to create additional components in modules, such as the `bikes` module. You added
    some routes using the Angular router, and learned how to use child routes. In
    addition, you learned how to create a navigation component and update the `<title>`
    tag of your pages, using an Angular default service.
  prefs: []
  type: TYPE_NORMAL
