- en: Writing Freestyle Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will go into detail about adding a new build item, configuring
    a build job, adding environment variables globally, and project-level environment
    variables. You will also learn about debugging issues with a freestyle job.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple freestyle script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a freestyle job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging issues with a freestyle job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about using Jenkins to create simple freestyle scripts. You
    should have a basic understanding of Unix, Bash, and what is meant by an environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple freestyle script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a simple freestyle script in Jenkins in the chapter, but we will
    quickly review what you need to do to set up a freestyle script project.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins dashboard navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you followed along with the instructions in [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml),
    *Installation and Basics of Jenkins*, then you should have the Jenkins service
    installed and/or running on your local computer. If Jenkins is not running locally,
    then please revisit [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml), *Installation
    and Basics of Jenkins*, and read the section corresponding to your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins login screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Jenkins is running locally, you should see a login screen.
  prefs: []
  type: TYPE_NORMAL
- en: Enter your user and password information and then click the log in button.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are logged in, you should be routed to the Jenkins dashboard, which
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d01789b2-b91e-4fa1-8f53-7f07e1123e87.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new build job item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Jenkins dashboard, there is a link called New Item; make sure to click
    it to add a new item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e066cf9-446e-4b20-a03a-a298669e3410.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click New Item, you will be taken to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4a50795-605c-4cae-b758-02734bc68596.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, depending on the number of Jenkins plugins that you have installed, you
    will see more or less on this screen in terms of build items. We will enter a
    name of `Freestyle Scripting` for the purposes of this chapter, but you can choose
    any name you like for the build job. Once you enter a name, make sure to click
    the Freestyle Project button and then click the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: Build configuration options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever you create a new item under Jenkins, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a2f4534d-7207-4e24-a114-eff8174c3927.png)'
  prefs: []
  type: TYPE_IMG
- en: Depending on what Jenkins plugins you have already installed, you may see more
    tabs or items in the build configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a freestyle job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notice that the build job configuration has multiple tabs. You can either scroll
    to each section in the tab or you can click the tabs themselves. Each tab has
    different functionality that you can configure in your Jenkins build job.
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The General tab has basic information about the Jenkins build you are creating,
    such as a description and other general build information. Look at the General
    tab information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e2de752a-f193-40ff-981d-e4758a2e8bbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is generally up to you which options you want to toggle on; you can click
    on the question mark symbol to get information. Let''s look at what is meant by
    the Quiet period option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0764dd7c-e55f-466d-b082-648cafa25b5c.png)'
  prefs: []
  type: TYPE_IMG
- en: To remove the detailed information, just click the question mark symbol again.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Source Code Management tab is where you specify the type of version control
    management system you are using, such as Git, SVN, and Mercurial. For the purposes
    of a build job, we will click on the Git radio button and specify a GitHub repository
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e14bc81-ca53-4f55-91b7-ddfa9714f223.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the Branch Specifier defaults to the */master branch, but you can
    specify any number of branches that you want by just clicking the Add Branch button.
    We will not add credentials as we are working locally here, but if you click the
    Add button that has a key, you will see the following overlay screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e208eb8-c45a-4304-ba57-837b1af50556.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can choose different types of credentials by clicking the Kind input box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aea28c7f-039e-4379-b6b1-f8d4482230a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also click the Add button in the bottom section of the Source Code
    Management tab and you will see the additional behaviors you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/142e613e-7046-4c68-b8b3-2a80121a63f5.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a number of advanced configuration options, such as sub-modules, that
    you can configure.
  prefs: []
  type: TYPE_NORMAL
- en: Build Triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Build Triggers tab configuration section deals with configuring when your
    build job triggers. This could include configuring a GitHub hook trigger that
    fires whenever you push a commit to the master branch in GitHub, triggering a
    build whenever another project is built, when you build periodically, or when
    you poll your version control system for changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c619cab-fd36-4c48-bc67-57eefd0c7e31.png)'
  prefs: []
  type: TYPE_IMG
- en: We checked the Poll SCM option, which is GitHub in our case, and utilizes a
    cron syntax that runs the Jenkins job at a particular time and date. In our case,
    we will trigger the polling job to run every 15 minutes. You can read more about
    the syntax by clicking the question mark symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, we will discuss how to use GitHub and Bitbucket to trigger jobs in
    Jenkins whenever you push code up to your remote repository, which is better than
    polling for changes.
  prefs: []
  type: TYPE_NORMAL
- en: Build environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will have more or less environment options to use depending on
    the Jenkins plugins that you have installed. In my case, I have Golang and Node.js
    plugins installed, but you could have any number of environments, such as Clojure
    and Ruby:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e49c1291-3206-4ba7-bde1-dff1ae1d286e.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we are building a Golang microlibrary, we checked the Set up Go programming
    language tools checkbox in this configuration section.
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Build section is where you specify how you want to build your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de610c38-51d3-4f1b-8e34-33961364e541.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click the Add build step button, you will see the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/31cb6e4e-8da6-49a4-93a9-fc53b21e797c.png)'
  prefs: []
  type: TYPE_IMG
- en: We will click on the Execute shell option, which will give us a Unix shell scripting
    environment to utilize.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we now have a text area available, where we can add Unix script
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b2773726-4cad-42da-bc1e-6287db3b7e7e.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add the following commands to this shell script: `go test`.
  prefs: []
  type: TYPE_NORMAL
- en: Post-build actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this build section, you can specify any actions to run after a successful
    build, such as, running code coverage and generating a JUnit report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/66399cd2-7b56-4092-a980-1fb091eaebfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click the Add post-build action button, you will the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/abfa6954-e414-432a-abae-77fd93997723.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see more or fewer options depending on the specific Jenkins plugins
    that you have installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are satisfied with the build configuration, click either the Apply
    button, which will save your current configuration options, or click the Save
    button, which will both save your options and then navigate you to a newly configured
    build item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68ded46d-8be6-42d5-a3c7-e2f968f53676.png)'
  prefs: []
  type: TYPE_IMG
- en: The Post-build Actions section is valuable because you can call other services,
    such as reporting and gathering metrics on a successful build.
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can add environment variables in Jenkins in a number of different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Global environment variable configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Jenkins dashboard, click the Manage Jenkins button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e4e21b4e-4018-4fb7-afa1-afba7cc8e569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Manage Jenkins button, you will need to click the Configure
    System button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/214d50f1-305f-4d3b-a843-e9ac04d1f612.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be navigated to the Configure System section and will then be
    able to add environment variables using the Global properties section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a257dde3-28d5-4d86-95ea-6d3de0674bb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that I added a Name, `SAMPLE_VALUE`, with the Value as `Hello Book
    Readers`. Now, this global property is available as an environment variable in
    the shell environment variable. You can add as many environment variables as you
    need in this section. Note that this global property will be available for every
    single job now.
  prefs: []
  type: TYPE_NORMAL
- en: EnvInject Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also choose a more granular level of setting environment variables for
    each particular build item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the EnvInject Plugin ([https://wiki.jenkins.io/display/JENKINS/EnvInject+Plugin](https://wiki.jenkins.io/display/JENKINS/EnvInject+Plugin))
    by performing the following steps. Click the Jenkins main dashboard link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d06bac89-b4ca-4906-a939-c3556eabaf30.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to click the Jenkins link, and you will be routed to the Jenkins dashboard.
    Then click the Manage Jenkins button, like you did to add the Global properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next click the Manage Plugins button, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5b56397e-b75c-4401-9011-02a3efe5ddb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now be taken to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34d1b2e0-053b-4e90-80ec-7e438db5be54.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we clicked the Available tab and then put `EnvInject` into the Filter
    box. Make sure to click the Jenkins plugin that you want and then click the Install
    without restart or Download now and install after restart button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we now have a couple of new build options in the Build Environment
    section in the build configuration area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab994d5e-fed3-4d2e-b08f-afa9d9deecef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click Inject environment variables to the build process, you can then
    add your new environment variable, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9e83cc0f-cbef-451c-a180-ad4b6b0a68a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to save your changes. One thing to note is that this environment variable
    is only for this particular build item; it is not a global property like we set
    before.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging issues with a freestyle job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you run a build in Jenkins for a build item, you can see all the details
    of the build by clicking on the specific build job that you want to see.
  prefs: []
  type: TYPE_NORMAL
- en: Build Project View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the Build History that you need to focus on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08850557-fb04-4693-b460-0dcb51c3921a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if you click on an actual build, you will go to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a5bcbae-a636-4457-bb0a-158eee749e92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click the Console Output link, then you will see a detailed CI Build
    log that shows all the steps the CI server did. Remember that we wrote a freestyle
    shell script. I''m adding the contents of the shell script for you to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that I added the two different environment variables that we defined
    earlier and I'm simply sending them to the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you look at the output of the build job, you will see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ebc50fe-0e54-47d2-b269-96f6b42f3665.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that Jenkins starts the job by running as the currently logged in
    user. Next, the EnvInject Plugin runs and injects any environment variables that
    we specified in our project. Then Jenkins fetches the latest changes from the
    GitHub repository. Then the EnvInject Plugin runs again and injects any necessary
    environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: The last operation is the actual execution of the shell script. One thing to
    notice in the preceding screenshot is that each command in the shell script is
    printed to standard output because execution tracing is enabled in Jenkins. Remember
    that execution tracing simply means that each command that you run in a shell
    script will be shown as well as the output of the command itself. For example,
    the ``echo "$ANOTHER_SAMPLE_NAME"`` command, which has the value ``echo "Hello
    Book Readers"``, is printed to standard output and then the message `Hello Book
    Readers` is printed. The last thing to note is the build that has the text **PASS** and
    the text finished with **SUCCESS**.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging issues with freestyle script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notice how we logged out environment variables that had simple information.
    There will be times where values are not being set in a CI environment, as you
    would expect, and this is where logging values out to standard output can be very
    helpful. One good aspect of using the EnvInject Plugin is that it will mask passwords
    that you inject to a build job so that you don''t accidentally log secrets or
    confidential information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b2b61403-1380-4b03-8be4-29db855864b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that in the preceding screenshot we have checked the inject passwords
    to the build as environment variables and given a name and password to the environment
    variable. If you accidentally do `echo $SecretName` in the build job, it will
    mask the value of  `$SecretName` so that you don't leak confidential information
    in the build.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned more about the Jenkins dashboard. You learned about
    adding build job items and all the parts of configuring a freestyle build job,
    how to add environment variables into a Jenkins job, and how to debug issues in
    a freestyle job.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover how to build a Jenkins plugin and will specifically
    go over the build process, which involves writing Java code and using the Maven
    Build tool.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is clicking the question mark symbol in the build configuration useful?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of syntax do you write if you want to poll your version control system
    in the Build Trigger section?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use more than one programming language in the build environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of environment does the freestyle script operate in—is it a Unix environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a global property and a project-level environment
    variable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do you think Jenkins uses execution tracing for the console output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the value of the post-build action section in the build configuration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please check out *Learning Continuous Integration with Jenkins - Second Edition* ([https://www.amazon.com/dp/1788479351](https://www.amazon.com/dp/1788479351)), from
    Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
