- en: Chapter 4. Localizing Your Application with Qt Linguist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Localization is an important, yet commonly neglected part of software development
    today. Most authors of applications, whether those applications are commercial
    or open source, have hopes to capture a large number of users for their application.
    Increasingly, this means supporting multiple languages in multiple locales; often
    needing support for multiple languages in one locale (think of French and English
    co-existing in Canada).
  prefs: []
  type: TYPE_NORMAL
- en: Qt has long had a framework for making applications easy to localize. With tools
    that help you avoid hardcoding strings in your application and a GUI named Qt
    Linguist to help manage translation, Qt eases the burden of localization throughout
    your application development cycle. In this chapter, we will look at Qt's strategy
    for localization, discussing the three tools (**lupdate**, **lrelease**, and **Qt
    Linguist**) Qt provides and how to use them, along with what you need to do as
    you write your application to take advantage of Qt's localization framework.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the task of localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Localizing your application has several phases, which typically overlap throughout
    a project. These phases are:'
  prefs: []
  type: TYPE_NORMAL
- en: As you write your application, you place strings to localize your application
    in a specific way so that Qt can identify the strings as needing localization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Periodically, you extract all the strings in your application and give them
    to translators to translate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Translators provide translations for the strings in your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You compile translation files with the translated strings for each language
    you want to support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Qt provides four tools to facilitate these phases:'
  prefs: []
  type: TYPE_NORMAL
- en: The `tr` and `qsTr` functions for C++ and QML let you identify the strings in
    your application that require localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lupdate` command generates a list of the strings that need localization
    in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translators use Qt Linguist to provide translations of the strings in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lrelease` command takes the translated strings from Qt Creator and packages
    them in a format for your application to consume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows how these phases interact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the task of localization](img/2319OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The lupdate/Linguist/lrelease cycle
  prefs: []
  type: TYPE_NORMAL
- en: Software development is iterative, and localization is no exception. Small projects
    may prefer to do the localization just once, or perhaps twice, waiting until the
    application is nearly done before submitting the application strings for localization.
    Larger applications, or larger companies with a dedicated staff of translators,
    may prefer a more iterative approach, going through the localization cycle several
    times throughout application development. Qt supports both the models.
  prefs: []
  type: TYPE_NORMAL
- en: Marking strings for localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the way back in [Chapter 1](ch01.html "Chapter 1. Getting Started with
    Qt Creator"), *Getting Started with Qt Creator*, I told you to always mark your
    strings for localization using the `tr` and `qsTr` functions: `tr` for C++ and
    `qsTr` for QML strings. Doing so has two key advantages for you. First, it enables
    Qt to find every string that needs localization. Second, if you install a Qt translator
    object in your application and provide a translation file, the strings you wrap
    with these functions are automatically replaced by their localized equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the use of `tr` in more detail. All Qt objects that include
    the `Q_OBJECT` macro in their declaration include the `tr` function. You''ve seen
    it with one argument, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The leading `&` in the string isn't for the `tr` function, but for the keyboard
    accelerators; you can prefix a letter with `&` and it gets the default system
    (*Alt* for Windows, *command* for Apple, and *Control* for Linux). The `tr` function
    uses the string you pass as the string in the user interface if no translated
    version of the string appears in the application's current translation table,
    or uses the string in the current translation table if one exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tr` function can take a second argument, a disambiguation context that
    `tr` uses for the same string that may require different translations. It can
    also handle strings with plurals, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the value of count and the locale, a different string is returned.
    So, a native English translation might return "0 items replaced", "1 item replaced",
    "2 items replaced", and so on, while a French translation could return "0 item
    remplacé", "1 item remplacé", "2 items remplacés", and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The `qsTr` function in QML works similarly, but it does not have the flexibility
    that the `tr` method has for disambiguation or handling plurals.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing your application with Qt Linguist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've marked your strings using `tr` or `qsTr`, you need to generate a
    table of those strings for Qt Linguist to localize. You can do this using the
    `lupdate` command, which takes your `.pro` file and walks your sources looking
    for strings to localize, and creates an XML file for Qt Linguist of the strings
    you need to translate. You'll do this once for each language you want to support.
    When doing this, it's best to name the resulting files systematically; one way
    to do that is to use the name of the project file, followed by a dash, followed
    by the ISO-639-2 language code for the language.
  prefs: []
  type: TYPE_NORMAL
- en: 'A concrete example is in order. This chapter has `QtLinguistExample`; I can
    run `lupdate` using a command like this to create a list of strings that I''ll
    translate to Esperanto (ISO-639-2 language code EPO):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Where the `–pro` file indicates the `.pro` file that contains the list of sources
    to scan for strings to translate, and the `–ts` argument indicates the name of
    the translation files to be written.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need `lupdate` in your path, of course. How you set your path will depend
    on whether you're working on Windows, Mac OS X, or Linux, and where you've installed
    Qt. Some installations of Qt may update your path automatically, while others
    may not. On my Windows machine, for example, I find `lupdate` at `C:\qt\5.1.0\msvc2012_64\bin\lupdate.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: The `.ts` file is an XML file with tags to indicate the strings to translate
    their context in your application's source code, and so forth. Qt Linguist will
    save the translations to the QM file as well, but don't worry, `lupdate` is smart
    enough not to overwrite existing translations if you run it again after providing
    some translations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Linguist is a GUI application; when you start it you''ll see a screen very
    similar to the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Localizing your application with Qt Linguist](img/2319OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Qt Linguist application editing a QM file
  prefs: []
  type: TYPE_NORMAL
- en: To begin, you need to open a `.ts` file you generated by navigating to **File**
    | **Open**, and choosing a translation file. You'll be prompted for the destination
    language, and then you're given a list of the strings it found. You—or your translators—need
    only to walk through each string and enter the corresponding string in the translated
    language. As you do so, you can see the context of the string in the source code
    in the right-most pane; the line of source from which the string was captured
    is highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Linguist lets you track which strings you''ve translated and which still
    need translation. The icon to the left of each of the strings can be:'
  prefs: []
  type: TYPE_NORMAL
- en: A black question mark indicating that a string has yet to be translated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A yellow question mark indicating that the string doesn't pass all of Qt Linguist's
    validation tests, but you're ignoring the failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An exclamation point indicating that the string you've provided doesn't pass
    Qt Linguist's validation tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A yellow checkbox indicating that you've provided a translation, but Qt Creator
    may have found a problem with it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A green checkbox indicating that the string has been translated and is ready
    to go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Linguist provides some simple validation tests, such as ensuring that strings
    with arguments such as `printf` have the same number of arguments in each translation.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Linguist also supports phrase books; you may be able to download a phrase
    book with common strings already localized to the language you're targeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'At any point, you can generate a translation file for inclusion in your application
    by running `lrelease`. For example, to create one for my Esperanto strings, I''d
    use `lrelease` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This takes the incoming `.ts` file, and generates a `.qm` file with the strings.
    The `.qm` files are highly compressed binary files used by Qt directly in the
    process of rendering your application.
  prefs: []
  type: TYPE_NORMAL
- en: Including localized strings in your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to supply translated strings to the `tr` and `qsTr` functions in your
    application, your application needs to include a `QTranslator` object to read
    the `.ts` files and replace the strings provided to `tr` and `qsTr` with their
    translated counterparts. We do this in your main entry point function, as shown
    in the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code allocates a `QTranslator` object, and loads the indicated translation
    file into the translator before installing it into `QApplication`. In this example,
    we're hardcoding the language to localize to Esperanto.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that if you want to support the locale as picked by the system, we might
    choose to do it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This determines the system locale, and attempts to load the localized string
    file for the system's current locale.
  prefs: []
  type: TYPE_NORMAL
- en: For this to work, the `.qm` files for the application need to be locatable by
    the application. They should be in the output directory; one way to do this during
    development is to turn off shadow builds in Qt Creator, under **Build Settings**
    in the **Projects** pane. As you build your application's installer—a platform-specific
    task outside the scope of this book—you need to include your `.qm` files with
    the application binary.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing special things – currencies and dates with QLocale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common thing you may need to do is localize currencies and dates. Qt makes
    this easy, although the solution isn't obvious until you've thought about it a
    bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you should know about the `arg` method of `QString`. It replaces an
    escaped number with the formatted version of its argument; if we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then `s` contains the string `a b`. Second, you should know about the `toString`
    method of `QLocale`, which formats its argument in a locale-specific way.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we could write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This uses `tr` to localize the currency symbol, and the `QLocale` class's static
    method `toString` to convert the value to a string with the locale-specific decimal
    separator (period in the U.S. and Canada, comma in Europe).
  prefs: []
  type: TYPE_NORMAL
- en: 'Date formatting is similar: the `toString` method of `QLocale` has overloads
    for the `QDateTime`, `QDate`, and `QTime` arguments, so you can simply write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This gets the current date and time and stores it in `whenDateTime`, and then
    makes a string out of it using the locale''s default formatting. The `toString`
    method can take a second argument that determines the output format. It can be
    one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QLocale::LongFormat`, which uses the long version of month and day names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QLocale::ShortFormat`, which uses the short version of day and month names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QLocale::NarrowFormat`, which provides the narrowest form of formatting for
    the date and time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Localizing applications with Qt is easy using Qt Linguist and the localization
    framework in Qt. To use the framework, though, you must mark your strings to localize
    with `tr` or `qsTr` in your source code wherever they appear. Once you do so,
    you can create a source file of strings to translate with Qt Linguist using Qt's
    `lupdate` command, and then provide translations for each string. Once you've
    provided the translations, you compile them using `lrelease`, and then include
    them in your application by installing a `QTranslator` object in your application's
    `main` function and loading the translation table generated by `lrelease`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at another important aspect of software development
    Qt Creator supports, which is performance analysis with the QML Profiler and Valgrind.
  prefs: []
  type: TYPE_NORMAL
