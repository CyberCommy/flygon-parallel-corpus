- en: Documentation and Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to document and report information using
    Python. You will also learn how to take input using Python scripts and how to
    print output. Writing scripts for receiving emails is easier in Python. You will
    learn how to format information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard input and output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard input and output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about input and output in Python. We
    will learn about `stdin` and `stdout`, and the `input()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '`stdin` and `stdout` are file-like objects. These objects are provided by the
    operating system. Whenever a user runs a program in an interactive session, `stdin`
    acts as input and `stdout` will be the user''s Terminal. As `stdin` is a file-like
    object, we have to read the data from `stdin` rather than reading data at runtime. `stdout`
    is used for the output. It is used as an output for expressions and `print()`
    function, as well as a prompt for the `input()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will see an example of `stdin` and `stdout`. For that purpose, create
    a script, `stdin_stdout_example.py`, and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have used `stdin` and `stdout` for taking input
    and displaying the output. The `sys.stdin.readline()` will read from `stdin`.
    The will write the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will learn about the `input()` and `print()` functions. The `input()`
    function is used for taking input from the user. The function has an optional
    parameter: prompt string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `input()` function returns a string value. If you want a number value,
    simply write the ''`int` keyword before `input()`. You can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can write `float` for float values. Now, we will look at an
    example. Create a `input_example.py` script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used `input()` function for three different values.
    Firstly for string, second for integer value, and third for `float` value. To
    use `input()` for integer and float, we have to use `int()` and `float()` type
    conversion functions to convert the received string into integer and float respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `print()` function is used to output the data. We have to put in a
    comma-separated list of arguments. In `input_example.py`, to get the output, we
    used the `print()` function. Using the `print()` function, you can simply write
    the data on to your screen by enclosing them in the  `" "` or `' '`. To access
    just the value, just write the variable name in the `print()` function. If you
    want to write some text as well as accessing a value in the same `print()` function,
    then separate these two by putting a comma between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at a simple example for the `print()` function. Create a `print_example.py` script
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, first, we simply printed a string on the screen. Next,
    we just accessed the value of `a` and printed it on the screen. Lastly, we entered
    the values of `a` and `b`, then added them and stored the result in the variable
    `c`, and then we printed a statement and accessed a value from the same `print()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Information formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about string formatting. We are going
    to learn how to format information in two ways: one by using the string `format()`
    method and the other by using the `%` operator.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will learn string formatting using the string `format()` method. This
    method of the `string` class allows us to do value formatting. It also allows
    us to do variable substitutions. This will concatenate the elements through positional
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to learn how to do this formatting using formatters. The string
    on which this method is called can contain literal text or replacement fields
    delimited by braces `{}`. Multiple pairs of `{}` can be used while formatting
    a string. This replacement field contains either an index of an argument, or the
    name of argument. As a result, you will get a copy of a string where each replacement
    field is replaced with the string value of an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at an example of string formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `format_example.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we did string formatting using the `format()` method
    of `string` class using single and multiple formatters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to learn about string formatting using the `%` operator.
    There are format symbols used with the `%` operator. Here are some commonly used
    symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%d`: Decimal integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%s`: String'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%f`: Floating point number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%c`: Character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we will look at an example. Create a `string_formatting.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we used the `%` operator to format strings: `%d`
    for numbers, `%s` for strings, and `%f` for float numbers. Then, we aligned the
    string to the left and right. We also learned how to truncate the string using
    the `%` operator. `%.4s` will display only the first four characters. Next, we
    created a dictionary named `students` and entered `Name` and `Address` key value
    pairs. Next, we placed our key names after the `%` operator to get the strings.'
  prefs: []
  type: TYPE_NORMAL
- en: Sending email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about sending an email from Gmail through
    a Python script. To do this, Python has a module named `smtplib`. The `smtplib`
    module in Python provides SMTP client session object that is used to send an email
    to any internet machine with SMTP listener.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to look at an example. In this example, we will send an email containing
    a simple text from Gmail to the recipients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `send_email.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have sent an email from our Gmail ID to the receivers.
    The user name variable will store your email ID. In the password variable, either
    you can enter your password or else you can prompt for password using the `getpass`
    module. Here, we prompt for the password. Next, the sender variable will have
    your name. Now we are going to send this email to multiple receivers. Then, we
    included subject, from, and to for that email. Then in `login(),` we mentioned
    our username and password variables. Next, in `sendmail()`, we mentioned the sender,
    receivers, and text variables. So, using this process, we have sent the email
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will look at one more example of sending an email with an attachment.
    In this example, we are going to send an image to the recipient. We are going
    to send this mail via Gmail. Create a `send_email_attachment.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we sent an image as an attachment to the receivers.
    We mentioned the sender's and receivers' email IDs. Next, in the `f_path`, we
    mentioned the path of the image that we sent as an attachment. Next, we sent that
    image as an attachment to the receiver.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous two examples – `send_text.py` and `send_email_attachment.py`– we
    sent email via Gmail. You can send via any other email providers. To use any other
    email provider, just write that provider name in `host_name`. Don’t forget to
    add `smtp` before it. In these example, we used `smtp.gmail.com`; for Yahoo! you
    can use `smtp.mail.yahoo.com`. So, you can change the hostname as well as the
    port, according to your email providers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about standard input and output. We learned how
    `stdin` and `stdout` act as keyboard input and user's Terminal respectively. We
    also learned about `input()` and `print()` functions. In addition to this, we
    learned about sending an email from Gmail to the receivers. We sent an email with
    simple text and also sent an attachment. Also, we learned about string formatting
    using the `format()` method and the `%` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about how to work with different files such
    as PDF, Excel, and `csv.`
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between `stdin` and input?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is SMTP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What would be the output of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: What would be the output of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`string` documentation: [https://docs.python.org/3.1/library/string.html ](https://docs.python.org/3.1/library/string.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`smptplib` documentation: [https://docs.python.org/3/library/smtplib.html ](https://docs.python.org/3/library/smtplib.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
