- en: Chapter 1. The Powers of JavaScript's Functional Side – a Demonstration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For decades, functional programming has been the darling of computer science
    aficionados, prized for its mathematical purity and puzzling nature that kept
    it hidden in dusty computer labs occupied by data scientists and PhD hopefuls.
    But now, it is going through a resurgence, thanks to modern languages such as
    **Python**, **Julia**, **Ruby**, **Clojure** and—last but not least—**JavaScipt**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript, you say? The web's scripting language? Yes!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has proven to be an important technology that isn't going away for
    quite a while. This is largely due to the fact that it is capable of being reborn
    and extended with new frameworks and libraries, such as **backbone.js**, **jQuery**,
    **Dojo**, **underscore.js**, and many more. *This is directly related to JavaScript's
    true identity as a functional programming language*. An understanding of functional
    programming with JavaScript will be welcome and useful for a long time for programmers
    of any skill level.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Why so? Functional programming is very powerful, robust, and elegant. It is
    useful and efficient on large data structures. It can be very advantageous to
    use JavaScript—a client-side scripting language, as a functional means to manipulate
    the DOM, sort API responses or perform other tasks on increasingly complex websites.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, you will learn everything you need to know about functional programming
    with JavaScript: how to empower your JavaScript web applications with functional
    programming, how to unlock JavaScript''s hidden powers, and how to write better
    code that is both more powerful and—because it is smaller—easier to maintain,
    faster to download, and takes less overhead. You will also learn the core concepts
    of functional programming, how to apply them to JavaScript, how to side-step the
    caveats and issues that may arise when using JavaScript as a functional language,
    and how to mix functional programming with object-oriented programming in JavaScript.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: But before we begin, let's perform an experiment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The demonstration
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps a quick demonstration will be the best way to introduce functional programming
    with JavaScript. We will perform the same task using JavaScript—once using traditional,
    native methods, and once with functional programming. Then, we will compare the
    two methods.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The application – an e-commerce website
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In pursuit of a real-world application, let's say we need an e-commerce web
    application for a mail-order coffee bean company. They sell several types of coffee
    and in different quantities, both of which affect the price.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Imperative methods
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s go with the procedural route. To keep this demonstration down
    to earth, we''ll have to create objects that hold the data. This allows the ability
    to fetch the values from a database if we need to. But for now, we''ll assume
    they''re statically defined:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: You can download example code files for all Packt books you have purchased from
    your account at [http://www.packtpub.com](http://www.packtpub.com). If you purchased
    this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this code is very basic. What if there were many more coffee
    styles than just the three we have here? What if there were 20? 50? What if, in
    addition to size, there were organic and non-organic options. That could increase
    the lines of code extremely quickly!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Using this method, we are telling the machine what to print for each coffee
    type and for each size. This is fundamentally what is wrong with imperative code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Functional programming
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While imperative code tells the machine, step-by-step, what it needs to do to
    solve the problem, functional programming instead seeks to describe the problem
    mathematically so that the machine can do the rest.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'With a more functional approach, the same application can be written as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 采用更加函数式的方法，同样的应用可以写成如下形式：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first thing that should be obvious is that it is much more modular. This
    makes adding a new size or a new coffee type as simple as shown in the following
    code snippet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先显而易见的是它更加模块化。这使得添加新的大小或新的咖啡类型就像下面的代码片段中所示的那样简单：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Arrays of coffee objects and size objects are "mixed" together,—that is, their
    methods and member variables are combined—with a custom function called `plusMixin`
    (see [Chapter 7](part0041_split_000.html#page "Chapter 7. Functional and Object-oriented
    Programming in JavaScript"), *Functional and Object-oriented Programming in JavaScript*).
    The coffee type classes contain the member variables and the sizes contain methods
    to calculate the name and price. The "mixing" happens within a `map` operation,
    which applies a pure function to each element in an array and returns a new function
    inside a `reduce()` operation—another higher-order function similar to the `map`
    function, except that all the elements in the array are combined into one. Finally,
    the new array of all possible combinations of types and sizes is iterated through
    with the `forEach()` method The `forEach()` method is yet another higher-order
    function that applies a callback function to each object in an array. In this
    example, we provide it as an anonymous function that instantiates the objects
    and calls the `printPrice()` function with the object's `getPrice()` and `getLabel()`
    methods as arguments.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 咖啡对象和大小对象的数组被“混合”在一起，也就是说，它们的方法和成员变量与一个名为`plusMixin`的自定义函数结合在一起（参见[第7章](part0041_split_000.html#page
    "第7章。JavaScript中的函数式和面向对象编程")，“JavaScript中的函数式和面向对象编程”）。咖啡类型类包含成员变量，大小包含计算名称和价格的方法。
    “混合”发生在`map`操作中，它对数组中的每个元素应用纯函数，并在`reduce()`操作中返回一个新函数——另一个类似于`map`函数的高阶函数，不同之处在于数组中的所有元素都合并成一个。最后，所有可能的类型和大小组合的新数组通过`forEach()`方法进行迭代。`forEach()`方法是另一个高阶函数，它对数组中的每个对象应用回调函数。在这个例子中，我们将其作为一个匿名函数提供，该函数实例化对象并调用`printPrice()`函数，其中包括对象的`getPrice()`和`getLabel()`方法作为参数。
- en: Actually, we could make this example even more functional by removing the `coffees`
    variable and chaining the functions together—another little trick in functional
    programming.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以通过移除`coffees`变量并将函数链接在一起使这个例子更加函数化——这是函数式编程中的另一个小技巧。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Also, the control flow is not as top-to-bottom as the imperative code was. In
    functional programming, the `map()` function and other higher-order functions
    take the place of `for` and `while` loops and very little importance is placed
    on the order of execution. This makes it a little trickier for newcomers to the
    paradigm to read the code but, once you get the hang of it, it's not hard at all
    to follow and you'll see that it is much better.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，控制流不像命令式代码那样自上而下。在函数式编程中，`map()`函数和其他高阶函数取代了`for`和`while`循环，执行顺序的重要性很小。这使得新手更难阅读代码，但一旦掌握了，就会发现其实并不难跟踪，而且会发现它更好。
- en: This example barely touched on what functional programming can do in JavaScript.
    Throughout this book, you will see even more powerful examples of the functional
    approach.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是简单介绍了在JavaScript中函数式编程可以做什么。在本书中，你将看到更强大的函数式编程的例子。
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: First, the benefits of adopting a functional style are clear.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，采用函数式风格的好处是明显的。
- en: Second, don't be scared of functional programming. Yes, it is often thought
    of as pure logic in the form of computer language, but we don't need to understand
    **Lambda calculus** to be able to apply it to everyday tasks. The fact is, by
    allowing our programs to be broken down into smaller pieces, they're easier to
    understand, simpler to maintain, and more reliable. `map()` and `reduce()` function's
    are lesser-known built-in functions in JavaScript, but we'll look at them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，不要害怕函数式编程。是的，它经常被认为是以计算机语言形式的纯逻辑，但我们不需要理解**Lambda演算**就能将其应用到日常任务中。事实上，通过允许我们的程序被分解成更小的部分，它们更容易理解，更简单维护，更可靠。`map()`和`reduce()`函数是JavaScript中较少为人知的内置函数，但我们会看一下它们。
- en: JavaScript is a scripting language, interactive and approachable. No compiling
    is necessary. We don't even need to download any development software, your favorite
    browser works as the interpreter and as the development environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种脚本语言，交互性强，易于接近。不需要编译。我们甚至不需要下载任何开发软件，你喜欢的浏览器可以作为解释器和开发环境。
- en: Interested? Alright, let's get started!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？好的，让我们开始吧！
