- en: Chapter 11. Mailers Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building mailers and the fundamental aspects of creating
    the right structure. Because building the right structure for a mailer is not
    easy and it is still related to the old school thinking about HTML structure,
    there are only a handful of tutorials that show how to do it from beginning to
    end. Why? Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple structure for a mailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding out what is and isn't possible in mailers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing the most known mailer clients, including Outlook and Gmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting back to the old school thinking of HTML structure based on tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your mailer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of testing e-mail is complicated because of the bunch of e-mail
    clients which you need to install on your computer. This is of course related
    to operating systems which you will need to install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Outlook 2007/2010/2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Outlook 2003/Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Outlook.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone Mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo! e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This bunch of e-mail clients is rather long and it is going to be problematic
    to test all of them. But you can use in your workflow some email testers. There
    is a list of online tools which you can use for example Litmus which will be described
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Back to tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tables structure is the most popular methodology of building bulletproof e-mail
    templates. It looks like a blast from the past. So, let''s bring the flavor of
    the past and let''s start creating the right structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You might ask, "But where is the HTML5 declaration and why aren''t styles included
    with the link `rel` tag?" It is because of the old HTML interpreters included
    in e-mail clients and the use of a newer `doctype` can create problems with compatibility.
    For now, we have a skeleton. Let''s begin writing the styles:'
  prefs: []
  type: TYPE_NORMAL
- en: So why are we using this part of the code?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code is related to an iOS-specific problem. It changes the behavior of
    an input telephone number, which (on iOS) is detected and changed to an interactive
    link that you can click and start a phone call.
  prefs: []
  type: TYPE_NORMAL
- en: Resetting styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In CSS code, there is a lot of code that should be used to reset a behavior
    over all browsers. The same situation occurs in mailers. There is a bunch of declarations
    that you should append to your style section and that will help you to provide
    a bulletproof mailer. So what can we add as a resetter?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first declaration with removal of the margin and padding is very important.
    This declaration is known from standard Internet browsers. As you can see, the
    `min-width` occurs too. As described in the code, this is very important line
    to check! In the value, there is `100% !important`. Yes! There is no space between
    the value and `!important`. The following code is a part of `reset` styles for
    emailers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What is `ExternalClass`? This class is related to templates that will be displayed
    in Outlook or Hotmail. It's a good approach to set this bunch of classes into
    your `<style>` tag. This will minimize the problems that can occur on specific
    e-mail clients. The following code contains mso- prefixes. This means that it
    is related to Microsoft Office.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is related to Microsoft Outlook. It will reset the additional space
    in the border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Targeting specific devices through media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build a bulletproof mailer, you will need to use specific code for some
    specific e-mail clients and devices. This is more difficult to do because of the
    problems with debugging (there is no good debugger/inspector to check behaviors
    live). Which devices do we need? Let''s create a list:'
  prefs: []
  type: TYPE_NORMAL
- en: iPad or iPhone with retina and non-retina display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android devices with:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low density (pixel ratio smaller than 1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium density (pixel ratio equal to 1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High density (pixel ratio greater than 1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This set with which you will match tablets and small screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Retina display is known from iOS devices such as iPhones, iPods, and iPads.
    These devices can be targeted with this media query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Target low density Android layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Target medium density Android layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Target high density Android layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to target Outlook 2007 and 2010, you will need to use an HTML conditional
    construction. This will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: CSS properties in e-mail templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is important to remember which properties you can use and what the exceptions
    are. This knowledge will keep you from a lot of nervous situations. Let''s list
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Problems for specific client/device |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `direction` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font-family` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font-style` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font-variant` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font-size` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `font-weight` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `letter-spacing` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `line-height` | (iOS) Default size of font is 13px |'
  prefs: []
  type: TYPE_TB
- en: '| `text-align` | (Outlook) Don''t append line-height to `TD` element. It is
    recommended to append this property to `P` element. |'
  prefs: []
  type: TYPE_TB
- en: '| `text-decoration` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `text-indent` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `background` | (Outlook) No support for background images |'
  prefs: []
  type: TYPE_TB
- en: '| `background-color` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `border` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `padding` | (Outlook) Padding is not supported for elements:`<p>``<div>``<a>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | (Outlook) Width is not supported for elements:`<p>``<div>``<a>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `list-style-type` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `border-collapse` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `table-layout` | - |'
  prefs: []
  type: TYPE_TB
- en: As you can see, there are a lot of properties that don't work the same way on
    all e-mail clients. This is a big problem, but with a basic knowledge you will
    be aware which element can be described in CSS. The biggest problem in mailers
    is positioning, which is not supported. So for example in most cases when the
    text overflows some image you will need to use image which includes your text.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive e-mail templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This part of the book can start a big discussion because the building of responsive
    e-mails is not possible at all in all e-mail clients. This is a working draft
    that can be used as a base for your e-mailers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is a lot of code… but the effect is not so great when
    we want to compare it to the normal website. The following screenshot shows how
    it will look in a desktop browser with width greater than 520px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive e-mail templates](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In smaller browsers (smaller than 520 px), you will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive e-mail templates](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inlining the e-mail template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inlining of an e-mail template is a very important process before pushing
    your project when you are using a separate CSS file or the CSS code is written
    in the `<style>` section—[http://foundation.zurb.com/e-mails/inliner-v2.html](http://foundation.zurb.com/e-mails/inliner-v2.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tips for e-mail template development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like the other processes related to frontend development, this should start
    with the prepared designs. Real web designers know where the borders are for a
    good website and should know where the borders related to the e-mailers are located.
    There are a lot of restrictions in global e-mailers' creation process. That's
    why the designer involved in this process should know the features that can be
    used in HTML e-mail templates.
  prefs: []
  type: TYPE_NORMAL
- en: The e-mail template framework INK by ZURB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This development process is simpler, with some framework that gathers tested
    fragments of code. ZURB, after creating the great Front End framework called Foundation,
    created INK as a framework for e-mail templates. For full information about this
    framework, it is recommended that you visit [http://foundation.zurb.com/e-mails.html](http://foundation.zurb.com/e-mails.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![The e-mail template framework INK by ZURB](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creation of Email template based on INK is very developer friendly. Framework
    gathered a lot of easy to use components like grid system, buttons, thumbnails
    which you can easily add to your template. Additionally there is a list of adjustable
    parameters like gutter, global paddings and margins. For deeper understanding
    of ZURB INK2 framework it is recommended to check official documentation: [http://foundation.zurb.com/emails/docs/](http://foundation.zurb.com/emails/docs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Litmus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing of email templates is pretty complicated when you want to gather all
    of testing environments. Its going to be easier when you will use Litmus which
    makes a screenshots of your email template in most known email clients.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with Litmus](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After creating of your template you will need to copy your HTML code and paste
    it into the system. If your e-mail has some images hosted on some server you can
    send an email to your account in Litmus. Litmus creates on application side your
    dedicated email address. When you send email to this address you can test this
    email in Litmus.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with Litmus](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see on screen above you can check your code in most known email clients.
    Screenshot was made on trial version of Litmus account that why some of views
    are not activated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preparing bulletproof e-mail templates is a complicated process. Why? As you
    can see, HTML and CSS behave pretty strangely and are not logical when you are
    familiar with standard web browsers. Of course, all of these processes can be
    described and there is a workflow that will help you to build the mailer without
    nervous situations. The list of restrictions brought by e-mail templates is very
    long, but good knowledge of the basics and experience in e-mail template development
    can make you a specialist in this frontend niche.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the scalability and modularity of CSS code.
    You will get to know more about methodologies and naming conventions. Let's start!
  prefs: []
  type: TYPE_NORMAL
