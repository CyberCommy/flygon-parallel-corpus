- en: Concurrency in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explain concurrency in Android. We will give examples
    and advice and apply concurrency to our Journaler application. We already touched
    on some basics by demonstrating the use of the `AsyncTask` class, but now we will
    dig deeper.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Handlers and threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AsyncTask`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Looper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delayed execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Android concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A default execution for our application is performed on the main application
    thread. This execution must be performant! If it happens that something is performing
    too long, then we get ANR--an Android application not responding message. To avoid
    ANRs, we run our code in the background. Android provides mechanisms so we can
    do that efficiently. Running operations asynchronously gives not just good performance,
    but great user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Main thread
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All user interface updates are performed from one thread. This is the main thread.
    All events are collected in a queue and processed by the `Looper` class instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image explains the relationship between classes involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b186908-463f-4a05-9454-c76fdb4bdde7.png)'
  prefs: []
  type: TYPE_IMG
- en: It is important to note that the main thread updates are all the UI you see.
    However, it can be done from other threads as well. Doing this directly from some
    other thread will cause an exception and your application can crash. To avoid
    this, execute all thread-related code on the main thread by calling the `runOnUiThread()`
    method from your current activity context.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers and threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, threading can be performed in the standard way by using threads.
    It is not recommended to just fire naked threads without any control. So, for
    this purpose, you can use the `ThreadPools` and `Executor` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, we will update our application. Create a new package called
    `execution` with a class called `TaskExecutor`. Make sure it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We extended the `ThreadPoolExecutor` class and `companion` object with the
    member method for executor instantiation. Let''s apply it to our existing code.
    We will switch from the `AsyncTask` class we used to `TaskExecutor`. Open the
    `NoteActivity` class and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we replaced `AsyncTask` with the executor. Our executor will
    handle only one thread at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the standard thread approach, Android also provides Handlers as
    one of the options for developers. Handlers are not a replacement for threads,
    but an addition! A Handler instance registers itself with its parent thread. It
    represents a mechanism to send data to that particular thread. We can send instances
    of the `Message` or `Runnable` class. Let''s illustrate its use with an example.
    We will update the Notes screen with an indicator that will be green if everything
    is performed correctly. If database persisting fails, it will be red. Its default
    color will be grey. Open the `activity_note.xml` file and extend it with the indicator.
    The indicator will be plain view, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we add the indicator, it will change its color depending on the database
    insertion result. Update your `NoteActivity` class source code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Build your application and run it. Create a new note. You will notice that the
    indicator changed color to green after you entered a title and the message content.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make some more changes and do the same thing with the `Message` class
    instance. Update your code according to this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention to the Handler instantiation and the `sendMessage()` method. We
    obtained the `Message` instance using the `obtainMessage()` method from our `Handler`
    class. As the message argument, we passed an integer datatype. Depending on its
    value, we will update the indicator color.
  prefs: []
  type: TYPE_NORMAL
- en: AsyncTask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have may have noticed, we are already using the `AsyncTask` class in
    our application. Now, we will go one step forward with it--we will run it on the
    executor. Why would we do that?
  prefs: []
  type: TYPE_NORMAL
- en: First of all, by default, all `AsyncTasks` are executed in sequence by Android.
    To execute it in parallel, we need to execute it on the executor.
  prefs: []
  type: TYPE_NORMAL
- en: Wait! There is more. Now, when we execute tasks in parallel, imagine you executed
    a few of them. Let's say we start with two. That's fine. They will perform their
    operations and report us when completed. Then, imagine we run four of them. They
    will work too, in most cases, if the operations they execute are not too heavy.
    However, at some point, we run fifty `AsyncTasks` in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, your application is slowing down! Everything will slow down because there
    is no control over the execution of tasks. We must manage tasks so the performance
    is preserved. So, let''s do that! We will continue on the same class we were updating
    so far. Change your `NoteActivity` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this is not actually something we will keep in the Journaler application,
    do not commit this code. Create it as a separate branch if you wish. We created
    a new instance of `ThreadPoolExecutor`. The constructor takes several arguments,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`corePoolSize`: This represents a minimal number of threads to keep in the
    pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maximumPoolSize`: This represents a maximal number of threads allowed in the
    pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keepAliveTime`: If the number of threads is greater than the core, the noncore
    threads will wait for a new tasks, and if they don''t get one within the time
    defined by this parameter, they will terminate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unit`: This represents the time unit for `keepAliveTime`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WorkQueue`: This represents the queue instance that will be used to hold the
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will run our tasks on this executor. `AsyncTask` concretization will log
    all events during its life cycle. In the `main` method, we will wait for 5 seconds.
    Run the application and try to add a new note with `Android` as the title. Observe
    your Logcat output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s filter logs by the methods we execute in our tasks. Let''s look at the
    filter for the `onPreExecute` method first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Do the same for each method and focus on the times when the methods were executed.
    To give more challenge to your code, change the `doInBackground()` method implementation
    to do some more serious and intensive work. Then, fire more tasks by typing a
    longer title, for example, the entire sentence. Filter and analyze your log.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Android Looper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's explain the `Looper` class. We used it in previous examples but we did
    not explain it in details.
  prefs: []
  type: TYPE_NORMAL
- en: '`Looper` represents a class that is used to execute `messages` or `runnable`
    instances in a queue. Ordinary threads do not have any queue like the `Looper`
    class has.'
  prefs: []
  type: TYPE_NORMAL
- en: Where we can use the `Looper` class? For the execution of multiple `messages`
    or `runnable` instances, `Looper` is needed! One example of use can be adding
    new tasks to the queue while, at the same time, the operation of task processing
    is running.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Looper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the `Looper` class, we must first call the `prepare()` method. When
    `Looper` is prepared, we can use the `loop()` method. This method is used to create
    a `message` loop in the current thread. We will give you one short example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we demonstrated basic steps to program a `Looper` class. Do
    not forget to `prepare()` your `Looper` class or you will get an exception and
    your application can crash!
  prefs: []
  type: TYPE_NORMAL
- en: Delayed execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s one more important thing left to show you in this chapter. We will
    show you some delayed execution in Android. We will give you some examples of
    delayed operation applied to our UI. Open your `ItemsFragment` and make these
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After three seconds, if we don''t close this screen, the background color will
    be changed to a slightly darker grey tone. Run your application and see for yourself.
    Now, let''s do the same thing in a different way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This time, we used the `Handler` class to perform delayed modification.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to Android concurrency. We explained and
    provided you with examples for each of the segments. This is a nice introduction
    for you before diving into the depths of Android services. Android services are
    the most powerful concurrency feature Android has to offer, and, as you will see,
    it can be used as the brain for your application.
  prefs: []
  type: TYPE_NORMAL
