- en: Chapter 9. Performing Table and Database Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we dealt mostly with table columns. In this chapter,
    we will learn how to perform some operations that influence tables or databases
    as a whole. We will cover table attributes and how to modify them, and will also
    discuss multi-table operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various links that enable table operations have been put together on the **Operations**
    page of the `Table` view. Here is an overview of this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing Table and Database Operations](img/7782_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Maintaining a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During its lifetime, a table repeatedly gets modified and is, therefore, continually
    growing and shrinking. Outages may occur on the server, leaving some tables in
    a damaged state.
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Operations** page, we can perform various operations, which are
    listed next. However, not every operation is available for every storage engine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Check table:** Scans all rows to verify that deleted links are correct. A
    checksum is also calculated to verify the integrity of the keys. If everything
    is all right, we will obtain a message stating **OK** or **Table is already up
    to date**; if any other message shows up, it''s time to repair this table (refer
    to the **Repair table** bullet point).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyze table:** Analyzes and stores the key distribution; this will be used
    on subsequent `JOIN` operations to determine the order in which the tables should
    be joined. This operation should be periodically done (in case data has changed
    in the table) to improve `JOIN` efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repair table:** Repairs any corrupted data for tables in the `MyISAM` and
    `ARCHIVE` engines. Note that a table might be so corrupted that we cannot even
    go into `Table` view for it! In such a case, refer to the *Multi-table operations*
    section for the procedure to repair it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defragment table:** Random insertions or deletions in an `InnoDB` table fragment
    its index. The table should be periodically defragmented for faster data retrieval.
    This operation causes MySQL to rebuild the table and only applies to `InnoDB`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimize table:** This is useful when the table contains overheads. After
    massive deletions of rows or length changes for `VARCHAR` columns, lost bytes
    remain in the table. phpMyAdmin warns us in various places (for example, in the
    `Structure` view) if it feels the table should be optimized. This operation reclaims
    the unused space in the table. In the case of MySQL 5.x, the relevant tables that
    can be optimized use the `MyISAM, InnoDB`, and `ARCHIVE` engines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flush table:** This must be done when there have been many connection errors
    and the MySQL server blocks further connections. Flushing will clear some internal
    caches and allow normal operations to resume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The operations are based on the available underlying MySQL queries—phpMyAdmin
    only calls those queries. More details are available at [http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html](http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html).
  prefs: []
  type: TYPE_NORMAL
- en: Changing table attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Table attributes are the various properties of a table. This section discusses
    the settings for some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Table storage engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first attribute we can change is called **Storage Engine**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Table storage engine](img/7782_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This controls the whole behavior of the table—its location (on disk or in memory),
    the index structure, and whether it supports transactions and foreign keys. The
    drop-down list varies depending on the storage engines supported by our MySQL
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing a table's storage engine may be a long operation if the number of rows
    is large.
  prefs: []
  type: TYPE_NORMAL
- en: Table comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Table comments** option allows us to enter comments for the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table comments](img/7782_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These comments will be shown at appropriate places, for example, in the navigation
    panel, next to the table name in the `Table` view, and in the export file. The
    following screenshot shows what the navigation panel looks like when the `$cfg['ShowTooltip']`
    parameter is set to its default value of `TRUE:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Table comments](img/7782_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default value `(FALSE)` of `$cfg['ShowTooltipAliasDB']` and `$cfg['ShowTooltipAliasTB']`
    produces the behavior we saw earlier—the true database and table names are displayed
    in the navigation panel and in the `Database` view for the **Structure** page.
    Comments appear as a tooltip (when the cursor is hovered over a database or table
    name). If one of these parameters is set to `TRUE`, the behavior is reversed—showing
    the comment by default and the true name as a tooltip. This is convenient when
    the real table names are not meaningful.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another possibility for `$cfg[''ShowTooltipAliasTB'']—` the `''nested''`
    value. Here is what happens if we use this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: The true table name is displayed in the navigation panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The table comment (for example, `project__)` is interpreted as the project name
    and is displayed as it is (refer to the *Nested display of tables within a database*
    section in [Chapter 3)](ch03.html "Chapter 3. Over Viewing the Interface")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we browse a table, or execute a statement such as `SELECT * from book`
    without specifying a sort order, MySQL uses the order in which the rows are physically
    stored. This table order can be changed with the **Alter table order by** dialog.
    We can choose any column and the table will be reordered once on this column.
    We choose **author_id** in the example, and after we click on **Go**, the table
    gets sorted on this column.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering is convenient if we know that we will be retrieving rows in this
    order most of the time. Moreover, if we use an `ORDER BY` clause later on, and
    the table is already physically sorted on this column, we might get better performance.
  prefs: []
  type: TYPE_NORMAL
- en: This default ordering will last as long as there are no changes in the table
    (no insertions, deletions, or updates). This is why phpMyAdmin shows the **(singly)**
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: '![Table order](img/7782_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the sort has been done on **author_id**, books for author **1** will be
    displayed first, followed by the books for author **2**, and so on (we are talking
    about a default browsing of the table without explicit sorting). We can also specify
    the sort order as **Ascending** or **Descending**.
  prefs: []
  type: TYPE_NORMAL
- en: If we insert another row, describing a new book from author **1**, and then
    click on **Browse**, the book will not be displayed along with the other books
    for this author because the sort was done before the insertion.
  prefs: []
  type: TYPE_NORMAL
- en: Table collation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Character-based columns have a collation attribute that describes which character
    set is used to interpret the contents, and rules for sorting. The **name** column
    currently has a **latin1_swedish_ci** collation, as can be seen via the **Structure**
    page. On the **Operations** page, if we change the collation for table `author`
    from **latin1_swedish_ci** to, say, **utf8_general_ci**, this generates the following
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, we only changed the default collation for future columns that will
    be added to this table; no collation was changed for existing columns.
  prefs: []
  type: TYPE_NORMAL
- en: Table options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other attributes that influence the table''s behavior may be specified using
    the **Table options** dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table options](img/7782_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PACK_KEYS:** Setting this attribute results in a smaller index. This can
    be read faster but takes more time to update. Available for the `MyISAM` storage
    engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHECKSUM:** This makes MySQL compute a checksum for each row. This results
    in slower updates, but finding of corrupted tables becomes easier. Available for
    `MyISAM` only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DELAY_KEY_WRITE:** This instructs MySQL not to write the index updates immediately,
    but to queue them for writing later. This improves performance but there is a
    negative trade-off—the index might need to be rebuilt in case of a server failure
    (refer to [http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)](http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)).
    Available for `MyISAM` only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TRANSACTIONAL, PAGE_CHECKSUM:** Applies to the `Aria` storage engine, previously
    known as `Maria`. The **TRANSACTIONAL** option marks this table as being transactional;
    however, the exact meaning of this option varies as future versions of this storage
    engine will gain more transactional features. **PAGE_CHECKSUM** computes a checksum
    on all index pages. Currently documented at [http://kb.askmonty.org/en/aria-storage-engine](http://kb.askmonty.org/en/aria-storage-engine).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ROW_FORMAT:** To the storage engines that support this feature `(MyISAM,
    InnoDB, PBXT`, and `Aria)`, a choice of row format is presented. The default value
    being the current state of this table''s row format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AUTO_INCREMENT:** This changes the auto-increment value. It is shown only
    if the table''s primary key has the auto-increment attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emptying or deleting a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Emptying a table (erasing its data) and deleting a table (erasing its data and
    the table's structure) can be done with the **Empty the table (TRUNCATE)** and
    **Delete the table (DROP)** links located in the **Delete data or table** section.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming, moving, and copying tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Rename** operation is the easiest to understand—the table simply changes
    its name and stays in the same database.
  prefs: []
  type: TYPE_NORMAL
- en: The **Move** operation (shown in the following screenshot) manipulates a table
    in two ways—changes its name and also the database in which it is stored.
  prefs: []
  type: TYPE_NORMAL
- en: '![Renaming, moving, and copying tables](img/7782_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moving a table is not directly supported by MySQL. So, phpMyAdmin has to create
    the table in the target database, copy the data, and then finally drop the source
    table. This could take a long time depending on the table's size.
  prefs: []
  type: TYPE_NORMAL
- en: The **Copy** operation leaves the original table intact and copies its structure
    or data (or both) to another table, possibly in another database. Here, the **book-copy**
    table will be an exact copy of the `book` source table. After the copy, we remain
    in the `Table` view for the `book` table, unless we selected **Switch to copied
    table** option, in which case we are moved to the `Table` view of the newly created
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '![Renaming, moving, and copying tables](img/7782_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Structure only** copy is done to create a test table with the same structure
    but without the data.
  prefs: []
  type: TYPE_NORMAL
- en: Appending data to a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Copy** dialog may also be used to append (add) data from one table to
    another. Both tables must have the same structure. This operation is achieved
    by entering the table to which we want to copy the data and choosing **Data only**.
  prefs: []
  type: TYPE_NORMAL
- en: For example, book data is coming from various sources (various publishers) in
    the form of one table per publisher and we want to aggregate all the data to one
    place. For `MyISAM`, a similar result can be obtained by using the `Merge` storage
    engine (which is a collection of identical `MyISAM` tables). However, if the table
    is `InnoDB`, we need to rely on phpMyAdmin's **Copy** feature.
  prefs: []
  type: TYPE_NORMAL
- en: Performing other table operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the table **Operations** interface, other dialogs may appear. The referential
    integrity verification dialog will be covered in [Chapter 10](ch10.html "Chapter 10. Benefiting
    from the Relational System"). Partition maintenance will be examined in [Chapter
    17](ch17.html "Chapter 17. Supporting Features Added in MySQL 5").
  prefs: []
  type: TYPE_NORMAL
- en: Multi-table operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Database` view, there is a checkbox next to each table name and a drop-down
    menu under the table list. This enables us to quickly choose some tables and perform
    an operation on all those tables at once. Here, we select the **book-copy** and
    the **book** tables, and choose the **Check table** operation for the selected
    tables as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multi-table operations](img/7782_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We could also quickly select or deselect all the checkboxes with **Check All
    / Uncheck All** option.
  prefs: []
  type: TYPE_NORMAL
- en: Repairing an "in use" table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The multi-table mode is the only method (unless we know the exact SQL query
    to type) for repairing a corrupted table. Such tables may be shown with the **in
    use** flag in the database list. Users seeking help in the support forums for
    phpMyAdmin often receive this tip from experienced phpMyAdmin users.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Operations** tab in the `Database` view gives access to a panel that
    enables us to perform operations on a database taken as a whole as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database operations](img/7782_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Renaming a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Rename database to** dialog is available. Although this operation is not
    directly supported by MySQL, phpMyAdmin does it indirectly by creating a new database,
    renaming each table (thus sending it to the new database), and dropping the original
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Copying a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to do a complete copy of a database, even if MySQL itself
    does not support this operation natively. The options are similar to those already
    explained for the table copy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Copying a database](img/7782_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the operations we can perform on entire tables or databases.
    It also looked at table maintenance operations for table repair and optimization,
    changing various table attributes, table movements (including renaming and moving
    to another database), and multi-table operations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to examine advanced features that rely on
    the phpMyAdmin configuration storage, such as the relational system.
  prefs: []
  type: TYPE_NORMAL
