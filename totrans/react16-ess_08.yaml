- en: Chapter 8. Building Complex React Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll put everything you learned so far about React components
    in action by building the most complex components in our application, that is,
    the child components of our `Collection` component. Our aim in this chapter is
    to gain solid React experience and grow our React muscle. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TweetList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you know, our `Collection` component has two child components: `CollectionControls`
    and `TweetList`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first build the `TweetList` component. Create the following `~/snapterest/source/components/TweetList.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TweetList` component renders a list of tweets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we create a list of `Tweet` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `TweetUtils.getListOfTweetIds()` method returns an array of tweet IDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for each tweet ID in that array, we create a `Tweet` component. For this,
    we will call the `map()` method on our array of tweet IDs and pass the `this.getTweetElement`
    method as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `getTweetElement()` method returns a `Tweet` element wrapped in the `<li>`
    element. As we already know, the `Tweet` component has an optional `onImageClick`
    property. When do we want to provide this optional property and when don't we?
  prefs: []
  type: TYPE_NORMAL
- en: There are two scenarios. In the first scenario, the user will click on a tweet
    image to remove it from a collection of tweets. In this scenario, our `Tweet`
    component will react to a `click` event, so we need to provide the `onImageClick`
    property. In the second scenario, the user will export a static collection of
    tweets that has no user interaction. In this scenario, we don't need to provide
    the `onImageClick` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is exactly what we do in our `getTweetElement()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We create a `tweet` constant that stores a tweet with an ID that is provided
    by the `tweetId` argument. Then, we create a constant that stores the `this.props.onRemoveTweetFromCollection`
    property that is passed by a parent `Collection` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we check whether the `this.props.onRemoveTweetFromCollection` property
    is provided by a `Collection` component. If it is, then we create a `Tweet` element
    with an `onImageClick` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If it isn''t provided, then we create a `Tweet` element without a `handleImageClick`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `TweetList` component in the following two cases:'
  prefs: []
  type: TYPE_NORMAL
- en: This component is used when rendering a collection of tweets in the `Collection`
    component. In this case, the `onRemoveTweetFromCollection` property *is* provided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This component is used when rendering a string of HTML markup that represents
    a collection of tweets in the `Collection` component. In this case, the `onRemoveTweetFromCollection`
    property *is not* provided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we create our `Tweet` element, and put it into the `tweetElement` variable,
    we return the `<li>` element with an inline style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Besides the `style` property, our `<li>` element has a `key` property. It is
    used by React to identify each child element that is created dynamically. I recommend
    that you read more about Dynamic Children at [https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the `getTweetElement()` method works. As a result, the `TweetList`
    component returns an unordered list of `Tweet` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating the CollectionControls component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, since you understand what the `Collection` component renders, let''s discuss
    its child components. We''ll start with `CollectionControls`. Create the following
    `~/snapterest/source/components/CollectionControls.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CollectionControls` component, as the name suggests, renders a user interface
    to control a collection. These controls allow the user to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename a collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty a collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export a collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A collection has a name. By default, this name is `new` and users can change
    it. A collection name is displayed in a header that is rendered by the `CollectionControls`
    component. This component is a perfect candidate for storing the collection''s
    name, and since changing a name will require a component re-render, we''ll store
    that name in the component''s state object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CollectionControls` component can render either collection control elements
    or a form to change the collection name. A user can switch between the two. We
    need a way to represent these two states—we''ll use the `isEditingName` property
    for that purpose. By default, `isEditingName` is set to `false`; therefore, users
    won''t see a form to change the collection name, when the `CollectionControls`
    component is mounted. Let''s take a look at its `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we check whether the component state''s `this.state.isEditingName` property
    is set to `true`. If it is, then the `CollectionControls` component returns the
    `CollectionRenameForm` component that renders a form to change the collection
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CollectionRenameForm` component renders a form to change the collection
    name. It receives three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: The `name` property, which references the current collection name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onChangeCollectionName` and `onCancelCollectionNameChange` properties,
    which reference the component's methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll implement the `CollectionRenameForm` component later in this chapter.
    Now let''s take a closer look at the `setCollectionName` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `setCollectionName()` method updates the collection's name and hides a form
    to edit the collection name by updating the component's state. We'll call this
    method when the user submits a new collection name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the `toggleEditCollectionName()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This method shows or hides the collection's name editing form by setting the
    `isEditingName` property to the opposite of its current Boolean value using the
    `!` operator. We'll call this method when the user clicks on the **Rename collection**
    or **Cancel** buttons, that is, show or hide the collection name change form.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `CollectionControls` component state''s `this.state.isEditingName` property
    is set to `false`, then it returns collection controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We wrap the `Header` component, two `Button` components, and the `CollectionExportForm`
    component in a `div` element. You''re already familiar with the `Header` component
    from the previous chapter. It receives a `text` property that references a string.
    However, in this case, we do not directly pass a string, but rather a call to
    the `this.getHeaderText()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In turn, `this.getHeaderText()` returns a string. Let''s take a closer look
    at the `getHeaderText()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This method generates a string for our header based on the number of tweets
    in our collection. The important feature of this method is that it returns not
    only a string, but rather a tree of React elements that encapsulate that string.
    First, we create the `numberOfTweetsInCollection` constant. It stores the number
    of tweets in a collection. We then create a `text` variable and assign it a number
    of tweets in a collection. At this point, the `text` variable stores an integer
    value. Our next task is to concatenate the right string to it based on what that
    integer value is:'
  prefs: []
  type: TYPE_NORMAL
- en: If `numberOfTweetsInCollection` is `1`, then we need to concatenate `' tweet
    in your'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, we need to concatenate `' tweets in your'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the header string is created, we then return the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The final string encapsulated inside a `<span>` element consists of a value
    of a `text` variable, a collection name, and the `collection` keyword; consider
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this string is returned by the `getHeaderText()` method, it is then passed
    as a property to a `Header` component. Our next collection control element in
    the `CollectionControls` components `render()` method is `Button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We pass the `Rename collection` string to its `label` property and the `this.toggleEditCollectionName`
    method to its `handleClick` property. As a result, this button will have the `Rename
    collection` label, and it will toggle a form to change the collection name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next collection control element is our second `Button` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can guess, it will have an `Empty collection` label, and it will remove
    all the tweets from a collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final collection control element is `CollectionExportForm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This element receives an HTML markup string that represents our collection,
    and it will render a button. We'll create this component later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now, since you understand what the `CollectionControls` component will render,
    let's take a closer look at its child components. We'll start with the `CollectionRenameForm`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CollectionRenameForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s create the `~/snapterest/source/components/CollectionRenameForm.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This component renders a form to change the collection name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `<form>` element wraps four elements, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One `Header` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `<input>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `Button` components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Header` component renders the `"Collection name:"` string. The `<input>`
    element is wrapped inside a `<div>` element with a `className` property set to
    `form-group`. This name is part of the Bootstrap framework that we discussed in
    [Chapter 5](ch05.html "Chapter 5. Making Your React Components Reactive"), *Making
    Your React Components Reactive*. It's used for layout and styling, and it's not
    part of our React application's logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<input>` element has quite a few properties. Let''s take a closer look
    at it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the description of the properties used in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `className` property is set to `form-control`. It is another class name,
    which is part of the Bootstrap framework. We will use this for styling purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, we apply our own style to this `input` element using the `style`
    property that references the `inputStyle` object with a single style rule, that
    is, `marginRight`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `value` property is set to the current value stored in the component's state,
    `this.state.inputValue`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onChange` property references a `handleInputValueChange` method that is
    an `onchange` event handler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ref` property is a special React property that you can attach to any component.
    It takes a callback function, which React will execute immediately after the component
    is mounted and unmounted. It allows us to access the DOM `input` element that
    our React component renders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I would like you to focus on the last three properties: `value`, `onChange`,
    and `ref`. The `value` property is set to the component state''s property, and
    the only way to change that value is to update its state. On the other hand, we
    know that a user can interact with an input field and change its value. Will this
    behavior apply to our component? No. Whenever a user types, our input field''s
    value won''t change. This is because a component is in control of `<input>`, not
    the user. In our `CollectionRenameForm` component, the value of the `<input>`
    always reflects the value of the `this.state.inputValue` property, regardless
    of what the user types. The user is not in control, but the `CollectionRenameForm`
    component is.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, how can we make sure that our input field reacts to the user input? We
    need to listen to the user input, and update the state of the `CollectionRenameForm`
    component, which in turn will re-render the input field with an updated value.
    Doing so on every input's `change` event will make our input look like it works
    as usual, and the user can freely change its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we provide our `<input>` element with the `onChange` property that
    references the component''s `this.handleInputValueChange` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As we discussed in [Chapter 4](ch04.html "Chapter 4. Creating Your First React
    Component"), *Creating Your First React Component*, React passes instances of
    `SyntheticEvent` to event handlers. The `handleInputValueChange()` method receives
    an `event` object with a `target` property that has a `value` property. This `value`
    property stores a string that a user has typed in our input field. We pass that
    string into our `this.setInputValue()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `setInputValue()` method is a convenient method that updates the component's
    state with a new input value. In turn, this update will re-render the `<input>`
    element with an updated value.
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s the initial input''s value when the `CollectionRenameForm` component
    is mounted? Let''s take a look at this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we pass the collection's name from a parent component, and we
    use it to set the component's initial state.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we mount this component, we want to set focus on the input field so that
    the user can start editing the collection''s name straightaway. We know that once
    a component is inserted into the DOM, React calls its `componentDidMount()` method.
    This method is our best opportunity to set `focus`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To do this, we get our input element by referencing `this.collectionNameInput`
    and call the `focus()` function on it.
  prefs: []
  type: TYPE_NORMAL
- en: How can we reference a DOM element inside the `componentDidMount()` method?
    Remember that we provided the `ref` property to our `input` element. Then we passed
    a callback function to that `ref` property, which in turn assigned a reference
    to the DOM input element to `this.collectionNameInput`. So now we can get that
    reference by accessing the `this.collectionNameInput` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s discuss our two form buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Change` button submits the form and changes the collection name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Cancel` button submits the form, but doesn't change the collection name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll start with a `Change` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user clicks on it, the `this.handleFormSubmit` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We cancel the `submit` event, then get the collection name from the component's
    state, and pass it to the `this.props.onChangeCollectionName()` function call.
    The `onChangeCollectionName` function is passed by a parent `CollectionControls`
    component. Calling this function will change our collection's name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s discuss our second form button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user clicks on it, the `this.handleFormCancel` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we cancel a `submit` event, then get the original collection name
    that is passed as a property by a parent `CollectionControls` component, and pass
    it to our `this.setInputValue()` function. Then, we call the `this.props.onCancelCollectionNameChange()`
    function that hides the collection controls.
  prefs: []
  type: TYPE_NORMAL
- en: That's our `CollectionRenameForm` component. Next, let's create our `Button`
    component that we reused twice in our `CollectionRenameForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Button component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the following `~/snapterest/source/components/Button.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `Button` component renders a button.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we didn't declare a class, but rather defined a simple function
    called `Button`. This is the functional way of creating React components. In fact,
    when the purpose of your component is purely to render some user interface elements
    with or without any props, then it's recommended that you use this approach.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of this simple React component as a "pure" function which takes
    an input in the form of the `props` object and returns JSX as output—consistently,
    no matter how many times you call this function.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, most of your components should be created that way—as "pure" JavaScript
    functions. Of course, this is not possible when your component has state, but
    for all stateless components—there's a chance! Now take a look at all the components
    that we've created so far and see if you can rewrite them as "pure" functions
    instead of using classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'I recommend that you read more about functional versus class components at:
    [https://facebook.github.io/r](https://facebook.github.io/r)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be wondering what''s the benefit of creating a dedicated component
    for a button if you could just use the `<button>` element? Think of a component
    as a wrapper for a `<button>` element and something else that comes with it. In
    our case, most `<button>` elements come with the same style, so it makes sense
    to encapsulate both the `<button>` and style objects inside a component, and reuse
    that component. Hence, the dedicated `Button` component. It expects to receive
    two properties from a parent component:'
  prefs: []
  type: TYPE_NORMAL
- en: The `label` property is a label for a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `handleClick` property is a callback function that is called when a user
    clicks on this button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, it's time to create our `CollectionExportForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CollectionExportForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CollectionExportForm` component is responsible for exporting a collection
    to a third-party website ([http://codepen.io](http://codepen.io)). Once your collection
    is on CodePen, you can save it and share it with your friends. Let's take a look
    at how this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `~/snapterest/source/components/CollectionExportForm.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `CollectionExportForm` component renders a form with the `<input>` and `<button>`
    elements. The `<input>` element is hidden, and its value is set to an HTML markup
    string that is passed by a parent component as `htmlMarkup` property. The `<button>`
    element is the only element in this form that is visible to the user. When the
    user clicks on the **Export as HTML** button, a collection is submitted to CodePen
    that is opened in a new window. A user can then modify and share that collection.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! At this point, you've built a fully functional web application
    with React. Let's see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure that Snapkite Engine that we installed and configured in [Chapter
    2](ch02.html "Chapter 2. Installing Powerful Tools for Your Project"), *Installing
    Powerful Tools for Your Project*, is running. Navigate to `~/snapkite-engine/`
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new Terminal window, navigate to `~/snapterest/`, and run this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now open `~/snapterest/build/index.html` in your web browser. You will see new
    tweets appear. Click on them to add them to your collection. Click on them again
    to remove individual tweets from the collection. Click on the **Empty collection**
    button to remove all the tweets from your collection. Click on the **Rename collection**
    button, type a new collection name, and click on the **Change** button. Finally,
    click on the **Export as HTML** button to export your collection to [CodePen.io](http://CodePen.io).
    If you have any trouble with this chapter or previous chapters, then go to [https://github.com/fedosejev/react-essentials](https://github.com/fedosejev/react-essentials)
    and create a new issue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created the `TweetList`, `CollectionControls`, `CollectionRenameForm`,
    `CollectionExportForm`, and `Button` components. You completed building a fully
    functional React application.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapters, we'll test this application with Jest, and enhance it
    with Flux and Redux.
  prefs: []
  type: TYPE_NORMAL
