- en: Chapter 10. Geoprocessing Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geoprocessing refers to the automation and chaining of GIS operations in a logical
    fashion to accomplish some sort of GIS task. For example, you may want to buffer
    a stream layer and then clip a vegetation layer to this newly created buffer.
    A model can be built in ArcGIS for Desktop and run in an automated fashion from
    either a desktop environment or via a centralized server accessed through a web
    application. Any tool found in ArcToolbox, whether a built-in tool for your ArcGIS
    license level or a custom tool that you've built, can be used in a model and chained
    together with other tools. This chapter examines how you can access these geoprocessing
    tasks through the ArcGIS API for JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Models in ArcGIS Server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Geoprocessor – what you need to know
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the service page for a geoprocessing task
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Geoprocessor task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the task
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with the geoprocessing tasks![Geoprocessing Tasks](graphics/7965_10_1.jpg)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding diagram shows us the components of a model that is built using
    ModelBuilder. These models can be published to ArcGIS Server as geoprocessing
    tasks and then accessed through your applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Models in ArcGIS Server
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Models are built in ArcGIS for Desktop using ModelBuilder. Once built, these
    models can be published to ArcGIS Server as geoprocessing tasks. Web applications
    then use the `Geoprocessor` object found in the ArcGIS API for JavaScript to access
    these tasks and retrieve information. These models and tools are run on ArcGIS
    Server due to their computationally intensive nature and the need for ArcGIS software.
    Jobs are submitted to the server through your application and the results are
    picked up after the service is complete. Submitting jobs and retrieving the results
    can be accomplished through the `Geoprocessor` object. This process is illustrated
    in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Models in ArcGIS Server](graphics/7965_10_2.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Using Geoprocessor – what you need to know
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three things that you need to know when using a geoprocessing service:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to know the URL where the model or tool is located. An example
    URL is [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you go to this link, you can also find information about the input and
    output parameters, whether the task is asynchronous or synchronous, and much more.
    Speaking of input and output parameters, you need to know the data types associated
    with these parameters and whether or not each of these parameters is required.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you need to know whether the task is asynchronous or synchronous and
    how your code should be configured based on that knowledge. All of this information
    can be found on the service page for the geoprocessing task.![Using Geoprocessor
    – what you need to know](graphics/7965_10_3.jpg)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the service page for a geoprocessing task
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The service page for a geoprocessing service includes metadata information about
    the service. This includes the execution type that can be either synchronous or
    asynchronous. In the case of the service seen in the following screenshot, the
    **PopulationSummary** service is a synchronous task, which indicates that the
    application will wait for the results to be returned. This type of execution is
    typically used with tasks that execute quickly. Asynchronous tasks are submitted
    as a job and then the application can continue to function while the geoprocessing
    service is doing its work. When the task is complete, it notifies your application
    that the processing is complete and the results are ready.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Other information includes the parameter names, parameter data type, whether
    the parameter is an input or output type, whether the parameter is required or
    optional, the geometry type, spatial reference, and fields.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the service page for a geoprocessing task](graphics/7965_10_4.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Input parameters
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a number of details you must remember regarding input parameters
    that are submitted to the geoprocessing task. Almost all geoprocessing tasks will
    require one or more parameters. These parameters can be either required or optional
    and are created as JSON objects. In this section, you''ll see a code example showing
    you how to create these JSON objects. When creating parameters as JSON objects,
    you must remember to create them in the exact order that they appear on the service
    page. The parameter names must also be named exactly as they are named on the
    service page. Please see the following screenshot for an example of how to read
    the input parameters of a service:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Input parameters](graphics/7965_10_5.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'The following code example is correct because the parameter names are spelled
    exactly as seen in the service page (also notice that the casing is the same)
    and are provided in the correct order:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In comparison, the following code example would be incorrect since the parameters
    are provided in reverse order:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous screenshot shows the input parameters supplied to a geoprocessing
    task. When coding your JSON input parameters object, it is critical that you provide
    the exact parameter name as given on the service page and that you provide the
    parameters in the order they appear on the page. Notice in our code example that
    we are providing two parameters: `Input_Observation_Point` and `Viewshed_Distance`.
    Both parameters are required and we have named them exactly as they appear on
    the service page and they are in the correct order.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The Geoprocessor task
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Geoprocessor` class in the ArcGIS API for JavaScript represents a GP task
    resource, which is a single task in a geoprocessing service. Input parameters
    are passed into the `Geoprocessor` class through a call to either `Geoprocessor.execute()`
    or `Geoprocessor.submitJob()`. We''ll discuss the difference between these two
    calls later. After executing the geoprocessing task, the results are returned
    to the `Geoprocessor` object, where they are processed by a callback function.
    Creating an instance of the `Geoprocessor` class simply requires you to pass in
    the URL that points to the geoprocessing service exposed by ArcGIS Server. It
    does require you to import `esri/tasks/gp`. The following code example shows you
    how to create an instance of the `Geoprocessor` object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the task
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have an understanding of the geoprocessing models and tools available
    to you for an ArcGIS Server instance as well as the input and output parameters,
    you can begin writing the code that will execute the task. Geoprocessing jobs
    are submitted to ArcGIS Server for either synchronous or asynchronous execution.
    A synchronous execution implies that the client calls for execution of the task
    and then waits for the result before continuing with the application code. In
    an asynchronous execution, the client submits a job, continues to run other functions,
    and checks back later for completion of the job. By default, the client checks
    back for completion every second until the job is finished. The service page tells
    you how to submit your job for each geoprocessing task. Simply look for the execution
    type on the service page. The execution type is set when the model is published
    as a service. As a developer, you don't have any control over the type after it
    has been published.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Synchronous tasks
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Synchronous tasks require your application code to submit a job and wait for
    a response before continuing. Because your end users must wait for the results
    to be returned before continuing to interact with your application, this type
    of task should only be used with tasks that return data very quickly. If a task
    takes more than just a few seconds, it should be defined as asynchronous instead
    of synchronous. Users quickly become frustrated with applications when data is
    returned within a very short period of time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: You will need to use the `Geoprocessor.execute()` method with the property input
    parameters and supplied callback function. The callback function is executed when
    the geoprocessing task returns the results of the job that was submitted. These
    results are stored in an array of `ParameterValue`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous tasks
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Asynchronous tasks require you to submit a job, continue working on other functions
    while waiting for the process to finish, and then check back in with ArcGIS Server
    on a periodic basis to retrieve the results after completion. The advantage of
    an asynchronous task is that it doesn't force your end users to wait for the results.
    Instead, the task is submitted and your end users continue to interact with the
    application until the task has finished processing. When processing is complete,
    a callback function is triggered in your application and you can handle the results
    that are returned.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The `Geoprocessor.submitJob()` method is used to submit a job to the geoprocessing
    task. You will need to supply input parameters, a callback function, and a status
    callback function. The status callback function executes each time your application
    checks back for the results. By default, the status is checked once per second.
    However, this interval can be changed using the `Geoprocessor.setUpdateDelay()`
    method. Each time the status is checked, a `JobInfo` object is returned and contains
    information indicating the status of the job. When `JobInfo.jobStatus` is set
    to `STATUS_SUCCEEDED`, the complete callback function is called.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: A visual diagram of the process flow that occurs on asynchronous tasks is provided
    in the following figure and might help reinforce how these types of tasks operate.
    Input parameters are created and input to the `Geoprocessor` object, which uses
    these parameters to submit a geoprocessing job to ArcGIS Server. The `Geoprocessor`
    object then executes the `statusCallback()` function at regular intervals. This
    function checks with the geoprocessing service to see if the job is finished.
    A `JobInfo` object is returned and contains a status indicator, indicating its
    completion status. This process continues until the job is completed, at which
    time a complete callback function is called and which passes the results of the
    job.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Asynchronous tasks](graphics/7965_10_6.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Time to practice with geoprocessing tasks
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you will code a simple application that displays drive time
    polygons on a map by accessing the **CreateDriveTimePolygons** model provided
    by Esri. The application will create 1-, 2-, and 3-minute drive time polygons
    around a point clicked on the map.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `Map` object as seen in the following code snippet and define variables
    to hold the `Geoprocessor` object and drive times:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside the `require()` function, create the new `Geoprocessor` object and set
    the output spatial reference:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set up an event listener for the `Map.click()` event. Each time the user clicks
    on the map, it will trigger the execution of the geoprocessing task that calculates
    drive times:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you''ll create the `computeServiceArea()` function that serves as the handler
    for the `Map.click()` event. This function will clear any existing graphics, create
    a new point graphic that represents the point where the user clicked on the map,
    and execute the geoprocessing task. First, create the stub for the `computeServiceArea()`
    function just below the line of code that defined the handler:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Clear any existing graphics and create the new `SimpleMarkerSymbol` that will
    represent the point that is clicked on the map:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the `Map.click()` event is triggered, an `Event` object is created and
    passed to the `computeServiceArea()` function. This object is represented in our
    code by the `evt` variable. In this step, you''re going to create a new `Graphic`
    object by passing in the `Event.mapPoint` property, which contains the `Point`
    geometry returned from the map click as well as the instance of `SimpleMarkerSymbol`
    that you created in the last step. You''ll then add this new graphic to `GraphicsLayer`
    so that it can be displayed on the map:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, create an array called `features` and place the `graphic` object into
    the array. This array of graphics will eventually be passed into a `FeatureSet`
    object that will be passed to the geoprocessing task:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a new `FeatureSet` object and add the array of graphics to the `FeatureSet.features`
    property:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a JSON object that will hold the input parameters to be passed to the
    geoprocessing task and call the `Geoprocessor.execute()` method. The input parameters
    include `Input_Location` and `Drive_Times`. Remember that each input parameter
    must be spelled exactly as it is seen in the service page, including casing. The
    order of the parameters is also very important and is also defined on the service
    page. We define the `Input_Location` parameter to be a `FeatureSet` object. The
    `FeatureSet` object contains an array of graphics which in this case is only a
    single graphic point. The `Drive_Times` object has been hard coded with values
    of 1, 2, and 3 and set in the `driveTimes` variable we created earlier. Finally,
    we called the `Geoprocessor.execute()` method, passing in the input parameters
    as well as a callback function that will process the results. We''ll create this
    callback function next:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the last step, we defined a callback function called `getDriveTimePolys()`,
    which will be triggered when the geoprocessing task has finished with the analysis
    of drive times. Let''s create this `getDriveTimePolys()` function. Just below
    the closing brace of the `computeServiceArea()` function, start the stub for `getDriveTimePolys()`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `getDriveTimePolys()` function accepts two parameters including the result
    object and any messages that are returned. Define a new `features` variable that
    holds the `FeatureSet` object returned by the geoprocessing task:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The geoprocessing task will return three `Polygon` graphics. Each `Polygon`
    graphic represents a drive time that we hardcoded as an input parameter (1, 2,
    and 3 minutes). Create a `for` loop to process each of the polygons:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside the `for` loop, symbolize each of the polygons with a different color.
    The first graphic will be red, the second green, and the third blue. There will
    be three polygons in the `FeatureSet` object. Define a different polygon symbol
    for each using the following code block and add the graphic to the `GraphicsLayer`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set the map extent to be the extent of `GraphicsLayer`, which now contains
    the three polygons you just created:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add a `<div>` tag that will hold the instructions for the application:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alter the `<style>` tag at the top of the code, as seen in the highlighted
    part of the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You may want to review the solution file (`drivetimes.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button. You should see the map in the following screenshot.
    If not, you may need to recheck your code for accuracy.![Time to practice with
    geoprocessing tasks](graphics/7965_10_7.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**按钮。您应该在以下截图中看到地图。如果没有，您可能需要重新检查代码的准确性。![练习地理处理任务的时间](graphics/7965_10_7.jpg)
- en: Click somewhere on the map. In just a few moments, you should see the drive
    time polygons displayed. Be patient. Sometimes this can take a little while.![Time
    to practice with geoprocessing tasks](graphics/7965_10_8.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图上的某个地方点击。只需片刻，您应该看到行驶时间多边形显示出来。请耐心等待。有时这可能需要一点时间。![练习地理处理任务的时间](graphics/7965_10_8.jpg)
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: ArcGIS Server can expose geoprocessing services such as models and tools, which
    your application can access. These tools are run on ArcGIS Server due to their
    computationally intensive nature and need for ArcGIS software. Jobs are submitted
    to the server through your application and the results are returned after the
    task is complete. Geoprocessing tasks can be synchronous or asynchronous and are
    configured to run as one of these types by an ArcGIS Server administrator. As
    an application programmer, it is important for you to understand what type of
    geoprocessing service you are accessing as the method call that you make to the
    service depends upon this information. In addition, to know whether a task is
    synchronous or asynchronous, you also need to know the URL of the geoprocessing
    model or tool as well as the input and output parameters. In the next chapter,
    you will learn how to add data and maps from ArcGIS Online to your application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server可以公开地理处理服务，如模型和工具，您的应用程序可以访问。这些工具在ArcGIS Server上运行，因为它们需要进行计算密集型的操作，并且需要ArcGIS软件。作业通过您的应用程序提交到服务器，任务完成后返回结果。地理处理任务可以是同步或异步的，并且由ArcGIS
    Server管理员配置为其中一种类型运行。作为应用程序员，重要的是要了解您正在访问的地理处理服务的类型，因为您对服务的方法调用取决于这些信息。此外，要知道任务是同步还是异步，您还需要知道地理处理模型或工具的URL以及输入和输出参数。在下一章中，您将学习如何将ArcGIS
    Online的数据和地图添加到您的应用程序中。
