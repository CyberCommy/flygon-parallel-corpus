- en: Managing User and Group Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, display managers were covered. We touched on XDM, KDM,
    GDM, and Lightdm. Differences between a display manager and a desktop were identified.
    We began by working with XDM in a CentOS system. Next, we switched our attention
    to KDM. Following this, GDM was next on our agenda. Additionally, we also covered
    installing some desktops within the mix. Lastly, Lightdm was covered. The techniques
    to get Lightdm up and running were highlighted using a Fedora 28 distribution.
    The processes for installing various display managers and switching between display
    managers were the key focal points of the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the topic will be user and group accounts. Thus far, we've
    covered a number of key areas within a Linux environment. Our focus begins with
    the process of managing user accounts; things such as user creation and deletion,
    directory modifications, setting a password, permissions, and ownership will be
    the focus. Following this, the scope will be grouped; we will dive into the techniques
    used for managing groups. The process of creating and removing groups, assigning
    users to groups, permissions, and so on will be covered. I encourage you to join
    me once again in the upcoming chapter to be better equipped for managing users
    and groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Directory used when creating a new user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directory used when creating a new user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every time we create a new user using the `useradd` command in a system a number
    of events occur. To begin with, there is a structure that is in place in terms
    of the directories that will be generated for a new user. The structure is stored
    in the skeleton directory; this is located in the `/etc/skel` directory. The `/etc/skel`
    directory contains files and folders, which are copied in the new user''s home
    directory. We can take a look at the skeleton directory using our Ubuntu system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each new user pulls its structure from here. The dot (`.`) indicates a hidden
    file. Files such as `/etc/skel/.logout`, `/etc/.skel/.bashrc`, and the `/etc/skel/.profile`.
  prefs: []
  type: TYPE_NORMAL
- en: The .bash_logout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that `.bash_history` is where commands executed during logout are stored.
    It simply clears the screen to ensure privacy upon logout. This can be seen in
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The .bashrc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `/etc/skel/.bashrc` is usually used for storing alias for various. This
    can be seen by looking at `/etc/skel/.bashrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Some output has been omitted for brevity. Based on the preceding output, some
    aliases have been defined for us; one such example is `alias ll='ls -af'`.
  prefs: []
  type: TYPE_NORMAL
- en: The .profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s consider `/etc/skel/.profile` as it does a number of tasks; one of which
    is to check for the existence of `$Home/.bashrc`. This is evident by looking at `/etc/skel/.profile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. Based on the preceding output, we
    can see the `#if running bash` section. Another way to see that these directories
    are indeed copied over is by looking at an existing user. We will use the `ls`
    command in combination with the `egrep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Awesome job! Based on the preceding output, we can see `.bash_history`, `.bashrc` and
    `.profile`.
  prefs: []
  type: TYPE_NORMAL
- en: The .bash_history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every command executed at Command Prompt is stored in `.bash_history`. Furthermore,
    `.bash_history` is only created after we start running commands at Command Prompt.
    Here is a brief look at `/home/philip/.bash_history`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Some output has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we can check another user for the existence for the various `.bash` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Great job! We can see `.bash_history`, `.bash_logout`, `.bashrc`, and `.profile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to identify that the `/etc/skel` directory is being used when creating
    a new user with the `useradd` command is to call the `useradd` command and pass
    the `-D` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Based on the preceding output, we are given a wealth of information. Particularly, `SKEL=/etc/skel`
    indicates which directory to use when creating a new user.
  prefs: []
  type: TYPE_NORMAL
- en: Managing user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve used two user accounts throughout the previous chapters; a standard
    user and the root user. In Linux, we can create a user account via a GUI utility
    or via the command line. In the shell, we use the `useradd` command in order to
    create a new user account. In newer distributions, there is also the `adduser`
    command. In some distributions, such as CentOS, `adduser` is a symbolic link.
    This can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu, the `adduser` command is separate from the `useradd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic syntax when using the `useradd` command is `useradd <option> username`.
    By default, a standard user cannot create a user account. This can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Based on the preceding output, we are greeted with a `Permission denied` message.
  prefs: []
  type: TYPE_NORMAL
- en: By default, standard users cannot create user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new user, we will continue as a root user. We will cover managing
    permissions with the `sudoers` file in[Chapter 17](part0210.html#688M40-43f6e611c18f4c7abc8a9e3790317ae8),
    *Perform Security Administration Tasks*. Here it is using the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we aren''t given any indication to verify whether
    the new user was created. Rest assured, we can confirm by looking at the `/home`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. The last entry displays the new user
    information. The way we read this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if we compare the entry for another user, we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the last `:/bin/bash` part defines the shell
    for the user. The user that we created has no shell assigned. Also, we need to
    see a password for the user. In order to set a password, we will use the `passwd`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Now, let''s log out and try to log in using the `tom` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! We can see the new user appearing but when we try to log in, the
    system will keep bouncing us out because we have defined a shell for the user.
    Let''s fix this by removing the user and adding the user once again. We will use
    the `userdel` command to remove the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, let''s create the user and pass the `-s` option. This will define
    the shell for the user to be used with the `useradd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Awesome job! Now we can see in the last entry the user `tom` has been assigned
    a `/bin/bash` shell. Another interesting part of `/etc/passwd` is the `x` in each
    of the accounts listed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We said it represents the password, but we have not set `x` as the password
    so what''s the deal with `x`? Well, `x` is simply saying that the password, is
    encrypted; it is actually stored in a separate location. The `/etc/shadow` directory
    stores the password. We can take a look at the `/etc/shadow` directory for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Some output has been omitted for brevity. Based on the preceding output, we
    can see the actual encrypted password for each account.
  prefs: []
  type: TYPE_NORMAL
- en: The chage command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another interesting aspect regarding user accounts involves the aging time
    for a password; the expiration for a password. We can view the expiration for
    a given user by using the `chage` command. Let''s create a password for the user `tom` and
    then check the password aging settings for the new user:'
  prefs: []
  type: TYPE_NORMAL
- en: You must have root privileges to change the password aging parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! Based on the preceding output, we used the `-l` option to display
    the expiration settings; we can see some valuable information, notably, `Last
    password change`, `Password expires`, and `Account expires`. We can change these
    values by passing various options. For instance, let''s change `Account expires`.
    We use the `-E` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Based on the preceding output, we''ve set the account to expire
    to the current time of this demo. Now, to see the effects of this change, we will
    open another Terminal and try to log in as the user `tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! Based on the preceding output, we see the message that was returned
    while attempting to log in as the user `tom`. To remove this expiration for the
    user `tom`, we would use `-1` as the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will be able to log in as the user `tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! Based on the preceding, we can see the effectiveness of using the
    `chage` command. To see the available options that can be passed with the `chage`
    command, we can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The usermod command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier we saw that to make any changes we have to remove the user with the
    `useradd` command. This can be cumbersome every time we decide on a change; instead,
    we can leverage another powerful command: the `usermod` command. The basic syntax
    of the `usermod` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Using our test user `tom`, we can change a number of parameters with the `usermod`
    command. For example, we can lock the account for the user `tom`, this will prevent
    the user `tom` from being able to log into the system. To lock an account, we
    would use the `-L` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome job! Based on the preceding output, the user `tom` is unable to log
    in. An interesting point to note is the entry for the user `tom` inside `/etc/shadow`
    shows `!` in front of the password in the second field, which represents the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding, there is no `!` in front of the password for the user
    `philip`. Another way to verify whether an account has been locked is to use the
    `passwd` command. We pass the `--status` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Note `L` indicates that the user account is currently locked.
    We can unlock the user account by using the `usermod` command and passing the
    `-U` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! Based on the preceding output, the `P` indicates that the user `tom` has
    a usable password; this implies that the account is unlocked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! Now, when we look at `etc/shadow` once again, we will no longer
    see the `!` in front of the hashed password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can also define a shell for a user if we added a user without specifying
    a shell; we pass the `-s` option with the `usermod` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Another method for locking an account is to use the `passwd` command;
    we pass the `-l` option. Let''s lock the user `tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, when we try to log in as the user `tom`, we will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! Also, we can unlock an account using the `passwd` command; we would
    pass the `-u` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Note that the root user can still log in using the `tom` user, yes!
    We can illustrate this by locking the user `tom` once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, from all indication it seems that the user `tom` account
    has been disabled but check this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! Here's what happened, when someone tries to log in as the user `tom`,
    they will be prevented unless they first become the root user because the lock
    **does not** prevent the root from accessing the locked account.
  prefs: []
  type: TYPE_NORMAL
- en: The root user can access any account.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we manage user accounts; some of their base information comes from a special
    configuration file: the `/etc/login.def` file. We can take a look at `/etc/login.def`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Some output has been omitted for brevity. Based on the preceding output, we
    can see settings for the `su` and `chage` commands.
  prefs: []
  type: TYPE_NORMAL
- en: The w command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `w` command displays the currently logged-in users in the system. We can
    take a look at the `w` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we have the fields starting from the user moving
    from left to right. Some interesting fields are the `FROM` field as it shows where
    the user logged in from (if it is over a network, it will show an IP address)
    and the `LOGIN@` field as it shows which date the user logged in. We can see the
    available options by passing the `--help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The who command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `who` command is another popular command used for displaying currently
    logged-in users. We simply do `who` without any options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! But wait, we can actually identify the date and time when the
    system booted up, yes! We pass the `-a` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The last command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another popular command for displaying the users who have recently logged in
    is the `last` command. We simply say `last`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the user `tom` has logged in over the network.
    We can see the available options by passing the `--help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Awesome job!
  prefs: []
  type: TYPE_NORMAL
- en: The whoami command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can quickly view information about the current user by using the `whoami`
    command. The `whoami` command displays the owner of the current login session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! We can view the available options of the `whoami` command by passing
    the `--help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Managing groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve been creating user accounts within our system; what about group
    accounts? Well, here''s the thing, when we create an account using the `useradd`
    command, we are also indirectly creating a group account using the same name as
    the user. To prove this, let''s take a look at the `/etc/login.def` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the `USERGROUPS_ENAB yes` variable enables the
    creation of a group using the same name specified for the username. We can also
    take a look at the available groups by looking at `/etc/group`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. Based on the preceding output, a
    group, `tom` was created when we created a username `tom`. However, we can also
    create a group using another powerful command, the `groupadd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now we see our newly created `Hacki` group being displayed. Likewise,
    we can remove a group using the `groupdel` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, let''s create recreate a `Hacki` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible to add a user to another group using the `usermod` command.
    Let''s use the `tom` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see that the user `tom` is part of the `tom` and `Hacki` groups.
    Another way to group for a user is to use the `id` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! Additionally, we can make a group as the primary group for a user
    by passing `-g` with the `usermod` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the preceding output, the only group that the user `tom` belongs
    to is the `Hacki` group. It is also possible to add a password to a group; we
    use the `gpasswd` command. Note that `/etc/gshadow` stores each group password.
    We can take a look at it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. The `!` exclamation means that no
    password has been set for the respective groups. Let''s set a password for the
    `Hacki` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! Now we can see that the hashed version of the password has replaced
    the `!` exclamation.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also another command that can be used to create or change a group''s
    password: the `groupmod` command. Let''s use the `groupmod` command to assign
    a password to the `tom` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Great job! Based on the preceding output, as opposed to the `gpasswd` command,
    when we use the `groupmod` command, it expects an encrypted password. We specified
    a plain password; hence, we see the password being exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a wide array of techniques for managing user and
    group accounts. First, we investigated the various directories from which the
    new users' home directories are populated. Next, we dealt with user account creation.
    We saw how we add or remove a user account. In addition, we saw how to set a password
    for a user account. Also, we looked at the various configuration files where the
    users' passwords are kept, particularly, focusing on the `/etc/passwd` and the
    `/etc/shadow` files. Following this, we dealt with modifying properties for a
    user account.
  prefs: []
  type: TYPE_NORMAL
- en: We touched on locking and unlocking a user account. Also, we worked with password
    expiration settings using the `chage` command. Finally, our focus was on the groups.
    We covered the steps for creating a group and adding and removing groups. Moreover,
    we saw how we would assign a group to a user; likewise, we saw how to assign a
    primary group. Finishing, we looked at methods for setting a password for a group.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, our focus will be automating tasks. We will cover the utilities
    commonly used for executing tasks. Additionally, we will cover permissions for
    carrying out tasks within a Linux system. I hope you join me in the next chapter
    as it contains vital information regarding automation of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which configuration file usually stores alias inside the `/etc/skel` directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/etc/skel/bash`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/etc/skel/bash_rc`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/etc/skel/.bash_rc`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/etc/skel/.bashrc`
  prefs: []
  type: TYPE_NORMAL
- en: Which configuration file clears the screen whenever the user signs out of the
    system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/etc.skel/.bash_logout`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/etc/skel/bash_logout`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/etc/skel/.logout`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/etc/skel/.bashlogout`
  prefs: []
  type: TYPE_NORMAL
- en: Which configuration file stores the commands executed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/etc/skel/.bash_history`
  prefs: []
  type: TYPE_NORMAL
- en: B. `~/.bash_history`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/etc/skel/bash_history`
  prefs: []
  type: TYPE_NORMAL
- en: D. `~/.history`
  prefs: []
  type: TYPE_NORMAL
- en: Which option prints the defaults for a new user with the `useradd` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-d`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-b`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-D`
  prefs: []
  type: TYPE_NORMAL
- en: D. `--defaults`
  prefs: []
  type: TYPE_NORMAL
- en: Which option allows to specify a shell when using `useradd` ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-c`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-d`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-S`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-s`
  prefs: []
  type: TYPE_NORMAL
- en: The `adduser` command is a symbolic link to which command in Fedora 28?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `adduser`
  prefs: []
  type: TYPE_NORMAL
- en: B. `add-user`
  prefs: []
  type: TYPE_NORMAL
- en: C. `user-mod`
  prefs: []
  type: TYPE_NORMAL
- en: D. `user-add`
  prefs: []
  type: TYPE_NORMAL
- en: Which option with the `chage` command will print out the account expiration
    settings?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-a`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-l`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-c`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-d`
  prefs: []
  type: TYPE_NORMAL
- en: Which code with the `passwd --status` command indicates that the account is
    locked?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `P`
  prefs: []
  type: TYPE_NORMAL
- en: B. `A`
  prefs: []
  type: TYPE_NORMAL
- en: C. `L`
  prefs: []
  type: TYPE_NORMAL
- en: D. `N`
  prefs: []
  type: TYPE_NORMAL
- en: Which option with the `groupmod` command specifies a primary group for a user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-g`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-G`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-A`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-b`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to change a group's password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `adduser`
  prefs: []
  type: TYPE_NORMAL
- en: B. `groupedit`
  prefs: []
  type: TYPE_NORMAL
- en: C. `groupmod`
  prefs: []
  type: TYPE_NORMAL
- en: D. `grouppasswd`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This site gives useful information: `/etc/skel`: [https://unix.stackexchange.com](https://unix.stackexchange.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about user account creation: [http://www.linfo.org](http://www.linfo.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This site gives useful information about various groups: [http://www.linuxguide.it](http://www.linuxguide.it)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
