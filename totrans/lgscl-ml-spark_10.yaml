- en: Chapter 10.  Configuring and Working with External Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter guides you on using external libraries to expand your data analysis
    to make the Spark more versatile. Examples will be given for deploying third-party-developed
    packages or libraries for machine learning applications with Spark core and ML/MLlib.
    We will also discuss how to compile and use external libraries with the core libraries
    of Spark for time series. As promised, we will also discuss how to configure SparkR
    to increase exploratory data manipulation and operations. In a nutshell, the following
    topics will be covered throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Third-party ML libraries with Spark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external libraries when deploying Spark ML on a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time series analysis using the Spark-TS package of Cloudera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring SparkR with RStudio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Hadoop run-time on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to provide a user-friendly environment for the developer, it is also
    possible to incorporate third-party APIs and libraries with Spark Core and other
    APIs such as Spark MLlib/ML, Spark Streaming, GraphX, and so on. Interested readers
    should refer to the following website that is listed on the Spark website as the
    **Third-Party Packages**: [https://spark-packages.org/](https://spark-packages.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This website is a community index of third-party packages for Apache Spark.
    To date, there are total 252 packages registered on this site, as shown in *Table
    1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Domain** | **No. of packages** | **URL** |'
  prefs: []
  type: TYPE_TB
- en: '| Spark core | 9 | [https://spark-packages.org/?q=tags%3A%22Core%22](https://spark-packages.org/?q=tags%3A%22Core%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Data sources | 39 | [https://spark-packages.org/?q=tags%3A%22Data%20Sources%22](https://spark-packages.org/?q=tags%3A%22Data%20Sources%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Machine learning | 55 | [https://spark-packages.org/?q=tags%3A%22Machine%20Learning%22](https://spark-packages.org/?q=tags%3A%22Machine%20Learning%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Streaming | 36 | [https://spark-packages.org/?q=tags%3A%22Streaming%22](https://spark-packages.org/?q=tags%3A%22Streaming%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Graph processing | 13 | [https://spark-packages.org/?q=tags%3A%22Graph%22](https://spark-packages.org/?q=tags%3A%22Graph%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Spark with Python | 5 | [https://spark-packages.org/?q=tags%3A%22PySpark%22](https://spark-packages.org/?q=tags%3A%22PySpark%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Cluster deployment | 10 | [https://spark-packages.org/?q=tags%3A%22Deployment%22](https://spark-packages.org/?q=tags%3A%22Deployment%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Data processing example | 18 | [https://spark-packages.org/?q=tags%3A%22Examples%22](https://spark-packages.org/?q=tags%3A%22Examples%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Applications | 10 | [https://spark-packages.org/?q=tags%3A%22Applications%22](https://spark-packages.org/?q=tags%3A%22Applications%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Tools | 24 | [https://spark-packages.org/?q=tags%3A%22Tools%22](https://spark-packages.org/?q=tags%3A%22Tools%22)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Total Packages: 252 |   |   |'
  prefs: []
  type: TYPE_TB
- en: 'Table 1: Third-party libraries for Spark based on application domain'
  prefs: []
  type: TYPE_NORMAL
- en: Third-party ML libraries with Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The 55 third-party machine learning libraries include libraries for neural data
    analysis, generalized clustering, streaming, topic modelling, feature selection,
    matrix factorization, distributed DataFrame for distributed ML, model matrix,
    Stanford Core NLP wrapper for Spark, social network analysis, deep learning module
    running, assembly of fundamental statistics, binary classifier calibration, and
    tokenizer for DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '*Table 2* provides a summary of the most useful packages based on use cases
    and application areas of machine learning. Interested readers should visit the
    respective websites for more insights:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Third party ML library for Spark** | **Use cases** |'
  prefs: []
  type: TYPE_TB
- en: '| thunderScalaNetwork | Neural networkLarge-scale neural data analysis with
    Spark where the neural network implementation is done with Scala. |'
  prefs: []
  type: TYPE_TB
- en: '| generalized-kmeans-clusteringpatchworkbisecting-kmeansspark-knn | ClusteringThis
    project generalizes the Spark MLLIB K-means cluster to support arbitrary distance
    functions.Highly scalable grid-density clustering algorithm for Spark MLlib.This
    is a prototype implementation of Bisecting K-Means Clustering on Spark.k-nearest
    neighbors algorithm on Spark. |'
  prefs: []
  type: TYPE_TB
- en: '| spark-ml-streamingstreaming-matrix-factorizationtwitter-stream-ml | StreamingVisualize
    streaming machine learning in Spark.Streaming Recommendation engine using matrix
    factorization with user and product bias.Machine learning over Twitter''s stream.
    Using Apache Spark, Web Server and Lightning Graph server. |'
  prefs: []
  type: TYPE_TB
- en: '| pipeline | Docker-based pipeliningEnd-to-End, real-time, advanced analytics
    big data reference pipeline using Spark, Spark SQL, Spark Streaming, ML, MLlib,
    GraphX, Kafka, Cassandra, Redis, Apache Zeppelin, Spark-Notebook, iPython/Jupyter
    Notebook, Tableau, H2O Flow, and Tachyon. |'
  prefs: []
  type: TYPE_TB
- en: '| dllibCaffeOnSpark`dl4j-spark-ml` | Deep learningdllib is a deep learning
    tool running on Apache Spark. Users need to download the tools as .jar and then
    can integrate with Spark and  develop deep-learning-based applications.CaffeOnSpark
    is a scalable deep learning running with the Spark executors. It is based on peer-to-peer
    (P2P) communication. `dl4j-spark-ml` can be used to develop deep-learning-based
    ML applications by integrating with Spark ML. |'
  prefs: []
  type: TYPE_TB
- en: '| kNN_ISsparkboostspark-calibration | ClassificationkNN-IS: An Iterative Spark-based
    design of the k-Nearest Neighbours classifier for big data.A distributed implementation
    of AdaBoost.MH and MP-Boost using Apache Spark.Assesses binary classifier calibration
    (that is, how well classifier outputs match observed class proportions) in Spark.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Zen | RegressionZen provides a platform for large-scale and efficient machine
    learning on top of Spark. For example, logistic regression, linear regression,
    Latent Dirichlet Allocation (LDA), factorization machines and Deep Neural Network
    (DNN) are implemented in the current release. |'
  prefs: []
  type: TYPE_TB
- en: '| modelmatrixspark-infotheoretic-feature-selection | Feature engineeringspark-infotheoretic-feature-selection
    tools provide an alternative to Spark for developing large-scale machine learning
    applications. They provides robust feature engineering through the pipelining
    including the feature extractors, feature selectors. It is focused on building
    sparse feature-vector-based pipelines.On the other hand, it can be used as a feature
    selection framework based on Information Theory. Algorithms based on Information
    Theory include mRMR, InfoGain, JMI, and other commonly used FS filters. |'
  prefs: []
  type: TYPE_TB
- en: '| spark-knn-graphs | Graph processingSpark algorithms for building and processing
    k-nn graphs |'
  prefs: []
  type: TYPE_TB
- en: '| TopicModeling | Topic modellingDistributed Topic Modelling on Apache Spark
    |'
  prefs: []
  type: TYPE_TB
- en: '| Spark.statistics | StatisticsApart from SparkR, Spark.statistics works as
    an assembler of basic statistics implementation based on the Spark core |'
  prefs: []
  type: TYPE_TB
- en: 'Table 2: Summary of the most useful third-party packages based on use cases
    and application areas of machine learning with Spark'
  prefs: []
  type: TYPE_NORMAL
- en: Using external libraries with Spark Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to work with these external libraries, instead of placing the jars
    in any specific folder, a simple fix would be to start the `pyspark` shell or
    spark-shell with the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will automatically load the required `spark-csv` jars. However, these
    two jar files have to be downloaded to the Spark distribution using the following
    command in Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to create an active Spark session, use the following line of codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have instantiated an active Spark session, use the following lines
    of code to read the csv input file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that here we define the `com.databricks.spark.csv` input format by using
    the `format()` method, dedicatedly developed by Databricks for faster CSV file
    reading and parsing, and by setting the auxiliary option for the header as true
    using the `option()` method. Finally, the `load()` method loads the input data
    from the `input/letterdata.data` location, for example.
  prefs: []
  type: TYPE_NORMAL
- en: As a continuation, in the next section, we will discuss configuring the Spark-TS
    library for time series data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interested readers should visit the third-party ML packages web page for Spark
    at [https://spark-packages.org/?q=tags%3A%22Machine%20Learning%22](https://spark-packages.org/?q=tags%3A%22Machine%20Learning%22)
    for the package-specific discussion, updates, and configuration procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Time series analysis using the Cloudera Spark-TS package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in *[Chapter 9](part0073_split_000.html#25JP22-0b803698e2de424b8aa3c56ad52b005d
    "Chapter 9.  Advanced Machine Learning with Streaming and Graph Data")*, *Advanced
    Machine Learning with Streaming and Graph Data*, we will see how to configure
    the Spark-TS package developed by Cloudera. Mainly, we will talk about the TimeSeriesRDD
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Time series data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Time series data consists of sequences of measurements, each occurring at a
    point in time. A variety of terms are used to describe time series data, and many
    of them apply to conflicting or overlapping concepts. In the interest of clarity,
    in Spark-TS, Cloudera sticks to a particular vocabulary. Three objects are important
    in time series data analysis: time series, instant, and observation:'
  prefs: []
  type: TYPE_NORMAL
- en: A time series is a sequence of real (that is, floating-point) values, each linked
    to a specific timestamp. Particularly, this sticks with time series as meaning
    a univariate time series. In Scala, a time series is usually represented by a
    Breeze presented at [https://github.com/scalanlp/breeze](https://github.com/scalanlp/breeze)
    vector, and in Python, a 1-D NumPy array (refer to [http://www.numpy.org/](http://www.numpy.org/)
    for more), and has a `DateTimeIndex` as shown at [https://github.com/sryza/spark-timeseries/blob/master/src/main/scala/com/cloudera/sparkts/DateTimeIndex.scala](https://github.com/sryza/spark-timeseries/blob/master/src/main/scala/com/cloudera/sparkts/DateTimeIndex.scala).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, an instant is the vector of values in a collection of time
    series corresponding to a single point in time. In the Spark-TS library, each
    time series is typically labeled with a key that enables it to be identified among
    a collection of time series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, an observation is a tuple of (timestamp, key, value), that is, a single
    value in a time series or instant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, not all data with timestamps are time series data. For example, logs
    don't fit directly into time series since they consist of discrete events, not
    scalar measurements taken at intervals. However, measurements of log messages
    per hour would constitute a time series.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Spark-TS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most straightforward way to access Spark-TS from Scala is to depend on
    it in a Maven project. Do this by including the following repo in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the raw `pom.xml` file, interested readers should go to the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/sryza/spark-timeseries/blob/master/pom.xml](https://github.com/sryza/spark-timeseries/blob/master/pom.xml)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, to access it in a spark-shell, download the JAR from [https://repository.cloudera.com/cloudera/libs-release-local/com/cloudera/sparkts/sparkts/0.1.0/sparkts-0.1.0-jar-with-dependencies.jar](https://repository.cloudera.com/cloudera/libs-release-local/com/cloudera/sparkts/sparkts/0.1.0/sparkts-0.1.0-jar-with-dependencies.jar),
    and then launch the shell with the following command as discussed in the *Using
    external libraries with Spark Core* section in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: TimeSeriesRDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the Spark-TS engineering blog written on the Cloudera website at
    [http://blog.cloudera.com/blog/2015/12/spark-ts-a-new-library-for-analyzing-time-series-data-with-apache-spark/](http://blog.cloudera.com/blog/2015/12/spark-ts-a-new-library-for-analyzing-time-series-data-with-apache-spark/),
    TimeSeriesRDD is central to Spark-TS, where each object in the RDD stores a full
    univariate series. Operations that tend to apply exclusively to time series are
    much more efficient. For example, if you want to generate a set of lagged time
    series from your original collection of time series, each lagged series can be
    computed just by looking at a single record in the input RDD.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, with imputing missing values based on surrounding values, or fitting
    time series models to each series, all of the data needed is present in a single
    array. Therefore, the central abstraction of the Spark-TS library is TimeSeriesRDD,
    which is simply a collection of time series on which you can operate in a distributed
    fashion. This approach allows you to avoid storing timestamps for each series
    and instead store a single `DateTimeIndex` to which all the series vectors conform.
    `TimeSeriesRDD[K]` extends `RDD[(K, Vector[Double])]`, where K is the key type
    (usually a string), and the second element in the tuple is a Breeze vector representing
    the time series.
  prefs: []
  type: TYPE_NORMAL
- en: 'A more technical discussion can be found in the GitHub URL: [https://github.com/sryza/spark-timeseries](https://github.com/sryza/spark-timeseries).
    Since this is a Third Party Package, a detailed discussion is out of the scope
    of this book, we believe.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SparkR with RStudio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume you have RStudio installed on your machine. Follow the steps
    mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open RStudio and create a new R script; then write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the necessary package for SparkR by using this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the SparkR environment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create the first DataFrame and print the first few rows, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You might need to install the following packages in order to make the `devtools`
    package work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Morever, you might need to install `libcurl` for RCurl, which devtools depends
    on. To do this, just run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now configure the `ggplot2.SparkR` package from GitHub using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s compute the skewness and kurtosis for the sample DataFrame that
    we have just created. Before that, load the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the DataFrame for the daily exercise example shown in the *Feature
    engineering and data exploration* section in *[Chapter 4](part0038_split_000.html#147LC2-5afe140a04e845e0842b44be7971e11a
    "Chapter 4. Extracting Knowledge through Feature Engineering")*, *Extracting Knowledge
    through Feature Engineering*, and show the first few rows using `head` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now calculate the skewness and kurtosis, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You are probably aware that we used the two terms `skewness` and `kurtosis`
    in [Chapter 4](part0038_split_000.html#147LC2-5afe140a04e845e0842b44be7971e11a
    "Chapter 4. Extracting Knowledge through Feature Engineering"), *Extracting Knowledge
    through Feature Engineering*. If you are not familiar with these two terms, here
    is a bit of definition of them. Well, from the statistical perspective, `skewness`
    is a measure of symmetry. Alternatively and more precisely, it signifies the lack
    of symmetry in a distribution of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Now you might be wondering what symmetric is. Well, a distribution of the dataset
    is symmetric if it looks the same to the left and right of the center point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kurtosis, on the other hand, is a measure of whether the data are heavy-tailed
    or light-tailed relative to a normal distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s plot the density plot graph by calling the `ggplot()` method
    of the `ggplot2.SparkR` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with the `ggplot2` R package, note that `ggplot2` is
    a plotting system for R based on the grammar of graphics of base and lattice graphics.
    It provides many fiddly details of the graphics that make plotting a hassle, for
    example, placing or drawing legends in a graph, as well as providing a powerful
    model of graphics. This will make your life easier in order to produce simple
    as well as complex multi-layered graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More info about `ggplot2` and its documentation can be found at the following
    website: [http://docs.ggplot2.org/current/](http://docs.ggplot2.org/current/).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Hadoop run-time on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are developing your machine learning application on windows using Eclipse
    (as Maven project of course), probably you will face a problem since Spark expects
    that there is a runtime environment for Hadoop on Windows too.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, suppose you are running a Spark project written in Java
    with main class as `JavaNaiveBayes_ML.java`, then you will experience an IO exception
    saying that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring Hadoop run-time on Windows](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: IO exception due to the missing Hadoop runtime'
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that by default Hadoop is developed for the Linux environment
    and if you are developing your Spark applications on windows platform, a bridge
    is required that will provide the Hadoop environment for the Hadoop runtime for
    Spark to be properly executed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, how to get rid of this problem then? The solution is straight forward.
    As the error message says, we need to have an executable namely `winutils.exe`.
    Now download the `winutils.exe` file from the code directory of Packt for this
    chapter and copy and paste it in the Spark distribution directory and configure
    Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, suppose your Spark distribution containing Hadoop is located
    at `C:/Users/spark-2.0.0-bin-hadoop2.7`. Inside the Spark distribution there is
    a directory named `bin.` Now, paste the executable there (that is, `path = C:/Users/spark-2.0.0-binhadoop2.7/``bin/`).
  prefs: []
  type: TYPE_NORMAL
- en: The second phase of the solution is going to Eclipse, select the main class
    (that is, `JavaNaiveBayes_ML.java` in this case), and then go to the **Run** menu.
    From the **Run** menu go to the **Run Configurations** option and from this option
    select the **Environment** tab. If you select the tab, you a will have the option
    to create a new environmental variable for Eclipse suing the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Now create a new environmental variable and put the value as `C:/Users/spark-2.0.0-bin-hadoop2.7/`.
    Now press on **apply** and re-run your application and your problem should be
    resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'More technically, the details of the IO exception can be described as follows
    in Figure 1:'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed how to use external libraries with Spark to expand
    data analyses.
  prefs: []
  type: TYPE_NORMAL
- en: More and more Spark as well as third-party packages are being developed by open
    source contributors. Readers should be updated with the latest news and release
    on the Spark website. They also should be notified of about the latest machine
    learning APIs, since the development of Spark is continuous and innovative and,
    of course, sometimes after a certain package becomes obsolete or deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we have tried to guide you on how to use the most popular
    and widely used machine learning algorithms that have been developed by Spark.
    However, there are other algorithms too that we could not discuss, and more and
    more algorithms will be added to the Spark ML and MLlib packages.
  prefs: []
  type: TYPE_NORMAL
- en: This is more or less the end of our little journey with Spark. Now a general
    suggestion from our side to you as readers, or if you are relatively new to machine
    learning, Java, or Spark at first try to understand whether a problem is really
    a machine learning problem. If it is a machine learning problem, try to guess
    what type of learning algorithms should be the best fit, that is, classification,
    clustering, regression, recommendation, or frequent pattern mining.
  prefs: []
  type: TYPE_NORMAL
- en: Then define and formulate the problem. After that you should generate or download
    the appropriate data based on the feature engineering concept of Spark that we
    have discussed. Then you can select an ML model that will provide better results
    in terms of accuracy. However, as discussed earlier, the model selection really
    depends on your data and problem type.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your data ready to train the model, go straight to train the
    model towards making predictive analytics.
  prefs: []
  type: TYPE_NORMAL
- en: When your model is trained, evaluate it to see how it goes and fulfills your
    prediction expectations. Well, if you are not happy with the performance, try
    changing to other ML algorithms towards model selection. As discussed in [Chapter
    7](part0059_split_000.html#1O8H62-0b803698e2de424b8aa3c56ad52b005d "Chapter 7. Tuning
    Machine Learning Models"), *Tuning Machine Learning Models*, even proper model
    selection cannot provide the best result sometimes because of the nature of the
    data you have.
  prefs: []
  type: TYPE_NORMAL
- en: So what is to be done? It's simple. Tune your ML model using the available tuning
    algorithms to properly set the hyperparameters. You might also need to make your
    model adaptable for new data types, especially if you are developing an ML application
    for a dynamic environment such as time series analysis or streaming analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, deploy your model and you have it as a robust ML application.
  prefs: []
  type: TYPE_NORMAL
- en: Our final recommendation to the readers is to browse the Spark website (at [http://spark.apache.org/](http://spark.apache.org/))
    regularly to get updates and also try to incorporate the regular Spark provided
    APIs with other third-party applications to get the best result of the collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: '***This eBook was posted by AlenMiler on AvaxHome!***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Many New eBooks in my Blog:*** [http://avxhome.in/blogs/AlenMiler](https://tr.im/fgrfegtr)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Mirror:*** [https://avxhome.unblocked.tw/blogs/AlenMiler](https://tr.im/geresttre)'
  prefs: []
  type: TYPE_NORMAL
