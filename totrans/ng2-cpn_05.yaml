- en: Chapter 5. Building Dynamic Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components are data driven by nature. They should be able to render dynamic
    data, respond to user interactions, and react to events.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will continue where we stopped in [Chapter 4](part0031.xhtml#aid-TI1E1
    "Chapter 4. Building a Basic Component"), *Building a Basic Component*, focusing
    on the component template syntax, and learn how to bind data and events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that will be covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Data interpolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using core directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-way bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data interpolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 3](part0025.xhtml#aid-NQU21 "Chapter 3. The TypeScript Primer"),
    *The TypeScript Primer*, we bound a simple string to the template. If you haven''t
    done it, refer to [Chapter 4](part0031.xhtml#aid-TI1E1 "Chapter 4. Building a
    Basic Component"), *Building a Basic Component*. Let''s overview our app-c`omponent`
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we will focus on the template. Remove the `encapsulation` and `styles`
    properties from the component decorator to make it more clear and focused. While
    doing this, let''s add a type and a constructor to our class as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is a one-way binding from the data source (the component class in our case)
    to the view (the component template). Angular interpolates the `title` and outputs
    the result between the double curly brace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The double curly braces can only interpolate strings. If we try to bind an
    object, it will not work. In the following example, instead of a `title`, I created
    an object which contains the `title` and inspects the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data interpolation](../Images/image00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you can't see the result in the browser, make sure you run the `ng serve`
    command. If you are not sure how to do it, refer to [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Setting Up an Angular 2 Development Environment with angular-cli"),
    *Setting Up an Angular 2 Development Environment with angular-cli*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can bind to object properties, just remember that everything will be interpolated
    as a string. The following example will render the `title` properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What we write between the curly braces is an angular expression. It means that
    angular evaluates the expression before it is converted into a string. In other
    words, we can put simple logic in our expressions and even bind to a method. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside angular expressions we can''t use the `new` keyword and operators such
    as: `++`, `--`, and `+=`.'
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, expressions shouldn't be complex.
  prefs: []
  type: TYPE_NORMAL
- en: The context of the component template is the component instance. It means that
    you can't access global variables such as `window`, `document`, or `console.log`.
  prefs: []
  type: TYPE_NORMAL
- en: Core directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are familiar with Angular 1.x, you already know what a directive is.
    If not, here is a quick definition: a directive is a custom attribute that adds
    functionality to an element. In Angular, a component is considered to be a special
    case of a directive which contains a template.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular 2 core includes several directives—NgClass, NgFor, NgIf, NgStyle, NgSwitch,
    NgSwitchWhen, and NgSwitchDefault.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Angular 1, you already know what these directives can
    do, although the syntax and the underneath implementation have been changed.
  prefs: []
  type: TYPE_NORMAL
- en: Those directives aim to help us implement common templating tasks such as DOM
    manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use core directives in a component, we need to import the `BrowserModule`
    module into the module where the component fits. This was automatically done by
    angular-cli when generating the application within the `app.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's explore how to use them in our code.
  prefs: []
  type: TYPE_NORMAL
- en: NgIf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like Angular 1, the NgIf directive will remove or recreate a portion of
    the DOM based on an expression that we passed. The expression should evaluate
    to `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we use `ngIf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about the asterisk before the `ngIf` attribute, we will discuss
    it in a moment. We assign an expression called `showFullName`, which exists on
    the component class. So, on the component class, we declare a class member called
    `showFullName` of type Boolean and initialize it on the constructor to be `false`.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the `<h3>` tag will not render to the DOM, and we won't see the
    full name.
  prefs: []
  type: TYPE_NORMAL
- en: The asterisk – *
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The asterisk (`*`) before the directive name is a syntactic sugar of Angular
    that hides the use of the `<template>` tag from us. This tag is being used in
    *structural directives*, which is a term that describes a directive that impacts
    the structure of the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example can be written like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That's what Angular will do behind the scenes, but we don't need to worry when
    using the shorter version of the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: NgClass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The NgClass directive, just like in Angular 1, conditionally adds and removes
    CSS classes. We pass an expression that can be interpreted in three different
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: A string that contains all the CSS classes that we want to add, delimited by
    space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of CSS classes to be added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An object that maps CSS classes to a Boolean value (`true` or `false`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s demonstrate the various options to use `ngClass`, start with a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We apply the `ngClass` to the `<h2>` tag and pass a method that we implement
    on the component class. The `getClass()` method returns a string containing a
    string that includes the names of both of the CSS classes we want to append to
    the `<h2>` element. Don't worry about the square brackets that surround the `ngClass`
    directive. We will explain this syntax in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could implement that method in two other ways in order to achieve the same
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is by returning an array:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Returning an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The second is by using square brackets `( [ ] )`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Angular 2, we can bind data directly to DOM or directive properties. The
    `ngClass` selector was defined as a property, so if we want to use it, we need
    to use the square brackets syntax. We will see more examples later in this chapter
    when we deal with data bindings.
  prefs: []
  type: TYPE_NORMAL
- en: NgStyle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ngStyle` directive will change the inline styles of the element based
    on an expression that evaluates an object. In the following example, we will use
    `ngStyle` to dynamically assign a font size to the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we created a class member that initializes a property named
    `titleSize` and then uses it to determine the font size style on the `<h1>` tag,
    with `ngStyle`.
  prefs: []
  type: TYPE_NORMAL
- en: NgSwitch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The NgSwitch directive adds or removes DOM subtrees according to the value
    of the `switch` expression. To effectively use this directive, we used `ngSwitchCase`
    and `ngSwitchDefault` within the `ngSwitch` directive block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There are a few things to notice—the `ngSwitch` directive is not a structural
    directive, which means it does not use a `<template>` tag and also does not manipulate
    the DOM tree. This is done by the `ngSwitchCase` and the `ngSwitchDefault` directives.
    So, we use the square brackets when using the `ngSwitch` directive, and the asterisk
    for the rest.
  prefs: []
  type: TYPE_NORMAL
- en: NgFor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ngFor` directive creates a new element (instantiates a new template),
    once per item from a collection that it repeats. If you are familiar with Angular
    1, the `ngFor` directive is similar to the `ng-repeat` directive in concept, but
    the underneath implementation and syntax is different:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we are creating a list of colors by repeating each
    element in a string array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Property bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Angular 2, we can easily bind to each DOM property. For example, let''s
    bind a value to the `disabled` property of a button and initialize it to be `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is true to any property. Let''s see another example, this time with an
    input element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Event bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until now, we learned about two kinds of data binding: interpolation (using
    the curly braces) and properties binding. Both of them are considered to be one-way
    data binding from the data source to the view. In real life, our component should
    be able to respond to user events. Luckily, in Angular 2, this is simple as property
    binding.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can respond to any native DOM event by surrounding it with parentheses and
    assign it to a method on the component class. Let''s see how we can respond to
    the click event on our button. We need to wrap the click event of the button in
    parentheses, and assign a method that will be invoked in return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use data binding techniques to create a simple toggle component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Two-way bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned how to use one way data bindings using properties and events. Angular
    introduces a third option to use with input controls. This directive is called
    `ngModel`. The syntax can be a little strange, because this directive combines
    property and event bindings together.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `ngModel`, we can easily achieve two-way data binding easily. In the following
    example, we will bind username and password inputs to a user object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we transform our static component to a dynamic component
    using core directives and data binding.
  prefs: []
  type: TYPE_NORMAL
- en: Angular 2 keeps the data binding easy, much like Angular 1\. The ability to
    bind data to native DOM properties and events directly is a powerful feature.
    The core directives of Angular 2 includes only a few directives that give us some
    extra functionality that otherwise is hard to achieve.
  prefs: []
  type: TYPE_NORMAL
