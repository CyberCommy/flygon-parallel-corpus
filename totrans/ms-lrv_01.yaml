- en: Chapter 1. Designing Done Right with phpspec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many things have happened since Laravel's humble beginnings in 2011\. Taylor
    Otwell, a .NET programmer, sought out PHP as a way to do a side project, since
    he was told that hosted PHP was cheap and ubiquitous. What originally started
    out as an extension to CodeIgniter become its own code. Freeing up the code base
    from the limitations of CodeIgniter's PHP 5.2, all of the new features that PHP
    5.3 had to offer, such as namespacing and closures, could be used. The time span
    between the release of versions 1 and 3 of Laravel was only one year. With version
    3, things happened very quickly. After its explosion in popularity, which happened
    around the time that version 4 was released, it quickly began to steal the market
    share from other popular frameworks such as CodeIgniter, Zend, Symfony, Yii, and
    CakePHP to eventually take the pole position. Along with its expressive syntax,
    great documentation, and a passionate founder came large community mainstays the
    IRC and Slack chat room, The Laravel Podcast, and the Laracasts instructional
    video website. Also, the newly created commercial support such as Envoyer, which
    provides *100 percent uptime*, means that Laravel was also welcomed by enterprises.
    With the release of Laravel 4.2, the minimum required PHP version was increased
    to 5.4 to take advantage of modern PHP features such as *traits*.
  prefs: []
  type: TYPE_NORMAL
- en: Using Laravel's traits along with the new syntax, such as the [] array shortcut,
    makes coding a breeze. Laravel's expressive syntax, coupled with these modern
    PHP features, makes it a great choice for any developer who wishes to build robust
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing Done Right with phpspec](graphics/B04559_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Laravel's rise in success, as reported by Google Trends
  prefs: []
  type: TYPE_NORMAL
- en: A new era
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In late 2014, the second most important part of the history of Laravel occurred.
    When what was scheduled to be version 4.3 changed many of the core principals
    of Laravel, the community decided that it should become version 5.
  prefs: []
  type: TYPE_NORMAL
- en: The arrival of Laravel 5 brings about many changes in the way we use it to build
    software. The built-in MVC architecture that was inherited from frameworks such
    as CodeIgniter has been abandoned in favor of being more dynamic, modular, and
    even daringly framework-agnostic. Many of the components have been decoupled as
    much as possible. The most important part of Laravel's history will be the arrival
    of Laravel version 5.1, which will have **long-term support** (**LTS**). Thus,
    Laravel's place in enterprises will be solidified even more. Also, the minimum
    PHP requirements will be changed to version 5.5\. So, for any new projects, PHP
    5.5, or even PHP 5.6, is recommended because upgrading to PHP version 7 will be
    even easier.
  prefs: []
  type: TYPE_NORMAL
- en: A leaner app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/app` directory was slimmed down, leaving in only the most essential parts
    of the application. Directories such as `config`, `database`, `storage`, and `tests`
    have been moved out of the `app` directory since they are auxiliary to the application
    itself. Most importantly, the integration of the testing tools has matured drastically.
  prefs: []
  type: TYPE_NORMAL
- en: PSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to the efforts of the **Framework Interoperability Group** (**PHP-FIG**),
    the developer of the **PHP Standard Recommendation** (**PSR**), the reading, writing,
    and formatting of the framework code is becoming easier. It even allows developers
    to more easily work in more than one framework. Laravel is a part of the FIG and
    continues to adopt its recommendations into the framework. Laravel 5.1, for example,
    will adopt the PSR-2 standard. For more information about the PHP FIG and PSR,
    visit the PHP-FIG website, [http://www.php-fig.org](http://www.php-fig.org).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The latest up-to-date instructions to install Laravel can always be found at
    the Laravel website, [http://laravel.com](http://laravel.com). To begin using
    Laravel in a development environment, the current best practices suggest using
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vagrant**: This provides a convenient way to manage a virtual machine, such
    as Virtualbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PuPHPet**: This is an excellent tool that can be used to create a virtual
    machine of various types. For more information about PuPHPet, visit [https://puphpet.com](https://puphpet.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phansible**: This is an alternative to PuPHPet. For information about Phansible,
    visit [http://phansible.com](http://phansible.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homestead**: This is maintained by the Laravel community, and is a virtual
    machine that is created specifically for Laravel and which uses NGINX instead
    of Apache. For more information about Homestead, visit [https://github.com/laravel/homestead](https://github.com/laravel/homestead).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic process involves downloading and installing Composer and then adding
    Laravel as a dependency. An important detail is that the storage directory, which
    is located parallel to the `/app` directory, needs to be set in such a way that
    it is writable by the web server user in order to allow Laravel 5 to do things
    like writing the log files. It is also important to make sure that `$ php artisan
    key:generate` is used to generate a 32-character key that is used for hashing
    because, since the release of PHP 5.6, Mcrypt is more strict as regards its requirements.
    For Laravel 5.1, OpenSSL will replace Mcrypt.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Laravel 4, the environments were configured in a manner that relied on the
    hostname of the server or a development machine, and this was rather contrived.
    Laravel 5 instead uses a `.env` file that sets up the various environments. This
    file is included in `.gitignore`. Thus, each machine should receive its configuration
    from a source outside the source code control.
  prefs: []
  type: TYPE_NORMAL
- en: 'So for example, something like the following code can be used to set up a local
    development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Namespacing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A nice new feature of Laravel is that it allows you to set the highest level
    namespace to something such as `MyCompany` through the `app:name` command. This
    command will actually change the namespace of all the relevant files inside the
    `/app` directory from App to `MyCompany`, for example. This namespace then lives
    inside the `/app` directory. This builds namespacing right into virtually every
    file whereas previously, in version 4.x, it was optional.
  prefs: []
  type: TYPE_NORMAL
- en: TDD done right
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The culture of test-driven development is not new. Rather, it has been around
    even before Kent Beck wrote SUnit in the 1990's. The xUNIT family of unit testing
    frameworks, which stemmed from SUnit, has grown to provide a testing solution
    for PHP.
  prefs: []
  type: TYPE_NORMAL
- en: PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP port of the PHP testing software is named PHPUnit. Yet, test-driven
    development in the PHP language is a fairly recent concept. For example, in his
    book, "*The Grumpy Programmer's Guide To Building Testable PHP Applications*",
    which was published at the end of 2012, *Chris Hartjes* wrote "I started looking
    into the culture of testing surrounding CodeIgniter. It's weaker than a newborn
    baby."
  prefs: []
  type: TYPE_NORMAL
- en: Testing has been a part of the Laravel framework since version 3 that uses the
    PHPUnit unit-testing tool, and therefore Laravel's inclusion of the `phpunit.xml`
    file was a huge leap forward in the effort to encourage developers to embrace
    test-driven development.
  prefs: []
  type: TYPE_NORMAL
- en: phpspec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another testing tool, RSpec, emerged in the Ruby community in 2007 and was a
    refinement on test-driven development. It featured **behavior driven development**
    (**BDD**). The phpspec tool, which brought ported RSpec's BDD to PHP, is growing
    rapidly in popularity. Its co-creator, Marcello Duarte, repeatedly states that
    "BDD is TDD done right". Therefore, BDD is simply an *improvement* or evolution
    of TDD. Laravel 5 now cleverly includes phpspec as a way to accentuate the *design
    by specification* paradigm of behavior-driven development.
  prefs: []
  type: TYPE_NORMAL
- en: Since an essential step in building a Laravel 5 application is to specify which
    entities to create, after installing and configuring Laravel 5, the developer
    may immediately start designing by running phpspec as a design tool.
  prefs: []
  type: TYPE_NORMAL
- en: Entity creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a sample web application. If the client has asked us to build a
    booking system for tourism structures, then the system may contain the entities
    such as accommodations (hotels and bed and breakfasts, for example), rooms, rates,
    and reservations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplified database schema will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Entity creation](graphics/B04559_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The MyCompany database schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The database schema has the following assumptions:'
  prefs: []
  type: TYPE_NORMAL
- en: An accommodation has many rooms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservations are made for a single user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation may include more than one room
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation has a start date and an end date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rates are valid for one room from a start date to an end date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A room has many amenities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The start date of the reservation must come before the end date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation cannot be made for more than fifteen days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation cannot include more than four rooms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing with phpspec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's begin using phpspec as a design tool to build our entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the top-level namespace is `MyCompany`, then use phpspec and simply type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On typing the preceding command, `spec/AccommodationSpecRepository.php` gets
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The path to phpspec should be added to either the `.bashrc` or the `.bash_profile`
    file so that phpspec can be run directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On typing the preceding command, the developer is shown, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After typing *Y*, the `AccommodationRepository.php` class is created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of phpspec lies in its simplicity and the ability to speed up the
    creation of classes which carry along with the specification.
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing with phpspec](graphics/B04559_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic steps involved in describing and creating a class with phpspec
  prefs: []
  type: TYPE_NORMAL
- en: Specifying with phpspec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the core of phpspec is the ability to allow us to specify the behavior of
    entities and simultaneously test them. By simply specifying what the business
    rules are as given by the customer, we can easily create tests for each business
    rule. However, the real power of phpspec lies in how it uses an expressive, natural
    language syntax. Let''s take a look at the business rules that were previously
    given to us regarding reservations:'
  prefs: []
  type: TYPE_NORMAL
- en: The start date of the reservation must come before the end date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation cannot be made for more than fifteen days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reservation cannot include more than four rooms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'phpspec will produce the following output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run phpspec by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'phpspec will respond as usual with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, phpspec will create the `ReservationValidator` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `validate()` function that will take the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: A start date string that determines the start of the reservation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An end date string that determines the end of the reservation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of `room` objects to add to the reservation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the code snippet that creates the `validate()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will include the `Carbon` class, which will help us to work with the dates.
    For the first business rule, which states that the start date of the reservation
    must come before the end date, we can now create our first specification method
    in the `ReservationValidatorSpec` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding function, phpspec starts the specification with `it` or `its`.
    phpspec uses the snake case for high legibility, and `start_date_must_be_less_than_the_end_date`
    is an exact copy of the specification. Isn't this just wonderful?
  prefs: []
  type: TYPE_NORMAL
- en: When `$start_date`, `$end_date`, and the `room` are passed, they automatically
    get mocked. Nothing else is needed. We will create a `$rooms` array that is valid.
    However, we will set the `$start_date` and `$end_date` in such a way that they
    both have the same values to cause the test to fail. The expression syntax is
    shown in the preceding code. The `shouldThrow` comes before `during`, which then
    takes the method name `Validate`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have given phpspec what it needs to automatically create the `validate()`
    method for us. We will specify that `$this`, which is the `ReservationValidator`
    class, will throw an `InvalidArgumentException`. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, phpspec asks us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'By simply typing *Y* at the prompt, the method is created inside the `ReservationValidator`
    class. It is that easy. When phpspec is run again, it will fail because the method
    has not thrown an exception yet. So now, the code needs to be written. Inside
    the function, we will create two `Carbon` objects from a string that is formatted
    like "2015-06-02" so that we are able to harness the power of Carbon''s powerful
    date comparisons. In this case, we will use the `$date1->diffInDays($date2);`
    method to test whether the difference between the `$end` and the `$start` is less
    than one. If this is the case, we will throw the `InvalidArgumentException` and
    display a user-friendly message. Now, when we rerun phpspec, the test will pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Red, green, refactor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rules of test-driven development call for *red*, *green*, *refactor*, which
    means that once the tests pass (green), we should try to refactor or simplify
    the code inside the method without altering the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the `if` test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code isn''t quite readable. We can refactor it in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: However, even the preceding code is not very legible, and we are also using
    an integer directly in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move `0` into a constant. To improve the readability, we''ll change
    it to the minimum amount of days required for a reservation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s extract the comparison into a method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now write the `if` statement like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding statement is much more expressive and readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the next rule, which states that a reservation cannot be made for
    more than fifteen days, we''ll need to create the method in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we set the `$end_date` so that it is assigned a date that occurs more
    than a month after the `$start_date` to cause the method to throw an `InvalidArgumentException`.
    Once again, upon execution of the `phpspec` command, the test will fail. Let''s
    modify the existing method to check the date range. We''ll add the following code
    to the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, phpspec happily runs all the tests successfully. Refactoring, we
    will once again extract the `if` condition and create the constant, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tidying things up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We could leave things like this, but let's clean it up since we have tests.
    Since the `endDateIsGreaterThanStartDate($end, $start)` and `daysAreGreaterThanMaximumAllowed($end,
    $start)` functions both check for the minimum and maximum allowed stay respectively,
    we can call them from another method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will refactor `endDateIsGreaterThanStartDate()` into `daysAreLessThanMinimumAllowed($end,
    $start)` and then create another method that checks both the minimum and maximum
    stay length, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This leaves us with simply one function, instead of two, in the `createNew`
    function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For the third rule, which states that a reservation cannot contain more than
    four rooms, the process is the same. Create the specification, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The change here will be in the parameters. This time, we will mock five rooms
    so that the test will fail, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Five room objects will be loaded into the `$rooms` array, and the test will
    fail as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding code to check the size of the array, the final class will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The method is very clean. There are only two `if` statements—the first to verify
    that the date range is valid, and other one to verify that the number of rooms
    is within the valid range. The constants are easily accessible and can be changed
    as the business requirements change. Clearly, the addition of phpspec into the
    development workflow combines what earlier required two steps—writing the assertions
    with PHPUnit and then writing the code. Now, we will leave phpspec and move on
    to Artisan, which developers are familiar with as it was a feature of the previous
    versions of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we''ll create some sample controllers. At the time of writing this book,
    we need to use Artisan and phpspec together. Let''s create a controller for the
    `room` entity, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this will be created in `app/Http/Controllers` directory, which is
    a new location for Laravel 5\. The new HTTP directory houses the controllers,
    middleware, and requests directories, grouping together the files related to the
    HTTP request or the actual request. Additionally, this directory configuration
    is optional, and routes can call any autoloaded location, usually through a namespaced
    PSR-4 structure.
  prefs: []
  type: TYPE_NORMAL
- en: The command bus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Laravel 5 has adopted the command bus pattern, which creates commands that get
    created in the `app/Commands` directory. Whereas commands in Laravel 4 were thought
    of as command-line tools, in Laravel 5, the command is thought of as a class whose
    methods can be used from within the application, allowing for an excellent reuse
    of code. The concept of a command here is a task that needs to be done, or in
    our example, a room to be reserved for a user. The paradigm of a bus then transports
    the command using the new `DispatchesCommands` trait, which is used in the base
    controller class. Every controller created by Artisan extends this class to a
    handler method, where the actual work is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Laravel''s command bus design pattern, we''ll now use Artisan to create
    a few commands. We''ll go into detail about commands in a future chapter, but
    to begin, we will type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Typing this creates a command to reserve a room which could be called from anywhere
    in the code, isolating the business logic from the controllers and models, and
    also allowing the command to be executed in an asynchronous mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After filling in the details of the command, the class will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--handler` parameter creates an additional class, `ReserveRoomCommandHandler`,
    containing a constructor and a handle method, which injects the `ReserveRoomCommand`.
    This file will be present in the `app/Handlers/Commands` directory. If the `--handler`
    flag is not used, then the `ReserveRoomCommand` class will contain its own `handler`
    method, and the separate handler class will not get created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We will fill in the handle method with the validation of the reservation, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: phpspec adds a mature, robust, test-first, test-driven, and a specification-by-example
    approach to creating the business logic aspect of the software. This, coupled
    with the ease of creation of models, controllers, commands, events, and event
    handlers, sets Laravel at the front of the PHP framework race. Also, it has adopted
    many best practices that are used by the best programmers in the industry.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use phpspec to easily design classes and
    their accompanying tests from the command line. This workflow, accompanied by
    Artisan, makes the process of setting up the basic structure of a Laravel 5 application
    very easy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at database migrations, the mechanics
    behind them, and ways to create a seed for testing.
  prefs: []
  type: TYPE_NORMAL
