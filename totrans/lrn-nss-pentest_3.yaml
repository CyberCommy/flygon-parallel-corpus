- en: Chapter 3. Scan Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vulnerability scan analysis is the next step to scanning. For a vulnerability
    scan assessment to be successful and effective, an accurate analysis of vulnerabilities
    is absolutely necessary. As most of the scanners produce the scan output in line
    with the vulnerability plugins available in its repository, a human analysis is
    highly recommended to avoid false positives and false negatives. In general, a
    false positive or a false negative represent a scenario where vulnerabilities
    are either inaccurately reported or not reported at all in the scan output. The
    definitions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**False positive**: More commonly encountered, this term means vulnerabilities
    reported as active in the system do not exist in reality; this means it may be
    a result of incorrect vulnerability reporting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**False negative**: An output in a vulnerability scan will essentially mean
    that a vulnerability that exists in reality in the infrastructure is not reported
    in the scan output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to effectively analyze the output of the
    Nessus scan result by covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Result analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False positive analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Result analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter of this book, we learnt about performing and saving
    the scan result. This section covers how to read and interpret the Nessus scan
    report. For the purpose of illustration, a sample report is used for highlighting
    the vulnerabilities in a Linux system. The report we use for reference is saved
    in the HTML format and includes details such as **Hosts Summary**, **Vulnerabilities
    By Host**, and **Vulnerabilities By Plugin**, which were chosen while saving the
    report.
  prefs: []
  type: TYPE_NORMAL
- en: Report interpretation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nessus offers different options such as HTML, PDF, and **comma-separated values**
    (**CSV**) to save a report. While saving the report—to get the summary and details
    by vulnerability or host—both the options should be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical **Nessus Scan Report** in HTML format is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Report interpretation](img/7440OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hosts Summary (Executive)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Hosts Summary (Executive)** section will include the count of vulnerabilities
    against each critical category along with a summarized details of each vulnerability;
    this includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Severity** (severity rating along with the CVSS score): This defines how
    critical the observed vulnerability is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin Id**: This is the unique identifier for the plugin to check against
    which vulnerability it was found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: This displays the name of the vulnerability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot displays a sample report showing the host''s summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hosts Summary (Executive)](img/7440OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Vulnerabilities By Host
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Vulnerabilities By Host** section of the report gives a summary of the
    vulnerability findings per host. The **Summary** gives details about the scan
    running time, basic details about the host scanned, and the count of the number
    of vulnerabilities grouped together by the critical rating.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is a sample report showing the host''s summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerabilities By Host](img/7440OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot displays the **Vulnerabilities By Host** option with
    the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scan Information**: This section displays the scan''s **Start time** and
    **End time** in the day/time/year format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host Information**: This section displays the **DNS Name**, **IP**, **MAC
    Address**, and **OS**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Results Summary**: This section gives a count of the vulnerabilities that
    are grouped together as per the criticality rating assigned by Nessus. These categories
    are **Critical**, **High**, **Medium**, **Low**, and **Info**. It also shows the
    **Total** count of vulnerabilities reported by Nessus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Common Vulnerability Scoring System (CVSS)**'
  prefs: []
  type: TYPE_NORMAL
- en: Based on the scoring system, Nessus uses **Common Vulnerability Scoring System**
    (**CVSS**) to rate vulnerabilities. This is an open source vulnerability-rating
    system based on the characteristics and impact of vulnerability. It includes parameters
    such as the intrinsic features of vulnerability, features of vulnerability that
    change over time, and the characteristics of vulnerability that are specific to
    an environment. Details of the same can be found at [http://www.first.org/cvss/cvss-guide](http://www.first.org/cvss/cvss-guide).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the CVSS scores based on the vulnerability rating
    used by Nessus. As explained earlier in this chapter, the rating reported by Nessus
    can be analyzed further as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CVSS score | Criticality |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Info |'
  prefs: []
  type: TYPE_TB
- en: '| <4 | Low |'
  prefs: []
  type: TYPE_TB
- en: '| <7 | Medium |'
  prefs: []
  type: TYPE_TB
- en: '| <10 | High |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Critical |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CVSS scores are referenced from different content available over Internet, including
    Nessus user guide available at [http://www.tenable.com](http://www.tenable.com).
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities By Plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Vulnerabilities By Plugin** section contains all the relevant details
    about the vulnerability. The following section displays a screenshot with the
    details captured for describing the vulnerability, along with a brief explanation
    of each field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is for illustration purposes only; additional reference
    links and **Common Vulnerability and Exposures** (**CVE**) have been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerabilities By Plugin](img/7440OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays **References** and the **CVSS Base Score**
    in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerabilities By Plugin](img/7440OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays the **Plugin Information** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerabilities By Plugin](img/7440OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The vulnerability details which are captured in the preceding screenshots are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Vulnerability parameter | Details |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Synopsis | This section displays the key characteristics of the vulnerability.
    For example, here, the synopsis section describes the missing security patch.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Description | This section gives details about the vulnerability and includes
    key security issues that exist because of the identified vulnerability. For example,
    a key security issue because of a missing patch along with the CVE number is mentioned
    in the screenshot. High-level recommendation is also covered in this section.
    |'
  prefs: []
  type: TYPE_TB
- en: '| See Also | This section contains reference links (if any) useful for better
    understanding of the issue released by the vendor of the component/infrastructure
    where the vulnerability is found. |'
  prefs: []
  type: TYPE_TB
- en: '| Solution | This section gives recommendations for vulnerability mitigation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Risk Factor | This section displays the risk rating of the identified vulnerabilities.
    For example, **Critical**, **High**, and **Medium**. |'
  prefs: []
  type: TYPE_TB
- en: '| CVSS Base Score | This section displays the CVSS score based on which the
    risk rating is calculated. |'
  prefs: []
  type: TYPE_TB
- en: '| References | This section displays the CVE and CWE information of the issues
    observed. XREF is a cross-reference to other information sources related to the
    vulnerability. |'
  prefs: []
  type: TYPE_TB
- en: '| Plugin Information | This section displays details about the plugin that
    enables the finding of this vulnerability. |'
  prefs: []
  type: TYPE_TB
- en: '| Host | This section displays the IP address of the host on which this vulnerability
    is observed along with the current and suggested details regarding the infrastructure
    on which the vulnerability was observed. |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Common Vulnerability and** **Exposures** (**CVE**) is a database of publicly
    known security vulnerabilities and exposures. Each vulnerability is assigned a
    unique CVE number, which is cross-referenced in the Nessus report for providing
    further details about the vulnerability. For further information, refer to [http://cve.mitre.org](http://cve.mitre.org).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Weakness Enumeration** (**CWE**) is a dictionary of common weakness
    types, which gives details about various commonly known vulnerabilities. This
    is also referenced by Nessus for better understanding of the vulnerabilities.
    For further information, refer to [http://cwe.mite.org](http://cwe.mite.org).'
  prefs: []
  type: TYPE_NORMAL
- en: False positive analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: False positive refers to the issues or vulnerabilities highlighted by any scanning
    tool, but which don't actually exist on the target system. The false positive
    rate differs from tool to tool; the few common pointers that can be considered
    for a false positive analysis are listed as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding an organization's environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the basic understandings of an organization that will aid
    in the false positive analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic organization infrastructure details, such as the network landscape, infrastructure,
    OS, application, and technology used, will help cross-check the Vulnerability
    Assessment (VA) result against the technology and versions actually implemented
    to remove a false positive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This becomes more beneficial in situations where the VA scan in a periodic cycle
    uses the internal infrastructure where these details are readily available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of a time-bound scanning done as an external consultant, it is difficult
    to have access to all such details. In such cases, as a part of the pre-engagement
    prerequisites, access to relevant infrastructure stakeholders can be sought for
    understanding the technology details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target-critical vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case of a large number of vulnerabilities, at least the most critical ones
    should be cross-verified for a false positive before being reported.
  prefs: []
  type: TYPE_NORMAL
- en: Proof of concept
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If there is access to servers/devices on which the VA scan is conducted, vulnerabilities
    can be crosschecked by logging in to the server or by trying to put a proof of
    concept against the vulnerability. For example, if the vulnerability states that
    a clear text **File Transfer Protocol** (**FTP**) or Telnet service is running
    in the server, we can either log in to the server to crosscheck if these services
    are actually running, or give a proof of concept by trying to connect FTP or the
    Telnet protocol from the testing machine.
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open source scanning tools such as **Nmap** can also be used to enumerate the
    infrastructure again for open vulnerabilities to cross-check the findings of the
    VA report.
  prefs: []
  type: TYPE_NORMAL
- en: Effort estimation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As effort estimation is a time consuming activity, additional efforts and resources
    should be considered to include the removal of a false positive. Also, based on
    the size and nature of engagement, a practical call should be taken to define
    the extent to which this activity will be done.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general terminologies, vulnerability analysis is considered similar to vulnerability
    assessment. However, I feel there is a small difference between these two. Vulnerability
    analysis is a part of the vulnerability assessment cycle, where you identify the
    vulnerability, quantify the risk, and prioritize the risk. Vulnerability analysis
    investigates the vulnerabilities that are detected by a vulnerability assessment
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that vulnerability analysis is an optional step that depends
    on the vulnerability assessment tool's capability, scanning environment, in-depth
    analysis, and so on. Investigation of vulnerability should be done considering
    all these factors. Nowadays, most of the vulnerability assessment tools fetch
    automated reports that have no or minimal false positives. Nessus is one of these.
  prefs: []
  type: TYPE_NORMAL
- en: When a vulnerability assessment is done by a **security operation center** (**SOC**)
    or an internal security department where you don't want to put much effort in
    doing manual analysis, you prefer to give all the scan results to the different
    teams for vulnerability closure. In this case, you are not very concerned about
    the severity of the vulnerability, and so on. If we talk about a different scenario
    where you are engaged with a firm as a third-party auditor and you are doing a
    vulnerability assessment, then in this case, each vulnerability you report to
    the firm will be taken very seriously and has to have proper justifications for
    the vulnerability's existence, severity, applicability, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore the second scenario mentioned previously that
    talks about a third-party consultant doing an audit or a technical vulnerability
    assessment for a client, where a vulnerability report needs to be perfect in terms
    of applicability, risk severity, environment dependencies, and no false positives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you get the scan result report from a vulnerability scanner such as Nessus,
    you can do a detailed review of each vulnerability to check at least the following
    areas:'
  prefs: []
  type: TYPE_NORMAL
- en: False positives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk severity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applicability analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False positives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second section of this chapter details false positive analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Risk severity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Risk severity is the severity of the risk associated with each vulnerability,
    depending on the environment and nature of the business. Risk severity can be
    quantitative or qualitative. Generally, it is preferred, and industry-wise recognized,
    to use risk severity as qualitative. Risk can be categorized as **Critical**,
    **High**, **Medium**, **Low**, and **Info**. A few organizations categorize them
    only as **High**, **Moderate**, and **Low**.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the large-enterprise organizations that go through different security
    certifications, such as ISO 27001, have their risk management process defined.
    These risk management processes define their risk severities as well as their
    definitions, risk matrix, risk acceptance criteria, and so on. While performing
    a vulnerability assessment, you may need to recategorize the risk severity ratings
    if you follow the risk matrix.
  prefs: []
  type: TYPE_NORMAL
- en: For example, vulnerability on the public website of an organization that is
    running without SSL. This vulnerability might be declared to have a **High** risk
    rating by a vulnerability scanner, where-as, if you do a vulnerability analysis,
    it may declare a different risk level.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a scenario where you are doing a vulnerability assessment for a small
    NGO; they have no sensitive information on their website and the vulnerability
    of SSL is discovered. All information available on the website is public. In this
    scenario, you may say the vulnerability risk rating is **Low** or **Info**, whereas
    the scanning tool might report it as **High**.
  prefs: []
  type: TYPE_NORMAL
- en: In a different scenario, where you are doing vulnerability assessment for a
    medium-sized firm which does surveys on their website and public reports, the
    same vulnerability of SSL is discovered. Most of the information recorded here
    is confidential and should not be compromised. In this scenario, you can say that
    the vulnerability risk rating is **Medium** or **High** and will be rated as **High**
    by the scanning tool.
  prefs: []
  type: TYPE_NORMAL
- en: Another scenario where you are doing a vulnerability assessment for a large
    bank, which has net banking login on their website. Bank customers log in to use
    the net banking service and do their financial transactions; again, the same SSL
    vulnerability is discovered. In this case, if SSL is not implemented, this is
    a critical risk rating vulnerability, and the tool will report it as **High**.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important for us to relook at the risk ratings given by vulnerability
    scanningtools if we want to treat risks based on their risk ratings.
  prefs: []
  type: TYPE_NORMAL
- en: Applicability analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each vulnerability discovered by vulnerability assessment tools may not be applicable
    to the organization. Vulnerability applicability is used for checking if the vulnerability
    reported by an automated vulnerability-assessment tool is applicable to the organization
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: For example, vulnerability such as a weak password existing in an application.
    This vulnerability might be declared to have a **High** risk rating by a vulnerability
    scanner, where-as, if you do vulnerability applicability analysis, it may be declared
    as not applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a scenario where you are doing the vulnerability assessment of a
    small organization. The vulnerability scanner reports weak password vulnerability
    for an application. It is found by the tool that some of the passwords for that
    application were only seven-characters long, which is reported as a **High** risk
    severity vulnerability. While doing an applicability analysis, we found that the
    organization has approved a security password policy that considers a password
    as strong even if it is seven-characters long; hence, this vulnerability is not
    applicable to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to relook at the risks and see if they are really applicable
    for the organization or not.
  prefs: []
  type: TYPE_NORMAL
- en: Fix recommendations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nessus gives fix recommendations in the tool-generated report for each vulnerability.
    A few of them can be fixed using multiple ways, for instance, by using compensatory
    controls. A vulnerability can be patched or fixed in multiple ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us illustrate this through a sample vulnerability. A vulnerability such
    as the cleartext protocol FTP is found open on a server. The fix usually recommended
    is used as a secured protocol for file transfer such as **Secure File Transfer
    Protocol** (**SFTP**). Another solution may be to analyze the requirement of having
    FTP open. There might be a case where FTP was left open during testing; now even
    in production, FTP is open and is no longer in use. In this case, the FTP port
    should be closed on that server. In this scenario, we see that for the same vulnerability
    there are two fixes: one is to use SFTP instead of FTP, another is to close the
    FTP port. Likewise, it is recommended to apply the fixes wisely.'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability exploiting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Fundamentals"), *Fundamentals*, we covered
    the differences between a vulnerability assessment and a penetration testing exercise.
    Basically, the difference between these two is related to exploiting the vulnerabilities.
    In a vulnerability assessment, you are required to discover the vulnerabilities
    only; but in a penetration test, you are also required to exploit the vulnerabilities
    that you found during the vulnerability scan.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing may not necessarily be intrusive; it can also be limited
    to the proof of concepts. Nowadays, most of the organizations want to have their
    pentest (penetration test) scope limited only till the proof of concepts are produced,
    because if you do an intrusive test, your system/service may go down.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple penetration testing tools available in the market that are
    equipped with scripts, programs, payloads, and injections, for carrying out penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: The following are a few examples showing how a vulnerability can be exploited.
    The following vulnerabilities have been reported by a Nessus scanner on a sample
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit example 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A vulnerability title is of the first example is a **Cross-site scripting**
    (**XSS**) found on an application homepage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a scenario where the vulnerability scan resulted in a vulnerability
    of XSS for one of the applications scanned while running on a target host. Details
    for the XSS are given in the following Nessus report, reflecting on which application
    the page vulnerability exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Nessus report head | Nessus report example text |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Synopsis | The remote web server hosts a PHP script that is prone to a cross-site
    scripting attack. |'
  prefs: []
  type: TYPE_TB
- en: '| Description | The version of phpMyAdmin fails to validate BBcode tags in
    user input to the `error` parameter of the `error.php` script before using it
    to generate dynamic HTML.An attacker may be able to leverage this issue by injecting
    arbitrary HTML or script code into a user''s browser to be executed within the
    security context of the affected site. For example, this could be used to display
    a page with arbitrary text and a link to an external site. |'
  prefs: []
  type: TYPE_TB
- en: '| Solution | Upgrade to phpMyAdmin 3.4.0-beta1 or later. |'
  prefs: []
  type: TYPE_TB
- en: '| See Also | [http://www.phpmyadmin.net/home_page/security/PMASA-2010-9.php](http://www.phpmyadmin.net/home_page/security/PMASA-2010-9.php)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Plugin Information | Publication date: January 6, 2011, Modification date:
    October 24, 2011 |'
  prefs: []
  type: TYPE_TB
- en: '| Risk Information | Medium4.3 (CVSS2#AV:N/AC:M/Au:N/C:N/I:P/A:N)3.6 (CVSS2#AV:N/AC:M/Au:N/C:N/I:P/A:N)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability Information | Cross-site scripting allows an attacker to run
    scripts that may lead to stealing the web browser session information or creating
    web links to deface the web application. |'
  prefs: []
  type: TYPE_TB
- en: '| References Information | BID 45633CVE CVE-2010-4480XREF OSVDB:69684XREF EDB-ID:15699
    |'
  prefs: []
  type: TYPE_TB
- en: '| Plugin Output | Nessus is able to exploit the issue using the following URL:`http://192.168.56.3/phpMyAdmin/error.php?type=phpmyadmin_pmasa_2010_9.nasl&error=%5ba%40http%3a%2f%2fwww.phpmyadmin.net%2fhome_page%2fsecurity%2fPMASA-2010-9.php%40_self]Click%20here%5b%2fa]`
    |'
  prefs: []
  type: TYPE_TB
- en: Once a cross-site scripting is reported by a vulnerability scanner, and if you
    are engaged to conduct penetration testing for that machine, you are required
    to further penetrate the vulnerability. This can be done by running malicious
    scripts, to do the proof of concept, and by exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting, which is also known as XSS, can either be in an input
    parameter that takes some input in the URL or be in one of the input boxes on
    the web application. To exploit it, you need to tamper the end user's input that
    goes in the parameter which further displays the same input. You may want to use
    a tools such as Burp Suits, Bayden Tamper IE, or any other HTTP traffic interceptor.
    By using the interceptor, you can fiddle with the HTTP request going from the
    client machine to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test if XSS exists or not, the following sample payloads can be used as
    input to the end user''s input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding payloads need to be tweaked based on the code which you are exploiting.
  prefs: []
  type: TYPE_NORMAL
- en: 'To penetrate further, you can use the following sample payloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will pop up the live cookie details on the screen, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit example 1](img/7440OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case of persistent XSS, where end user inputs get stored in the database
    and are displayed again for all users from the database while browsing the application
    page. You should try the following payload, which creates a hyperlink on the web
    page, which will redirect the user to the attacker''s website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Exploit example 1](img/7440OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: XSS can be exploited further with a deep understanding of scripts and coding.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit example 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The vulnerability title for the second example is exploitation of weak or easily
    guessable passwords found on the router.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus has the capability to review Cisco device configurations against industry's
    best practices. One of the common vulnerabilities, which can be observed when
    the administrator has not carefully configured the Cisco device, is using default
    or weak passwords.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cisco Internetwork Operating System** (**Cisco IOS**) is the operating system
    for Cisco network devices such as routers and switches. We will take the example
    of a router for illustration purposes. The Cisco router configuration files have
    all the relevant configurations for the router to perform it''s routing functionality
    in the network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cisco IOS provides an option to set different types of password: type 0 typically
    means a password with no encryption, type 7 means a password encrypted using service
    password encryption command, which uses a proprietary algorithm, and type 5 means
    the password is protected with the enabled-secret command, which uses MD5 hashing
    in the configuration. When we see type 5 or type 7 passwords in the Cisco router
    configuration, they will appear as encrypted.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit example 2](img/7440OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Cisco type 7 password is not considered to be safe, as it is encrypted using
    a weak algorithm, and can be cracked.
  prefs: []
  type: TYPE_NORMAL
- en: While scanning the Cisco router configuration by providing credentials with
    appropriate privileges, Nessus will highlight the use of a weak password.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be exploited once the Nessus report highlights the use of a weak type
    7 password and can be cracked further using one of the many freeware utilities
    available on the Internet. For demonstration purpose, following URL is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.ibeast.com/content/tools/CiscoPassword/index.asp](http://www.ibeast.com/content/tools/CiscoPassword/index.asp)'
  prefs: []
  type: TYPE_NORMAL
- en: If the Nessus highlight uses of weak or type 7 passwords post scanning of the
    Cisco router; we have used a type 7 password used in our example **(** `0822455D0A16`
    **)**.
  prefs: []
  type: TYPE_NORMAL
- en: If we take this password and use the preceding link to crack it, within a few
    seconds we will come to know that the default password, that is, **cisco**, has
    been used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we enter a type 7 password in a commonly available
    password cracking tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit example 2](img/7440OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays the tool giving the output (cracked password):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit example 2](img/7440OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploit example 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The vulnerability title for the third example is possible SQL Injection.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection is an application vulnerability which can be discovered by Nessus.
    SQL Injection allows an attacker to inject or run a malicious SQL command by which
    the attacker directly communicates with the database running behind the application
    and executes the SQL queries. This can be as destructive as running an `fdisk`
    command on a database server which will completely format the server, and creating
    a local admin on the server will compromise the server in all aspects. This also
    allows an attacker to run extended stored procedures, which are very powerful
    commands. By running malicious SQL queries, the attacker can modify the input
    strings that form the SQL queries in such a way that the outputs will reveal the
    required schema and data from the database.
  prefs: []
  type: TYPE_NORMAL
- en: When a SQL Injection vulnerability is reported by the vulnerability scanner
    and you are engaged in doing a penetration test, you need to exploit it further.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the process for exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the application login page, where the username and password need to be entered,
    use the input injections, mentioned in the following table, to check if a SQL
    Injection really exists for that particular page:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Serial number | Injection strings |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Username: `admin` (any username)Password: `'' OR 1=1--` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Username: `admin''; --`Password: `'' OR 1=1--` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Username: `administrator''; --`Password: `'' OR 1=1--` |'
  prefs: []
  type: TYPE_TB
- en: All exploits are unique in nature, hence, I recommend to construct your injections,
    scripts, and payloads depending on your target machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scan analysis includes analysis of the scan output to ensure validated and accurate
    reporting of vulnerabilities. This includes removing false positives and false
    negatives.
  prefs: []
  type: TYPE_NORMAL
- en: A false positive is more commonly encountered; this term means vulnerabilities
    reported as active in the system do not exist in reality, which means it may be
    the result of incorrect vulnerability reporting.
  prefs: []
  type: TYPE_NORMAL
- en: A false positive can be removed by understanding an organization's environment,
    proof of concept, and validating using port scanning tools. As it is a time consuming
    activity, it can be done using target-critical vulnerabilities for a big scope
    engagement. Effort estimation for this activity should also be considered in advance.
  prefs: []
  type: TYPE_NORMAL
- en: Result analysis includes going through the Nessus scan output, covering all
    necessary details, such as synopsis, description, risk factor including the CVE
    score, which is a database of publicly-known security vulnerabilities and exposure.
    Each vulnerability is assigned a unique CVE number which is cross-referenced in
    the Nessus report for providing further details about the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from removing the false positive, analysis will also involve severity
    analysis based on the criticality of the system with respect to the organization's
    business needs where a low or medium vulnerability, on a highly critical server,
    needs to be prioritized accordingly. The applicability of a particular reported
    vulnerability to an organization should also be cross-checked.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the recommendation given in the report and considering other alternative
    controls available to mitigate the vulnerability, the closures should be worked
    upon.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability exploitation (or penetration testing) is the next step after the
    identification of a vulnerability. Nessus gives an option to check if the exploit
    of an identified vulnerability is available in exploit frameworks such as **Metasploit**
    or **Canvas**. It also involves further learning and research to choose an appropriate
    payload in the case of few vulnerabilities such as cross-site scripting and SQL
    Injection.
  prefs: []
  type: TYPE_NORMAL
