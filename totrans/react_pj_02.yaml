- en: Creating a Progressive Web Application with Reusable React Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you already feel familiar with React's core concepts after completing the
    first chapter? Great! This chapter will be no problem for you! If not, don't worry
    – most of the concepts you came across in the previous chapter will be repeated.
    However, if you want to get more experience with webpack and Babel, it's recommended
    that you try creating the project in [Chapter 1](db49c15f-af33-4d8f-a804-057f3876748e.xhtml), *Creating
    a Movie List Application in React*, again since this chapter won't be covering
    those topics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll work with Create React App, a starter kit (created by
    the React core team to get you started with React quickly) that can be used as
    a **Progressive Web App** (**PWA**) – a web application that behaves like a mobile
    application. It will make the configuration of module bundlers and compilers such
    as webpack and Babel unnecessary as this will be taken care of in the Create React
    App package. This means you can focus on building your GitHub portfolio application
    as a PWA that reuses React components and styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alongside setting up Create React App, the following topics will be covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Progressive Web App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building reusable React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling in React with `styled-components`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can't wait? Let's continue!
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a PWA that has reusable React components and
    styling using Create React App and `styled-components`. The application will use
    data  fetched from the public GitHub API.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 1.5-2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project you'll create in this chapter will use the public API from GitHub,
    which you can find at [https://developer.github.com/v3/](https://developer.github.com/v3/).
    To be able to use this API, you need to have a GitHub account, since you'll want
    to retrieve information from a GitHub user account. If you don't have a GitHub
    account yet, you can create one by registering on its website. Also, you need
    to download the GitHub logo pack from here: [https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip](https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip).
    The complete source code for this application can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects/tree/ch2](https://github.com/PacktPublishing/React-Projects/tree/ch2).
  prefs: []
  type: TYPE_NORMAL
- en: GitHub portfolio application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to create a new React project using Create
    React App and set it up as a PWA that reuses React components and styling with
    `styled-components`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PWA with Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having to configure webpack and Babel every time we create a new React project
    can be quite time-consuming. Also, the settings for every project can change and
    it becomes hard to manage all of these configurations when we want to add new
    features to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the React core team introduced a starter kit known as Create React
    App and released a stable version of it, 2.0, in 2018\. By using Create React
    App, we no longer have to worry about managing compile and build configurations,
    even when newer versions of React are released, which means we can focus on coding
    instead of configurations. Also, it has features we can use to easily create a
    PWA.
  prefs: []
  type: TYPE_NORMAL
- en: A PWA is usually faster and more reliable than regular web applications as it
    focuses on an offline/cache-first approach. This makes it possible for users to
    still open our application when they have no or a slow internet connection due
    to its focus on caching. Also, users can add our application to the home screen
    of their smartphone or tablet and open it like a native application.
  prefs: []
  type: TYPE_NORMAL
- en: This section will show us how to create a React application with PWA features,
    starting with setting up a new application with Create React App.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create React App can be installed by using the command line, where we should
    install it globally so that the package is available everywhere on our local computer
    and not just in a specific project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the `create-react-app` package has been installed, we''re ready to
    create our first Create React App project. There are multiple ways to set up a
    new project, but since we''re already familiar with `npm`, there are only two
    methods we need to learn about. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method is to create a new project with `npm` by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can replace `github-portfolio` with any other name you want to use for this
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can use `npx`, a tool that comes preinstalled with `npm`
    (v5.2.0 or higher) and simplifies the way we execute `npm` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both methods will start the installation process for Create React App, which
    can take several minutes, depending on your hardware. Although we're only executing
    one command, the installer for Create React App will install the packages we need
    to run our React application. Therefore, it will install `react`, `react-dom`,
    and `react-scripts`, where the last package includes all the configuration for
    compiling, running, and building React applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we move into the project''s root directory, which is named after our project
    name, we will see that it has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This structure looks a lot like the one we set up in the first chapter, although
    there are some slight differences. The `public` directory includes all the files
    that shouldn't be included in the compile and build process, and the files inside
    this directory are the only files that can be directly used inside the `index.html` file.
    The `manifest.json` file contains the default configuration for a PWA, which is
    something we'll learn more about later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the other directory, called `src`, we will find all the files that will be
    compiled and built when we execute any of the scripts inside the `package.json`
    file. There is a component called `App`, which is defined by the `App.js`, `App.test.js`,
    and `App.css` files, and a file called `index.js`, which is the entry point for
    Create React App. The `serviceWorker.js` file is needed to set up the PWA and
    is also something that will be discussed in the next part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open the `package.json` file, we''ll see that three scripts have been
    defined: `start`, `build`, and `test`. Since testing is something that isn''t
    yet handled at this point yet, we can ignore this script for now. To be able to
    open the project in the browser, we can simply type in the following command into
    the command line, which runs `package react-scripts` in development mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit `http://localhost:3000/`, the default Create React App page will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9bb5ddd7-fd07-4bc3-b309-718f18728581.png)'
  prefs: []
  type: TYPE_IMG
- en: Since `react-scripts` supports hot reloading by default, any changes we make
    to the code will result in a page reload. If we  run the build script, a new directory
    called `build` will be created in the projects' root directory, where the minified
    bundle of our application can be found.
  prefs: []
  type: TYPE_NORMAL
- en: With the basic installation of Create React App in place, the next part of this
    section will show us how to enable the features that turn this application into
    a PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create React App comes with a configuration for that supports PWA, generated
    when we initiate the build script. We can set up our Create React App project
    as a PWA by accessing the `src/index.js` file and changing the last line, which
    will register the  `serviceWorker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we run the build script, the minified bundle of our application will
    use the offline/cache first approach. Under the hood, `react-scripts` uses a package
    called `workbox-webpack-plugin`, which works together with webpack 4 to serve
    our application as a PWA. It doesn't only cache local assets placed in the `public` directory;
    it also caches navigation requests so that our application acts more reliably
    on unstable mobile networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other file that plays a part in setting up the PWA using Create React App
    is `manifest.json`. Most of the configuration for our PWA is placed here, which
    we can see if we open the `public/manifest.json` file. In this configuration JSON
    file, we will find the most important pieces for operating systems and browsers.
    Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This file contains the `short_name` and `name` fields, which describe how our
    application should be identified to users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `short_name` field should be no longer than 12 characters and will be shown
    underneath the application icon on the user's home screen. For the `name` field, we
    can use up to 45 characters. This is the main identifier for our application and
    can be seen during the process of adding the application to the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which particular icon users see when they add our application to the home screen
    can be configured in the `icons` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `favicon.ico` file is used as the only icon and is served
    in multiple sizes in `image/x-icon` format. As we mentioned previously, the same
    rule for `index.html` applies to `manifest.json`. Only files that are placed in
    the public directory can be referred to from this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, using the `theme_color` and `background_color` fields, we can set
    the colors (in HEX format) for the top bar when our application is opened from
    the home screen on a mobile device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The default toolbar with the URL box isn't displayed; instead, a top bar is
    shown. This behavior is similar to native mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing we can handle with this configuration file is internalization,
    which is useful when our application serves content in different languages. We
    can also add versioning to this file if there are multiple versions of our application
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: The changes we made here configured the application so that it functions as
    a PWA, but don't make these features available to the user just yet. In the next
    part of this section, we'll learn how to serve this PWA and make it visible in
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Serving the PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the configuration of our PWA in place, it''s time to see how this will
    affect the application. If you still have your Create React App running (if not,
    execute the `npm start` command again), visit the project at `http://localhost:3000/`.
    We will see that nothing has changed yet. As we mentioned previously, the PWA
    will only be visible when the build version of our application is open. To do
    this, execute the following command in the projects'' root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will initiate the build process, which minifies our application to a bundle
    that''s stored inside the `build` directory. This built version of our application
    can be served from our local machine. If we look at the output of the build process
    on the command line, we will see that Create React App suggested how we should
    serve this build version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `npm install` command installs the `serve` package, which is used to serve
    built static sites or, in this case, JavaScript applications. After installing
    this package, we can use it to deploy the `build` directory on our server or local
    machine by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `-s` flag is used to redirect any navigation requests that aren't found
    back to our `index.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we visit our project in the browser at `http://localhost:5000/`, we''ll
    see that everything looks exactly like the version we''re running on `http://localhost:3000/`.
    There is one big difference, however: the build version is running as a PWA. This
    means that if our internet connections fails, the application will still be shown.
    We can try this out by disconnecting our internet connection or stopping the `serve` package
    from the command line. If we refresh the browser on `http://localhost:5000/`,
    we will see the exact same application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'How does this work? If we open up the Developer tools in our browser (Chrome
    or Firefox) and visit the Application tab, we''ll see items in the sidebar. The
    one we should open first is called Service Workers. The result will look similar
    to what''s shown in the following screenshot if you''re using Chrome as your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c9e3fb0-c08f-48fe-bc28-e909727e7679.png)'
  prefs: []
  type: TYPE_IMG
- en: If we click on the Service Worker sidebar item, we will see a list of all the
    service workers that are running. For `localhost`, there's one active service
    worker that has `service-worker.js` as its source – the same file that is inside
    our project. This file makes sure that a cached version of our application is
    served if there is no or a slow internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: The service worker shouldn't be active when we have a local instance of our
    application running with `npm start`. Since the service worker will cache our
    application, we won't be able to see any of the changes that we've made since
    the cached version will be a server.
  prefs: []
  type: TYPE_NORMAL
- en: These cache files are stored inside the browser cache and can also be found
    in this toolbar under Cache Storage. Here, we may see multiple cache locations,
    which are created by the `workbox-webpack-plugin` package when we build the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The one that''s relevant to serving our application is called `workbox-precache-v2-http://localhost:5000/` and
    consists of all the cached files for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/66b6b067-7474-4ce0-842d-66e05cecdd46.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see which files are being cached by the
    browser for our application, where the `index.html` file is the entry point of
    the application and files starting with `static/` are created during the build
    process and represent the minified bundle of our application. As we can see, it
    consists of minified `.js`, `.css`, and `.svg` files, which are stored inside
    the browser cache. Each time a user loads our application, it will try to serve
    those files first before looking for an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: With our first PWA created and with Create React App in place, we will start
    looking at creating the components for our project and styling them.
  prefs: []
  type: TYPE_NORMAL
- en: Building reusable React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating React components with JSX was briefly discussed in the previous chapter,
    but in this chapter, we'll explore this topic further by creating components that
    we can reuse throughout our application. First, let's look at how to structure
    our application, which builds upon the contents of the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin, we'll need to structure our application in the same way that we did
    in the first chapter. This means that we need to create two new directories called
    `components` and `containers` inside the `src` directory. The files for the `App` component
    can be moved to the `container` directory, and the `App.test.js` file can be deleted
    since testing hasn't been covered yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the directories and moving the files, our application structure
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to change the location of the import for the `App` component
    in `src/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the same for the location of the React `logo` in `src/containers/App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If we run `npm start` again and visit the project in the browser, there will
    be no visible changes since we've only changed the structure of the project and
    none of its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our project still consists of only one component, which doesn''t make it very
    reusable. The next step will be to divide our `App` component into `Components`
    as well. If we look at the source code for this component in `App.js`, we''ll
    see that there''s already a CSS `header` element in the return function. Let''s
    change that `header` element into a React component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new directory called `Header` inside the `components` directory
    and copy the styling for `classNames`, `App-header`, `App-logo`, and `App-link` into
    a new file called `Header.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a file called `Header.js` inside this directory. This file should
    return the same content as the `<header>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Import this `Header` component inside your `App` component and add it to the
    `return` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When we visit our project in the browser again, we''ll see an error saying
    that the value for the logo is undefined. This is because the new `Header` component
    can''t reach the `logo` constant that''s been defined inside the `App` component.
    From what we''ve learned in the first chapter, we know that this logo constant
    should be added as a prop to the `Header` component so that it can be displayed.
    Let''s do this now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Send the `logo` constant as a prop to the `Header` component in `src/container/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `logo` prop so that it can be used by the `img` element as an `src`
    attribute in `src/components/App/Header.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the previous chapter, the use of the `prop-types` package was demonstrated
    but this is something that isn't used in this chapter. If you'd like to use `prop-types`
    in this chapter as well, you can install the package from `npm` using `npm install
    prop-types` and import it inside the files where you want to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we won''t see any visible changes when we open the project in the browser.
    But if we open up the React Developer Tools, we will see that the project is now
    divided into an `App` component and a `Header` component. This component receives
    the `logo` prop in the form of a `.svg` file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/788394ba-bd16-4e9e-8b36-8e4216d6cd50.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Header` component is still divided into multiple elements that can be split
    into separate components. Looking at the `img` and `p` elements, they look pretty
    simple already. However, the `a` element looks more complicated and takes attributes
    such as `url`, `title`, `className`, and so in. To change this `a` element into
    a component we can reuse, it needs to be moved to a different location in our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, create a new directory called `Link` inside the `components` directory.
    Inside this directory, create a new file called `Link.js`. This file should return
    the same `a` element that we''ve already got inside our `Header` component. Also,
    we can send both the `url` and `title` to this component as a prop. Let''s do
    this now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the styling for the `App-link` class from `src/components/Header/Header.css`
    and place this inside a file called `Link.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new component called `Link` that takes the `url` and `title` props.
    This component adds these props as attributes to the `<a>` element in `src/components/Link/Link.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Import this `Link` component and place it inside the `Header` component in `src/components/Header/Header.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Our code should now look like the following, meaning that we''ve successfully
    split the directories into `containers` and `components`, where the components
    are placed in separate subdirectories that have been named after the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: However, if we take a look at the project in the browser, no visible changes
    are present. In React Developer Tools, however, the structure of our application
    has already taken shape. The `App` component is shown as the parent component
    in the component tree, while the `Header` component is a child component that
    has `Link` as a child.
  prefs: []
  type: TYPE_NORMAL
- en: In the next part of this section, we'll add more components to the component
    tree of this application and make these reusable throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing components in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project we're building in this chapter is a GitHub portfolio page; it will
    show our public information and a list of public repositories. Therefore, we need
    to fetch the official GitHub REST API (v3) and pull information from two endpoints. Fetching
    data is something we did in the first chapter, but this time, the information
    won't come from a local JSON file. The method to retrieve the information is almost
    the same. We'll use the fetch API to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can retrieve our public GitHub information from GitHub by executing the
    following command. Replace the `username` at the end of the bold section of code
    with your own `username`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you don't have a GitHub profile or haven't filled out all the necessary information,
    you can also use the `octocat` username. This is the username of the GitHub `mascotte`
    and is already filled with sample data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This request will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Multiple fields in the JSON output are highlighted since these are the fields
    we'll use in the application. These are `avatar_url`, `html_url`, `repos_url`,
    `name`, `company`, `location`, `email`, and `bio`, where the value of the `repos_url` field
    is actually another API endpoint that we need to call to retrieve all the repositories
    of this user. This is something we'll do later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we want to display this result in the application, we need to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve this public information from GitHub, create a new container called
    `Profile` and add the following code to `src/containers/Profile.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This new component contains a `constructor`, where the initial value for `state`
    is set and a `componentDidMount` life cycle method, which is used asynchronously,
    sets a new value for `state` when the fetched API returns a result. No result
    has been rendered yet since we still need to create new components to display
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, import this new component into the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A quick look at the browser where our project is running shows that this new
    `Profile` component isn''t visible yet. This is because the `Header.css` file
    has a `height` attribute with a `view-height` of `100`, meaning that the component
    will take up the entire height of the page. To change this, open the `scr/components/App/Header.css` file
    and change the following highlighted lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There should be enough free space on our page to display the `Profile` component,
    so we can open the `scr/containers/Profile.js` file once more and display the
     `avatar_url`, `html_url`, `repos_url`, `name`, `company`, `location`, `email` and `bio` fields
    that were returned by the Github API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''ve saved this file and visited our project in the browser, we will
    see a bulleted list of the GitHub information being displayed, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b14fcee-a574-4e35-a40a-ed63173b16df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this doesn''t look very pretty and the header doesn''t match with the
    content of the page, let''s make some changes to the `styling` files for these
    two components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the code for the `Header` component, remove the React logo, and replace
    it with the GitHub logo. We no longer need to take `logo` as a prop from the `App` component.
    Also, the `Link` component can be deleted from here as we''ll be using it in a
    `Profile` component later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the highlighted lines in `scr/containers/Profile.js`, where we''ll separate
    the avatar image from the bulleted list and add a `strong` element around the
    field names. Remember the `Link` component we created previously? This will be
    used to create a link to our profile on the GitHub website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to create the `src/containers/Profile.css` file and paste the
    following code into it. This defines the styling for the `Profile` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can see that the application is starting to look like a GitHub
    portfolio page, with a header showing the GitHub logo icon and a title, followed
    by our GitHub avatar and a list of our public information. This results in an
    application that looks similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a6bca76-315e-4f83-993b-f5d29a3e0840.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we take a look at the code in the `Profile` component, we''ll see that there
    is a lot of duplicate code, so we need to transform the list that''s displaying
    our public information into a separate component. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `List.js` inside the new `src/components/List` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Profile` component, which can be found in the `src/containers/Profile.js` file,
    we can import this new `List` component, construct a new array containing all
    the items we want to display inside this list, and send it as a prop. For the
    `html_url` field, we''ll be sending the `Link` component as a value instead of
    the value that was returned from the GitHub API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `List` component, we can now map over the `items` prop and return the
    list items with styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Assuming we executed the preceding steps correctly, your application shouldn't
    have changed aesthetically. However, if we take a look at the React Developer
    Tools, we will see that some changes have been made to the component tree.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll style these components using `styled-components` instead
    of CSS and add repositories that are linked to our GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Styling in React with styled-components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been using CSS files to add styling to our React components. However,
    this forces us to import these files across different components, which makes
    our code less reusable. Therefore, we'll add the `styled-components` package to
    the project, which allows us to write CSS inside JavaScript (so-called **CSS-in-JS**)
    and create components.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we'll get more flexibility out of styling our components, will
    be able to prevent duplication or overlapping of styles due to `classNames`, and
    we'll add dynamic styling to components with ease. All of this can be done using
    the same syntax we used for CSS, right inside our React components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is installing `styled-components` using `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the official documentation of `styled-components`, you will notice
    that they strongly advise you to use the Babel plugin for this package as well.
    But since you're using Create React App to initialize your project, you don't
    need to add this plugin as all the compilation your application needs has already
    been taken care of by `react-scripts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing `styled-components`, let''s try to delete the CSS file from
    one of our components. A good start would be the `Link` component since this is
    a very small component with limited functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by importing the `styled-components` package and creating a new styled
    component called `InnerLink`. This component extends an `a` element and takes
    the CSS rules we already got for the `className` `App-link`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''ve added this component, we can replace the existing `<a>` element
    with this styled component. Also, we no longer have to import the `Link.css` file
    since all the styling is now being done inside this JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit our project in the browser after running `npm start` again, we''ll
    see that our application still looks the same after deleting the CSS file. The
    next step is to replace all the other components that import CSS files for styling:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `styled-components` and delete the CSS file for the `Header` component
    inside `src/components/Header/Header.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `styled-components` and delete the CSS file for the `App` component inside `src/containers/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some styled components for the `ul`, `li`, and `strong` elements inside
    the `List` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, delete the `Profile.css` file from the `Profile` component by converting
    the last two elements with `classNames` into styled components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, open the project in the browser again; our application should still look
    the same. All of our components have been converted so that they use `styled-components`
    and no longer use CSS files and `classNames` for styling. Don't forget to delete
    the `.css` files inside the `containers` and `components` directories and subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is still one CSS file in the project located directly inside
    the `src` directory. This CSS file contains the styling for the `<body>` element,
    which exists inside the `public/index.html` file and has been imported into the
    `src/index.js` file. To also delete this CSS file, we can use the `createGlobalStyle`
    function from `styled-components` to add styling for the `<body>` element to our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a styled component for global styles inside the `App` component
    and paste the CSS styling for the `body` element inside it. Since this component
    should be at the same hierarchy in the component tree as our `AppWrapper` component,
    we need to use **React Fragments** since JSX components should be wrapped inside
    an enclosing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `<>` tag is shorthand for `<React.Fragment>`. These React Fragments are
    used to list children components inside a single enclosing tag without the need
    to add extra nodes to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we should be able to delete the last CSS file in the project, that is, `src/index.css`.
    We can confirm this by looking at the project in the browser. We will see no changes
    to the `body` font that was being set by the `src/index.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The very last step is to display the repositories from our Github profile on
    this Github Portfolio page. The API endpoint that retrieves these repositories
    was also returned by the endpoint to retrieve our user information. To display
    these repositories, we can reuse the `List` component we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Load the repository list from the API endpoint and add it to `state` in
    `src/containers/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, return a `List` component for the repositories and send a prop called
    `title` to this list. We''re doing this since we want to show the difference between
    the two lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Make changes to the `List` component in `src/components/List/List.js` and display
    the title at the top of each list. In this scenario, we''ll use React Fragments
    to prevent unnecessary nodes being added to the DOM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we visit the project in the browser again, we will see the GitHub portfolio
    page we created in the chapter. This application will look something like what''s
    shown in the following screenshot, where the default GitHub user from the previous
    section is used to fetch the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/00e9930a-3f0f-49b0-9e4d-9ff95764cf33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we''ve used Create React App and enabled the project to be set up
    as a PWA, we should be able to see a cached version when we visit the `build`
    version of the project. To build the project, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, serve the `build` version by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We can view the `build` version of our application by going to `http://localhost:5000/`.
    However, we''ll probably see the very first version of our application. This is
    because the project has been created as a PWA and therefore a cached version of
    the application will be shown. We can restart the Service Worker and cache a fresh
    version of our application by going to the `Application` tab in the Developer
    Tools of our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80bd80d0-95b5-4e87-b362-4ddb32fcb1af.png)'
  prefs: []
  type: TYPE_IMG
- en: On this page, select Service Workers in the sidebar. From here, we can update
    the service worker for `localhost` by pressing the Update button. The `service-worker.js` file
    will be called again and the currently cached version will be replaced by a new
    one. We can also test how our application will respond when the internet connection
    fails by checking the `Offline` checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the `Header` component has been cached properly, but no information
    from GitHub is being displayed. Instead, the `Profile` component displays a `Loading...` message
    since no information is being returned from the API request. If we open the Developer
    Tools in our browser and look at the console, we''ll see an error message. We
    can catch this error to display the reason why our application contains no content:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to change the `src/containers/Profile.js` file and add
    a variable called `error` to `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This variable will either be an empty string or will contain the error message
    that''s returned by the `try...catch` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'When the component is rendered, the error state should also be taken from the
    state and displayed instead of the loading state if an error occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: With these changes, the state now has an initial value for the loading state,
    which displays the `Loading...` message when the application first mounts. The
    GitHub endpoint is wrapped in a `try...catch` statement, meaning that we can catch
    the error message when the `fetch` function fails. If this happens, the value
    for `loading` will be replaced by the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check whether these changes are working by building our application
    again and running it locally, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: When we visit the project at `http://localhost:5000` and set the application
    to offline mode in the `Application` tab inside the browser's Developer Tools,
    we will see a `Failed to fetch` message being displayed. Now, we know that our
    users will see this message if they are using our application without an active
    internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you used Create React App to create your starter project for
    a React application, which comes with an initial configuration for libraries such
    as Babel and webpack. By doing this, you didn't have to configure these libraries
    yourself and don't have to worry about how your React code will run in the browser.
    Also, Create React App comes with a default setup for PWA, which you can use by
    registering a service worker. This makes your application run smoothly when there's
    no internet connection or when it's on a mobile device. Remember how you had to
    style your applications with CSS before? This chapter showed you how the `styled-components` package
    can be used to create components that are reusable and styled without importing
    any CSS files since it uses the CSS-in-JS principle.
  prefs: []
  type: TYPE_NORMAL
- en: Upcoming chapters will all feature projects that are created with Create React
    App, meaning that these projects don't require you to make changes to webpack
    or Babel. Did you enjoy using `styled-components` in this chapter? Then you're
    in for a treat as most of the projects in this book are styled with this package,
    including the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build upon this chapter by creating a dynamic project
    management board with React that uses features such as **Suspense**.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create React App: [https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using npx: [https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWA with Create React App [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the `manifest.json` file:[ https://developers.chrome.com/apps/manifest](https://developers.chrome.com/apps/manifest)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styled components: [https://www.styled-components.com/docs/basics](https://www.styled-components.com/docs/basics)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
