- en: Input Masks with v-mask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key aspects of any successful form is clarity. If the user finds
    the form easy to use and easy to understand, they are more likely to fill it in
    and submit it. In this chapter, we are going to be looking at input masking. You
    will learn how to quickly and easily apply masks to your form inputs, and to configure
    them to your needs with real-life examples, such as telephone numbers.
  prefs: []
  type: TYPE_NORMAL
- en: What exactly are input masks? They are pre-defined structures that display the
    data for an input. For example, if you were going to mask a telephone input, you'd
    probably want it to display as **(123) 234-5555**, instead of simply, **1232345555**.
    You can clearly see that the first example is not only easier to read but it also
    conveys meaning about what the field is trying to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: Input masks are a nice feature to take your UX to another level, and they are
    very easy to implement, thanks to open source libraries such as `v-mask`. The
    GitHub repository page can be found at the following link: [https://github.com/probil/v-mask](https://github.com/probil/v-mask).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a quick look at implementing this library on top
    of our existing project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the `v-mask` library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the `v-mask` directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing our custom inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/31jFmyH](http://bit.ly/31jFmyH)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the v-mask library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started with the installation of the `v-mask` library. In order
    for our project to use what it has to offer, we first need to add it to our project
    dependencies. Follow these steps in order to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your Terminal and type in the following command to add the library
    to our dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add it to Vue as a plugin, so head to `main.js`, and let''s both
    import it and let Vue know that we want to register it as a plugin for all of
    our apps. Add the following code, after the `import App` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have registered our plugin, we have access to a new directive:
    `v-mask`. We can add this new directive directly onto our `<input>` elements,
    and the library will handle the masking behind the scenes by reading the user''s
    input, and adjusting the display of the field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this on a regular input first, then we will add some props to our
    project''s component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `App.vue`, and create a new `<input>` element after the email input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If we were to type a phone number in this field as it is, we would get the default
    input behavior. Anything goes. So, let's apply a `telephone` number mask to it.
    Our new `v-mask` library has a requirement that every field that we apply it to
    needs to be v-modeled, so let's get that done first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `telephone` prop to our `data()` inside of the `form` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back to our new `<input>` element and apply `v-model`. We are also
    going to now add the `v-mask` directive, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Go back to your browser and try the input once again. As you type, you will
    see that you are actually getting it nicely formatted to what we would expect
    for a telephone number.
  prefs: []
  type: TYPE_NORMAL
- en: In five simple steps, we have added input masking to one of our form fields.
    In the next section, we will go into more depth about what the `v-mask` directive
    does for us.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the v-mask directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we added the `v-mask` library to our project, and added the plugin within
    `main.js`, the library created a new directive for us, `v-mask`. What exactly
    is a directive, though? We know it looks like an HTML attribute, but what else?
  prefs: []
  type: TYPE_NORMAL
- en: 'A directive can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>"Directives are special attributes with the `v-` prefix. Directive attribute
    values are expected to be a *single JavaScript expression* (with the exception
    of `v-for […]`). A directive's job is to reactively apply side effects to the
    DOM, when the value of its expression changes". - Official Vue documentation.</q>
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so it looks like we have a special attribute that can modify the element.
    That sounds exactly like what we saw happen when we applied to the input element.
    But, how does the actual expression or value that we are putting into this directive
    work?
  prefs: []
  type: TYPE_NORMAL
- en: We know from the example that we are passing in a string, and you can see that
    inside the double quotes that make up the `v-mask=""` attribute, we are setting
    a new pair of single quotes (`'`). This means that the expression inside this
    attribute is JavaScript, and that we are passing it a string value.
  prefs: []
  type: TYPE_NORMAL
- en: 'From looking at the `v-mask` library documentation, we know that we have a
    few *special* placeholder characters that we can use inside our masks. The table
    for those is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `#` | Number (0-9) |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | Letter in any case (a-z, A-Z) |'
  prefs: []
  type: TYPE_TB
- en: '| `N` | Number or letter |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Any symbol |'
  prefs: []
  type: TYPE_TB
- en: '| `?` | Optional (next character) |'
  prefs: []
  type: TYPE_TB
- en: 'Take for example a mask that will display the time of the day; you could define
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This means that this input will take two numbers, from 0 to 9 (`##`), followed
    by a `:` character, followed by another two numbers (`##`).
  prefs: []
  type: TYPE_NORMAL
- en: Anything that does not match this pattern will be ignored by the input.
  prefs: []
  type: TYPE_NORMAL
- en: '`v-mask` is a very powerful library that allows us to customize exactly how
    we want our input to be displayed, by combining these simple rules. In the next
    section, we are going to modify our custom inputs, in order to be able to leverage
    the power of the input masks.'
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our custom inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have put in a lot of work to create our awesome custom `BaseInput`, so we
    definitely want to keep using it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps in order to modify `BaseInput` and to allow for input masking:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to `App.vue` and switch the `<input>` element for a `<BaseInput>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's go into `BaseInput.vue` now and create a new prop; we will call it `mask`,
    and it will default to an empty string. It is important that we default it to
    an empty string, or else the directive will try to match it, and we won't be able
    to type into the fields if they don't have a declared mask!
  prefs: []
  type: TYPE_NORMAL
- en: 'Add it to your `props` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back to `App.vue` and update our telephone `BaseInput` to use the `mask`
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: All done! Return to your browser, and add some numbers in the field and you
    should have a nice-looking telephone mask working with your custom component!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to leverage the power of the `v-mask` library
    in order to apply input masking to our forms. Input masking is a powerful, yet
    easy way to grant our users a better experience, and it should not be overlooked
    when building even the simplest forms!
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to take it up a notch and look at form validation
    with a powerful library: `Vuelidate`!'
  prefs: []
  type: TYPE_NORMAL
