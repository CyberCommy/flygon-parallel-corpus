- en: Chapter 2. Creating a New GWT Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will use the GWT tools to generate a skeleton project structure
    and files, with and without Eclipse support. We will then create our first AJAX
    application (a random quote application) by modifying the generated application
    to add functionality and finally run the application in both hosted and web mode.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Generating a new application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a new application with Eclipse support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a random quote AJAX application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application in hosted mode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application in web mode
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a New Application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will generate a new GWT application by using one of the GWT scripts. These
    helper scripts provided by GWT create the skeleton of a GWT project with the basic
    folder structure and initial project files, so that we can get started in creating
    our new application as quickly as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Using the ApplicationCreator
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The GWT distribution contains a command-line script named `applicationCreator`
    that can be used to create a skeleton GWT project with all the necessary scaffolding.
    To create a new application, follow the steps given below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory named `GWTBook`. We will refer to this directory location
    as `GWT_EXAMPLES_DIR`. This folder will contain all the projects that will be
    created while performing the various tasks in this book.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create a subdirectory and name it `HelloGWT`. This directory will contain
    the code and the files for the new project that we are going to create in this
    chapter.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `GWT_HOME\applicationCreator` by providing the following parameters
    in the command prompt:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-out` parameter specifies that all the artifacts be generated in the directory
    named `HelloGWT`. The fully qualified class name provided as the last parameter
    is used as the name of the class that is generated by the `applicationCreator`
    script and marked as the `EntryPoint` class for this application (we will cover
    the `EntryPoint` class in the next section).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'The above step will create the folder structure and generate several files
    in the `GWT_EXAMPLES_DIR\HelloGWT` directory as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Using the ApplicationCreator](img/1007_02_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `applicationCreator` script invokes the `ApplicationCreator` class in `gwt‑dev‑xxx.jar`,
    which in turn creates the folder structure and generates the application files.
    This makes it very easy to get started on a new project as the whole structure
    for the project is automatically created for you. All you need to do is start
    filling in the application with your code to provide the desired functionality.
    A uniform way of creating projects also ensures adherence to a standard directory
    structure, which makes it easier for you when you are working on different GWT
    projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are all the files and folders that were automatically created under the
    `GWT_EXAMPLES_DIR\HelloGWT` directory when we ran the `applicationCreator` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`src`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HelloGWT-compile.cmd`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HelloGWT-shell.cmd`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**src:** This folder contains all the generated source and configuration files
    for the applications, contained in the familiar Java package structure, with the
    root package being `com.packtpub.gwtbook.hellogwt`. This package name was deduced
    by `applicationCreator` from the fully qualified class name that we provided as
    a parameter to it. The generated files under this directory are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '`com\packtpub\gwtbook\hellogwt\HelloGWT.gwt.xml:` This is the project module—an
    XML file that holds the entire configuration needed by a GWT project. The `inherits`
    tag specifies modules inherited by this module. In this simple case, we are inheriting
    only the functionality provided by the `User` module, which is built into the
    GWT. On more complex projects, module inheritance provides a nice way to reuse
    pieces of functionality. The `EntryPoint` refers to the class that will be instantiated
    by the GWT framework when the module is loaded. This is the class name provided
    to the `applicationCreator` command, when we created the project. The following
    code can be found in this file:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`com\packtpub\gwtbook\hellogwt\client\HelloGWT.java:` This is the entry point
    for our application. It extends the `EntryPoint` class, and when the `HelloGWT`
    module is loaded by the GWT framework, this class is instantiated and its `onModuleLoad()`
    method is automatically called. In this generated class, the `onModuleLoad()`
    method creates a button and a label, and then adds them to the page. It also adds
    a click listener for the button. We will be modifying the code in `HellowGWT.java`
    to create a new application later in this chapter. The current code in this file
    is as follows:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`com\packtpub\gwtbook\hellogwt\public\HelloGWT.html:` This is a generated HTML
    page that loads the `HelloGWT` application and is referred to as the **host page**,
    as this is the web page that hosts the `HelloGWT` application. Even though this
    HTML file is deceptively simple, there are some points that you need to be aware
    of:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firstly, it contains a meta tag that points to the `HelloGWT` module directory.
    This tag is the connection between the HTML page and the `HelloGWT` application.
    The following code represents this connection:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Secondly, the `script` tag imports code from the `gwt.js` file. This file contains
    the code (shown below) required to bootstrap the GWT framework. It uses the configuration
    in the `HelloGWT.gwt.xml` file, and then dynamically loads the JavaScript created
    by compiling the `HelloGWT.java` file to present the application. The `gwt.js`
    file does not exist when we generate the skeleton project. It is generated by
    the GWT framework when we run the application in hosted mode or when we compile
    the application.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`HelloGWT-compile.cmd:` This file contains a command script for compiling the
    application into HTML and JavaScript.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HelloGWT-shell.cmd:` This file contains a command script for running the application
    in the hosted mode.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a well-defined relationship between these generated files. The `HelloGWT.html`
    file is the host page that loads the `gwt.js` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: There's More!
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `applicationCreator` provides options to control several parameters for
    a new application. You can see these options by executing it from the following
    command line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![There''s More!GWTgenerating application, ApplicationCreator used](img/1007_02_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: '`className` is the only required parameter for the `applicationCreator`. All
    the other parameters are optional. Here are some different ways to run `applicationCreator:`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new application without the Eclipse debug support:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new application with the Eclipse debug support:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new application with the Eclipse debug support that overwrites any
    previously generated classes with the same name:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Google recommends the following package naming convention for the source code
    for a GWT application. This will separate your project code by its functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`client:` This holds all the client-related application code. This code can
    only use the Java classes from the `java.util` and `java.lang` packages that are
    provided by the GWT''s `JRE Emulation` library.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public:` This contains all the static web resources that are needed by the
    application, such as the HTML files, stylesheets, and image files. This directory
    includes the host page, which is the HTML file that contains the AJAX application
    (`HelloGWT.html` in the above case).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server:` This contains server-side code. These classes can use any Java class
    and any Java library to provide the functionality.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The modules for the application, such as `HelloGWT.gwt.xml` must be placed in
    the root package directory as a peer to the client, public, and server packages.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Generating a New Application with Eclipse Support
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GWT comes out of the box with support for debugging GWT applications in the
    Eclipse IDE. This is a tremendously useful and time-saving feature. In this section,
    we are going to learn how to create new applications with the Eclipse IDE support.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Modifying HelloGWT
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `HelloGWT` application that we have created in the previous task works
    fine and we can make modifications to it, and run it easily. However, we are not
    taking advantage of one of GWT''s biggest benefits—Eclipse IDE support that enhances
    the entire development experience. We will now recreate the same `HelloGWT` application,
    this time as an Eclipse project. It would have been nice if we could take the
    project that we created in the previous task and add Eclipse support for it. However,
    GWT does not support this at present. To do this, follow the steps given on the
    next page:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'GWT provides a `projectCreator` script that creates Eclipse project files.
    Run the script with the parameters and you will see a screen as shown below:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Time for Action—Modifying HelloGWT](img/1007_02_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'Now run the `applicationCreator` again with the parameters given below to create
    the HelloGWT project as an Eclipse project:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `-overwrite` parameter will overwrite the files and folders in the `HelloGWT`
    directory. So, if you have made any changes that you would like to keep, please
    make sure you copy it to a different directory. You will see a screen as shown
    below:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Modifying HelloGWT](img/1007_02_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Import the newly created `HelloGWT` project into Eclipse. Navigate to the **Existing
    projects into Workspace** screen in Eclipse through the **File | Import** menu.
    Select the **HelloGWT** directory as the root folder, and click on the **Finish**
    button to import the project into your Eclipse workspace. Now you can edit, debug,
    and run your application, all from inside the Eclipse IDE!
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here are all the folders and files created after we have completed this task:![Time
    for Action—Modifying HelloGWT](img/1007_02_05.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Just Happened?
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `projectCreator` script invokes the `ProjectCreator` class in the `gwt‑dev‑xxx.jar`,
    which in turn creates the Eclipse project files. These files are then modified
    by `applicationCreator` to add the name of the project and classpath information
    for the project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the Eclipse-specific files created by running the `projectCreator`
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`.classpath:` Eclipse file for setting up the project classpath information'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.project:` Eclipse project file with project name and builder information'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HelloGWT.launch:` Eclipse configuration for launching the project from the
    **Run** and **Debug** Eclipse menus'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's More!
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a screenshot that displays the various options available for running
    the `projectCreator` when you run it from a command line with a `-help` option:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![There''s More!Eclipse IDEfor GWT applications](img/1007_02_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Creating a Random Quote AJAX Application
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create our first AJAX application, which will display
    a random quote on the web page. This example application will familiarize us with
    the various pieces and modules in a GWT application, and lays the foundation for
    the rest of the book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Modifying Auto-Generated Applications
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the above-mentioned application by modifying the auto-generated
    application from the previous task. The skeleton project structure that has been
    automatically created gives us a head start and demonstrates how quickly we can
    become productive using the GWT framework and tools.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The random quote is selected from a list of quotes stored on the server. Every
    second our application will retrieve the random quote provided by the server,
    and display it on the web page in true AJAX style—without refreshing the page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Java file named `RandomQuoteService.java` in the `com.packtpub.gwtbook.hellogwt.client`
    package. Define a `RandomQuoteService` interface with one method to retrieve the
    quote:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new Java file named `RandomQuoteServiceAsync.java` in the `com.packtpub.gwtbook.hellogwt.client`
    package. Define a `RandomQuoteServiceAsync` interface:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new Java file named `RandomQuoteServiceImpl.java` in the `com.packtpub.gwtbook.hellogwt.server`
    package. Define a `RandomQuoteServiceImpl` class that extends `RemoteService`
    and implements the previously created `RandomQuoteService` interface. Add functionality
    to this class to return a random quote when the `getQuote()` method is called
    by a client.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That's all we have to do for implementing functionality on the server. Now,
    we will modify the client to access the functionality we added to the server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Modify `HelloGWT.java` to remove the existing label and button and add a label
    for displaying the retrieved quote. Add functionality in the `onModuleload()`
    to create a timer that goes off every second, and invokes the `RandomQuoteService`
    to retrieve a quote and display it in the label created in the previous step.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We now have the client application accessing the server to retrieve the quote.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Modify the `HelloGWT.html` to add a paragraph describing our AJAX application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s make the label look nicer by adding a CSS for the label. Create a new
    file named `HelloGWT.css` in the `com.packtpub.gwtbook.hellogwt.public` package
    and add the following style class declaration to it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify the label to use this style in the `HelloGWT.java` file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add a reference to this stylesheet in the `HelloGWT.html` so the page can find
    the styles defined in the stylesheet.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The last thing we have to do is register our `RandomQuoteServiceImpl` servlet
    class in the `HelloGWT` module so that the client can find it. Add the following
    line to `HelloGWT.gwt.xml:`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This servlet reference will be registered by the GWT framework with the embedded
    Tomcat servlet container, so that when you run it in the hosted mode, the context
    path "`/`" is mapped so that all requests to it are served by the `RandomQuoteServiceImpl`
    servlet.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the folders and files in the `HelloGWT` project after completing all
    the above modifications:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Modifying Auto-Generated Applications](img/1007_02_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Our first AJAX application is now ready and we were able to create it entirely
    in Java without writing any HTML code!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: What Just Happened?
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `RandomQuoteService` interface that we created is the client-side definition
    of our service. We also defined `RandomQuoteServiceAsync`, which is the client-side
    definition of the asynchronous version of our service. It provides a callback
    object that enables the asynchronous communication between the server and the
    client. The `RandomQuoteServiceImpl` is a servlet that implements this interface
    and provides the functionality for retrieving a random quote via RPC. We will
    look into creating services in detail in[Chapter 3](ch03.html "Chapter 3. Creating
    Services").
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '`HelloGWT.java` creates the user interface—just a label in this case—instantiates
    the `RandomQuote` service, and starts a timer that is scheduled to fire every
    second. Every time the timer fires, we communicate asynchronously with the `RandomQuoteService`
    to retrieve a quote, and update the label with the quote. The `RootPanel` is a
    GWT wrapper for the body of the HTML page. We attach our label to it so it can
    be displayed.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: We modified the look and feel of the label by using a cascading stylesheet,
    and assigning the name of a style to the label in `HelloGWT.java`. We will learn
    more about using stylesheets and styles to beautify GWT in[Chapter 6](ch06.html
    "Chapter 6. Browser Effects with JSNI and JavaScript Libraries").
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The user interface in this application is very simple. Hence we added the label
    straight to the `RootPanel`. However, in almost any non trivial user interface,
    we will need to position the widgets and lay them out more accurately. We can
    easily accomplish this by utilizing the various layout and panel classes in the
    GWT UI framework. We will learn how to use these classes in Chapters 4 and 5.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Running the Application in Hosted Mode
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GWT provides a great way to test your application without deploying it but by
    running the application in a hosted mode. In this section, we will learn how to
    run the `HelloGWT` application in hosted mode.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Executing the HelloGWT-Shell Script
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can run the `HelloGWT` application in hosted mode by executing the `HelloGWT-shell`
    script. You can do this in three different ways:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the command script from the shell:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open a command prompt and navigate to the `HelloGWT` directory. Run `HelloGWT-shell.cmd`
    to start the `HelloGWT` application in hosted mode.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the command script from inside Eclipse:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click on the `HelloGWT-shell.cmd` file in the Eclipse **Package Explorer**
    or **navigator** view. This will execute the file and will start up the `HelloGWT`
    application in hosted mode.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `HelloGWT.launcher` from Eclipse:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Eclipse, navigate to the **Run** screen by clicking on the **Run | Run**
    link. Expand the **Java Application** node. Select the `HelloGWT` directory. Click
    on the **Run** link to launch the `HelloGWT` application in hosted mode.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following screen if the application runs properly:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Executing the HelloGWT-Shell Script](img/1007_02_08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command script executes the GWT development shell by providing it with the
    application class name as a parameter. The Eclipse launcher mimics the command
    script by creating a launch configuration that executes the GWT development shell
    from within the Eclipse environment. The launched GWT development shell loads
    the specified application in an embedded browser window, which displays the application.
    In hosted mode, the Java code in the project is not compiled into JavaScript.
    The application code is being run in the Java Virtual Machine as compiled bytecode.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Running the Application in Web Mode
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to run GWT applications in hosted mode
    without deploying them. That is a great way to test and debug your application.
    However, when your application is running in a production environment, it will
    be deployed to a servlet container such as Tomcat. This task explains how to compile
    the `HelloGWT` application so that it can then be deployed to any servlet container.
    In GWT terms, this is referred to as running in the web mode.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Compile the Application
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to run the `HelloGWT` application in web mode we need to do the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Compile the `HelloGWT` application first, by running the `HelloGWT‑compile`
    script.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The above step will create a `www` folder in the `HelloGWT` directory. Navigate
    to the `www/com.packtpub.gwt.HelloGWT.HelloGWT` directory.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `HelloGWT.html` file in your web browser.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Everything needed to run the `HelloGWT` client application is contained in
    the `www` folder. You can deploy the contents of the folder to any servlet container
    and serve up the `HelloGWT` application. Here are the contents of the folder after
    completing the above steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Compile the Application](img/1007_02_09.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `HelloGWT-compile` script invokes the GWT compiler and compiles all the
    Java source code in the `com.packtpub.gwt.hellogwt.client` package into HTML and
    JavaScript and copies it to the `www\com.packtpub.gwt.hellogwt.HelloGWT` directory.
    This directory name is automatically created by GWT, by removing the `client`
    portion from the fully qualified class name provided to `applicationCreator` previously.
    This folder contains a ready-to-deploy version of the `HelloGWT` client application.
    It contains:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '`HelloGWT.html:` The host page that functions as the main HTML page for the
    `HelloGWT` application.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gwt.js:` A generated JavaScript file that contains bootstrap code for loading
    and initializing the GWT framework.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`History.html:` An HTML file that provides history management support.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xxx-cache.html` and `xxx-cache.xml:` One HTML and XML file per supported browser
    are generated. These contain the JavaScript code generated by the compilation
    of the source Java files in the `com.packtpub.gwtbook.hellogwt.client` and `com.packtpub.gwtbook.hellogwt.server`
    packages. For instance, in this case, on Windows, the compilation produced these
    files:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Each set of HTML and XML files represents one supported browser:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The file names are created by generating **Globally Unique Identifiers** (**GUIDs**)
    and using the GUID as part of the name. These file names will be different on
    different computers, and will also be different every time you do a clean recompile
    of the application on your computer. There is also a master HTML file generated
    (`com.packtpub.gwtbook.hellogwt.HelloGWT. nocache.html`) that selects the right
    HTML file from the above files and loads it, depending on the browser that is
    running the application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: The `www` folder does not contain the code from the `com.packtpub.gwtbook.hellogwt.server`
    package. This server code needs to be compiled and deployed in a servlet container
    so that the client application can communicate with the random quote service.
    We will learn about deploying to external servlet containers in[Chapter 10](ch10.html
    "Chapter 10. Deployment"). In normal development mode, we will use the hosted
    mode for testing, which runs the server code inside the embedded Tomcat servlet
    container in the GWT development shell. This makes it very easy to run and debug
    the server code from inside the same Eclipse environment as the client application
    code. This is another feature of GWT, which makes it an extremely productive environment
    for developing AJAX applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: In the web mode, our client Java code has been compiled into JavaScript unlike
    in the hosted mode. Also, you will notice that the `HelloGWT.gwt.xml` is not in
    this directory. The configuration details from this module are included in the
    generated HTML and XML files above.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: In the web mode, our client Java code has been compiled into JavaScript unlike
    in the hosted mode. Also, you will notice that the `HelloGWT.gwt.xml` is not in
    this directory. The configuration details from this module are included in the
    generated HTML and XML files above.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, all this work is automatically done for us by the GWT framework
    when we run the `HelloGWT-compile` script. We can focus on the functionality provided
    by our AJAX applications and leave the browser-independent code generation and
    lower level XmlHttpRequest API to GWT.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to deploy GWT applications to web servers and servlet containers
    in[Chapter 10](ch10.html "Chapter 10. Deployment").
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: There's More!
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also compile the `HelloGWT` application from the GWT development shell
    in hosted mode. Run the `HelloGWT-shell` command script to run the application
    in hosted mode. Click on the **Compile/Browse** button in the GWT development
    shell window. This will compile the application and launch the application in
    a separate web-browser window.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在托管模式下从GWT开发shell中编译`HelloGWT`应用程序。运行`HelloGWT-shell`命令脚本以在托管模式下运行应用程序。单击GWT开发shell窗口中的**编译/浏览**按钮。这将编译应用程序并在单独的Web浏览器窗口中启动应用程序。
- en: All this dynamic JavaScript magic means that when you try to view the source
    for the application from the web browser, you will always see the HTML from the
    host page. This can be disconcerting when you are trying to debug problems. But
    the fantastic Eclipse support in GWT means that you can debug issues from the
    comfort of a graphical debugger by setting breakpoints and stepping through the
    entire application one line at a time! We will learn more about debugging of GWT
    applications in[Chapter 8](ch08.html "Chapter 8. Unit Tests").
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些动态的JavaScript魔法意味着当您尝试从Web浏览器查看应用程序的源代码时，您总是会看到来自主机页面的HTML。当您试图调试问题时，这可能令人不安。但是GWT中的出色Eclipse支持意味着您可以通过设置断点并逐行浏览整个应用程序来从图形调试器的舒适环境中调试问题！我们将在[第8章](ch08.html
    "第8章。单元测试")中了解更多关于GWT应用程序的调试。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we generated a new GWT application using the provided helper
    scripts like `applicationCreator`. We then generated the Eclipse support files
    for the project. We also created a new random quote AJAX application. We saw how
    to run this new application in both the hosted and web modes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用提供的辅助脚本如`applicationCreator`生成了一个新的GWT应用程序。然后为项目生成了Eclipse支持文件。我们还创建了一个新的随机引用AJAX应用程序。我们看到如何在托管模式和Web模式下运行这个新应用程序。
- en: In the next chapter, we are going to learn how to create GWT services that will
    enable us to provide asynchronous functionality that can be accessed via AJAX
    from the GWT application web pages.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建GWT服务，这将使我们能够提供可以通过GWT应用程序网页通过AJAX访问的异步功能。
