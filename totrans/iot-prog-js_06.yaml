- en: Chapter 6. Building a Web Monitor and Controlling Devices from a Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will talk about a very important part of this book, creating
    a web page that can control different kinds of devices from a dashboard. In an
    automated home there are different kinds of devices that could be controlled,
    for example: lamps, doors or windows, washing machines, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MySQL database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing phpMyAdmin for administrating databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datalogger with MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dimming a LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the speed of a DC motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling lights with electrical circuits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling door locks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling watering plants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access from anywhere to your Raspberry Pi Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling lights and measuring current consumption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling and monitoring Arduino, Wi-Fi and Ethernet shields, connected devices,
    and sensors from the Raspberry Pi Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring MySQL database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to configure MySQL server in order to create
    a database and integrate everything in your dashboard, for recording data in a
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our Raspberry Pi Zero is being configured like a web server. In this section,
    we will install MySQL database server with the following command, so we can receive
    connections from clients, display data stored in a database, and use queries in
    SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing MySQL](graphics/B05170_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the middle of the process it will ask you for the password of the `root`
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing MySQL](graphics/B05170_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation is complete, connect to MySQL and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing MySQL](graphics/B05170_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing MySQL](graphics/B05170_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we can see databases of the system that are now installed in the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing MySQL](graphics/B05170_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing MySQL driver for PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's important to install our driver to communicate PHP5 with MySQL database
    server, to do that we will need MySQL driver for PHP to access MySQL database,
    execute this command to install `PHP-MySQL` Driver.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Testing PHP and MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will make a simple page to test PHP and MySQL with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Testing PHP and MySQL](graphics/B05170_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot has the script that has the code to access the database,
    connect to the server, and get the data from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing PHP and MySQL](graphics/B05170_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test the page and connection between PHP and MySQL, type the IP address
    of your Raspberry Pi: `http://192.168.1.105/hellodb.php` . The page that should
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing PHP and MySQL](graphics/B05170_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing PhpMyAdmin for administrating databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will talk about how to configure your PhpMyAdmin to administrate
    your database from a remote panel. It''s important that we install the client
    and the module PHP5 in the Apache server, so type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will install the `phpmyadmin` package with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we can see the configuration of the server; in
    this case, we need to select **apache2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We choose the apache2 server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After that we can select the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We choose the option **<No>**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing PhpMyAdmin for administrating databases](graphics/B05170_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Apache server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s necessary that we make the configuration of the file  `apache2.conf`.
    First go to the Terminal on your Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screen, we need to add the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring the Apache server](graphics/B05170_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We include the following line in the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring the Apache server](graphics/B05170_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have finally finished installing our Apache server, and we are now ready
    for the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Entering to the phpMyAdmin remote panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we have configured the server we will enter the phpMyAdmin remote panel,
    we need to open our favorite web browser and type the IP Address of our Raspberry
    Pi: `http://(Raspberry Pi Address)/phpmyadmin`, which will show the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Entering to the phpMyAdmin remote panel](graphics/B05170_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Showing the Arduinobd database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows the database created in the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the Arduinobd database](graphics/B05170_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the table **measurements**, columns, **id**,
    **temperature** and **humidity**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the Arduinobd database](graphics/B05170_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sending data from Arduino and the Ethernet shield to the web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use an Arduino and the Ethernet Shield connected to the network, Arduino
    sends data to the web server published in the Raspberry Pi Zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `arduino_xaamp_mysql.ino`,
    or just get the complete code from the code folder of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We enter the Ip address of the Arduino UNO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the IPAddress of our Raspberry Pi Zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to connect to the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'These lines define the HTTP request from the remote server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of the code is shown in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Make an HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Thes lines define how the instance of the client can read the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If the server''s disconnected, stop the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Repeat every second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we can see the hardware that we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data from Arduino and the Ethernet shield to the web server](graphics/B05170_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Datalogger with MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will build a Datalogger that will record the data
    temperature and humidity in the server so that we can get data whenever we want
    and display it in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the script software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following code, we have a script that will communicate with the Arduino
    board, and it is installed in the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `datalogger1.php`, or
    just get the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Testing the connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we have installed the file of the script, we need to open a web browser
    in your computer and type the IP address of your  `Raspberry Pi/datalogger1.php?temp=70&hum=100`
    , the link will look like as **(http://192.168.1.108/datalogger1.php?temp=70&hum=100)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the connection](graphics/B05170_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the results of the data saved on the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the connection](graphics/B05170_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the table of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the connection](graphics/B05170_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data queries from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to have data recorded and to make some queries to have the data
    show in the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Software for the scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we have the scripts that we used to show the data in the page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `query1.php`, or just
    get the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot we have the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software for the scripts](graphics/B05170_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scripts for specific data to be displayed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following lines we see that we can make some SQL queries to have information
    of specific values and get the values from the temperature and humidity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Query for recording temperature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will create a query to get temperature measurements. We
    call the server reference to the `localhost`, in this case it is the Raspberry
    Pi zero device, the user, and the name of the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the queries is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query for recording temperature](graphics/B05170_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling and dimming a LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss a project that can be applied to a home automation.
    We will dim an LED of DC, this can done to a lamp in a house. The LED will change
    its brightness, and we connect the LED to the **GPIO18** of the Raspberry Pi in
    series with a resistor of *330* ohms.
  prefs: []
  type: TYPE_NORMAL
- en: Software requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we need to install the `pigpio` package. In the Terminal, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then unzip the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, navigate to the unzipped folder with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following to execute the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally install the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Testing the LED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will test the sensor with a script in **Node.js**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can already test this code, navigate into the folder of this project with
    a Terminal on the Pi, and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the required `node.js` module to control the LED. Then, type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the LED](graphics/B05170_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the LED from an interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will control the LED from a web page. For which we will
    use HTML to make the interface with the user, using `node.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the Node.js files that are included in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s now finally time to test our application! First, grab all the code from
    this book''s repository and navigate to the folder of the project like before.
    Then, install `express` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When this is done, start the server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You can now test the project, open the web browser in your computer, and type
    the link - `http://(Raspberry PI)/set?dutyCycle=20`, and we can see that the LED
    changes with the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then open your web browser with `http://192.168.1.108:3000` and you should
    see the control in a basic web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the LED from an interface](graphics/B05170_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the speed of a DC motor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common to have a window or a garage door in a house. We need to automate
    these kinds of devices, so that we can move these objects with a DC motor. In
    this section, we will see how to connect a DC motor to the Raspberry Pi. To do
    this, we will use a L293D circuit to control the motor.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will see how to connect the motor to our Raspberry Pi Zero board.
    In the following diagram, we can see the pins out of the LD293 chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We basically need to connect the components of the circuit, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GPIO14** of the Raspberry Pi to pin **1A**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPIO15** of the Raspberry Pi to pin **2A**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPIO18** of the Raspberry Pi to pin **1**, **2EN**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DC** motor to pin **1Y** and **2Y**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5V** of the Raspberry Pi to **VCC1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GND** of the Raspberry Pi to **GND**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapter regulator to **VCC2** and **GND**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now test the speed of the DC motor from 0 to the highest speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have the code for this application to control the DC motor using the
    interface in a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We see the interface of the user in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the application, you need to open the web browser in your computer
    with the link, `http://192.168.1.108:3000`, and then you need to replace the IP
    Address of your Pi. Here we have the interface for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the speed of a DC motor](graphics/B05170_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling Lights with electrical circuits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, you will find ideas on how to dive into more projects
    that control other devices in the house.
  prefs: []
  type: TYPE_NORMAL
- en: Electrical appliances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In houses we have electrical appliances, for example, lamps, washing machines,
    heaters, and other appliances that we only need to turn on or off. In this section,
    we will learn how to control a lamp connected to the Raspberry Pi Zero, using
    electrical circuits for interfacing the signal. We will use an **optocoupler**
    such as MOC3011, and a **Triac.** The following figure shows the circuit of the
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Electrical appliances](graphics/B05170_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we have the final project connected to the Raspberry pi Zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Electrical appliances](graphics/B05170_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we have the JavaScript code for controlling the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We need an interface that can control the lamp from the web page in the HTML
    language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the web browser, we will see the following interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Electrical appliances](graphics/B05170_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other appliances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show other applications that you can consider creating
    and controlling, and then use them in the home or different areas.
  prefs: []
  type: TYPE_NORMAL
- en: Control a door lock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will see other appliances that can be controlled from an
    interface and connected to the Raspberry pi. In the house we can control a door
    lock from a web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Control a door lock](graphics/B05170_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Control watering plants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another appliance that we can control is watering plants with a Plastic Water
    Solenoid Valve - 12V, connected to the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Control watering plants](graphics/B05170_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this project we can make an automated watering system, add a humidity sensor,
    and program the time that the plants of the garden will be watered.
  prefs: []
  type: TYPE_NORMAL
- en: Remote access from anywhere to your Raspberry Pi Zero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want access to our Raspberry Pi from outside our network, we need to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if our modem has a public IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigate the address that we'll be using in our browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type [http://whatismyipaddress.com/](http://whatismyipaddress.com/) in our browser![Remote
    access from anywhere to your Raspberry Pi Zero](graphics/B05170_06_34.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP provided by the ISP are genteraly dynamic IP which changes after some time.
    In our cases we need to have static addresses which does not change occasionally.
  prefs: []
  type: TYPE_NORMAL
- en: How to access our modem to configure it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access our modem via the Ip address (gateway) and go to the port addressing
    part. Configure port *80* that points to our web server (put the IP address of
    our account), this IP address is the one that automatically assigns the DHCP server
    of our system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have some ports that can be forwarded from the modem-router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to access our modem to configure it](graphics/B05170_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the gateway IP address, type the `ipconfig` command, you need to have
    admin rights. After this, type `http://gatewayip_addres` in the web browser of
    your `router.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to access our modem to configure it](graphics/B05170_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is an example of what you''d see if you had a Linksys router, yours may
    be a different interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to access our modem to configure it](graphics/B05170_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To open a port we need to configure our router to give permissions for entering
    from outside, so we need to give permission in our router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to access our modem to configure it](graphics/B05170_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows the final results, how to open a port number 3000, and
    the name of the application node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to access our modem to configure it](graphics/B05170_06_39_Updated.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Dynamic DNS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to configure a domain name service so we can access our web server by
    typing the name of our domain (it is very difficult to learn the IP addresses
    of the web pages). That's why **Domain Name Servers (DNS)** were created. Follow
    the next section to create a domain.
  prefs: []
  type: TYPE_NORMAL
- en: You may want to access your IoT control panels away from home. In that case,
    your web server will need to become a host on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a straightforward thing since it's behind the router in your home.
    Your ISP generally does not give you a static public IP address because most users
    are simply accessing the web, not serving web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the public side of your router is given an IP address that can change
    from time to time. If you browse to `<whatsmyip...>`, you will see what your public
    IP is currently.
  prefs: []
  type: TYPE_NORMAL
- en: Tomorrow it could be different. For setting up external access, you can do one
    of two things. If you want to simulate having a static IP, you can use a service
    such as Dynamic DNS. If you just want to "try out" external access, you can open
    a port on your router
  prefs: []
  type: TYPE_NORMAL
- en: 'Benefits of having Dynamic DNS:'
  prefs: []
  type: TYPE_NORMAL
- en: One solution is to install a client that will allow the public IP to make it
    fixed. The client function (software that is installed on a computer), maintains
    communication with the site [www.no-ip.org](http://www.no-ip.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the IP address of our modem changes, the client takes that IP change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This allows our domain name to always point to our public IP address. The software
    that is installed is called: No-IP DUC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an account at No-ip.org
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following screenshot we can see the Enhance dynamic DNS setting up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an account at No-ip.org](graphics/B05170_06_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling lights and measuring current consumption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now in this section we will explain how to control and monitor your current
    consumption when the light is on or off. Using your Arduino Wi-Fi shield from
    a web page, we will monitor this variable. When the light is off it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling lights and measuring current consumption](graphics/B05170_06_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the light is on it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling lights and measuring current consumption](graphics/B05170_06_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now either copy the code inside a file called `Controlling_lights_Current_Consumption.ino`,
    or just get the complete code from the folder of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define variables and functions to monitor and control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Import libraries to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the relay to activate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Variables to calculate the current:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the pins for configuring the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We create the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the SSID and the password of your network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the port of the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Instance of the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Variables that are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Publish the variables that are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the relay pin that is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Calibrate the current sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the id and the name of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In this part, we check if the device is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In this part, we define the request for communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets''s start the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We make the calculus of the current and acquire the signals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We define incoming requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the IP Address configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Function of the current sensor that calculates the average of certain measurements
    and returns the current calculus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Building the interface to control and monitor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we have the code for displaying the interface that controls the lights
    and monitoring the current with the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jade for Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s important to configure the Jade interface applied in this project. To
    do that we just type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s necessary, we type the following command in case your system requires
    that update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Interface for controlling and monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we define the header of the page and add the HTML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the links for the functions for jQuery and Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the buttons to control in the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the power and light level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will run the application, as we can see in the following screenshot.
    The server is open on port 3000, when it starts to send the request to the board,
    type the address on your web browser: `http://localhost:3000`. It shows the web
    page with both buttons and the device is connected and is online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface for controlling and monitoring](graphics/B05170_06_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the blue **On** button to activate the light on the board, after some
    seconds we can see that the power increases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface for controlling and monitoring](graphics/B05170_06_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the red **Off** button, after some seconds the power goes down until
    *0 W*, this means that everything is working perfectly well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface for controlling and monitoring](graphics/B05170_06_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling and monitoring Arduino, Wi-Fi, and Ethernet shields on connected
    devices and sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, we saw how to control and monitor our Arduino boards from
    a web page using `node.js` running on a computer in Windows. In this section,
    we will use our fantastic Raspberry Pi Zero with Node.js installed on it and run
    the JavaScript application inside the board.
  prefs: []
  type: TYPE_NORMAL
- en: I have seen the potential of the board instead of using a personal computer
    installed as a web server, with this experience making this projects I want tell
    that the application is more efficient using our Raspberry Pi Zero running on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see how to control more than one device in a single dashboard using
    different devices, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESP8266 module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the code to control and monitor devices from a single interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `app.js`, or just get
    the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the outputs of the devices connected in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the function to control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: We make the `GET` request with the `aREST` API for `ON:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We make the `GET` request with the `ARESt` API for `OFF:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: We make the same thing for the ESP8266 connected device `ON:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: We make the same thing for the ESP8266 connected device `OFF:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the data from the sensors temperature and humidity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'This code refresh the page every 10000 sec:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Adding the devices to monitor and control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I can see that the system is very stable; we need to add the devices that will
    be monitored from the Raspberry Pi Zero with the following application in JavaScript
    snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the express module and the necessary libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the port that will be opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the Jade engine for the HTML web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We make the public directory to access on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Interface for the server instructions to be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the arrest file with the rest request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'This code defines the devices that will be controlled and monitored, we can
    add the ones that we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We set up the server on port 3000 and listen to the web browser clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is perfectly configured, we test the application by typing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: This installs the Jade platform and recognizes the `aREST` API from Raspberry
    Pi Zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'If something is necessary to update, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the `arrest express`, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s very important to install this package to include the arrest API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the application, go to the folder where the application is and type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we see that the server is opening port 3000:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the devices to monitor and control](graphics/B05170_06_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the final test, we need to type the IP address of the Raspberry Pi that
    it has in that moment into your favorite web browser: `http://IP_Address_of_Raspberry_Pi_Zero/port`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the control and monitor data dashboard
    from the Raspberry Pi Zero, published on different devices on a single web page,
    that''s something interesting to do, such that a remote system and control panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the devices to monitor and control](graphics/B05170_06_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we finish by showing the control and monitor system, using different
    devices in a single data dashboard; we conclude that we can have more than one
    device in a web page for the Internet of Things.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to integrate and build a dashboard for monitoring
    and controlling using Raspberry Pi Zero with Arduino and the technologies seen
    in previous chapters. This chapter gave to you the basics and the necessary tools
    that can help you to create your own system of Internet of Things for different
    applications and areas that can be developed for these kinds of systems by applying
    all the tools, web server, database server, devices connected, and setting up
    your router to control your Raspberry Pi from anywhere in the world.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will build very nice devices for the Internet of Things;
    you will learn how to make different mini home domotics projects.
  prefs: []
  type: TYPE_NORMAL
