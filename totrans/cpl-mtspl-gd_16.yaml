- en: Virtual Test Grounds and Staging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟测试场地和分期
- en: We have covered a lot in the past few chapters. It is now time to test all the
    methodologies that we have covered throughout this book, along with various other
    famous testing tools, and see how we can efficiently perform penetration testing
    and vulnerability assessments over the target network, website, or other services,
    using industry-leading tools within Metasploit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们已经涵盖了很多内容。现在是时候测试我们在整本书中涵盖的所有方法，以及其他各种著名的测试工具，看看我们如何能够有效地使用行业领先的工具在Metasploit中对目标网络、网站或其他服务进行渗透测试和漏洞评估。
- en: 'During this chapter, we will look at various methods for testing, and will
    cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨各种测试方法，并涵盖以下主题：
- en: Using Metasploit along with the industry's multiple other penetration testing
    tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit以及行业中的多种其他渗透测试工具。
- en: Importing the reports generated from various tools, and different formats into
    the Metasploit framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将从各种工具和不同格式生成的报告导入Metasploit框架
- en: Creating penetration test reports
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建渗透测试报告
- en: The primary focus of this chapter is to cover penetration testing with other
    industry-leading tools alongside Metasploit; however, the phases of a test may
    differ while performing web-based testing and other testing techniques, but the
    principles remain the same.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要重点是使用Metasploit以及其他行业领先的工具进行渗透测试；然而，在进行基于Web的测试和其他测试技术时，测试的阶段可能会有所不同，但原则是相同的。
- en: Performing a penetration test with integrated Metasploit services
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用集成的Metasploit服务进行渗透测试
- en: We can deliver a penetration test using three different approaches. These approaches
    are white, black, and gray box testing techniques. **White box testing** is a
    testing procedure where the tester has complete knowledge of the system, and the
    client is willing to provide credentials, source codes, and other necessary information
    about the environment. **Black box testing** is a procedure where a tester has
    almost zero knowledge of the target. The **gray box testing** technique is a combination
    of white and black box techniques, where the tester has only a little or partial
    information on the environment being tested. We will perform a gray box test in
    the upcoming sections of this chapter, as it combines the best of both the techniques.
    A gray box test may or may not include OS details, web applications deployed,
    the type and version of servers running, and every other technical aspect required
    to perform the penetration test. The partial information in the gray box test
    will require the tester to perform additional scans that will be less time-consuming
    than the black box tests, and much more time-consuming than the white box tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用三种不同的方法进行渗透测试。这些方法是白盒、黑盒和灰盒测试技术。**白盒测试**是一种测试程序，测试人员完全了解系统，并且客户愿意提供有关环境的凭据、源代码和其他必要信息。**黑盒测试**是一种测试程序，测试人员对目标几乎一无所知。**灰盒测试**技术是白盒和黑盒技术的结合，测试人员对被测试环境只有少量或部分信息。在本章的后续部分中，我们将进行灰盒测试，因为它结合了两种技术的优点。灰盒测试可能包括或不包括操作系统详细信息、部署的Web应用程序、运行的服务器类型和版本以及执行渗透测试所需的其他技术方面。灰盒测试中的部分信息将要求测试人员执行额外的扫描，这将比黑盒测试耗时较少，但比白盒测试耗时更长。
- en: Consider a scenario where we know that the target servers are running on Windows
    OS; however, we do not know which version of Windows is running. In this case,
    we will eliminate the fingerprinting techniques for Linux and UNIX systems and
    focus primarily on Windows OS, thus saving time by considering a single flavor
    of OS, rather than scanning for every kind.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个情景，我们知道目标服务器正在运行Windows操作系统；然而，我们不知道正在运行哪个版本的Windows。在这种情况下，我们将消除对Linux和UNIX系统的指纹技术，并主要关注Windows操作系统，从而通过考虑单一操作系统的版本而节省时间，而不是扫描每种操作系统。
- en: 'The following are the phases that we need to cover while performing penetration
    testing using the gray box testing technique:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用灰盒测试技术进行渗透测试时，我们需要涵盖以下阶段：
- en: '![](img/473b0618-348d-446a-9109-081c2458a664.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/473b0618-348d-446a-9109-081c2458a664.png)'
- en: The preceding diagram illustrates the various stages that we need to cover while
    performing a penetration test in a gray box analysis. As you can see in the diagram,
    the phases marked with dashed lines define the stages that may or may not be required.
    The ones with double lines specify critical stages, and the last ones (with a
    single continuous line) describe the standard phases that are to be followed while
    conducting the test. Let's now begin the penetration test and analyze the various
    aspects of grey box testing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上图说明了在进行灰盒分析的渗透测试时需要涵盖的各个阶段。如图所示，虚线标记的阶段定义了可能需要或不需要的阶段。双线标记的阶段指定了关键阶段，而最后一个（单一连续线）描述了在进行测试时应遵循的标准阶段。现在让我们开始渗透测试，并分析灰盒测试的各个方面。
- en: Interaction with the employees and end users
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与员工和最终用户的互动
- en: Communication with the employees and end users is the very first phase to be
    conducted after we reach the client's site. This phase includes **No tech Hacking**,
    which can also be described as **social engineering**. The idea is to gain knowledge
    about the target systems from the end users' perspective. This phase also answers
    the question of whether an organization is protected from the leaking of information
    through end users. The following example should make things more transparent.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与员工和最终用户的沟通是到达客户现场后要进行的第一个阶段。这个阶段包括**非技术性黑客**，也可以描述为**社会工程学**。其目的是从最终用户的角度获取有关目标系统的知识。这个阶段还回答了一个组织是否受到了通过最终用户泄露信息的保护。以下示例应该使事情更加透明。
- en: Last year, our team was working on a white box test, and we visited the client's
    site for on-site internal testing. As soon as we arrived, we started talking to
    the end users, asking if they faced any problems while using the newly installed
    systems. Unexpectedly, no client in the company allowed us to touch their systems,
    but they soon explained that they were having problems logging in, since it was
    not accepting over 10 connections per session.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 去年，我们的团队正在进行白盒测试，并且我们访问了客户现场进行现场内部测试。我们一到达，就开始与最终用户交谈，询问他们在使用新安装的系统时是否遇到任何问题。出乎意料的是，公司里没有一个客户允许我们触碰他们的系统，但他们很快解释说他们在登录时遇到了问题，因为每个会话不能接受超过10个连接。
- en: We were amazed by the security policy of the company, which did not allow us
    to access any of their client systems; but then, one of my teammates saw an older
    person who was around 55-60 years of age struggling with the internet in the accounts
    section. We asked him if he required any help and he quickly agreed that yes,
    he did. We told him that he could use our laptop by connecting the LAN cable to
    it and could complete his pending transactions. He plugged the LAN cable into
    our computer and started his work. My colleague, who was standing right behind
    him, switched on his pen camera and quickly recorded all his typing activities,
    such as the credentials that he used to log in into the internal network.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对公司的安全政策感到惊讶，该政策不允许我们访问他们的任何客户系统；但后来，我的一个队友看到一位大约55-60岁的老人在账户部门挣扎着使用互联网。我们问他是否需要帮助，他很快同意了。我们告诉他，他可以通过连接LAN电缆到我们的笔记本电脑来完成未完成的交易。他把LAN电缆插入我们的电脑，开始工作。站在他身后的我的同事打开了他的笔形摄像头，迅速记录了他的所有打字活动，比如他用来登录内部网络的凭据。
- en: 'We found another woman who was struggling with her system and told us that
    she was experiencing problems logging in. We assured the woman that we would resolve
    the issue, as her account needed to be unlocked from the backend. We asked for
    her username, password, and the IP address of the login mechanism. She agreed
    and passed us the credentials, which concludes our example: such employees can
    accidentally reveal their credentials if they run into some problems, no matter
    how secure these environments are. We later reported this issue to the company
    as a part of the report.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现另一名女性正在与她的系统苦苦挣扎，并告诉我们她在登录时遇到了问题。我们向这位女士保证我们会解决这个问题，因为她的账户需要从后端解锁。我们要求她的用户名、密码以及登录机制的IP地址。她同意并把凭据传给了我们，这就结束了我们的例子：这样的员工如果遇到问题，无论这些环境有多安全，都可能意外泄露他们的凭据。我们后来将这个问题作为报告的一部分报告给了公司。
- en: 'Other types of information that will be meaningful to the end users include
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对最终用户有意义的其他类型信息包括以下内容：
- en: Technologies they are working on
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们正在使用的技术
- en: Platform and OS details of the server
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器的平台和操作系统详细信息
- en: Hidden login IP addresses or management area address
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏的登录IP地址或管理区域地址
- en: System configuration and OS details
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统配置和操作系统详细信息
- en: Technologies behind the web server
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务器背后的技术
- en: This information is required and will be helpful for identifying critical areas
    for testing with prior knowledge of the techniques used in the testable systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息是必需的，并将有助于在了解可测试系统中使用的技术的基础上，确定测试的关键领域。
- en: However, this phase may or may not be included while performing a gray box penetration
    test. It is similar to a company asking you to complete the test from your company's
    location itself if the company is distant, maybe even in a different nation. In
    these cases, we will eliminate this phase and ask the company's admin or other
    officials about the various technologies that they are working on, and additional
    related information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在执行灰盒渗透测试时，这个阶段可能包括也可能不包括。这类似于公司要求您在公司所在地完成测试，如果公司很远，甚至可能在另一个国家。在这些情况下，我们将排除这个阶段，并询问公司的管理员或其他官员有关他们正在使用的各种技术以及其他相关信息。
- en: Gathering intelligence
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情报收集
- en: After speaking with the end users, we need to dive deep into the network configurations
    and learn about the target network; however, there is a high probability that
    the information gathered from the end user may not be complete, and is more likely
    to be wrong. The penetration tester must confirm each detail twice, as false positives
    and falsifying information may cause problems during the penetration test.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与最终用户交谈后，我们需要深入了解网络配置并了解目标网络；然而，从最终用户那里收集到的信息可能不完整，更有可能是错误的。渗透测试人员必须确认每个细节两次，因为误报和虚假信息可能会在渗透测试过程中造成问题。
- en: Intelligence gathering involves capturing enough in-depth details about the
    target network, the technologies used, and the versions of running services, and
    so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 情报收集涉及捕获有关目标网络、使用的技术以及正在运行的服务版本等深入细节。
- en: Gathering intelligence can be performed using information collected from the
    end users, administrators, and network engineers. In the case of remote testing,
    or if the information gained is partially incomplete, we can use various vulnerability
    scanners, such as Nessus, GFI Lan Guard, OpenVAS, and many more, to find out any
    missing information such as OS, services, and TCP and UDP ports.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 情报收集可以通过从最终用户、管理员和网络工程师收集的信息来执行。在远程测试的情况下，或者如果获得的信息部分不完整，我们可以使用各种漏洞扫描器，如Nessus、GFI
    Lan Guard、OpenVAS等，来找出任何缺失的信息，如操作系统、服务以及TCP和UDP端口。
- en: In the next section, we will strategize our need for gathering intelligence
    using industry-leading tools such OpenVAS, Mimikatz, and so on; but before proceeding,
    let's consider the following setting for the environment being tested using partial
    information gathered from a client site visit, pre-interactions, and questionnaires.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将制定我们收集情报的需求，使用OpenVAS、Mimikatz等行业领先的工具；但在继续之前，让我们考虑一下使用从客户现场访问、预交互和问卷调查收集到的部分信息进行测试的环境设置。
- en: Example environment being tested
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在测试的示例环境
- en: 'Based on the information we gathered using questionnaires, interactions, and
    the client site visit, we conclude with the following example environment, which
    will be tested:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f1b425f-517a-4a10-90e7-d30bf432dcc3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: We are provided with VPN access, and asked to perform a penetration test of
    the network. We are also told about the OSs running on the company's net, which
    are Windows-based operating systems. We are assuming that we have concluded our
    NMAP scans and found a user system running on `192.168.0.196`. We are now ready
    to conduct a full-fledged penetration test using Metasploit and other industry-leading
    tools. The primary tool we will use is **OpenVAS**. OpenVAS is a vulnerability
    scanner and is one of the most advanced vulnerability manager tools. The best
    thing about OpenVAS is that it is entirely free of cost, which makes it a favorable
    choice for small-scale companies and individuals; however, OpenVAS can sometimes
    be buggy, and you may need to put in some effort to fix the bugs manually, but
    since it is a gem of a tool for the community, OpenVAS will always remain my favorite
    vulnerability scanner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: To install OpenVAS on Kali Linux, refer to [https://www.kali.org/penetration-testing/openvas-vulnerability-scanning/](https://www.kali.org/penetration-testing/openvas-vulnerability-scanning/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning with OpenVAS using Metasploit
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To integrate the usage of OpenVAS within Metasploit, we need to load the OpenVAS
    plugin as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/918080a6-cb91-403d-a87b-dc933399c905.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: We can also see that there are plenty of other modules for popular tools, such
    as SQLMAP, Nexpose, and Nessus.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: To load the OpenVAS extension into Metasploit, we need to issue the `load openvas`
    command from the Metasploit console.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: We can see in the previous screenshot that the OpenVAS plugin was successfully
    loaded into the Metasploit framework.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the functionality of OpenVAS in Metasploit, we need to connect the OpenVAS
    Metasploit plugin with OpenVAS itself. We can accomplish this by using the `openvas_connect`
    command followed by user credentials, server address, port number, and the SSL
    status, as shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b39fb6ba-8cb5-4a2d-865b-9aaeb45d966a.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Before we start, let's discuss workspaces, which are a great way of managing
    a penetration test, primarily when you are working in a company that specializes
    in penetration testing and vulnerability assessments. We can handle different
    projects efficiently by switching and creating different workspaces for various
    projects. Using workspaces will also ensure that the test results are not mixed
    up with other projects. Hence, it is highly recommended to use workspaces while
    carrying out penetration tests.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and switching to a new workspace is very easy, as shown in the following
    screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31e642a3-595b-4074-96b4-7f176584b99f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we added a new workspace called `AD_Test`, and
    switched to it by merely typing `workspace` followed by `AD_Test` (the name of
    the workspace).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a vulnerability scan, the first thing we need to create is a target.
    We can create as many targets we want using the `openvas_target_create` command,
    as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e80ee61-5a85-4b77-ba27-605b6ec9d40f.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: We can see we created a target for the `192.168.0.196` IP address with the name
    of `196_System`, and commented it as `196_System_in_AD` just for the sake of remembering
    it easily. Additionally, it is good to take note of the target's ID.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, we need to define a policy for the target being tested. We can list
    the sample policies by issuing the `openvas_config_list` command, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the sake of learning, we will only use the `Full and fast ultimate` policy.
    Make a note of the policy ID, which, in this case, is `698f691e-7489-11df-9d8c-002264764cea`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the target ID and the policy ID, we can move on to creating
    a vulnerability scanning task using the `openvas_task_create` command, shown as
    follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can see that we created a new task with the `openvas_task_create` command
    followed by the name of the task, comments, config ID, and target ID respectively.
    With the task created, we are now ready to launch the scan, as shown in the following
    output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the previous result, we can see that we initialized the scan using the `openvas_task_start`
    command followed by the task ID. We can always check on the progress of the task
    using the `openvas_task_list` command, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac3f1b6a-8eef-40b2-8fcd-a6e7664af14c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'Keeping an eye on the progress, as soon as a task finishes, we can list the
    report for the scan using the `openvas_report_list` command, as detailed in the
    following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/accb2927-3f7f-45da-b2e9-d07dae59aa44.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'We can download this report and import it directly into the database using
    the `openvas_report_download` command followed by the report ID, format ID, path,
    and the name, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8772a9ab-21f6-4fbd-acf9-de8f2e0f687b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: 'We can now simply import the report in Metasploit using the `db_import` command,
    as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/259e4ab2-2b1d-49db-a73d-b4fcdd987b01.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'The format ID can be found using the `openvas_format_list` command, as shown
    in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de7f0015-88e5-4135-9d48-9eb10923d5fb.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful import, we can check the MSF database for vulnerabilities using
    the `vulns` command, as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b5f1a9d-cf53-4f64-a9c8-95d593f34bbb.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have all the vulnerabilities in the database. We can cross-verify
    the number of vulnerabilities and figure out in-depth details by logging in to
    the Greenbone Assistant through the browser available on port `9392,` as shown
    in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a35ff600-22a4-4b6b-ae5c-854b95cbd3ae.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: We can see that we have multiple vulnerabilities with a high impact. It is now
    an excellent time to jump into threat modeling and target only specific weaknesses.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the threat areas
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modeling the threat areas is an essential concern while carrying out a penetration
    test. This phase focuses on the specific areas of the network that are critical
    and need to be secured from breaches. The impact of the vulnerability in a network
    or a system is dependent upon the threat area. We may find some vulnerabilities
    in a system or a network. Nevertheless, those vulnerabilities that can cause any
    impact on the critical areas are of primary concern. This phase focuses on the
    filtration of those vulnerabilities that can cause the highest effect on an asset.
    Modeling the threat areas will help us to target the right set of vulnerabilities.
    However, this phase can be skipped at the client's request.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Impact analysis and marking vulnerabilities with the highest impact factor on
    the target is also necessary. Additionally, this phase is also critical when the
    network under the scope is broad and only vital areas are to be tested.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'From the OpenVAS results, we can see we have the DCE/RPC and MSRPC Services
    Enumeration Reporting vulnerability, but since the network is internal, it may
    not pose any harm to the infrastructure. Hence, it''s left out of the exploitation
    perspective. Also, exploiting vulnerabilities such as DOS can cause a **Blue Screen
    of Death** (**BSOD**). DOS tests should be avoided in most production-based penetration
    test engagements, and should only be considered in a test environment with prior
    permission from the client. Hence, we are skipping it and moving on to reliable
    vulnerability, which is the HTTP File Server Remote Command Execution Vulnerability.
    Browsing through the details of the vulnerability in the OpenVAS web interface,
    we can find that the vulnerability corresponds to CVE `2014-6287` which, on searching
    in Metasploit, corresponds to the `exploit/windows/http/rejetto_hfs_exec` module,
    as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d74708a-dadf-4711-82a9-af0b8ab5f01b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Gaining access to the target
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s exploit the vulnerability by loading the module and setting the required
    options, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a48fc3bc-110c-4257-8300-1e3c9c2d1b8e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'We can see we have placed all the necessary options, so let''s exploit the
    system using the `exploit` command, as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21f78500-b808-4216-92d5-2ac17888e4b9.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Bang! We made it into the system. Let''s perform some post-exploitation to
    see what kind of system we exploited:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a4fff92-ed56-4a99-9d9d-e96bf366b3af.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'Running a `sysinfo` command tells us that the system is a Windows 10 x64 system,
    and is currently under a domain called PYSSG with seven logged-on users, which
    is interesting. Let''s run the `arp` command to see if we can identify some systems
    on the network:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8bf49c4-bca5-4b8d-8d6e-2652a3e75f37.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: We can see we have plenty of other systems running on the network, but we know
    that the network is configured under the active directory. At this point, we may
    consider pentesting the active directory architecture itself and harvest information
    about the other parts of the network and possibly gain access to the domain controller
    itself.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the Active Directory (AD) with Metasploit
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have gained access to a machine in the active directory network, we
    must find and take note of the domain controller and then make use of those details
    to break into the domain controller itself.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Finding the domain controller
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the `enum_domain` module to find the domain controller, as shown
    in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fae25bb-ed0f-4a1f-b2af-877a92510412.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: We can see that we have details such as the domain, domain controller, and its
    IP address. The only option required by the module is the session identifier of
    the Meterpreter gained from the compromised machine.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating shares in the Active Directory network
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find shares in the network, we can merely use the `enum_shares` module,
    as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c17e6c1b-ecae-44c7-b2ff-b44542af54a3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: We can see that we have a print share in the network; however, this doesn't
    look promising. Let's try some other modules.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating the AD computers
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also try finding the details of the systems in the AD using the `enum_domain_computers`
    post module, as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f791cfe-caaa-4686-af77-5aa68502e586.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have set the session identifier for the module. Let''s run
    the module and analyze the results as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec505c8f-7637-4262-8d4c-c808ddc88281.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: We can see that we have got the domain details, computer name, OU, and even
    the operating system version, which is Windows Server 2016 Standard. Well, Windows
    Server 2016 is too modern a system, and finding and exploiting a vulnerability
    in it would be a tough task. Nevertheless, let's carry on with our hunt for some
    exciting information.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating signed-in users in the Active Directory
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we might be able to steal an admin''s token and use it to perform
    a variety of tasks in the AD. Let''s see which users are currently signed into
    the network:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd8e26fe-9299-4bff-afe5-964b8a516c73.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: Well, we can only see a single user signed into the system. Let's use some of
    the advanced Metasploit features to harvest valuable information from this network.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating domain tokens
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what domain accounts we get on running the `post/windows/gather/enum_domain_tokens`
    module on the compromised host, as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60825e54-3cb5-416f-bf41-b917bcd8e0db.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Interesting. We can see that the account `deepankar` is the local administrator
    of the machine; however, we have an interesting entry in the domain groups and
    user token accounts, which is the domain admin user `deep`. This can also mean
    that the domain administrator may log in from this machine. The module will also
    list the running processes for the users, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9defed0c-7a7a-48f6-8f78-8b04367d446d.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Nice. We can see that processes from both the local as well as the domain administrator
    are running. Let's continue enumerating the domain and see if we can find something
    more.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Using extapi in Meterpreter
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Meterpreter features many new capabilities with the help of an extended
    API. The extended API provides easy access to clipboard manipulations, query services,
    Windows enumeration, and ADSI queries.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'To load extended API in Metasploit, we merely need to use the `load` command
    followed by `extapi`, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed65a22d-a59f-4e99-86c8-09a25ad056fd.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: 'Running the preceding command unlocks a variety of functions in the Meterpreter
    console that can be viewed by typing `?` into the Meterpreter console, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7a4598b-9253-49a7-96de-8eeb8cb87554.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Enumerating open Windows using Metasploit
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `window_enum` feature in the extended API provides us with a list of all
    the open Windows on the compromised machine. This may allow us to figure out more
    about the target and the application running on it. Let''s see what happens when
    we run this module on the target system:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0789c7c-50e3-42d8-8c9d-3fbb6814010a.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'As suggested, we have the list of all the open Windows on the target with their
    current process IDs. Let''s explore some more:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b311a71-2a77-4eac-b4fd-221187097c57.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: We can see that Microsoft Word is open on the target system, which denotes the
    presence of a human entity on the machine.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the clipboard
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we know that someone is sitting on the machine and we already have the
    power of the extended API, let''s make use of it to manipulate the target''s clipboard,
    as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13bc43a1-626a-4cc7-8c89-bf0ad016d51e.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: Well well! It looks like someone is copying credentials to some application.
    But wait! `192.168.0.190` is the IP address of the domain controller. Let's take
    note of these credentials, since we will try some more sophisticated attacks using
    them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Using ADSI management commands in Metasploit
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already gained access to some of the crucial credentials of the domain
    controller. But we should never limit ourselves in terms of the possibility of
    finding more information on the target. Let''s get started:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7f732e2-7160-418f-b9d6-6ef9602f93c9.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: 'We can see that issuing the `adsi_computer_enum` on the `pyssg.com` domain
    enumerates many other systems on the network that were previously unknown. Most
    of the systems are running the Windows 10 Pro Edition operating system. Let''s
    see what else we can get:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31f4daed-e9ed-4069-84db-1dbe1ef16f1e.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: 'We can also find the domain controller using the `adsi_dc_enum` command followed
    by `pyssg.com`, which is the domain name shown in the preceding screenshot. We
    can also have a better look at the AD users by making use of the `adsi_user_enum`
    command, as shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef19a8b0-9f68-4fb5-82fb-4ed38a4d7411.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Initially, we saw that we only had one OU, as in, domain; however, the preceding
    command reveals that the original OU is OPS.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们看到我们只有一个OU，也就是域；然而，前面的命令揭示了原始OU是OPS。
- en: Using PsExec exploit in the network
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络中使用PsExec漏洞
- en: 'We took note of some credentials in the previous sections. Let''s make use
    of them and try gaining access to the domain controller using the `psexec` module
    in Metasploit. According to Microsoft''s website:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的部分注意到了一些凭据。让我们利用它们并尝试使用Metasploit中的`psexec`模块访问域控制器。根据微软的网站：
- en: '"PsExec is a light-weight telnet-replacement that lets you execute processes
    on other systems, complete with full interactivity for console applications, without
    having to install client software manually. PsExec''s most powerful uses include
    launching interactive command-prompts on remote systems and remote-enabling tools
    like IpConfig that otherwise cannot show information about remote systems."'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '"PsExec是一个轻量级的telnet替代品，它允许您在其他系统上执行进程，包括对控制台应用程序的完全交互，而无需手动安装客户端软件。PsExec的最强大的用途包括在远程系统上启动交互式命令提示符和远程启用诸如IpConfig之类的工具，否则无法显示有关远程系统的信息。"'
- en: 'PsExec is used for a pass-the-hash attack where an attacker doesn''t need to
    crack the obtained hash of the password of some system, and the hash itself can
    be passed to log into the machine and to execute arbitrary commands. But since
    we already have credentials in the clear text, we can directly load the module
    and run it to gain access to the domain controller. Let''s set up the module as
    follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: PsExec用于通过哈希传递攻击，攻击者无需破解某些系统密码的获得的哈希，哈希本身可以传递以登录到机器并执行任意命令。但由于我们已经有明文凭据，我们可以直接加载模块并运行它以获得对域控制器的访问。让我们设置模块如下：
- en: '![](img/3f5abf98-aca5-436d-8c58-1ea71ef95c5d.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f5abf98-aca5-436d-8c58-1ea71ef95c5d.png)'
- en: 'We can see that we have set all the required options. Let''s execute the module
    and analyze the output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经设置了所有必需的选项。让我们执行模块并分析输出：
- en: '![](img/2b551385-093f-44da-a23c-177f6ac1c7fb.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b551385-093f-44da-a23c-177f6ac1c7fb.png)'
- en: 'Boom! We have successfully gained access to the domain controller. Let''s perform
    some post-exploitation, and see what else we can get:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！我们已成功访问了域控制器。让我们进行一些后期利用，并看看我们还能得到什么：
- en: '![](img/b01f0f44-7842-4dc7-a08e-d8c46a42b12a.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b01f0f44-7842-4dc7-a08e-d8c46a42b12a.png)'
- en: 'Yup! We have compromised a Windows 2016 server that doesn''t contain any severe
    vulnerabilities, but has flaws in the permissions spectrum:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们已经入侵了一个不包含严重漏洞但在权限范围上存在缺陷的Windows 2016服务器：
- en: '![](img/4c9b626d-f484-4df5-885b-d87f20b75e79.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9b626d-f484-4df5-885b-d87f20b75e79.png)'
- en: We can see that we have `SYSTEM`-level access to the server, and have the ability
    to perform almost anything on the target.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们对服务器有`SYSTEM`级别的访问权限，并且可以在目标上执行几乎任何操作。
- en: Using Kiwi in Metasploit
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit中使用Kiwi
- en: 'Metasploit offers **Mimikatz** and **Kiwi** extensions to perform various types
    of credential-oriented operations, such as dumping passwords and hashes, dumping
    passwords in memory, generating golden tickets, and much more. Let''s load `kiwi`
    in Metasploit as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit提供**Mimikatz**和**Kiwi**扩展来执行各种类型的凭据操作，例如转储密码和哈希，转储内存中的密码，生成黄金票据等。让我们在Metasploit中加载`kiwi`，如下所示：
- en: '![](img/06c9a49f-bfe6-49a8-b694-0090ac9c7e24.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06c9a49f-bfe6-49a8-b694-0090ac9c7e24.png)'
- en: 'Once we have loaded the `kiwi` module, we can see that we have an entire menu
    of commands we can use, as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了`kiwi`模块，我们可以看到我们有一个完整的命令菜单可以使用，如下面的截图所示：
- en: '![](img/a6217004-4476-48c0-bd35-bdd732856c00.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6217004-4476-48c0-bd35-bdd732856c00.png)'
- en: 'Let''s try running `lsa_dump_secrets` commands, and check if we can dump something
    or not:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行`lsa_dump_secrets`命令，并检查我们是否可以转储一些内容：
- en: '![](img/7b1fa7c4-c7af-476b-9e35-51388daf655a.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b1fa7c4-c7af-476b-9e35-51388daf655a.png)'
- en: 'Bingo! We can see that we have successfully dumped NTLM and SHA1 hashes with
    the secrets as well. We have a ton of information to get ourselves a golden ticket;
    however, we will look at manipulating golden tickets in the upcoming chapters.
    For now let''s try dumping hashes using the `hashdump` command. To dump hashes,
    we must migrate into a user process. Let''s pull up the process list using the
    `ps` command, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 中了！我们可以看到我们已成功转储了NTLM和SHA1哈希以及秘密。我们有大量信息可以获得黄金票据；但是，我们将在接下来的章节中研究如何操纵黄金票据。现在让我们尝试使用`hashdump`命令转储哈希。要转储哈希，我们必须迁移到用户进程。让我们使用`ps`命令拉起进程列表，如下所示：
- en: '![](img/61f2e3ca-1d77-4f5a-92f6-fdd465fa47ce.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61f2e3ca-1d77-4f5a-92f6-fdd465fa47ce.png)'
- en: 'Let''s migrate to a `lsass.exe` process running under the process ID `576`,
    as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们迁移到运行在进程ID`576`下的`lsass.exe`进程，如下所示：
- en: '![](img/5ebcab40-4f95-47f0-b072-212c58a3d968.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ebcab40-4f95-47f0-b072-212c58a3d968.png)'
- en: Wow! We can see that on migrating successfully to the `lsass.exe` process, running
    the `hashdump` command dumps all the user hashes, which we can crack later.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们可以看到成功迁移到`lsass.exe`进程后，运行`hashdump`命令会转储所有用户哈希，我们稍后可以破解。
- en: Using cachedump in Metasploit
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit中使用cachedump
- en: 'Since we have gained a good level of access, it''s good to go for a `cachedump`
    for credentials, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经获得了良好的访问权限，最好进行`cachedump`以获取凭据，如下所示：
- en: '![](img/869ef393-12ad-48a9-a8c5-7f1c78a8ce11.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/869ef393-12ad-48a9-a8c5-7f1c78a8ce11.png)'
- en: Maintaining access to AD
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持对AD的访问
- en: 'We have seen that we have many ways to achieve persistence on the target system,
    and we will see some more in the upcoming chapters; however, in a large network
    with many users, it might be easy to secretly add a domain user onto the controller
    to cement our access to the AD network. Let''s load the `post/windows/manage/add_user_domain`
    module as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到我们有许多方法可以在目标系统上实现持久性，我们将在接下来的章节中看到更多方法；但是，在一个拥有许多用户的大型网络中，可能很容易秘密地将一个域用户添加到控制器上，以巩固我们对AD网络的访问。让我们加载`post/windows/manage/add_user_domain`模块，如下所示：
- en: '![](img/a56ddaee-33b2-4fe1-ae10-eb81f36d5341.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a56ddaee-33b2-4fe1-ae10-eb81f36d5341.png)'
- en: 'We can see that we have already set all the required options such as `USERNAME`,
    `PASSWORD`, and `SESSION`. Let''s run this module and see if our user was added
    to the domain or not:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经设置了所有必需的选项，如`USERNAME`、`PASSWORD`和`SESSION`。让我们运行这个模块，看看我们的用户是否被添加到域中：
- en: '![](img/ae27790c-2ad7-4237-a6c0-8fc9ab1a7f21.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae27790c-2ad7-4237-a6c0-8fc9ab1a7f21.png)'
- en: We can see that we have successfully added our user hacker to the domain `PYSSG`.
    We can easily log in back and forth with this user whenever we want; however,
    I would suggest matching names to the existing users, since a word like *hacker*
    will raise a few eyebrows.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已成功将用户hacker添加到域`PYSSG`中。我们可以随时轻松地使用这个用户来回登录；但是，我建议将名称与现有用户匹配，因为像*hacker*这样的词会引起一些疑问。
- en: 'Additionally, we can have a look at all the harvested details using the `loot`
    command, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`loot`命令查看所有收集的细节，如下所示：
- en: '![](img/f20b2d2c-8807-4dc1-8aea-55ab0705fad3.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f20b2d2c-8807-4dc1-8aea-55ab0705fad3.png)'
- en: Generating manual reports
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成手动报告
- en: Let's now discuss how to create a penetration test report and see what is to
    be included, where it should be included, what should be added/removed, how to
    format the report, the use of graphs, and so on. Many people, such as managers,
    administrators, and top executives, will read the report of a penetration test.
    Therefore, it's necessary for the findings to be well organized so that the correct
    message is conveyed and understood by the target audience.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论如何创建渗透测试报告，看看应该包括什么，应该在哪里包括，应该添加/删除什么，如何格式化报告，使用图表等等。许多人，如经理、管理员和高级管理人员，都会阅读渗透测试的报告。因此，有必要对发现的问题进行良好的组织，以便目标受众能够正确传达和理解正确的信息。
- en: The format of the report
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告的格式
- en: 'A good penetration test report can be broken down into the following format:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的渗透测试报告可以分解为以下格式：
- en: Page design
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面设计
- en: 'Document control:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件控制：
- en: Cover page
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封面
- en: Document properties
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件属性
- en: 'List of the report content:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '报告内容列表:'
- en: Table of contents
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录
- en: List of illustrations
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插图列表
- en: 'Executive/high-level summary:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行/高层摘要：
- en: The scope of the penetration test
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试的范围
- en: Severity information
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严重信息
- en: Objectives
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标
- en: Assumptions
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设
- en: Summary of vulnerabilities
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞摘要
- en: Vulnerability distribution chart
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞分布图
- en: Summary of recommendations
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议摘要
- en: Methodology/technical report
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法论/技术报告
- en: Test details
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试细节
- en: List of vulnerabilities
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞列表
- en: Likelihood
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能性
- en: Recommendations
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议
- en: References
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考资料
- en: Glossary
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语表
- en: Appendix
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附录
- en: 'Here is a brief description of some of the essential sections:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要部分的简要描述：
- en: '**Page design**: Page design refers to selecting fonts, headers, and footers,
    colors to be used in the report, and so on'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面设计**：页面设计指的是选择报告中要使用的字体、页眉和页脚、颜色等'
- en: '**Document control**: The general properties of a report are covered here'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件控制**：这里涵盖了报告的一般属性'
- en: '**Cover page**: This consists of the name of the report, version, time and
    date, target organization, serial number, and so on'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封面**：包括报告的名称、版本、时间和日期、目标组织、序列号等'
- en: '**Document properties**: This contains the title of the report, the name of
    the tester, and the name of the person who reviewed this report'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件属性**：包括报告的标题、测试人员的姓名以及审阅此报告的人的姓名'
- en: '**List of the report content**: This contains the content of the report, with
    clearly defined page numbers associated with it'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**报告内容列表**：包含报告的内容，并与之相关联的清晰定义的页码'
- en: '**Table of content**: This includes a list of all the material organized from
    the start to the end of the report'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录**：这包括从报告开始到结束的所有材料的列表'
- en: '**List of illustrations**: All the figures used in the report are to be listed
    in this section with the appropriate page numbers'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插图列表**：报告中使用的所有图表都应在此部分列出，并附有适当的页码'
- en: The executive summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行摘要
- en: 'The **executive summary** includes the entire summarization of the report in
    general and non-technical terms, and focuses on providing knowledge to the senior
    employees of the company. It contains the following information:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行摘要**包括了报告的总体摘要和非技术性术语，并专注于向公司的高级员工提供知识。它包含以下信息：'
- en: '**The scope of the penetration test**: This section includes the types of analyses
    performed and the systems that were tested. All the IP ranges that were tested
    are listed in this section. Moreover, this section contains severity information
    about the test as well.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渗透测试的范围**：这一部分包括进行的分析类型和测试的系统。在这一部分列出了测试的所有IP范围。此外，这一部分包含了关于测试的严重性信息。'
- en: '**Objectives**: This section defines how the test will be able to help the
    target organization, what the benefits of the test will be, and so on.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：这一部分定义了测试将如何帮助目标组织，测试的好处等等。'
- en: '**Assumptions made**: If any assumptions were made during the test, they are
    to be listed here. Suppose an XSS vulnerability is found in the admin panel while
    testing a website, but to execute it, we need to be logged in with administrator
    privileges. In this case, the assumption to be made is that we require admin privileges
    for the attack.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假设**：如果在测试过程中做出了任何假设，都需要在这里列出。假设在测试网站时发现了管理员面板中的XSS漏洞，但要执行它，我们需要以管理员权限登录。在这种情况下，需要做出的假设是我们需要管理员权限进行攻击。'
- en: '**Summary of vulnerabilities**: This provides information in a tabular form,
    and describes the number of vulnerabilities found according to their risk level,
    which is high, medium, and low. They are ordered based on impact, from weaknesses
    causing the highest impact on the assets, to the ones with the lowest impact.
    Additionally, this phase contains a vulnerability distribution chart for multiple
    issues with multiple systems. An example of this can be seen in the following
    table:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Impact** | **Number of vulnerabilities** |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| High | 19 |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| Medium | 15 |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| Low | 10 |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '**Summary of recommendations**: The recommendations to be made in this section
    are only for the vulnerabilities with the highest impact factor, and they are
    to be listed accordingly.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/network admin-level report
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section of the report includes the steps to be performed during the penetration
    test, in-depth details about the vulnerabilities, and recommendations. The following
    bullet point  list details the sections of interest for administrators:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Test details**: This section of the report includes information related to
    the summarization of the test in the form of graphs, charts, and tables for vulnerabilities,
    risk factors, and the systems infected with these vulnerabilities.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of vulnerabilities**: This section of the report includes the details,
    locations, and the primary causes of the vulnerabilities.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Likelihood**: This section explains the probability of these vulnerabilities
    being targeted by the attackers. This is done by analyzing the ease of access
    in triggering a particular vulnerability, and by finding out the easiest and the
    most difficult test against the vulnerabilities that can be targeted.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendations**: Recommendations for patching the vulnerabilities are to
    be listed in this section. If a penetration test does not recommend patches, it
    is only considered half-finished.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional sections
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**References**: All the references taken while the report is made are to be
    listed here. References such as a book, website, article, and so on are to be
    listed explicitly with the author, publication name, year of publication, or date
    of an article published, and so on.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glossary**: All the technical terms used in the report are to be listed here
    with their meaning.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix**: This section is an excellent place to add different scripts,
    codes, and images.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we could efficiently perform a penetration test
    on a network using OpenVAS built-in connectors and various Metasploit extensions,
    and how a proper report of the test can be generated. We have many other connectors
    at our disposal, such as ones for Nessus, SQLMAP, and so on, and we will pursue
    them in the upcoming chapters.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can conduct client-side attacks with
    Metasploit, and gain access to impenetrable targets with social engineering and
    payload delivery.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
