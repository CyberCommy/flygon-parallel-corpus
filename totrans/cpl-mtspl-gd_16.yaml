- en: Virtual Test Grounds and Staging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a lot in the past few chapters. It is now time to test all the
    methodologies that we have covered throughout this book, along with various other
    famous testing tools, and see how we can efficiently perform penetration testing
    and vulnerability assessments over the target network, website, or other services,
    using industry-leading tools within Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this chapter, we will look at various methods for testing, and will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit along with the industry's multiple other penetration testing
    tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the reports generated from various tools, and different formats into
    the Metasploit framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating penetration test reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary focus of this chapter is to cover penetration testing with other
    industry-leading tools alongside Metasploit; however, the phases of a test may
    differ while performing web-based testing and other testing techniques, but the
    principles remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a penetration test with integrated Metasploit services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can deliver a penetration test using three different approaches. These approaches
    are white, black, and gray box testing techniques. **White box testing** is a
    testing procedure where the tester has complete knowledge of the system, and the
    client is willing to provide credentials, source codes, and other necessary information
    about the environment. **Black box testing** is a procedure where a tester has
    almost zero knowledge of the target. The **gray box testing** technique is a combination
    of white and black box techniques, where the tester has only a little or partial
    information on the environment being tested. We will perform a gray box test in
    the upcoming sections of this chapter, as it combines the best of both the techniques.
    A gray box test may or may not include OS details, web applications deployed,
    the type and version of servers running, and every other technical aspect required
    to perform the penetration test. The partial information in the gray box test
    will require the tester to perform additional scans that will be less time-consuming
    than the black box tests, and much more time-consuming than the white box tests.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where we know that the target servers are running on Windows
    OS; however, we do not know which version of Windows is running. In this case,
    we will eliminate the fingerprinting techniques for Linux and UNIX systems and
    focus primarily on Windows OS, thus saving time by considering a single flavor
    of OS, rather than scanning for every kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the phases that we need to cover while performing penetration
    testing using the gray box testing technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/473b0618-348d-446a-9109-081c2458a664.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram illustrates the various stages that we need to cover while
    performing a penetration test in a gray box analysis. As you can see in the diagram,
    the phases marked with dashed lines define the stages that may or may not be required.
    The ones with double lines specify critical stages, and the last ones (with a
    single continuous line) describe the standard phases that are to be followed while
    conducting the test. Let's now begin the penetration test and analyze the various
    aspects of grey box testing.
  prefs: []
  type: TYPE_NORMAL
- en: Interaction with the employees and end users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communication with the employees and end users is the very first phase to be
    conducted after we reach the client's site. This phase includes **No tech Hacking**,
    which can also be described as **social engineering**. The idea is to gain knowledge
    about the target systems from the end users' perspective. This phase also answers
    the question of whether an organization is protected from the leaking of information
    through end users. The following example should make things more transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Last year, our team was working on a white box test, and we visited the client's
    site for on-site internal testing. As soon as we arrived, we started talking to
    the end users, asking if they faced any problems while using the newly installed
    systems. Unexpectedly, no client in the company allowed us to touch their systems,
    but they soon explained that they were having problems logging in, since it was
    not accepting over 10 connections per session.
  prefs: []
  type: TYPE_NORMAL
- en: We were amazed by the security policy of the company, which did not allow us
    to access any of their client systems; but then, one of my teammates saw an older
    person who was around 55-60 years of age struggling with the internet in the accounts
    section. We asked him if he required any help and he quickly agreed that yes,
    he did. We told him that he could use our laptop by connecting the LAN cable to
    it and could complete his pending transactions. He plugged the LAN cable into
    our computer and started his work. My colleague, who was standing right behind
    him, switched on his pen camera and quickly recorded all his typing activities,
    such as the credentials that he used to log in into the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: 'We found another woman who was struggling with her system and told us that
    she was experiencing problems logging in. We assured the woman that we would resolve
    the issue, as her account needed to be unlocked from the backend. We asked for
    her username, password, and the IP address of the login mechanism. She agreed
    and passed us the credentials, which concludes our example: such employees can
    accidentally reveal their credentials if they run into some problems, no matter
    how secure these environments are. We later reported this issue to the company
    as a part of the report.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other types of information that will be meaningful to the end users include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Technologies they are working on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform and OS details of the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden login IP addresses or management area address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System configuration and OS details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technologies behind the web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information is required and will be helpful for identifying critical areas
    for testing with prior knowledge of the techniques used in the testable systems.
  prefs: []
  type: TYPE_NORMAL
- en: However, this phase may or may not be included while performing a gray box penetration
    test. It is similar to a company asking you to complete the test from your company's
    location itself if the company is distant, maybe even in a different nation. In
    these cases, we will eliminate this phase and ask the company's admin or other
    officials about the various technologies that they are working on, and additional
    related information.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After speaking with the end users, we need to dive deep into the network configurations
    and learn about the target network; however, there is a high probability that
    the information gathered from the end user may not be complete, and is more likely
    to be wrong. The penetration tester must confirm each detail twice, as false positives
    and falsifying information may cause problems during the penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Intelligence gathering involves capturing enough in-depth details about the
    target network, the technologies used, and the versions of running services, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering intelligence can be performed using information collected from the
    end users, administrators, and network engineers. In the case of remote testing,
    or if the information gained is partially incomplete, we can use various vulnerability
    scanners, such as Nessus, GFI Lan Guard, OpenVAS, and many more, to find out any
    missing information such as OS, services, and TCP and UDP ports.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will strategize our need for gathering intelligence
    using industry-leading tools such OpenVAS, Mimikatz, and so on; but before proceeding,
    let's consider the following setting for the environment being tested using partial
    information gathered from a client site visit, pre-interactions, and questionnaires.
  prefs: []
  type: TYPE_NORMAL
- en: Example environment being tested
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on the information we gathered using questionnaires, interactions, and
    the client site visit, we conclude with the following example environment, which
    will be tested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f1b425f-517a-4a10-90e7-d30bf432dcc3.png)'
  prefs: []
  type: TYPE_IMG
- en: We are provided with VPN access, and asked to perform a penetration test of
    the network. We are also told about the OSs running on the company's net, which
    are Windows-based operating systems. We are assuming that we have concluded our
    NMAP scans and found a user system running on `192.168.0.196`. We are now ready
    to conduct a full-fledged penetration test using Metasploit and other industry-leading
    tools. The primary tool we will use is **OpenVAS**. OpenVAS is a vulnerability
    scanner and is one of the most advanced vulnerability manager tools. The best
    thing about OpenVAS is that it is entirely free of cost, which makes it a favorable
    choice for small-scale companies and individuals; however, OpenVAS can sometimes
    be buggy, and you may need to put in some effort to fix the bugs manually, but
    since it is a gem of a tool for the community, OpenVAS will always remain my favorite
    vulnerability scanner.
  prefs: []
  type: TYPE_NORMAL
- en: To install OpenVAS on Kali Linux, refer to [https://www.kali.org/penetration-testing/openvas-vulnerability-scanning/](https://www.kali.org/penetration-testing/openvas-vulnerability-scanning/).
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning with OpenVAS using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To integrate the usage of OpenVAS within Metasploit, we need to load the OpenVAS
    plugin as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/918080a6-cb91-403d-a87b-dc933399c905.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also see that there are plenty of other modules for popular tools, such
    as SQLMAP, Nexpose, and Nessus.
  prefs: []
  type: TYPE_NORMAL
- en: To load the OpenVAS extension into Metasploit, we need to issue the `load openvas`
    command from the Metasploit console.
  prefs: []
  type: TYPE_NORMAL
- en: We can see in the previous screenshot that the OpenVAS plugin was successfully
    loaded into the Metasploit framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the functionality of OpenVAS in Metasploit, we need to connect the OpenVAS
    Metasploit plugin with OpenVAS itself. We can accomplish this by using the `openvas_connect`
    command followed by user credentials, server address, port number, and the SSL
    status, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b39fb6ba-8cb5-4a2d-865b-9aaeb45d966a.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we start, let's discuss workspaces, which are a great way of managing
    a penetration test, primarily when you are working in a company that specializes
    in penetration testing and vulnerability assessments. We can handle different
    projects efficiently by switching and creating different workspaces for various
    projects. Using workspaces will also ensure that the test results are not mixed
    up with other projects. Hence, it is highly recommended to use workspaces while
    carrying out penetration tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and switching to a new workspace is very easy, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31e642a3-595b-4074-96b4-7f176584b99f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we added a new workspace called `AD_Test`, and
    switched to it by merely typing `workspace` followed by `AD_Test` (the name of
    the workspace).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a vulnerability scan, the first thing we need to create is a target.
    We can create as many targets we want using the `openvas_target_create` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e80ee61-5a85-4b77-ba27-605b6ec9d40f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see we created a target for the `192.168.0.196` IP address with the name
    of `196_System`, and commented it as `196_System_in_AD` just for the sake of remembering
    it easily. Additionally, it is good to take note of the target's ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, we need to define a policy for the target being tested. We can list
    the sample policies by issuing the `openvas_config_list` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For the sake of learning, we will only use the `Full and fast ultimate` policy.
    Make a note of the policy ID, which, in this case, is `698f691e-7489-11df-9d8c-002264764cea`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the target ID and the policy ID, we can move on to creating
    a vulnerability scanning task using the `openvas_task_create` command, shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that we created a new task with the `openvas_task_create` command
    followed by the name of the task, comments, config ID, and target ID respectively.
    With the task created, we are now ready to launch the scan, as shown in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous result, we can see that we initialized the scan using the `openvas_task_start`
    command followed by the task ID. We can always check on the progress of the task
    using the `openvas_task_list` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac3f1b6a-8eef-40b2-8fcd-a6e7664af14c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Keeping an eye on the progress, as soon as a task finishes, we can list the
    report for the scan using the `openvas_report_list` command, as detailed in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/accb2927-3f7f-45da-b2e9-d07dae59aa44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can download this report and import it directly into the database using
    the `openvas_report_download` command followed by the report ID, format ID, path,
    and the name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8772a9ab-21f6-4fbd-acf9-de8f2e0f687b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now simply import the report in Metasploit using the `db_import` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/259e4ab2-2b1d-49db-a73d-b4fcdd987b01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The format ID can be found using the `openvas_format_list` command, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de7f0015-88e5-4135-9d48-9eb10923d5fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful import, we can check the MSF database for vulnerabilities using
    the `vulns` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b5f1a9d-cf53-4f64-a9c8-95d593f34bbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have all the vulnerabilities in the database. We can cross-verify
    the number of vulnerabilities and figure out in-depth details by logging in to
    the Greenbone Assistant through the browser available on port `9392,` as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a35ff600-22a4-4b6b-ae5c-854b95cbd3ae.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have multiple vulnerabilities with a high impact. It is now
    an excellent time to jump into threat modeling and target only specific weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling the threat areas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modeling the threat areas is an essential concern while carrying out a penetration
    test. This phase focuses on the specific areas of the network that are critical
    and need to be secured from breaches. The impact of the vulnerability in a network
    or a system is dependent upon the threat area. We may find some vulnerabilities
    in a system or a network. Nevertheless, those vulnerabilities that can cause any
    impact on the critical areas are of primary concern. This phase focuses on the
    filtration of those vulnerabilities that can cause the highest effect on an asset.
    Modeling the threat areas will help us to target the right set of vulnerabilities.
    However, this phase can be skipped at the client's request.
  prefs: []
  type: TYPE_NORMAL
- en: Impact analysis and marking vulnerabilities with the highest impact factor on
    the target is also necessary. Additionally, this phase is also critical when the
    network under the scope is broad and only vital areas are to be tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the OpenVAS results, we can see we have the DCE/RPC and MSRPC Services
    Enumeration Reporting vulnerability, but since the network is internal, it may
    not pose any harm to the infrastructure. Hence, it''s left out of the exploitation
    perspective. Also, exploiting vulnerabilities such as DOS can cause a **Blue Screen
    of Death** (**BSOD**). DOS tests should be avoided in most production-based penetration
    test engagements, and should only be considered in a test environment with prior
    permission from the client. Hence, we are skipping it and moving on to reliable
    vulnerability, which is the HTTP File Server Remote Command Execution Vulnerability.
    Browsing through the details of the vulnerability in the OpenVAS web interface,
    we can find that the vulnerability corresponds to CVE `2014-6287` which, on searching
    in Metasploit, corresponds to the `exploit/windows/http/rejetto_hfs_exec` module,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d74708a-dadf-4711-82a9-af0b8ab5f01b.png)'
  prefs: []
  type: TYPE_IMG
- en: Gaining access to the target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s exploit the vulnerability by loading the module and setting the required
    options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a48fc3bc-110c-4257-8300-1e3c9c2d1b8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we have placed all the necessary options, so let''s exploit the
    system using the `exploit` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21f78500-b808-4216-92d5-2ac17888e4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bang! We made it into the system. Let''s perform some post-exploitation to
    see what kind of system we exploited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a4fff92-ed56-4a99-9d9d-e96bf366b3af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running a `sysinfo` command tells us that the system is a Windows 10 x64 system,
    and is currently under a domain called PYSSG with seven logged-on users, which
    is interesting. Let''s run the `arp` command to see if we can identify some systems
    on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8bf49c4-bca5-4b8d-8d6e-2652a3e75f37.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see we have plenty of other systems running on the network, but we know
    that the network is configured under the active directory. At this point, we may
    consider pentesting the active directory architecture itself and harvest information
    about the other parts of the network and possibly gain access to the domain controller
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the Active Directory (AD) with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have gained access to a machine in the active directory network, we
    must find and take note of the domain controller and then make use of those details
    to break into the domain controller itself.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the domain controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the `enum_domain` module to find the domain controller, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fae25bb-ed0f-4a1f-b2af-877a92510412.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have details such as the domain, domain controller, and its
    IP address. The only option required by the module is the session identifier of
    the Meterpreter gained from the compromised machine.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating shares in the Active Directory network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find shares in the network, we can merely use the `enum_shares` module,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c17e6c1b-ecae-44c7-b2ff-b44542af54a3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have a print share in the network; however, this doesn't
    look promising. Let's try some other modules.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating the AD computers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also try finding the details of the systems in the AD using the `enum_domain_computers`
    post module, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f791cfe-caaa-4686-af77-5aa68502e586.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have set the session identifier for the module. Let''s run
    the module and analyze the results as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec505c8f-7637-4262-8d4c-c808ddc88281.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have got the domain details, computer name, OU, and even
    the operating system version, which is Windows Server 2016 Standard. Well, Windows
    Server 2016 is too modern a system, and finding and exploiting a vulnerability
    in it would be a tough task. Nevertheless, let's carry on with our hunt for some
    exciting information.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating signed-in users in the Active Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we might be able to steal an admin''s token and use it to perform
    a variety of tasks in the AD. Let''s see which users are currently signed into
    the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd8e26fe-9299-4bff-afe5-964b8a516c73.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, we can only see a single user signed into the system. Let's use some of
    the advanced Metasploit features to harvest valuable information from this network.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating domain tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what domain accounts we get on running the `post/windows/gather/enum_domain_tokens`
    module on the compromised host, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60825e54-3cb5-416f-bf41-b917bcd8e0db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Interesting. We can see that the account `deepankar` is the local administrator
    of the machine; however, we have an interesting entry in the domain groups and
    user token accounts, which is the domain admin user `deep`. This can also mean
    that the domain administrator may log in from this machine. The module will also
    list the running processes for the users, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9defed0c-7a7a-48f6-8f78-8b04367d446d.png)'
  prefs: []
  type: TYPE_IMG
- en: Nice. We can see that processes from both the local as well as the domain administrator
    are running. Let's continue enumerating the domain and see if we can find something
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Using extapi in Meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Meterpreter features many new capabilities with the help of an extended
    API. The extended API provides easy access to clipboard manipulations, query services,
    Windows enumeration, and ADSI queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load extended API in Metasploit, we merely need to use the `load` command
    followed by `extapi`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed65a22d-a59f-4e99-86c8-09a25ad056fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the preceding command unlocks a variety of functions in the Meterpreter
    console that can be viewed by typing `?` into the Meterpreter console, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7a4598b-9253-49a7-96de-8eeb8cb87554.png)'
  prefs: []
  type: TYPE_IMG
- en: Enumerating open Windows using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `window_enum` feature in the extended API provides us with a list of all
    the open Windows on the compromised machine. This may allow us to figure out more
    about the target and the application running on it. Let''s see what happens when
    we run this module on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0789c7c-50e3-42d8-8c9d-3fbb6814010a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As suggested, we have the list of all the open Windows on the target with their
    current process IDs. Let''s explore some more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b311a71-2a77-4eac-b4fd-221187097c57.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that Microsoft Word is open on the target system, which denotes the
    presence of a human entity on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the clipboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we know that someone is sitting on the machine and we already have the
    power of the extended API, let''s make use of it to manipulate the target''s clipboard,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13bc43a1-626a-4cc7-8c89-bf0ad016d51e.png)'
  prefs: []
  type: TYPE_IMG
- en: Well well! It looks like someone is copying credentials to some application.
    But wait! `192.168.0.190` is the IP address of the domain controller. Let's take
    note of these credentials, since we will try some more sophisticated attacks using
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Using ADSI management commands in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already gained access to some of the crucial credentials of the domain
    controller. But we should never limit ourselves in terms of the possibility of
    finding more information on the target. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7f732e2-7160-418f-b9d6-6ef9602f93c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that issuing the `adsi_computer_enum` on the `pyssg.com` domain
    enumerates many other systems on the network that were previously unknown. Most
    of the systems are running the Windows 10 Pro Edition operating system. Let''s
    see what else we can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31f4daed-e9ed-4069-84db-1dbe1ef16f1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also find the domain controller using the `adsi_dc_enum` command followed
    by `pyssg.com`, which is the domain name shown in the preceding screenshot. We
    can also have a better look at the AD users by making use of the `adsi_user_enum`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef19a8b0-9f68-4fb5-82fb-4ed38a4d7411.png)'
  prefs: []
  type: TYPE_IMG
- en: Initially, we saw that we only had one OU, as in, domain; however, the preceding
    command reveals that the original OU is OPS.
  prefs: []
  type: TYPE_NORMAL
- en: Using PsExec exploit in the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We took note of some credentials in the previous sections. Let''s make use
    of them and try gaining access to the domain controller using the `psexec` module
    in Metasploit. According to Microsoft''s website:'
  prefs: []
  type: TYPE_NORMAL
- en: '"PsExec is a light-weight telnet-replacement that lets you execute processes
    on other systems, complete with full interactivity for console applications, without
    having to install client software manually. PsExec''s most powerful uses include
    launching interactive command-prompts on remote systems and remote-enabling tools
    like IpConfig that otherwise cannot show information about remote systems."'
  prefs: []
  type: TYPE_NORMAL
- en: 'PsExec is used for a pass-the-hash attack where an attacker doesn''t need to
    crack the obtained hash of the password of some system, and the hash itself can
    be passed to log into the machine and to execute arbitrary commands. But since
    we already have credentials in the clear text, we can directly load the module
    and run it to gain access to the domain controller. Let''s set up the module as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f5abf98-aca5-436d-8c58-1ea71ef95c5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have set all the required options. Let''s execute the module
    and analyze the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b551385-093f-44da-a23c-177f6ac1c7fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Boom! We have successfully gained access to the domain controller. Let''s perform
    some post-exploitation, and see what else we can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b01f0f44-7842-4dc7-a08e-d8c46a42b12a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Yup! We have compromised a Windows 2016 server that doesn''t contain any severe
    vulnerabilities, but has flaws in the permissions spectrum:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9b626d-f484-4df5-885b-d87f20b75e79.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have `SYSTEM`-level access to the server, and have the ability
    to perform almost anything on the target.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kiwi in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers **Mimikatz** and **Kiwi** extensions to perform various types
    of credential-oriented operations, such as dumping passwords and hashes, dumping
    passwords in memory, generating golden tickets, and much more. Let''s load `kiwi`
    in Metasploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06c9a49f-bfe6-49a8-b694-0090ac9c7e24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have loaded the `kiwi` module, we can see that we have an entire menu
    of commands we can use, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6217004-4476-48c0-bd35-bdd732856c00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try running `lsa_dump_secrets` commands, and check if we can dump something
    or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b1fa7c4-c7af-476b-9e35-51388daf655a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We can see that we have successfully dumped NTLM and SHA1 hashes with
    the secrets as well. We have a ton of information to get ourselves a golden ticket;
    however, we will look at manipulating golden tickets in the upcoming chapters.
    For now let''s try dumping hashes using the `hashdump` command. To dump hashes,
    we must migrate into a user process. Let''s pull up the process list using the
    `ps` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61f2e3ca-1d77-4f5a-92f6-fdd465fa47ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s migrate to a `lsass.exe` process running under the process ID `576`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ebcab40-4f95-47f0-b072-212c58a3d968.png)'
  prefs: []
  type: TYPE_IMG
- en: Wow! We can see that on migrating successfully to the `lsass.exe` process, running
    the `hashdump` command dumps all the user hashes, which we can crack later.
  prefs: []
  type: TYPE_NORMAL
- en: Using cachedump in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have gained a good level of access, it''s good to go for a `cachedump`
    for credentials, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/869ef393-12ad-48a9-a8c5-7f1c78a8ce11.png)'
  prefs: []
  type: TYPE_IMG
- en: Maintaining access to AD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen that we have many ways to achieve persistence on the target system,
    and we will see some more in the upcoming chapters; however, in a large network
    with many users, it might be easy to secretly add a domain user onto the controller
    to cement our access to the AD network. Let''s load the `post/windows/manage/add_user_domain`
    module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a56ddaee-33b2-4fe1-ae10-eb81f36d5341.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have already set all the required options such as `USERNAME`,
    `PASSWORD`, and `SESSION`. Let''s run this module and see if our user was added
    to the domain or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae27790c-2ad7-4237-a6c0-8fc9ab1a7f21.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have successfully added our user hacker to the domain `PYSSG`.
    We can easily log in back and forth with this user whenever we want; however,
    I would suggest matching names to the existing users, since a word like *hacker*
    will raise a few eyebrows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can have a look at all the harvested details using the `loot`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f20b2d2c-8807-4dc1-8aea-55ab0705fad3.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating manual reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now discuss how to create a penetration test report and see what is to
    be included, where it should be included, what should be added/removed, how to
    format the report, the use of graphs, and so on. Many people, such as managers,
    administrators, and top executives, will read the report of a penetration test.
    Therefore, it's necessary for the findings to be well organized so that the correct
    message is conveyed and understood by the target audience.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good penetration test report can be broken down into the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: Page design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Document control:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cover page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of the report content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of illustrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Executive/high-level summary:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scope of the penetration test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Severity information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assumptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability distribution chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/technical report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Likelihood
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glossary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a brief description of some of the essential sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Page design**: Page design refers to selecting fonts, headers, and footers,
    colors to be used in the report, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document control**: The general properties of a report are covered here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cover page**: This consists of the name of the report, version, time and
    date, target organization, serial number, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document properties**: This contains the title of the report, the name of
    the tester, and the name of the person who reviewed this report'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of the report content**: This contains the content of the report, with
    clearly defined page numbers associated with it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table of content**: This includes a list of all the material organized from
    the start to the end of the report'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of illustrations**: All the figures used in the report are to be listed
    in this section with the appropriate page numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The executive summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **executive summary** includes the entire summarization of the report in
    general and non-technical terms, and focuses on providing knowledge to the senior
    employees of the company. It contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The scope of the penetration test**: This section includes the types of analyses
    performed and the systems that were tested. All the IP ranges that were tested
    are listed in this section. Moreover, this section contains severity information
    about the test as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objectives**: This section defines how the test will be able to help the
    target organization, what the benefits of the test will be, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assumptions made**: If any assumptions were made during the test, they are
    to be listed here. Suppose an XSS vulnerability is found in the admin panel while
    testing a website, but to execute it, we need to be logged in with administrator
    privileges. In this case, the assumption to be made is that we require admin privileges
    for the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary of vulnerabilities**: This provides information in a tabular form,
    and describes the number of vulnerabilities found according to their risk level,
    which is high, medium, and low. They are ordered based on impact, from weaknesses
    causing the highest impact on the assets, to the ones with the lowest impact.
    Additionally, this phase contains a vulnerability distribution chart for multiple
    issues with multiple systems. An example of this can be seen in the following
    table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Impact** | **Number of vulnerabilities** |'
  prefs: []
  type: TYPE_TB
- en: '| High | 19 |'
  prefs: []
  type: TYPE_TB
- en: '| Medium | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| Low | 10 |'
  prefs: []
  type: TYPE_TB
- en: '**Summary of recommendations**: The recommendations to be made in this section
    are only for the vulnerabilities with the highest impact factor, and they are
    to be listed accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology/network admin-level report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section of the report includes the steps to be performed during the penetration
    test, in-depth details about the vulnerabilities, and recommendations. The following
    bullet point  list details the sections of interest for administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test details**: This section of the report includes information related to
    the summarization of the test in the form of graphs, charts, and tables for vulnerabilities,
    risk factors, and the systems infected with these vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of vulnerabilities**: This section of the report includes the details,
    locations, and the primary causes of the vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Likelihood**: This section explains the probability of these vulnerabilities
    being targeted by the attackers. This is done by analyzing the ease of access
    in triggering a particular vulnerability, and by finding out the easiest and the
    most difficult test against the vulnerabilities that can be targeted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendations**: Recommendations for patching the vulnerabilities are to
    be listed in this section. If a penetration test does not recommend patches, it
    is only considered half-finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**References**: All the references taken while the report is made are to be
    listed here. References such as a book, website, article, and so on are to be
    listed explicitly with the author, publication name, year of publication, or date
    of an article published, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glossary**: All the technical terms used in the report are to be listed here
    with their meaning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix**: This section is an excellent place to add different scripts,
    codes, and images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how we could efficiently perform a penetration test
    on a network using OpenVAS built-in connectors and various Metasploit extensions,
    and how a proper report of the test can be generated. We have many other connectors
    at our disposal, such as ones for Nessus, SQLMAP, and so on, and we will pursue
    them in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can conduct client-side attacks with
    Metasploit, and gain access to impenetrable targets with social engineering and
    payload delivery.
  prefs: []
  type: TYPE_NORMAL
