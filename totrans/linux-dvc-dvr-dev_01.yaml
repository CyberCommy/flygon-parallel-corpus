- en: Introduction to Kernel Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux started as a hobby project in 1991 for a Finnish student, Linus Torvalds.
    The project has gradually grown and still does, with roughly 1000 contributors
    around the world. Nowadays, Linux is a must, in embedded systems as well as on
    servers. A kernel is a center part of an operating system, and its development
    is not so obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux offers many advantages over other operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: It is free of charge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well documented with a large community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portable across different platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides access to the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of free open source software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book tries to be as generic as possible. There is a special topic, device
    tree, which is not a full x86 feature yet. That topic will then be dedicated to
    ARM processors, and all those fully supporting the device tree. Why those architectures?
    Because they are most used on the desktop and servers (for x86) and on embedded
    systems (ARM).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter deals among others with:'
  prefs: []
  type: TYPE_NORMAL
- en: Development environment setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting, configure, and build kernel sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel source code organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to kernel coding style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before one starts any development, you need to set an environment up. The environment
    dedicated to Linux development is quite simple, at least, on Debian based systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are parts of codes in this book that are compatible with ARM **system
    on chip** (**SoC** ). One should install `gcc-arm` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I'm running Ubuntu 16.04, on an ASUS RoG, with an Intel core i7 (8 physical
    cores), 16 GB of RAM, 256 GB of SSD, and 1 TB of magnetic hard drive. My favorite
    editor is Vim, but you are free to use the one you are most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the early kernel days (until 2003), oddâ€“even versioning styles were used;
    where odd numbers were stable, even numbers were unstable. When the 2.6 version
    was released, the versioning scheme switched to X.Y.Z, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`X` : This was the actual kernel''s version, also called major, it incremented
    when there were backwards-incompatible API changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Y` : This was the minor revision, it incremented after adding a functionality
    in a backwards-compatible manner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Z` : This is also called PATCH, represented the version relative to bug fixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is called semantic versioning, and has been used until the 2.6.39 version;
    when Linus Torvalds decided to bump the version to 3.0, which also meant the end
    of semantic versioning in 2011, and then, an X.Y scheme was adopted.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it came to the 3.20 version, Linus argued that he could no longer increase
    Y, and decided to switch to an arbitrary versioning scheme, incrementing X whenever
    Y got large enough that he ran out of fingers and toes to count it. This is the
    reason why the version has moved from 3.20 to 4.0 directly. Have a look at: [https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc](https://plus.google.com/+LinusTorvalds/posts/jmtzzLiiejc)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Now the kernel uses an arbitrary X.Y versioning scheme, which has nothing to
    do with semantic versioning.
  prefs: []
  type: TYPE_NORMAL
- en: Source organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the needs of this book, you must use Linus Torvald's Github repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`arch/` : The Linux kernel is a fast growing project that supports more and
    more architectures. That being said, the kernel wants to be as generic as possible.
    Architecture specific code is separated from the rest, and falls in this directory.
    This directory contains processor-specific subdirectories such as `alpha/` , `arm/`
    , `mips/` , `blackfin/` , and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block/` : This directory contains codes for block storage devices, actually
    the scheduling algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crypto/` : This directory contains the cryptographic API and the encryption
    algorithms code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Documentation/` : This should be your favorite directory. It contains the
    descriptions of APIs used for different kernel frameworks and subsystems. You
    should look here prior to asking any questions on forums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drivers/` : This is the heaviest directory, continuously growing as device
    drivers get merged. It contains every device driver organized in various subdirectories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fs/` : This directory contains the implementation of different filesystems
    that the kernel actually supports, such as NTFS, FAT, ETX{2,3,4}, sysfs, procfs,
    NFS, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include/` : This contains kernel header files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init/` : This directory contains the initialization and start up code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipc/` : This contains implementation of the **Inter-Process Communication**
    (**IPC** ) mechanisms, such as message queues, semaphores, and shared memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel/` : This directory contains architecture-independent portions of the
    base kernel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib/` : Library routines and some helper functions live here. They are: generic
    **kernel object** (**kobject** ) handlers and **Cyclic Redundancy Code** (**CRC**
    ) computation functions, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mm/` : This contains memory management code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`net/` : This contains networking (whatever network type it is) protocols code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts/` : This contains scripts and tools used during the kernel development.
    There are other useful tools here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security/` : This directory contains the security framework code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sound/` : Audio subsystems codes fall here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr/:` This currently contains the initramfs implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kernel must remain portable. Any architecture-specific code should be located
    in the `arch` directory. Of course, the kernel code related to user space API
    does not change (system calls, `/proc` , `/sys` ), as it would break the existing
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: The book deals with version 4.1 of the kernel. Therefore, any changes made until
    v4.11 version are covered too, at least this can be said about the frameworks
    and subsystems.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Linux kernel is a makefile-based project, with 1000s of options and drivers.
    To configure your kernel, either use `make menuconfig` for an ncurse-based interface
    or `make xconfig` for an X-based interface. Once chosen, options will be stored
    in a `.config` file, at the root of the source tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most of the cases, there will be no need to start a configuration from scratch.
    There are default and useful configuration files available in each `arch` directory,
    which you can use as a start point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For ARM-based CPUs, these configs files are located in `arch/arm/configs/`
    , and for an i.MX6 processor, the default file config is `arch/arm/configs/imx_v6_v7_defconfig`
    . Similarly for x86 processors, we find the files in `arch/x86/configs/` , with
    only two default configuration files, `i386_defconfig` and `x86_64_defconfig`
    , for 32 and 64 bits versions respectively. It is quite straightforward for an
    x86 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Given an i.MX6-based board, one can start with `ARCH=arm make imx_v6_v7_defconfig`
    , and then `ARCH=arm make menuconfig` . With the former command, you will store
    the default option in `.config` file, and with the latter, you can update add/remove
    options, depending on the needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'One may run into a Qt4 error with `xconfig` . In such a case, one should just
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Build your kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the kernel requires you to specify the architecture for which it is
    built for, as well as the compiler. That says, it is not necessary for a native
    build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, one will see something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the kernel build, the result will be a single binary image, located in
    `arch/arm/boot/` . Modules are built with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can install them using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `modules_install` target expects an environment variable, `INSTALL_MOD_PATH`
    , which specifies where you should install the modules. If not set, the modules
    will be installed at `/lib/modules/$(KERNELRELEASE)/kernel/` . This is discussed
    in [Chapter 2,](text00034.html) *Device Driver Basis* .
  prefs: []
  type: TYPE_NORMAL
- en: 'i.MX6 processors support device trees, which are files you use to describe
    the hardware (this is discussed in detail in [Chapter 6](text00162.html) , *The
    Concept of Device Tree* ). However, to compile every `ARCH` device tree, you can
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the `dtbs` option is not available on all platforms that support device
    tree. To build a standalone DTB, you should use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Kernel habits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kernel code tries to follow standard rules through its evolution. In this
    chapter, we will just be introduced to them. They are all discussed in a dedicated
    chapter, starting from [Chapter 3](http://post) , *Kernel Facilities and Helper
    Functions,* we get a better overview of the kernel development process and tips,
    till [Chapter 13](http://post1) , *Linux Device Model* .
  prefs: []
  type: TYPE_NORMAL
- en: Coding style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going deep in this section, you should always refer to the kernel coding
    style manual, at `Documentation/CodingStyle` in the kernel source tree. This coding
    style is a set of rules you should respect, at least if you need to get its patches
    accepted by kernel developers. Some of these rules concern indentation, program
    flow, naming convention, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most popular ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Always use tab indentation of 8 characters, and the line should be 80 columns
    long. If the indentation prevents you from writing your function, it is because
    this one has too many nesting levels. One can size the tabs and verify the line
    size using `scripts/cleanfile` script in from the kernel source:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also indent the code correctly using the `indent` tool:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Every function/variable that is not exported should be declared as static.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No spaces should be added around (inside) parenthesized expressions. *s = size
    of (struct file)* ; is accepted, whereas *s = size of( struct file )* ; is not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `typdefs` is forbidden.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use `/* this */` comment style, not `// this`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BAD: `// do not use this please`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GOOD: `/* Kernel developers like this */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should capitalise macros, but functional macros can be in lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A comment should not replace a code that is not illegible. Prefer rewriting
    the code rather than adding a comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel structures allocation/initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kernel always offers two possible allocation mechanisms for its data structures
    and facilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these structures are:'
  prefs: []
  type: TYPE_NORMAL
- en: Workqueue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waitqueue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasklet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mutex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spinlock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamical initializers are all macros it means they are always capitalized:
    `INIT_LIST_HEAD()` , `DECLARE_WAIT_QUEUE_HEAD()` , `DECLARE_TASKLET( )` , and
    so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That being said, these are all discussed in [Chapter 3](text00023.html) , *Kernel
    Facilities and Helper Functions* . Therefore, data structures that represent framework
    devices are always allocated dynamically, each of which having its own allocation
    and deallocation API. These framework device types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Char device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IIO device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framebuffer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWM device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RTC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scope of the static objects is visible in the whole driver, and by every device
    this driver manages. Dynamically allocated objects are visible only by the device
    that is actually using a given instance of the module.
  prefs: []
  type: TYPE_NORMAL
- en: Classes, objects, and OOP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kernel implements OOP by means of a device and a class. Kernel subsystems
    are abstracted by means of classes. There are almost as many subsystems as there
    are directories under `/sys/class/` *.* The `struct kobject` structure is the
    center piece of this implementation. It even brings in a reference counter, so
    that the kernel may know how many users actually use the object. Every object
    has a parent, and has an entry in `sysfs` (if mounted).
  prefs: []
  type: TYPE_NORMAL
- en: Every device that falls into a given subsystem has a pointer to an **operations**
    (**ops** ) structure, which exposes operations that can be executed on this device.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explained in a very short and simple manner how you should download
    the Linux source and process a first build. It also deals with some common concepts.
    That said, this chapter is quite brief and may not be enough, but never mind,
    it is just an introduction. That is why the next chapter gets more into the details
    of the kernel building process, how to actually compile a driver, either externally
    or as a part of the kernel, as well as some basics that one should learn before
    starting the long journey that kernel development represents.
  prefs: []
  type: TYPE_NORMAL
