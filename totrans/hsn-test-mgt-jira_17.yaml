- en: Jira Integration with Automated Testing Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have learned what test management is and how Jira
    helps SQA teams manage the testing process effectively. Now, let's see how Jira
    and the DevOps pipeline can be leveraged to automate and manage test execution
    to improve agility in the development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the DevOps pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Jira plugins to connect to Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding an example workflow to integrate and execute automated scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also learn how Jira helps with **continuous integration** (**CI**) and
    **continuous delivery** (**CD**) in a software project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the DevOps pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps is a software development paradigm that involves a cycle of continuous
    development, testing, integration, deployment, and monitoring. This model is the
    result of maturing software development practices, especially with the advent
    of the Agile methodologies, which require faster product and service releases
    while ensuring adequate quality measures. The following diagram shows the stages
    in the DevOps cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d4a8827a-a5d3-4a1d-a164-fcd1ba29f728.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding diagram, DevOps requires development, testing,
    and operations' functions to act in tandem. DevOps phases are basically an automated
    and streamlined implementation of the development phase in the Agile SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: In the development phase, developers start writing code based on the requirements
    for the product. Also, testers start writing test cases or scripts for automated
    testing. This requires developers and testers to make several commits of their
    artifacts while maintaining several versions of their code and scripts before
    a final working build can be achieved. Hence, source code management is essential
    for effective and productive development. This can be problematic in a team environment
    without a version control tool. Hence, DevOps employs several version controlling
    tools, such as GitHub, Bitbucket, and Team Foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Once the developer commits the code, the DevOps processes get triggered, which
    automatically compiles and builds the code along with the other set of code commits
    from the rest of the team. If proper unit tests have been written, DevOps processes
    and then executes them to assert whether the results match expectations. Any defects
    or issues found at this stage are communicated through emails and tickets to the
    development team. There are several tools on the market for CI, such as Jenkins
    and Circle CI. We will be looking at utilizing Jenkins with Jira in this chapter.
    Jenkins is an open source tool for CI. It can be integrated with several software
    development tools to automate the process of CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build passes the unit tests and integration tests at the development
    level, the release build is deployed to appropriate testing servers for the testing
    team to initiate their tests. At this point, automation test scripts (if available)
    are triggered to test the build. Automation ensures that the DevOps phases are
    continuous; otherwise, it leads to bottlenecks in the agility of the development
    process. There are several test automation frameworks and tools available, such
    as Selenium, TestComplete, and Eggplant, which can help to automate the testing
    process.
  prefs: []
  type: TYPE_NORMAL
- en: The build, once it is tested and fixed for all defects, is then ready to be
    deployed. After appropriate approvals from the product team and stakeholders,
    it is then deployed to the production server. Containerization of deployed builds
    helps facilitate resilient servers, as well as effective load balancing and configuration
    management. Numerous containerization tools are available on the market, including
    Docker, Ansible, and Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: All phases of the DevOps process require continuous monitoring, using tools
    such as Prometheus, Splunk, and Ganglia, to alert the development teams to issues
    that need to be resolved efficiently. Continuous monitoring is necessary for addressing
    bottlenecks and improving processes for a faster delivery mechanism. Continuous
    feedback is another mechanism that improves the product by helping the team plan
    for the next deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the basics of the DevOps process, let's see how we can
    configure Jenkins to integrate it with Jira and test automation tools.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Jira plugins to connect to Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the synapseRT, Zephyr, and Test Management tools for Jira plugins have
    their own way of connecting with CI/CD tools, such as Jenkins. We will be looking
    at how to install and configure each of these Jira plugins for Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT comes pre-installed with integration with CI/CD tools. Let''s configure
    the plugin to connect to our Jenkins installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Administration | Add-ons | synapseRT | Integration and click on the Add
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set Jenkins as the Type of application and provide the Jenkins URL. In our
    case, we have hosted Jira on a Docker instance, while Jenkins is hosted on the
    localhost at port `8081`. Hence, we provide `http://host.docker.internal:8081` as
    the URL instead of `http://localhost:8081`, along with the User and Password for
    the Jenkins instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/60f8e221-81af-42e4-85ad-96363774797d.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information or clarification on issues regarding configuring and setting
    up synapseRT for Jenkins, visit [https://bit.ly/2RBEAfA](https://bit.ly/2RBEAfA).
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr provides plugins for integrating with Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the plugin, click on Manage Jenkins | Manage Plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/4ed9efdf-0476-4123-a5dc-0a9ea2c32e3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Available tab, search for `Zephyr for Jira`, and click on either
    the Install without restart or the Download now and install after restart button.
    Once installed successfully, the plugin will be visible on the Installed tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b6d63a0c-f471-4184-8c53-e3190ab13efe.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it's installed, we can configure the plugin to connect it with Zephyr for
    Jira in our instance of Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on Manage Jenkins and click on Configure System. If the plugin ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Management for Jira provides plugins for integrating with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: To install the plugin, click on Manage Jenkins | Manage Plugins, just as you
    did for Zephyr.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, click on the Available tab, search for `Test Management for Jira`, and
    click on either the Install without restart or the Download now and install after
    restart button. Once installed successfully, the plugin will be visible on the
    Installed tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/de5e7893-53c8-4c7a-b4fd-53271ab0f0bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it's installed, we can configure the plugin to connect it with Test Management
    for Jira in our instance of Jira. Click on Manage Jenkins and click on Configure
    System. If the plugin was installed correctly, the configure system will have
    a section as Test Management for Jira. Select the type of Jira instance in your
    organization. In our case, we select the Jira Server(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the Jira URL and the credentials that are connected to the projects
    in Jira. Click on the Test Configuration button to validate the settings. If everything
    is validated, it will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/cc85b9bd-b12f-48e5-8c62-0f7f1a1e83ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For more information or clarification on issues regarding configuring and setting
    up Test Management for Jira for Jenkins, visit the following link: [https://www.adaptavist.com/doco/display/KT/Jenkins](https://www.adaptavist.com/doco/display/KT/Jenkins).'
  prefs: []
  type: TYPE_NORMAL
- en: Example workflow to integrate and execute automated scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have configured our plugins to integrate with Jenkins, we now see
    an example of how the DevOps pipeline functions with each plugin. For this workflow,
    we use the following automated test script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a test automation code in Eclipse with a TestNG build script in XML. For
    this purpose, we have created the code in Java using Eclipse. We have created
    a new Java project in a new package named `JenkinsDemoPkg` with a class named
    `demoJenkins`. We also use `JenkinsDemoPkg.demoJenkins: testJenkins` to get the
    complete name of the class and method, which will be used for tracking in plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see the steps to integrate Jenkins with synapseRT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture the results of the build action as a post-build activity. To capture
    the results of the build in Jenkins so that synapseRT can pull them, the Post-build
    Actions need to be configured for the Jenkins job as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d9bcc824-10fc-4f14-95b9-93131e34108b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'synapseRT allows us to trigger the Jenkins job from within the test cycle.
    For synapseRT to be able to track the execution results, it needs the Test Reference
    to be added to the test case in the Automation section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7a6e408b-72bd-4aca-95a5-7f994518f8a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Automation | Test Reference is the complete name of the module we captured
    in step 1\. Then, add the test case to a test cycle and click on the Run button
    to trigger the Jenkins job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8ba3151c-62fd-4661-b1df-61aa751f7dd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click the Run button, the Jenkins job starts running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fa12d248-1d95-419f-bbc6-db454ec7be58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Capture the result of the build in the Jira plugin. After around 60 seconds,
    the results of the job will be captured in Jira:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7b4a634d-c0a6-4402-bb19-a7e1e0b5a863.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see the steps to integrate Jenkins with Zephyr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture the results of the build action as a post-build activity. To capture
    the results of the build in Jenkins so that Zephyr can pull it, the Post-build
    Actions need to be configured for the Jenkins job. Provide the Project Name for
    the Zephyr project and select the appropriate Cycle and Version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/18fd32d4-10fd-47dd-9215-6f1c335fc7dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To trigger the Jenkins job, click on the Build Now button after clicking on
    the job name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8a885e80-c5a9-4e4c-b4e9-3bf37e21818b.png)'
  prefs: []
  type: TYPE_IMG
- en: Capture the result of the build in the Jira plugin. After the Jenkins job completes,
    the ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Test Management for Jira with Jenkins and other CI/CD tools is like
    the setup we performed for Zephyr. This has been covered in detail in the help
    section at the following link: [https://www.adaptavist.com/doco/display/KT/Integrations](https://www.adaptavist.com/doco/display/KT/Integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the DevOps pipeline and execution using Jira
    plugins. We learned how the DevOps pipeline can be leveraged in a software development
    project to become truly agile and deliver continuously, while improving in making
    deliveries. We configured our Test Management plugins for Jira to integrate with
    Jenkins as our CI/CD tool. We saw a simple hands-on example of working in the
    DevOps pipeline for automating test case management.
  prefs: []
  type: TYPE_NORMAL
- en: Here comes the end of our long journey. I hope you enjoyed reading this book!
  prefs: []
  type: TYPE_NORMAL
