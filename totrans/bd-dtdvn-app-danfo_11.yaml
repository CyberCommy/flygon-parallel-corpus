- en: '*Chapter 8*: Creating a No-Code Data Analysis/Handling System'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main purposes of creating **Danfo.js** was to easily enable data
    processing in the browser. This gives the ability to integrate data analysis and
    handling data seamlessly into web apps. Apart from the ability to add data handling
    to a web app, we have the tools to make data handling and analysis look more like
    what designers do when they use **Photoshop** and **Figma**; how they mix brush
    strokes together on the canvas just with a click or how they manipulate images
    by laying a canvas on top the canvas, just by dragging and dropping and with some
    button clicks.
  prefs: []
  type: TYPE_NORMAL
- en: With Danfo.js, we can easily enable such an environment (using tools such as
    **React.js** and **Vue.js**) where data scientists become artists maneuvering
    their way through data with a few clicks of a button and getting the desired output
    without actually coding anything.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of tools with such features commonly exist, but the cool thing about Danfo.js
    is building the whole app with tools in JavaScript. In fact, doing all operations
    in the browser without a call to the server is quite amazing.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to show how such an environment can be built using
    Danfo.js and React.js. Also, note that the tools used here (apart from Danfo.js)
    are not mandatory for building the app; these are just the tools I'm quite familiar
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring and designing the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App layout and the `DataTable` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating different `DataFrame` operation components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the `Chart` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the basic environment and knowledge requirements for this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A modern web browser such as **Chrome**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A suitable code editor such as **VScode**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bit of knowledge of `tailwindcss` and `React-chart-js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of the basics of React.js is needed. To brush up on React.js, check
    out the official site at [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code for this chapter is available and can be cloned from GitHub at [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the project environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React.js is used for the project, and to set up the React app, we will use the
    `create-react-app` package to automatically generate a frontend build pipeline
    for us. But first, make sure you have Node.js and `npx`, a package runner tool
    that comes with *npm 5.2+*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dive into setting up our environment, here are the tools needed and
    that will be installed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React.js**: A JavaScript framework for building the UI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Draggable**: A drag-and-drop library that makes it possible to move HTML
    elements around'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chart` components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React-table-v6**: A React library for displaying tables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some alternatives to the preceding tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue.js**: A JavaScript library for building the UI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rechart.js**: A composable charting library built on React.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Material-table**: A data table for React based on **material-UI**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a React app pipeline, we make a call to `create-react-app` using
    `npx` and then specify the name of our project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a directory called `data-art` in the parent directory
    in which the command is being initiated. This `data-art` directory is prefilled
    with the React.js template and all the packages needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the structure of the `data-art` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – React.js directory structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – React.js directory structure
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation, we can always start the app by using the following
    command (assuming you are not in the `data-art` directory in the terminal):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will start the app server and also output the server
    port in which the app is running in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – yarn start output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – yarn start output
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 8.1*, the app is served at `http://localhost:3000`. If everything
    works properly, then once the server is started, it will automatically open the
    web browser to display the React app.
  prefs: []
  type: TYPE_NORMAL
- en: For the development of the app, we won't spend more time on styling, but we
    will make it easier to integrate styling in the future and also enable quick prototyping;
    we'll make use of `tailwindcss`.
  prefs: []
  type: TYPE_NORMAL
- en: To make Tailwind work with the React.js app, we will need to do some extra configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install Tailwind and its peer dependencies via `npm` as shown in the
    `tailwindcss` docs: [https://tailwindcss.com/docs/guides/create-react-app](https://tailwindcss.com/docs/guides/create-react-app):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is done, we will go ahead and install the `craco` module,
    which allows us to override `postcss` configuration as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing `craco`, we can go ahead and configure how to build, start,
    and test the React app. This will be done by changing the commands for `"start"`,
    `"build"`, and `"test"` in `package.json` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With the changes made previously, let''s create a config file that enables
    `craco` to always inject `tailwindcss` and `autoprefixer` when building a React
    app, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s configure `tailwindcss` itself. With this configuration, we can tell
    `tailwindcss` to remove unused styles in production, we can add custom themes,
    and we can also add customized color, font, width, and height not included in
    the `tailwindcss` package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After configuring Tailwind, we will edit the `css` file, `index.css`, in the
    `src` directory. We''ll add the following to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We are done with the configuration; we can now import `index.css` in `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in `App.js`, we still have the default code that came with the `create-react-app`
    package; let''s edit the code. Here is the initial code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We edit the HTML code in the `App` comment by editing the HTML and replacing
    it with the name of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By updating `App.js` with the preceding code and saving it, you should see
    the changes being made in the browser directly, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – React app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – React app
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test our `tailwindcss` configuration to ensure it is set properly. We
    will do this by adding some style to the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `css` styling is declared within a `div` attribute called `className`. First,
    we set the maximum width and the border, then create a margin along the *x* axis
    (margin left and right to be `auto`), declare the font size to be `text-3xl`,
    set the margin top to be `60`, and then center the text within the `div` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the styling, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Centering the div and text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Centering the div and text
  prefs: []
  type: TYPE_NORMAL
- en: The code base is set and we are ready to implement our no-code environment.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how to set up a React environment for our app. We also
    saw how to configure `tailwindcss` for our app. In the next section, we will learn
    how to structure and design the app.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring and designing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React.js has some core philosophy of app design, which is mostly about breaking
    up the UI into a component hierarchy, and also one of the ideas is to identify
    where your state should live.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to design the structure of our no-code app
    with React.js and also consider the React philosophy of app design. With this
    principle, we will find it easy to implement a basic UI in React.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's understand what a no-code environment is and what we want to achieve
    with it. The no-code environment is used to make data handling and analysis easier
    with just the click of a few buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a platform where users can upload their data, perform analysis,
    and do what they do with code, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame-to-DataFrame operations such as `concat`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arithmetic operations such as `cummax` and `cumsum`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying to filter out a DataFrame by a column value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing a DataFrame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We want to be able to do all that without actually coding, and everything will
    be done in the browser. We also want to make it possible to get insights from
    data via data visualization using a bar chart, line chart, and pie chart. The
    following figure shows a sketch of the app design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – App structure and design sketch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – App structure and design sketch
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.5* shows the structure and design of the app. The app is divided
    into three main components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Navbar` component, containing file upload, a bar chart, a line chart, and
    the `DataFrame` operation select field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main body containing a `Data Table` component and a `chart` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SideBar`, containing the side planes for chart and `DataFrame` operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The app workflow can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a data file (`csv`) is uploaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By uploading a file, the first `Data Table` is created. This is a component
    containing the display of DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To perform any operation, such as `DataFrame` operations or chart operations,
    the Data Table is selected, so that we can identify the correct table to perform
    operations on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For chart operations, either a bar chart, line chart, or pie chart is clicked.
    This clicked event activates the `Side Plane` for chart operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a `DataFrame` operation is selected, the `Side Plane` is activated for `DataFrame`
    operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you've filled in the necessary fields in the `Side Plane`, a new chart
    component and `Data Table` component are created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure describes the whole workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – App workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – App workflow
  prefs: []
  type: TYPE_NORMAL
- en: The workflow shows how each component responds to one another. For instance,
    without uploading a file, the main body and the `Side Plane` will be invisible.
    Even with file upload, the `Side Plane` remains hidden and only comes up whenever
    a DataFrame or chart operation is to be performed on a particular data table.
  prefs: []
  type: TYPE_NORMAL
- en: With this, it shows that we need to create a state to manage the activation
    of the main body whenever a file is uploaded and also a state to manage how the
    `Side Plane` is activated when operations are being done on a data table. Also,
    note that the `Side Plane` contains two operations, and we must display the fields
    for these operations based on the type of operations being selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a chart operation is being selected, the `Side Plane` needs to display the
    necessary fields for the selected plot chart, either bar, line, or pie chart,
    and if it''s a `DataFrame` operation that''s being selected, the `Side Plane`
    needs to display the DataFrame operation fields as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Side plane operation fields'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Side plane operation fields
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 8.7*, we can see that the data table and `chart` components have
    an `Data Table` components and `chart` components. Having a state for each component
    makes it possible to create, update, and delete the component as we desire.
  prefs: []
  type: TYPE_NORMAL
- en: As described in the app workflow, the `Side Plane` operations need data for
    visualization and `DataFrame` operations and this data is obtained by clicking
    on our desired `Data Table` to work on. Each `Data Table` stores its own DataFrame
    object (we'll look into this deeply while implementing the steps). Hence, whenever
    a data table is clicked, its index in the data table state is obtained and passed
    into the side plane alongside the data table state that indicates which data table
    to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Also, for the side plane to know which chart type (bar, line, or pie) is required
    for the operation or what type of `DataFrame` operation is to be done, we create
    a state to manage what type of chart or `DataFrame` is currently selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, the set of states that''s needed is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: State to manage the `DataTable` list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State to manage the list of charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State to show to manage the visibility of `SidePlane`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State to manage the current `DataTable` index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State to manage the type of chart selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State to manage the current `DataFrame` operation selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The state created here is not well optimized. It's possible to manage the number
    of states created; for example, the same state managing `Side Plane` visibility
    can also be used to manage the type of chart selected.
  prefs: []
  type: TYPE_NORMAL
- en: Since we will be using more than one or two states and some of the states interact
    with another state, we could use `useReducer` (a React Hook) to manage the state
    interactions but we would like to make this simple without adding overhead knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we talked about the app design and structure. We also designed
    the app workflow and talked about different states to be created for the app.
    In the next section, we will talk about the app layout and `DataTable` components.
    We will see how to create a data table component and how to manage the state.
    We will also look into uploading a file in the browser with Danfo.js.
  prefs: []
  type: TYPE_NORMAL
- en: App layout and the DataTable component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll see how to lay out the app based on the design and workflow
    discussed in the previous section. Also, we will implement the `DataTable` component,
    responsible for the display of `DataFrame` tables. We will also implement the
    `DataTables` component, responsible for displaying different `DataTable` components.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen the sketch of what the app will look like and also seen the basic
    workflow of the app. We will start to implement the steps by first building the
    basic layout of the app and then implementing the data table component.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `tailwindcss`, it''s quite easy to lay out the app. Let''s create a file
    called `App.js` and input the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet creates the layout of the app with a `flex` box.
    This layout shows the basic components of the app, which are `Nav`, `Main Body`,
    and `Side Plane`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `css` instance being used in the tutorial won't be explained. Our main focus
    is on building the functionality of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything runs well, we should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – App layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – App layout
  prefs: []
  type: TYPE_NORMAL
- en: We've laid out the app. Let's move on to implementing `DataTable` components
    to display the result of all `DataFrame` operations.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing DataTable components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `DataTable` component is responsible for the display of a data table. For
    each DataFrame operation, we generate a new data table showing the result of the
    operation as shown in the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Data table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Data table
  prefs: []
  type: TYPE_NORMAL
- en: For the display of the table, we'll make use of a React package called `react-table-v6`
    and since we want the `DataTable` component to be draggable across the page, there
    is a package called `react-draggable`, which makes it easier to implement the
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `DataTable` can be pulled from here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add these packages to our code base using `yarn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the packages are installed, let''s create a `DataTable` component in the
    `src/component/DataTable.js` file with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We create the `DataTable` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DataTable` component takes in the following `props` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`columns`: Data table column names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values`: Data table values for each column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setCompIndex`: This is a state function used to manage the current data table
    selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index`: This is the index of the current table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `react-table` component, we need to reshape the column and the values
    to fit the desired input for the `react-table` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s reshape the column value to be passed into `react-table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding code, the column names, which are the `Header` for the
    table, are transformed to the following shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `Header` key is the name of the column to be shown in the table, and `accessor`
    is the key in the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to transform the data table values into a format needed by `react-table`.
    The following code is used to transform data table values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the preceding code, we will transform the data table values into
    the following data form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Initially, `values` is an array of an array that is being transformed into the
    preceding data format and then assigned to the `data` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The accessor declared in the preceding column format points to the value of
    each of the keys in the dictionary. Sometimes, we might have nested data in the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For this type of data format, we can declare the `data` column to be in the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For this project, we won't be working with this nested data format, so there
    won't be a need to dive deeper, but if you are curious, you can check the `react-table-v6`
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The column names, including `Header`, and the table data are now in the right
    format and are ready to be passed into the `react` table. The `DataTable` component
    is now updated to contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `ReactTable` component is wrapped in the `Draggable` component to make the
    `DataTable` component draggable. In the `ReactTable` component, we set up some
    pagination fields, such as setting the default page to be `10`.
  prefs: []
  type: TYPE_NORMAL
- en: Recall how when designing the workflow of the app we mentioned tracking the
    ID of a `Data Table` when clicked. The `handleSide Plane` function is used to
    make a call to `setCompIndex`. `setCompIndex` is used to update the `compIndex`
    state, which stores the index of the selected `Data Table`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `DataTables` is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several Data Tables will be generated per operation, hence we need to manage
    the display of this `Data Table`. We''ll create a component that manages the display
    of all the `Data Tables` generated; hence, we''ll create a file in the component
    directory and name it `Data Tables`, containing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This component loops through the `datacomp` state and passes each prop into
    the `DataTable` components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sub-section, we'll go ahead and initialize different states and
    also show how to upload a CSV and obtain our data.
  prefs: []
  type: TYPE_NORMAL
- en: File upload and state management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the app design, we see that for any operation to take place, we need to
    upload a file first. By uploading the files, we create the `DataFrame` that will
    be used by the `DataTable` and `chart` components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Across this chapter, the code in `App.js` is gradually updated based on the
    implementation of new components. But the final code for `App.js` is available
    here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll update the code in `App.js` with the following step to contain the `Data`
    component state, file upload, and updating of the state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import `React` and a React hook called `useState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We import the `read_csv` method, which will be used to read the CSV files uploaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a state to store a list of data for each `DataTable` component generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create a function to manage file upload and read the uploaded file
    into a `DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we generate a blob URL from the uploaded file with `URL.createObjectURL`.
    This is done because the `read_csv` code in `Danfo.js` is only taken in the local
    path of the CSV file, the HTTP URL of a CSV file, and the blob URL of a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: The generated URL is then passed into the `read_csv` function. Since `read_csv`
    is an asynchronous function, we need to wait for the promise to be resolved, and
    then collect the returned value from the promise via the `then` method. The return
    value from the resolved promise is a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `read_csv`, the CSV data is converted into a `DataFrame` and then the
    `DataComponent` state is updated. Using the `setDataComp` state function, we created
    an object containing the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a) `columns`: To store the headers (column name) of the CSV file'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) `values`: To store the CSV data point, which is the `DataFrame` values'
  prefs: []
  type: TYPE_NORMAL
- en: 'c) `df`: To store the `DataFrame` generated'
  prefs: []
  type: TYPE_NORMAL
- en: 'd) `keys`: Generates a key for each of the Data component `data`'
  prefs: []
  type: TYPE_NORMAL
- en: There was a decision to be made, between actually saving the DataFrame itself
    in the state data for each component. Since we have the column name and the `DataFrame`
    value stored, it looks redundant.
  prefs: []
  type: TYPE_NORMAL
- en: But the reason we finally go with storing it is that it will be computationally
    expensive to always create a `DataFrame` from the column and values every time
    we need to perform `DataFrame` operations.
  prefs: []
  type: TYPE_NORMAL
- en: Also, `columns` and `values` are stored for easy accessibility whenever we want
    to generate a table from the `react-table` component. But still, it feels redundant
    and as a personal exercise (among the list of to-dos that will be listed at the
    end of this section), you can go ahead and clean it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'We print out the output of the `dataComp` state in the browser console once
    the state is updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the updated UI of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Updated UI for file upload'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Updated UI for file upload
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a file is uploaded, we should see the following output in the browser
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – dataComp state output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – dataComp state output
  prefs: []
  type: TYPE_NORMAL
- en: We've set up the file upload and also the state management for each of the `DataTable`
    components. Let's integrate the `DataTables` component created into the app.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the DataTables component into App.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`App.js` will be updated with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the `DataTables` component and create a `compIndex` state, which
    enables us to store the index of the `DataTable` component we want to work on
    at the moment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add the `DataTables` component to the `App` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To enable `DataTable` component visibility, we check that the `dataComp` state
    is not empty. Before uploading a file, if the `dataComp` state is empty, the `DataTable`
    component will not be visible. Once a file is updated, the `DataTable` component
    becomes visible, since the `dataComp` state is no longer empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code should give us the following output once a file is uploaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Display of the DataTable component on file upload'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – Display of the DataTable component on file upload
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we talked about file upload and `DataTable` creation and management
    and saw how to manage state. In the next section, we will implement different
    `DataFrame` operation components and also implement the `Side Plane` for `DataFrame`
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating different DataFrame operation components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create different `DataFrame` operation components and
    also implement the `Side Plane` for `DataFrame` operation components. Danfo.js
    contains a lot of `DataFrame` operations. If we were to design a component for
    each, it would be very stressful and redundant.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent the creation of a component for each `DataFrame` method, we group
    each of the `DataFrame` operations based on their (keyword) argument, that is,
    based on the variable passed into them. For example, there are some `DataFrame`
    methods that take in only the axis of operation, hence we can group these types
    of methods together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of `DataFrame` operation components to be created and the `DataFrame`
    method grouped under them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame` method whose argument is only the axis of operation, which can
    be either `1` or `0`. The methods used to carry out arithmetic operations on `DataFrame`
    include `min`, `max`, `sum`, `std`, `var`, `sum`, `cumsum`, `cummax`, and `cummin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` components, such as the logical operation between a `DataFrame`
    and a series, a value, or a `DataFrame`. The methods used to carry out these operations
    are `concat`, `lt`, `gte`, `lte`, `gt`, and `neq`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` statistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will start looking at the implementation of these components starting from
    the least complex in this order: `Describe`, `query`, `Df2df`, and `Arithmetic`.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Describe component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will implement the `Describe` component and also integrate
    the `Side Plane` component.
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/Components/` directory, let's create another folder called `Side
    Planes`. This folder will contain all the components for `DataFrame` operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Side Planes/` folder, let''s create a `".js"` file named `Describe.js`
    and update it with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the `Describe` functional component, taking in the `dataComp` state
    and the `setDataComp` state function, to update the `dataComp` state with the
    generated `DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a button named `Describe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `Describe` component has a button interface because it does not take in
    any arguments. The button has an `onClick` event that triggers the `Describe`
    function whenever the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then implement the `describe()` function, which is triggered anytime the
    `describe` button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We obtain the `df` key containing the `DataFrame` from the `dataComp` state
    and then call the `describe` method.
  prefs: []
  type: TYPE_NORMAL
- en: From the `DataFrame` generated from the `describe` operation, we obtain the
    columns and add an index to the list of column names. The index is added at the
    start of the list; this is done because the index generated from the `describe`
    method is needed to capture what each row in the data is.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we obtain the `DataFrame` value, loop through it, and add the index values
    to the `DataFrame` value obtained.
  prefs: []
  type: TYPE_NORMAL
- en: 'We update the `dataComp` state with the new generated column, value, and `DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To view this component in action, we will need to implement the `DataFrame`
    operation selection field, as shown in the `App` design sketch in *Figure 8.5*.
    This `DataFrame` operation selection field enables us to select which of the `DataFrame`
    operation components to show in `Side Plane`.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to add the `select` field for the `DataFrame` operation
    in the `Navbar` component alongside the input field for file upload. Also, we
    need to implement condition rendering for each of the `DataFrame` operation components
    shown in `Side Plane`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SidePlane for the Describe component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `Side Planes/` folder, let''s create a file called `Side Plane.js` and
    input the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we create a `Side Plane` component. This component contains
    conditional rendering based on the type of data operation selected. The `DataFrame`
    operation selected is managed by the `dfOpsType` state.
  prefs: []
  type: TYPE_NORMAL
- en: The `Side Plane` takes in the `dataComp` state, which can be any of the data
    stored in the `dataComps` state. Some `DataFrame` operations will need the selected
    `dataComp` state and also the whole state, which is `dataComps` state, for their
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Side Plane` component, we will check `dfOpsType` to find out the type
    of operation passed and the interface to render in the side plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move into integrating `Side Plane` into `App.js`, let''s create an
    `index.js` file in the `Side Planes/` folder. With this, we can define the component
    to import. Since we are using conditional rendering from the `Side Plane` component,
    we just need to export the `Side Plane` component in the `index.js` instance,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code enables us to import `Side Plane` in `App.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating SidePlane into App.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Side Plane` is created. Let''s integrate it into `App.js` and also add the
    HTML `select` field for the `DataFrame` operation to `App.js,` as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the `SidePlane` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We update the `App` component functionality with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we create the `dfOpsType` state to store the current
    type of `DataFrame` operation selected.
  prefs: []
  type: TYPE_NORMAL
- en: '`showSidePlane` is also created to manage `SidePlane` visibility. Also, an
    array of `DataFrame` operations is created. We then create a function to handle
    updating `dfOpsType` and the `showSidePlane` state whenever a `DataFrame` operation
    is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then add the `SidePlane` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we display the `SidePlane` by first checking that the
    `SidePlane` state is not *false*, then we check the type of `SidePlane` to display.
    Since we''ve only implemented the `Describe` component among the list of `DataFrame`
    operations, let''s upload a file and then perform a `DataFrame` operation. The
    following screenshot shows the result of performing a `Describe` operation on
    a `DataTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Describe operation on DataTable'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Describe operation on DataTable
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, the data table at the top left is generated when
    the file is uploaded and the `DataFrame` at the bottom right as a result of the
    `Describe` operation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how to implement the `Describe` component and how to
    manage `Side Plane` visibility. In the next section, we will implement the `Query`
    component for the `Query` method in the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Query component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll create a component for the `DataFrame` query method.
    This component will aid the filtering of the `DataFrame` by column values per
    `Data Table`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for a `Query` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file in the `components/Side Planes/` folder named `Query.js`
    and update it with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the `Query` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We created a `useRef` hook variable, which enables us to obtain the current
    value of the input to the following input fields: the column field (takes in the
    name of the column to query), the logic field (takes in the logic value to be
    used for the query), and the value field (takes in the value to be used to query
    the selected column).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then update the `Query` component with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we obtain the column names available in the `DataFrame`
    of the current `Data Table`. This column name will be used to populate the select
    field to which the user can select the column to query.
  prefs: []
  type: TYPE_NORMAL
- en: We also create a list of symbols characterizing the type of logic operation
    we want to perform. This symbol will also be used to populate a select field to
    which users can select the logical operation to be used for the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `query` function. This function will be triggered to perform the query
    operation whenever the **query** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We obtain the value of each of the input fields (select fields) whenever the
    `query` function is triggered. For example, to obtain the value of the column
    field, we make use of `columnRef.current.value`. The same thing is applicable
    for obtaining the value in another field.
  prefs: []
  type: TYPE_NORMAL
- en: We also invoke the query method for the `DataFrame` belonging to the current
    `dataComp` state. The value obtained from each of the input fields is passed into
    the query method to perform the operation.
  prefs: []
  type: TYPE_NORMAL
- en: The `dataComps` state is updated by using the `setDataComp` state function.
    By updating the `dataComps` state, a new `DataComp` state is created containing
    the result of the `query` method.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the query component interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve seen the backend of the `Query` component, so now let''s build an interface
    for it. Let''s update the preceding code in `Query.js` with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the query UI, we create a form containing three different input fields.
    First, we create the input field for the column field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: For the column field, we loop through the column array to create HTML select
    field options for the list of columns in the `DataFrame`. We also include `columnRef`
    to track the selected column name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the logic input field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We loop through the `logic` array and fill in the HTML select field with the
    logic operators. Also, `logicRef` is added to the HTML select field to obtain
    the selected logic operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create the `input` field for the query value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a `button` class name to make a call to the `query` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To visualize the `query` component in the main app, let''s update the `SidePlane`
    component in `SidePlane.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code updates the `Side Plane` to contain the `Query` component.
    If we perform a query operation on an uploaded file, we should get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Query operation run on column C, checking whether its value
    is greater than 20'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Query operation run on column C, checking whether its value is
    greater than 20
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created a `query` component. In the next section, we will
    look into creating a component for operations involving `DataFrame`-to-`DataFrame`
    operations, series, and scalar values.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Df2df component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will be implementing a component for performing an operation
    between a `DataFrame` and another `DataFrame`, `Series`, and `Scalar` values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `Df2df` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js).'
  prefs: []
  type: TYPE_NORMAL
- en: There are different components in Danfo.js that perform the operation between
    a `DataFrame` and a `Series` and a `DataFrame` and a `Scalar` value. To prevent
    having to create a component for each of these methods, we can group them together
    to form a single component.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of `DataFrame` methods we plan on grouping together is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Less than (`df.lt`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater than (`df.gt`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not equal to (`df.ne`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Equal to (`df.eq`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater than or equal to (`df.ge`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addition (`df.add`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtraction (`df.sub`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplication (`df.mul`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Division (`df.div`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power (`df.pow`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One common attribute in the preceding list of methods is that they all take
    in the same type of arguments, which is the value (it can be a `DataFrame`, `Series`,
    or `scalar` value) and the axis on which the operation is to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the `DataFrame` `concat` method, it also takes in arguments of
    the same pattern similar to the methods in the preceding list. The only difference
    is that for the `concat` method, the `df_list` argument is an array of `DataFrames`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file in the `Side Planes/` folder named `Df2df.js`. In this
    file, we will implement the `Df2df` component with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import `concat` from Danfo.js, and then create the `Df2df` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We created a reference variable for each of the input fields. For the `Df2df`
    operation, we have four input fields (the `DataFrame` selection field, the `scalar`
    value input field, the `axis` field, and the `operation` type field).
  prefs: []
  type: TYPE_NORMAL
- en: The `operation` type fields contain the list of all operations available in
    the `Df2df` component. This will be a select field, hence users can select any
    of the operations to work with.
  prefs: []
  type: TYPE_NORMAL
- en: We also create an `allOps` list of all operations to be offered by the `Df2df`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to create a function to perform the `Df2df` operation whenever
    the `submit` button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We obtained values from all the reference variables belonging to each input
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'We update the `df2df` function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: We check that the operation selected is not a `concat` operation. This is done
    because `concat` operations take in a list of `DataFrames` instead of just a `DataFrame`
    or `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: We make use of the `eval` function to prevent writing multiple `if` conditions
    to check which `DataFrame` operation to call.
  prefs: []
  type: TYPE_NORMAL
- en: 'We implement the condition for the `concat` operation. We also make a call
    to the `concat` method in the `DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps show the backend implementation of the `Df2df` component.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Df2df component interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s update the code for the UI with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the UI, we need to create a form containing four input fields. First, we
    create an input field to select the type of `DataFrame` operation we want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We loop through the `allops` array to create an `input` field to select different
    types of `DataFrame` operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create an `input` field to select the `DataFrame` we want to perform
    the operation selected on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We also loop through the `dataComps` state to obtain all `dataComp` state in
    it except for the `dataComp` state we are performing the operation with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create an `input` field to input our value; in this case, we are performing
    an operation between `DataFrame` and a `Scalar` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an `input` field to select the axis of operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create a button that triggers the `df2df` function to perform a Df2df
    operation based on the input fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding steps, we created the UI for the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the `SidePlane` component to contain the Df2df component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code adds the `Df2df` component to the `SidePlane` component
    and passes the required props in the `Df2df` component. The following screenshot
    shows the upload of two CSV files with the same content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Uploading CSV files with the same content'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Uploading CSV files with the same content
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the output of performing a `Df2df` operation (the `concat`
    operation to be specific) on the selected `Data Table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Performing a concat operation on the Data Table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – Performing a concat operation on the Data Table
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the `Df2df` component for performing an operation
    between two `DataFrames`, and between a `DataFrame` and a `Series`/`Scalar` value.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement the last `DataFrame` component, which
    is the `arithmetic` component for the `DataFrame` arithmetic operation.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Arithmetic component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will implement the `arithmetic` component to perform some of the arithmetic
    operations provided in `Danfo.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `Arithmetic` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file named `Arithmetic.js` in the `Side Planes/` folder. The
    following steps will be used to create the `Arithmetic` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create an `Arithmetic` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We create different arrays to store different operations, such as `seriesOps`
    for a Series operation and `dfOps` for a DataFrame operation. We also create an
    `all` array that stores all these operations (`Series` and `DataFrame`) together.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a function called `arithmetic`. This function is used to perform
    the arithmetic operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We obtain the values from the input fields, `opsRef.current.value` and `axisRef.current.value`.
    We also check whether the operation selected belongs to `seriesOps`. If so, we
    perform the operation selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform a `DataFrame` operation if the operation does not belong to `seriesOps`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps are used to create the `Arithmetic` component. The UI for
    `Arithmetic` is the same as for the other `DataFrame` operation component created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the `arithmetic` component to the `SidePlane` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code imports the `Arithmetic` component and checks whether the
    `dfOpsType` component is `Arithmetic`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of performing an arithmetic operation
    on a `Data Table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Arithmetic operation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Arithmetic operation
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed and implemented different `DataFrame` operations
    as a React component. We were able to organize some methods into a single component
    to prevent creating components for each of the operations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement a `chart` component for different visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the chart component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll be creating `chart` components to display common and
    simple charts such as a bar chart, line chart, and pie chart. We'll then implement
    the chart `Side Plane` to enable the setting of chart component variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `Chart` and `ChartPlane` components implemented is available
    here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/components/` directory, let''s create a file called `Chart.js`
    and the `Chart` component will be implemented with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import our desired plotting component from `react-chartjs-2`, and then create
    the `Chart` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `Chart` component takes in the following props:
    `labels`, `dataset`, and `type`. `labels` signifies the column names, `dataset`
    represents the `dataComp` values, and `type` represents the type of chart we want
    to plot.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chart` component, we create a variable named `data`, which is an object
    formatted in the way that is required by `react-chartjs-2` for plotting our desired
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a set of conditional rendering here, as we want to render a specific
    type of chart, based on the `prop` type passed into the `Chart` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: We check the type of chart to render. If it's a bar chart, we make a call to
    the `BarChart` component from `react-chartjs-2` and pass in the necessary props.
    The `BarChart` component is wrapped in a `Draggable` component to make the `chart`
    component being rendered draggable. The preceding code is applicable to rendering
    all other `Chart` components, such as `LineChart` and `PieChart` from `react-chartjs-2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dive deep into `react-chartjs-2`, you can check out the documentation here:
    [https://github.com/reactchartjs/react-chartjs-2](https://github.com/reactchartjs/react-chartjs-2).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the ChartPlane component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve created the `chart` component, so let''s now create the chart `Side
    Plane`. In the `components/` folder, let''s create a file called `ChartPlane.js`
    with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a `ChartPlane` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we create a `ChartPlane` component accepting the following
    props:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a) `SetChartComp`: The function to update the `chartComp` state'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) `dataComp`: The current `DataTable` component to generate a chart from'
  prefs: []
  type: TYPE_NORMAL
- en: 'c) `chartType`: The type of chart we want to generate'
  prefs: []
  type: TYPE_NORMAL
- en: First, in the component, we obtain the list of possible *x*-axis variables and
    store them in the `x` variable. These *x*-axis variables can be either a column
    name with `String` or number `dtypes`.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are plotting the *y* axis against the *x* axis, it is compulsory for
    our *y* axis (the `y` variable) to be an integer. Therefore, we check that the
    column of a `DataFrame` is not a string, and if not we add the column to the list
    of *y*-axis variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is flexible. Sometimes a chart can be flipped such that the *y* axis is
    actually the labels and the *x* axis contains the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the UI for the `ChartPlane` component. Depending on how we''ve designed
    the UI for other components, the `x` and `y` variables are used to create an input
    field with which the user can select the *x*-axis label and the *y*-axis label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This UI also contains a button that triggers a function called `handleChart`,
    which updates the `chart` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a function called `handleChart`, which obtains the value of the *x*-axis
    and *y*-axis input fields and uses them to create the respective charts as requested:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '`xVal` and `yVal` are the values of the input field for the *x* axis and *y*
    axis. The `labels` and `data` variable are created, to contain the value of the
    respective columns from `xVal` and `yVal`. The label and data are then used to
    update the `chartComp` state.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the ChartViz component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding steps are used to create the chart `Side Plane`, but for now,
    we can't see the updated `chartComp` component. To view the chart, let's create
    a component to manage all chart component to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `ChartViz` to be implemented is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file in the `components/` folder named `ChartViz.js`. Add the
    following code to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we import our `chart` component and then create a `ChartViz`
    component containing the following `chartComp` and `setChartComp` props. We loop
    through the `chartComp` state and pass each of the state values to the `chart`
    component as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating ChartViz and ChartPlane into App.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are done with all the necessary parts of the `chart` component. Let''s
    update our `App.js` component to activate the `chart` component based on the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We import `ChartViz` and `ChartPlane` into `App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create some state to manage the type of chart we want, and the `chart`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we also create an array variable to store a list of charts
    that we want to display in our `Navbar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a function to update the `chartType` component and the `Side Plane`
    component whenever a chart is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: In the `handleChart` function, we obtain the target value, which is the chart
    type selected by the user. This value is used to update the `chartType` component
    and also, we notify the `Side Plane` to display a chart `Side Plane` by updating
    the `showSidePlane` state with the `chart` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We loop the `charts` variable in the `nav` field and display them as buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we loop through the `charts` array and create a button
    for each of the values in the array. We disabled the button by checking that the
    `dataComp` state is not empty, that is, whether no file has been uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the `ChartViz` component and pass in the necessary props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: We check that the `chartComp` state is not empty. If it's not, we make a call
    to the `ChartViz` component and then display the charts created.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then add the `ChartPlane` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: If the `showSide Plane` chart is a value chart, the `ChartPlane` component is
    displayed in the `Side` `Plane`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the chart update by plotting a bar chart, line
    chart, and pie chart on the available `Data Table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Chart component displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_8_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – Chart component displayed
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented `ChartComponent` and `ChartPlane`. We made use
    of `React-chart-js` to ease the development of each chart component.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create a no-code environment, where you can just
    upload your data and then get started with handling and doing data analysis immediately.
    We also saw how to convert each `DataFrame` method in Danfo.js into a React component.
    This gives the capability to convert all Danfo.js methods into React components,
    hence creating a React component library for Danfo.js.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we saw how to design the flow for the app and how to manage the state
    in React. Even if some of the states created are redundant, this is an opportunity
    for you to contribute and update the app to make it robust. If you can update
    the app to make it possible to delete, update, and save every operation being
    done, this will make the app robust and even ready for production.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be introduced to machine learning. The chapter
    will cover the fundamental idea behind machine learning in the simplest form possible.
  prefs: []
  type: TYPE_NORMAL
