- en: Ionic and SCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at theming with Ionic. Theming in Ionic
    is simple and easy to implement. The Ionic team has taken great efforts in simplifying
    and modularizing theming in Ionic. In a nutshell, theming in Ionic happens at
    component level, as well as platform level (iOS, Android, and WP). Ionic uses
    SCSS to work with theming. We will be going through the following topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Sass versus SCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with SCSS variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform-level and page/component-level overrides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Sass?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quoting from the Sass documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sass is an extension of CSS that adds power and elegance to the basic language."'
  prefs: []
  type: TYPE_NORMAL
- en: It allows us to use variables, nested rules, mixins, inline imports, and more,
    all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well
    organized, and get small stylesheets up and running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, Sass makes CSS programmable. But the chapter is titled SCSS;
    why are we talking about Sass? Well, Sass and SCSS are pretty much the same CSS
    preprocessor, each with its own way of writing the pre-CSS syntax.
  prefs: []
  type: TYPE_NORMAL
- en: SCSS was developed as part of another preprocessor named HAML ([http://haml.info/](http://haml.info/))
    by Ruby developers, so it inherited a lot of syntax style from Ruby, such as indentation,
    no braces, and no semicolons.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample Sass file would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When ran through the Sass compiler, it would return the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Good old CSS. But did you notice that `brand-primary` acting as a variable,
    substituting its value inside the container class? And the `border-radius` acting
    as a function (also called a mixin), generating the required CSS rules when called
    with an argument? Yes, the missing piece in CSS programming. You can try out the
    preceding conversion: [http://sasstocss.appspot.com/](http://sasstocss.appspot.com/)
    and check out how Sass gets compiled to CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: People who are used to the bracket-based coding languages find this way of writing
    code a bit difficult. So, enter SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sass stands for **Syntactically Awesome Style Sheets** and SCSS stands for
    **Sassy CSS**. So SCSS is pretty much the same as Sass, except for the CSS-like
    syntax. The preceding Sass code, would look like this when written in SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This looks a lot closer to CSS itself, right? And it is expressive. And Ionic
    uses SCSS to style its components.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know more about SCSS versus Sass, you can look at: [http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better](http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of what SCSS and Sass are and how to
    use them, we will leverage them in our Ionic app to maintain and theme our components.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic and SCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Ionic is packed with SCSS. Unlike the earlier version, where one
    had to set up SCSS in a project, in Ionic 2 the theming has become more modular
    and simpler. There are two levels at which theming can happen:'
  prefs: []
  type: TYPE_NORMAL
- en: At the platform level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the page/component level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App-level theming is almost always what we need. We would change the colors
    of our app based on our brand, and since Ionic uses a SCSS map, the colors are
    inherited directly by the components. Also, we can add, rename, and remove colors
    as needed. The primary color is the only required color in the map. iOS, MD, and
    WP colors can be further customized if colors are different per mode.
  prefs: []
  type: TYPE_NORMAL
- en: Page/component-level theming is very helpful if we would like to keep our styles
    isolated and specific to those pages/components. This is one of the biggest advantages
    of the component-based approach to app development. We can keep our components
    modular and manageable, and at the same time keep the styles and functionality
    from leaking from one to another, unless intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the hang of theming in Ionic, we will scaffold a new tabs app and theme
    the same. Create a new folder if needed, named `chapter5`, and then open a new
    command prompt/terminal. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the app is scaffolded, run `ionic serve` to view the app in the browser.
    The first thing we are going to work with is the colors. Open `example13/src/theme/variables.scss`
    and we should see a variable map named `$colors`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly test the color scheme, change the value of the primary variable
    inside the `$colors` map from `#387ef5` to `red`. We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, primary is the only mandatory value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The colors map can be extended to add our own colors as well. For instance,
    on `example13/src/pages/home/home.html`, let us add a button with an attribute
    name `purple`, which would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `$colors` map, add a new key value: `purple: #663399`. The complete
    map would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we go back to the page, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is indeed that simple to add new colors to our app.
  prefs: []
  type: TYPE_NORMAL
- en: We can further customize the theme colors by adding in a base and a contrast
    property. The base will be the background of the element and the contrast will
    be the text color.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the preceding feature, open `example13/src/pages/about/about.html`
    and add a floating action button as mentioned in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our updated `$colors` map would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: This will generate styles for all the different Ionic components. Do
    not put SCSS variables in the map if they are not part of the root component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we navigate to the About tab after saving all the files, we should see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Isn't theming simple?
  prefs: []
  type: TYPE_NORMAL
- en: Page-level overrides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can take the same theming to the next level by applying different styles
    to the same component in two different pages. For instance, we will make a label
    look different in the About page and the Contact page. This is how we will achieve
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `example13/src/pages/about/about.html`, we will add a new label inside the
    `ion-content` section, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add the required styles in `example13/src/pages/about/about.scss`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we will add another label in `example13/src/pages/contact/contact.html`
    inside the `ion-content` section, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add the required styles inside `example13/src/pages/contact/contact.scss`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we save all the files and go back to the About page in the browser,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the Contact page will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding image, we are using page-level styling to differentiate
    between the two components. The preceding screenshot is a simple example of how
    we can have multiple styles for the same component in different pages.
  prefs: []
  type: TYPE_NORMAL
- en: Platform-level overrides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how to apply styles at page level, let us see how Ionic
    theming makes it so simple to manage styles at platform level. Platform-level
    styles are applicable when the same app is viewed in multiple devices, which have
    their own distinct styles.
  prefs: []
  type: TYPE_NORMAL
- en: While working with Ionic, we define modes, where a mode is the platform in which
    the app is running. By default, Ionic adds a class name, which is the same as
    the mode on the `ion-app` element. For instance, if we are viewing the app on
    Android, the body will have a class named `md`, where `md` stands for **material
    design**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly check this out, we will open `http://localhost:8100/?ionicplatform=ios`
    and then inspect the body element in the developer tools. We should see the `ion-app`
    element with a class named `ios`, among other classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we open `http://localhost:8100/?ionicplatform=android`, we should see the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And if we open `http://localhost:8100/?ionicplatform=windows`, we should see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As of today, there are three modes in Ionic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Platform** | **Mode** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| iOS | ios | Applies iOS styling to all components |'
  prefs: []
  type: TYPE_TB
- en: '| Android | md | Applies material design styling to all components |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | wp | Applies Windows styling to all components |'
  prefs: []
  type: TYPE_TB
- en: '| Core | md | If we are not on one of the aforementioned devices, the app will
    get material design styling by default |'
  prefs: []
  type: TYPE_TB
- en: Refer here for more information: [http://ionicframework.com/docs/theming/platform-specific-styles/](http://ionicframework.com/docs/theming/platform-specific-styles/).
  prefs: []
  type: TYPE_NORMAL
- en: We will be defining platform-specific styles inside the `example13/src/theme/variables.scss`
    file in the sections provided by comments.
  prefs: []
  type: TYPE_NORMAL
- en: To understand platform-specific styles, we will be applying different background
    colors to the `navbar` and changing the text color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `example13/src/theme/variables.scss` and add the following styles under
    the section that says `App Material Design Variables` in comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we save the file and navigate to `http://localhost:8100/?ionicplatform=android`,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do note the `.md` class, inside which the styles are nested. This is what makes
    the styles platform specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we update the `App iOS Variables` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, for Windows, we will update the `App Windows Variables`, section as
    mentioned in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have already seen in [Chapter 4](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*, how we can change the mode of the app to either
    `md`, `ios`, or `wp` using the `config` properties.
  prefs: []
  type: TYPE_NORMAL
- en: We can also set the platform dynamically and apply styles.
  prefs: []
  type: TYPE_NORMAL
- en: To understand this, we will work with the badge component. Only on Windows platform,
    the badge component will not have any border radius, but we would like to override
    that behavior using dynamic attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we notice that on `ion-badge`, we have a conditional attribute `[attr.round-badge]="isWindows
    ? '''' : null"`. If the platform is Windows, we will add a new attribute named
    `round-badge`, and we will update our `example13/src/pages/contact/contact.ts`
    as mentioned in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined the value for `isWindows` inside the constructor. Now, if we
    save all the files and navigate to `http://localhost:8100/?ionicplatform=windows`,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we inspect the badge, we should see the attribute `round-badge` added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can navigate to other platforms and validate the same.
  prefs: []
  type: TYPE_NORMAL
- en: If we observe, the border of the badge container has a `0px` border radius.
    Now we will add the required overrides to the `example13/src/theme/variables.scss`
    in the `App Windows Variables` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The snippet would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, even for the Windows platform, we can see the `border-radius` being applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is another way we can achieve platform-specific overrides.
  prefs: []
  type: TYPE_NORMAL
- en: Component-level overrides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whatever customizations we have seen so far are mostly at the page and platform
    level. What if we want to customize the components that are provided by Ionic
    to match our brand's look and feel?
  prefs: []
  type: TYPE_NORMAL
- en: This can also be achieved quite easily thanks to the Ionic team, who have gone
    the extra mile in exposing the variable names to customize the properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we navigate to [http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/),
    we will see a filterable table where we can find component-specific variables
    that we can override:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Theme a sample component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To quickly check this out, we will implement the overlay loading bar on the
    home page of our current app. When a user lands on this tab, we will programmatically
    trigger the loading popup, and depending on the platform, we will customize the
    look and feel of the component to show that components can be customized as we
    please.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `example13/src/pages/home/home.ts` as mentioned in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We have defined a function named `presentLoading` and invoked it inside the
    constructor. This will show the loading bar on page load.
  prefs: []
  type: TYPE_NORMAL
- en: If we save this page and navigate to the three different platforms, we will
    see styles specific to that particular platform. In this example, we are going
    to make all the loading bars look (almost) alike, irrespective of the platform.
    We are going to achieve the same by messing with the `SCSS` variables.
  prefs: []
  type: TYPE_NORMAL
- en: If we navigate to [http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/)
    and filter `loading-ios`, we will see a bunch of SCSS variables that are related
    to the loading popup styling. Similarly, if we search for `loading-md`, we will
    find SCSS variables related to Android. Finally, if we search for `loading-wp`,
    we find SCSS variables for the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the preceding variable names and customize the look and feel. Open
    `example13/src/theme/variables.scss`. After `@import 'ionic.globals';` is defined
    and before the colors map is defined, we will add the component-level overrides.
    If you are looking at the commented SCSS file, you will see a section named `Shared
    Variables`. This is where we add our variable overrides.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have taken a few SCSS variables and modified their properties for each platform,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we navigate to `http://localhost:8100/?ionicplatform=ios`, we should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we navigate to `http://localhost:8100/?ionicplatform=android`, we should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And finally, if we navigate to `http://localhost:8100/?ionicplatform=windows`,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can add custom CSS as well, to make all three of them look alike.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we complete our overview of theming Ionic apps at platform level
    and page/component-level.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to theme Ionic apps. We have also seen how
    we can easily implement styling at platform level and page/component-level.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at Ionic Native. Ionic Native is what
    ngCordova is to Ionic 1\. We will dig deeper into integrating device features
    with an Ionic app.
  prefs: []
  type: TYPE_NORMAL
