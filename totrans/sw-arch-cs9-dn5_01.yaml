- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the Importance of Software Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software architecture is one of the most discussed topics in the software industry
    today, and its importance will certainly grow more in the future. The more we
    build complex and fantastic solutions, the more we need great software architectures
    to maintain them. But the speed at which new features are added to these software
    solutions keeps increasing, and new architectural opportunities keep emerging.
    That is the reason why you decided to read this book; it's the reason why we decided
    to write its second edition.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: It's not a simple task to write about this important topic, which offers so
    many alternative techniques and solutions. The main objective of this book is
    not to build an exhaustive and never-ending list of available techniques and solutions,
    but to show how various families of techniques are related, and how they impact,
    in practice, the construction of a maintainable and sustainable solution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The need to keep our focus on creating actual, effective enterprise solutions
    keeps increasing; users always need more new features in their applications. Moreover,
    the need to deliver frequent application versions (due to a quickly changing market)
    increases our obligation to have sophisticated software architecture and development
    techniques.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The understanding of what software architecture is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some software development process models that may help you as a software architect
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process for gathering the right information to design high-quality software
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design techniques for helping in the process of development
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cases where the requirements impact the system results
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to the case study of the book
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The case study of this book will take you through the process of creating the
    software architecture for a travel agency called **World Wild Travel Club** (**WWTravelClub**).
    The purpose of this case study is to help you understand the theory explained
    in each chapter, and to provide an example of how to develop an enterprise application
    with Azure, Azure DevOps, C# 9, .NET 5, ASP.NET, and other technologies that will
    be introduced in this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to understand exactly what the
    mission of software architecture is. You will also learn what Azure is, and how
    to create your account on the platform. You'll also get an overview of software
    processes, models, and other techniques that will enable you to conduct your team.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: What is software architecture?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are reading this book today, you should thank the computer scientists
    who decided to consider software development as an engineering area. This happened
    in the last century, more specifically, at the end of the sixties, when they proposed
    that the way we develop software is quite like the way we construct buildings.
    That is why we have the name **software architecture**. Like an architect designs
    a building and oversees its construction based on that design, the main goal of
    a software architect is to ensure that the software application is implemented
    well; and good implementation requires the design of a great solution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'In a professional development project, you must do the following things:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Define the customer requirements for the solution
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a great solution to meet those requirements
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the designed solution
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate the solution with your customer
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliver the solution in the working environment
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software engineering defines these activities as the software development life
    cycle. All the theoretical software development process models (waterfall, spiral,
    incremental, agile, and so on) are somehow related to this cycle. No matter which
    model you use, if you do not work with the essential tasks presented earlier during
    your project, you will not deliver acceptable software as a solution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'The main point about designing great solutions is foundational to the purpose
    of this book. You must understand that great real-world solutions bring with them
    a few fundamental constraints:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The solution needs to meet user requirements
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to be delivered on time
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to adhere to the project budget
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to deliver good quality
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to guarantee safe and effective future evolution
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great solutions need to be sustainable, and you must understand that there is
    no sustainable software without great software architecture. Nowadays, great software
    architectures depend on both modern tools and modern environments to perfectly
    fit users' requirements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, this book will use some great tools provided by Microsoft.
    The company has announced .NET 5 as a unified platform for software development,
    which gives us a great opportunity to create fantastic solutions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing .NET 5 | .NET Blog](img/B16756_01_01.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: .NET 5 platform'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: NET 5 is delivered together with C# 9\. Considering the .NET approach of targeting
    so many platforms and devices, C# is now one of the most used programming languages
    in the world and runs on small devices up to huge servers in different operating
    systems and environments.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The book will also use **Azure**, which is Microsoft's cloud platform, where
    you will find all the components the company provides to build advanced software
    architecture solutions. One of them is **Azure DevOps**, an application life cycle
    management environment where you can build solutions using the latest approach
    for developing software.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Being a software architect means understanding the aforementioned technologies,
    and a lot of others, too. This book will guide you on a journey where, as a software
    architect working in a team, you will provide optimal solutions with the tools
    listed. Let us start this journey by creating your Azure account.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure account
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Microsoft Azure** is one of the best cloud solutions currently available
    on the market. It is important to know that, inside Azure, we will find a selection
    of components that can help us define the architecture of twenty-first-century
    solutions.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the variety of components Microsoft Azure has, just check
    this incredible website developed by Alexey Polkovnikov: [https://azurecharts.com/](https://azurecharts.com/).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: This subsection will guide you in creating an Azure account. If you already
    have one, you can skip this part.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Start your access into Azure using the website address [https://azure.microsoft.com](https://azure.microsoft.com).
    There, you will find the information you need to start your subscription. Translation
    to your native language is usually set automatically.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Once you have accessed this portal, it is possible to sign up. If you have never
    done this before, it is possible to **Start free**, so you will be able to use
    some Azure features without spending any money. Please check the options for free
    plans at [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process for creating a free account is quite simple, and you will be guided
    by a form that requires you to have a **Microsoft Account** or **GitHub Account**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the process you will also be asked for a credit card number, to verify
    your identity and to keep out spam and bots. However, you will not be charged
    unless you upgrade the account.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish the assignment, you will need to accept the subscription agreement,
    offer details, and privacy statement.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you finish the form, you will be able to access the Azure portal. As you
    can see in the following screenshot, the panel shows a dashboard that you can
    customize, and a menu on the left, where you can set up the Azure components you
    are going to use in your solution. Throughout this book, we will come back to
    this screenshot to set up the components to help us create modern software architecture.
    To find the next page, just select the left-menu icon (hamburger menu) and click
    on **All services**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您填写完表格，您就可以访问Azure门户。正如您在下面的截图中所看到的，面板显示了一个您可以自定义的仪表板，以及左侧的菜单，您可以在其中设置您将在解决方案中使用的Azure组件。在本书中，我们将回到这个截图来设置组件，以帮助我们创建现代软件架构。要找到下一页，只需选择左侧菜单图标（汉堡菜单）并单击**所有服务**。
- en: '![](img/B16756_01_02.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_01_02.png)'
- en: 'Figure 1.2: The Azure portal'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：Azure门户
- en: Once you have your Azure account created, you are ready to understand how a
    software architect can conduct a team to develop software, taking advantage of
    all the opportunities offered by Azure. However, it is important to keep in mind
    that a software architect needs to go beyond technologies because this role is
    played by people who are expected to define how the software will be delivered.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了Azure账户，您就可以了解软件架构师如何引导团队利用Azure提供的所有机会来开发软件。然而，重要的是要记住，软件架构师需要超越技术，因为这个角色是由人来扮演的，他们被期望定义软件的交付方式。
- en: Today, a software architect not only architects the basis of a software, but
    also determines how the whole software development and deployment process is conducted.
    The next topic will cover some of the most widely used software development paradigms
    the world over. We'll start by describing what the community refers to as traditional
    software engineering. After that, we'll cover the agile models that have changed
    the way we build software nowadays.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，软件架构师不仅要设计软件的基础，还要确定整个软件开发和部署过程的进行方式。下一个主题将涵盖全球范围内使用最广泛的软件开发范式之一。我们将首先描述社区所称的传统软件工程。之后，我们将介绍改变了我们如今构建软件方式的敏捷模型。
- en: Software development process models
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发流程模型
- en: As a software architect, it's important for you to understand some of the common
    development processes that are currently used in most enterprises. A software
    development process defines how people in a team produce and deliver software.
    In general, this process relates to a software engineering theory, called a **software
    development process model**. From the time software development was defined as
    an engineering process, many process models for developing software have been
    proposed. Let us review the traditional software models, and then look at the
    agile ones that are currently common.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，了解当前大多数企业中使用的一些常见开发流程是很重要的。软件开发流程定义了团队中的人员如何生产和交付软件。一般来说，这个流程与一个被称为**软件开发流程模型**的软件工程理论相关。自软件开发被定义为工程过程以来，已经提出了许多用于开发软件的过程模型。让我们回顾一下传统的软件模型，然后再看看目前常见的敏捷模型。
- en: Reviewing traditional software development process models
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查传统软件开发过程模型
- en: Some of the models introduced in the software engineering theory are already
    considered traditional and quite obsolete. This book does not aim to cover all
    of them, but here, we will give a brief explanation of the ones that are still
    used in some companies – waterfall and incremental models.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程理论中引入的一些模型已经被认为是传统的和相当过时的。本书并不旨在涵盖所有这些模型，但在这里，我们将简要解释一些仍然在一些公司中使用的模型-瀑布和增量模型。
- en: Understanding the waterfall model principles
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解瀑布模型原则
- en: 'This topic may appear strange in a software architecture book from 2020, but
    yes, you may still find companies where the most traditional software process
    model remains the guideline for software development. This process executes all
    fundamental tasks in sequence. Any software development project consists of the
    following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题在2020年的软件架构书中可能看起来有些奇怪，但是是的，您可能仍然会发现一些公司仍然将最传统的软件过程模型作为软件开发的指导方针。这个过程按顺序执行所有基本任务。任何软件开发项目都包括以下步骤：
- en: Requirements, where a product requirement document is created, and it is the
    basis for the software development
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求，创建产品需求文档，这是软件开发的基础
- en: Design, where the software architecture is developed according to requirements
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计，根据需求开发软件架构
- en: Implementation, where the software is programmed
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施，编写软件
- en: Verification, where tests are taken in the application
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证，应用测试
- en: Maintenance, where the cycle starts again, after a delivery
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护，在交付后再次开始循环
- en: 'Let us look at a diagrammatic representation of this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下这个图表的表示：
- en: '![](img/B16756_01_03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16756_01_03.png)'
- en: 'Figure 1.3: The waterfall development cycle (https://en.wikipedia.org/wiki/Waterfall_model)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：瀑布式开发周期（https://en.wikipedia.org/wiki/Waterfall_model）
- en: Often, the use of waterfall models causes problems related to delays in the
    delivery of a functional version of the software, and user dissatisfaction due
    to the distance between expectations and the final product delivered. Besides,
    in my experience, having application tests start only after the completion of
    development always feels terribly stressful.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，瀑布模型的使用会导致与软件功能版本交付延迟相关的问题，以及由于期望与最终交付的产品之间的差距而导致用户不满。此外，根据我的经验，只有在开发完成后才开始应用测试总是让人感到非常有压力。
- en: Analyzing the incremental model
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析增量模型
- en: 'Incremental development is an approach that tries to overcome the biggest problem
    of the waterfall model: the user can test the solution only at the end of the
    project. The idea of this model is to give the users opportunities to interact
    with the solution as early as possible so that they can give useful feedback,
    which will help during the development of the software.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_01_04.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: The incremental development cycle (https://en.wikipedia.org/wiki/Incremental_build_model)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: The incremental model presented in the preceding picture was introduced as an
    alternative to the waterfall approach. The idea of the model is to run for each
    increment a set of practices related to software development (**Communication**,
    **Planning**, **Modeling**, **Construction**, and **Deployment**). Although it
    mitigated the problems related to the lack of communication with the customer,
    for big projects, fewer increments were still a problem because the increments
    remained too long.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: When the incremental approach was used on a large scale—mainly at the end of
    the last century—many problems related to project bureaucracy were reported, due
    to the large amount of documentation required. This clunky scenario caused the
    rise of a very important movement in the software development industry – **agile**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Understanding agile software development process models
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of this century, developing software was considered one of
    the most chaotic activities in engineering. The percentage of software projects
    that failed was incredibly high, and this fact proved the need for a different
    approach to deal with the flexibility required by software development projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: In 2001, the Agile Manifesto was introduced to the world, and from that time
    forward various agile process models were proposed. Some of them have survived
    up until now and are still very common.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The Agile Manifesto is translated into more than 60 languages. Please check
    out its link at [https://agilemanifesto.org/](https://agilemanifesto.org/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest differences between agile models and traditional models is
    the way developers interact with the customer. The message that all agile models
    transmit is that the faster you deliver software to the user, the better. This
    idea is sometimes confusing for software developers who understand this as – *let's
    try coding, and that's all, folks!*
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is an important observation of the Agile Manifesto that many
    people do not read when they start working with agile:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_01_05.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Manifesto for Agile software development'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: A software architect always needs to remember this. Agile processes do not mean
    a lack of discipline. Moreover, when you use the agile process, you'll quickly
    understand that there is no way to develop good software without discipline. On
    the other hand, as a software architect, you need to understand that *soft* means
    flexibility. A software project that refuses to be flexible tends to ruin itself
    over time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'The 12 principles behind agile are foundational to this flexible approach:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Continuously delivering valuable software to satisfy the customer must be the
    highest priority of any developer.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing requirements needs to be understood as an opportunity to make the customer
    more competitive.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do use a weekly timescale to deliver software.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A software team must be composed of business people and developers.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A software team needs to be trusted and should have the correct environment
    to get the project done.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The best way to communicate with a software team is face to face.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can understand the greatest software team achievement as when the software
    is really working on production.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Agile is working properly when it delivers sustainable development.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The more you invest in techniques and good design, the more agile you are.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simplicity is essential.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The more self-organized the teams are, the better-quality delivery you will
    have.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Software teams tend to improve their behavior from time to time, analyzing and
    adjusting their process.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even 20 years after the launch of the Agile Manifesto, its importance and connection
    to the current needs of software teams remain intact. Certainly, there are many
    companies where this approach is not well accepted, but as a software architect
    you should understand this as an opportunity to transform practices and evolve
    the team with you are working.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: There are many techniques and models that were presented to the software community
    with the agile approach. The next subtopics will discuss Lean software development,
    Extreme Programming, and Scrum, so that you can decide, as a software architect,
    which ones you might use to improve your software delivery.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Lean software development
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the Agile Manifesto, the approach of Lean software development was introduced
    to the community as an adaptation of a well-known movement in automobile engineering;
    Toyota's model for building cars. The worldwide Lean manufacturing method delivers
    a high level of quality even with few resources.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Mary and Tom Poppendieck listed seven Lean principles for software development,
    really connected to agile and to the approach of many companies of this century.
    I''ve listed them here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '**Eliminate waste**: You may consider waste to be anything that will interfere
    with the delivery of the real need of a customer.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build quality in**: An organization that wants to guarantee quality needs
    to promote it in processes that build code from the beginning, instead of only
    consider it after code is being tested.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create knowledge**: Companies that achieved excellence have a common pattern
    of generating new knowledge by disciplined experimentation, documenting it, and
    guaranteeing that this knowledge is spread all over the organization.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Defer commitment**: Plan decisions to its last chance before causing damage
    to the project.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deliver fast**: The faster you deliver software, the more elimination of
    waste you have. Companies that compete using time frequency have significant advantages
    over their competitors.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Respect people**: Giving reasonable objectives to the team, together with
    plans that will guide them to self-organize their routine, is a matter of respecting
    people that you work with.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Optimize the whole**: A Lean company improves all the cycle of value; from
    the moment it receives a new requirement up to the one it delivers when the software
    is done.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Lean principles cause a team or company approach to improve the quality
    of the features that the customer really needs. It also creates a reduction in
    time spent on features that will not be used by the time the software is delivered
    to the customer. In Lean, deciding the features that are important to the customer
    guides the team in delivering software that matters, and this is exactly what
    the Agile Manifesto intends to promote in software teams.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Extreme Programming
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just before the release of the Agile Manifesto, some of the participants who
    designed the document, especially Kent Beck, presented to the world the **Extreme
    Programming** (**XP**) **methodology** for developing software.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: XP is based on values of simplicity, communication, feedback, respect, and courage.
    It was considered later as a social change in programming, according to Beck in
    his second book about the topic. It certainly promotes a huge change in the flow
    of development.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: XP indicates that every team should have the simplicity to do only what it was
    asked for, communicating face to face daily, demonstrating the software early
    to get feedback, respecting the expertise of each member of the team, and having
    the courage to tell the truth about progress and estimates, considering the team's
    work as a whole.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: XP also delivers a set of rules. These rules may be changed by the team if they
    detect something is not working properly, but it's important to always maintain
    the values of the methodology.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'These rules are divided into planning, managing, designing, coding, and testing.
    Don Wells has mapped XP at the site [http://www.extremeprogramming.org/](http://www.extremeprogramming.org/).
    Although some of the ideas of the methodology were criticized strongly by many
    companies and specialists, there are many good practices that are used today:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则分为规划、管理、设计、编码和测试。唐·韦尔斯在网站[http://www.extremeprogramming.org/](http://www.extremeprogramming.org/)上绘制了XP。尽管这种方法论的一些想法受到许多公司和专家的强烈批评，但今天仍有许多好的实践：
- en: '**Writing software requirements using user stories**: User stories are considered
    an agile approach to describe user needs, together with the acceptance tests that
    will be used to guarantee the correct implementation.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用用户故事编写软件需求**：用户故事被认为是描述用户需求的敏捷方法，以及用于保证正确实施的验收测试。'
- en: '**Divide software into iterations and deliver small releases**: The practice
    of iterating in software development is defended by all methodologies after waterfall.
    The fact of delivering faster versions decreases the risks of not achieving the
    customer''s expectations.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将软件分成迭代并交付小版本**：在瀑布模型之后，所有方法论都支持软件开发的迭代实践。更快地交付版本降低了未能实现客户期望的风险。'
- en: '**Avoid working overtime and guarantee a sustainable velocity**: Although this
    must be one of the hardest tasks a software architect may deal with, overtime
    working indicates something is not working properly in the process.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免加班并保证可持续速度**：尽管这可能是软件架构师所面临的最艰巨的任务之一，加班工作表明流程中有些地方出了问题。'
- en: '**Keep things simple**: While developing solutions, it is quite common to try
    to anticipate features that the customer would like to have. This approach increases
    the complexity of the development and the time to market the solution. A different
    approach will cause high costs, and probably a low level of features that are
    actually used, in the system you are developing.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持简单**：在开发解决方案时，很常见地试图预测客户想要的功能。这种方法增加了开发的复杂性和解决方案上市的时间。采用不同的方法会导致高成本，可能在你正在开发的系统中使用的功能水平较低。'
- en: '**Refactoring**: The approach of refactoring the code continuously is good
    because it enables the evolution of your software and guarantees the design improvement
    that will truly be necessary due to the normal technical changes of the platforms
    you use to develop.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：持续重构代码的方法很好，因为它能够使软件不断发展，并保证由于你用来开发的平台的正常技术变化而真正需要的设计改进。'
- en: '**Keep the customer always available**: If you follow the rule from XP, you
    should have an expert customer inside your team. This is certainly something that
    is hard to get and deal with, but the main idea of this approach is guaranteeing
    that the customer is involved in all parts of development. As another bonus, having
    the customer close to your team means they understand the difficulties and expertise
    the team has, enabling an increase of the trust between the parties.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终保持客户可用**：如果你遵循XP的规则，你应该在团队内有一个专家客户。这当然是难以获得和处理的，但这种方法的主要思想是确保客户参与到开发的所有部分中。另外，让客户接近你的团队意味着他们了解团队所面临的困难和专业知识，从而增加了双方之间的信任。'
- en: '**Continuous integration**: This practice is one of the bases of the current
    DevOps approach. The less difference you have between your personal code repository
    and the main code repository, the better.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：这种实践是当前DevOps方法的基础之一。你个人的代码库和主要代码库之间的差异越小，越好。'
- en: '**Code the unit test first**: A unit test is an approach where you program
    specific code for testing a single unit (class/method) of your project. This is
    discussed in a current development methodology called **Test-Driven Development**
    (**TDD**). The main goal here is to guarantee that every business rule has its
    own unit test case.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先编写单元测试代码**：单元测试是一种方法，你可以为测试项目的单个单元（类/方法）编写特定的代码。这在一种当前的开发方法论中被称为**测试驱动开发**（**TDD**）。这里的主要目标是确保每个业务规则都有自己的单元测试用例。'
- en: '**Code must be written to agreed standards**: The need of determining standards
    for coding is connected to the idea that no matter which developer you have working
    on a specific part of the project, the code must be written so that any of them
    will understand it.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写的代码必须符合约定的标准**：确定编码标准的需要与这样一个想法相关联，即无论你有哪个开发人员在项目的特定部分工作，代码必须编写得让他们中的任何一个都能理解。'
- en: '**Pair programming**: Pair programming is another difficult approach to achieve
    in every single minute of a software project, but the technique itself—one programmer
    coding and the other actively observing and offering comments, criticism, and
    advice—is useful in critical scenarios.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配对编程**：配对编程是另一种在软件项目的每一分钟都难以实现的方法，但这种技术本身——一个程序员编码，另一个积极观察并提供评论、批评和建议——在关键场景中是有用的。'
- en: '**Acceptance tests**: The adoption of acceptance tests to meet user stories
    is a good way to guarantee that new released versions of the software do not cause
    damage to its current needs. An even better option is to have these acceptance
    tests automated.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：采用验收测试来满足用户故事是确保新发布版本的软件不会损害其当前需求的好方法。更好的选择是将这些验收测试自动化。'
- en: It is worth mentioning that many of these rules are today considered vital practices
    in different software development methodologies, including DevOps and Scrum. We
    will discuss DevOps later in this book, in *Chapter 20*, *Understanding DevOps
    Principles*. Let's get into the Scrum model right now.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，这些规则中的许多今天被认为是不同软件开发方法论中的重要实践，包括DevOps和Scrum。我们将在本书的后面讨论DevOps，在*第20章*，*理解DevOps原则*。现在让我们进入Scrum模型。
- en: Getting into the Scrum model
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进入Scrum模型
- en: Scrum is an agile model for the management of software development projects.
    The model comes from Lean principles and is one of the widely used approaches
    for developing software nowadays.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Please check this link for more information about the Scrum framework: [https://www.scrum.org/](https://www.scrum.org/).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the following figure, the basis of Scrum is that you have
    a flexible backlog of user requirements (**Product Backlog**) that needs to be
    discussed in each agile cycle, called a **Sprint**. The Sprint goal (**Sprint
    Backlog**) is determined by the Scrum Team, composed of the Product Owner, the
    Scrum Master, and the Development Team. The **Product Owner** is responsible for
    prioritizing what will be delivered in that Sprint. During the Sprint, this person
    will help the team to develop the required features. The person who leads the
    team in the Scrum process is called the **Scrum Master**. All the meetings and
    processes are conducted by this person.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_01_06.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: The Scrum process'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: It is important to notice that the Scrum process does not discuss how the software
    needs to be implemented, nor which activities will be done. Again, you must remember
    the basis of software development, discussed at the beginning of this chapter;
    that means Scrum needs to be implemented together with a process model. DevOps
    is one of the approaches that may help you use a software development process
    model together with Scrum. Check *Chapter 20*, *Understanding DevOps Principles*,
    to understand it better.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Gathering the right information to design high-quality software
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fantastic! You just started a software development project. Now, it's time to
    use all your knowledge to deliver the best software you can. Your first question
    is probably – *How do I start?* Well, as a software architect, you're going to
    be the one to answer it. And you can be sure your answer is going to evolve with
    each software project you lead.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Defining a software development process is the first task. This is generally
    done during the project planning process, or might happen before it starts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Another very important task is to gather the software requirements. No matter
    which software development process you decide to use, collecting real user needs
    is part of a difficult and continuous job. Of course, there are techniques to
    help you with this, and you can be sure that gathering requirements will help
    you to define important aspects of your software architecture.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: These two tasks are considered by most experts in software development as the
    keys to success at the end of the development project journey. As a software architect,
    you need to enable them so that you can avoid as many problems as possible while
    guiding your team.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the requirements gathering process
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different ways to represent the requirements. The most traditional
    approach consists of you having to write a perfect specification before the beginning
    of the analysis. Agile methods suggest instead that you need to write user stories,
    as soon as you are ready to start a development cycle.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '**Remember**: You do not write requirements just for the user; you write them
    for you and your team too.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: The truth is, that no matter the approach you decide to adopt in your projects,
    you will have to follow some steps to gather requirements. This is what we call
    **requirements engineering**.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_01_07.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Requirements engineering process'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: During this process, you need to be sure that the solution is feasible. In some
    cases, the feasibility analysis is part of the project planning process too, and
    by the time you start the requirements elicitation, you will have the feasibility
    report already done. So, let us check the other parts of this process, which will
    give you a lot of important information for the software architecture.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Detecting exact user needs
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a lot of ways to detect what exactly the user needs for a specific
    scenario. This process is known as elicitation. In general, this can be done using
    techniques that will help you to understand what we call user requirements. Here,
    you have a list of common techniques:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**The power of imagination**: If you are an expert in the area where you are
    providing solutions, you may use your own imagination to find new user requirements.
    Brainstorming can be conducted together so that a group of experts can define
    user needs.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Questionnaires**: This tool is useful for detecting common and important
    requirements such as the number and kind of users, peak system usage, and the
    commonly used **operating system** (**OS**) and web browser.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interviews**: Interviewing the users helps you as an architect to detect
    user requirements that perhaps questionnaires and your imagination will not cover.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observation**: There is no better way to understand the daily routine of
    a user than being with them for a day.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As soon as you apply one or more of these techniques, you will have great and
    valuable information about the user's needs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '**Remember**: You can use these techniques in any situation where the real
    need is to gather requirements, no matter if it is for the whole system or for
    a single story.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: At that moment, you will be able to start analyzing these user needs, and detecting
    the user and system requirements. Let's see how to do so in the next section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing requirements
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you''ve detected the user needs, it''s time to begin analyzing the requirements.
    To do so, you can use techniques such as the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '**Prototyping**: Prototypes are fantastic to clarify and to materialize the
    system requirements. Today, we have many tools that can help you to mock interfaces.
    A nice open source tool is the **Pencil Project**. You will find further information
    about it at [https://pencil.evolus.vn/](https://pencil.evolus.vn/).'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use cases**: The **Unified Modeling Language** (**UML**) use case model is
    an option if you need detailed documentation. The model is composed of a detailed
    specification and a diagram. **ArgoUML** is another open source tool that can
    help you out with this. You can see the model created in *Figure 1.8*:![](img/B16756_01_08.png)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 1.8: Use case diagram example'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: While you are analyzing the requirements of the system, you will be able to
    clarify exactly what the users' needs are. This is helpful when you're not sure
    about the real problem you need to solve, and is much better than just starting
    to program the system and hoping for the best. Time invested in requirements analysis
    is time invested in better code later.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Writing the specifications
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you finish the analysis, it's important to register it as a specification.
    The specification document can be written using traditional requirements, or user
    stories, which are commonly used in agile projects.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'A requirements specification represents the technical contract between the
    user and the team. There are some basic rules that this document needs to follow:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: All stakeholders need to understand exactly what is written in the technical
    contract, even if they are not technicians.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The document needs to be clear.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to classify each requirement.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use simple future tense to represent each requirement:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bad example: A common user registers himself.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Good example: A common user shall register himself.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ambiguity and controversy need to be avoided.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some additional information can help the team to understand the context of
    the project they are going to work on. Here are some tips about how to add useful
    information:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Write an introductory chapter to give a full idea of the solution.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a glossary to make understanding easier.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the kind of user the solution will cover.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write functional and non-functional requirements:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional requirements are quite simple to understand because they describe
    exactly what the software will do. On the other hand, non-functional requirements
    determine the restrictions related to the software, which means scalability, robustness,
    security, and performance. We will cover these aspects in the next section.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach documents that can help the user to understand rules.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you decide to write user stories, a good tip to follow is to write short
    sentences representing each moment in the system with each user, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This approach will explain exactly the reason why that feature will be implemented.
    It's also a good tool to help you analyze the stories that are most critical,
    and prioritize the success of the project. They can also be great for informing
    the automated acceptance tests that should be built.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the principles of scalability, robustness, security, and performance
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Detecting requirements is a task that will let you understand the software you
    are going to develop. However, as a software architect, you have to pay attention
    to more than just the functional requirements for that system. Understanding the
    non-functional requirements is important, and one of the earliest activities for
    a software architect.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to look at this in more detail in *Chapter 2*, *Non-Functional
    Requirements*, but at this point, it''s important to know that the principles
    of scalability, robustness, security, and performance need to be applied for the
    requirements gathering process. Let us look at each concept:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability**: As a software developer, globalization gives you the opportunity
    to have your solution running all over the world. This is fantastic, but you,
    as a software architect, need to design a solution that provides that possibility.
    Scalability is the possibility for an application to increase its processing power
    as soon as it is necessary, due to the number of resources that are being consumed.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robustness**: No matter how scalable your application is, if it is not able
    to guarantee a stable and always-on solution, you are not going to get any peace.
    Robustness is important for critical solutions, where you do not have the opportunity
    for maintenance at any time due to the kind of problem that the application solves.
    In many industries, the software cannot stop, and lots of routines run when nobody
    is available (overnight, holidays, and so on). Designing a robust solution will
    give you the freedom to live while your software is running well.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: This is another really important area that needs to be discussed
    after the requirements stage. Everybody worries about security, and different
    laws dealing with it are in place and being proposed in different parts of the
    world. You, as a software architect, must understand that security needs to be
    provided by design. This is the only way to cope with all the needs that the security
    community is discussing right now.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: The process of understanding the system you are going to develop
    will probably give you a good idea of what you''ll need to do to get the desired
    performance from the system. This topic needs to be discussed with the user, to
    identify most of the bottlenecks you will face during the development stage.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth mentioning that all these concepts are requirements for the new
    generation of solutions that the world needs. What differentiates good software
    from incredible software is the amount of work done to meet the project requirements.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the specification
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have the specification written, it is time to confirm with the stakeholders
    whether they agree with it. This can be done in a review meeting, or can be done
    online using collaboration tools.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: This is when you present all the prototypes, documents, and information you
    have gathered. As soon as everybody agrees with the specification, you are ready
    to start studying the best way to implement this part of your project.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that you might use the process described here for both
    the complete software or for a small part of it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Using design techniques as a helpful tool
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining a solution is not easy. Determining its technology increases the difficulty
    of doing so. It is true that, during your career as a software architect, you
    will find many projects where your customer will bring you a solution *ready for
    development*. This can get quite complicated if you consider that solution as
    the correct solution; most of the time, there will be architectural and functional
    mistakes that will cause problems in the solution in the future.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some cases where the problem is worse—when the customer does not
    know the best solution for the problem. Some design techniques can help us with
    this, and we will introduce two of them here: **Design Thinking** and **Design
    Sprint**.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: What you must understand is that these techniques can be a fantastic option
    to discover real requirements. As a software architect, you are committed to helping
    your team to use the correct tools at the correct time, and these tools may be
    the right options to ensure the project's success.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Design Thinking
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Design Thinking** is a process that allows you to collect data directly from
    the users, focusing on achieving the best results to solve a problem. During this
    process, the team will have the opportunity to discover all *personas* that will
    interact with the system. This will have a wonderful impact on the solution since
    you can develop the software by focusing on the user experience, which can have
    a fantastic impact on the results.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is based on the following steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '**Empathize**: In this step, you must execute field research to discover the
    users'' concerns. This is where you find out about the users of the system. The
    process is good for making you understand why and for whom you are developing
    this software.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Define**: Once you have the users'' concerns, it is time to define their
    needs to solve them.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ideate**: The needs will provide an opportunity to brainstorm some possible
    solutions.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototype**: These solutions can be developed as mock-ups to confirm whether
    they are good ones.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Testing the prototypes will help you to understand the prototype
    that is most connected to the real needs of the users.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The focus of a technique like this one is to accelerate the process of detecting
    the right product, considering the **minimum viable product** (**MVP**). For sure,
    the prototype process will help stakeholders to understand the final product and,
    at the same time, engage the team to deliver the best solution.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Design Sprint
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Design Sprint** is a process focused on solving critical business questions
    through design in a five-day sprint. This technique was presented by Google, and
    it is an alternative that allows you to quickly test and learn from an idea, needing
    to build and launch a solution to market.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is based on a week dedicated by experts to solve the problem mentioned,
    in a war room prepared for that purpose. The week is separated like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '**Monday**: The focus of this day is to identify the target of the sprint and
    map the challenge to achieve it.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tuesday**: After understanding the goal of the sprint, participants start
    sketching solutions that may solve it. It is time to find customers to test the
    new solution that will be provided.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wednesday**: This is when the team needs to decide the solutions that have
    the greatest chance to solve the problem. Besides, on Wednesday the team must
    draw these solutions into a storyboard, preparing a plan for the prototype.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thursday**: It is time to prototype the idea planned on the storyboard.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Friday**: Having completed the prototype, the team presents it to customers,
    learning by getting information from their reaction to the solution designed.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see in both techniques, the acceleration of collecting reactions
    from customers comes from prototypes that will materialize your team's ideas into
    something more tangible for the end-user.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Common cases where the requirements gathering process impacted system results
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the information discussed up to this point in the chapter is useful if you
    want to design software following the principles of good engineering. This discussion
    is not related to developing by using traditional or agile methods, but focuses
    on building software professionally or as an amateur.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: It's also a good idea to know about some cases where failing to perform the
    activities you read about caused some trouble for the software project. The following
    cases intend to describe what could go wrong, and how the preceding techniques
    could have helped the development team to solve the problems.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, simple action could have guaranteed better communication between
    the team and the customer, and this easy communication flow would have transformed
    a big problem into a real solution. Let's examine three common cases where the
    requirements gathering impacted the results of performance, functionality, and
    usability.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Case 1 – my website is too slow to open that page!
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Performance is one of the biggest problems that you as a software architect
    will deal with during your career. The reason why this aspect of any software
    is so problematic is that we do not have infinite computational resources to solve
    problems. Besides, the cost of computation is still high, especially if you are
    talking about software with a high number of simultaneous users.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'You cannot solve performance problems by writing requirements. However, you
    will not end up in trouble if you write them correctly. The idea here is that
    requirements must present the desired performance of a system. A simple sentence,
    describing this, can help the entire team that works on the project:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-functional requirement**: Performance – any web page of this software
    shall respond in at least 2 seconds, even when 1,000 users are accessing it concurrently.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The preceding sentence just makes everybody (users, testers, developers, architects,
    managers, and so on) sure that any web page has a target to achieve. This is a
    good start, but it's not enough. A great environment to both develop and deploy
    your application is also important. This is where .NET 5 can help you a lot; especially
    if you are talking about web apps, ASP.NET Core is considered one of the fastest
    options to deliver solutions today.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: If you talk about performance, you, as a software architect, should consider
    the use of the techniques listed in the following sections together with specific
    tests to guarantee this non-functional requirement. It's also important to mention
    that ASP.NET Core will help you to use them easily, together with some **Platform
    as a Service** (**PaaS**) solutions delivered by Microsoft Azure.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Understanding caching
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Caching is a great technique to avoid queries that can consume time and, in
    general, give the same result. For instance, if you are fetching the available
    car models in a database, the number of cars in the database can increase, but
    they will not change. Once you have an application that constantly accesses car
    models, a good practice is to cache that information.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that a cache is stored in the backend and that
    cache is shared by the whole application (*in-memory caching*). A point to focus
    on is that when you are working on a scalable solution, you can configure a *distributed
    cache* to solve it using the Azure platform. In fact, ASP.NET provides both, so
    you can decide on the one that bests fits your needs. *Chapter 2*, *Non-Functional
    Requirements*, covers scalability aspects in the Azure platform.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Applying asynchronous programming
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you develop ASP.NET applications, you need to keep in mind that your app
    needs to be designed for simultaneous access by many users. Asynchronous programming
    lets you do this simply, giving you the keywords `async` and `await`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: The basic concept behind these keywords is that `async` enables any method to
    run asynchronously. On the other hand, `await` lets you synchronize the call of
    an asynchronous method without blocking the thread that is calling it. This easy-to-develop
    pattern will make your application run without performance bottlenecks and better
    responsiveness. This book will cover more about this subject in *Chapter 2*, *Non-Functional
    Requirements*.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with object allocation
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One very good tip to avoid a lack of performance is to understand how the **Garbage
    Collector** (**GC**) works. The GC is the engine that will free memory automatically
    when you finish using it. There are some very important aspects of this topic,
    due to the complexity that the GC has.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Some types of objects are not collected by the GC if you do not dispose of them.
    The list includes any object that interacts with I/O, such as files and streaming.
    If you do not correctly use the C# syntax to create and destroy this kind of object,
    you will have memory leaks, which will deteriorate your application performance.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'The incorrect way of working with I/O objects is:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The correct way of working with I/O objects is:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It might be worth noting that this correct approach also ensures the file gets
    written (it calls Flush). In the incorrect example, the contents might not even
    be written to the file. Even though the preceding practice is mandatory for I/O
    objects, it is totally recommended that you keep doing this in all disposable
    objects. Indeed, using code analyzers in your solutions with warnings as errors
    will prevent you from accidentally making these mistakes! This will help the GC
    and will keep your application running with the right amount of memory. Depending
    on the type of object, mistakes here can snowball, and you could end up with other
    bad things at scale, for instance, port/connection exhaustion.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect that you need to know about is that the time spent
    by the GC to collect objects will interfere with the performance of your app.
    Because of this, avoid allocating large objects; otherwise, it can cause you trouble
    waiting for the GC to finish its task.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Getting better database access
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most common performance Achilles' heels is database access. The reason
    why this is still a big problem is the lack of attention while writing queries
    or lambda expressions to get information from the database. This book will cover
    Entity Framework Core in *Chapter 8*, *Interacting with Data in C# – Entity Framework
    Core*, but it is important to know what to choose and the correct data information
    to read from a database. Filtering columns and lines is imperative for an application
    that wants to deliver on performance.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that best practices related to caching, asynchronous programming,
    and object allocation fit completely into the environment of databases. It's only
    a matter of choosing the correct pattern to get better-performance software.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Case 2 – the user's needs are not properly implemented
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The more that technology is used in a wide variety of areas, the more difficult
    it is to deliver exactly what the user needs. Maybe this sentence sounds weird
    to you, but you must understand that developers, in general, study how to develop
    software, but they rarely study to deliver the needs of a specific area. Of course,
    it is not easy to learn how to develop software, but it is even more difficult
    to understand a specific need in a specific area. Software development nowadays
    delivers software to all possible types of industries. The question here is *how
    can a developer, whether a software architect or not, evolve enough to deliver
    software in the area they are responsible for?*
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Gathering software requirements will help you in this tough task; writing them
    will make you understand and organize the architecture of the system. There are
    several ways to minimize the risks of implementing something different from what
    the user really needs:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping the interface to achieve an understanding of the user interface
    faster
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the data flow to detect gaps between the system and the user operation
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent meetings to be updated on the user's current needs and aligned to incremental
    deliveries
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, as a software architect, you will have to define how the software will
    be implemented. Most of the time, you are not going to be the one who programs
    it, but you will always be the one responsible for this. For this reason, some
    techniques can be useful to avoid the wrong implementation:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Requirements are reviewed with the developers to guarantee that they understand
    what they need to develop.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code inspection to validate a predefined code standard. We will cover this in
    *Chapter 19*, *Using Tools to Write Better Code*.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meetings to eliminate impediments.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, the implementation matching the user needs is your responsibility.
    Use every tool you can to meet it.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Case 3 – the usability of the system does not meet user needs
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usability is a key point for the success of a software project. The way the
    software is presented and how it solves a problem can help the user to decide
    whether they want to use it or not. As a software architect, you must keep in
    mind that delivering software with good usability is mandatory nowadays.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: There are basic concepts of usability that this book does not intend to cover,
    but a good way to meet the correct user needs when it comes to usability is by
    understanding who is going to use the software. Design Thinking can help you a
    lot with that, as was discussed earlier in this chapter.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the user will help you to decide whether the software is going
    to run on a web page, or a cell phone, or even in the background. This understanding
    is very important to a software architect because the elements of a system will
    be better presented if you correctly map who will use them.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you do not care about that, you will just deliver software
    that works. This can be good for a short time, but it will not exactly meet the
    real needs that made a person ask you to architect the software. You must keep
    in mind the options and understand that good software is designed to run on many
    platforms and devices.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: You will be happy to know that .NET 5 is an incredible cross-platform option
    for that. So, you can develop solutions to run your apps in Linux, Windows, Android,
    and iOS. You can run your applications on big screens, tablets, cell phones, and
    even drones! You can embed apps on boards for automation or in HoloLens for mixed
    reality. Software architects must be open-minded to design exactly what their
    users need.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Case study – introducing World Wild Travel Club
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this chapter, the case study of this book
    will take you on a journey of creating the software architecture for a travel
    agency called **World Wild Travel Club** (**WWTravelClub**).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: WWTravelClub is a travel agency that was created to change the way people make
    decisions about their vacations and other trips around the world. To do so, they
    are developing an online service where every detail of a trip experience will
    be assisted by a club of experts specifically selected for each destination.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: The concept of this platform is that you can be both a visitor and a destination
    expert at the same time. The more you participate as an expert in a destination,
    the higher the points you will score. These points can be exchanged for tickets
    that people buy online using the platform.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'The customer came with the following requirements for the platform. It is important
    to know that, in general, customers do not bring the requirements ready for development.
    That is why the requirements gathering process is so important:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Common user view:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promotional packages on the home page
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for packages
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Details for each package:'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy a package
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Buy a package with a club of experts included:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment on your experience
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask an expert
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate an expert
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register as a common user
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destination expert view:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same view as the common user view
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answer the questions asking for your destination expertise
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manage the points you scored answering questions:'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exchange points for tickets
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Administrator view:'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage packages
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage common users
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage destination experts
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To finish this, it is important to note that WWTravelClub intends to have more
    than 100 destination experts per package and will offer around 1,000 different
    packages all over the world.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Understanding user needs and system requirements
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To summarize the user needs of WWTravelClub, you can read the following user
    stories:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`US_001`: As a common user, I want to view promotional packages on the home
    page, so that I can easily find my next vacation'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_002`: As a common user, I want to search for packages I cannot find on
    the home page so that I can explore other trip opportunities'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_003`: As a common user, I want to see the details of a package, so that
    I can decide which package to buy'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_004`: As a common user, I want to register myself, so that I can start
    buying the package'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_005`: As a registered user, I want to process the payment, so that I can
    buy a package'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_006`: As a registered user, I want to buy a package with an expert recommendation
    included, so that I can have an exclusive trip experience'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_007`: As a registered user, I want to ask for an expert, so that I find
    out the best things I can do on my trip'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_008`: As a registered user, I want to comment on my experience, so that
    I can give feedback from my trip'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_009`: As a registered user, I want to evaluate an expert who helps me,
    so that I can share with others how fantastic they were'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_010`: As a registered user, I want to register as a destination expert
    view, so that I can help people who travel to my city'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_011`: As an expert user, I want to answer questions about my city, so that
    I can score points to be exchanged in the future'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_012`: As an expert user, I want to exchange points for tickets, so that
    I can travel around the world more'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_013`: As an administrator user, I want to manage packages, so that users
    can have fantastic opportunities to travel'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_014`: As an administrator user, I want to manage registered users, so that
    WWTravelClub can guarantee good service quality'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_015`: As an administrator user, I want to manage expert users, so that
    all of the questions regarding our destinations are answered'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_016`: As an administrator user, I want to offer more than 1,000 packages
    around the world, so that different countries can experience the WWTravelClub
    service'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_017`: As the CEO, I want to have more than 1,000 users simultaneously accessing
    the website, so that the business can scale effectively'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_018`: As a user, I want to access WWTravelClub in my native language, so
    that I can easily understand the package offered'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_019`: As a user, I want to access WWTravelClub in the Chrome, Firefox,
    and Edge web browsers, so that I can use the web browser of my preference'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_020`: As a user, I want to know my credit card information is stored securely,
    so I can buy packages safely'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that while you start writing the stories, information related to non-functional
    requirements such as security, environment, performance, and scalability can be
    included.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'However, some system requirements may be omitted when you write user stories
    and need to be included in the software specification. These requirements can
    be related to legal aspects, hardware, and software prerequisites, or even points
    of attention for the correct system delivery. They need to be mapped and listed
    as well as user stories. The WWTravelClub system requirements are presented in
    the following list. Notice that requirements are written in the future because
    the system does not exist yet:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '`SR_001`: The system shall use Microsoft Azure components to deliver the scalability
    required'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_002`: The system shall respect **General Data Protection Regulation** (**GDPR**)
    requirements'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_003`: The system shall run on the Windows, Linux, iOS, and Android platforms'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_004`: Any web page of this system shall respond in at least 2 seconds with
    a 1,000-user concurrently access'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea of having this list of user stories and system requirements is to help
    you understand how complex the development of a platform might be if you think
    about it from an architectural perspective.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the purpose of a software architect in a software
    development team. Also, this chapter covered the basics of software development
    process models and the requirements gathering process. You also had the opportunity
    to learn about how to create your Azure account, which will be used during the
    case study of this book, which was presented to you in the previous section. Moreover,
    you even learned about functional and non-functional requirements and how to create
    them using user stories. These techniques will help you deliver a better software
    project.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will have the opportunity to understand how important
    functional and non-functional requirements are for software architecture.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the expertise that a software architect needs to have?
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can Azure help a software architect?
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect decide the best software development process model
    to use in a project?
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect contribute to gathering requirements?
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of requirements does a software architect need to check in a requirement
    specification?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do Design Thinking and Design Sprint help a software architect in the process
    of gathering requirements?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do user stories help a software architect in the process of writing requirements?
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are good techniques to develop very good performance software?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect check whether a user requirement is correctly
    implemented?
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you have some books and links you may consider reading to gather more
    information about this chapter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'For Azure information, check these out:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/overview/what-is-azure/](https://azure.microsoft.com/en-us/overview/what-is-azure/)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.microsoft.com/en-us/hololens](https://www.microsoft.com/en-us/hololens)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azurecharts.com/](https://azurecharts.com/)'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.NET 5 information can be found here:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dotnet/](https://docs.microsoft.com/en-us/dotnet/)'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/](https://docs.microsoft.com/en-us/aspnet/)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/hands-full-stack-web-development-aspnet-core](https://www.packtpub.com/web-development/hands-full-stack-web-development-aspnet-core)'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices](https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices
    )'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software development process model links:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[https://agilemanifesto.org/](https://agilemanifesto.org/)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038](https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/](https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://scrumguides.org/](https://scrumguides.org/)'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/professional-scrummasters-handbook](https://www.packtpub.com/application-development/professional-scrummasters-handbook)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.extremeprogramming.org/](http://www.extremeprogramming.org/)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.gv.com/sprint/](https://www.gv.com/sprint/)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
