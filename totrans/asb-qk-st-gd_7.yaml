- en: Ansible Galaxy and Community Roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we showed you how to create your own roles, guided
    by Ansible norms and best practices. There's no need to reinvent the wheel; instead,
    we can look for what already has been created and use it or alter it to accommodate
    our needs. This chapter will provide a brief introduction to Ansible Galaxy, both
    the command and the repository. We will learn how to upload a role that we created
    to the repository, search for popular community roles to download, set up, and
    use, and troubleshoot them as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a role to Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best practices of searching for community roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and using a community role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting a role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Galaxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Galaxy is the platform created by Ansible for its community. It allows
    its members to make and submit their own roles for other members to use, alter,
    upgrade, enhance, and optimize.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy is built to allow easier role submission by developers and role
    importation by users. When installing Ansible on the controller host, add in the
    `ansible-galaxy` command line. This command allows a Terminal interaction with
    the Ansible Galaxy repository.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy has given Ansible a huge advantage and allowed it to grow faster
    than any other automation tool. The existence of a supply of code written by experienced
    users is invaluable for less experienced users to easily access and learn from.
    This supply is composed of well-written Ansible-based projects and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible Galaxy hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Galaxy hub is a web portal that hosts an enormous number of community
    roles. It is categorized into several groups to make searching for a role easier
    and offers a variety of roles that are developed and maintained by Ansible users.
    Some roles are better coded and maintained than others. The Ansible Galaxy hub
    also offers useful information about how to import and use each role, most of
    which is filled in by its author. Each role should also contain a link to its
    GitHub project for the source code. As well as this, the information should include
    the number of downloads, stars, watchers, and forks for each role. The interface
    also offers a list of all the authors who are signed up to the hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its web interface looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/18f9bffd-da41-4358-9af4-1d79216fafe9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ansible Galaxy uses GitHub to access an API that requires you to log in to
    its author or contributor services. By logging in, the interface changes to add
    a few extra option contributions. The login interface is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ef1f38a-c607-4355-bb5c-09b2bb43d213.png)'
  prefs: []
  type: TYPE_IMG
- en: Ansible does not require authentication to access its roles and use them. The
    login is only for authors and contributors to be able to submit their code as
    a contribution to the community.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible Galaxy repository is organized by tags that indicate the category
    and service of each role. The tags are not limited to those that are present on
    the home page. They can be personalized according to the role. However, including
    one of the home screen tags on your role gives it a much better chance of being
    found easily.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible Galaxy command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Galaxy command line `ansible-galaxy` is the tool to be used locally
    to work on initializing a role.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, we initiated a role using the option `init`, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a folder with the name of the role, containing the
    basic folder and files necessary. These then need to be edited and filled with
    the appropriate code and files to make the role function.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible Galaxy command line manages all roles within an Ansible control
    host. It also allows you to browse roles within the hub. Some of the most frequently
    used options of this command line are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ansible Galaxy command line allows the removal of one or more roles that
    are no longer needed from the local Ansible installation using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It also allows you to search for roles by keywords or tags and see useful information
    about them, either to double-check their ratings or to learn more about it without
    using the web interface. This can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a sample output for role information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e1ea7609-7fc7-4791-bc2c-3b7966422eaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If a role found is needed, it can be installed using the `install` option.
    You can always see the list of installed roles by using the `list` option. The
    following command shows how this can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows an example output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/519c9591-9a97-441a-b186-39d0821b673c.png)'
  prefs: []
  type: TYPE_IMG
- en: We will discuss further functionalities and options of this command in a later
    section.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use a locally created role that has not been uploaded to the Galaxy
    hub within your Ansible installation, you just need to copy its folder to the
    assigned role folder within the Ansible configuration.Ansible is currently developing
    a new command-line tool called `mazer`. It is an open source project made to manage
    Ansible content. It is currently an experimental tool that should not replace
    the `ansible-galaxy` command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: Galaxy contribution – role importation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible community impact is very visible with regard to the number and quality
    of roles that are available for free to the public on the Ansible Galaxy hub.
    Users from all over the world contribute their code for the good of others. This
    is the spirit of open source, which has helped to build great tools. Following
    in the steps of those who have come before us, it is important to contribute every
    little bit of code that we believe is not available and that may help someone
    to deal with a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: What to do before role submission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to upload and contribute to Ansible Galaxy, you need to have a GitHub
    account. This is for two reasons: to log in to the Galaxy hub portal and to upload
    the role''s code as a project to be imported into the Galaxy hub.'
  prefs: []
  type: TYPE_NORMAL
- en: Upon first logging into the Ansible Galaxy hub, we are presented with various
    project access permission configurations. This will allow Galaxy to link the project
    to your organization.
  prefs: []
  type: TYPE_NORMAL
- en: The access permission configurations can always be altered later from within
    the GitHub account option interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The My Content menu will appear in the Galaxy hub home page. This can be used
    to list roles that have been written from your account. The menu allows you to
    add, remove, and edit a version, as well as upgrade roles. It also allows you
    to add contributors if the roles are being maintained by more than one author.
    The following screenshot shows what the web interface looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8735dba8-3379-487f-a0f2-2dc4370ecc17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the local machine, it is advisable that you use a form of Git tool, either
    the fancy graphical interface that is usually available for macOS and Windows
    OS or the good old `git` command line. We need to have logged in locally to our
    GitHub repository for an easier upload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can always create a role from the GitHub web interface. It can be a bit
    clumsy to use, but it does the job perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Role repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After uploading the code to GitHub, we can now import the role to the Ansible
    Galaxy hub. From the My Content page, choose the Add Content button. A box containing
    all the GitHub projects associated with the account will appear. We select the
    role we want to import and press OK. The menu looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bf1798d5-cfd7-4810-9181-08517b52e0ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The role then gets added to the list of contents, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb01bd21-cdba-4d25-8696-d1ea9eafd68a.png)'
  prefs: []
  type: TYPE_IMG
- en: This method allows you to add as many roles as you like to the GitHub account.
    This step is the actual importation of the role, where the Ansible Galaxy performs
    some static analysis based on the metadata in the `meta` folder files.
  prefs: []
  type: TYPE_NORMAL
- en: After adding a role, we can link organizations that have been imported from
    our GitHub account. This helps with indicating collaborations and as a search
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Each role in a user’s account can be managed to add an author and give them
    certain rights, such as administrator rights. This can be changed in the Edit
    property menu. Any users who are added via this menu have the ability to edit,
    disable, enable, remove, and update a role and its content.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the best way to update roles on Galaxy is to set a versioning scheme
    to their content. This process happens with the help of GitHub tags. Whenever
    Ansible Galaxy imports a role code from GitHub, it scans the project for tags, looking
    for a tag that is formatted to hold a versioning syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy role management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now discover what the Ansible Galaxy library has to offer. In this section,
    we are going to explore how to find a role and on what basis we should use it
    compared to others that have the same function. We will also look at some recommended
    methods about how to install a role and how to troubleshoot its installation and
    importation.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy role search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this subsection, we will discuss how to use the Galaxy web portal to find
    an Ansible role. To do this, we will either use a tag page or the general search
    page. We recommend using one of the tag pages for a categorized list.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have chosen a category, we can then look at the filters, which are a
    way of pinpointing specific aspects of a role. The filters that are used by a
    category can be selected from the drop-down menu. A category can either be a simple
    keyword, such as contributor or platform, or it can be a tag. By selecting a category
    other than a keyword or a tag, we get access to a second drop-down menu that contains
    all the available options in that category for us to select from.
  prefs: []
  type: TYPE_NORMAL
- en: Filters can be combined, either across category or as multiple entries from
    the same filter category. This will further narrow down the results that are returned.
    You can also remove filters that are no longer needed by deleting them from the
    list of filters underneath the search bar. The filter features can be used on
    any category page on the portal. It can also be used on the community page where
    the list of all the authors is held.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a list of roles that match our search does not mean we have finished.
    We then need to select which role to perform the required task. From the list
    of roles that match our search, we can use, yet again, the help of other Ansible
    users. Ansible Galaxy offers a rating system that is composed of different variables.
    You can tell the quality of a role and how satisfied its users are by looking
    at how many stars it has. We can also look at how many people are watching the
    role to follow the changes that are being made, which is a good indication of
    how well it is being maintained. The number of times a particular role has been
    downloaded is also useful, but you should compare this with the number of star
    ratings that have been given because it doesn't show whether a role has been downloaded
    multiple times by the same user.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the author of a role is also important. Some Ansible Galaxy authors
    are known for their high-quality roles and their continuous maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy role installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install Ansible roles in a number of ways. The simplest method is to
    use the command line with the option `install`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can personalize our installation command by choosing which
    version we would like from which source. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also install multiple roles at one time using a YAML requirement file.
    The command line looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The requirements file has a YAML structured file that contains instructions
    about how to install the different roles required. This is a sample requirements
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A requirements file can call other requirements files to install the extra
    roles that are already stated in the original requirements file. This is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Another way of installing multiple roles is to rely on the dependency section
    of the role's `meta` folder. The dependency section follows the same rules as
    a requirements file when stating the source and version of a certain role.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy role troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the user's perspective, setting up roles within the Ansible control machine
    may cause a few issues that are mainly related either to not having the permissions
    required to access the role or to the role malfunctioning. The cause of most of
    those errors is how Ansible is installed. The default Ansible installation puts
    all its configuration files, inventory, roles, and variables in a root-owned folder
    (`/etc/ansible`). Using it as a normal user may, therefore, cause a few issues.
    This is why we always recommend having a user-personalized Ansible configuration
    file that points to the folders that the user has access to. Installing a role
    requires the creation of multiple folders and files; if this is not done in an
    authorized location, the installation will fail.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to double-check the system requirements of each role. They may
    need a certain version of Ansible or a certain configuration in a specific file.
    A role will not work properly if one of their requirements is not properly met.
  prefs: []
  type: TYPE_NORMAL
- en: With regard to importing roles to the Galaxy hub, the main error that users
    get is failed importation, which usually has something to do with errors in the
    playbook or in the information about the role that is held in the `meta` folder.
    The Galaxy hub gives a detailed log of the error and can even show the exact lines
    of a specific file where the error has occurred. Once you have fixed the error,
    you can easily restart the import and continue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Galaxy hub is a great asset for the accelerated development and
    success of Ansible. With this resource, most daily tasks have been already converted
    to organized and resource-optimized roles that are available for public use. In
    this chapter, we have introduced Ansible Galaxy and covered how to collaborate
    in the community. We then looked at how to search, install, and troubleshoot roles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](43750355-ab57-4d16-b464-10d2a47be2ea.xhtml), *Ansible Advanced
    Features*, we are going to cover in brief some more advanced features of Ansible that
    can be handy with regard to security and the needs of more advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible Galaxy documentation: [https://galaxy.ansible.com/docs/](https://galaxy.ansible.com/docs/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible documentation: [https://docs.ansible.com/ansible/latest/](https://docs.ansible.com/ansible/latest/)'
  prefs: []
  type: TYPE_NORMAL
