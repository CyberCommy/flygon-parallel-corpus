- en: Custom Domain with SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to configure a custom domain for the quote application
    developed in the previous chapter. Configuring custom domains is an essential
    part of moving the application to the production environment because of its serverless
    nature. This process involves several operations and is different from traditional
    configuration with Apache or NGINX. We will look at the quote application that
    is already deployed in the serverless infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics we will cover in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the custom domain with AWS Route53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating SSL certificates using the Amazon Certificate Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the custom domain using Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some prerequisites to meet before you start this chapter. We are
    going to work with some AWS services and a real domain name. Therefore, you will
    need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 16.04/Windows/macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipenv tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa and other Python dev packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registered domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to use some Python packages, which are mentioned in later sections.
    Apart from the development environment, you will need to have your own registered
    domain and permission to update its default nameservers. Let's move to the next
    section, where we will be exploring the domain nameserver configuration with AWS
    Route 53.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring custom domain with AWS Route 53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a custom domain for our application requires owning a domain. Domain
    names can be purchased from a domain registrar. In our case, I purchased a domain
    name called `abdulwahid.info` from **GoDaddy** ([https://in.godaddy.com/](https://in.godaddy.com/)),
    the **domain name system** (**DNS**) service provider.
  prefs: []
  type: TYPE_NORMAL
- en: Every domain serves over the internet through nameservers managed by the DNS
    service provider. There are many service providers that offer services to manage
    and host a website from their end. We are going to user the AWS Route 53 service.
  prefs: []
  type: TYPE_NORMAL
- en: What is AWS Route 53?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Route 53 is a scalable cloud DNS web service. Route 53 is really effective
    at configuring the domain with any AWS services. It connects with infrastructure
    running on AWS as well as outside of AWS. Route 53 provides a variety of routings,
    such as latency base routing, Geo DNS, geoproximity, and weighted round robin.
    All these routings can be combined to provide low-latency bandwidth. Route 53
    provides a domain name registration service as well. If we register a domain on
    AWS Route 53, then we don't need to manage the DNS configuration. All DNS configurations
    would automatically use AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: But we didn't register our domain on Route 53, so we need to replace the default
    GoDaddy nameservers with Route 53\. In the next section, we'll discuss how to
    change the nameservers.
  prefs: []
  type: TYPE_NORMAL
- en: Changing nameservers to Route 53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to move control for the existing domain to Route 53\. This process
    requires changing the default nameservers of the domain `abdulwhaid.info` to the
    new nameservers created by Route 53.
  prefs: []
  type: TYPE_NORMAL
- en: 'With reference to the AWS official documentation ([https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html))
    about creating a hosted zone for configuring Route 53 with an existing domain
    on a different registrar, perform the  following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign into the AWS Console and open the Route 53 console at [https://console.aws.amazon.com/route53/.](https://console.aws.amazon.com/route53/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are new to Route 53, choose Get Started Now under DNS Management**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are already using Route 53, then choose Hosted zones in the left navigation
    pane, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, from the hosted zones page, click on Create Hosted Zone with the the domain `abdulwahid.info`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the hosted zone for the domain `abdulwahid.info`, Route
    53 will create two records,  **Nameservers** (**NS**) and **Start Of Authority**
    (**SOA**), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to use the NS records and replace the default NS record generated
    at the domain registrar (that is, GoDaddy), where we created the domain `abdulwahid.info`.The
    following is the screenshot of the default NS records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the default NS to Custom and enter the NS records generated at Route
    53, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save, and we are done. Now it will take some time to process by the
    domain registrar. You will get a confirmation email from the domain registrar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Route 53 manage the route traffic using hosted zones for a specific domain.
    A hosted zone is like a container that holds information about the domain and
    knows how to route the traffic on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Once you get the confirmation email, then the domain `abdulwahid.info` will
    be managed by Route 53. Let's move to the next section to learn more about the
    SSL certificate configuration using AWS Certificate Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Generating SSL certificates using AWS Certificate Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSL provides security for your web server and application users. With the help
    of SSL, you can prevent hacker attacks on your data that's communicated between
    your web server and browser. Before implementing the SSL security into our application,
    let's understand some basic methodologies about SSL.
  prefs: []
  type: TYPE_NORMAL
- en: What is SSL?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SSL** (**Secure Sockets Layer**) is a standard security protocol used to
    secure the communication between a web server and browser by encrypting the data.
    SSL will make sure the data transmitted from browsers to your web server is encrypted.
    In order to create an SSL connection, we require to generate SSL certificates
    and configure our web server to serve under the SSL layer. The next section will
    discuss  SSL certificates.'
  prefs: []
  type: TYPE_NORMAL
- en: What are SSL certificates?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For creating an SSL connection, we need an SSL certificate. SSL certificates
    can be generated from the **Certificate Authority** (**CA**). Before generating
    the certificate, we need to provide information about our website and business
    details. Based on this information, two cryptographic keys will be generated:
    a public and a private key.'
  prefs: []
  type: TYPE_NORMAL
- en: Now using the public key and business details, we need to process a **Certificate
    Signing Request** (**CSR**) with the CA. Once the CA has authorized our details
    successfully, it will issue an SSL certificate that matches our private key.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to configure the SSL certificate with our application. This
    is process is a traditional way of generating an SSL certificate. But we are going
    to use Amazon Certificate Manager to generate an SSL certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Generating SSL certificate using Amazon Certificate Manager (ACM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways of generating an SSL certificate. The following are
    some of the ways you can acquire an SSL/TSL certificate for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: You can buy an SSL certificate from the SSL Certificate Authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can generate a free SSL/TSL certificate on your own by using **Let's Encrypt**
    ([https://letsencrypt.org/](https://letsencrypt.org/)). Let's Encrypt is an open
    Certificate Authority that provides free SSL/TSL certificates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can generate an SSL using **AWS Certificate Manager** (**ACM**). We are
    going to use ACM to generate an SSL certificate for our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACM is a service that manages and creates SSL/TSL certificates for  AWS-based
    services and applications. An ACM certificate works with multiple domain names
    and subdomains. You can also use ACM to create a wildcard SSL.
  prefs: []
  type: TYPE_NORMAL
- en: ACM is strictly linked with **AWS Certificate Manager Private Certificate Authority**
    (**ACM PCA**). ACM PCA is responsible for validating the domain authority and
    issuing the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to generate an ACM certificate for our domain and subdomain.
    Follow these steps to create an ACM certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: Please note, API Gateway supports ACM certificates from one region only. Hence,
    we are going to use the **US East **region. You can read more about this at [https://github.com/Miserlou/Zappa/pull/1142](https://github.com/Miserlou/Zappa/pull/1142).
  prefs: []
  type: TYPE_NORMAL
- en: Sign into the AWS Console and open the ACM console at [https://ap-south-1.console.aws.amazon.com/acm](https://ap-south-1.console.aws.amazon.com/acm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are new to AWS ACM, then click on Get Started under Provision certificates, or
    if you are already using AWS ACM, then choose Request a certificate, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are going to choose Request a public certificate.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about public certificate at [https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html](https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next page, you need to give the details of your domain names. We are
    going to request a wildcard certificate against our domain using an asterisk (*)
    as a subdomain name. Hence, this certificate can be used to protect multiple sites
    under the same domain. The following is the screenshot for adding the domain name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, you need to choose a validation method. There are two types
    of methods available, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DNS validation:**  This method requires permission to modify the DNS records
    for the domains in your certificate, so that it can directly validate with the
    record set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email validation: **This method can be used if you do not have permission
    to modify the DNS records. Hence, you can validate the domain with registered
    emails recorded with the domain registrar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to use the DNS validation method. This is because we own the DNS
    access in the Route 53 hosted zone because of the mapped nameserver at the domain
    registrar. DNS validation is straightforward. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are ready to go. Clicking on Review will display the selected configurations,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on Confirm and request from the Review page, you need
    to complete the validation process. The following screenshot states that the validation
    status is pending, so we need to perform the validation by expanding the domain
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you expand the domain section, you will see some instructions to complete
    the validation process. We chose the DNS validation method. Therefore, this method
    needs to add a CNAME record to the DNS configuration. As per the following screenshot,
    you can perform the action to update the DNS configuration with the given CNAME
    by clicking on the Create record in Route 53 button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on Create record in Route 53, it will raise a confirmation
    popup with the CNAME record, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the Create button, it automatically updates the DNS configuration
    in Route 53 with the given CNAME record. You will see the success message, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Continue, and we are done. You will be redirected to the certificates
    dashboard page, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ACM CA has successfully issued an SSL certificate against your domain. As you
    can see, the status in green states Issued. Now, it's time to configure the domain
    and certificate with our application. In the next section, we are going to configure
    a subdomain with the issued SSL certificate with our quote API application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating custom domain using Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa supports custom domain names and subdomain integrations with SSL certificates.
    We have discussed the sources of SSL/TSL certificate generation in the previous
    sections. Zappa can deploy domains with the following CAs:'
  prefs: []
  type: TYPE_NORMAL
- en: Your own purchased SSL from the Certificate Authority provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's Encrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more details about the deployment of the domain with the aforementioned
    CAs at: [https://github.com/Miserlou/Zappa#ssl-certification](https://github.com/Miserlou/Zappa#ssl-certification).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the AWS Certificate Authority SSL certificate. We have already
    generated the ACM certificate in the last section. It's now time to integrate
    the ACM certificate with a subdomain for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to the next section, where we are going to configure our quote API
    application with a subdomain and ACM certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to a domain with ACM certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already issued the ACM certificate, now let's configure our application
    to the desired domain and perform the deployment process. Zappa provides a `domain`attribute
    to configure the domain name for the application and `certificate_arn`for the
    ACM certificate. You need to configure these two attributes in `zappa_settings.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before that, we need to get the value of `certificate_arn`, as it is the **ARN**
    (**Amazon Resource Name**) generated by ACM for the domain for which we had issued
    the certificate. You can get the value of the ARN from the ACM dashboard by expanding
    the domain section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'File—`zappa_settings.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we configure the domain as `quote.abdulwahid.info` and set `certificate_arn`.
    Now, let''s deploy the application using the `zappa deploy <stage_name>` command,
    as we are deploying the application for the first time. Have a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the application was deployed on the randomly generated API
    endpoint. But in order to configure the application, we need to associate the
    API Gateway with the ACM certificate using the `zappa certify` command, as shown
    in the following log snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once you run the `zappa certify` command, it will create and associate the API
    Gateway with the configured certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's update the deployment once again, using the `zappa update <stage_name>` command,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That's it. As you can see, our application is live on `https://quote.abdulwahid.info`.
    Now, let's have a look at the execution in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Application execution with the configured domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have deployed and configured our quote API application on a serverless infrastructure.
    Let's see the API execution using the Postman API client.
  prefs: []
  type: TYPE_NORMAL
- en: Daily quote API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We designed this API (`https://quote.abdulwahid.info/quote?type=daily`) to
    return a quote on a daily basis. Our configured scheduler will update the schedule
    UTC time every day. Have a look at the following cURL log snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Random quote API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The random quote API (`https://quote.abdulwahid.info/quote?type=random`) will
    return a random quote on every request. Have a look at the following cURL log
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's it. We have successfully deployed our application over a serverless architecture.
    We also configured the custom domain with our application. This will be live for
    testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about creating a custom domain and configuring the
    domain with Route 53\. Using Route 53, we managed the domain DNS configurations.
    To generate the SSL certificate, we used ACM, which is easy and straightforward
    to use. Later, we configured Zappa with a domain using the ARN of the generated
    ACM certificate. I hope this chapter helps you understand the mechanism of configuring
    a custom domain for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to learn more about scheduling a task and the asynchronous
    execution of a method on AWS Lambda. We are going to enhance the quote API application
    further with a mobile subscription model. Let's gear up for the next chapter to
    dive into the world of asynchronous using AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is AWS Route 53?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we mean by domain nameservers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does ACM secure the hosted API on AWS Lambda?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
