- en: Chapter 2. Build a Database Class and Simple Shopping Cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our previous app, which was just user profiles, we only created a simple
    **Create-Read-Update-Delete (CRUD)** database abstraction layer - basic stuff.
    In this chapter, we will create a better database abstraction layer that will
    allow us to do more than just basic database functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from the simple CRUD features, we will add result manipulation into the
    mix. We''ll build the following features into our database abstraction class:'
  prefs: []
  type: TYPE_NORMAL
- en: Conversion of integers to other, more accurate numeric types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array to object conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firstOf()` method: Allows us to select the first of the results of a database
    query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lastOf()` method: Allows us to select the last of the results of a database
    query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iterate()` method: Will allow us to iterate over the results and return it
    in a format we will send to this function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`searchString()` method: looks for a string in a list of results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We may add more functions as and when we might need them. Towards the end of
    the chapter, we will apply the database abstraction layer to build a simple **Shopping
    Cart** system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Shopping Cart is simple: a user who is already logged in should be able
    to click on some items for sale, click on **add to shopping cart**, and get the
    user''s details. After the user has verified their items, they then click the
    button to purchase and we''ll transfer their Shopping Cart items into a purchase
    order where they will fill in the delivery address, and then save this into the
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: Building the database abstraction class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In PHP, when creating a class, there is a way to call a certain method every
    time that class is initialized. This is called the constructor of the class. Most
    classes have a constructor, and so we shall have our own. The constructor function
    is named with two underscores with the `construct()` keyword, like this: `function
    __construct()`. Functions with two underscores are also known as magic methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our database abstraction class we need to create a constructor to be able
    to return the `link` object generated by `mysqli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Raw query method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `query` method will just execute the query of anything passed to it. We
    will just call MySQLi's `db->query` method in the `query` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our database layer, let''s create the `create` method. With this, we will
    insert items into a database using SQL syntax. In MySQL, the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a way to convert array values into a string with each value separated
    by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Read method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our `db` layer, let's create the `read` method. With this, we will just
    query our database using SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax in MySQL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll need to create a function which is able to accept the preceding parameters
    in brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Select all method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our `read` method accepts a `key` and `value` pair. However, there may be cases
    where we just need to select everything in a table. In this case, we should create
    a simple method to select all the rows in a table, which only accepts the `table`
    to select as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In MySQL, you just select all the rows using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll need to create a function which is able to accept the preceding parameters
    in brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Delete method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our `db` layer, let's create the `delete` method. With this, we will delete
    some items in a database using SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MySQL syntax is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to create a function which is able to accept the preceding
    parameters in brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Update method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our database layer, let's create an `update` method. With this, we will
    be able to update items in a database using SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MySQL syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `WHERE` clause can be longer than just one key value pair, meaning
    you can add `AND` and `OR` to the statement. This means that, aside from making
    the first keys dynamic, the `WHERE` clause needs to be able to accept `AND`/`OR`
    to its parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you could write the following for the `$where` parameter to select
    the person whose `firstname` is `John` and `lastname` is `Doe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the reason why we made the condition just a string parameter in our
    function. The `update` method in our database class would finally look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: first_of method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our database we will create a `first_of` method which will filter out the
    rest of the results and just get the very first one. We will use PHP''s `reset`
    function, which just gets the very first element in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: last_of method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `last_of` method is similar; we can use PHP''s `end` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: iterate_over method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `iterate_over` method will be a function which simply adds formatting -
    before and after HTML code - to a string - for example, for every result we get
    from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: searchString method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given an array of results, we will look through a certain field for something
    to search. The way to do this is to generate the SQL code that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The function would accept the table, and the field to check the search string
    `needle` in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using the convert_to_json method to implement a simple API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we want the results of a database to be in a specific format. An example
    is when we work with the results as JSON objects instead of arrays. This is useful
    when you are building a simple API to be consumed by a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: This could be possible, for example, in the case of another system that needs
    it in a certain format, for example, a JSON format, and we can feed it using the
    JSON format by converting objects to JSON and sending it off.
  prefs: []
  type: TYPE_NORMAL
- en: 'In PHP, there is the `json_encode` method, which converts any array or object
    into a JSON notation. Our class'' method will just return the value passed into
    it as `json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Shopping Cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will be building a simplified Shopping Cart module which will take advantage
    of our newly built database abstraction class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s map out the features of the Shopping Cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shopping List page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shopper should see several items with their names and prices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shopper should be able to click on a checkbox beside each item which adds
    it to the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Checkout page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of items and their prices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confirmation page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input the details such as the bill-to address, bill-to credit card number, and,
    of course, the name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shopper should also be able to specify which address to send the goods to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the shopping items list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this page, we will create basic HTML blocks to show the list of items that
    a shopper may wish to buy.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the same template system which we had earlier, but instead of having
    the entire code in one page, we'll separate out the header and the footer and
    simply include them in our files using `include()`. We'll also use the same Bootstrap
    framework to make our frontend look nice.
  prefs: []
  type: TYPE_NORMAL
- en: Item template rendering function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll be creating the item render function which will render all our shopping
    items in `div`. The function will simply return the HTML markup of an item with
    the price, name, and picture image of the item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we used our freshly created `iterate_over` function,
    which formats each value of the database. The end result is we have a table of
    the items we want to buy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple layout structure which simply gets the header and footer
    in each page we build, and from now on, simply includes them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `header.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In `footer.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create the `itemslist.php` page which will be included in the `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Our functions are ready but our database does not exist yet. We also need to
    populate our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create some shopping items by creating the `shopping_items` table in
    our MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run MySQL and insert the following items into our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save it in a file `insert_shopping_items.sql`. Then, in the same directory
    as the `insert_shopping_items.sql` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log on to MySQL client and follow the procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then type `use <name of database>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the script by using the `source` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run `SELECT * FROM shopping_items`, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Item template rendering function](graphics/B05285_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding checkboxes to the Shopping List page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s create the HTML checkboxes for a user to be able to select a shopping
    item. We''ll create the form to insert the data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To do this, we''ll need to modify our `render_items` method to add a checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: On the next page, when the user clicks on **submit**, we'll have to get all
    the IDs in an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we named our checkbox `item[]`, we should be able to get the values via
    `$_POST[''item'']` as an array. Basically, all the items that were checked will
    go into PHP''s `$_POST` variable as an array, which will allow us to get all the
    values for saving our data into our database. Let''s loop through the results''
    IDs and get the price for each in our database and save each item in an array
    called `itemsArray`, with the key as the name of the item and its price as the
    value of the item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We are going to first confirm with the user about the items that were purchased.
    We will just save the items and the total amount into a cookie for now. We will
    access the values of the cookie on our checkout page, which will accept the user's
    details and save them to our database on submission of the checkout page.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PHP session versus cookies: For data which is not very sensitive, such as the
    list of items a user has purchased, we can use cookies, which actually store the
    data (in plain text!) in the browser. If you are building this application and
    using it in production, it is recommended to use sessions. To learn more about
    sessions, go to [http://php.net/manual/en/features.sessions.php](http://php.net/manual/en/features.sessions.php)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Cookies in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In PHP, to start a cookie, you just call the `setcookie` function. To save our
    items purchased into a cookie, we must serialize the array, the reason being,
    the cookies only store values as strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we save the items into the cookie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding cookie will store the items as an array in the `purchased_items`
    cookie. It will expire in 15 minutes (900 seconds). However, notice the call to
    the `time()` function, which returns the Unix timestamp of the current time. Cookies
    in PHP will expire when the time set in the last parameter has been reached.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging your cookie-based application is sometimes frustrating. Make sure
    that the timestamp generated by `time()` is really showing the current time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it could happen that you have recently reformatted your computer
    and for some reason was not able to set the time correctly. To test the `time()`,
    simply run a PHP script with the `time()` call and check [http://www.unixtimestamp.com/](http://www.unixtimestamp.com/)
    if they are almost the same.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Checkout page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we'll create a form where the user can input their details after checking
    out.
  prefs: []
  type: TYPE_NORMAL
- en: We first need to build the database table for the customer. Let's call this
    table `purchases`. We'll need to store the customer's name, address, e-mail, credit
    card, items purchased, and the total. We should also store the time of the purchase
    transaction and use a unique primary key to index each row.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is our table''s schema to be imported into our MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: One way to import this is by creating a file `purchases.sql`, then logging in
    to your MySQL command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can select the database you want to use with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, assuming you are on the same directory as `purchases.sql`, you can
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s finish off by creating a simple form with input fields for details such
    as the address, credit card, and name of the buyer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Checkout page](graphics/B05285_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we''ll save everything into another table in our database by using
    our `DB` class as usual. To calculate the total amount, we will query the database
    for the prices and use the `array_sum` of PHP to get the total:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To keep things simple, as you can see in the highlighted code, we need to collect
    all the items that were bought into one long string, for saving in our database.
    Here''s how you can concatenate each item and their prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can save this data into the variable `$items_text`. We will update
    the preceding highlighted code and change the text `<all the items and prices>`
    into it with  `$items_text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `foreach` loop should be placed before the call to the `$db->insert`
    method in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we've saved the data into our  `purchased_items` table. It's time to
    say thank you to our customer and send an e-mail. In our HTML code of `thankyou.php`,
    we will just write a thank you note and let the user know that an e-mail is on
    its way regarding their purchases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Thank you page](graphics/B05285_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll name the file `thankyou.php`, and its HTML code is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Sending an e-mail using PHP is done using the `mail()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The third parameter is the message of our e-mail. In the code, we still need
    to add the details of the purchase. We shall loop through the cookie we made earlier
    and the prices, then just output the total amount, and send the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We can add the preceding bit of code at the very end of our `thankyou.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Installing TCPDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the TCPDF library from sourceforge, [https://sourceforge.net/projects/tcpdf/](https://sourceforge.net/projects/tcpdf/)
  prefs: []
  type: TYPE_NORMAL
- en: TCPDF is a PHP class for writing PDF documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample code with a PHP example of TCPDF''s, looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: With this example, we can now use the preceding code and modify it a bit in
    order same in order to create our own invoice. All we need is the same HTML styling
    and the values generated by our total. Let's use the same code and update the
    values to the ones we need.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we will set the Author to be the site's name, `example.info`.
    And set our subject to `Invoice`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to acquire the main TCPDF library. If you installed it on a
    different folder, we may need to provide a relative path which points to the `tcpdf_include.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This instantiates a new TCPDF object with the default orientations and default
    page formats from the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use HTML to create an HTML table of the purchases of a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This style of writing out multi-line strings is known as the heredoc syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a connection to the database by instantiating our `DB` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In creating PDFs, it's important to note that most HTML to PDF converters are
    created simple and can interpret simple-inline CSS layouts. We used tables to
    print out each item, which is okay for table data. It provides a structure to
    the layout and makes sure that things are properly aligned.
  prefs: []
  type: TYPE_NORMAL
- en: Admin for managing purchases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll be building the admin system for handling all our purchases. This is
    in order to keep track of each customer that bought something from our site. It
    will consist of two pages:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of all customers who purchased something
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to view the items purchased by a customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also be adding some features to these pages in order to make it easier
    for an admin to make changes to a customer's information.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also create a simple  **htaccess apache rule** in order to block other
    people from accessing our admin site, because it contains highly sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first start selecting all the data inside our `purchases` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We shall now add a link to another view of our customer data. This view will
    enable the admin to see all their purchases. We can link the first page to the
    detailed view of the customer''s purchase by adding a link on the customer''s
    name, by changing the line where we''ve added the customer''s name to the `$html`
    variable to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we've made the `$row['id']` be part of the URL. We can now access
    the ID number of the data we will be getting through the `$_GET['pid']` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the code for viewing a customer''s purchased items in a new file
    - `view_purchases.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we've used the `$_GET['id']` variable for us to look
    up the table for the exact purchases of the customer. While we could have just
    used the customer name to look up the customer's purchases from the table `purchases`, that
    would assume that the customer only purchased once through our system. Also, we
    didn't use the customer name to determine if we sometimes have customers that
    have the same name.
  prefs: []
  type: TYPE_NORMAL
- en: By using the primary ID of the table `purchases`, in our case, selecting by
     the `id` field ensures that we are selecting that particular unique purchase.
    Note that because our database is simple, we are able to just query one table
    in our database - the `purchases` table - in our case.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps a better implementation might be to separate the `purchases` table into
    two tables - one containing the customer's details, and another containing the
    purchased items details. This way, if the same customer returns, their details
    can be automatically filled in next time, and we just need to link the new items
    purchased to their account.
  prefs: []
  type: TYPE_NORMAL
- en: The `purchases` table, in this case, would simply be called `purchased_items`
    table, and each item would be linked to a customer ID. The customer details would
    be stored in a `customers` table, containing their unique address, e-mail and
    credit card details.
  prefs: []
  type: TYPE_NORMAL
- en: You would then be able to show a customer their purchase history. Each time
    the customer buys from the store, the transaction date would be recorded and you
    would have to sort the history by date and time of each entry.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great, we're done!
  prefs: []
  type: TYPE_NORMAL
- en: We just learned how to build a simple database abstraction layer, and how to
    use it for a Shopping Cart. We also learned about cookies and building an invoice
    using the TCPDF library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll build a completely different thing and use sessions
    to save the current user information of a user in building a PHP-based chat system.
  prefs: []
  type: TYPE_NORMAL
