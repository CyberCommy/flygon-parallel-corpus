- en: Working with Python Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we will introduce Python scripting, collections, functions,
    exception-handling, and object-oriented programming. We will review how to create
    classes, objects, and Python's particularities to initialize objects, including
    the use of special attributes and methods. Also it will be introduce a methodology,
    tools, and development environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Programming and installing Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structures and Python collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python functions and managing exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object-Oriented Programming in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OMSTD methodology including how to manage modules, packages, dependencies,
    passing parameters, working with virtual environments, and the `STB` module for
    Python scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main development environments for script-development in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting and debugging with Python IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start reading this book, you should know the basics of Python programming,
    such as the basic syntax, variable type, data type tuple, list dictionary, functions,
    strings, and methods. Two versions, 3.6.5 and 2.7.14, are available at [python.org/downloads/](http://python.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter 1` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  prefs: []
  type: TYPE_NORMAL
- en: Programming and installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a byte-compiled, object-oriented programming language that is easy
    to read and write. The language is great for security professionals because it
    allows for the rapid creation of tests as well as reusable items for future use.
    As many security tools are written in Python, it offers many opportunities for
    extending and adding features to tools that are already written.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Python scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will work with two versions. If you use a Linux Distribution,
    such as Debian or Kali, there will be no problems since Python is multi-platform
    and version 2.7 comes installed by default in the majority of linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Why choose Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many reasons to choose Python as your main programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-platform and open source language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple, fast, robust, and powerful language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many libraries, modules, and projects focused on computer security are written
    in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot of documentation and a very large user community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a language designed to make robust programs with a few lines of code,
    something that in other languages is only possible after including many characteristics
    of each language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ideal for prototypes and rapid-concept tests (PoC).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python interpreter is available on many platforms (Linux, DOS, Windows,
    and macOS X). The code that we create in Python is translated into bytecode when
    it is executed for the first time. For that reason, in systems in which we are
    going to execute our programs or scripts developed in Python, we need the interpreter
    to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object-oriented programming is a paradigm where programs are defined in terms
    of "object classes" that communicate with each other by sending messages. It is
    an evolution of the paradigms of procedural, structured, and modular programming,
    and is implemented in languages such as Java, Python, or C ++.
  prefs: []
  type: TYPE_NORMAL
- en: Classes define the behavior and available state that is specified in objects,
    and allow a more direct representation of the concepts necessary for modeling
    a problem, allowing the user to define new types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects are characterized by:'
  prefs: []
  type: TYPE_NORMAL
- en: An identity that differentiates them from each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining their behavior through methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining their state through properties and attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes allow grouping in a new type of data and the functionalities associated
    with objects, favoring separation between the details of the implementation of
    the essential properties for its use. In this way, the goal is to not show more
    than the relevant information, hiding the state and the internal methods of the
    class, it is known as "encapsulation," and it is a principle inherited from modular
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: An important aspect in the use of classes is that they are not manipulated directly,
    but serve to define new types. A class defines properties and behaviors for objects
    (instances of a class). A class acts as a template for a set of objects, which
    are said to belong to the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important techniques used in object-oriented programming are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Abstraction**: Objects can perform tasks, interact with other objects, or
    modify and report their status without the need to communicate how those actions
    are performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encapsulation**: Objects prevent the modification of their internal state
    or a call to internal methods by other objects, and are only related through a
    clear interface that defines how they relate to other objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polymorphism**: Different behaviors may be associated with the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inheritance**: Objects are related to others by establishing hierarchies,
    and it is possible that some objects inherit the properties and methods of other
    objects, extending their behavior and/or specializing. Objects are grouped like
    this in classes that form hierarchies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining and installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation of Python is fast on Linux and Windows platforms. Windows users
    can use an installer in an easy way that makes configuration work for you. In
    Linux, you have the option to build the installation from the source code, but
    it's not mandatory, and you can use classic package-management dependencies, such
    as apt-get.
  prefs: []
  type: TYPE_NORMAL
- en: Many Linux distributions come preinstalled with Python 2\. When installing Python
    3 on such a system, it is important to keep in mind that we are not replacing
    the installation of Python 2\. In this way, when we install Python 3, it can be
    installed in parallel with Python 2 on the same machine. After installing Python
    3, you can call the python interpreter using the Python3 executable.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows users can obtain the installer from the main Python site: [https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi](https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi).
    Just double-click the installer, and follow the steps to install it. It should
    create a directory at `C:/Python27/`; this directory will have the `Python.exe`
    interpreter as well as all of the default libraries installed.'
  prefs: []
  type: TYPE_NORMAL
- en: The Python installation allows you to customize where the environment will be
    installed. The default location for Python 2.7.14 is `C:\Python27`, although you
    can specify another location. This route will be relevant when looking for certain
    modules and tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can customize the installation if we want to include the documentation or
    install a series of utilities, such as the `pip` package manager or the IDLE development
    environment, to edit and execute scripts. It is recommended you leave the options
    marked so that it installs them and we have as complete an environment as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d69cf39-2c64-4588-8b80-95fb8f541609.png)'
  prefs: []
  type: TYPE_IMG
- en: It is important to check the Add python.exe to the Path box. This will allow
    you to run Python directly from the command prompt from any path without having
    to go to the installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of installing the version of Python for Windows, you can also see
    that it is available IDLE, an editor or IDE (Integrated Development Environment)
    of Python that will allow us to write and test the code. Once installed, we can
    verify that everything is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the folder where you have installed it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `C:\Python27\Lib\idlelib`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `**idle.bat**` file with a double-click
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another option we have for Windows users is WinPython, which is available at **[http://winpython.github.io](http://winpython.github.io).**
  prefs: []
  type: TYPE_NORMAL
- en: WinPython is a Python distribution; you can install it on Windows 7/8/10 operating
    systems for scientific and educational use.
  prefs: []
  type: TYPE_NORMAL
- en: 'This distribution is something different from others because it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requires no installation**: WinPython lives entirely in its own directory,
    without any OS installation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Is portable**: You can easily zip your python project and install in other
    machines in an easy way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python for Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python is installed by default in most Gnu/Linux distributions. If we want
    to install it in Ubuntu or Debian-based distributions, we can do it through the
    `apt-get` package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Python collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review different types of data collections, such as
    as lists, tuples, and dictionaries. We will see methods and operations for managing
    these data structures and a practical example where we review the main use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists in Python are equivalent to structures as dynamic vectors in programming
    languages such as C. We can express literals by enclosing their elements between
    a pair of brackets and separating them with commas. The first element of a list
    has index 0\. The indexing operator allows access to an element and is expressed
    syntactically by adding its index in brackets to the list, list [index].
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example: a programmer can construct a list by appending
    items using the `append()` method, print the items, and then sort them before
    printing again. In the following example, we define a list of protocols and use
    the main methods of a Python list as append, index, and remove:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To access specific positions, we use the `index` method, and to delete an element,
    we use the remove method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To print out the whole protocol list, use the following code. This will loop
    through all the elements and print them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Lists also have methods, which help to manipulate the values inside them and allow
    us to store more than one variable inside it and provide a better method for sorting
    arrays of objects in Python. These are the most-used methods for manipulating
    lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.append(value):** Appends an element at the end of the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.count(''x''):** Gets the number of ''x'' in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.index(''x''):** Returns the index of ''x'' in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.insert(''y'',''x''):** Inserts ''x'' at location ''y'''
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.pop():** Returns the last element and also removes it from the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.remove(''x''):** Removes the first ''x'' from the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.reverse():** Reverses the elements in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.sort():** Sorts the list alphabetically in ascending order, or numerically
    in ascending order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reversing a List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another interesting operations that we have in lists is the one that offers
    the possibility of going back to the list through the `reverse ()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to do the same operation use the `-1` index. This quick and easy
    technique shows how you can access all the elements of a list in reverse order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Comprehension lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comprehension lists allow you to create a new list of iterable objects. Basically,
    they contain the expression that must be executed for each element inside the
    loop that iterates over each element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'List comprehensions can also be used to iterate over strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A tuple is like a list, but its size and elements are immutable, that is, its
    values cannot be changed nor can more elements be added than initially defined.
    A tuple is delimited by parentheses. If we try to modify an element of a tuple,
    we get an error indicating that the tuple object does not support the assignment
    of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a3849051-44d7-4322-833b-2bceec82c9a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python dictionary data structure allows us to associate values with keys.
    A key is any immutable object. The value associated with a key can be accessed
    with the indexing operator. In Python, dictionaries are implemented using hash
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Python dictionary is a `storage` method for key:value pairs. Python dictionaries
    are enclosed in curly brackets, `{}`.Dictionaries, also called associative matrices,
    which owe their name to collections that relate a key and a value. For example,
    let''s look at a dictionary of protocols with names and numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The limitation with dictionaries is that we cannot create multiple values with
    the same key. This will overwrite the previous value of the duplicate keys. Operations
    on dictionaries are unique. We can combine two distinct dictionaries into one
    by using the `update` method. Also, the `update` method will merge existing elements
    if they conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The first value is the key and the second is the value associated with the
    key. As a key, we can use any immutable value: we could use numbers, strings,
    booleans, or tuples, but not lists or dictionaries, since they are mutable.'
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between dictionaries and lists or tuples is that the values
    stored in a dictionary are accessed not by their index, because they have no order,
    but by their key, using the [] operator again.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in lists and tuples, you can also use this operator to reassign values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When constructing a dictionary, each key is separated from its value by a colon,
    and we separate items by commas. The `.keys ()` method will return a list of all
    keys of a dictionary and the `.items ()` method will return a complete list of
    elements in the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are examples using these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`services.keys()` is method that will return all the keys in dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`services.items()` is method that will return the entire list of items in dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/81e31826-beac-4f5c-aaca-e6bdafed7960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the point of view of performance, the key within a dictionary is converted
    to a hash value when it is stored in order to save space and improve performance
    when searching or indexing the dictionary. It is also possible to print the dictionary
    and browse the keys in a specific order. The following code extracts the dictionary
    elements and then orders them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can extract keys and values for each element in the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you might want to iterate over a dictionary and extract and display
    all the "key:value" pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Python functions and managing exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review Python functions and managing exceptions. We
    will see some examples for declaring and using both in our script code. We'll
    also review the main exceptions we can find in Python for include in our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Python functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, functions provide organized blocks of reusable code. Typically, this
    allows a programmer to write a block of code to perform a single, related action.
    While Python provides many built-in functions, a programmer can create user-defined
    functions. In addition to helping us to program and debug by dividing the program
    into parts, the functions also allow us to reuse code.
  prefs: []
  type: TYPE_NORMAL
- en: Python functions are defined using the def keyword with the function name, followed
    by the function parameters. The body of the function consists of Python statements
    that are to be executed. At the end of the function, you can choose to return
    a value to the function caller, or by default, it will return the None object
    if you do not specify a return value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can define a function that, given a sequence of numbers and
    an item passed by a parameter, returns True if the element is within the sequence
    and False otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Managing exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exceptions are errors detected by Python during program execution. When the
    interpreter encounters an exceptional situation, such as trying to divide a number
    by 0 or trying to access a file that does not exist, it generates or throws an
    exception, informing the user that there is a problem.
  prefs: []
  type: TYPE_NORMAL
- en: If the exception is not captured, the execution flow is interrupted and the
    information associated with the exception in the console is displayed so that
    the programmer can solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a small program that would throw an exception when trying to divide
    1 by 0\. If we execute it, we will get the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/13968d79-9053-41f1-bfb8-a73c3e2f14fc.png)'
  prefs: []
  type: TYPE_IMG
- en: The first thing that is shown is the traceback, which consists of a list of
    the calls that caused the exception. As we see in the stack trace, the error was
    caused by the call to calculate () of line 7, which in turn calls division (1,
    0) on line 5, and ultimately the execution of the a/b sentence of division line
    2.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python language provides an exception-handling capability to do just this.
    We use try/except statements to provide exception-handling. Now, the program tries
    to execute the division by zero. When the error occurs, our exception-handling
    catches the error and prints a message to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/994fd36f-cd81-417b-b530-651d019d1475.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following example, we try to create a file-type f object. If the file
    is not passed as a parameter, an exception of the IOError type is thrown, which
    we capture thanks to our try-except:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/867ef05a-d3b5-41e1-9ce7-d4d4dbaa17b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the exceptions available by default are listed here (the class from
    which they are derived is in parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: '**BaseException**: Class from which all exceptions inherit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exception** (BaseException): Super class of all exceptions that are not output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ZeroDivisionError** (ArithmeticError): Launched when the second argument
    of a division or module operation was `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EnvironmentError** (StandardError): Parent class of errors related to input/output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOError** (EnvironmentError): Error in an input/output operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OSError** (EnvironmentError): Error in a system call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ImportError** (StandardError): The module or the module element that you
    wanted to import was not found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python as an OOP language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review Object-Oriented Programming and inheritance
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented programming is one of the paradigms most used today. While it
    fits a lot of situations that we can find in day-to-day life, in Python, we can
    combine it with other paradigms to get the best out of the language and increase
    our productivity while maintaining an optimal code design.
  prefs: []
  type: TYPE_NORMAL
- en: Python is an object-oriented language and allows you to define classes and instantiate
    objects from these definitions. A block headed by a class statement is a class
    definition. The functions that are defined in the block are its methods, also
    called member functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way Python creates objects is with the class keyword. A Python object is
    a collection of methods, variables, and properties. You can create many objects
    with the same class definition. Here is a simple example of a protocol object
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the following code in the `protocol.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The `__init__` method is a special method that, as its name suggests, act as
    a constructor method to perform any initialization process that is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter of the method is a special keyword and we use the self identifier
    for reference the current object. It is a reference to the object itself and provides
    a way to access its attributes and methods.
  prefs: []
  type: TYPE_NORMAL
- en: The self parameter is equivalent to the pointer that can be found in languages
    such as C ++ or Java. In Python, self is a reserved word of the language and is
    mandatory, it is the first parameter of conventional methods and through it you
    can access the attributes and methods of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an object, write the name of the class followed by any parameter
    that is necessary in parentheses. These parameters are the ones that will be passed
    to the `__init__` method, which is the method that is called when the class is
    instantiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created our object, we can access its attributes and methods
    through the object.attribute and `object.method()` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main concepts of object-oriented programming languages are: encapsulation,
    inheritance, and polymorphism. In an object-oriented language, objects are related
    to others by establishing hierarchies, and it is possible that some objects inherit
    the properties and methods of other objects, extending their behavior and/or specializing.'
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance allows us to generate a new class from another, inheriting its attributes
    and methods, adapting or expanding them as necessary. To indicate that a class
    inherits from another class, we need to put the name of the class that is inherited
    between parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: In OOPS terminology, it is said that "B inherits from A," "B is a class derived
    from A," "A is the base class of B," or "A is a superclass of B."
  prefs: []
  type: TYPE_NORMAL
- en: 'This facilitates the reuse of the code, since you can implement the basic behaviors
    and data in a base class and specialize them in the derived classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6b5697ad-3499-43a3-8f4a-278cea025cb2.png)'
  prefs: []
  type: TYPE_IMG
- en: The OMSTD methodology and STB Module for Python scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OMSTD stands for Open Methodology for Security Tool Developers, it is a methodology
    and set of good practices in Python for the development of security tools. This
    guide is intended for developments in Python, although in reality you can extend
    the same ideas to other languages. At this point, I will discuss the methodology
    and some tricks we can follow to make the code more readable and reusable.
  prefs: []
  type: TYPE_NORMAL
- en: Python packages and modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python programming language is a high-level and general-use language with
    clear syntax and a complete standard library. Often referred to as a scripting
    language, security experts have highlighted Python as a language to develop information-security
    toolkits. The modular design, the human-readable code, and the fully-developed
    library set provide a starting point for security researchers and experts to build
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Python comes with a comprehensive standard library that provides everything
    from integrated modules that provide access to simple I/O, to platform-specific
    API calls. The beauty of Python is the modules, packages, and individual frames
    contributed by the users. The bigger a project is, the greater the order and the
    separation between the different parties must be. In Python, we can make this
    division using the modules concept.
  prefs: []
  type: TYPE_NORMAL
- en: What is a module in Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A module is a collection of functions, classes, and variables that we can use
    from a program. There is a large collection of modules available with the standard
    Python distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The import statement followed by the name of the module gives us access to the
    objects defined in it. An imported object becomes accessible from the program
    or module that imports it, through the identifier of the module, point operator,
    and the identifier of the object in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'A module can be defined as a file that contains Python definitions and declarations.
    The name of the file is the name of the module with the `.py` suffix attached.
    We can begin by defining a simple module that will exist in a .py file within
    the same directory as our `main.py` script that we are going to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my_module.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within this `my_module.py` file, we’ll define a simple `test()` function that
    will print “This is my first module”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Within our `main.py` file, we can then import this file as a module and use
    our newly-defined test() method, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: That is all we need to define a very simple `python` module within our Python
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: Difference Between a Python Module and a Python Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are working with Python, it is important to understand the difference
    between a Python module and a `Python` package. It is important differentiate
    them; a package is a module that includes one or more modules.
  prefs: []
  type: TYPE_NORMAL
- en: Part of software development is to add functionality based on modules in a programming
    language. As new methods and innovations are made, developers supply these functional
    building blocks as modules or packages. Within the Python network, the majority
    of these modules and packages are free, with many, including the full source code,
    allowing you to enhance the behavior of the supplied modules and to independently
    validate the code.
  prefs: []
  type: TYPE_NORMAL
- en: Passing parameters in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop this task, the best thing is to use the `argparse` module that comes
    installed by default when you install Python.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, you can check out the official website: [https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of how to use it in our scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the following code in the filename `testing_parameters.py`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In the params variable, we have the parameters that the user has entered from
    the command line. To access them, you have to use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the interesting options is that it is possible to indicate the type
    of parameter with the type attribute. For example, if we want a certain parameter
    to be treated as if it were an integer, we could do it in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Another thing that could help us to have a more readable code is to declare
    a class that acts as a global object for the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if we want to pass several parameters at the same time to a function,
    we could use this global object, which is the one that contains the global execution
    parameters. For example, if we have two parameters, we can construct the object
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the below code in the filename `params_global.py`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In the previous script, we can see that we obtain parameters with the `argparse`
    module and we encapsulate these parameters in an object with the Parameters class.With
    this practice, we get encapsulated parameters in an object to facilitate the retrieval
    of these parameters from different points of the script.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dependencies in a Python project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If our project has dependencies with other libraries, the ideal would be to
    have a file where we have these dependencies, so that the installation and distribution
    of our module is as simple as possible. For this task, we can create a file called
    `requirements.txt`, which, if we invoke it with the pip utility, will lower all
    the dependencies that the module in question needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install all the dependencies using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Here, `pip` is the `Python` package and dependency manager whereas `requirements.txt`
    is the file where all the dependencies of the project are detailed.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the requirements.txt file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also have the possibility to create the `requirements.txt` file from the
    project source code.
  prefs: []
  type: TYPE_NORMAL
- en: For this task, we can use the `pipreqs` module, whose code can be downloaded
    from the GitHub repository at [https://github.com/bndr/pipreqs](https://github.com/bndr/pipreqs)
  prefs: []
  type: TYPE_NORMAL
- en: In this way, the module can be installed either with the `pip install pipreqs` command
    or through the GitHub code repository using the` python setup.py install` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the module, you can query the official pypi page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pypi.python.org/pypi/pipreqs](https://pypi.python.org/pypi/pipreqs).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate the `requirements.txt` file, you have to execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Working with virtual environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Python, it is strongly recommended you use Python virtual
    environments. Virtual environments help separate the dependencies required for
    projects and keep our global directory clean of `project` packages. A virtual
    environment provides a separate environment for installing Python modules and
    an isolated copy of the Python executable file and associated files. You can have
    as many virtual environments as you need, which means that you can have multiple
    module configurations configured, and you can easily switch between them.
  prefs: []
  type: TYPE_NORMAL
- en: From version 3, Python includes a `venv` module, which provides this functionality.
    The documentation and examples are available at [https://docs.python.org/3/using/windows.html#virtual-environments](https://docs.python.org/3/using/windows.html#virtual-environments)
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a standalone tool available for earlier versions, which can be
    found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
  prefs: []
  type: TYPE_NORMAL
- en: Using virtualenv and virtualwrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you install a `Python` module in your local machine without using a virtual
    environment, you are installing it globally in the operating system. This installation
    usually requires a user root administrator and that `Python` module is installed
    for every user and every project.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the best practice is install a Python virtual environment if
    you need to work on multiple Python projects or you need a way to work with all
    associated libraries in many projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtualenv is a `Python` module that allows you to create virtual and isolated
    environments. Basically, you create a folder with all the executable files and
    modules needed for a project. You can install virtualenv with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a new virtual environment, create a folder and enter the folder from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, this creates a new environment called myVirtualEnv, which you
    must activate in order to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Executing this command will initiate a folder with the name indicated in your
    current working directory with all the executable files of Python and the `pip`
    module that allows you to install different packages in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualenv is like a sandbox where all the dependencies of the project will
    be installed when you are working, and all modules and dependencies are kept separate.
    If users have the  same version of Python installed on their machine, the same
    code will work from the virtual environment without requiring any change.
  prefs: []
  type: TYPE_NORMAL
- en: '`Virtualenvwrapper` allows you to better organize all your virtually-managed
    environments on your machine and provides a more optimal way to use `virtualenv`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the pip command to install `virtualwrapper` since is available in
    the official Python repository. The only requirement to install it is to have
    previously installed `virtualenv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a virtual environment in Windows, you can use the `virtualenv` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: When we execute previous command, we see this result:![](assets/9c138124-d264-4e0d-8fec-dff36f65f947.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution of the `virtualenv` command in Windows generates four folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bb6e3654-f1bc-4599-a2a5-d9df33dd48b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the scripts folder, there is a script called `activate.bat` to activate
    the virtual env. Once we have it active, we will have a clean environment of modules
    and libraries and we will have to download the dependencies of our project so
    that they are copied in this directory using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This is the active folder when we can find the active.bat script:![](assets/fdaf0e17-8d1d-447b-9900-c131a7463a14.png)
  prefs: []
  type: TYPE_NORMAL
- en: The STB (Security Tools Builder) module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool will allow us to create a base project on which we can start to develop
    our own tool.
  prefs: []
  type: TYPE_NORMAL
- en: The official repository of this tool is [https://github.com/abirtone/STB](https://github.com/abirtone/STB).
  prefs: []
  type: TYPE_NORMAL
- en: For the installation, we can do it by downloading the source code and executing
    the `setup.py` file, which will download the dependencies that are in the `requirements.txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We can also do it with the `**pip install stb**` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'When executing the `**stb**` command, we get the following screen that asks
    us for information to create our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3701b9aa-a4ca-4a4c-98e2-1bd182c5e566.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With this command, we have an application skeleton with a `setup.py` file that
    we can execute if we want to install the tool as a command in the system. For
    this, we can execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute the previous command, we obtain the next folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de04da7e-a815-4716-8c4c-7efe0105b0d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This has also created a `port_scanning_lib` folder that contains the files
    that allow us to execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute the script with the help option (-h), we see that there is a
    series of parameters we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b7a9cde-99c8-4a5d-ad17-130bb441799e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the code that has been generated in the `port_scanning.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see the parameters that are defined and that a `GlobalParameters`
    object is used to pass the parameters that are inside the `parsed_args` variable.
    The method to be executed is found in the `**api.py**` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, at this point, we could retrieve the parameters entered from the
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the script from the command line, passing our ip target as a
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute now, we see how we can obtain the first introduced parameter
    in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46600ebf-0ca5-46dd-94bd-a8a7ef1f3af1.png)'
  prefs: []
  type: TYPE_IMG
- en: The main development environments for script-development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review Pycharm and WingIDE as development environments
    for python scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to rapidly develop and debug Python applications, it is absolutely
    necessary to use a solid IDE. If you want to try different options, we recommend
    you check out the list that is on the official site of Python, where they can
    see the tools according to their operating systems and their needs: [https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments).
  prefs: []
  type: TYPE_NORMAL
- en: 'Of all the environments, we will highlight the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pycharm: **[http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wing IDE**: [https://wingware.com](https://wingware.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pycharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyCharm is an IDE developed by the company Jetbrains, and is based on IntelliJ
    IDEA, the IDE of the same company, but focused on Java and is the base for Android
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCharm is multi-platform and we can find binaries for Windows, Linux, and
    macOS X. There are two versions of PyCharm: **community** and **professional**,
    with differences in features related to integration with web frameworks and database
    support.'
  prefs: []
  type: TYPE_NORMAL
- en: In this url we can see a comparison between community and professional edition: [http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)
  prefs: []
  type: TYPE_NORMAL
- en: 'The main advantages of this development environment are:'
  prefs: []
  type: TYPE_NORMAL
- en: Autocomplete, syntax highlighter, analysis tool and refactoring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with web frameworks such as Django, Flask, Pyramid, Web2Py, jQuery,
    and AngularJS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced debugger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible with SQLAlchemy (ORM), Google App Engine, Cython.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Connection with version-control systems: Git, CVS, Mercurial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WingIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WingIDE is a multi-platform environment available for Windows, Mac, and Linux
    and provides all the functionalities at the level of debugging and variables-exploration.
  prefs: []
  type: TYPE_NORMAL
- en: WingIDE has a rich feature set that will easily support the development of sophisticated
    Python Applications. With WingIDE, you are able to inspect variables, stack arguments,
    and memory locations without the process changing any of their values before you
    can record them. Breakpoints are the most common feature that you will use when
    debugging a process. Wing Personal is the free version of this Python IDE, which
    can be found at [https://wingware.com/downloads/wingide-personal](https://wingware.com/downloads/wingide-personal)
  prefs: []
  type: TYPE_NORMAL
- en: 'WingIDE uses the Python configuration installed in your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7f4752ae-8d20-42c4-9fb5-5b518dfa22b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Debugging with WingIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we are debugging a Python script that accepts two input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/609a7394-7c59-4fe9-b2ca-ec68e47e0d8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An interesting topic is the possibility of adding a breakpoint in our program
    with the option `Add Breakpoint` option, in this way, we can debug and see the
    contents of the variables just at the point where we have established the breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d8fa3334-2f5d-4c58-b545-51588db32702.png)'
  prefs: []
  type: TYPE_IMG
- en: We can set a breakpoint in the call to the `view_parameters` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a script in debug mode with parameters, you have to edit the properties
    of the script and add the parameters that our script needs within the debug tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43824730-490c-44bd-8424-18ca965c8fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we execute in debug mode with a breakpoint inside the function, we can see
    the content of the parameters in local **string variables**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c044a72c-4ac9-4fc8-af31-9f3f516ae7f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot we can visualize the values of the params variable
    that contains the values we are debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53fc3235-2be1-4166-aae1-ef20f6f7ea24.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Python on the Windows and Linux operating
    systems. We reviewed the main data structures and collections, such as lists,
    tuples, and dictionaries. We also reviewed functions, managing exceptions, and
    how to create classes and objects, as well as the use of attributes and special
    methods. Then we looked at development environments and a methodology to introduce
    into programming with Python. OMSTD is a methodology and set of best practices
    in Python for the development of security tools. Finally, we reviewed the main
    development environments, PyCharm and WingIDE, for script-development in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](a00521f9-8119-4877-aee1-b24e589cc432.xhtml), we will explore
    programming system packages for working with operating systems and filesystems,
    threads, and concurrency.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the differences between Python 2.x and 3.x?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the programming paradigm used by Python developers and what are the
    main concepts behind this paradigm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What data structure in Python allows us to associate values with keys?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the main development environments for Python scripting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the methodology we can follow as a set of good practices in Python for
    the development of security tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `Python` module that helps to create isolated Python environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tool allows us to create a base project on which we can start to develop
    our own tool?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How we can debug variables in Python development environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How we can add a breakpoint in `pycharm`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How we can add a breakpoint in Wing IDE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In these links, you will find more information about mentioned tools and official
    python documentation for search into some of the commented modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://winpython.github.io](http://winpython.github.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.python.org/2.7/library/](https://docs.python.org/2.7/library/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.6/library/](https://docs.python.org/3.6/library/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
