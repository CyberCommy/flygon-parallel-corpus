- en: Chapter 7. Working with Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show how to read from and write to text files. It will also
    cover file encryption and checksums.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Show how to write out a file using the redirection operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show how to read a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how the output from a command can be captured and used in a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go over `cat` and other important commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cover file encryption and checksum programs such as sum and OpenSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We showed in some of the previous chapters how to create and write files by
    using the redirection operator. To recap, this command will create the file `ifconfig.txt`
    (or overwrite the file if it already exists):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will append to any previous file or create a new one
    if it does not already exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the previous scripts used the back-tick operator to retrieve the data
    from a file. Let''s recap by looking at *Script 1*:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 1](img/B07040_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is pretty straight forward. It removes the file (silently) if it exists,
    and then outputs each line to the file, incrementing `x` each time. When `x` gets
    to `10` the loop terminates.
  prefs: []
  type: TYPE_NORMAL
- en: Reading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s look again at the method the backup scripts in the last chapter
    used to get the value from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the screenshot for *Script 2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 2](img/B07040_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We start by setting the `FN` variable to the name of the file (`filenum1.txt`).
    It is displayed by the `cat` command and then the contents of the file are assigned
    to the `count` variable. It is displayed and then incremented by 1\. The new value
    is written back to the file and then it is displayed again. Run this one at least
    6 times to see how it wraps around.
  prefs: []
  type: TYPE_NORMAL
- en: This is just one simple way to create and read a file. Now let's look at a script
    that reads several lines from a file. It will use the file `file1.txt` that was
    created by the preceding *Script 1*.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 3](img/B07040_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The structure here may look a little strange as it is rather different from
    what we have seen before. This script uses the `read` command to get each line
    of the file. In the statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `IFS=` (**Internal Field Separator**) prevents `read` from trimming leading
    and trailing whitespace characters. The `-r` parameter to read causes backslash
    escape sequences to be ignored. The next line uses the redirection operator to
    enable `file1.txt` as the input for `read`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot of new material here and so look this over carefully until you
    get comfortable with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a slight flaw in the above script. If the file does not exist an error
    will occur. Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 3](img/B07040_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shell scripts are interpreted, meaning each line is examined and run by the
    system one at a time. This is different from say a program written in the C language
    which is compiled. This means any syntax errors will appear during the compile
    stage and not when the program is run. We will discuss how to avoid most shell
    scripting syntax errors in [Chapter 9](ch09.html "Chapter 9. Debugging Scripts"),
    *Debugging scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is *Script 4* with a solution to the missing file problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 4](img/B07040_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keep this in mind when using files and always check to make sure the file exists
    before trying to read it.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This next script reads a text file and creates a copy of it:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the screenshot for *Script 5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 5](img/B07040_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This shows how to read and write a text file in a script. The following explains
    each line:'
  prefs: []
  type: TYPE_NORMAL
- en: The script starts by checking if two parameters were given and if not the `Usage`
    message is displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It then checks if the input file exists and exits with code `100` if it does
    not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A check is made to insure the user is not trying to copy to the same file, because
    a syntax error at line 34 would have occurred. This code insures that will not
    happen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output file is removed if it exists. This is because we want to copy to
    a new file and not append to an existing one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `while` loop reads and writes the lines. A count is made of the number of
    lines in `x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the loops ends the number of lines is output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a sanity check, the `diff` command is used to make sure the files are the
    same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And as an added check the `sum` command is run on the two files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing files interactively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This next script is similar to one in Chapter 5, Creating Interactive Scripts.
    It reads the file specified, displays a form, and allows the user to edit and
    then save it:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what this looks like on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 6](img/B07040_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a description of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that gets set up in this script is a trap of *Ctrl* + *C* which
    causes the file to be saved and the script to end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subroutines are defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getdata` routine is used to read the user input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `savefile` routine writes out the data array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getfile` routine reads the file, if it exists, into the array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters are checked as one filename is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FN` variable is set to the name of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using arrays it's a good idea to have a set size, that is, `sizeofarray`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of the terminal is checked to make sure it is 25x80 (or 80x25 depending
    on your GUI).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `init` routine is called which sets up the screen array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The routines `getfile` and `drawscreen` are called.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getdata` routine is used to move the cursor and get the data from the fields
    into the proper array location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *C* is used to save the file and terminate the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example of how a simple screen input/output routine can be developed
    in Bash. This script could use a few refinements, here is a partial list:'
  prefs: []
  type: TYPE_NORMAL
- en: Check an existing file for a specific header. This could help insure the file
    is in the correct format and avoid a syntax error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the input file to make sure it is text and not binary. Hint: Use the
    file and `grep` commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the file cannot be written out properly make sure to catch the error gracefully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File checksums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably noticed the use of the `sum` command above. It displays the checksum
    and block count of files which can be used to determine if two or more files are
    the same file (that is, have the exact same contents).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a real world example:'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you are writing a book, and the files are being sent from the author
    to the publisher for review. The publisher makes some revisions and then sends
    the revised file back to the author. It is sometimes easy to get out of sync,
    and receive a file that doesn't look any different. If you run the `sum` command
    against the two files you can easily determine if they are the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File checksums](img/B07040_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first column is the checksum and the second column is the block count. If
    both of these are the same that means the contents of the files are identical.
    So, in this example bookfiles 1, 2, and 4 are the same. Bookfiles 3 and 5 are
    also the same. However, bookfiles 6, 7, and 8 don't match up with anything, and
    the last two don't even have the same block count.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The `sum` command only looks at the contents and block count of the files.
    It does not look at the filename or other file attributes such as ownership or
    permissions. To do that you could use the `ls` and `stat` commands.'
  prefs: []
  type: TYPE_NORMAL
- en: File encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times you might want to encrypt some important and/or confidential
    files on your system. Some people store their passwords in a file on their computers,
    this is probably okay but only if some type of file encryption is being used.
    There are many encryption programs available, here we will show OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSSL command line tool is very popular and is most likely already installed
    on your computer (it came by default on my CentOS 6.8 systems). It has several
    options and methods of encryption, however we will cover just the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `file1.txt` again from above try the following on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File encryption](img/B07040_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We start by performing a sum on the `file1.txt` file, then run `openssl`. Here
    is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enc`: specify which encoding to use, in this case it''s `aes-256-cbc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-in`: the input file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-out`: the output file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: decrypt'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After running the `openssl` command we perform an `ls -la` to verify that the
    output file was indeed created.
  prefs: []
  type: TYPE_NORMAL
- en: We then decrypt the file. Note the order of the files and the addition of the
    `-d` parameter (to decrypt). We do another sum to verify that the resulting file
    is the same as the original.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since there is no way I am going to type that all the time let''s write a quick
    script to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 - Script 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 7 - Script 7](img/B07040_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is obviously a lot easier than typing (or trying to remember) the syntax
    for openssl. As you can see the resulting decrypted file (`file2.txt`) is the
    same as the `file1.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we showed how to write out a file using the redirection operator
    and how to read a file using the (properly formatted) `read` command. Converting
    the contents of a file into a variable was covered as was the use of checksums
    and file encryption.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will look at some utilities that can be used to gather
    information from web pages on the Internet.
  prefs: []
  type: TYPE_NORMAL
