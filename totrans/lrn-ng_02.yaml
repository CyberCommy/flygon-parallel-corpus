- en: IDEs and Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving on with our journey through Angular, it's time to take a look
    at IDEs. Our favorite code editor can become an unparalleled ally when it comes
    to undertaking an agile workflow entailing TypeScript compilation at runtime,
    static type checking and introspection, and code completion and visual assistance
    for debugging and building our app. That being said, let's highlight some major
    code editors and take a bird's eye view of how each one of them can assist us
    when developing Angular applications. If you're just happy with triggering the
    compilation of your TypeScript files from the command line and do not want to
    have visual code assistance, feel free to skip to the next section. Otherwise,
    jump straight to the following section that covers the IDE of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: The most common editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring plugins that will boost your productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about snippets that will make you an ever faster coder by providing
    you with ready-made code for the most common scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **Integrated Development Environment** (**IDE**) is the term we use for something
    that is more powerful than Notepad or a simple editor. Writing code means we have
    different requirements than if we were to write an essay. The editor needs to
    be able to indicate when we type something wrong, provide us with insights about
    our code, or preferably give us a so called auto completion that will give us
    a list of methods once we start typing its beginning letter. A coding editor can
    and should be your best friend. For frontend development, there are a lot of great
    choices out there and no environment is really better than the other; it depends
    on what works best for you. Let's embark on a journey of discovery and we will
    let you be the judge on what environment will best suit you.
  prefs: []
  type: TYPE_NORMAL
- en: Atom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developed by GitHub, the highly customization environment and ease of installation
    of new packages has turned Atom into the IDE of choice for a lot of people.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to optimize your experience with TypeScript when coding Angular apps,
    you need to install the Atom TypeScript package. You can install via the APM CLI
    or just use the built-in package installer. The functionalities included are pretty
    much the same as we have in Sublime after installing the Microsoft package: automatic
    code hints, static type checking, code introspection, or automatic build upon
    save to name a few. On top of that, this package also includes a convenient built-in `tsconfig.json` generator.'
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is probably one of the most widespread code editors nowadays, although
    it has lost some momentum lately with users favoring other rising competitors
    such as GitHub's very own Atom. If this is your editor of choice, we will assume
    that it's already installed on your system and you also have Node (which is obvious,
    otherwise, you could have not installed TypeScript in the first place through
    NPM). In order to provide support for TypeScript code editing, you need to install
    Microsoft's TypeScript plugin, available at [https://github.com/Microsoft/TypeScript-Sublime-Plugin](https://github.com/Microsoft/TypeScript-Sublime-Plugin).
    Please refer to this page to learn how to install the plugin and all the shortcuts
    and key mappings.
  prefs: []
  type: TYPE_NORMAL
- en: Once successfully installed, it only takes *Ctrl* + Space Bar to display code
    hints based on type introspection. On top of that, we can trigger the build process
    and compile the file to the JavaScript we are working on by hitting the *F7* function
    key. Real-time code error reporting is another fancy functionality you can enable
    from the command menu.
  prefs: []
  type: TYPE_NORMAL
- en: Webstorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This excellent code editor supplied by IntelliJ is also a great pick for coding
    Angular apps based on TypeScript. The IDE comes with built-in support for TypeScript
    out of the box so that we can start developing Angular components from day one.
    WebStorm also implements a built-in transpiler with support for file watching,
    so we can compile our TypeScript code into pure vanilla JavaScript without relying
    on any third-party plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio Code, a code editor backed by Microsoft, is gaining momentum as
    a serious contender in the Angular medium, mostly because of its great support
    for TypeScript out of the box. TypeScript has been, to a greater extent, a project
    driven by Microsoft, so it makes sense that one of its popular editors was conceived
    with built-in support for this language. This means that all the nice features
    we might want are already baked in, including syntax and error highlighting and
    automatic builds.
  prefs: []
  type: TYPE_NORMAL
- en: What really makes Visual Studio so great is not only its design and ease of
    use, but also the access to a ton of plugins and there are some great ones for
    Angular development, so let's look at the leading ones.
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular language service**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/beaf36e8-c44d-498b-8ad7-b4aad4192b3e.png)'
  prefs: []
  type: TYPE_IMG
- en: By looking for `Angular language`, you are able to get a list of plugins matching
    it. Install the one on top.
  prefs: []
  type: TYPE_NORMAL
- en: 'After having done so, you will have enriched Visual Studio Code with:'
  prefs: []
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AOT diagnostic messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just to demo its ability, let''s add a description field to our code like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/be374058-91ea-4410-9697-71da7b955bdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now edit our template and realize we have code completion in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/11f0c2af-6656-4b10-9e2c-401c1e3c6259.png)'
  prefs: []
  type: TYPE_IMG
- en: As we start to type a visual indicator shows and gives us the option to complete
    the word for us, if we select the suggested text. Another powerful feature that
    is supported is the ability to hover over a field name, clicking it and be taken
    to the component class it belongs to. This makes it very easy to quickly look
    up a definition. This is known as a *go to definition* feature. To use said feature
    you just need to hover over the name and, on a Mac, hold down the command button.
    Very easy, and very powerful, as stated earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '**Typescript Hero**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac5874d4-f448-4ae9-a9d1-f214eb4f512d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use this plugin, simply start coding like this, and click the lightbulb
    icon to the left to have your imports automatically added to your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/091d180e-eca9-4722-98a6-5baa9654f2c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Having decent code completion and imports is a must unless you like to wear
    out your fingers. There are also snippets and pieces of code that will make your
    coding even faster.
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular 5 Typescript snippets (Dan Wahlin, John Papa)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1e3ff62-892e-4db0-a780-b71714421b7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a really powerful plugin. It comes with three different types of snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RxJS snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It works the following way. Type a snippet shortcut, and press *Enter* when
    asked to and the code will be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Pressing *Enter* will result in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you get a ton of code for almost no effort. There are 42 snippets
    in total and they are all listed in the plugin description in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: There are a ton more plugins, but these will make a real difference starting
    out. It's all about being productive, not spending your time entering unnecessary
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The point of this chapter has been to try to empower you as a software developer.
    There are many choices for editors, some of which we have chosen to cover in more
    detail. There are also many plugins and snippets that save quite a few keystrokes.
    At the end of the day, your focus and energy should be spent on solving the problem
    and structuring your solution, not making your fingers tired. There are of course
    many more plugins, snippets, and shortcuts that you can download, but these are
    a very good start. We encourage you to learn more about your editor and its possibilities,
    because this will make you faster and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn all about Typescript, everything from the
    basics to the professional level. The chapter will cover what problems are solved
    by introducing types, but also the language construct itself. Typescript, as a
    superset of JavaScript, contains a lot of powerful concepts and marries really
    well with the Angular Framework, as you are about to discover.
  prefs: []
  type: TYPE_NORMAL
