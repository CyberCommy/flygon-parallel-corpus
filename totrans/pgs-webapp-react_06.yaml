- en: Completing Our App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to finish up the prototype of our application, and boy, do we have
    our work cut out for us.
  prefs: []
  type: TYPE_NORMAL
- en: The skeleton is in place, with all our routes set up and our login screen fully
    complete. However, our chat and user views are blank as of yet, and that's where
    the core functionality of Chatastrophe will live. So, before we show our prototype
    to the board, let's make it actually, uh, work.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we''ll be covering this chapter is as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading and displaying chat messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending and receiving new messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying only certain chat messages on the user profile page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React state management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User stories progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's briefly check in with the user stories we defined in Chapter 1, *Creating
    Our App Structure,* and see which ones we have already accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve completed the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Users should be able to log in and out of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are unfinished, but are part of the PWA functionality we''ll
    build later:'
  prefs: []
  type: TYPE_NORMAL
- en: Users should be able to view their messages even when offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should receive push notifications when a message is sent by another user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should be able to install the app to their mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should be able to load the app in under five seconds, even under shaky
    network conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That leaves us with a list of stories we need to complete before our prototype
    is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: Users should be able to send and receive messages in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should be able to view all messages by a given author
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these stories fit with a certain view (Chat view and User view). Let's
    start with the `ChatContainer`, and begin building out our chat box.
  prefs: []
  type: TYPE_NORMAL
- en: ChatContainer skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our chat view will have two main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: A message display where all chats are listed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A chat box for the user to type in a new message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can start by adding the appropriate `div` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Reminder to ensure that your IDs and classNames are the same as mine, lest your
    CSS be different (or even worse).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll fill in the input box first. Inside `div#chat-input`, let''s place a
    `textarea`, with a placeholder of `"Add your message…”`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will configure it to allow the user to press *Enter* to send a message,
    but it''s better to also have a Send button. Below the `textarea`, add a `button`,
    and inside that, we''ll add an `SVG` icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that your `path fill` and `svg viewBox` properties are the same as mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: SVGs are a type of image that can be scaled (made larger) without any loss of
    quality. In this case, we're essentially creating a box (the `svg` tag) and then
    drawing a line within the `path` tag. The browser does the actual drawing, so
    there's never any pixelation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also give our `div#ChatContainer` the class of `inner-container` for
    CSS purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If all went well, your app should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This does it for the basic structure of our chat view. Now, we can start discussing
    how we will manage our data--the list of messages coming in from Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Managing data flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the important principles of React is something called **uni-directional
    data flow**.
  prefs: []
  type: TYPE_NORMAL
- en: In the prototypical React app, data is stored in the state of the highest-level
    component, and passed **down** to lower-level components via `props`. When the
    user interacts with the application, the interaction event is passed **up** through
    the component tree via props, until it arrives at the highest-level component,
    which then modifies the state based on the action.
  prefs: []
  type: TYPE_NORMAL
- en: The application then forms a big circle--data goes down, events come up, and
    new data goes down. You can also think of it as an elevator, departing from the
    top floor full of data, and then coming back up full of events.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of this approach is that it's easy to follow the flow of data.
    You can see where it's going (to which child components), and why it's changing
    (in reaction to which events).
  prefs: []
  type: TYPE_NORMAL
- en: Now, this model runs into problems with a complex application with hundreds
    of components. It becomes unwieldy to store all your state in the top-level component,
    and pass all your data and events through props.
  prefs: []
  type: TYPE_NORMAL
- en: Think of a big chain from your top-level component (`App.js`) and a low-level
    component (say, a `button`). If there are dozens of `nested` components, and the
    `button` needs a prop that is derived from the state of `App`, you will have to
    pass that prop down through every single component in the chain. No thanks.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous solutions to this problem of state management, but most work
    on the idea of creating container components throughout the component tree; these
    components have state, and pass it down to a limited number of child components.
    Now we have multiple elevators, some serving the first to third floor, others
    the fifth to twelfth, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t be dealing with any state management in our application since we only
    have four components, but it’s good to keep this in mind as your React app scales.
  prefs: []
  type: TYPE_NORMAL
- en: The top two React state management libraries are Redux ([https://github.com/reactjs/redux](https://github.com/reactjs/redux))
    and MobX ([https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)). I've
    worked extensively with both, and both have their advantages and tradeoffs. In
    short, MobX is better for developer productivity, while Redux is better for keeping
    large applications organized.
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes, we can store all our state in our `App` component, and pass
    it down to our child components. Rather than storing our messages in `ChatContainer`,
    we store them in `App` and pass them down to `ChatContainer`. This immediately
    gives us the advantage of also passing them down to `UserContainer`.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, our messages live in the state of `App`, and are shared with
    `UserContainer` and `ChatContainer` via `props`.
  prefs: []
  type: TYPE_NORMAL
- en: 'State is the single source of truth in your application, and should never be
    duplicated. It won''t make sense to store two message arrays: one in `ChatContainer`
    and one in `UserContainer`. Instead, store state as high as necessary, and pass
    it down.'
  prefs: []
  type: TYPE_NORMAL
- en: Long story short, we need to load our messages in `App`, and then pass them
    down to `ChatContainer`. It also makes sense to put `App` in charge of sending
    the messages so that all our message functionality is in one place.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with sending our first message!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in our `LoginContainer`, we need to store the value of our `textarea` in
    state as it changes.
  prefs: []
  type: TYPE_NORMAL
- en: We used the state of the `LoginContainer` to store that value. Let's do the
    same with `ChatContainer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be wondering, after the preceding discussion: why don''t we just keep
    all our state in `App`? Some will argue for that approach, to keep everything
    in one place; however, this will bloat our `App` component and require us to pass
    multiple `props` between components. It''s better to keep state as high as necessary,
    and no higher; the new message in the chat input will only be relevant to `App`
    when it''s done and submitted, not before that.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's get that set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this to the `ChatContainer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add a method to handle it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, modify our `textarea`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Best practices say that you should always make your JSX element multiline when
    it has more than two `props` (or the `props` are particularly long).
  prefs: []
  type: TYPE_NORMAL
- en: 'When our user clicks on Send, we want to send the message to `App`, which will
    then send it to Firebase. After that, we reset the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We haven''t added this `onSubmit` prop function yet in `App`, but we can do
    that soon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: However, we also want to let users submit by pressing *Enter*. How can we do
    so?
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, we listen for the change event on the `textarea`, and then call
    the `handleInputChange` method. The prop on `textarea` that listens for changes
    in its value is `onChange`, but there's another event, key-down, which occurs
    whenever the user presses a key.
  prefs: []
  type: TYPE_NORMAL
- en: We can watch for that event and then check what key was pressed; if it's *Enter*,
    we send our message!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the handler for this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The event handler (`handleKeyDown`) is called with an event passed in as the
    first argument automatically. This event has a property named `key`, which is
    a string indicating the value of the key. We also need to prevent the default
    behavior (creating a newline in the `textarea`) before submitting the message.
  prefs: []
  type: TYPE_NORMAL
- en: You can use this kind of event listener for all sorts of user inputs, from hovering
    over an element to shift-clicking something.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move to `App.js`, here''s the current state of `ChatContainer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, let''s add the last link in the chain to create a message. In `App.js`,
    we need to add a handler for the `onSubmit` event, which we''ll pass in as a prop
    to `ChatContainer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to pass an `onSubmit` prop to `ChatContainer` that equals this method,
    but wait a second, our `ChatContainer` is currently rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`ChatContainer` itself is a prop on our `Route`. How can we give `ChatContainer`
    any `props` at all?'
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that the React Router provides three distinct methods of rendering
    components inside `Route`. The simplest way is the route (ha ha) we chose earlier,
    passing it in as a prop called `component`.
  prefs: []
  type: TYPE_NORMAL
- en: There's another, better way for our purposes--a prop called `render`, into which
    we pass a function that returns our component.
  prefs: []
  type: TYPE_NORMAL
- en: The third way to render a component inside `Route` is via a prop called `children`,
    which takes a function with a `match` argument, which is either defined or null,
    depending on whether the `path` prop matches the browser's URL. The JSX returned
    by the function is always rendered, but you can modify it based on the `match`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s switch our `Route` over to this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example uses an ES6 arrow function with implicit return. This
    is the same as writing `() => { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }` or, in ES5, `function() { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can pass all the props we like to `ChatContainer`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's ensure that it works. Try sending a message, and ensure that you see the
    `console.log` we added in `handleSubmit` in `App.js`.
  prefs: []
  type: TYPE_NORMAL
- en: If so, great! Time to move on to the good part--actually sending the message.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a message to Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To write to the Firebase database, first we grab an instance of it, with `firebase.database()`.
    Similar to `firebase.auth()`, this instance comes with some built-in methods we
    can use.
  prefs: []
  type: TYPE_NORMAL
- en: The one we will be dealing with in this book is `firebase.database().ref(refName)`.
    `Ref` stands for **reference**, but might be better thought of as a category of
    our data (in SQL databases, what might make up a table).
  prefs: []
  type: TYPE_NORMAL
- en: If we want to grab the reference to our users, we use `firebase.database().ref(‘/users’)`.
    For messages, it’s `firebase.database().ref(‘/messages’)`... and so on. We can
    now act on this reference in a variety of ways, such as listening to changes (coming
    later in the chapter), or pushing new data in (which we'll handle right now).
  prefs: []
  type: TYPE_NORMAL
- en: To add new data to a reference, you use `firebase.database().ref(‘/messages’).push(data)`.
    In this context, it is useful to think of the `ref` as a simple JavaScript array,
    which we're pushing new data into.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase will take it from there, saving the data to the NoSQL database and
    pushing out a 'value' event to all instances of the application, which we’ll tap
    into later.
  prefs: []
  type: TYPE_NORMAL
- en: Our message data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to save the message text to the database, of course, but we also want
    to save a bit more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our users need to be able to see who sent the message (preferably, an email
    address), and be able to navigate to their `users/:id` page. So, we need to save
    the email address of the author with the message as well as a unique user ID.
    Let''s throw in a `timestamp` for good measure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example uses ES6’s property shorthand for the message field.
    Instead of writing `{ msg: msg }`, we can simply write `{ msg }`.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we're taking advantage of the fact that we saved the current user into
    the state of our `App` component, and grabbing the email and the uid (a unique
    ID) from it. Then, we create a `timestamp` with `Date.now()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s send it off!:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Before we test it, let's open our Firebase console at [console.firebase.google.com](http://console.firebase.google.com)
    and go to the database tab. Here, we can see a real-time representation of our
    database data, so we can check to ensure that our message is being created correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of now, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's type a message into our chat input, and press **Enter**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following instantly appear on the Firebase console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Great! We sent our first chat messages, but nothing appears in our app. Let's
    fix that.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data from Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we described earlier, we can listen for changes to a particular reference
    in our database. In other words, we can define a function to run every time `firebase.database().ref(‘/messages’)`
    changes, as a new message comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, I''d encourage you to consider two things: where we should
    define this listener, and what the function should do.'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can come up with a possible implementation! After you've brainstormed
    an idea, let's build it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the thing: we already have a very similar case in our application.
    Our `firebase.auth().onAuthStateChanged` in our `App#componentDidMount` listens
    for changes in our current user, and updates the `state.user` of our `App`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do the exact same thing with our messages reference, though the syntax
    is a bit different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `.on` function to listen for a `''value''` event from the database.
    Our callback is then called with an argument called `snapshot`. Let''s plug this
    in and send another message, and take a look at what our snapshot looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ah, it's not very developer friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The snapshot is, somewhere in that object, an image of the database structure
    of `/messages`. We can access a more readable form by calling `val()` on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can get an object that contains each of our messages, with the message
    ID as the keys.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we need to do some trickery. We want to update our `state.messages` with
    an array of our messages, but we want to add the message ID to the message object
    (since the message ID is currently the key in the `snapshot.val()`).
  prefs: []
  type: TYPE_NORMAL
- en: If this sounds confusing, hopefully it'll be clearer when we see it in action.
    We will create a new array called `messages`, and iterate over our object (using
    a method called `Object.keys`) and then push the message (with the ID) into the
    new array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extract this to a new function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'What we end up with, in our `console.log`, is a nice array of messages with
    IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step is to save this to state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can pass our messages down to `ChatContainer`, and get to work displaying
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve made a lot of changes to `App.js`. Here''s the current code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Displaying our messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the `Array.map()` function to iterate over our array of messages,
    and create an array of divs to display the data.
  prefs: []
  type: TYPE_NORMAL
- en: '`Array.map()` automatically returns an array, which means we can embed that
    functionality right into our JSX. This is a common pattern in React (usually for
    displaying collections of data like this), so it''s worth watching closely.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our `message-container`, we create opening and closing squiggly brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we call `map` on our message array, and pass in a function to create
    the new message `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should see the following, with all the messages you''ve
    sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can even try writing a new message, and watch it instantly appear in the
    message container. Magic!
  prefs: []
  type: TYPE_NORMAL
- en: 'A few notes about the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `map` function goes over each element in the messages array, and creates
    a `div` based on its data. When it's done iterating, it returns that array of
    divs, which is then displayed as part of our JSX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the quirks of React is that each element on the screen needs a unique
    identifier so that React can update it properly. That's hard for React to do when
    dealing with a collection of the same elements, as we are creating here. Thus,
    we have to give each message div a key prop that is guaranteed to be unique.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on lists and keys, visit [https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a bit more functionality, and display the author name below the
    message, with a link to their user page. We can use the React Router `Link` component
    to do so; it’s similar to an anchor tag (`<a>`), but is optimized for React Router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add it in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00046.jpeg)The `to` prop on the `Link` uses ES6 string interpolation.
    If you wrap your string in backticks ([PRE28]'
  prefs: []
  type: TYPE_NORMAL
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: exact
  prefs: []
  type: TYPE_NORMAL
- en: path="/"
  prefs: []
  type: TYPE_NORMAL
- en: render={() => (
  prefs: []
  type: TYPE_NORMAL
- en: <ChatContainer
  prefs: []
  type: TYPE_NORMAL
- en: onSubmit={this.handleSubmitMessage}
  prefs: []
  type: TYPE_NORMAL
- en: user={this.state.user}
  prefs: []
  type: TYPE_NORMAL
- en: messages={this.state.messages}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map(msg => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email === msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p className="author">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map(msg => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email === msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: '// Only if the next message''s author is NOT the same as this message''s    author,
    return the following:      <p className="author">'
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map((msg, i) => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email === msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: '{(!this.props.messages[i + 1] ||'
  prefs: []
  type: TYPE_NORMAL
- en: this.props.messages[i + 1].author !== msg.author) && (
  prefs: []
  type: TYPE_NORMAL
- en: <p className="author">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map((msg, i) => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email === msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: getAuthor = (msg, nextMsg) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!nextMsg || nextMsg.author !== msg.author) {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <p className="author">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: export default class ChatContainer extends Component {
  prefs: []
  type: TYPE_NORMAL
- en: 'state = { newMessage: '''' };'
  prefs: []
  type: TYPE_NORMAL
- en: componentDidMount() {
  prefs: []
  type: TYPE_NORMAL
- en: this.scrollToBottom();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: scrollToBottom = () => {
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: componentDidUpdate(previousProps) {
  prefs: []
  type: TYPE_NORMAL
- en: if (previousProps.messages.length !== this.props.messages.length) {
  prefs: []
  type: TYPE_NORMAL
- en: this.scrollToBottom();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: id="message-container"
  prefs: []
  type: TYPE_NORMAL
- en: ref={element => {
  prefs: []
  type: TYPE_NORMAL
- en: this.messageContainer = element;
  prefs: []
  type: TYPE_NORMAL
- en: '}}>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: import ReactDOM from 'react-dom';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: scrollToBottom = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: scrollToBottom = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  prefs: []
  type: TYPE_NORMAL
- en: if (messageContainer) {
  prefs: []
  type: TYPE_NORMAL
- en: messageContainer.scrollTop = messageContainer.scrollHeight;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: // Beginning of ChatContainer
  prefs: []
  type: TYPE_NORMAL
- en: <Header>
  prefs: []
  type: TYPE_NORMAL
- en: <button className="red" onClick={this.handleLogout}>
  prefs: []
  type: TYPE_NORMAL
- en: Logout
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </Header>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messagesLoaded ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: id="message-container"
  prefs: []
  type: TYPE_NORMAL
- en: ref={element => {
  prefs: []
  type: TYPE_NORMAL
- en: this.messageContainer = element;
  prefs: []
  type: TYPE_NORMAL
- en: '}}>'
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map((msg, i) => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email === msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="loading-container">
  prefs: []
  type: TYPE_NORMAL
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: <div id="chat-input">
  prefs: []
  type: TYPE_NORMAL
- en: // Rest of ChatContainer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: class App extends Component {
  prefs: []
  type: TYPE_NORMAL
- en: 'state = { user: null, messages: [], messagesLoaded: false };'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: componentDidMount() {
  prefs: []
  type: TYPE_NORMAL
- en: firebase.auth().onAuthStateChanged(user => {
  prefs: []
  type: TYPE_NORMAL
- en: if (user) {
  prefs: []
  type: TYPE_NORMAL
- en: this.setState({ user });
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: this.props.history.push('/login');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: firebase
  prefs: []
  type: TYPE_NORMAL
- en: .database()
  prefs: []
  type: TYPE_NORMAL
- en: .ref('/messages')
  prefs: []
  type: TYPE_NORMAL
- en: .on('value', snapshot => {
  prefs: []
  type: TYPE_NORMAL
- en: this.onMessage(snapshot);
  prefs: []
  type: TYPE_NORMAL
- en: if (!this.state.messagesLoaded) {
  prefs: []
  type: TYPE_NORMAL
- en: 'this.setState({ messagesLoaded: true });'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: <Route exact path="/" render={() => (
  prefs: []
  type: TYPE_NORMAL
- en: <ChatContainer
  prefs: []
  type: TYPE_NORMAL
- en: messagesLoaded={this.state.messagesLoaded}
  prefs: []
  type: TYPE_NORMAL
- en: onSubmit={this.handleSubmitMessage}
  prefs: []
  type: TYPE_NORMAL
- en: messages={this.state.messages}
  prefs: []
  type: TYPE_NORMAL
- en: user={this.state.user} />
  prefs: []
  type: TYPE_NORMAL
- en: )} />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: import React, { Component } from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: import { Link } from 'react-router-dom';
  prefs: []
  type: TYPE_NORMAL
- en: import ReactDOM from 'react-dom';
  prefs: []
  type: TYPE_NORMAL
- en: import Header from './Header';
  prefs: []
  type: TYPE_NORMAL
- en: export default class ChatContainer extends Component {
  prefs: []
  type: TYPE_NORMAL
- en: 'state = { newMessage: '''' };'
  prefs: []
  type: TYPE_NORMAL
- en: componentDidMount() {
  prefs: []
  type: TYPE_NORMAL
- en: this.scrollToBottom();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: componentDidUpdate(previousProps) {
  prefs: []
  type: TYPE_NORMAL
- en: if (previousProps.messages.length !== this.props.messages.length) {
  prefs: []
  type: TYPE_NORMAL
- en: this.scrollToBottom();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: scrollToBottom = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  prefs: []
  type: TYPE_NORMAL
- en: if (messageContainer) {
  prefs: []
  type: TYPE_NORMAL
- en: messageContainer.scrollTop = messageContainer.scrollHeight;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: handleLogout = () => {
  prefs: []
  type: TYPE_NORMAL
- en: firebase.auth().signOut();
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: handleInputChange = e => {
  prefs: []
  type: TYPE_NORMAL
- en: 'this.setState({ newMessage: e.target.value });'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: handleSubmit = () => {
  prefs: []
  type: TYPE_NORMAL
- en: this.props.onSubmit(this.state.newMessage);
  prefs: []
  type: TYPE_NORMAL
- en: 'this.setState({ newMessage: '''' });'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: handleKeyDown = e => {
  prefs: []
  type: TYPE_NORMAL
- en: if (e.key === 'Enter') {
  prefs: []
  type: TYPE_NORMAL
- en: e.preventDefault();
  prefs: []
  type: TYPE_NORMAL
- en: this.handleSubmit();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: getAuthor = (msg, nextMsg) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!nextMsg || nextMsg.author !== msg.author) {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <p className="author">
  prefs: []
  type: TYPE_NORMAL
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  prefs: []
  type: TYPE_NORMAL
- en: </p>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: render() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div id="ChatContainer" className="inner-container">
  prefs: []
  type: TYPE_NORMAL
- en: <Header>
  prefs: []
  type: TYPE_NORMAL
- en: <button className="red" onClick={this.handleLogout}>
  prefs: []
  type: TYPE_NORMAL
- en: Logout
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </Header>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messagesLoaded ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: id="message-container"
  prefs: []
  type: TYPE_NORMAL
- en: ref={element => {
  prefs: []
  type: TYPE_NORMAL
- en: this.messageContainer = element;
  prefs: []
  type: TYPE_NORMAL
- en: '}}>'
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map((msg, i) => ('
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: key={msg.id}
  prefs: []
  type: TYPE_NORMAL
- en: className={`message ${this.props.user.email ===
  prefs: []
  type: TYPE_NORMAL
- en: msg.author &&
  prefs: []
  type: TYPE_NORMAL
- en: '''mine''}`}>'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ))}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="loading-container">
  prefs: []
  type: TYPE_NORMAL
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: <div id="chat-input">
  prefs: []
  type: TYPE_NORMAL
- en: <textarea
  prefs: []
  type: TYPE_NORMAL
- en: placeholder="Add your message..."
  prefs: []
  type: TYPE_NORMAL
- en: onChange={this.handleInputChange}
  prefs: []
  type: TYPE_NORMAL
- en: onKeyDown={this.handleKeyDown}
  prefs: []
  type: TYPE_NORMAL
- en: value={this.state.newMessage}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <button onClick={this.handleSubmit}>
  prefs: []
  type: TYPE_NORMAL
- en: <svg viewBox="0 0 24 24">
  prefs: []
  type: TYPE_NORMAL
- en: <path fill="#424242"
  prefs: []
  type: TYPE_NORMAL
- en: d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
  prefs: []
  type: TYPE_NORMAL
- en: </svg>
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: <Route
  prefs: []
  type: TYPE_NORMAL
- en: path="/users/:id"
  prefs: []
  type: TYPE_NORMAL
- en: render={({ history, match }) => (
  prefs: []
  type: TYPE_NORMAL
- en: <UserContainer
  prefs: []
  type: TYPE_NORMAL
- en: messages={this.state.messages}
  prefs: []
  type: TYPE_NORMAL
- en: messagesLoaded={this.state.messagesLoaded}
  prefs: []
  type: TYPE_NORMAL
- en: userID={match.params.id}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: <div id="UserContainer" className="inner-container">
  prefs: []
  type: TYPE_NORMAL
- en: <Header>
  prefs: []
  type: TYPE_NORMAL
- en: <Link to="/">
  prefs: []
  type: TYPE_NORMAL
- en: <button className="red">Back To Chat</button>
  prefs: []
  type: TYPE_NORMAL
- en: </Link>
  prefs: []
  type: TYPE_NORMAL
- en: </Header>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messagesLoaded ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Messages go here</h1>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="loading-container">
  prefs: []
  type: TYPE_NORMAL
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  prefs: []
  type: TYPE_NORMAL
- en: '&lt;/div>'
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '{this.props.messagesLoaded ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map(msg => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (msg.user_id === this.props.userID) {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div key={msg.id} className="message">
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="loading-container">
  prefs: []
  type: TYPE_NORMAL
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: export default class UserContainer extends Component {
  prefs: []
  type: TYPE_NORMAL
- en: renderedUserEmail = false;
  prefs: []
  type: TYPE_NORMAL
- en: render() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map(msg => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (msg.user_id === this.props.userID) {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div key={msg.id} className="message">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getAuthor(msg.author)}'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: getAuthor = author => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!this.renderedUserEmail) {
  prefs: []
  type: TYPE_NORMAL
- en: this.renderedUserEmail = true;
  prefs: []
  type: TYPE_NORMAL
- en: return <p className="author">{author}</p>;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: import React, { Component } from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: import { Link } from 'react-router-dom';
  prefs: []
  type: TYPE_NORMAL
- en: import Header from './Header';
  prefs: []
  type: TYPE_NORMAL
- en: export default class UserContainer extends Component {
  prefs: []
  type: TYPE_NORMAL
- en: renderedUserEmail = false;
  prefs: []
  type: TYPE_NORMAL
- en: getAuthor = author => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!this.renderedUserEmail) {
  prefs: []
  type: TYPE_NORMAL
- en: this.renderedUserEmail = true;
  prefs: []
  type: TYPE_NORMAL
- en: return <p className="author">{author}</p>;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: render() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div id="UserContainer" className="inner-container">
  prefs: []
  type: TYPE_NORMAL
- en: <Header>
  prefs: []
  type: TYPE_NORMAL
- en: <Link to="/">
  prefs: []
  type: TYPE_NORMAL
- en: <button className="red">Back To Chat</button>
  prefs: []
  type: TYPE_NORMAL
- en: </Link>
  prefs: []
  type: TYPE_NORMAL
- en: </Header>
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messagesLoaded ? ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="message-container">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.props.messages.map(msg => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (msg.user_id === this.props.userID) {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <div key={msg.id} className="message">
  prefs: []
  type: TYPE_NORMAL
- en: '{this.getAuthor(msg.author)}'
  prefs: []
  type: TYPE_NORMAL
- en: <p>{msg.msg}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: ') : ('
  prefs: []
  type: TYPE_NORMAL
- en: <div id="loading-container">
  prefs: []
  type: TYPE_NORMAL
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: )}
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's it! We've built our complete React application. Your friend is thrilled
    with the final product, but we're far from done.
  prefs: []
  type: TYPE_NORMAL
- en: We've built a web application. It looks pretty good, but it is not yet a progressive
    web app. There’s a lot more work to be done, but this is where the fun starts.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to start converting this app into a PWA. We'll start with looking
    at how we can make our web app more like a native app, and dive into one of the
    most exciting pieces of web technology of recent years--service workers.
  prefs: []
  type: TYPE_NORMAL
