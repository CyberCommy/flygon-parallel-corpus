- en: Running Docker in Public Clouds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using Digital Ocean to launch containers on a cloud-based
    infrastructure. In this chapter, we will look at using the tools provided by Docker
    to launch a Docker Swarm cluster in Amazon Web Services and also Microsoft Azure.
    We will then look at the container solutions offered by Amazon Web Services, Microsoft
    Azure, and Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon ECS and AWS Fargate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure App Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes in Microsoft Azure, Google Cloud, and Amazon Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using various cloud providers, so if you are following
    along, you will need active accounts with each. Again, the screenshots in this
    chapter will be from my preferred operating system, macOS. As before, the commands
    we will be running should work on all three of the operating systems we have targeted
    so far, unless otherwise stated.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be looking at some of the command-line tools provided by the cloud
    providers to help manage their services – this chapter does not serve as a detailed
    how-to guide for these tools, though, and links to documentation will be provided
    in the *Further reading* section in this chapter for more detailed usage guides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Se544n](http://bit.ly/2Se544n)'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start looking at other services, I thought it would be good to quickly
    discuss Docker Cloud as there are still a lot of references to the cloud management
    services that were once provided by Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Cloud was made up of several Docker services. These included SaaS offerings
    for building and hosting images, which was another one of the services offered application,
    node, and Docker Swarm cluster management. On May 21, 2018, all services that
    offered the management of remote nodes where closed down.
  prefs: []
  type: TYPE_NORMAL
- en: Docker recommended that Docker Cloud users who managed their nodes using this
    service should migrate those workloads to either Docker **Community Edition**
    (**CE**) or Docker **Enterprise Edition** (**EE**) and into the cloud of their
    own hardware. Docker also recommended the Azure Container Service and Google Kubernetes
    Engine.
  prefs: []
  type: TYPE_NORMAL
- en: So, for this reason, we will not be discussing any Docker hosted services in
    this chapter like we did in previous editions of *Mastering Docker*.
  prefs: []
  type: TYPE_NORMAL
- en: However, considering what we have discussed, the next section may seem a little
    confusing. While Docker has stopped all hosted cloud management services, it still
    provides tools to help you manage your Docker Swarm clusters in two of the major
    public cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker on-cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to look at the two templated cloud offerings from
    Docker. These both launch Docker Swarm clusters that have deep levels of integration
    with their target platforms, and have also been built with Docker best practices
    in mind. Let's look at the Amazon Web Services template first.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Community Edition for AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Community Edition for AWS (which we will call Docker for AWS from now
    on) is an Amazon CloudFormation template created by Docker that is designed to
    easily launch a Docker Swarm mode cluster in AWS with Docker best practices and
    recommendations applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**CloudFormation** is a service that''s offered by Amazon that allows you to
    define how you would like your infrastructure to look in a template file that
    can then be shared or brought under version control.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do – and it's also the only thing we need to configure
    ahead of launching Docker for AWS—is to ensure that we have an SSH key assigned
    to our account in the region we will be launching our cluster. To do this, log
    in to the AWS Console at [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    or your organization's custom sign-in page if you use one. Once logged in, go
    to the Service menu, which can be found in the top-left of the page, and find
    the **EC2** service.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that you are in your desired region, you can use the region switcher
    in the top right between your username and the support menu. Once you are in the
    right region, click on **Key Pairs**, which can be found under **Network & Security**
    in the left-hand menu. Once on the **Key Pairs** page, you should see a list of
    your current key pairs. If you have none listed or don't have access to them,
    you can either click on **Create Key Pair** or **Import Key Pair** and follow
    the onscreen prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker for AWS can be found in the Docker Store at [https://store.docker.com/editions/community/docker-ce-aws](https://store.docker.com/editions/community/docker-ce-aws).
    You have two choices of Docker for AWS: Stable and Edge version.'
  prefs: []
  type: TYPE_NORMAL
- en: The Edge version contains experimental features from upcoming versions of Docker;
    because of that, we are going to look at launching Docker for AWS (stable). To
    do that, just click on the button and you will be taken straight to CloudFormation
    in your AWS Console with the Docker template already loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the raw template, which is currently made up of 3,100 lines of
    code, by going to [https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl),
    or you can visualize the template in the CloudFormation designer. As you can see
    from the following visualization, there is a lot going on to launch the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/94c34f21-31ad-4493-900c-293d3dcf0cd2.png)'
  prefs: []
  type: TYPE_IMG
- en: The beauty of this approach is that you don't have to worry about any of these
    complications. Docker has you covered and has taken on all of the work of worrying
    about how to launch the aforementioned infrastructure and services away from you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in launching the cluster has already been sorted for you. All
    you have to do is click on **Next** on the **Select Template** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/efd42eec-ca73-40ba-a7f0-10dfade0ac1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up, we have to specify some details about our cluster. Other than the
    SSH key, we are going to be leaving everything at their default values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stack name**: `Docker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of Swarm managers**: `3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of Swarm worker nodes**: `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Which SSH key to use**: (Select your key from the list)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable daily resource cleanup**: No'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use CloudWatch for container logging**: Yes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create EFS prerequisites for CloudStore**: No'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swarm manager instance type**: t2.micro'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager ephemeral storage volume size**: 20'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager ephemeral storage volume type**: Standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent worker instance type**: t2.micro'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worker ephemeral storage volume size**: 20'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worker ephemeral storage volume type**: Standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable EBS I/O optimization?** No'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encrypt EFS objects?** False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have checked that everything is **OK**, click on the **Next** button.
    In the next step, we can leave everything as it is and click on the **Next** button
    to be taken to a review page. On the review page, you should find a link that
    gives you the estimated cost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d39ed962-001f-49a0-aa2a-210eb1bc50eb.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the monthly estimate for my cluster is $113.46.
  prefs: []
  type: TYPE_NORMAL
- en: I have had varying success with the Estimate cost link—it may not appear each
    time you launch the template—if it doesn't and you have answered the questions
    as per the preceding list, then your costs will be similar to that of mine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final thing you need to do before launching the cluster is to tick the
    box that says **I acknowledge that AWS CloudFormation might create IAM resources**
    and click on the **Create** button. As you can imagine, it takes a while to launch
    the cluster; you can check on the status of the launch by selecting your CloudFormation
    stack in the AWS Console and selecting the **Events** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a8a82d94-d51e-4d61-82d9-e7ca88708725.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After about 15 minutes, you should see the status change from **CREATE_IN_PROGRESS**
    to **CREATE_COMPLETE**. When you see this, click on the **Outputs** tab and you
    should see a list of URLs and links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/98e173dc-9ce2-48a0-9a5e-7e24156c1349.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To log in to our Swarm cluster, click on the link next to Managers to be taken
    to a list of EC2 instances, which are our manager nodes. Select one of the instances
    and then make a note of its public DNS address. In a terminal, SSH to the node,
    using docker as the username. For example, I ran the following commands to log
    in and get a list of all nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you downloaded your SSH key from the AWS Console when you added a key, you
    should update the preceding command to include the path to your download key,
    for example, `ssh -i /path/to/private.key docker@ec2-34-245-167-38.eu-west-1.compute.amazonaws.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding commands to log in and get a list of all nodes are shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9198f5ee-5731-4b5f-b733-78de04e63158.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you can treat it like any other Docker Swarm cluster. For example,
    we can launch and scale the cluster service by running these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that your service has been launched, you can view your application at the
    URL given as the **DefaultDNSTarget** in the **Outputs** tab of the CloudFormation
    page. This is an Amazon Elastic load balancer that has all of our nodes sat behind
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, my **DefaultDNSTarget** was `Docker-ExternalLoa-PCIAX1UI53AS-1796222965.eu-west-1.elb.amazonaws.com`.
    Putting this into my browser showed the clustered application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/80e2bf26-45b2-4e45-a601-073052f7e191.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have finished with your cluster, return to the CloudFormation page
    within the AWS Console, select your stack, and then select **Delete Stack** from
    the **Actions** drop-down menu. This will remove all traces of your Docker from
    the Amazon Web Services cluster and stop you from getting any unexpected charges.
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure that you check that there have not been any problems with the
    deletion of the stack—if this process encounters any problems, any resources that
    have been left behind will be charged for.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Community Edition for Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we have the Docker Community Edition for Azure, which I will refer
    to as Docker for Azure. This uses **Azure Resource Manager** (**ARM**) templates
    to define our Docker Swarm cluster. Using the ARMViz tool, we can visualize what
    the cluster will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3c55ee06-9812-4e68-9646-2f31719b7fac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it will launch VMs, load balancers with public IP addresses
    attached, and storage. Before we launch our cluster, we need to find a few bits
    of information about our Azure account:'
  prefs: []
  type: TYPE_NORMAL
- en: AD Service principle ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AD Service principle key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To generate the required information, we are going to use a helper script that
    runs inside of a container. To run the script, you will need admin access to a valid
    Azure subscription. To run the script, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you a URL, [https://microsoft.com/devicelogin](https://microsoft.com/devicelogin),
    and also a code to enter. Go to the URL and enter the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/72247725-713a-42ad-a02e-97369dde5f79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will log you in to your account on the command-line and ask you which
    of your subscriptions you would like to use. The full output of the helper script
    can be found in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e996f939-d086-454c-805a-eddb97d1e319.png)'
  prefs: []
  type: TYPE_IMG
- en: At the very end of the output is the information you need, so please make a
    note of it.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, there is a known issue of using the **Docker
    for Azure (Stable)** button on the Docker Community Edition for Azure page in
    the Docker Store. For now, we need to use an older version of the template. You
    can do this by using the following link: [https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2F18.03.0%2FDocker.tmpl](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2F18.03.0%2FDocker.tmpl).
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open up the Azure portal and present you with a screen where you
    need to enter several bits of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subscription**: Select the subscription you would like to use from the drop-down
    list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: Select the resource group you would like to use or create
    a new one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Select where you would like to launch you Docker Swarm cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ad Service Principle App ID**: This was generated by the helper script we
    just ran'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ad Service Principle App Secret**: This was generated by the helper script
    we just ran'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Ext Logs**: Yes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable System Prune**: No'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux SSH Public Key**: Enter the public portion of your local SSH key here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux Worker Count**: 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux Worker VM Size**: Standard_D2_v2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager Count**: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager VM Size**: Standard_D2_v2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swarm Name**: dockerswarm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agree to the terms and conditions and then click on the **Purchase** button
    at the bottom of the page. Once you view the progress of the launch by clicking
    on the Deployment in Progress link in the notification area on the top of the
    menu, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f8479606-7175-4d43-8c08-1cf260a92606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once completed, you will see several services listed under the resource group
    that you chose or created. One of these will be `dockerswarm-externalSSHLoadBalancer-public-ip`. Drill-down
    into the resource and you will be given the IP address that you can use to SSH
    into your Swarm Manager. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using port 5000 rather than the standard port 22\. You should
    see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e2bf3c3a-b3ce-4fef-b867-45ca8f93d88d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are logged in to the manager node, we can then use the following commands
    to launch an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, going to `dockerswarm-externalLoadBalancer-public-ip`—this will
    show the application. Once you have finished with your cluster, I would recommend
    removing the resource group rather than trying to remove the individual resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/097dd1a2-64c9-48e0-add1-51a68c786429.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember, you will be charged for the resources while they are active, even
    if you are not using them.
  prefs: []
  type: TYPE_NORMAL
- en: Like with the Amazon Web Services cluster, please make sure that the resources
    are removed fully, otherwise you may end up with an unexpected bill.
  prefs: []
  type: TYPE_NORMAL
- en: Docker for Cloud summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, it has been mostly straightforward to launch a Swarm cluster
    in both Azure as well as Amazon Web Services by using the templates provided by
    Docker. While these templates are great, if you are starting out, they get very
    little in the way of support from Docker. I would recommend that if you are looking
    at an easy way to launch containers that are running production workloads in public
    clouds, you can take a look at the some of the solutions that we are going to
    be discussing next.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon ECS and AWS Fargate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Web Services offers a few different container solutions. The one we are
    going to look at in this section is part of the Amazon **Elastic Container Service**
    (**ECS**) and is called AWS Fargate.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, Amazon ECS launches EC2 instances. Once launched, an Amazon ECS
    agent is deployed alongside a container runtime that allows you to then manage
    your containers using the AWS Console and command-line tools. AWS Fargate removes
    the need to launch EC2 instances, allowing you to simply launch containers without
    having to worry about managing a cluster or having the expense of EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to cheat slightly and work through the **Amazon ECS first run process.** You
    can access this by going to the following URL: [https://console.aws.amazon.com/ecs/home#/firstRun.](https://console.aws.amazon.com/ecs/home#/firstRun) This
    will take us through the four steps we need to take to launch a container within
    a Fargate cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon ECS uses the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Container definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first step in launching our AWS Fargate hosted container is to actually
    configure the first two components, that is, the container and task definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The container definition is where the base configuration for the container is
    defined. Think of this as adding the flags you would use to launch a container
    using the Docker client on the command line—for example, you name the container,
    define the image to use, set the network, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, there are three predefined options and a custom option. Click
    on the Configure button in the custom options and enter the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Container name**: `cluster-container`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: `russmckendrick/cluster:latest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Limits (MiB)**: Leave at the default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port mappings**: Enter `80` and leave `tcp` selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, click on the **Update** button. For the task definition, click on the
    **Edit** button and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Task definition name**: `cluster-task`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network mode**: Should be `awsvpc`; you can''t change this option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task execution role**: Leave as `ecsTaskExecutionRole`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compatibilities**: This should default to FARGATE and you should not be able
    to edit it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task memory** and **Task CPU**: Leave both at their default options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once updated, click on the **Save** button. Now, you can click on the Next button
    at the bottom of the page. This will take us to the second step which is where
    the service is defined.
  prefs: []
  type: TYPE_NORMAL
- en: A service runs tasks which in turn has a container associated with them. The
    default services are fine, so click on the **Next** button to proceed to the third
    step of the launch process. The first step is where the cluster is created. Again,
    the default values are fine, so click on the **Next** button to be taken to the
    review page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is your last chance to double check the task, service, and cluster definitions
    before any services are launched. If you are happy with everything, then click
    on the **Create** button. From here, you will be taken to a page where you can
    view the status of the various AWS services that make our AWS Fargate cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b3ded49a-504d-40c2-b6ad-689bf2251a3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once everything has changed from **pending** to **co****mplete**, you will
    be able to click on the **View service** button to be taken to the Service overview
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2a59d6e9-66b1-436b-8c41-a3c085ce0db7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we just need to know the public IP address of our container. To find this,
    click on the **Task** tab, and then select the unique ID of the running task.
    In the Network section of the page, you should be able to find both the Private
    and Public IP addresses of the tasks. Entering the Public IP in your browser should
    bring up the now familiar cluster application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/81f3646d-0867-437f-a2f6-f9cebb7b82ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will notice that the container name that''s displayed is the hostname of
    the container, and includes the internal IP address. You can also view the logs
    from the container by click on the Logs tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/da035de0-00f4-4c76-970e-d4b9dfd0f203.png)'
  prefs: []
  type: TYPE_IMG
- en: So, how much is this costing? To be able to run the container for an entire
    month would cost around $14, which works out at about $0.019 per hour.
  prefs: []
  type: TYPE_NORMAL
- en: This costing means that if you are going to be running a number of tasks 24/7,
    then Fargate may not be the most cost-effective way of running your containers.
    Instead, you may want to take the Amazon ECS EC2 option, where you can pack more
    containers onto your resource, or the Amazon EKS service, which we will look at
    later in this chapter. However, for quickly bringing up a container and then terminating
    it, Fargate is great—there is a low barrier to launching the containers and the
    number of supporting resources in small.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have finished with your Fargate container, you should delete the cluster.
    This will remove all of the services associated with the cluster. Once the cluster
    has been removed, go into the **Task Definitions** page and deregister them if
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to take a look at Azure App Services.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure App Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft Azure App Services** is a fully managed platform that allows you
    to deploy your application and let Azure worry about managing the platform they
    are running on. There are several options available when launching an App Service.
    You can run applications written in .NET, .NET Core, Ruby, Node.js, PHP, Python,
    and Ruby, or you can launch an image directly from a container image registry.'
  prefs: []
  type: TYPE_NORMAL
- en: In this quick walkthrough, we are going to be launching the cluster image from
    the Docker Hub. To do this, login to the Azure portal at [https://portal.azure.com/](https://portal.azure.com/) and
    select App Services from the left-hand side menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that loads, click on the **+Add** button. You have several options
    to choose from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3917916c-1828-44cd-92f2-fe766b956704.png)'
  prefs: []
  type: TYPE_IMG
- en: We are going to launching a Web App, so click on the tile for that. Once the
    tile has expanded, click on the **Create** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page that opens, there are several options. Fill them in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App Name**: Choose a unique name for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: Choose a valid subscription.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Group**: Leave the create new option selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: Leave as Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Publish**: Select Docker Image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Service plan/location**: By default, the most expensive plan is selected,
    so clicking here will take you a page where you can create a new plan. To do this,
    click on **Create new**, name your plan and select a location, and then finally
    choose a Pricing tier. For our needs, the **Dev**/**Test** plan will be fine.
    Once selected, click on **Apply**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure container:** Clicking here will take you to the container options.
    Here, you have a few options: Single Container, Docker Compose, or Kubernetes.
    For now, we are going to launching a single container. Click on the **Docker Hub**
    option and enter `russmckendrick/cluster:latest`. Once entered, you will be able
    to click on the **Apply** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once all of the information has been filled in, you will be able to then click
    on **Create** to launch the Web App Service. Once launched, you should be able
    to access the service via the URL provided by Azure, for example, mine was `https://masteringdocker.azurewebsites.net/`.
    Opening this a browser will display the cluster application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/379ca74a-fc1d-4ccb-a7cb-24880887ae55.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this time, we have the container ID rather than a full hostname
    like we got when launching the container on AWS Fargate. The container at this
    spec will cost us around $0.05 per hour, or $36.50 per month. To remove the container,
    simply remove the resource group.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes in Microsoft Azure, Google Cloud, and Amazon Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we are going to take a look at is how easy is it to launch a
    Kubernetes cluster in the three main public clouds. In the previous chapter, we
    launched a Kubernetes cluster locally using the built-in functionality of the
    Docker Desktop applications. To start with, we are going to look at the quickest
    way to get started with Kubernetes on public clouds, starting with Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Azure Kubernetes Service** (**AKS**), is an extremely simple service to
    launch and configure. I will be using the Azure command-line tools on my local
    machine; you will also be able to use the command-line tools by using the Azure
    Cloud Shell which is built into the Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is create a resource group to launch our
    AKS cluster into. To create one called `MasteringDockerAKS`, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the resource group, we can launch a two node Kubernetes cluster
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take several minutes to launch the cluster. Once launched, we will
    need to copy the configuration so that we can interact with the cluster by using
    our local copy of `kubectl`. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will configure your local copy of `kubectl` to talk to the AKS cluster
    you have just launched. You should now see the cluster listed in the Docker menu
    under Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1eb9ae6d-7ee8-4742-9401-ab8de398248b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the following commands will show you the version of the server that
    your `kubectl` client is talking to as well as details regarding the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the output of the preceding commands in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/37a0e9be-d1de-4cf7-85aa-55b3529f2d03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our cluster up and running, we need to launch something. Luckily,
    there is an excellent open source microservices demo from Weave which launches
    a demo shop that sell socks. To launch the demo, we simply need to run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take about five minutes for the demo to launch. You can check the status
    of the `pods` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once everything is up and running, you should see something like the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7acc42f3-dfd4-4920-b859-73cb984930b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our application has launched, we need a way to access it. Check the
    services by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows us that there is a service called `front-end`. We are going to create
    a Load Balancer and attach it to this service. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the status of the Load Balancer by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, you should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/de5124d9-7437-41de-a789-dd18f33e536f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding output, for my store, the IP address was `104.211.63.146`
    and the port was `8079`. Opening `http://104.211.63.146:8079/` in a browser presented
    me with the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/635d767c-7e48-42f0-90fa-2d934c687d6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have finished clicking around the store, you can remove it by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove the AKS cluster and resource group, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to check that everything has been removed from the Azure portal as
    expected to avoid any unexpected charges. Finally, you can remove the configuration
    from your local `kubectl` configuration by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next up, we are going to look at launching a similar cluster in Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Google Kubernetes Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Google Kubernetes Engine**, as you may have already guessed, is very tightly
    integrated into Google's Cloud platform. Rather than going into more detail, let's
    dive straight in and launch a cluster. I am assuming that you already have a Google
    Cloud account, a project with billing enabled, and finally the Google Cloud SDK
    installed and configured to interact with your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the cluster, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the cluster has been launched, your `kubectl` config will be automatically
    updated and the context will be set for the newly launched cluster. You can view
    information on the nodes by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/4b3bd18a-a747-4f9f-85ad-5c8c20d6efb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our cluster up and running, let''s launch the demo shop by
    repeating the commands we used last time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, once the `front-end-lb` service has been created, you should be able
    to find the external IP address port to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1b88a296-8862-4db4-9aee-417969dc98e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Entering these into a browser will open the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dc44d962-fe1e-4fdc-9903-74f85f5b7c90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To remove the cluster, simply run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will also remove the context and cluster from `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Container Service for Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final Kubernetes service we are going to take a look at is the **Amazon
    Elastic Container Service for Kubernetes**, or **Amazon EKS**, for short. This
    is the most recently launched service of the three services we are covering. In
    fact, you could say that Amazon was very late to the Kubernetes party.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the command-line tools for Amazon are not as friendly as the
    ones we used for Microsoft Azure and Google Cloud. Because of this, I am going
    to be using a tool called `eksctl`, which was written by Weave, the same people
    who created the demo store we have been using. You can find details on `eksctl`
    and also the Amazon command-line tools in the *Further reading* section at the
    end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch our Amazon EKS cluster, we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take several minutes to launch the cluster, but you will receive feedback
    on the command line throughout the process. Also, as `eksctl` is using CloudFormation,
    you can also check its progress in the AWS Console. Once complete, you should
    see something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4c382493-e1ee-4ea7-9599-6da285f0e2f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As part of the launch, `eksctl` will have configured your local `kubectl` context,
    meaning that you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/59956609-90b8-468a-8db8-f878996e8997.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the cluster up and running, we can launch the demo store,
    just like we did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice that the external IP that''s listed when running that last command
    looks a little strange:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/50a3cbee-1b92-4813-9307-2948a9b16d39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That is because it is a DNS name rather than an IP address. To find the full
    URL, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/c4d6c6ea-15b9-49e4-b88c-96a35fd6cae7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Entering the URL and porting into a browser will, as you might have guessed,
    show the demo store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/08ad77e8-6b8f-4743-9bcf-130c42f9c263.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To remove the cluster, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the names of the clusters that are running. Once you have
    the name, run the following command, making sure to reference your own cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Your terminal output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fb0a673e-7663-483f-8b99-313189fbf179.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes our brief look at Kubernetes in Microsoft Azure, Google Cloud,
    and Amazon Web Services. We covered a few interesting points here. The first is
    that we managed to launch and manage our clusters using the command line with
    a few simple steps, although we did have to use a third-party tool for Amazon
    EKS.
  prefs: []
  type: TYPE_NORMAL
- en: The second and most important point is that once we had access to the cluster
    using `kubectl`, the experience was exactly the same across all three platforms.
    At no point did we have to access the cloud provider's web-based control panel
    to tweak or review a setting. Everything was done using the same commands; deploying
    the same code and services was done with no thought or consideration on our part
    regarding any of the individual services offered by the cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even run the demo store locally using Docker, with exactly the same
    commands. Just start your Kubernetes cluster up, make sure that you have the local
    Docker context selected, and then run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, the *load balanced* IP, in this case,
    is `localhost`. Opening your browser and entering `http://localhost:8079` will
    take you to the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d8fe2e37-04a3-4b51-a7bb-7af5cae602f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can remove the store by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This level of consistency across multiple providers and even local machines
    hasn't really been achievable before without a lot of work and configuration or
    via a closed source subscription-based service.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a look at how we can deploy Docker Swarm clusters
    into a cloud provider using the tools provided by Docker themselves. We have also
    taken a look at two of the services offered by public clouds to run containers
    away from the core Docker toolset.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at launching Kubernetes clusters in various clouds and running
    the same demo application in all of them. While it was clear from any of the commands
    we ran, all three of the public clouds were using various versions of Docker as
    the container engine. Though this could be subject to change by the time you read
    this, as in theory, they could switch to another engine with little impact.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to move back to working Docker and take a
    look at Portainer, a web-based interface for managing your Docker installation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: Docker for AWS and Docker for Azure launches Kubernetes clusters
    for you to launch your containers on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Amazon service don't you have to directly manage if you're using Amazon
    Fargate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of application do we need to launch in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once launched, what is the command we need to run to create the namespace for
    the Sock Shop store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you find out full details about the Load Balancer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find details of the Docker Cloud service closing down at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Cloud Migration Notification and FAQs: [https://success.docker.com/article/cloud-migration](https://success.docker.com/article/cloud-migration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stuck! Docker Cloud Shutdown!: [https://blog.cloud66.com/stuck-docker-cloud-shutdown/](https://blog.cloud66.com/stuck-docker-cloud-shutdown/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More details on the templating services using by Docker for AWS and Docker
    for Azure can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation: [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure ARM templates: [https://azure.microsoft.com/en-gb/resources/templates/](https://docs.microsoft.com/en-gb/azure/azure-resource-manager/resource-group-overview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM template Visualizer: [http://armviz.io/](http://armviz.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cloud services we used to launch containers can be found at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon ECS: [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Fargate: [https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps: [https://azure.microsoft.com/en-gb/services/app-service/web/](https://azure.microsoft.com/en-gb/services/app-service/web/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three Kubernetes services can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Kubernetes Service: [https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Kubernetes Engine: [https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elastic Container Service for Kubernetes: [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quick-starts for the various command-line tools used in the chapter can be
    found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure CLI: [https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud SDK: [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Command-Line Interface: [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eksctl – a CLI for Amazon EKS: [https://eksctl.io/](https://eksctl.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, for more details on the demo store, go to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: Sock Shop: [https://microservices-demo.github.io](https://microservices-demo.github.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
