- en: Attacking the Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Clickjacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for DOM-based cross-site scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for JavaScript execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for HTML injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for client-side resource manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code available on the client that is executed in the browser requires testing
    to determine any presence of sensitive information or the allowance of user input
    without server-side validation. Learn how to perform these tests using Burp.
  prefs: []
  type: TYPE_NORMAL
- en: Software tool requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Broken Web Applications** (**VM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Mutillidae link**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Burp Proxy Community** or **Professional** ([https://portswigger.net/burp/](https://portswigger.net/burp/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for Clickjacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Clickjacking** is also known as the **UI redress attack**. This attack is
    a deceptive technique that tricks a user into interacting with a transparent iframe
    and, potentially, send unauthorized commands or sensitive information to an attacker-controlled
    website. Let''s see how to use the Burp Clickbandit to test whether a site is
    vulnerable to Clickjacking.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application and the Burp Clickbandit, let's determine
    whether the application protects against Clickjacking attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the Home page of the OWASP Mutillidae II.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to Burp, and from the top-level menu, select Burp Clickbandit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00315.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up box explains the tool. Click the button entitled Copy Clickbandit
    to clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00316.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Return to the Firefox browser, and press *F12* to bring up the developer tools.
    From the developer tools menu, select Console, and look for the prompt at the
    bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00317.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the Console prompt (for example, `>>`), paste into the prompt the Clickbandit
    script you copied to your clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After pasting in the script into the prompt, press the *Enter* key. You should
    see the Burp Clickbandit Record mode. Click the Start button to begin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00319.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Start clicking around on the application after it appears. Click available links
    at the top Mutillidae menu, click available links on the side menu, or browse
    to pages within Mutillidae. Once you've clicked around, press the Finish button
    on the Burp Clickbandit menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should notice big red blocks appear transparently on top of the Mutillidae
    web pages. Each red block indicates a place where a malicious iframe can appear.
    Feel free to click each red block to see the next red block appear, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00320.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you wish to stop and save your results, click the Save button. This will
    save the Clickjacking PoC in an HTML file for you to place inside your penetration
    test report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Mutillidae application does not make use of the X-FRAME-OPTIONS header
    set to `DENY`, it is possible to inject a malicious iframe in to the Mutillidae
    web pages. The Clickbandit increases the level of opaqueness of the iframe for
    visibility and creates a **proof of concept** (**PoC**) to illustrate how the
    vulnerability can be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for DOM-based cross-site scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Document Object Model** (**DOM**) is a tree-like structural representation
    of all HTML web pages captured in a browser. Developers use the DOM to store information
    inside the browser for convenience. As a web penetration tester, it is important
    to determine the presence of DOM-based **cross-site scripting** (**XSS**) vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II HTML5 web storage exercise, let’s determine whether
    the application is susceptible to DOM-based XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to OWASP 2013 | HTML5 Web Storage | HTML5 Storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the name/value pairs stored in the DOM using HTML5 Web Storage locations.
    Web storage includes Session and Local variables. Developers use these storage
    locations to conveniently store information inside a user''s browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00322.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the HTML 5 Web Storage page in Firefox browser by pressing *F5* or clicking
    the reload button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Proxy HTTP history tab. Find the paused request created
    by the reload you just performed. Note that the `User-Agent` string is highlighted,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00323.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the preceding highlighted `User-Agent` with the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Click the Forward button. Now, turn Interceptor off by clicking the toggle button
    to Intercept is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the alert popup showing the contents of the DOM storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00324.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The injected script illustrates how the presence of a cross-site scripting vulnerability
    combined with sensitive information stored in the DOM can allow an attacker to
    steal sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for JavaScript execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript injection is a subtype of cross-site scripting attacks specific to
    the arbitrary injection of JavaScript. Vulnerabilities in this area can affect
    sensitive information held in the browser, such as user session cookies, or it
    can lead to the modification of page content, allowing script execution from attacker-controlled
    sites.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II Password Generator exercise, let’s determine whether
    the application is susceptible to JavaScript XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to OWASP 2013 | A1 – Injection (Other) | JavaScript Injection | Password
    Generator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00325.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note after clicking the Generate Password button, a password is shown. Also,
    note the username value provided in the URL is reflected back *as is* on the web
    page: `http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous`. This
    means a potential XSS vulnerability may exist on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00326.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Proxy HTTP history tab and find the HTTP message associated
    with the Password Generator page. Flip to the Response tab in the message editor,
    and perform a search on the string `catch`. Note that the JavaScript returned
    has a catch block where error messages display to the user. We will use this position for
    the placement of a carefully crafted JavaScript injection attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00327.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the Password Generator page in Firefox browser by pressing *F5* or clicking
    the reload button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Proxy Interceptor tab. While the request is paused, note
    the `username` parameter value highlighted as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00328.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the preceding highlighted value of `anonymous` with the following carefully
    crafted JavaScript injection script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Click the Forward button. Now, turn Interceptor off by clicking the toggle button
    to Intercept is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the alert popup. You’ve successfully demonstrated the presence of a JavaScript
    injection XSS vulnerability!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00329.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Testing for HTML injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML injection is the insertion of arbitrary HTML code into a vulnerable web
    page. Vulnerabilities in this area may lead to the disclosure of sensitive information
    or the modification of page content for the purposes of socially engineering the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II Capture Data Page, let's determine whether the
    application is susceptible to HTML injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to OWASP 2013 | A1 – Injection (Other) | HTMLi Via Cookie Injection
    | Capture Data Page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note how the page looks before the attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00331.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy Intercept tab, and turn Interceptor on with the button
    Intercept is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While the request is paused, make note of the last cookie, `acgroupswitchpersist=nada`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While the request is paused, replace the value of the last cookie, with this
    HTML injection script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Click the Forward button. Now turn Interceptor off by clicking the toggle button
    to Intercept is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how the HTML is now included inside the page!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the lack of input validation and output encoding, an HTML injection vulnerability
    can exist. The result of exploiting this vulnerability is the insertion of arbitrary
    HTML code, which can lead to XSS attacks or social engineering schemes such as
    the one seen in the preceding recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for client-side resource manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If an application performs actions based on client-side URL information or pathing
    to a resource (that is, AJAX call, external JavaScript, iframe source), the result
    can lead to a client-side resource manipulation vulnerability. This vulnerability
    relates to attacker-controlled URLs in, for example, the JavaScript location attribute,
    the location header found in an HTTP response, or a POST body parameter, which
    controls redirection. The impact of this vulnerability could lead to a cross-site
    scripting attack.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, determine whether it is possible
    to manipulate any URL parameters that are exposed on the client side and whether
    the manipulation of those values causes the application to behave differently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to OWASP 2013 | A10 – Unvalidated Redirects and Forwards | Credits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the ISSA Kentuckiana link available on the Credits page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00335.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy HTTP history tab, and find your request to the Credits
    page. Note that there are two query string parameters: `page` and `forwardurl`.
    What would happen if we manipulated the URL where the user is sent?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to the Burp Proxy Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While the request is paused, note the current value of the `fowardurl` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the value of the `forwardurl` parameter to be `https://www.owasp.org`
    instead of the original choice of `http://www.issa-kentuckiana.org`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the Forward button. Now turn Interceptor off by clicking the toggle button
    to Intercept is off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how we were redirected to a site other than the one originally clicked!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application code decisions, such as where to redirect a user, should never rely
    on client-side available values. Such values can be tampered with and modified,
    to redirect users to attacker-controlled websites or to execute attacker-controlled
    scripts.
  prefs: []
  type: TYPE_NORMAL
