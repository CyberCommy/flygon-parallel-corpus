- en: Why React Native?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook created React Native to build its mobile applications. The motivation
    to do so originated from the fact that React for the web was so successful. If
    React is such a good tool for UI development, and you need a native application,
    then why fight it? Just make React work with native mobile OS UI elements!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about the motivations for using React Native to
    build native mobile web applications.
  prefs: []
  type: TYPE_NORMAL
- en: What is React Native?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, I introduced the notion of a render target—the thing that
    React components render to. The render target is abstract as far as the React
    programmer is concerned. For example, in React, the render target can be a string
    or it could be the DOM. This is why your components never directly interface with
    the render target, because you can never make assumptions about where the rendering
    is taking place.
  prefs: []
  type: TYPE_NORMAL
- en: A mobile platform has UI widget libraries that developers can leverage to build
    apps for that platform. On Android, developers implement Java apps, while on iOS,
    developers implement Swift apps. If you want a functional mobile app, you're going
    to have to pick one. However, you'll need to learn both languages, as supporting
    only one of two major platforms isn't realistic for success.
  prefs: []
  type: TYPE_NORMAL
- en: For React developers, this isn't a problem. The same React components that you
    build work all over the place, even on mobile browsers! Having to learn two more
    programming languages to build and ship a mobile application is cost and time
    prohibitive. The solution to this is to introduce a new React that supports a
    new render target—native mobile UI widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'React Native uses a technique that makes asynchronous calls to the underlying
    mobile OS, which calls the native widget APIs. There''s a JavaScript engine, and
    the React API is mostly the same as React for the web. The difference is with
    the target; instead of a DOM, there are asynchronous API calls. The concept is
    visualized here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8a6ec01c-eda8-4eea-8f2e-683980afcb04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This oversimplifies everything that''s happening under the covers, but the
    basic ideas are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The same React library that's used on the web is used by React Native and runs
    in JavaScriptCore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages that are sent to native platform APIs are asynchronous and batched
    for performance purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Native ships with components implemented for mobile platforms, instead
    of components that are HTML elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Much more on the history and the mechanics of React Native can be found at [https://code.facebook.com/posts/1014532261909640](https://code.facebook.com/posts/1014532261909640).
  prefs: []
  type: TYPE_NORMAL
- en: React and JSX are familiar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing a new render target for React is not straightforward. It's essentially
    the same thing as inventing a new DOM that runs on iOS and Android. So why go
    through all the trouble?
  prefs: []
  type: TYPE_NORMAL
- en: First, there's a huge demand for mobile apps. The reason is that the mobile
    web browser user experience isn't as good as the native app experience. Second,
    JSX is a fantastic tool for building user interfaces. Rather than having to learn
    a new technology, it's much easier to use what you know.
  prefs: []
  type: TYPE_NORMAL
- en: It's the latter point that's the most relevant to you. If you're reading this
    book, you're probably interested in using React for both web applications and
    native mobile applications. I can't put into words how valuable React is from
    a development resource perspective. Instead of having a team that does web UIs,
    a team that does iOS, a team that does Android, and so on, there's just the UI
    team that understands React.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile browser experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile browsers lack many capabilities of mobile applications. This is due to
    the fact that browsers cannot replicate the same native platform widgets as HTML
    elements. You can try to do this, but it's often better to just use the native
    widget, rather than try to replicate it. Partly because this requires less maintenance
    effort on your part, and partly because using widgets that are native to the platform
    means that they're consistent with the rest of the platform. For example, if a
    date picker in your application looks different from all the date pickers the
    user interacts with on their phone, this isn't a good thing. Familiarity is key,
    and using native platform widgets makes familiarity possible.
  prefs: []
  type: TYPE_NORMAL
- en: User interactions on mobile devices are fundamentally different from the interactions
    that you typically design for the web. Web applications assume the presence of
    a mouse, for example, and that the click event on a button is just one phase.
    But, things become more complicated when the user uses their fingers to interact
    with the screen. Mobile platforms have what's called a gesture system to deal
    with these. React Native is a much better candidate for handling gestures than
    React for the web, because it handles these types of things that you don't have
    to think about much in a web app.
  prefs: []
  type: TYPE_NORMAL
- en: As the mobile platform is updated, you want the components of your app to stay
    updated too. This isn't a problem with React Native because they're using actual
    components from the platform. Once again, consistency and familiarity are important
    for a good user experience. So, when the buttons in your app look and behave in exactly
    the same way as the buttons in every other app on the device, your app feels like
    part of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Android and iOS, different yet the same
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first heard about React Native, I automatically thought that it would
    be some cross-platform solution that lets you write a single React application
    that will run natively on any device. Do yourself a favor and get out of this
    mindset before you start working with React Native. iOS and Android are different
    on many fundamental levels. Even their user experience philosophies are different,
    so trying to write a single app that runs on both platforms is categorically misguided.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, this is not the goal of React Native. The goal is *React components
    everywhere*, not write once, run anywhere. In some cases, you'll want your app
    to take advantage of an iOS-specific widget or an Android-specific widget. This
    provides a better user experience for that particular platform and should trump
    the portability of a component library.
  prefs: []
  type: TYPE_NORMAL
- en: In later chapters, you'll learn about different tactics for organizing platform-specific
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: There are several areas that overlap between iOS and Android where the differences
    are trivial. The two widgets aim to accomplish the same thing for the user, in
    roughly the same way. In these cases, React Native will handle the difference
    for you and provide a unified component.
  prefs: []
  type: TYPE_NORMAL
- en: The case for mobile web apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to implement mobile-first React components.
    Not every one of your users is going to be willing to install an app, especially
    if you don't yet have a high download count and rating. The barrier to entry is
    much lower with web applications—the user only needs a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Despite not being able to replicate everything that native platform UIs have
    to offer, you can still implement awesome things in a mobile web UI. Maybe having
    a good web UI is the first step toward getting those download counts and ratings
    up for your mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, what you should aim for is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard web (laptop/desktop browsers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile web (phone/tablet browsers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile apps (phone/tablet native platform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting an equal amount of effort into all three of these spaces probably doesn't
    make much sense, as your users probably favor one area over another. Once you
    know, for example, that there's a really high demand for your mobile app compared
    to the web versions, that's when you allocate more effort there.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that React Native is an effort by Facebook to reuse
    React to create native mobile applications. React and JSX are really good at declaring
    UI components, and since there's now a huge demand for mobile applications, it
    makes sense to use what you already know for the Web.
  prefs: []
  type: TYPE_NORMAL
- en: The reason there's such a demand for mobile applications over mobile browsers
    is that they just feel better. Web applications lack the ability to handle mobile
    gestures the same way apps can, and they generally don't feel like part of the
    mobile experience from a look and feel perspective.
  prefs: []
  type: TYPE_NORMAL
- en: React Native isn't trying to implement a component library that lets you build
    a single React app that runs on any mobile platform. iOS and Android are fundamentally
    different in many important ways. Where there's overlap, React Native does try
    to implement common components. Will you do away with mobile web apps now that
    we can build natively using React? This will probably never happen, because the
    user can only install so many apps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know what React Native is and what its strengths are, you'll learn
    how to get started with new React Native projects in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the primary goal of React Native?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To remove the need to build mobile web apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it easy for React developers to apply what they already know about building
    UI components to building native mobile apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To provide a unified user experience across all mobile platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does React Native provide the exact same experience on iOS and Android?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, iOS and Android have fundamentally different user experiences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you want your app to function identically on iOS and Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does React Native remove the need for mobile web apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, there is no need for mobile web apps if you can build native mobile apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, there will always be a need for mobile web apps. React Native is there for
    you when you have demand for a native mobile app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/](https://facebook.github.io/react-native/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code.facebook.com/posts/1014532261909640](https://code.facebook.com/posts/1014532261909640)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
