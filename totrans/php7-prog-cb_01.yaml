- en: Chapter 1. Building a Foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP 7 installation considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the built-in PHP web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a test MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing class autoloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hoovering a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a deep web scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a PHP 5 to PHP 7 code converter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is designed as a *quick start* that will get you up and running
    on PHP 7 so that you can start implementing the recipes right away. The underlying
    assumption for this book is that you already have a good knowledge of PHP and
    programming. Although this book will not go into detail about the actual installation
    of PHP, given that PHP 7 is relatively new, we will do our best to point out the
    quirks and *gotchas* you might encounter during a PHP 7 installation.
  prefs: []
  type: TYPE_NORMAL
- en: PHP 7 installation considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three primary means of acquiring PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing directly from the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing *pre-compiled* binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a *AMP package (that is, XAMPP, WAMP, LAMP, MAMP, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The three methods are listed in order of difficulty. However, the first approach,
    although tedious, will give you the most finite control over extensions and options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing directly from source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to utilize this approach, you will need to have a C compiler available.
    If you are running Windows, **MinGW** is a free compiler that has proven popular.
    It is based on the **GNU Compiler Collection** (**GCC)** compiler provided by
    the **GNU** project. Non-free compilers include the classic **Turbo C** compiler
    from Borland, and, of course, the compiler that is preferred by Windows developers
    is **Visual Studio**. The latter, however, is designed mainly for C++ development,
    so when you compile PHP, you will need to specify C mode.
  prefs: []
  type: TYPE_NORMAL
- en: When working on an Apple Mac, the best solution is to install the **Apple Developer
    Tools**. You can use the **Xcode IDE** to compile PHP 7, or run `gcc` from a terminal
    window. In a Linux environment, from a terminal window, run `gcc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When compiling from a terminal window or command line, the normal procedure
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`configure`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make install`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For information on configuration options (that is, when running `configure`),
    use the `help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Errors you might encounter during the configuration stage are mentioned in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Error | Fix |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configure: error: xml2-config not found. Please check your libxml2 installation`
    | You just need to install `libxml2`. For this error, please refer to the following
    link:[http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing](http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `configure: error: Please reinstall readline - I cannot find readline.h`
    | Install `libreadline-dev` |'
  prefs: []
  type: TYPE_TB
- en: '| `configure: WARNING: unrecognized options: --enable-spl, --enable-reflection,
    --with-libxml` | Not a big deal. These options are defaults and don''t need to
    be included. For more details, please refer to the following link:[http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04](http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04)
    |'
  prefs: []
  type: TYPE_TB
- en: Installing PHP 7 from pre-compiled binaries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the title implies, **pre-compiled** binaries are a set of binary files that
    somebody else has kindly compiled from PHP 7 source code and has made available.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Windows, go to [http://windows.php.net/](http://windows.php.net/).
    You will find a good set of tips in the left column that pertain to which version
    to choose, **thread safe** versus **non-read safe**, and so forth. You can then
    click on **Downloads** and look for the ZIP file that applies to your environment.
    Once the ZIP file has been downloaded, extract the files into the folder of your
    choice, add `php.exe` to your path, and configure PHP 7 using the `php.ini` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the pre-compiled binaries on a Mac OS X system, it is best to involve
    a package management system. The ones recommended for PHP include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: MacPorts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of Linux, the packaging system used depends on which Linux distribution
    you are using. The following table, organized by Linux distribution, summarizes
    where to look for the PHP 7 package.
  prefs: []
  type: TYPE_NORMAL
- en: '| Distribution | Where to find PHP 7 | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Debian | `packages.debian.org/stable/php``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | Use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can use a graphical package management tool such as **Synaptic**.Make
    sure you select **php7** (and not php5). |
  prefs: []
  type: TYPE_NORMAL
- en: '| Ubuntu | `packages.ubuntu.com``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | Use this command:`sudo apt-get install php7`Be sure to choose the right version
    of Ubuntu.Alternatively, you can use a graphical package management tool such
    as **Synaptic**. |'
  prefs: []
  type: TYPE_TB
- en: '| Fedora / Red Hat | `admin.fedoraproject.org/pkgdb/packages``repos-source.zend.com/zend-server/early-access/php7/php-7*RHEL*`
    | Make sure you are the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use this command:**dnf install php7**Alternatively, you can use a graphical
    package management tool such as the GNOME Package Manager. |
  prefs: []
  type: TYPE_NORMAL
- en: '| OpenSUSE | `software.opensuse.org/package/php7` | Use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can run `zypper`, or use **YaST** as a graphical tool. |
  prefs: []
  type: TYPE_NORMAL
- en: Installing a *AMP package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**AMP** refers to **Apache**, **MySQL**, and **PHP** (also **Perl** and **Python**).
    The ***** refers to Linux, Windows, Mac, and so on (that is, LAMP, WAMP, and MAMP).
    This approach is often the easiest, but gives you less control over the initial
    PHP installation. On the other hand, you can always modify the `php.ini` file
    and install additional extensions to customize your installation as needed. The
    following table summarizes a number of popular *AMP packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Where is it found | Free? | Supports* |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `XAMPP` | [www.apachefriends.org/download.html](http://www.apachefriends.org/download.html)
    | Y | WML |'
  prefs: []
  type: TYPE_TB
- en: '| `AMPPS` | [www.ampps.com/downloads](http://www.ampps.com/downloads) | Y |
    WML |'
  prefs: []
  type: TYPE_TB
- en: '| `MAMP` | [www.mamp.info/en](http://www.mamp.info/en) | Y | WM |'
  prefs: []
  type: TYPE_TB
- en: '| `WampServer` | [sourceforge.net/projects/wampserver](http://sourceforge.net/projects/wampserver)
    | Y | W |'
  prefs: []
  type: TYPE_TB
- en: '| `EasyPHP` | [www.easyphp.org](http://www.easyphp.org) | Y | W |'
  prefs: []
  type: TYPE_TB
- en: '| `Zend Server` | [www.zend.com/en/products/zend_server](http://www.zend.com/en/products/zend_server)
    | N | WML |'
  prefs: []
  type: TYPE_TB
- en: In the preceding table, we've enlisted the *AMP packages where ***** is replaced
    by **W** for Windows, **M** for Mac OS X, and **L** for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you install a pre-compiled binary from a package, only `core` extensions
    are installed. Non-core PHP extensions must be installed separately.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that PHP 7 installation on cloud computing platforms will
    often follow the installation procedure outlined for pre-compiled binaries. Find
    out if your cloud environment uses Linux, Mac, or Windows virtual machines, and
    then follow the appropriate procedure as mentioned in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: It's possible that PHP 7 hasn't yet reached your favorite repository for pre-compiled
    binaries. You can always install from source, or consider installing one of the
    *AMP packages (see the next section). An alternative for Linux-based systems is
    to use the **Personal Package Archive** (**PPA**) approach. Because PPAs have
    not undergone a rigorous screening process, however, security could be a concern.
    A good discussion on security considerations for PPAs is found at [http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo](http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General installation considerations, as well as instructions for each of the
    three major OS platforms (Windows, Mac OS X, and Linux), can be found at [http://php.net/manual/en/install.general.php](http://php.net/manual/en/install.general.php).
  prefs: []
  type: TYPE_NORMAL
- en: The website for MinGW is [http://www.mingw.org/](http://www.mingw.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Instructions on how to compile a C program using Visual Studio can be found
    at [https://msdn.microsoft.com/en-us/library/bb384838](https://msdn.microsoft.com/en-us/library/bb384838).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possible way to test PHP 7 is by using a virtual machine. Here are
    a couple of tools with their links, which might prove useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vagrant**: [https://github.com/rlerdorf/php7dev](https://github.com/rlerdorf/php7dev)
    (php7dev is a Debian 8 Vagrant image that is preconfigured for testing PHP apps
    and developing extensions across many versions of PHP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker**: [https://hub.docker.com/r/coderstephen/php7/](https://hub.docker.com/r/coderstephen/php7/)
    (it contains a PHP7 Docker container)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the built-in PHP web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from unit testing and running PHP directly from the command line, the
    obvious way to test your applications is to use a web server. For long-term projects,
    it would be beneficial to develop a virtual host definition for a web server that
    most closely mirrors the one used by your customer. Creating such definitions
    for the various web servers (that is, Apache, NGINX, and so on) is beyond the
    scope of this book. Another quick and easy-to-use alternative (which we have room
    to discuss here) is to use the built-in PHP 7 web server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To activate the PHP web server, first change to the directory that will serve
    as the base for your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You then need to supply the hostname or IP address and, optionally, a port.
    Here is an example you can use to run the recipes supplied with this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see output on your screen that looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/B05314_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As the built-in web server continues to service requests, you will also see
    access information, HTTP status codes, and request information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to set the web server document root to a directory other than the
    current one, you can use the `-t` flag. The flag must then be followed by a valid
    directory path. The built-in web server will treat this directory as if it were
    the web document root, which is useful for security reasons. For security reasons,
    some frameworks, such as Zend Framework, require that the web document root is
    different from where your actual source code resides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example using the `-t` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/B05314_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining a test MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For test purposes, along with the source code for the book, we've provided an
    SQL file with sample data at [https://github.com/dbierer/php7cookbook](https://github.com/dbierer/php7cookbook).
    The name of the database used in the recipes for this book is `php7cookbook`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a MySQL database, `php7cookbook`. Also assign rights to the new database
    to a user called `cook` with the password `book`. The following table summarizes
    these settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Item | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Database name | `php7cookbook` |'
  prefs: []
  type: TYPE_TB
- en: '| Database user | `cook` |'
  prefs: []
  type: TYPE_TB
- en: '| Database user password | `book` |'
  prefs: []
  type: TYPE_TB
- en: 'Here is an example of SQL needed to create the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Import the sample values into the new database. The import file, `php7cookbook.sql`,
    is located at [https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql](https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is arguably the most popular means of testing PHP code. Most developers
    will agree that a solid suite of tests is a requirement for any properly developed
    project. Few developers actually write these tests. A lucky few have an independent
    testing group that writes the tests for them! After months of skirmishing with
    the testing group, however, the remains of the lucky few tend to grumble and complain.
    In any event, any book on PHP would not be complete without at least a nod and
    a wink towards testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The place to find the latest version of **PHPUnit** is [https://phpunit.de/](https://phpunit.de/).
    PHPUnit5.1 and above support PHP 7\. Click on the link for the desired version,
    and you will download a `phpunit.phar` file. You can then execute commands using
    the archive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `phar` command stands for **PHP Archive**. The technology is based on `tar`,
    which itself was used in UNIX. A `phar` file is a collection of PHP files that
    are packed together into a single file for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing class autoloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing PHP using an **object-oriented programming** (**OOP**) approach,
    the recommendation is to place each class in its own file. The advantage of following
    this recommendation is the ease of long-term maintenance and improved readability.
    The disadvantage is that each class definition file must be included (that is,
    using `include` or its variants). To address this issue, there is a mechanism
    built into the PHP language that will *autoload* any class that has not already
    been specifically included.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The minimum requirement for PHP autoloading is to define a global `__autoload()`
    function. This is a *magic* function called automatically by the PHP engine when
    a class is requested but where said class has not been included. The name of the
    requested class will appear as a parameter when `__autoload()` is invoked (assuming
    that you have defined it!). If you are using PHP namespaces, the full namespaced
    name of the class will be passed. Because `__autoload()` is a *function*, it must
    be in the global namespace; however, there are limitations on its use. Accordingly,
    in this recipe, we will make use of the `spl_autoload_register()` function, which
    gives us more flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The class we will cover in this recipe is `Application\Autoload\Loader`. In
    order to take advantage of the relationship between PHP namespaces and autoloading,
    we name the file `Loader.php` and place it in the `/path/to/cookbook/files/Application/Autoload`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first method we will present simply loads a file. We use `file_exists()`
    to check before running `require_once()`. The reason for this is that if the file
    is not found, `require_once()` will generate a fatal error that cannot be caught
    using PHP 7''s new error handling capabilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can then test the return value of `loadFile()` in the calling program and
    loop through a list of alternate directories before throwing an `Exception` if
    it's ultimately unable to load the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will notice that the methods and properties in this class are static. This
    gives us greater flexibility when registering the autoloading method, and also
    lets us treat the `Loader` class like a **Singleton**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define the method that calls `loadFile()` and actually performs the
    logic to locate the file based on the namespaced classname. This method derives
    a filename by converting the PHP namespace separator `\` into the directory separator
    appropriate for this server and appending `.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next, the method loops through an array of directories we call `self::$dirs`,
    using each directory as a starting point for the derived filename. If not successful,
    as a last resort, the method attempts to load the file from the current directory.
    If even that is not successful, an `Exception` is thrown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need a method that can add more directories to our list of directories
    to test. Notice that if the value provided is an array, `array_merge()` is used.
    Otherwise, we simply add the directory string to the `self::$dirs` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we come to the most important part; we need to register our `autoload()`
    method as a **Standard PHP Library** (**SPL**) autoloader. This is accomplished
    using `spl_autoload_register()` with the `init()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can define `__construct()`, which calls `self::init($dirs)`.
    This allows us to also create an instance of `Loader` if desired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use the autoloader class that we just defined, you will need to
    `require Loader.php`. If your namespace files are located in a directory other
    than the current one, you should also run `Loader::init()` and supply additional
    directory paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make sure the autoloader works, we''ll also need a test class.
    Here is a definition of `/path/to/cookbook/files/Application/Test/TestClass.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a sample `chap_01_autoload_test.php` code file to test the autoloader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, get an instance of a class that has not already been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, try to get a `fake` class that does not exist. Note that this will
    throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Hoovering a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very frequently, it is of interest to scan a website and extract information
    from specific tags. This basic mechanism can be used to trawl the web in search
    of useful bits of information. At other times you need to get a list of `<IMG>`
    tags and the `SRC` attribute, or `<A>` tags and the corresponding `HREF` attribute.
    The possibilities are endless.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we need to grab the contents of the target website. At first
    glance it seems that we should make a cURL request, or simply use `file_get_contents()`.
    The problem with these approaches is that we will end up having to do a massive
    amount of string manipulation, most likely having to make inordinate use of the
    dreaded regular expression. In order to avoid all of this, we''ll simply take
    advantage of an already existing PHP 7 class `DOMDocument`. So we create a `DOMDocument`
    instance, setting it to **UTF-8**. We don''t care about whitespace, and use the
    handy `loadHTMLFile()` method to load the contents of the website into the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we precede the call to the `loadHTMLFile()` method with an `@`. This
    is not done to obscure bad coding (`!`) as was often the case in PHP 5! Rather,
    the `@` suppresses notices generated when the parser encounters poorly written
    HTML. Presumably, we could capture the notices and log them, possibly giving our
    `Hoover` class a diagnostic capability as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to extract the tags which are of interest. We use the `getElementsByTagName()`
    method for this purpose. If we wish to extract *all* tags, we can supply `*` as
    an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It might also be of interest to extract certain attributes rather than tags.
    Accordingly, we define another method for this purpose. In this case, we need
    to parse through all tags and use `getAttribute()`. You''ll notice that there
    is a parameter for the DNS domain. We''ve added this in order to keep the scan
    within the same domain (if you''re building a web tree, for example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use the new `Hoover` class, initialize the autoloader (described
    previously) and create an instance of the `Hoover` class. You can then run the
    `Hoover::getTags()` method to produce an array of tags from the URL you specify
    as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a block of code from `chap_01_vacuuming_website.php` that uses the
    `Hoover` class to scan the O''Reilly website for `<A>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on DOM, see the PHP reference page at [http://php.net/manual/en/class.domdocument.php](http://php.net/manual/en/class.domdocument.php).
  prefs: []
  type: TYPE_NORMAL
- en: Building a deep web scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you need to scan a website, but go one level deeper. For example,
    you want to build a web tree diagram of a website. This can be accomplished by
    looking for all `<A>` tags and following the `HREF` attributes to the next web
    page. Once you have acquired the child pages, you can then continue scanning in
    order to complete the tree.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A core component of a deep web scanner is a basic `Hoover` class, as described
    previously. The basic procedure presented in this recipe is to scan the target
    website and hoover up all the `HREF` attributes. For this purpose, we define a
    `Application\Web\Deep` class. We add a property that represents the DNS domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a method that will hoover the tags for each website represented
    in the scan list. In order to prevent the scanner from trawling the entire **World
    Wide Web** (**WWW**), we''ve limited the scan to the target domain. The reason
    why `yield from` has been added is because we need to yield the entire array produced
    by `Hoover::getTags()`. The `yield from` syntax allows us to treat the array as
    a sub-generator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of `yield from` turns the `scan()` method into a PHP 7 delegating generator.
    Normally, you would be inclined to store the results of the scan into an array.
    The problem, in this case, is that the amount of information retrieved could potentially
    be massive. Thus, it's better to immediately yield the results in order to conserve
    memory and to produce immediate results. Otherwise, there would be a lengthy wait,
    which would probably be followed by an out of memory error.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to keep within the same domain, we need a method that will return
    the domain from the URL. We use the convenient `parse_url()` function for this
    purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, go ahead and define the `Application\Web\Deep` class defined previously,
    as well as the `Application\Web\Hoover` class defined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, define a block of code from `chap_01_deep_scan_website.php` that sets
    up autoloading (as described earlier in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, get an instance of our new class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you can retrieve URL and tag information from URL parameters.
    The PHP 7 `null coalesce` operator is useful for establishing fallback values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Some simple HTML will display results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on generators and `yield from`, please see the article
    at [http://php.net/manual/en/language.generators.syntax.php](http://php.net/manual/en/language.generators.syntax.php).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PHP 5 to PHP 7 code converter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the most part, PHP 5.x code can run unchanged on PHP 7\. There are a few
    changes, however, that are classified as *backwards incompatible*. What this means
    is that if your PHP 5 code is written in a certain way, or uses functions that
    have been removed, your code will break, and you'll have a nasty error on your
    hands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *PHP 5 to PHP 7 Code Converter* does two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Scans your code file and converts PHP 5 functionality that has been removed
    to its equivalent in PHP 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds comments with `//` `WARNING` where changes in language usage have occurred,
    but where a re-write is not possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that after running the converter, your code is *not* guaranteed
    to work in PHP 7\. You will still have to review the `//` `WARNING` tags added.
    At the least, this recipe will give you a good head start converting your PHP
    5 code to work in PHP 7.
  prefs: []
  type: TYPE_NORMAL
- en: The core of this recipe is the new PHP 7 `preg_replace_callback_array()` function.
    What this amazing function allows you to do is to present an array of regular
    expressions as keys, with the value representing an independent callback. You
    can then pass the string through a series of transformations. Not only that, the
    subject of the array of callbacks can *itself* be an array.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new class `Application\Parse\Convert`, we begin with a `scan()` method,
    which accepts a filename as an argument. It checks to see if the file exists.
    If so, it calls the PHP `file()` function, which loads the file into an array,
    with each array element representing one line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we start passing a series of key/value pairs. The key is a regular expression,
    which is processed against the string. Any matches are passed to the callback,
    which is represented as the value part of the key/value pair. We check for opening
    and closing tags that have been removed from PHP 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next is a series of warnings when certain operations are detected and there
    is a potential code-break between how they''re handled in PHP 5 versus PHP 7\.
    In all these cases, the code is not re-written. Instead, an inline comment with
    the word `WARNING` is added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Any attempts to use `<<` or `>>` with a negative operator, or beyond 64, is
    wrapped in a `try { xxx } catch() { xxx }` block, looking for an `ArithmeticError`
    to be thrown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP 7 has changed how errors are handled. In some cases, errors are moved into
    a similar classification as exceptions, and can be caught! Both the `Error` and
    the `Exception` class implement the `Throwable` interface. If you want to catch
    either an `Error` or an `Exception`, catch `Throwable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the converter rewrites any usage of `call_user_method*()`, which has
    been removed in PHP 7\. These are replaced with the equivalent using `call_user_func*()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, any attempt to use `preg_replace()` with the `/e` modifier is rewritten
    using a `preg_replace_callback()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the converter, run the following code from the command line. You'll need
    to supply the filename of the PHP 5 code to be scanned as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'This block of code, `chap_01_php5_to_php7_code_converter.php`, run from the
    command line, calls the converter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on backwards incompatible changes, please refer to [http://php.net/manual/en/migration70.incompatible.php](http://php.net/manual/en/migration70.incompatible.php).
  prefs: []
  type: TYPE_NORMAL
