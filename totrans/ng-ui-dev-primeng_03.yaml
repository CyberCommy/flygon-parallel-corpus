- en: Enhanced Inputs and Selects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains frequently used input and select components with enhanced
    features for any kind of application or website. Such components are the main
    parts of every web application*.* All the features of each component will cover
    many real-time use cases that you may encounter while developing the project.
    Input and select components are the first citizens while you're creating a login
    form or registration form or any kind of form-filling application. Due to the
    rapid revolution in web usage and technology improvements, there is a need for
    various enhanced inputs and select components that make the web more powerful.
    PrimeNG provides over 20 components for data input and select, which extend standard
    or native HTML components with skinning capabilities and useful features, such
    as user-friendly interface, validation, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Formatted input with InputMask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autosuggestion with AutoComplete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entering multiple values with Chips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering checkbox - boolean, many, and TriState
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing items with Single and MultiSelect components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic and advanced Calendar scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinner and Slider - different ways to provide input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text editing with rich and powerful editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password and star-based rating inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation with input and select components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatted input with InputMask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'InputMask is a special kind of input component that minimizes the chances for
    the user to input incorrect data. It applies flexible validation with the provided
    masking template. This is especially useful to enter input in a certain format,
    such as numeric, alphanumeric, date, currency, email, and phone. A basic example
    of an InputMask component for a phone number input would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the preceding example, the mask value `(999) 999-9999` depicts that
    only a number can be input along with the parenthesis and dashed structure. Due
    to the usage of the placeholder with the same mask value, it suggests the kind
    of input format that needs to be provided. The initial display of the input looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20fb35dd-516b-4b16-95bc-db10403875b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the input gets the focus, the numbers in the mask format will be replaced
    with an empty space and the other characters will remain in the initial phase.
    The default placeholder character for mask is underscore (`_`), so it will display
    underscore characters for each number digit. After each `keyPress` event, the
    mask character (that is, `9`) will be filled up with the actual character. If
    the provided input is incomplete or blurred, then the entire input will be cleared
    out automatically (by default, `autoClear` is `true`).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are cases to do certain functionalities during the event occurrence in
    the component''s DOM tree. The `inputMask` component supports the `onComplete`
    callback to invoke when the user completes the mask pattern. For example, the
    user would be notified when the mask input completes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0605e836-3009-4bcc-a3b5-37f2f1c214e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The growl message appears at the top of the page with the close icon, which
    allows us to remove the sticky notification at any point in time.
  prefs: []
  type: TYPE_NORMAL
- en: Mask format options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mask` attribute is mandatory to use for the input mask. The component
    not only allows the number type, but it also supports alphabetic and alphanumeric
    characters, so the mask format can be a combination of the following built-in
    definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a`: Alphabetic character (`A-Z,a-z`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`9`: Numeric character (`0-9`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`: Alphanumeric character (`A-Z,a-z,0-9`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take an example where we can show the input mask with different mask
    options based on a radio button selection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the preceding example, only one input element will be displayed with
    the defined mask. The following screenshot shows a snapshot result of the mask
    format for a date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76c545e9-f1a4-466b-a312-95c38063ae7d.png)The `unmask` attribute
    can be used to control masked or unmasked output for the value bounded. For instance,
    it is useful if `ngModel` sets either a raw unmasked value or a formatted mask
    value to the component''s bound value.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the slot character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As stated before, underscore (`_`) is the default active placeholder in a mask.
    But this can be customized using the `slotChar` attribute, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `slotChar` option can be either a single character or an expression.
  prefs: []
  type: TYPE_NORMAL
- en: Making a part of the mask optional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Till now, all the examples of input masks have shown that all the characters
    in a mask are mandatory. It is also possible that you can make a part of the mask
    optional with the use of the question mark (`?`) character. Anything listed after
    the question mark within a mask definition will be treated as an optional input.
    A common use case is displaying the phone number with an optional extension number,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the user finishes the input by reaching the question mark character and
    blurs the component, the rest of the validation will be skipped. That is, the
    input up to that part won't be erased. For example, phone number inputs, such
    as `(666) 234-5678` and `(666) 234-5678? x1230` will be valid inputs for the mask's
    optional case.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask)'
  prefs: []
  type: TYPE_NORMAL
- en: Autosuggestion with AutoComplete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AutoComplete is an input component that provides real-time suggestions while
    the user types into the input field. This enables users to quickly find and select
    from a list of looked-up values as they type, which leverages the searching and
    filtering abilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic usage of the AutoComplete component includes the `suggestions` attribute
    to provide the list of all resulted items and `completeMethod` to filter items
    based on the typed query. For example, the following AutoComplete component displays
    the list of countries based on the user query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, `minLength="1"` is used as minimum characters for
    the input to query results. This will render the output as shown in the following
    snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e88eeb51-c9eb-469d-9613-dd666fb8bda4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the user types in the input field, the complete method will filter the items
    on demand. The method has to be defined in the component class, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method allows filtering of the list of countries based on the
    user query. In this case, it will filter all the countries that start with the
    `query` character.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the user experience, AutoComplete provides a drop-down option through
    the `dropdown` property. On clicking the drop-down icon, it will populate all
    possible items in a downwards popup immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With AutoComplete, it is also possible to select more than one value by setting
    the `multiple` property to `true`. With the help of multiple selects, the selected
    texts can be retrieved as an array (for example, the `countries` property). In
    this case, `ngModel` should refer to an array.
  prefs: []
  type: TYPE_NORMAL
- en: Working with objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, AutoComplete has shown its power on primitive types, but it can
    work with object types as well. The value passed to the model would be an object
    instance, but the `field` property defines the label to be displayed as a suggestion.
    That is, in this case, the `field` property is used to display any property of
    the object as a label. The following example shows the power of the object usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `Country` object is used as a model object instance
    and the suggestions displayed are from the country using the `name` field property.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced features - the customized content displays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many cases, normal field population is just not enough; it would be more
    powerful to have customized content for a better experience. AutoComplete provides
    this feature using `ng-template`, which displays the custom content inside the
    suggestions panel. The local `template` variable passed to `ng-template` is an
    object from the `suggestions` array. The customized example of AutoComplete with
    the country''s name and flag would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no restriction on what kind of data can be shown. The following screenshot
    shows a snapshot result of the customized country information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdc965b3-f85c-4525-bde7-c698f512c396.png)'
  prefs: []
  type: TYPE_IMG
- en: The `item` template is used to customize the content inside the suggestions
    panel where `selectedItem` is used to customize a selected item in the multiple
    selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AutoComplete component supports many events as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `completeMethod` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: The browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.query`: Value to search with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to `invoke` to search for suggestions. |'
  prefs: []
  type: TYPE_TB
- en: '| `onFocus` | `event`: Browser event | Callback to `invoke` when AutoComplete
    gets focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `onBlur` | `event`: Browser event | Callback to `invoke` when AutoComplete
    loses focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `onSelect` | `value`: The selected value | Callback to `invoke` when a suggestion
    is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onUnselect` | `value`: Unselected value in multiple mode | Callback to `invoke`
    when a selected value is removed. |'
  prefs: []
  type: TYPE_TB
- en: '| `onDropdownClick` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: The browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.query`: The current value of the input field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to `invoke` when the dropdown button is clicked. |'
  prefs: []
  type: TYPE_TB
- en: '| `onClear` | `event`: The browser event | Callback to `invoke` when the `input`
    field is cleared. |'
  prefs: []
  type: TYPE_TB
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete)'
  prefs: []
  type: TYPE_NORMAL
- en: Entering multiple values with Chips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Chip component is used to represent multiple complex entities in an input
    field as small blocks, such as contact information. A Chip may contain entities
    such as photo, title, text, rules, icons, or even a contact. This is useful to
    represent information in a compact way. The following basic example of the Chips
    component represents contact names in an order. By default, each entity can be
    deleted with the help of a cross icon or backspace keystroke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the company contact names
    as a Chip example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dd0108f1-1fed-4351-85d6-c3d63c02c101.png)'
  prefs: []
  type: TYPE_IMG
- en: The Chip component supports two event callbacks named `onAdd` and `onRemove`.
    These event callbacks will be invoked when adding and removing Chips from the
    input box, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Display complex information using template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Chip is customized using the `ng-template` element where the value is passed
    as the implicit variable. The content of `ng-template` consists of normal text,
    icons, images, and any other components. Remember that a customized Chip component
    doesn''t have a cross icon, that is, we can remove the Chip entry with backspace
    only. The customized example of the Chip component with icons would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, customized content is displayed with the company
    logo and the contact name. The following screenshot shows a snapshot result of
    the customized Chip example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9372e785-2633-4c4a-a944-244125d35968.png)'
  prefs: []
  type: TYPE_IMG
- en: The Chips' user entry actions will be controlled using the `max` and `disabled`
    properties. The maximum number of entries can be restricted using the `max` attribute.
    For example, if we set `max="5"`, it won't allow adding a sixth entry in the input.
    Whereas `disabed="true"` makes a disabled input, which restricts the Chips' entry.
  prefs: []
  type: TYPE_NORMAL
- en: The PrimeNG 4.1 release introduced `inputStyle` and `inputStyleClass` properties
    for customized input and the `allowDuplicate` property to control the duplicate
    inputs.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips)'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering checkbox - boolean, many, and TriState
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A checkbox is an extension to the standard checkbox element with skinning capabilities.
    The checkbox can either be used as a single checkbox to provide a Boolean value
    or in multiple selections with multiple checkboxes having the same group name.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean checkbox - single selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, multiple selection is enabled for the checkbox, and we can have
    a single selection by enabling the `binary` attribute. A basic example of a checkbox
    with a single selection would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the boolean checkbox is used to know the interest
    of Angular framework. The component will be displayed as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/16166cbd-2ff0-4d78-988b-77b8b339ca6b.png)'
  prefs: []
  type: TYPE_IMG
- en: The preselection of the checkbox is also possible by enabling the Boolean property
    in the model.
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox multiple selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the multiple selection is enabled by default with multiple
    checkbox controls having the same group name. In this case, the `model` property
    binds to an array to hold selected values. By assigning the individual checkbox
    values to the selected values, the checkbox group is displayed with preselection.
    The multiple checkbox selection for selecting different favorite Angular versions
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The checkbox group will be displayed with the default selection, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/399a8289-e05d-4fc9-820e-eaac9d3fb1f5.png)'
  prefs: []
  type: TYPE_IMG
- en: To notify the checkbox selections, there is one event callback named `onChange`
    that will be invoked on user actions. At the same time, the user actions are disabled
    through the `disabled` property.
  prefs: []
  type: TYPE_NORMAL
- en: Multistate representation - TriStateCheckbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PrimeNG goes beyond the normal checkbox behavior of the "true/false" selection
    on the web. In some cases, there is a need for a "true/false/null" combination,
    especially to represent the status of any entity. Remember that the `model` property
    is assigned to any type instead of a `boolean` type. A basic example of a TriStateCheckbox
    used to enter the feedback for Angular 4 would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'TriStateCheckbox will be displayed with three different states (excellent,
    good, and bad) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6522e2d-69f8-4268-9ae5-9704c0cfb550.png)'
  prefs: []
  type: TYPE_IMG
- en: This enhanced checkbox also provides the `onChange` event callback for any user
    interactions. The user actions are disabled through the `disabled` property, just
    like the normal boolean checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox)'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing items with single and MultiSelect components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dropdown provides a way to select an item from a collection of available options.
    To list out all possible options, we should use the `SelectItem` interface that
    defines label-value properties, and this list will bind to the `options` attribute.
    The two-way binding for selected items is defined through the `model` property.
    Let''s display a list of countries in a dropdown for user input. A basic example
    of a dropdown with the list of options would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The dropdown will be displayed with options as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9fe92969-59a4-468a-a080-77ce8e8664ee.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dropdown component provides three event callbacks, such as `onChange`, `onFocus`,
    and `onBlur`. When the dropdown value changes, it gets the focus and looses the
    focus, respectively. There is a provision to edit the input directly like any
    other input components using the `editable` property (that is, `editable="true"`).
  prefs: []
  type: TYPE_NORMAL
- en: The width and height of the dropdown's viewport will be controlled through the
    `autoWidth` and `scrollHeight` properties. By default, the width of the dropdown
    is calculated based on the options width. Whereas, the scroll height is controlled
    through the `scrollHeight` option in pixels, the scrollbar is defined if the height
    of the list exceeds this value.
  prefs: []
  type: TYPE_NORMAL
- en: Customized Dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Dropdown component is more powerful with customized content over the default
    label text of an item. The `filter` property is used to filter all the possible
    options through an input in an overlay. A customized example of a Dropdown with
    the list of options representing a country name and a flag image would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The dropdown will be displayed with the custom content and filtering as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3ba4fa39-0ecc-48aa-bbfd-656a5eabb8d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of scrolling down to see a list of all the countries, there is a filter
    input option at the top to filter country names by their starting letters. It
    also supports multiproperty filtering with comma-separated values (for example,
    `filterBy="label, value.name"`.) By default, filtering is done against the label
    of the `SelectItem` API.
  prefs: []
  type: TYPE_NORMAL
- en: The MultiSelect dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MultiSelect component is used to select multiple items from a collection,
    unlike the Dropdown component, which provides single item selection. A basic example
    of a MultiSelect component with the list of countries would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of options is available through collection of the `SelectItem` interface,
    which takes a label-value pair. The list of options is bound through the `options`
    attribute of the MultiSelect component. The MultiSelect will be displayed with
    the countries list, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9dc79414-33f0-468e-996f-346860b4f862.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the user can select multiple countries using the checkbox option,
    which is available for each item, and filter input to select specific options.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select)'
  prefs: []
  type: TYPE_NORMAL
- en: Basic and advanced Calendar scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Calendar is an input component that selects a date input in different customized
    ways, such as inline, localization, restricted to particular dates, and time-oriented.
    In this case, the Calendar model is backed by a date type property. The simplest
    component declaration for a basic date selection would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This displays an input textbox that, on being clicked opens up a pop-up date
    selection dialog, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4edf36c-ee34-4443-af12-f6e18e8c98b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Apart from the basic date selection, there is also a provision to navigate each
    month for each year with the help of left and right arrow controls at the top.
    This will be explained in the section on advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The date selection is straightforward and can be done by clicking on a particular
    date in the pop-up dialog. By default, the Calendar is displayed in a popup, but
    this behavior can be altered with the `inline` property. The inline version of
    the calendar display would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4adf4ae8-87b4-412f-96d8-5f1ef6245a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For a better user experience, there is one more option available from the component
    that displays the Calendar popup through the `showIcon` property. The Calendar
    input example, used with the icon button, would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f80be38d-b441-4a7c-86df-316694ef16d3.png)'
  prefs: []
  type: TYPE_IMG
- en: The visual display of the Calendar component with the `icon` attribute will
    change the default icon displayed next to the input.
  prefs: []
  type: TYPE_NORMAL
- en: Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Localization for different languages and formats is defined by binding the
    local settings object to the `locale` property. The default local value is `English`.
    To represent a different locale, we should provide the respective language text
    labels. For example, the German locale should provide the following labels for
    the German calendar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The calendar with German locale labels will be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7fd7d3e-11b9-4d55-b83f-133b82b2a593.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown before, the locale-specific labels need to be formatted as JSON in
    the backing component to display the locale-specific calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Time picker options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with standard calendar dates selection, we can also display time using
    `showTime` and `hourFormat`. This can be further restricted to display time only
    using the `timeOnly` attribute, which is just a time picker. For example, the
    `timeOnly` option will display the time picker as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a164876-0b8b-4c04-b2d6-c17b4a1574bf.png)'
  prefs: []
  type: TYPE_IMG
- en: The two time formats (12H Format and 24H Format) will be shown one at a time
    using the split button with both options. Note that the `showTime` property is
    enabled in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The advanced features of the Calendar component such as the date format (using
    the `dateFormat` attribute), restricted dates (using the `min` and `max` dates),
    month and year navigators for easy access (using the `monthNavigator`, `yearNavigator`,
    and `yearRange` attributes), readonly input (using the `readOnlyInput` property),
    and useful events, such as `onSelect`, `onFocus`, `onClear`, and `onBlur`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/89c878d9-c334-489b-bfe4-97a672c8c2b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding snapshot depicts a calendar that can be used with any possible
    combination of its features.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar)'
  prefs: []
  type: TYPE_NORMAL
- en: Spinner and Slider – different ways to provide input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The input component Spinner provides a numerical input via increments and decrements
    using controls or buttons. But still, there is an option to use it as normal `InputText`
    too. A basic example of a Spinner would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The Spinner will be displayed with button controls, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f2d6f7ed-4541-46f7-bf67-fcbe2945f05b.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the snapshot, the value can be modified serially using the Spinner
    controls. Just like any other input component, Spinner supports the `onChange`
    event callback, which will be invoked upon a value change. The maximum number
    of characters allowed can be controlled through the `maxlength` property. The
    user interaction will be restricted through the `readonly` and `disabled` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced features - going beyond basic usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spinner component provides more features than just having increment and
    decrement controls. It can provide features such as value boundaries with `min`
    and `max` attributes, customized step factors (by default step factor is `1`)
    using the `step` attribute, and number separators, such as `decimalSeparator`
    and `thousandSeparator`. The customized example of a Spinner would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The Spinner will be displayed with button controls, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c09f0c40-f52e-4f69-a3dc-f200c2f5622b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the user input reaches `min` and `max` limits, the value cannot be changed
    by either controls or input.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the input can be customized using the `formatInput` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Slider component provides the user with the ability to input a value by
    using a Slider bar or using the dragging of a handle. The `model` property binds
    to a number type, which holds the input value. The input can be attached to Slider
    by providing the same model value for both. A basic example of a Slider would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The Slider will be displayed with a dragging handle, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7cb7803-335c-458b-8ac6-7fda67c1d490.png)'
  prefs: []
  type: TYPE_IMG
- en: The output value will be updated every time the handle is dragged across the
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced features - going beyond basic usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Slider component can be further customized in a similar way to the Spinner
    with input boundaries, using `min` and `max` attributes or the `range` attribute
    to mention both the boundaries at the same time, customized step factors (by default
    step factor is `1`) using the `step` attribute, and the `animate` property to
    provide animations on the click of a Slider.
  prefs: []
  type: TYPE_NORMAL
- en: The default orientation of the Slider input is horizontal. The direction or
    orientation of the Slider can be changed to vertical using the `orientation` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, it is good to have regular input along with the Slider handle, because
    it gives you the flexibility to enter input directly and is also used to display
    output by dragging the Slider handle. The customized example of a Slider would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The Slider will be displayed with the customized features as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c8ee31e2-a10b-4b19-97ea-a10d6000bb19.png)'
  prefs: []
  type: TYPE_IMG
- en: The Slider input and Slider handle bar values are mutually dependent. For example,
    changing one value will reflect the other one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete demo application with instructions is available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text editing with rich editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An editor is a rich text editor (WYSIWYG ) based on the Quill editor. It contains
    a default toolbar with common options whose controls can be customized using the
    header element. The latest version of Quill 1.0 is used as a dependency for this.
    The basic text editor with a default toolbar can be represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The text editor with common options will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46809025-d217-419e-875e-8bdcf68b5982.png)1\. Add the Quill 1.0 dependency
    in `package.json` and install it, or use the CLI tool to install it (`npm install
    quill --save`).'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Also add the Quill script and style URLs in the entry page:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script src="https://cdn.quilljs.com/'
  prefs: []
  type: TYPE_NORMAL
- en: 1.0.0-beta.3/quill.min.js"></script>`
  prefs: []
  type: TYPE_NORMAL
- en: '`<link rel="stylesheet" type="text/css" href="https://cdn.quilljs.com/1.0.0-'
  prefs: []
  type: TYPE_NORMAL
- en: beta.3/quill.snow.css">`
  prefs: []
  type: TYPE_NORMAL
- en: The editor supports `onTextChange` and `onSelectionChange` events, which will
    be invoked when the text of the editor changes and when the selected text of the
    editor changes, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The customized editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As stated before, the editor provides a default toolbar with common options.
    The toolbar can be customized by defining elements inside the header element.
    For example, a custom toolbar created with text style controls would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The text editor with the customized toolbar will be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdbc87de-b4a2-42ed-a4d1-6b7329c7a485.png)'
  prefs: []
  type: TYPE_IMG
- en: The toolbar can be customized with any number of toolbar controls in different
    ways. Refer to the Quill documentation for all available controls.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor)'
  prefs: []
  type: TYPE_NORMAL
- en: Password and star-based rating inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Password is an enhanced input with a secured entry of characters, like any
    other password fields on the web, but it provides strength indicators (weak, medium,
    and strong), which states the security strength of the user input. A basic example
    of a user password can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of a basic password example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9c515c7c-83d4-49c8-a4ab-2bef29a881c3.png)'
  prefs: []
  type: TYPE_IMG
- en: The password is applied to the input field by attaching the `pPassword` directive.
    The `ngModel` property is used to bind the password value.
  prefs: []
  type: TYPE_NORMAL
- en: By default, password will display the prompt and strength indicator labels.
    There is an option to customize all the strength indicator labels with the help
    of attributes such as `promptLabel`, `weakLabel`, `mediumLabel`, and `strongLabel`.
    This will be helpful in localizing the password input according to the need. By
    default, the `feedback` attribute is `true`. The indicator labels appear once
    it gets the focus or key strokes in the input. But this behavior is altered by
    setting the feedback as `false`, which suppress the indicators for the input.
  prefs: []
  type: TYPE_NORMAL
- en: Rating input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Rating component provides a star-based rating with the ability to select
    and cancel. The basic declaration of the component would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the rating-bounded value should be a number type. The default visual
    of an Angular rating will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8179e89f-3cc3-452a-a243-35c028395ed6.png)'
  prefs: []
  type: TYPE_IMG
- en: The `star` attribute helps to provide the number of stars in the rating. The
    default value of star is `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The behavior of selecting and canceling the rating can be more interactive,
    and you can get notified with the help of `onRate` and `onCancel` callbacks. In
    the preceding snapshot, the rating value can be cleared with the cancel icon on
    the left-hand side. This is because, by default, the `cancel` attribute will be
    enabled. If the attribute is disabled then there is no chance of canceling the
    rating once it is selected. By disabling the `cancel` attribute, the rating snapshot
    will display without the icon, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6316c54-a238-48fc-afac-f6255993b6fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Due to this feature, the cancel button won't appear to cancel the given rating.
    Only one star can be deselected at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the Rating component doesn't support half or quarter values.
  prefs: []
  type: TYPE_NORMAL
- en: By enabling the `readonly` and `disabled` attributes on the Rating component,
    there is no way to select or cancel it. This can be useful for display purposes
    only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete demo application with instructions is available on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)
    [](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation with the input and select components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular provides three different ways of building forms in our applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template-driven approach**: This approach allows us to build forms with very
    little to no application code required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-driven (or reactive) approach using low-level APIs**: In this approach,
    we create our forms as testable without a DOM being required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-driven with a higher level API**: This approach uses a higher level
    API called `FormBuilder`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PrimeNG created most of the input and select components with model-driven form
    support. Because of this, all input and select components are eligible for validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of a registration form with `firstname`, `lastname`,
    `password`, `address`, `phone`, and `gender` fields with validation support. PrimeNG
    components are backed by a model-driven API with `FormBuilder`, which groups all
    of the form controls to create a registration form, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'HTML, however, contains the `form` element with a `formGroup` binding with
    the registration form. The form will wrap with the list of controls and validation
    conditions to display messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A registration form with invalid input would result in an error messages, as
    shown in the following snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '*![](assets/7a377c97-5548-4270-a8c4-231603d4dbdb.png)*'
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG components provide validations through template-driven forms, as well
    as model-driven forms. The flexibility is given to the user on what kind of validation
    needs to be provided.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, you will be able to seamlessly use all available
    input and select components for any given use case. Initially, we covered all
    kinds of input components. At first, we started with formatting input with InputMask,
    autosuggestion with AutoComplete, and entering multiple values using Chips components.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we discussed the various checkbox components, such as the boolean
    checkbox, many checkbox, and TriState checkbox variations. Later, we discussed
    the frequently used select components, such as the single and MultiSelect components.
    The special use case-specific input components, such as Calendar date entry, Slider,
    Spinner, password, star, and text editing using rich editors we explained, with
    all the possible features. Finally, we ended this chapter by looking at validation
    with input and select components. All these components and all possible features
    were explained in a step-by-step approach.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you are going to see how the various kinds of Button and
    Panel components are going to make your life easier.
  prefs: []
  type: TYPE_NORMAL
