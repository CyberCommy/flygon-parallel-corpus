- en: Git - The Version Control System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nowadays, software development has reached a new level. It no longer only involves
    writing code—a software developer now also has to be familiar with a range of
    important tools. Without these tools, it becomes very difficult to work in a team
    or to work efficiently. Version control is one of these tools. Of the various
    version control systems available, Git is the most popular and powerful. Git version
    control has been in the industry for quite a long time, but has recently become
    a part of almost all software companies. Knowing Git is now essential for developers.
    In this chapter, we will learn about Git version control systems. Let''s take
    a look at the topics we are going to cover:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a version control system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Git works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Git in Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Branches in Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is version control?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A version control system is a system or application that keeps track of software
    code changes during development. Software developers used to keep backups of their
    code by copying the code into another folder or machine. If the developer or production
    machine crashed, they could take the code from the backup and run it. However,
    manually keeping and maintaining backups is troublesome and prone to error, and
    backup systems are vulnerable to corruption. For this reason, developers began
    looking for a system or application that could keep their code safe.
  prefs: []
  type: TYPE_NORMAL
- en: Version control is also useful in situations where more than one programmer
    is working on a project. In the past, programmers had to either work on different
    files to avoid conflicts or carefully merge the code after some time. Manually
    merging code is very risky and time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: In a version control system, every change in a code file is actually a new version
    of the code. In the software industry, there are many version control systems
    available, including Git, Subversion, Mercurial, and Perforce. Git, the most popular
    version control system, was developed by the software developer Linus Torvalds.
    It is a remarkable application that is now used in almost every software company
    in the world.
  prefs: []
  type: TYPE_NORMAL
- en: How Git works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main task of Git is to keep track of code versions and allow developers
    to go back to any previous state if necessary. This is done by taking a snapshot
    of every version and maintaining it in a local file storage system. Unlike other
    systems, Git uses local file storage to store snapshots, which means that Git
    can be used locally—even without an internet connection. With the local version
    of Git, you can do almost everything that you can do with an internet-connected
    version of Git.
  prefs: []
  type: TYPE_NORMAL
- en: After you install Git in your project, you can choose which directory of your
    filesystem you want to keep under Git version control. Normally, a project or
    directory—which is one entity in Git—is called a **repository**. A repository
    might contain different projects, one project, or just some of the project files,
    depending on what you want to keep in Git version control. There are two ways
    that you can have a Git repository on your local machine. Either you can initialize
    a Git repository by yourself, or you can clone a repository from a remote server.
    Either way, you will create a folder called `.git` in the same folder in which
    the repository was created or cloned. This `.git` file is the local storage file,
    and all the information related to that repository will be stored there. Git stores
    data in a very efficient manner, so the file won't get very big, even if you have
    tons of snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main states in Git, which we will explore in the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have a Git repository initialized and then add a new file or edit an
    existing file, that particular file will be marked as Modified in Git. This means
    that the file contains some changes from the already stored snapshot that Git
    has in its local storage/database. For example, if you create a C# console app
    project in a Git repository, then all the files of that solution will be marked
    as Modified, as none of them are available in the Git repository history.
  prefs: []
  type: TYPE_NORMAL
- en: Staged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Git, Staged refers to files that are ready to be committed. To prevent accidental
    commits of unwanted files to the Git repository, Git introduced this step between
    Modified and Committed. When you mark files as Staged, this means that you want
    those files to be committed in the next commit. This also gives you the option
    to edit files and not make them Staged so that the changes won't be saved in the
    repository. This feature is very handy if you want to apply some configurations
    in your local machine, but don't want those changes in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Committed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Committed state is when a version of a file is saved in the local database.
    It means that a snapshot is taken and stored in the Git history for future reference.
    When working with the repository remotely, the code that you will push is actually only the
    committed code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following diagram to understand the flow between
    these states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1dcec2a-3c29-49cb-a6ba-66f479de78ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Git on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git was primarily developed for Linux- or Unix-based operating systems. When
    it grew in popularity and Windows users started to demand Git, Git for Windows
    was launched. Installing Git on Windows is now a very easy process. To install
    Git, go to [https://git-scm.com/download/win](https://git-scm.com/download/win).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be taken to the page shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9c46f12-f598-401c-b98f-be26af4608c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Git for Windows should start downloading automatically. If it doesn't start,
    you can click on the links given on the website. The download file will be an
    executable file, so to start installation, execute the executable file. During
    installation, if you are not sure what to choose, the best option here is to keep
    everything as default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows which components you can install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad9369d6-e2e5-4c3a-9228-8f271256a146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a section in which you can choose the default editor to be used for
    Git. The default editor that is chosen is Vim, as shown in the following screenshot.
    If you are not used to using Vim, you can change it to your preferred one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/414ae3e5-f6db-4317-88ed-8c6832b39bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow the steps. After Git is installed, to test whether the installation
    was successful, go to the command line or PowerShell and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcab6f8b-19bd-42a5-8411-ff126aa10c0c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you can see the version number, this means that the installation was successful.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, Git was first developed for Linux systems, which is why the main
    way of using this tool is through the command line. On Windows, we don't use the
    command line as much as a Linux or Unix user, but using it gives you access to
    all the features of Git. For Windows, there are some GUI tools that can be used
    for Git actions, but they often have some limitations. As the command line is
    the preferred method for Git, we will cover only the command-line commands in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Git config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `git config` command is a command that is used to configure your Git settings.
    The minimum setting for Git is to set a username and email address. You can either
    configure each Git repository differently or configure the settings globally.
    If you set the configuration globally, you don't have to configure the email address
    and username every time you initialize a Git repository. You can always override
    these in each repository if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure your email address and username, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to set the configuration globally, you need to add the `--global`
    keyword, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to see what other global configuration settings are available,
    you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can then change the settings that you want to change.
  prefs: []
  type: TYPE_NORMAL
- en: Git init
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have a project that is not currently using Git version control, you
    can use the following command to initialize the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When you run the preceding command, the Git program that you have installed
    in your machine creates a `.git` directory in the project directory and starts
    tracking the source code of that project. After you initialize Git in a new project,
    all the files are displayed as Modified and you have to stage those files to commit
    those changes.
  prefs: []
  type: TYPE_NORMAL
- en: Git clone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to use a project that is on a remote server, you have to clone
    the project. To clone a project, you have to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you want to clone the Angular project, you have to type the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you clone a repository to your local environment, the `.git` folder is
    downloaded. This includes the history of commits, branches, tags, and all other
    information contained in the remote server. It is basically a copy of a version
    of the remote server. If you commit a change in your local copy and then push
    it to the remote repository, then your local copy will sync with the remote copy.
  prefs: []
  type: TYPE_NORMAL
- en: Git status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While working, you will want to check the status of your current code. This
    means finding out which files are Modified and which files are Staged. You can
    get all of this information by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at an example. If we add a new file called `hello.txt` to
    our project, which is tracked by Git, and check its status, we will see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f99a31f5-fdff-4be7-98c6-d58b8ab02b59.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see a file called `hello.txt` under `Untracked` files, which means
    that this file is not yet tracked by Git. The `git status` command also tells
    you which branch you are currently in. In this case, we are in the `master` branch.
  prefs: []
  type: TYPE_NORMAL
- en: Git add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `git add` command is a command that will add Modified files/folders to
    the Git tracking system. This means that the files and folders will be staged.
    The command looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s continue with our example to see what happens when we add the `hello.txt`
    file in Git. To do this, we will execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8032b4ee-0843-4aeb-b19b-a149a140fa86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we see a warning about **line feed** (**LF**) and **Carriage Return****,
    Line Feed** (**CR+LF**), which refer to some kind of formatting. The reason for
    the replacement is that we are using the Windows operating system here, but we
    don''t need to worry about that for the time being. The main point here is that
    the file has been staged properly. Now, if we check the status, we will see the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a59cee9-dde1-42e9-a8ce-930e2605be3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that the `hello.txt` file is placed in the `Changes to be committed` section.
    This means that the file has been staged.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real project, you might work on several different files at a time before
    you stage the files. It could be very tedious to add the files one by one, or
    even to write the file names separated by commas. If you want all your modified
    files to be staged, you can use the following command to add all files in the
    staged area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Git commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `git commit` command is used when you want to commit your code to the Git
    history. This means taking a snapshot of your code base and storing it in the
    Git database for future reference. To commit files/folders, you have to use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you execute the preceding code, the default editor that was set for Git
    will open up and ask you to enter a message for the commit. There is also a shorter
    way of doing this. If you want to enter a message directly with the commit, you
    can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now commit our `hello.txt` file in our Git repository. To do this, we''ll
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6f675f4-c355-4775-9caf-5b231eb7ebee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the successful commit, we will see the line `1 file changed, 1 insertion(+)`.
    If you check the status again, you will see that there is nothing to commit, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06f99414-18c3-4c4d-9563-e8e392f14451.png)'
  prefs: []
  type: TYPE_IMG
- en: Git log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check which commits have been made in the repository, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91189c17-7afe-4f05-8189-a4e5fc5facaa.png)'
  prefs: []
  type: TYPE_IMG
- en: From the log, we can see that only one commit has been made so far. We can see
    the hash of the commit, which is the number next to the word `commit`. We can
    see that the `commit` was made on the `master` branch by `Raihan Taher`. We can
    also see the `commit` message in the log. This is a very helpful command to check
    what has been committed.
  prefs: []
  type: TYPE_NORMAL
- en: Git remote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `git remote` command is used to see whether you have any connections with
    a remote repository. If you run the following command, it will show you the name
    of the remote repository. Normally, the remote name is set as `Origin`. You can
    have multiple remote repositories. Let''s take a look at the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute this command, we won''t see anything as there is no remote repository
    yet, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af4087a5-badb-455e-9239-cc7b52d4179d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a remote repository. We will use GitHub as our remote server. After
    creating a repository in GitHub, I have copied the URL of that repository. We
    will add it to our local repository. To do this, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In our example, the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After we add our remote repository, if we execute `git remote`, we will see
    that the `origin` is listed as a remote repository, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75dade12-09c0-4fab-9c49-18cc47759a1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to see a little more detail about the remote repository, you can
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display the URLs of the remote repositories that you have added,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b198c049-5136-47e6-bb2c-2365a95d3337.png)'
  prefs: []
  type: TYPE_IMG
- en: Git push
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to upload or push your local commits to the remote server, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of how to use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After you execute this command, should the push be successful, you will see
    a message that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed93b671-65e1-4fe7-bc73-be880541f6d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Git pull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `git pull` command is used when you want to get the latest code from the
    remote repository. As Git is a distributed version control system and multiple
    people can work on a project, there is the possibility that someone else has updated
    the remote server with the latest code. To access the latest code, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of how to use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this code, the message that pops up is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e561a54b-2ebf-496b-a114-8ebf58e41f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that our local repository is up to date with the remote repository.
    If there were new commits in the remote repository, the `git pull` command would
    pull those changes to our local repository and indicate that changes have been
    pulled.
  prefs: []
  type: TYPE_NORMAL
- en: Git fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `git fetch` command is a very similar command to `git pull`, but, when
    you use `git fetch`, the code will be fetched from the remote repository to the
    local repository, but it won''t be merged with your code. After checking the remote
    code, if you feel like you want to merge it with your local code, you have to explicitly run
    a `git merge` command. The command to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the preceding command, all the branches from the remote repository
    will be updated. If you specify a local branch, only that branch will be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to execute a `git fetch` command in our example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/032f5867-815b-48f5-be9d-d4d7a5048c59.png)'
  prefs: []
  type: TYPE_IMG
- en: Branching in Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Branching is often thought of as one of the best features of Git. Branching
    has made Git distinct from all other version control systems. It is very powerful
    and easy to use. Before we learn about the different branching commands, let me
    explain briefly how Git deals with commits, because that will help you understand
    Git branches. In Git, we already know that every commit has a unique hash, and
    that that hash is stored in the Git database. With the hash, every commit stores
    the hash of the earlier commit, which is known as the parent of that commit. As
    well as this, another hash that stores the files that were staged on that commit
    is also stored, along with the commit message and information about the committer
    and the author. For the first ever commit of a repository, the parent commit is
    empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows an example of hashing in Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dcb22af-ba87-4a31-a293-9ac6079c582c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We call all the information in a commit a snapshot. If we have made three commits,
    we can say that we have **Snapshot A**, **Snapshot B**, and **Snapshot C**, one
    after another, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3df485a8-2ee2-4921-8b23-a4fde0b38713.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, when you initialize a local Git repository, a branch called `master` is
    created. This is the branch that most developers treat as the main branch in a
    Git tree. This is optional; you can treat any branch as your main branch or production
    branch, as all branches have the same capacity and power. If you create a branch
    from **Snapshot C** (**Commit 3**, or **C3** for short) and name it `feature`,
    a branch will start from **C3 **(**Commit 3**) and the next commit on the testing
    branch will treat C3 as the parent commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the branching:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce4743a5-97e8-4c76-aa3f-7a4ec0caaf3e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**HEAD** is a pointer that points to the active commit or branch. This is an
    indicator for the developer, as well as for Git version control. When you make
    a new commit, the HEAD moves to the latest commit, as that is the snapshot that
    will be created as a parent for the next commit.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now take a look at the command to create a branch in Git. Creating a
    branch is very easy, because it doesn''t copy the whole code base to a new place,
    but only keeps a relationship with the Git tree. There are a few ways to create
    a branch, but the most general way is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This should look as follows on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2404d53-01bc-4c4d-9803-5381da16d2b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing available branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view which branches are available in the local Git repository, you can write
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the preceding code, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcca175f-04b5-490c-b504-b81c3b9a8ecc.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have two branches in our local repository. One is the `master`
    branch and the other is the `feature` branch. The `* `character indicates where
    the HEAD is pointing.
  prefs: []
  type: TYPE_NORMAL
- en: Changing branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we saw that, even after creating the feature branch,
    the HEAD is still pointing to the master. The command to switch to another branch
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In our example, if we want to change from the `master` to the `feature` branch,
    we have to write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5034adf-dd2e-4103-afde-9d72df501e53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After running the command, we can see that Git has switched to the `feature`
    branch. Now we can run the `git` `branch` command again to see where the HEAD
    is pointing, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7e605d1-aa7c-48ae-a8a9-4296f745c73f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The likelihood is that, when you create a branch, you will want to work on
    that branch straight away, so there is a shortcut to create a branch and then
    switch to it, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a branch, you have to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If the branch is deleted successfully, you should see a message similar to
    the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/575435ef-b9ac-40f5-b244-bf367d2abe0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Merging in Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To merge one branch with another, you have to use the `merge` command. Remember
    that you need to be on the branch that you are going to merge the code with, not
    the branch that is going to be merged, or any other branch. The command is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34f6e505-44e1-4d6d-b5f0-18bf24f25099.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about a concept that is not directly related
    to the C# programming language, but which is nonetheless an essential tool for
    C# developers. Microsoft has recently purchased GitHub, the biggest remote code
    repository website based on Git, and integrated most of the Microsoft IDEs/editors
    with it, including the newest code editor, Visual Code. This shows just how important
    Git has become to our industry. I believe that every developer, new or senior,
    should use version control for their code. If you don't use Git, you can use any
    other version control system on the market. Git, however, is the best, even if
    you are not using Git in your workplace, I would recommend that you use it in
    your personal projects. Git commands are very simple, so you'll only need to practice
    with it a few times before you understand it completely.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is a little different. We will look at some questions that
    are commonly asked in job interviews.
  prefs: []
  type: TYPE_NORMAL
