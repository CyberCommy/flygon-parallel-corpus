- en: Chapter 4. Remote Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have gathered our data, reviewed the information and chosen a few possible
    targets for the next stage in our penetration test. Now it is time to go the extra
    mile and prove that the vulnerabilities found have a potential to impact the bottom
    line. After all, this is what your clients need to know and understand about their
    environment. In this chapter, we will quickly review the basics of exploitation
    and then move on to the more interesting techniques and methods that will let
    us understand the true security posture of the network environment we are testing.
    Items of interest discussed in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a vulnerable machine to our sandboxed virtual network enables you to
    follow along with the examples presented in the book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling and/or rewriting proof of concept exploit code found on the Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually exploiting a remote vulnerability using publically available exploit
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring files to and from the victim machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password cracking with John the Ripper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing with THC Hydra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit — learn it and love it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation — Why bother?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a good possibility that your potential clients will not understand
    the benefits of performing a full penetration test. Simply enumerating the known
    vulnerabilities in a network environment is not sufficient to truly understand
    the effectiveness of the corporation's combined security controls; be prepared.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick listing of common benefits that full exploitation provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Takes the guess work and doubt out of the equation:** By providing proof
    that critical infrastructure devices were compromised, and thus confidential data
    could have been leaked, altered, or made unavailable, the problem becomes "real"
    and the management team will have the necessary details needed to take steps towards
    remediation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validates mitigating controls actually...mitigate:** Rather than blindly
    accepting that a theoretical mitigating control actually works a full exploitation
    penetration test enables management to prove the security measures are working
    as intended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Finds easily overlooked holes in the security architecture:** Administrators
    of secured environments may falsely assume that the confidentiality, integrity,
    and availability of their confidential data is being protected by the various
    layers of security they have in place. Unfortunately, all of these security measures
    have the inherent risk of making things more complicated, and thus introducing
    new possibilities for attackers to take advantage of vulnerabilities. Full exploitation
    penetration testing validates that there are no unknown security flaws that have
    been introduced into the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many other reasons of why a quick health check of the network via
    a full penetration test can be useful to a business (besides the fact that a checkbox
    can be checked). When meeting with business owners or managers try to understand
    what is important to their bottom line and try to determine how your skills and
    services fit in.
  prefs: []
  type: TYPE_NORMAL
- en: Target practice — Adding a Kioptrix virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing is a skill that takes practice to be perfect. To encourage
    the absorption of the material within this chapter we will be adding a intentionally
    vulnerable Linux distribution that has been made available by Steven McElrea (aka
    loneferret) and Richard Dinelle (aka haken29a) of the [www.kioptrix.com](http://www.kioptrix.com)
    team. Head over to the [http://www.kioptrix.com](http://www.kioptrix.com) website,
    choose your language of choice, and then click on the **Kioptrix VM Level 1**
    link to the right of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Target practice — Adding a Kioptrix virtual machine](img/7744_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the download has been completed and the files have been extracted to a
    folder of choice, we will need to create a new virtual machine in our Oracle VirtualBox
    penetration testing lab and direct it to use the virtual machine we have downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Kioptrix VM Level 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS Type: Other Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory: 256'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Startup Disk: Kioptrix Level 1.vmdk (Normal, 3.00 GB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be sure to select the **Use existing hard disk** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Target practice — Adding a Kioptrix virtual machine](img/7744_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the process has been successfully completed you should verify that your
    settings match the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Target practice — Adding a Kioptrix virtual machine](img/7744_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although we will be addressing some complex methods and techniques it is best
    to use a simple mechanism to truly understand how our exploits are working. By
    removing complexity we can focus on the lesson rather than time consuming troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Kioptrix Level 1 Virtual machine will grab an IP address from your DHCP
    server. If you have not already done so, you can enable the built-in DHCP server
    that comes preinstalled with your Oracle virtual box. You can configure this by
    using the command-line VBoxManage tool located in the Oracle virtual box. Here
    is an example of the `dhcpserver` add command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VBoxManage dhcpserver add netname Wlan1 ip 192.168.75.100 netmask 255.255.255.0
    lowerip 192.168.75.101 upperip 192.168.75.150 enable`'
  prefs: []
  type: TYPE_NORMAL
- en: The previous command will cause virtual box to provide DHCP services for network
    adapters attached to the `Wlan1` network. Any system requesting an IP on the internal
    network `Wlan1` will receive an address between `192.168.75.101` and `192.168.75.150`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE:** On OSX the command will require double tack for each option used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more thorough description of the VboxManage tool visit: [http://www.virtualbox.org/manual/ch08.html](http://www.virtualbox.org/manual/ch08.html).'
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with many of the examples in this chapter you will need to have
    Kioptrix up and running. Start up VirtualBox, point a network adapter on the Kioptrix
    and Backtrack Tester 1 sessions to Wlan1 and start both up. It is time to review
    some basic exploitation methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the `dhclient <interface name>` command to pick up a DHCP address BackTrack
    machine. Example: `dhclient int0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point we should have two systems ready to go in our virtual environment:
    Our Kioptrix Level 1 machine which will be our target as well as our BackTrack
    machine which will be taking on the role of attacker. Before we can start with
    exploitation we need to determine our plan of attack.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual exploitation](img/7744_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enumerating services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will begin by locating the machine on our network using `nmap`. Open up
    a new terminal session and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We have instructed `nmap` to scan all TCP ports for IPs on 192.168.75.X using
    **fragmented** packets. Here is an excerpt of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the highlighted section. You will notice that our target machine
    has several open TCP ports `22, 80, 111, 139, 443`, and `32768`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the system is up, and results indicate that several services
    are running, we have many choices. We could use `netcat` or another similar program
    to manually probe these ports to get more information and possibly grab some banners,
    or we could start with performing a more thorough scan on the target machine in
    question.
  prefs: []
  type: TYPE_NORMAL
- en: Quick scan with Unicornscan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Keep in mind that there are many available options to consider when choosing
    tools. Unicorn scan is a very fast scanner that can quickly scan the virtual lab
    for us. If your version of Backtrack does not have unicornscan installed use the
    following command syntax: `apt-get install Unicornscan` before attempting any
    of the following examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In BackTrack 5 R1 you must copy the `GeoIP.dat` file to your `etc` directory
    to avoid an error. You can perform the following command to resolve the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will scan all TCP ports (`-mT` which is the default scan
    type) on the `192.168.75.0/24` segment using `500` packets per second (`-r500`).
    We have instructed the command to provide us information as it is received with
    the (`-I`) option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also scan for open UDP ports to complete the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output on this particular virtual network (your
    scan results will vary based on your current lab setup):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Review the highlighted results from the previous output carefully. This information
    will be used to determine which attacks are performed against the targeted system.
  prefs: []
  type: TYPE_NORMAL
- en: Full scan with Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we know which system we will be targeting, let''s find out what a
    targeted `nmap` scan will provide for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we decided to go with a UDP and TCP scan of our open ports to determine
    their **STATE**. We use the `-sTUV` switch to notify nmap that we are looking
    for UDP and TCP and provide software versions; we then specify the range using
    the `-p` option followed by ports we would like to scan. `U:` designates that
    the ports are UDP. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we have something that we can work with. We know which ports are open, and
    we have a good idea of which services are running.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note the OS: Windows result indicates that this is a Windows machine, which
    it clearly is not. It is very important to review all of the data to make these
    determinations and not rely solely on one result.'
  prefs: []
  type: TYPE_NORMAL
- en: If you review the results you may note that there are many outdated services
    running on this machine. We will take advantage of this fact and use commonly
    known exploits to compromise the unit. We may want to manually validate these
    results. We will try to grab some banners now to see what we are dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: Banner grabbing with Netcat and Ncat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Netcat is a very powerful tool that can be used during the enumeration and exploitation
    stages, and can even be used to transfer files or to create backdoors. We also
    compare Netcat to Ncat which is one of the offerings provided by the Nmap team.
  prefs: []
  type: TYPE_NORMAL
- en: Banner grabbing with Netcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to connect to port `80` on `192.168.75.14` we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will connect us to the web server on the Kioptrix machine. We need to
    invoke a command to receive informational output. Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *Enter* two times and take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This should look familiar. We have already discussed the benefits of HTTP headers;
    the information above indicates that the machine is running Apache 1.3.20, RedHat
    Linux, using `mod_ssl` version 2.8.4 and `OpenSSL` version 0.9.6b.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to note down any actions taken during your testing. This
    will assist you in future conversations with clients and also allows you to easily
    replicate your testing at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: This process can be continued with the other ports as well.
  prefs: []
  type: TYPE_NORMAL
- en: Banner grabbing with Ncat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ncat can also be used to grab the `http` banner. This is how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Ncat uses the same syntax Netcat for this connection. Type the following and
    press *Enter* two times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We are presented with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: A quick search for `mod_ssl/2.8.4` on `google.com` would indicate there are
    vulnerabilities that we could take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: Banner grabbing with smbclient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One particularly interesting port that stands out is 139/TCP. With the `smbclient`
    tool we can grab the banner of this server. Let''s give it a try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This command invokes `smbclient` and directs it to connect to `192.168.75.14`
    to then display the server information. The `-N` switch indicates that we do not
    have a root password for this connection. This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `Samba` version is at `2.2.1a`. We will use this information to
    search for any known exploits for this service.
  prefs: []
  type: TYPE_NORMAL
- en: Searching Exploit-DB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At `Exploit-DB.com` you will be able to find a wealth of information about known
    vulnerabilities and the proof of concept code that validates their effectiveness.
    Using the proof of concept code that is made available allows you to determine
    if your particular software is susceptible to these attacks. Proof of concept
    code also provides a mechanism to understand the underlying principles of individual
    vulnerabilities, thereby enabling you to ensure that your mitigating controls
    are functioning properly. The team at `Exploit-DB.com` spend many hours of their
    personal time ensuring that the submitted proof of concept code actually works
    as described.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are attempting to access this website from within your sandboxed virtual
    lab you will need to make sure you have a network adapter set up on your BackTrack
    box that allows for this. It is recommended that you do **not** connect your lab
    to the Internet in any fashion however. There are several secure methods of transferring
    files to you guest machine — try them out!
  prefs: []
  type: TYPE_NORMAL
- en: Let's perform a search for vulnerabilities associated with Samba version 2.2.1a.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.exploit-db.com](http://www.exploit-db.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Search` in the top navigation bar.![Searching Exploit-DB](img/7744_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once on the search page type **Samba** in the **Description:** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **139** in the **Port:** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **SEARCH** button.![Searching Exploit-DB](img/7744_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any results, you will be presented with a list of vulnerabilities
    that matched your search. We need to look at these results and see if any look
    like they will suite our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit-DB at hand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One really awesome aspect of using BackTrack is that the team automatically
    includes a local copy of the `exploit-db.com` database as part of the distribution.
    You can search this list by going to `/pentest/exploits/exploitdb` and using the
    `./searchsploit` command followed by the search term.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Which results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We will give `Samba 2.2.8 Remote Root Exploit - sambal.c` located at `/linux/remote/10.c`
    a try. This particular exploit has been coded using the C language and as such
    must be compiled prior to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command will copy the file to our directory of choice, `/root` in this
    case, making it easier to work with. There may be times that the file will immediately
    compile; in which case, you can simply run the following command and move on to
    the next stage.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Be cautious!**'
  prefs: []
  type: TYPE_NORMAL
- en: It is critical that you understand the code you are compiling. At this point
    we are testing against a confined lab environment, but when it comes time to start
    performing these tasks in a setting that is connected to the outside world it
    is crucial that the code is both clean and from a trusted source. You should understand
    every stage of the exploit code before you try it against someone else's network.
    Many agree that the best thing is to create your own shellcode for manual exploitation
    so that you know exactly what will happen when you run it. Before throwing this
    type of code at a live production, unit test it out in your own contained virtual
    environment to fully understand the impact of the code you are running especially
    if your exploit of choice includes shellcode.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here we will try to compile 10.c without any modification after reviewing the
    code. The steps performed here are similar for each type of exploit code that
    has been written using the C language.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Review this code. Scroll through it and see if you can understand what will
    happen when this code is run.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not familiar with VIM there are several sites that offer a great
    review of this complex yet powerful tool. Packt Publishing also has *Hacking VIM
    7.2* available for purchase if you want to learn much more about it in a concise,
    practical manner. For now, when you are in VIM you can use `:q` to exit back to
    the shell prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiling the code](img/7744_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compiling the proof of concept code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the code has been reviewed, try to compile it. Exit out of VIM using the
    `:q` command sequence and type the following at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are invoking the GCC compiler and feeding our 10.c source code file to be
    processed and outputed to the file `SambaVuln`. If everything works as planned
    you will not receive any feedback and the command prompt will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some believe that the difficulty of compiling a proof of concept exploit will
    reduce the number of script kiddies that are out there as they lack the skills
    to troubleshoot the code.
  prefs: []
  type: TYPE_NORMAL
- en: Some security researchers may even add intentional errors such as typos to discourage
    script kiddies from putting the Proof of Concept code to malicious use.
  prefs: []
  type: TYPE_NORMAL
- en: If you do have any problems with the compiling you will need to take a closer
    look at the code and work out the issues before it will compile properly.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The types of errors that you may come across include code that has improper
    commenting, extra characters, invalid formatting, or even invalid code intentionally
    entered into the code to make it more difficult for someone new to compile.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a common problem that seems to occur when using code directly
    from a repository.
  prefs: []
  type: TYPE_NORMAL
- en: What are all of these ^M characters and why will they not go away?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You may look at your code and realize that you have a few (or many!) unwanted
    characters such as ^M and regardless of your efforts they will just not go away.
    You can use VIM to solve this problem for you by opening your offending file in
    VIM and typing `:%s/`, pressing *Ctrl + V* then *Ctrl + M* followed by `//g` which
    results in the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then press *Enter*. This instructs VIM to remove all occurrences of **^M**
    in the entire file (%s). Here is an example of what we will be removing using
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What are all of these ^M characters and why will they not go away?](img/7744_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Broken strings — The reunion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At times the code will be formatted incorrectly. It is important to note that
    this will make it very difficult for GCC to process. Go through the code and ensure
    that everything is as it should be.
  prefs: []
  type: TYPE_NORMAL
- en: '![Broken strings — The reunion](img/7744_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the code has been reviewed and errors have been corrected try to compile
    it again until there are no further errors.
  prefs: []
  type: TYPE_NORMAL
- en: Running the exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hopefully the previous step was rather painless; cleaning up code that others
    have made available can be a cumbersome process. If the exploit code compiled
    properly we can simply execute it to see what other inputs are expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We know several key items about our target machine already, including that
    it is most likely running Linux, and that the IP address is 192.168.75.14\. Let''s
    use the scanning mode of the exploit to see if there is anything interesting we
    missed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We can see that our target machine is found by the proof of concept remote root
    exploit by `eSDee` at [www.netric.org](http://www.netric.org). Now we will move
    forward and finally exploit the machine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We invoke the `SambaVuln10` file; let it know that the target system is Linux,
    and provide instruction to display verbose results. The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are new to pentesting, this output may be a bit confusing. You have
    just managed to gain root access on the target machine and can at this point begin
    many of the post-exploitation steps that are usually required to get a good foothold
    in the network. You will notice that some commands do not work and some do. Try
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Hmm… nothing happens. Maybe you did not actually get root? Let's try something
    different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: That's more like it! Now you should see a full directory listing of `/`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many other commands that you can use at this time, and there are
    tricks of the trade in post-exploitation that we will dedicate an entire chapter
    to. Before we move on we will perform one more check to see if there was anything
    interesting on this machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Who are you on this machine anyhow?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: What system am I connected to?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Who has logged on to this system and when?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you probably already know, the fact that an attacker could get root on this
    machine by running this simple proof of concept code is a major problem. You should
    recommend that your client update all installed software to the latest version
    possible to avoid such simple compromises.
  prefs: []
  type: TYPE_NORMAL
- en: Getting files to and from victim machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting root on a remote machine can be interesting and is definitely a major
    step in the right direction (and depending on your scope and the purpose of the
    test, could be the only step necessary). If your task is not complete, then you
    will need to find methods of transferring data to and from your victim machines.
    There are several tools that will assist in this task; here are a few that may
    make your life easier in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and starting a TFTP server on BackTrack 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TFTP can be very handy at times. Many systems will already have a TFTP client
    installed and using this protocol is quick and easy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure that your BackTrack machine is Internet-enabled during the installation.
    To familiarize yourself with the **atftpd** server type `atftpd` at the command
    prompt without any additional input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting TFTP as a standalone daemon pointing to `/tmp` on the standard port
    and bound to IP address `192.168.75.12` can be accomplished by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can check to see if the daemon started correctly by invoking netstat and
    grepping for 69.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything started correctly you should see something similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Installing and configuring pure-ftpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your version of BackTrack does not have pure-ftpd installed it may be added
    by using the `apt-get install pure-ftpd` command. For full functionality of pure-ftpd
    you will need to add users and perform other minor configuration changes prior
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Adds `/etc/pure-ftpd/pureftpd.pdb` to the **PureDB** configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Creates a symbolic link to the `50pure` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Adds a group to the BackTrack guest machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create folders that will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the ownership:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Adds the account to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets up a virtual account that can be used with FTP connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Reloads the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Performs a quick lookup in the Pure-FTP database to let us know the user statistics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Starting pure-ftpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following command will start `pure-ftpd:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be presented with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This server can be tested by connecting to localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Production versus a controlled test lab environment:** Consider setting up
    a dedicated user account and appropriate security measures on your production
    BackTrack instance. Make certain to provide FTP accounts with the necessary permissions
    to write files otherwise; expect to receive errors when making these attempts
    from victim machines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passwords: Something you know…'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this day and age one would assume that all systems use multifactor authentication.
    Unfortunately that is not the case. Even so-called "secured networks" still use
    protocols that are sending out clear text passwords, systems are using insecure
    encryption protocols, and more. One basic skill (basic as in chess: easy to learn,
    difficult to master) that every pentester should attempt to master is the art
    of password cracking. We will start off with a few simple examples to solidify
    the concept and then move on to some of the strategies used by the very best in
    the field.'
  prefs: []
  type: TYPE_NORMAL
- en: Cracking the hash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passwords are often reused by busy users and even administrators. Regardless
    of how important a system is on the network, once you gain access to the password
    hashes they should immediately be cracked and added to any dictionary file you
    have in place. This could potentially save a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: First we need to pull some files from the victim machine. Start up your BackTrack
    Tester 1 and Kioptrix Level 1 guest machines, run the exploit you previously compiled
    and pull the `passwd` file down so that we can run Jack against it.
  prefs: []
  type: TYPE_NORMAL
- en: Start all necessary virtual devices in your lab (BackTrack Tester 1, Kioptrix).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `./SambaVuln_10 -b 0 192.168.75.14`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now connected as root on `kioptrix.level1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new terminal session and start `pure-ftpd` on your BackTrack guest machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the shell that is connected to the Kioptrix machine, use FTP to connect
    to your FTP server on the BackTrack machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Move to the /etc directory. Remember that you will not receive much feedback
    from the victim machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You should see a directory listing of the Kioptrix /etc directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Type in the user name we created to the FTP server on the BackTrack machine
    (ftplogin).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the password for the FTP server account. Wait a moment or two and type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait a few more moments and type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: You should see a directory listing of the target FTP site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CTRL + Q* will get you out of the Kioptrix machine.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You could have also simply performed a `cat shadow` and copied the screen output
    with your mouse. Knowing how to pull files from your target machines is very important
    however, especially if the files are very large.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the shadow file on our BackTrack machine let's see what we
    can do with it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we browse to the proper directory we can launch john against our Kioptrix
    shadow file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: John will start to attempt the brute force attempts of the MD5 passwords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are lucky or extremely patient you will be rewarded with the unencrypted
    passwords for the target machine. Depending on the password complexity used combined
    with the speed of your system this step could take anywhere from minutes to weeks
    to complete. There are third-party services available that can be used to crack
    passwords but using these would have to be specifically permitted within your
    rules of engagement as you lose control of any data sent to a third party.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Brute forcing is still a very viable method of gaining access to a machine.
    The problem with passwords is that people have to be able to recall them at will.
    Trying to remember 233!sdsfF_DaswsaWlsc!!&$#_ would be difficult for most and
    thus we end up with a short list of commonly used passwords such as ILoveKellie1!.
    The problem with this is that there are several methods of narrowing down the
    list of possible passwords, and that computers currently have as many as 8 processor
    cores for a home desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Password cracking can be accomplished by using multiple video cards and their
    GPUs. This is the preferred method if the resources are available.
  prefs: []
  type: TYPE_NORMAL
- en: Although the password ILoveKellie1! would meet numerous enforced password policies,
    you could easily make a list of passwords that appends certain commonly used characters
    such as !, 1, 2, and so on and by reading the beginning of this book you will
    be able to determine that my spouse's name is Kellie. If you are clever about
    how you are creating your word lists, placing commonly used terms such as ILove,
    Iam, and so on would make the rest trivial. Modern password brute forcing techniques
    would tear this password up in mere moments. This makes cracking passwords faster
    and easier than ever. Here we will take a look at a few methods of brute forcing
    these passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please be aware that many of the examples used in this book are simplified to
    make the concepts easier to learn. Once you understand the concepts, you will
    be able to use the very same techniques when performing on real life networks
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: THC Hydra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: THC Hydra makes the task of checking for weak passwords fun. It is released
    under the GPLv3 and is continually updated by the THC team. Updated information
    about this product can be found by browsing [http://www.thc.org/thc-hydra/](http://www.thc.org/thc-hydra/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: THC Hydra currently supports more than 40 services including FTP, MySQL, POP3,
    SSH2, VNC, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start our virtual lab and get started with using THC Hydra which is
    included in BackTrack 5\. Let''s connect to the Kioptrix machine and create an
    account so that we can see how Hydra does at finding the password. On the BackTrack
    machine load up our previously used Samba exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected type the following to change the password for the `harold` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As with many tools, the quickest method of determining the syntax is to invoke
    the program without any additional input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The command syntax will be displayed in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Hydra can be used from the command prompt, but it also has a nice GUI that
    can be invoked using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will launch the GUI and we are presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![THC Hydra](img/7744_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be using the password files included with BackTrack, but ideally you
    will be downloading or creating your own password files, especially if you are
    able to pull company-specific information about your clients website or metadata.
    I highly recommend you to check out cewl (written by DigiNinja and preinstalled
    on Backtrack) at [http://www.digininja.org/projects/cewl.php](http://www.digininja.org/projects/cewl.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform a simple brute forcing attack against our Kioptrix machine
    we must choose the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Target Tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Single Target: 192.168.75.14 (the Kioptrix virtual machine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: 22'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protocol: SSH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following options: Be Verbose, Show Attempts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords Tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: Harold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: lotsOfPasswords'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check: Try login as password, Try empty password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything else as default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to the **Start** tab and on the bottom of the screen click on the **Start**
    button. You will be presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![THC Hydra](img/7744_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, we managed to guess the password for an account that we already know the
    password for… Not very exciting, but it does let you know there are easy methods
    of validating if an account login is accurate or not without having to log into
    whichever client is necessary (checking SNMP for instance, or TFTP).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our password to a dictionary that is included with BackTrack 5\.
    Open up a terminal session and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This takes you to the wordlists directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a file named `darkc0de.lst` in the wordlists directory that will get
    you started. Take a look at this file to get an idea of what a typical wordlist
    will consist of.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a very convenient place to store all of your personal wordlists. Many
    testers will have several favorites, and also create wordlists on the fly as needed.
    Let''s add our password to this listing. Edit `darkc0de.lst` to look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: We have added the test to the header of this password file so that it will be
    found faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up Xhydra again and select the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Target Tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Single Target: 192.168.75.14 (the Kioptrix virtual machine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: 22'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protocol: SSH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the following options: Be Verbose, Show Attempts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords Tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: Harold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password List: Selected, Click the entry field to select `/pentest/passwords/wordlists/darkc0de.lst`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check: Try login as password, Try empty password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of Tasks: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exit after first found pair: Checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything else as default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to the start tab again and click start in the bottom-right of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![THC Hydra](img/7744_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hydra THC is a definite benefit to anyone's toolkit and its use should be practiced
    and perfected to be truly successful in penetrating complex networks where passwords
    may be the weakest link in the entire security architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit — learn it and love it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit™ framework is incredible. It offers penetration testers a wide
    variety of tools in a friendly, easy to use manner. It was originally created
    by HD Moore and has recently been purchased by Rapid7, the creators of the Nexpose
    vulnerability scanner toolkit. Everything that we have done manually can be done
    with Metasploit. If you are new to penetration testing, I highly recommend that
    you go through the free training provided at [http://www.offensive-security.com/metasploit-unleashed/Metasploit_Unleashed_Information_Security_Training](http://www.offensive-security.com/metasploit-unleashed/Metasploit_Unleashed_Information_Security_Training)
    to get a really good grasp of how powerful this framework really is. This site
    is constantly updated and should be visited frequently to find information about
    the latest additions to the MSF framework. In this book we restrict our scope
    to some of the more interesting features of the MSF framework to highlight the
    efficiency it adds to the work a penetration tester must do.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Metasploit framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, it is very important that applications are updated frequently. Metasploit
    is no different in this regard. You should update your installation of the Metasploit
    framework at least once per week. The command is very easy to remember. You can
    run the command from a BackTrack shell regardless of your current working directory.
    Be sure that your BackTrack lab machine is connected to the Internet before you
    update.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the update has completed you should be presented with an update notice
    and then the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also see an informative section on the Metasploit title screen that
    reminds you of your last update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will yield output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Note that the date of the last update and the `svn` number is presented as part
    of the output.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This may be a good time to update your BackTrack guest machine as well. You
    should update BackTrack before updating the Metasploit framework.
  prefs: []
  type: TYPE_NORMAL
- en: Databases and Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of my favorite Metasploit features would be the ability to have all of your
    results dumped into a database. Metasploit uses PostgreSQL by default.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installing PostgreSQL may not be required. Attempt to connect to the database
    within the MSF context, and if you experience errors follow the complete installation
    procedure and try again.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PostgreSQL on BackTrack 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will need to reconnect our BackTrack 5 guest machine back to the Internet
    again in order to download and install PostgreSQL. Once you have verified your
    connectivity type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the instructions and press *Y* to continue. The installation should finish
    with a statement similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to make some modifications to the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'With postgres installed we are presented with the following prompt to let us
    know we are working within the database console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now change the password for the default database user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Here we changed the password for the postgre role. We will use `\q` to exit
    the postgres console.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Verifying database connectivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Load up the Metasploit console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `msf >` prompt type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we know that we are connected to PostgreSQL database named pentester. We
    can verify connectivity by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will provide us with a listing of hosts. As you can see
    there is nothing interesting just yet.
  prefs: []
  type: TYPE_NORMAL
- en: Performing an Nmap scan from within Metasploit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need something exciting to display when running the hosts command so let's
    run a quick nmap scan to collect some data. With `msfconsole` open and the database
    connected, we can now run our nmap scans directly from within Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The results look very familiar with the added bonus of having been added to
    the database for future reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run a quick `hosts` command we will see that the system has been added
    to our PostgreSQL pentester database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the data is in the database there are all sorts of handy time saving
    tricks we can perform. For instance, if we would like to see which systems have
    port 443 open we can enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides us with a nicely formatted output listing all systems with 443:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Using auxiliary modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The use command instructs Metasploit to use the specified module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Every module has a specific set of options that can be displayed via the `show
    options` command. This particular module has the following options that can be
    changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change a few of these to suite our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`RHOSTS` is our target range. We set it to `192.168.75.14:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: To save time we restrict the scan to only the first 1024 ports using the `set
    PORTS` setting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'The `run` command will initiate the scan using our predetermined settings.
    In a few moments we will receive feedback from the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The important item of note here is that all modules operate in the same manner.
    Once you understand the method of searching for exploits you will be able to reuse
    the same steps repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit to exploit Kioptrix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The time has come to take a look at using Metasploit to perform an attack against
    our Kioptrix machine. As we understand how to compile and use proof of concept
    code that is made available on the Internet we will be able to quickly appreciate
    the time savings that Metasploit provides. We will begin by connecting to our
    database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'We should already have some information in our database. This can be verified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'This command provides us with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: When reviewing these ports we find our previously exploited samba port 139 is
    still open. Now it is time to see what we can do without having to reformat exploit
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Metasploit to exploit Kioptrix](img/7744_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Name: The name column will be used in correlation to the USE command once we
    decide which exploit we will try.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disclosure: Disclosure date is the actual date that the exploit was made known
    to the community or the vendor, not when the proof of concept code was released.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rank: Rank is very important since it indicates just how reliable the exploit
    is known to be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description is well the description of the type of exploit this is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will be using the `trans2open` exploit as it is similar to what we performed
    manually earlier in the chapter. In `msfconsole` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'When more information regarding an exploit is needed we can use the `info`
    command to receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: This information is available for all of the exploits in Metasploit. When time
    permits, taking the time to familiarize yourself with some of the most commonly
    used exploits would be very beneficial in the long term as you will be able to
    avoid trying exploits that do not work on production systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to set some of the options that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '`RHOST` is the remote hosts and needs to be set to our Kioptrix machines IP
    address.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '![Using Metasploit to exploit Kioptrix](img/7744_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `show payloads` command provides a listing of all of the compatible payloads
    that can be used with this particular exploit. We will make use of `reverse_tcp`
    for this example. This payload type is small and usually effective although it
    does not have the full range of options available that meterpreter does.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: We will also have to set the `LHOST` and the `LPORT`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: This is our localhost that the listener will be set up on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: This is the port that we would like to listen on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that is out of the way and we can move on to exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: If all goes as planned, you will receive the following confirmation and an open
    session that is very similar to the connection our manually compiled exploit provided
    to us earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that we have root, we will perform the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'We are looking at the messages for the root account and can see that Loneferret
    has left us a nice little message; type 1 to read it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: This last exercise should have made it clear that compared to manually finding
    and compiling code using Metasploit is a breeze. The best part about it is that
    you will be able to add your own modules and compiled code to the framework as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided a solid introduction to exploitation. By taking advantage
    of the Kioptrix which is an intentionally vulnerable Linux distribution we were
    able to get hands-on practice in locating exploits on Exploit-DB and on BackTrack,
    and then correcting any errors we found in that code. We looked at the steps necessary
    to truly understand the penetration testing exploitation phase such as banner
    grabbing and transferring files to and from an exploited machine.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at password cracking and brute forcing with both John the Ripper and
    THC Hydra, both of which will need to be understood in depth to prepare for later
    chapters. Password cracking is not going to go away anytime soon and expertise
    of this subject can be very beneficial in the long term.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter also covered the steps necessary to transfer files to and from an
    exploited machine; this included the set up and configuration of the FTP daemon
    that comes preinstalled with BackTrack 5.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we wrapped up the chapter with a look at Metasploit and how it can
    be used to simplify the task of penetration testing in many different ways. By
    performing hands-on exercises it quickly became clear that although manually finding
    and compiling exploit code can be beneficial, using Metasploit can significantly
    increase your overall productivity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will address techniques necessary to test the security
    of web applications and their underlying infrastructure. This includes detection
    of load balancers and web application firewalls. Also discussed is the use of
    tools such as w3af and Webscarab. In addition, our virtual lab is extended greatly
    with the addition of several machines including pfSense and Kioptrix Level 3.
  prefs: []
  type: TYPE_NORMAL
