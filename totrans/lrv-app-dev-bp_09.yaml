- en: Chapter 9. Building a RESTful API – The Movies and Actors Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Designing and developing a successful RESTful API is mostly very difficult.
    There are a lot of aspects to designing and writing a successful RESTful API;
    for example, securing and limiting the API. In this chapter, we''ll focus on the
    basics of REST with coding a simple Movies and Actors API with Laravel. We''ll
    make some JSON endpoints behind a basic authentication system, and will also learn
    a few Laravel 4 tricks. We''ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and migrating the users database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the users model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding sample users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and migrating the movies database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a movie model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding sample movies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and migrating the actors database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an actor model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning actors to movies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the authentication mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and migrating the users database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We assume that you have already defined database credentials in the `database.php`
    file located at `app/config/`. For this application, we need a database. You can
    create a new database by simply running the following SQL command, or basically
    you can use your database administration interface such as phpMyAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully creating the database for the application, first we need
    to generate an application key for our application. As you know from the previous
    chapters, this is necessary for the security and authentication class of our application.
    To do this, first open your terminal, navigate to your project folder, and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If no error occurs, we should edit the authentication class'' configuration
    file. For using Laravel''s built-in authentication class, we need to edit the
    configuration file, `auth.php`, which is located at `app/config/`. This file contains
    several options for the authentication facilities. If you need to change the table
    name, and so on, you can perform the changes in the `auth.php` file. By default,
    Laravel comes with a users model; you can see the `User.php` file that is located
    at `app/models/`. With Laravel 4, we need to define which fields can be filled
    in our `User` model. Let''s edit `app/models/User.php` and add the "fillable"
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically we need two columns for our RESTful API users, they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email`: This column stores the author''s e-mail ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: This column is for storing the author''s password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need several migration files to create the `users` table and add an
    author to our database. To create a migration file, give a command such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, please run the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you know, the command creates the `users` table and its columns. If no error
    occurs, check the `laravel_api` database for the `users` table and the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sample users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to create a new migration file for adding some API users to the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up the migration file and edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we have two API users for our application. The users will be accessible
    for querying our RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and migrating the movies database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a simple Movies and Actors application, basically we need two tables for
    storing data. One of them is the `movies` table. The table will contain the name
    of the movie and its release year.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a migration file to create our `movies` table and its columns. We''ll
    do it again with the `artisan` tool. Open your terminal, navigate to your project''s
    folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, run the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating a movie model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will use the benefits of **Eloquent ORM**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the following code in the `Movie.php` file under `app/models/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We have set the database table name with the protected `$table` variable. Also,
    we set the editable column's `$fillable` variable, and for timestamps with a `$timestamps`
    variable, as we've already seen and used in the previous chapters. The variables
    that are defined in the model are enough for using Laravel's Eloquent ORM. We'll
    cover the public `Actor()` function in the *Assigning actors to movies* section
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our movie model is ready: now we need an actor model and its corresponding
    table.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding sample movies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to create a new migration file for adding some movies to the database.
    Actually, you can also use the database seeder for seeding the database. Here,
    we will use migration files for seeding the database. You can check out the seeders
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://laravel.com/docs/migrations#database-seeding](http://laravel.com/docs/migrations#database-seeding)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up the migration file and edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating and migrating the actors database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to create an `actors` table that will contain the names of the actors
    of the movies. We need a migration file to create our `movies` table and columns.
    We''ll do it again with the `artisan` tool. Let''s open up our terminal, navigate
    to our project folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, run the `migrate` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating an actor model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For creating the actor model, save the following code as `Movies.php` under
    `app/models/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Assigning actors to movies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, we used the `belongsToMany` relation between the actors and movie
    models. This is because an actor has probably acted in many movies. A movie also
    would probably have many actors.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you will see, in the previous sections of this chapter, we used a pivot
    table named `pivot_table`. We can also create the pivot table with the `artisan`
    tool. Let''s create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, run the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create a new migration file for adding some actors to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up the migration file and edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s grab the migration file. When we attach `users` to `movies`, we''ve
    to use the movie IDs shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This means *Woody Allen* has played a role in two films, and the ID of these
    movies are `1` and `2`. Also, *Diane Keaton* has played a role in those two movies.
    But *Jack Nicholson* has played a role in *The Shining* and the ID of the film
    is `3`. As we have already elaborated on the Eloquent ORM relations in [Chapter
    8](ch08.html "Chapter 8. Building a Q&A Web Application"), *Building a Q&A Web
    Application*, our relation type is the **Eloquent belongsToMany** relation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the authentication mechanism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like many other APIs, our API system is authentication based. As you may remember
    from the previous chapters, Laravel comes with an authentication mechanism. In
    this section, we'll use the pattern-based route filtering feature of Laravel for
    securing and limiting our API. First, we need to edit the `auth.basic` filter
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the route filter configuration file that is located at `app/filters.php`
    and edit the `auth.basic` filter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The API users should be sending their e-mail IDs and passwords, along with
    their requests, to our application. Because of the request, we edit the filter.
    An API request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to apply a filter on our routes. Open the route filter configuration
    file that is located at `app/routes.php` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This code indicates that our application needs authentication for every request
    on it. Now we need to write our routes. Add the following lines to `app/routes.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Querying the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need two controller files for our RESTful route functions. Let's create two
    controller files under `app/controllers/`. The files should be named `MovieController.php`
    and `ActorController.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting movie/actor information from the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need the `getActorInfo()` and `getMovieInfo()` functions for getting
    actor and movie information from the database. Open the `ActorController.php`
    file located at `app/controllers/` and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open the `MovieController.php` file located at `app/controllers/` and
    write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions `getActorInfo()` and `getMovieInfo()` basically search the database
    for the movie/actor name with the given text. If such a movie or actor is found,
    it is returned in the JSON format. So, for getting actor information from the
    API, our users can make a request as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the actor information request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The request for any movie would be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the movie information request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If any user requests movie information from an API that doesn''t exist in the
    database, the response will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, a similar response will be for an actor that doesn''t exist in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Sending new movies/actors to the API's database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need the `putActor()` and `putMovie()` functions for allowing users to add
    new actors/movies to our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ActorController.php` file located at `app/controllers/` and add the
    following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the `MovieController.php` file located at `app/controllers/` and add
    the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions `putActor()` and `putMovie()` basically search the database for
    movies/actors names with the given text. If there is a movie or actor found, the
    functions return its ID in the JSON format, else it creates the new actor/movie
    and responds with the new record ID. So, for creating a new actor in the API database,
    our users can make a request such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the movie information request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If any API user tries to add the existing actor, the API will respond as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the response for creating a new movie in the API database should be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If any API user tries to add the existing actor, the API will respond as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Deleting movies/actors from the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need the `deleteActor()` and `deleteMovie()` functions for allowing users
    to add new actors/movies to our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ActorController.php` file under `app/controllers/` and add the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the function, the content in `ActorController.php` located at
    `app/controllers/`, should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need a similar function for `MovieController`. Open the `MovieController.php`
    file under `app/controllers/` and add the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the function, the content under `ActorController.` `php` located
    at `app/controllers/` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions `deleteActor()` and `deleteMovie()` basically search the database
    for a movie/actor with the given ID. If there is a movie or an actor, the API
    deletes the actor/movie and returns the status in the JSON format. So, for deleting
    an actor from the API, our users can make a request as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the response for deleting a movie from the API database should be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The response for the request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If any API user tries to delete a movie/actor from the API database that doesn''t
    exist, the API will respond as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'For deleting an actor that doesn''t exist, the response will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've focused on the basics of REST with coding a simple Movies
    and Actors API with Laravel. We've made some JSON endpoints behind a basic authentication
    system, and learned a few Laravel 4 tricks while the chapter uses something like
    a pattern-based route filtering. As you saw, developing and securing a RESTful
    application is very easy with Laravel. In the next chapter, we'll cover more effective
    methods in Laravel while coding a simple e-commerce application.
  prefs: []
  type: TYPE_NORMAL
