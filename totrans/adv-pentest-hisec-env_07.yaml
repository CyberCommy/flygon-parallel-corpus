- en: Chapter 7. Post-Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation is an often overlooked aspect of penetration testing. In the
    past, many even considered the job to be complete the moment that a shell is popped
    open on a remote target machine. Goal-oriented pentesting will require more than
    this. There must be a specific goal, such as accessing a critical database, or
    obtaining key credentials that would allow an attacker to read private corporate
    e-mails, for the penetration test to be of value. Business owners and managers
    are concerned with protecting the confidentiality, integrity, and availability
    of their assets and data. Reporting that a random system was easily compromised
    means very little compared to providing tangible proof that an attacker could
    effortlessly cost the company millions of dollars in missed sales due to a vulnerability
    affecting a critical system that is externally facing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering many areas of interest including:'
  prefs: []
  type: TYPE_NORMAL
- en: Rules of engagement in regards to post-exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data gathering techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining stored credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elevation of privilege
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As much as we would like to, we cannot provide a direct step-by-step instructional
    guide for every situation you will face as a penetration tester. We do hope that
    we are providing the guidance necessary to develop the skill set and mindset necessary
    to properly inspect and verify the security of secured environments. Penetration
    testing requires dedication and the ability to find and act upon clues. There
    are many recipes for specific exploitation and post-exploitation, but without
    the proper technical understanding and background these recipes will only lead
    to confusion. Taking the time to fully understand the operating systems and technologies
    being tested is critical and of utmost importance to any penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Rules of engagement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During a goal-oriented penetration test, the environment will be evaluated using
    similar techniques used by attackers in the wild. With this in mind, the rules
    of engagement are absolutely critical and must be followed carefully. During the
    post-exploitation phase of a penetration test there is a good chance that sensitive
    data could be disclosed; systems that must follow government regulations may be
    targeted or passwords that are hardcoded may be found. Be sure to make clients
    aware of this fact, and prepare the necessary documentation that specifically
    details what is and what is not acceptable. In some cases, you may be able to
    test development environments in tandem with the production environment; if this
    is the case be sure to look out for password reuse from development to production.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**WARNING:** The Rules of Engagement are very important for all phases of the
    penetration test, but this is particularly the case when it comes to post-exploitation.
    If you have any questions about the Rules of Engagement in regards to post-exploitation
    or any other phase, please seek legal counsel **prior** to performing a penetration
    test for anyone to ensure that all bases are covered.'
  prefs: []
  type: TYPE_NORMAL
- en: What is permitted?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assess the goal of the penetration test and determine what will need to be accomplished
    to prove the existence of one or more exploitable vulnerabilities that allow the
    goal to be achieved. For example, if a denial of service attack that diverts local
    resources to resolving the issue is required, are you allowed to perform it? Will
    the business understand that attacking one seemingly unimportant system may give
    you the opening you need to take on something more important while they are busy
    trying to resolve the "problem"? How many people on your team are allowed to perform
    the agreed upon tasks? Think of all possibilities and then ensure that they are
    all necessary, and approved, before you proceed with the test. Simply gaining
    a VNC session on a system could break your rules of engagement unless this has
    been discussed with your client prior to testing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Video and voice capture (think VOIP) may be off limits depending on the laws
    of your country or region. **Do not break the law**. Research everything, and
    seek legal counsel when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Can you modify anything and everything?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Does the environment you are targeting allow you to add or remove accounts,
    change log files, or launch internal attacks via pivoting? If so, does your client
    approve of this and all associated risks involved? As simple as it seems, everything
    needs to be addressed in the rules of engagement. No assumptions should be made.
    To test an actual secured environment will take a lot of planning and forethought
    to ensure you have the permissions necessary to truly test the environment and
    mimic the attacks that an actual attacker is likely to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only perform attacks that are truly needed to achieve your goal. For instance,
    dropping a database table would not be a good idea in most environments. Generally
    there are less intrusive methods of proving that admin access to a critical database
    server was achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Are you allowed to add persistence?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When performing a test on a large network it may be necessary to add persistence
    to key systems. This will allow you to bypass any restrictions or changes made
    during the test. It also mimics the typical action an attacker would take. After
    all, how frustrating would it be to gain a rootshell on a system only to have
    the corporate patch cycle kick in and stop you in your tracks. But, if this does
    happen, be sure to compliment the security team!
  prefs: []
  type: TYPE_NORMAL
- en: There are different types of persistence that should be considered; are you
    allowed to root kit a machine or just install a process that waits on a port?
    What about back doors to existing services or even setting up tasks that kick
    off when you knock on certain ports? There are different levels of persistence
    and depending on the size and configuration, persistence can make a tester's life
    much easier. Make a determination of what is necessary to reach your goal, and
    ensure that you have all of the permissions covered BEFORE you test.
  prefs: []
  type: TYPE_NORMAL
- en: How is the data that is collected and stored handled by you and your team?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data collected from client-owned assets should be guarded carefully. Set
    up ground rules before testing in regards to password management, reporting, third-party
    involvement (what are you using to crack those password hashes?), and everything
    else that involves client data. Agree in advance upon how this data will be transferred,
    stored, and cleaned so that there are no questions or doubts after the fact. Another
    item of note includes how you will handle any incident or information that indicates
    there is an unknown and possibly hostile attacker already in the network. Third-party
    security incident response teams have very specific methods of handling these
    situations to ensure the incident is handled properly.
  prefs: []
  type: TYPE_NORMAL
- en: Employee data and personal information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out what the laws and regulations as well as the policies regarding employee
    information are in regards to each specific job. If the information contained
    on a system does not belong to the client, are they even able to grant you permission
    to view, possibly copy and store any of this data? A good contract that has been
    properly reviewed by legal counsel that is familiar with this type of work is
    advised.
  prefs: []
  type: TYPE_NORMAL
- en: Data gathering, network analysis, and pillaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a system had been compromised it is advisable to fully enumerate the device.
    Any valuable clues or information need to be located and properly managed in a
    quick and efficient manner. During this phase the focus should be on gathering
    credentials and fully enumerating installed services, network configurations,
    and access history. It may also be beneficial to determine what type of network
    or environment the system is running in. Is the network segmented, are there multiple
    IPs associated with the device, or is it actually virtualized such as our test
    network?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a list of commands and procedures used when reviewing a compromised
    system will increase the efficiency and effectiveness of the entire test. Having
    such a plan of action also makes the reporting phase easier and eliminates the
    chance that something important was missed during the testing phases.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many corporations are moving toward open source operating systems to save money
    and remain competitive. Each flavor will have subtle differences that should be
    noted and understood when attempting to find important settings or information.
  prefs: []
  type: TYPE_NORMAL
- en: Important directories and files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Files that should be reviewed on a compromised system that is running a Linux-based
    operating system include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Directory or file** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/passwd` | This file contains a listing of all system user accounts.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/ftpusers` | Provides a listing of users that are allowed to access
    the FTP server. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/pam.d` | Very useful directory that contains Pluggable Authentication
    Module (PAM) configuration files. Older installations may use `/etc/pam.conf`
    instead. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/shadow` | Passwords are stored in this file. They will need to be decrypted.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/hosts.allow` | A list of hostnames that are allowed to access this
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/hosts.deny` | Access control mechanism that will restrict access to
    systems listed. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/securetty` | A listing of TTY interfaces that will permit a root login.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/shutdown.allow` | A listing of user accounts that may shut down the
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/security` | Security policies. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/init.d or /etc/rc.d/init.d` | Service and program startup files (such
    as `/etc/init.d/apache 2)`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/ssh` | Read or modify the SSH configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/sysctl.conf` | Kernel options. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/sysconfig` | System configuration files. |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc/dhcpc` | Contains information about DHCP connections. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log` | Most likely place to find locally stored log files. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/messages` | Very interesting log file that stores system messages.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/wtmp` | Log file that shows the currently logged-in users. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/lastlog` | The last command pulls from this log file. |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to look for backup files as well, they may contain critical data that
    you could not otherwise access!
  prefs: []
  type: TYPE_NORMAL
- en: Important commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ls -oaF` | Lists all files with symbols that make it easier to determine
    directories, executables, and so on in an ordered column. |'
  prefs: []
  type: TYPE_TB
- en: '| `locate` | Performs a search. Example: (locate `awesomeVPNClient` would locate
    any instances of awesomeVPNClient. Something that would be very helpful if you
    had a listing of popular VPN client names). |'
  prefs: []
  type: TYPE_TB
- en: '| `updatedb` | Updates the locate db. |'
  prefs: []
  type: TYPE_TB
- en: '| `grep` | Very powerful command that allows you to search for strings within
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| `less` | Use less to read files. |'
  prefs: []
  type: TYPE_TB
- en: '| `cat` | Can also be used to display the contents of a file. |'
  prefs: []
  type: TYPE_TB
- en: '| `df -H` | Provides disk information. |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | Can be used to attempt to get an idea of which time zone the system
    is in. |'
  prefs: []
  type: TYPE_TB
- en: '| `free` | Provides memory information. |'
  prefs: []
  type: TYPE_TB
- en: '| `arch` | Provides information about the system architecture. |'
  prefs: []
  type: TYPE_TB
- en: '| `echo` | Can be used to automate writing files. Simply outputs the specified
    text. |'
  prefs: []
  type: TYPE_TB
- en: '| `last` | Will display the `/var/last` log file. |'
  prefs: []
  type: TYPE_TB
- en: '| `logname` | Provides your logged-in name. |'
  prefs: []
  type: TYPE_TB
- en: '| `pwd` | Prints working directory. Shows where you are in the directory structure.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `uname -a` | Provides information about the operating system. |'
  prefs: []
  type: TYPE_TB
- en: '| `netstat` | Provides connection information. |'
  prefs: []
  type: TYPE_TB
- en: '| `ifconfig or /sbin/ifconfig` | Network interface configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| `udevd version` | Prints the udev version. |'
  prefs: []
  type: TYPE_TB
- en: '| `find / -type f perm 777` | Finds all files with 777 permissions. |'
  prefs: []
  type: TYPE_TB
- en: There are many other commands that are useful as well, but these should provide
    the basic information necessary to enumerate a remote system and gather most,
    if not all, interesting information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Administrators will at times make certain files immutable. When you run into
    a situation where you cannot seem to delete a certain file, use `lsattr` to review
    the file attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Putting this information to use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have an idea of what types of files and command output we want to
    review let's put some of this to use. In order to follow along with this section
    you will require the virtual pfSense, Backtrack, and Kioptrix level 1 guest machines
    to be connected to VLAN1 using the 192.168.75.0/24 IP space.
  prefs: []
  type: TYPE_NORMAL
- en: Enumeration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will begin with exploiting the Kioptrix system from BackTrack. Before we
    can perform post-exploitation we will need to find and exploit a system. As usual
    we start by performing a quick scan of our local subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Your results will vary, but you should be able to find the Kioptrix machine
    on your network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the IP address of the target has been determined we will perform a
    more thorough scan. Use the command of your choice to gather the necessary system
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Exploitation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We reuse our previous samba exploit to gain access to the system `samba-2.2.8
    < remote root exploit by eSDee ([www.netric.org|be](http://www.netric.org|be))`.
    In case you did not follow along in the exploitation chapter go to `/pentest/exploits/exploitdb`,
    search for the `samba exploit 10.c`, clean up the code and compile it in a directory
    as SambaVuln_10 via `gcc -o SambaVuln_10 10.c`. If you have trouble compiling
    this code please revisit the appropriate chapter for a step-by-step walkthrough.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can perform Exploit-DB searches of your local exploit repository
    by going to `/pentest/exploits/exploitdb` and using the `./searchexploit` command
    followed by the search variables such as `./searchsploit openssl`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Were connected, now what?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we are connected remotely it is important to start gathering data about
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the functionality of your remote shell does not equal that
    of your standard Linux shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have probably already noticed that you do not receive a command prompt.
    Take a look at which `tty` you are connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you are currently running as root most commands we want to access will be
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, if you wanted to connect directly back to your BackTrack (`192.168.75.25`)
    machine using SSH you would run into an issue such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be frustrating when time is short and there are many systems that
    need to be reviewed before the test can be considered complete. You can try to
    spawn a shell using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, this will not always work. Luckily, once we have sufficient
    access levels on a target system there are plenty of other methods to bypass this.
    Here is the output if you try to spawn a shell on the Kioptrix level 1 machine
    using our current shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a good example of the mindset that is required of a penetration tester.
    When one method fails it is important to try another. Giving up is not an option
    when performing a penetration test especially when testing environments that have
    many security controls and processes in place.
  prefs: []
  type: TYPE_NORMAL
- en: Which tools are available on the remote system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can be beneficial to perform a quick enumeration of available tools before
    getting started. For instance, knowing that there is already a GCC compiler installed
    and ready to use can make a difference as to what type of post-exploitation activity
    you would like to proceed with. Here are some of the tools and features we should
    check for before starting our endeavors:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tool** | **Command** | **Kioptrix output** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| bash | `which bash` | `/bin/bash` |'
  prefs: []
  type: TYPE_TB
- en: '| curl | `which curl` | `/usr/bin/curl` |'
  prefs: []
  type: TYPE_TB
- en: '| ftp | `which ftp` | `/usr/bin/ftp` |'
  prefs: []
  type: TYPE_TB
- en: '| gcc | `which gcc` | `/usr/bin/gcc` |'
  prefs: []
  type: TYPE_TB
- en: '| iptables | `which iptables` | `which: no iptables in (/usr/local/bin:/bin:/usr/bin)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| nc | `which nc` | `which: no nc in (/usr/local/bin:/bin:/usr/bin)` |'
  prefs: []
  type: TYPE_TB
- en: '| nmap | `which nmap` | `/usr/bin/nmap` |'
  prefs: []
  type: TYPE_TB
- en: '| ssh | `which ssh` | `/usr/bin/ssh` |'
  prefs: []
  type: TYPE_TB
- en: '| telnet | `which telnet` | `/usr/bin/telnet` |'
  prefs: []
  type: TYPE_TB
- en: '| tftp | `which tftp` | `which: no tftp in (/usr/local/bin:/bin:/usr/bin)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| wget | `which wget` | `/usr/bin/wget` |'
  prefs: []
  type: TYPE_TB
- en: '| sftp | `which sftp` | `/usr/bin/sftp` |'
  prefs: []
  type: TYPE_TB
- en: By fully understanding the capabilities of the target machine we can determine
    what our next plan of action is. In the case of the Kioptrix machine, it is of
    note that `nmap` is already installed! If the system had access to multiple networks
    we would be able to leverage this tool and scan the remote network from `192.168.75.14`.
    This is especially important if you have gained a root shell from outside of a
    firewall and cannot simply run the scan from your own machine.
  prefs: []
  type: TYPE_NORMAL
- en: Finding network information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First thing we would want to do is to determine which networks the system is
    connected to. We need to gather the network information from the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This system has only one Ethernet connection set up and it is the one we already
    know about (eth0 at `192.168.75.14)`. It is important to pay attention to network
    configurations that may contain more than one network card. If the system is virtualized
    or multi-homed there is a small possibility it could be used to pivot into another
    network that was previously inaccessible. You would also want to know if the system
    is set up as a router. Multiple networks in `ifconfig` is a good indicator that
    there may be more to find.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be reviewing data from many commands and files. This data will be needed
    when writing the report or attempting to recreate the network in your own lab
    for further testing. The simplest method is to pipe the output of your commands
    into a single file that can then be downloaded for review.
  prefs: []
  type: TYPE_NORMAL
- en: The system contains a lot of other network information. Let's pull some of this
    data down for review.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a look at the ARP tables we determine that there is a pfSense machine
    on the targets network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We need to take a look at our hosts files to determine if there are any restrictions
    we did not know about. If there are certain systems that are specified in the
    hosts, by using `hosts.allow` or `hosts.deny` we can use the information to assist
    in setting attack priorities. The files contain comments that are very descriptive;
    thus we will not reiterate their use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your target system is running a DNS server you should review the DNS cache.
    The DNS cache can contain a large set of information about the network you are
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: To find additional DHCP information that is stored on the system we must first
    change directories to `/etc/dhcpc`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the system is using a statically configured IP the information can be found
    on RedHat at `/etc/sysconfig/network-scripts/ifcfg <interface name>` or in Ubuntu
    at `/etc/network/interfaces`.
  prefs: []
  type: TYPE_NORMAL
- en: We then follow up by using cat to review the contents of `dhcpcd-eth0.info:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now we know the gateway that is used, the domain, DNS, and so on. This type
    of information will allow us to paint a broader picture of the system and the
    network we are dealing with. After all, in goal-oriented pentesting we should
    be working towards finding something that actually has a business impact.
  prefs: []
  type: TYPE_NORMAL
- en: Determine connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Listening services can sometimes provide additional information about the system
    you are on. Outbound connections give an idea of what the purpose of the system
    is. They may also indicate potential targets on the network. If there is an active
    connection to a network service on another server, it may be using credentials
    that can be harvested in later stages. Let's take a look at the services running
    on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, we do not have anything really interesting to look at here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that our connection is visible. If someone were watching for connections
    they would be able to block your IP and possibly foil your attack. When performing
    a Whitebox test there is also a possibility that an administrator could shut you
    down after you make a successful connection to a server. Depending on the goal
    of the penetration test, this may be the appropriate action for the administrator
    or security professional to take.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, we would see connections to the services being made from other servers
    on the network. This information can assist you when determining next steps, or
    even when shaping your priorities. For instance, if there is an administrator
    connecting to this machine using SSH we would want to know where he is connecting
    from so that we could try to gain access to his machine as well.
  prefs: []
  type: TYPE_NORMAL
- en: Checking installed packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we need to see what type of software is installed on the system. We have
    enough information to indicate that this system is running Red Hat. Use RPM to
    list out which packages are installed. You can use the `--last` option to show
    the last time the package was modified. We will truncate the output, but if you
    are following along you will see why it important to pipe this information into
    a file for later review. Please note that different versions of Linux use different
    package installers. RPM will work for some, but not all. Use the appropriate package
    listing command for your target operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Package repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One interesting fact is that many corporations use local package repositories
    to update their Linux-based systems. If you are able to compromise one of these
    repositories you could technically arrange to have a backdoor installed on all
    systems using these repositories. Take a look at your **BackTrack** system and
    try the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we have a very specific set of repositories that we pull our
    data from. These repositories are accessed by people across the world to update
    their BackTrack instances. If you're on a network that uses their own repositories
    to stage their updates, ensure that these systems are totally secure. All systems
    pointed at these will obtain their files from these trusted sources…
  prefs: []
  type: TYPE_NORMAL
- en: Programs and services that run at startup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Understanding which programs and services run at startup is also very important.
    At the Kioptrix shell type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If we take a look at the `rc.local` file we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The Kioptrix crew has set up several items that launch at system startup. For
    more control of these processes they would probably be pointed at a script to
    start in their respective rc0-6s.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Be sure to enumerate the directory structure of the targeted device. Many times
    it is possible to determine what the purpose of the server is simply from looking
    at the installed programs and the associated directory structure. Take a look
    at the Kioptrix filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we know how the partitions are set up, let''s take a look at what
    we are dealing with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here can see that there are at least two user home directories. If we want to
    pull down the entire directory structure and a listing of all files so we can
    review it later, we can use tree and put the output out into a file to be transferred
    later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This command provides us with a recursive directory listing. We chose not to
    print the indentations with `-i`, show **all** files including those that are
    hidden with `-a`, wanted to see the entire **file** path with `-f`, appended characters
    to the end to let us know if we are looking at files or directories and more with
    `-F`, and finally chose to view the file **permissions** with `-p`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The generated file is large, and on some systems could even cause a momentary
    spike in resource usage, so proceed with caution.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the head and tail of the file we can see our output in a reasonable
    fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This particular system has over 50,000 files that would have to be reviewed.
    Grepping for interesting filenames would save a lot of time. Also, check out the
    file permissions carefully. Perhaps, there is a world readable and writable directory
    that could be used to set up some persistence at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: History files and logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The history files and logs can be reviewed to determine what the system has
    recently been used for.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We can list the contents of the root directory to look for clues.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look inside the `.bash_history` files to see which commands were used
    recently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We have found a few interesting commands that have been run by the root user
    such as `mail` and `nano /etc/issue`. Cat out `/etc/issue` and you will see the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the mail command you will see that there are several log messages
    that are being sent to the system administrator. You would want to clean these
    up as they contain information that may alert the administrator that you have
    been trying to access this system. We will revisit this when we discuss detection
    avoidance in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind there is a `.bash_history` of note for every interactive user on
    the system. These should be checked to see if there are any files or applications
    that are being used frequently that may contain data that will assist in the penetration
    test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usage of wildcards can be very helpful when reviewing a target system. As an
    example, try `ls -al /home/*/` or cat `/home/*/.bash_history`. These commands
    are tremendous time savers and are excellent when scripting for unknown system
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to take a look at some of the logs in `/var/log` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Browse through some of these and ensure that at minimum the important files
    such as `messages, secure`, and others are reviewed. A penetration tester should
    become as familiar with these files as a day-to-day administrator would be. If
    you do not understand the operating system you are working with, your ability
    to fully test will be limited. Take a look at the security log and see how much
    information can be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: There are too many log files to review within one chapter of a book. Make sure
    to familiarize yourself with the data you can find on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Configurations, settings, and other files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many additional files that will provide critical system information
    that pertains to your penetration test. Take a look at some of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Crontab allows us to schedule tasks. This can be used to set up persistence
    or to run programs that you do not have access to run. Crontab will run the task
    as the root user.
  prefs: []
  type: TYPE_NORMAL
- en: '`fstab` is the configuration file that controls how the partitions are mounted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a listing of other configuration files that might be of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/master.passwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/resolv.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/httpd.conf` or `/etc/httpd/conf/httpd.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/exports`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/ldap/ldap.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/samba/smb.conf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge:** Browse around the target system and find the files that you
    find most interesting, then create a script that allows you to automate the entire
    thing!'
  prefs: []
  type: TYPE_NORMAL
- en: Other files that can provide valuable information include `/mnt, /media, /tmp,
    /opt`, and of course specific configuration or data files that relate to items
    installed on the target machine. For example, if the system targeted contains
    an instance of Apache or any other specific software you would want to check the
    configuration and log files.
  prefs: []
  type: TYPE_NORMAL
- en: Users and credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several files that control user access to the system and its files.
    Besides gathering networking and service data about the rest of the network this
    is probably the most important portion of post-exploitation. If you are able to
    determine both username and passwords that work on other systems throughout the
    network then the likelihood of the penetration test being a total success increases
    dramatically. With a Linux system there are several files that can be used to
    try to gain user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should also use `w` to check who is already on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We can determine who was the last person to log on by typing `last:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: It looks like there are no actual user logins. As indicated in the previous
    output, reboots are also displayed when using the `last` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'One method of determining if there are any local user accounts that have accessed
    the system recently is to use `lastlog` which will present a listing of all user
    accounts and the time they last logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: From the output we can determine that the users `john` and `harold` have both
    logged into the system. One logged in from the `192.168.1.100` network, the other
    from `192.168.75.12`. Once we get the passwords from these two accounts we should
    first determine if these systems are within scope of our test, and if they are,
    we should attempt to log into any available services using the credentials we
    collect from the Kioptrix machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we are at it the SSH keys should be enumerated as well. We can take a
    look in the `/root/.ssh` directory to see if there is any indication that any
    such keys exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case there are no SSH keys available on the Kioptrix machine. Let''s
    take a look at our BackTrack machine and see if the result is similar. Ideally,
    you would find the keys needed to connect to a remote machine. Note: This machine
    must have connected to other machines via SSH.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the basics out of the way we need to collect the `/etc/passwd`
    and shadow files so that we can try our luck at cracking the passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The shadow file contains all of the hashed user account passwords. We will need
    to unshadow these passwords for them to be useful to us.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a third party to crack passwords for your client is NOT a good idea unless
    your client fully understands that you are sending the passwords to an environment
    that you have no control over and realizes the inherent risk in such a process.
    If this is the case be sure to **"get it in writing**" to ensure you are covered
    if something goes wrong and the passwords are leaked on the net… NOTE: A real
    attacker would have no qualms about sending these files off to an unknown party
    to get cracked, but there are limits to everything and losing control of customer
    data is NOT a good idea. After all, unlike the real world attacker, you should
    care about the safety of the environment you are testing!'
  prefs: []
  type: TYPE_NORMAL
- en: Moving the files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There has been a lot of data to cross the screen at this point. Most often,
    you will want to push this data back to a system that is under your control. Be
    it a compromised system that you have set up internally as a repository, or a
    direct connection back to the attacking system, you will need to come up with
    some method of transferring this data back.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not use a production level open web server to store or transfer confidential
    files! The rule of thumb is that you should treat customer data as if it was your
    own, and placing critical password files on an open share or any other uncontrolled
    storage is a **really** bad idea. In a real-life situation you would set up a
    secured transfer mechanism where you have full control over the data. It should
    also be encrypted whenever possible, especially when being routed over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Kioptrix machine has an open web server installed so one of the easiest
    methods to get a file back would to be to simply copy it to the `/var/www/html`
    directory which is open to everyone. In the Kioptrix shell type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Pick up the files on BackTrack by typing the following which will create a
    directory named `kioptrixFiles`, change `pwd` to that directory and then pull
    over the files from the Kioptrix web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '`shadow` and `passwd` are both in the BackTrack `kioptrixFiles` directory now.
    Before proceeding we should remove the two files from the web server on the Kioptrix
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: On the BackTrack machine open up a shell and browse to your `/pentest/passwords/john`
    directory where we will use unshadow to combine the Kioptrix `passwd` and `shadow`
    files into `kioptrixPW.db`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the necessary file we can use john to attempt cracking the
    hashes in `kioptrixPW.db`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that cracking passwords may take a few minutes, hours, or even days depending
    on the complexity of the passwords used...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: A faster method of accessing the system without using an exploit is to modify
    an existing account. Open up a shell to your Kioptrix machine using the samba
    (or any other exploit that allows root access) and then type the following in
    to change the games account enough to allow login and root access.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Because of the restrictions imposed on us in the reverse shell we use `awk`
    to create a modified version of the file. We change the user and group UID to
    equal that of root and add the `/bin/bash` shell so that we can log in remotely.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Before we change any existing files we should back them up first. This is especially
    important when performing a test for a client.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We copy the modified test file to overwrite `passwd`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Changing the permissions back to match those of the original file may prevent
    future complications.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: We add a password to the games account. The current SSH account does not allow
    for blank passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a new terminal on your BackTrack machine and connect back to Kioptrix
    using your new account. Use the password you created for the games account (1funnypassword
    if you followed along exactly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We have connected to the SSH server using the modified games account. All previous
    shell restrictions are now removed and we could use any command on the system
    such as `visudo` without error.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows™ post-exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most environments you test will have many Windows™-based systems. It is important
    to understand where the important files and settings are and also how they can
    be obtained and reviewed when dealing with the restrictions imposed by your exploit
    shell. Here we will discuss the various methods used to obtain this data. We cannot
    account for every operating system or eventuality, but we can provide the basic
    knowledge necessary for someone to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows-based operating systems use GPOs that contain almost any piece of data
    you would want, to properly perform post-exploitation information gathering on
    Microsoft Windows operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to follow along with this section you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One registered copy of Microsoft Windows XP SP2: This machine will need an
    additional virtual NIC assigned to the Vlab_1 virtual network as well (192.168.50.0/24).
    If you have followed along with previous chapters you will already have VirtualBox
    assigning IP addresses to that virtual segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kioptrix Level 1 connected to Vlab_1 (192.168.50.0/24).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BackTrack guest machine connected on VLAN1 (192.168.75.0/24).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pfSense guest machine to provide the VLAN1 network with its DHCP addresses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All examples will be clearly documented in case you do not have a Windows machine
    available for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Important directories and files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many important files and directories in a Windows machine. Some of
    these include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **File** | **Path** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `*.log` | `%WINDIR%\system32\CCM\logs\*.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `AppEvent.Evt` | `%WINDIR%\system32\config\AppEvent.Evt` |'
  prefs: []
  type: TYPE_TB
- en: '| `boot.ini` | `%SYSTEMDRIVE%\boot.ini` |'
  prefs: []
  type: TYPE_TB
- en: '| `default.sav` | `%WINDIR%\system32\config\default.sav` |'
  prefs: []
  type: TYPE_TB
- en: '| `hosts` | `%WINDIR%\System32\drivers\etc\hosts` |'
  prefs: []
  type: TYPE_TB
- en: '| `index.dat` | `Content.IE5\index.dat and other locations` |'
  prefs: []
  type: TYPE_TB
- en: '| `NetSetup.log` | `%WINDIR%\debug\NetSetup.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `ntuser.dat` | `%USERPROFILE%\ntuser.dat` |'
  prefs: []
  type: TYPE_TB
- en: '| `pagefile.sys` | `%SYSTEMDRIVE%\pagefile.sys` |'
  prefs: []
  type: TYPE_TB
- en: '| `SAM` | `%WINDIR%\repair\sam` |'
  prefs: []
  type: TYPE_TB
- en: '| `SecEvent.Evt` | `%WINDIR%\system32\config\SecEvent.Evt` |'
  prefs: []
  type: TYPE_TB
- en: '| `security.sav` | `%WINDIR%\system32\config\security.sav` |'
  prefs: []
  type: TYPE_TB
- en: '| `software.sav` | `%WINDIR%\system32\config\software.sav` |'
  prefs: []
  type: TYPE_TB
- en: '| `system` | `%WINDIR%\repair\system` |'
  prefs: []
  type: TYPE_TB
- en: '| `system.sav` | `%WINDIR%\system32\config\system.sav` |'
  prefs: []
  type: TYPE_TB
- en: '| `win.ini` | `%WINDIR%\win.ini` |'
  prefs: []
  type: TYPE_TB
- en: Using Armitage for post-exploitation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point we should already be comfortable to using "old school" methods
    of manual exploitation. Understanding the nuts and bolts of how penetration testing
    occurs will increase the ability to troubleshoot more powerful tools when something
    goes wrong. It also allows you to become comfortable enough to eventually create
    your own modules and proof of concept exploit code. The pentesting process does
    not really change from test to test: Enumeration and data gathering, exploitation,
    followed by post-exploitation. There are many different tools and methods that
    can be used to accomplish these tasks however. In this section we will be taking
    advantage of the ease and simplicity of Armitage which according to its website
    and author is a "comprehensive red team collaboration tool for Metasploit…" -
    [www.fastandeasyhacking.com/manual](http://www.fastandeasyhacking.com/manual)
    . Armitage was created by Raphael Mudge and is available to the public at [http://fastandeasyhacking.com/](http://fastandeasyhacking.com/)
    and is also preinstalled on BackTrack. The manual that is freely available at
    the site is well written and easy to follow.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a new terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This will update the Metasploit framework on your BackTrack machine. You will
    need to be connected to the Internet for this command to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: This command will invoke the armitage program. When the **Connect..**. window
    appears click on the **Connect** button. When prompted if you would like to the
    Metasploit RPC server choose **Yes**. The first time you run Armitage it may take
    a few minutes to fully load.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Armitage for post-exploitation](img/77440S_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please take a few moments to familiarize yourself with the Armitage graphical
    user interface before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Enumeration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Armitage allows for several methods of gathering data. We will use the nmap
    functionality to review what is on the sample network. In the top Armitage navigation
    bar choose **Hosts** | **Nmap Scan** | **Quick Scan (OS detect)**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration](img/77440S_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter `192.168.75.0/24` to scan the proper VLAN1 subnet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration](img/77440S_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The scan will take a few moments to complete. Once it has you will be presented
    with a message stating that your scan is complete and that the **Find Attacks**
    option should be used to…find attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration](img/77440S_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the network is set up properly you should see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration](img/77440S_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have successfully enumerated the VLAN1 network and our systems
    are displayed graphically within Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exploitation using Armitage is a breeze and so simple that one has to be very
    careful when selecting targets. After ensuring that the targets enumerated are
    within scope, select **Attacks** | **Find Attacks**. When the process has completed
    you will be presented with a pop up stating that the analysis is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploitation](img/77440S_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now it is time to take over this Windows XP machine using the ms08_067 vulnerability.
    Rarely has exploiting a vulnerability been as consistent and easy as this one.
    Right-click on the Windows system icon in the workspace and select **Attack**
    | **smb** | **ms08_067_netapi**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploitation](img/77440S_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A configuration menu will appear. Everything will be filled out and ready to
    go. Click on **Launch** to continue.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploitation](img/77440S_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything worked properly the icon in the workspace will change to resemble
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploitation](img/77440S_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The lightning bolts are a graphical indicator that you have successfully compromised
    this machine.
  prefs: []
  type: TYPE_NORMAL
- en: Were connected, now what?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Congratulations, the Windows system has been compromised and we are now able
    to take advantage of the combination of Armitage and Meterpreter to perform our
    post-exploitation processes. By right-clicking the image of the compromised machine
    we are able to select from a large menu of options. Let's begin by reviewing what
    is on the target system by right clicking on the host and choosing **Meterpreter
    <#>| Explore** | **Browse Files**. Not only are we presented with a nice listing
    of files, but it is in an easy to use graphical explorer format. For those of
    us who are more comfortable with a GUI than with the command line this should
    be a breath of fresh air!
  prefs: []
  type: TYPE_NORMAL
- en: '![Were connected, now what?](img/77440S_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the menu''s we can quickly look at the system processes as well using
    the **Meterpreter 3** | **Explore** | **Show Processes** menu option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Were connected, now what?](img/77440S_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Regardless of operating system, we still need to know what types of tools we
    have available on the target system. It is also very important that we determine
    what type of system we are interacting with. This can be determined by reviewing
    the running processes, installed software, user history, and more. We will need
    to take advantage of the meterpreter shell to pull some of this data.
  prefs: []
  type: TYPE_NORMAL
- en: We should start with some of the more basic commands. In Armitage right-click
    on the compromised system and choose **Meterpreter 3** | **Interact** | **Meterpreter
    Shell**. At the meterpreter prompt type `sysinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Were connected, now what?](img/77440S_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, according to the output we see here, we can determine that we are accessing
    an x86-based Windows XP service pack 2 machine. Let's get some more information
    about the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: Networking details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with Linux, it is very important to gather networking information as soon
    as possible. Meterpreter allows the use of the `ipconfig` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Networking details](img/77440S_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is definitely the type of information that is a joy to see in the real
    world. This particular system has two distinct network cards, and the possibility
    that the system could be used to explore the 192.168.50.0/24 network is high.
    Before we move on we should take a look at the routing table and other networking
    information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Networking details](img/77440S_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The route command eliminates any reservations we may have had that the secondary
    networking card was just a diversion. In order to get a better idea of what we
    have here we should review further details. Let's launch a shell on the compromised
    host. This can be obtained by typing `shell` from the meterpreter console. Open
    up a shell and browse to the `c:\windows\system32\drivers\etc` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: We can take a look at the host file by using the type command which is very
    similar to cat in Unix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Nothing very interesting here; not every file you find will lead to dramatic
    and exciting discoveries. That aside, it is still very important to be as thorough
    as possible. Penetration testing can be very similar to detective work where you
    are constantly looking for clues that will lead to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: '![Networking details](img/77440S_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that the type command is to be used just as you would use cat in a
    Unix or Linux based environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to determine if there are any interesting network connections coming
    from this machine. These connections could very well lead us to our next targets
    and assist us in setting overall priorities. Your time to test the network is
    almost certainly limited and you should focus on the most attractive targets to
    ensure efficiency. Remember to look for more than just gaining shells on machines;
    the business units need to understand their true exposure, not see how many unknown
    systems you could pop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `netstat -an` to look at the connections just as we did earlier
    with Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Networking details](img/77440S_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have something interesting. Take a look at the connection between this
    host and `192.168.50.103` on port `80`. Looks like we may have a web server running
    on that machine! This is definitely good news. At this point we seem to have more
    interesting devices on the 192.168.50.0/24 network than we do on the 192.168.75.0/24
    subnet. If the tools exist on the target machine we could already launch a scan
    from this host.
  prefs: []
  type: TYPE_NORMAL
- en: Finding installed software and tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point we have already reviewed the local processes, network connections,
    and had access to the file structure. Now we are at the point where we may want
    to take a look at some of the other networks this system has access to and determine
    if nmap or other tools are installed that could be valuable. Here is how we can
    `find` information on a Windows-based operating system. It is a bit of a workaround
    as there does not seem to be a direct replacement for `locate` or `which` available
    on Windows systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This command will pipe all directories into the find command which will look
    for the NMAP string "important" in the filenames regardless of case.
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding installed software and tools](img/77440S_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beware that this command will sometimes lock up Armitage when using BackTrack
    5 R1\. If this is the case you will need to restart Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: This command will come in handy when trying to find any installed software or
    trying to locate interesting files.
  prefs: []
  type: TYPE_NORMAL
- en: The simple method of finding installed software on a Windows machine would be
    to take a look at the installed programs especially with desktops; the odds are
    the system has all of the default Windows tools available. What you will be interested
    in are the more obscure items like a TFTP server or a network scanner that you
    can take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the installed programs the old fashioned `reg.exe` way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'With this command we export the registry information contained in the `HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall`
    key. We can review the findings directly with the type command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![Finding installed software and tools](img/77440S_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One portion of this file is interesting indeed. Take a look at the virtualbox
    guest additions field. At this point we should begin to understand that we may
    be dealing with a virtualized system. Of course, ideally we would be pulling down
    the ENTIRE registry as it has a tremendous amount of data available that should
    be sifted through on your own machine. There is no sense in staying connected
    to a machine longer than you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point you should be able to look through the registry and filesystem
    and find what you need in an orderly fashion. If you really want to learn more
    about post-exploitation then I can think of no better place to start than with
    the recent recording of darkoperator''s (Carlos Perez) presentation titled "Tactical
    Post Exploitation" from DerbyCon 2011\. You can find a link to this and many other
    great and interesting presentations at Adrian Crenshaw''s website: [www.irongeek.com](http://www.irongeek.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Armitage makes pivoting trivial. We know that there is another network available
    to us from the compromised Windows machine, and now it is just a matter of being
    able to scan the network and launch attacks from this system. There are manual
    methods of accomplishing this, but the simplest is to right-click on the graphical
    representation of the target machine in Armitage and select your **Meterpreter**
    | **Pivoting** | **Setup** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting](img/77440S_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will be presented with a menu to select your pivot point. Select `192.168.50.0`
    and click on **Add Pivot**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting](img/77440S_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will add the proper route information to allow you to perform scanning
    and other attacks through the victim machine. Let''s give it a try:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your compromised Windows machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top navigation bar choose **Hosts** | **MSF Scans**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `192.168.50.0/24` and continue. This may take some time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the findings and choose **Find Attacks** from the top **Attacks** menu
    selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting](img/77440S_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on your new found hosts and select scan to pull over more information
    about the system. The green lines provide guidance on which systems your pivot
    points are going through. This can be especially useful when dealing with large,
    diverse networks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed the steps necessary to locate and gather information
    from compromised hosts. We have also discussed the risk involved with improper
    preparation and just how important it is that the rules of engagement are agreed
    upon and followed exactly BEFORE any testing occurs. In addition, we have provided
    the base information needed for you to understand the thought process behind post-exploitation
    and what needs to occur to ensure a successful penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember that there are other commands, tools, and methods
    that should be used when pilfering the target system. Remember to focus on the
    goal and not waste too much time trying to dig into information that will not
    be beneficial to the test. Every testing team (and tester) has a set of commands
    and output formats they prefer, as long as the critical information is found
  prefs: []
  type: TYPE_NORMAL
- en: At this point it is advisable to start getting used to logging your work. We
    address reporting more in future chapters, but keep in mind that in order to report
    you will need data. It is also important to have a log of any and all system commands
    you may have run on a remote system, in case there are problems down the road
    or you simply want to repeat the exact test again in the future to see if progress
    has been made in securing the units in question.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into bypassing firewalls and avoiding intrusion
    detection systems. This is important when testing not only the environment, but
    also the response of the security and network staff at a site. We will cover the
    logic behind bypassing intrusion detection systems and also how to mimic commonly
    seen traffic patterns to avoid detection.
  prefs: []
  type: TYPE_NORMAL
