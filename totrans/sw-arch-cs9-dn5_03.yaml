- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documenting Requirements with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps is an evolution of Visual Studio Team Services, and it offers a
    variety of new features that can help developers to document and organize their
    software. The purpose of this chapter is to present an overview of this tool provided
    by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure DevOps project using your Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the functionalities offered by Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing and managing requirements using Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting use cases in Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two sections of this chapter summarize all the functionalities offered
    by Azure DevOps, while the remaining sections focus specifically on the tools
    for documenting requirements and supporting the overall development process. Most
    of the functionality introduced in the first two sections will be analyzed in
    more detail in other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to create a new free Azure account or use an existing
    one. The *Creating an Azure account* section of *Chapter 1*, *Understanding the
    Importance of Software Architecture*, explains how to create one. The *Azure DevOps
    repository* subsection also requires Visual Studio 2019 Community Edition (free)
    or better.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps is a Microsoft **Software-as-a-Service** (**SaaS**) platform that
    enables you to deliver continuous value to your customers. By creating an account
    there, you will be able to easily plan your project, store your code safely, test
    it, publish the solution to a staging environment, and then publish the solution
    to the actual production infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, Azure DevOps is a complete framework and the ecosystem that it provides
    for software development is currently available. The automation of all the steps
    involved in software production ensures the continuous enhancement and improvement
    of an existing solution in order to adapt it to market needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start the process moving in your Azure portal. If you don''t know how
    to create an Azure portal account, then please check *Chapter 1*, *Understanding
    the Importance of Software Architecture*. The steps to create an Azure DevOps
    account are quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Create a resource** and then **DevOps Starter**:![](img/B16756_03_01.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.1: DevOps starter page'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you start the wizard for creating the project, you can choose from
    several different platforms how you want to deliver your system. This is one of
    the greatest advantages of Azure DevOps, as you are not limited to Microsoft tools
    and products, but can rather choose from all common platforms, tools, and products
    available on the market:![](img/B16756_03_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.2: DevOps technology selection'
  prefs: []
  type: TYPE_NORMAL
- en: The options available will depend on the platform chosen in the first step.
    In some cases, you can choose from several deployment options, as you can see
    in the following screenshot, which appears if you select the .NET platform:![](img/B16756_03_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.3: DevOps technology selection, more details'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: DevOps deployment options'
  prefs: []
  type: TYPE_NORMAL
- en: Once the setup is complete, you will be able to manage the project using the
    project portal according to the information you provided. It is worth mentioning
    that this wizard will create an Azure DevOps Service if you do not have one. Moreover,
    the resource selected for deployment is also automatically created, so for instance
    if you select **Windows Web App**, a web app will be created, and if you select
    **Virtual Machine**, a virtual machine will be created. The Azure DevOps organization
    is where you can organize all of your Azure DevOps projects. The whole process
    takes less than 20 minutes:![](img/B16756_03_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.5: DevOps with Web App project details'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: DevOps with virtual machine project details'
  prefs: []
  type: TYPE_NORMAL
- en: After that, you will be able to start planning your project. The following screenshot
    shows the page that appears once the Azure DevOps project creation is complete.
    In the remainder of this book, we will come back to this page several times to
    introduce and describe various useful features that ensure a faster and more efficacious
    deployment:![](img/B16756_03_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.7: DevOps project page'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, the process for creating an Azure
    DevOps account and starting to develop the best-in-class DevOps tool is quite
    simple. It is worth mentioning that you can start using this fantastic tool at
    no cost, as long as you have no more than five developers on your team, plus any
    number of stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that there is no limit on the number of stakeholders
    because the functionalities available to them are very limited. Essentially, they
    have read-only privileges on boards and work items, and very limited possibilities
    to modify them. More specifically, they can add new work items and existing tags
    to work items, and they can provide feedback. Concerning builds and releases,
    they can just approve releases (some other limited functionalities are in preview
    at the time of writing this book).
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your work using Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps will be discussed in detail in *Chapter 20*, *Understanding DevOps Principles*,
    but you need to understand it as a philosophy that is focused in delivering value
    to customers. It is the union of people, process, and products, where **Continuous
    Integration and Continuous Deployment** (**CI/CD**) methodology is used to apply
    continuous improvements to a software application delivered to the production
    environment. Azure DevOps is a powerful tool whose range of applications encompasses
    all the steps involved in both the initial development of an application and in
    its subsequent CI/CD process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps contains tools for collecting requirements and for organizing
    the whole development process. They can be accessed by clicking the **Boards**
    menu on the Azure DevOps page and will be described in more detail in the next
    two sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Boards menu'
  prefs: []
  type: TYPE_NORMAL
- en: All other functionalities available in Azure DevOps are briefly reviewed in
    the following subsections. They will be discussed in detail in other chapters.
    More specifically, CI and build/test pipelines are discussed in *Chapter 18*,
    *Testing Your Code with Unit Test Cases and TDD*, and *Chapter 21*, *Challenges
    of Applying CI Scenarios*, while DevOps principles and release pipelines are discussed
    in *Chapter 20*, *Understanding DevOps Principles*.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Repos** menu item gives you access to a default Git repository where
    you can place your project''s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Repos menu'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the **Files** item, you enter the default repository initial page.
    It is empty and contains instructions on how to connect to this default repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add further repositories through the drop-down menu at the top of the
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Adding a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: All created repositories are accessible through the same drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, each repository''s initial page contains
    the repository address and a button to generate repository-specific credentials,
    so you can connect to your DevOps repositories with your favorite Git tools. However,
    you can also connect from inside Visual Studio in a very simple way:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio and ensure you are logged in to it with the same Microsoft
    account used to define your DevOps project (or that was used to add you as a team
    member).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Team Explorer** tab and then click the connection button:![](img/B16756_03_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.11: Adding a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the **Connect...** link for Azure DevOps, you will be walked through
    setting up a connection with one of your Azure DevOps projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once connected to your DevOps remote repository, you can use Visual Studio
    Git tools, and can interact also with other DevOps functionalities from within
    Visual Studio. At the time of writing this book, the kind of interaction depends
    on the **New Git user experience** checkbox setting in the Visual Studio options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: New Git user experience checkbox'
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is not checked, you will have the "classic" Visual Studio experience
    where you use Team Explorer for accessing both Git and other DevOps functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Team Explorer **Home** button. Now, you will see commands for performing
    Git operations and for interaction with other Azure DevOps areas:![](img/B16756_03_13.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.13: Team Explorer options'
  prefs: []
  type: TYPE_NORMAL
- en: If you are the one designated to initialize the DevOps repository, create a
    start solution and commit your code by clicking the **Changes** button and then
    following the subsequent instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Sync** button to synchronize your local repository with the remote
    Azure DevOps repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all team members have initialized both their local machine repositories
    and the Azure DevOps repository with the preceding steps, you can now open Visual
    Studio. The solution created in your local repository will appear in the bottom
    area of the **Team Explorer** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the window to open the solution on your local machine. Then, synchronize
    with the remote repository to ensure the code you are modifying is up to date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If, instead, the **New Git user experience** checkbox is checked, the **Team
    Explorer** window has commands just for non-Git DevOps operations and an **Open
    Git Changes** link for opening a new window dedicated to Git operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: New Team Explorer window'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as you go to this window, you are asked to clone or create a new repository.
    In both cases, you will be prompted to provide the address of the remote DevOps
    repository. Once you have created a local repository connected to the remote DevOps
    repository, you can start using the new Git window that offers more options than
    the ones offered by the classic Team Explorer window, and, in general, a more
    complete user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Git changes window'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have changes to commit, you can insert a message in the textbox at
    the top of the window and commit them locally by clicking the **Commit All** button,
    or you can click the dropdown next to this button to access more options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Commit options'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can commit and push or commit and sync, but you can also stage your changes.
    The three arrows in the top right of the Git Changes window trigger a fetch, pull,
    and push, respectively. Meanwhile, the dropdown at the top of the window takes
    care of operations on branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Branches operations'
  prefs: []
  type: TYPE_NORMAL
- en: Package feeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Artifacts** menu handles the software packages used or created by the
    project. There, you can define feeds for basically all types of packages including
    NuGet, Node.js, and Python. Private feeds are needed since commercial projects
    use also private packages, so you need a place to put them. Moreover, packages
    produced during builds are placed in these feeds, so other modules having them
    as dependencies can immediately use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once in the **Artifacts** area, you can create several feeds by clicking the
    **+ Create Feed** button, where each feed can handle several kinds of packages,
    as shown in *Figure 3.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: Feed creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the option to connect to packages from public sources, by default,
    the feed connects to `npmjs`, `nuget.org`, and `pypi.org`. However, you can go
    to the upstream sources tab in the **Feed** settings page and remove/add package
    sources. The settings page can be reached by clicking the settings icon in the
    upper-right corner of the feed page. A screenshot of the page of the newly created
    feed follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Feed page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Connect to feed** button for each feed shows a window that explains,
    for each package type, how to connect to the feed. In particular, for NuGet packages
    you should add all project feeds to your Visual Studio projects''/solutions''
    `nuget.config` file so that local machines can also use them, otherwise, your
    local build would fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: Feed connection information'
  prefs: []
  type: TYPE_NORMAL
- en: Test plans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Test Plans** section allows you to define the test plans you want to
    use and their settings. Tests are discussed in detail in *Chapter 18*, *Testing
    Your Code with Unit Test Cases and TDD*, and *Chapter 22*, *Automation for Functional
    Tests*, but here we would like to summarize the opportunities offered by Azure
    DevOps. Test-related operations and settings can be accessed through the **Test
    Plans** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: Feed Test Plans menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you may define, execute, and track test plans made up of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual acceptance tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatic unit tests must be defined in test projects contained in the Visual
    Studio solution and based on a framework such as NUnit, xUnit, and MSTest (Visual
    Studio has project templates for all of them). Test Plans gives you the opportunity
    to execute these tests on Azure and to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A number of configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to execute them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to track them and where to report their results in the overall project documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For manual tests, you may define complete instructions for the operator in the
    project documentation, covering the environment in which to execute them (for
    example, an operating system), and where to report their results. You can also
    define how to execute load tests and how to measure results.
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pipelines are automatic action plans that specify all steps from the code build
    until the software deployment is in production. They can be defined in the **Pipelines**
    area, which is accessible through the **Pipelines** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: Pipelines menu'
  prefs: []
  type: TYPE_NORMAL
- en: There, you can define a complete pipeline of tasks to be executed alongside
    their triggering events, which encompass steps such as code building, launching
    test plans, and what to do after the tests are passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, after the tests are passed, the application is automatically deployed
    in a staging area where it can be beta-tested. You can also define the criteria
    for automatic deployment to production. Such criteria include, but are not limited
    to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of days the application was beta-tested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of bugs found during beta-testing and/or removed by the last code
    change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual approval by one or more managers/team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The criteria decision will depend on the way the company wants to manage the
    product that is being developed. You, as a software architect, have to understand
    that when it comes to moving code to production, the safer, the better.
  prefs: []
  type: TYPE_NORMAL
- en: Managing system requirements in Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps enables you to document system requirements using work items. Work
    items are stored in your project as chunks of information that can be assigned
    to a person. They are classified into various types and may contain a measure
    of the development effort required, a status, and the development stage (iteration)
    they belong to.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is usually combined with agile methodologies, so Azure DevOps uses iterations,
    and the whole development process is organized as a set of sprints. The work items
    available depends on the *Work Item Process* you select while creating the Azure
    DevOps project. The following subsections contain a description of the most common
    work item types that appears when an **Agile** or **Scrum** *Work Item Process*
    is selected (the default is **Agile**).
  prefs: []
  type: TYPE_NORMAL
- en: Epic work items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you are developing a system made of various subsystems. You are probably
    not going to conclude the whole system in a single iteration. Therefore, we need
    an umbrella spanning several iterations to encapsulate all features of each subsystem.
    Each Epic work item represents one of these umbrellas that can contain several
    features to be implemented in various development iterations.
  prefs: []
  type: TYPE_NORMAL
- en: In the Epic work item, you can define the state and acceptance criteria as well
    as the start date and target date. Besides this, you can also provide a priority
    and an effort estimate. All of this detailed information helps the stakeholders
    to follow the development process. This is really useful as a macro view of the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Feature work items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the information that you provide in an Epic work item can also be placed
    in a Feature work item. So, the difference between these two types of work items
    is not related to the kind of information they contain, but to their roles and
    the goals that your team will reach to conclude them. Epics may span several iterations
    and are hierarchically above Features, that is, each Epic work item is linked
    to several children Features, while each Feature work item is usually implemented
    in a few sprints and is part of a single Epic work item.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that all work items have sections for team discussions.
    There, you will be able to find a team member in the discussion area by typing
    the `@` character (like in many forums/social media applications). Inside each
    work item, you can link and attach various information. You may also check the
    history of the current work item in a specific section.
  prefs: []
  type: TYPE_NORMAL
- en: Feature work items are the places to start recording user requirements. For
    instance, you can write a Feature work item called **Access Control** to define
    the complete functionally needed to implement the system access control.
  prefs: []
  type: TYPE_NORMAL
- en: Product Backlog items/User Story work items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Which of these work items is available depends on the selected *Working Item
    Process*. There are minor differences between them, but their purpose is substantially
    the same. They contain detailed requirements for the Features, described by the
    Features work items they are connected to. More specifically, each Product Backlog/User
    Story work item specifies the requirements of a single functionality that is a
    part of the behavior described in its father Features work item. For instance,
    in a Features work item for system access control, the maintenance of the users
    and the login interface should be two different User Stories/Product Backlog items.
    These requirements will guide the creation of other children work items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tasks**: These are important work items that describe the job that needs
    to be done to meet the requirements stated in the father Product Backlog items/User
    Story work item. Task work items can contain time estimates that help team capacity
    management and overall scheduling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test cases**: These items describe how to test the functionality described
    by the requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of tasks and test cases you will create for each Product Backlog/User
    Story work item will vary according to the development and testing scenario you
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Use case – presenting use cases in Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section clarifies the concepts outlined in the previous section with the
    practical example of WWTravelClub. Considering the scenario described in *Chapter
    1*, *Understanding the Importance of Software Architecture*, we decided to define
    three Epic work items, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: User case Epics'
  prefs: []
  type: TYPE_NORMAL
- en: 'The creation of these work items is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside each work item, we link the different types of work items, as you can
    see in *Figure 3.24*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is really important to know that the connections between work items are really
    useful during software development. Hence, as a software architect, you have to
    provide this knowledge to your team and, more than that, you have to incentivize
    them to make these connections:![](img/B16756_03_24.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.24: Defining a link'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you create a Feature work item, you will be able to connect it to
    several Product Backlog work items that detail its specifications. The following
    screenshot shows the details of a Product Backlog work item:![](img/B16756_03_25.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.25: Product Backlog work item'
  prefs: []
  type: TYPE_NORMAL
- en: After that, Task and Test Case work items can be created for each Product Backlog
    work item. The user interface provided by Azure DevOps is really efficacious because
    it enables you to track the chain of functionalities and the relationships between
    them:![](img/B16756_03_26.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.26: Board view'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you complete the input for the Product Backlog and Tasks work items,
    you will be able to plan the project sprints together with your team. The plan
    view enables you to drag and drop Product Backlog work items to each planned sprint:![](img/B16756_03_27.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.27: Backlog view'
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking a specific sprint on the right, you will see just the work items
    assigned to that sprint. Each sprint page is quite similar to the backlog page,
    but contains more tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16756_03_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.28: User case Epics'
  prefs: []
  type: TYPE_NORMAL
- en: Also useful is the sprints menu on the left that enables each user to jump immediately
    to the current sprints of all projects they are engaged in.
  prefs: []
  type: TYPE_NORMAL
- en: This is how these work items are created. Once you understand this mechanism,
    you will be able to create and plan any software project. It is worth mentioning
    that the tool itself will not solve problems related to team management. However,
    the tool is a great way to incentivize the team to update the project status,
    so you can maintain a clear perspective of how the project is evolving.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how you can create an Azure DevOps account for a software
    development project, and how to start managing your projects with Azure DevOps. It
    also gave a short review of all Azure DevOps functionalities, explaining how to
    access them through the Azure DevOps main menu. This chapter described in more
    detail how to manage system requirements and how to organize the necessary work
    with various kinds of work items, along with how to plan and organize sprints
    that will deliver epic solutions with many features.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter discusses the different models of software architecture. We
    will also learn about the fundamental hints and criteria for choosing from among
    the options offered by a sophisticated cloud platform such as Azure while developing
    the infrastructure of your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Azure DevOps available only for .NET projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of test plans are available in Azure DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can DevOps projects use private NuGet packages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we use work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Epics and Features work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of relationship exists between Tasks and Product Backlog items/User
    Story work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some books and links you may consider reading with a view to gathering
    more information about this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://go.microsoft.com/fwlink/?LinkID=825688](https://go.microsoft.com/fwlink/?LinkID=825688)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/mastering-non-functional-requirements](https://www.packtpub.com/application-development/mastering-non-functional-requirements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
