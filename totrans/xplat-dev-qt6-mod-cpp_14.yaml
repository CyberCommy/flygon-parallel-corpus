- en: '*Chapter 11*: Internationalization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, we learned how to create GUI applications with Qt Widgets
    or Qt Quick. To make our applications usable across the world, we need to add
    translations to the application.
  prefs: []
  type: TYPE_NORMAL
- en: The process of making your application translation-aware is known as **internationalization**.
    It makes it easy to localize content for viewers from different cultures, regions,
    or languages. Translating Qt Widgets and Qt Quick apps into local languages is
    very easy with Qt. These processes of adapting an application to different languages
    with the geographical and technical standards of a target market are known as
    **internationalization**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn how to make an application with multilingual support. Throughout
    the chapter, we will explore different tools and processes to make a translation-aware
    application. In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing source code for translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading translation files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization with Qt Widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization with Qt Quick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create a translation-aware application
    using Qt Widgets and Qt Quick.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter include minimum versions of Qt 6.0.0
    and Qt Creator 4.14.0 installed on the latest desktop platform such as Windows
    10, Ubuntu 20.04, or macOS 10.14.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link: [https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are taken on the Windows platform. You
    will see similar screens based on the underlying platform on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding internationalization and Qt Linguist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The processes of adjusting an application to different languages, geographical
    variations, and technological specifications of a target market are known as **internationalization**
    and **localization**. Internationalization refers to the process of creating a
    software application that can be translated into a variety of languages and for
    different regions without requiring significant technical changes. Internationalization
    is often abbreviated to **i18n**, with 18 being the number of letters between
    the letters *i* and *n* in the English word. The ease with which a product can
    be localized is greatly influenced by its internationalization. Creating a linguistically
    and culturally focused application for a global market is a much more complex
    and time-consuming process. Hence, companies focus on creating i18n-aware applications
    for global markets from the beginning of product development.
  prefs: []
  type: TYPE_NORMAL
- en: For internationalization, you should design your application in such a manner
    that it avoids roadblocks for localization or global deployment later. This covers
    aspects such as allowing Unicode or maintaining careful handling of legacy character
    encodings where appropriate, taking caution of string concatenation, preventing
    code dependencies on user interface string values, and so on. You should provide
    support for features such as identifying translatable strings and system language
    that may be required for internationalization later.
  prefs: []
  type: TYPE_NORMAL
- en: Your application should be aware of local languages, date and time formats,
    numeral systems, or cultural preferences. The modification of a product, application,
    or document's content to fulfill the language, cultural, and other preferences
    of a particular target market is known as **localization**. Localization is often
    written in English as **l10n**, where 10 is the number of letters between *l*
    and *n*. Localization entails incorporating region-specific requirements and translating
    applications for a specific region or language. Localizable features should be
    separated from the source code, allowing adaptation as per the user's cultural
    preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '`lupdate` and `lrelease`. These programs can be used with a qmake project or
    directly with the filesystem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `lupdate` tool locates translatable strings in the project''s source, header,
    and `.ui` or `.qml` files. Then it creates or updates the translation files (`.ts`
    files). You can specify the files to be processed on the command line or in a
    `.pro` file as arguments. `.ts` files use **Document Type Definition** (**DTD**)
    format, described at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/linguist-ts-file-format.html](https://doc.qt.io/qt-6/linguist-ts-file-format.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Qt provides excellent support for internationalization. Qt has built-in support
    for many languages in all user interface elements. However, when writing source
    code for your application, you have to follow certain practices. This includes
    marking translatable strings, avoiding ambiguous strings, using numbered arguments
    (`%n`) as placeholders, and loading the right translation file. You can use both
    C++ and user interface files, and you can also have translatable strings in both
    sources. The tool locates and adds the strings from all sources into a single
    `.ts` file with corresponding contexts.
  prefs: []
  type: TYPE_NORMAL
- en: The translation files with `.ts` extension are used during application development.
    These files can be compiled into a compact binary format. The compiled translation
    files are encoded in the `QM` format and have the `.qm` file extension. While
    running an application, the Qt runtime makes use of `.qm` files instead of `.ts`
    files. You can convert `.ts` to `.qm` files using the `lrelease` tool. A `.qm`
    file is a lightweight binary file. It allows lightning-fast translation lookups.
    You can specify `.ts` files on the command line or in a `.pro` project file to
    be processed by `lrelease`. This tool is used every time an application is released,
    from the test version to the final production version. If the `.qm` files aren't
    available, then the application will still work fine and use the original texts
    from the source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the selection of languages, Qt Linguist and `lrelease` use certain internal
    rules. You can find details about these rules at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/i18n-plural-rules.html](https://doc.qt.io/qt-6/i18n-plural-rules.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the Qt Linguist user interface. You can launch Qt Linguist
    from the Qt installation directory by double-clicking the **Linguist** executable
    or selecting it from the command prompt. You will see the following user interface
    appear on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Qt Linguist user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Qt Linguist user interface
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, you can see multiple sections and there are a few disabled
    buttons in the toolbar. You can open a `.ts` file from the **File** menu. We will
    discuss these sections while discussing an example in a later section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Qt Linguist and the GUI interface at the following
    web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-6/linguist-translators.html](https://doc.qt.io/qt-6/linguist-translators.html)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you got familiar with terms related to internationalization
    and tools provided by the Qt framework. With a good understanding of the basics,
    we are ready to write a translation-aware application in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing source code for translation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how to mark strings as translatable strings
    and how to use the tools provided by Qt. Wherever your application uses a quoted
    string that is visible to the user, make sure the `QCoreApplication::translate()`
    method processes it. To do this, simply use the `tr()` method to mark the strings
    as translatable that are meant for display purposes. This feature is used to show
    which text strings are translatable inside your C++ source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to use a `QLabel` to show text on a user interface,
    then embed the text inside the `tr()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QLabel *label = new QLabel(tr("Welcome"));`'
  prefs: []
  type: TYPE_NORMAL
- en: The class name is the translation context for the `QObject` and its derived
    classes. To override the context, `QObject`-derived classes must use the `Q_OBJECT`
    macro in their class definition. This macro sets the context for the derived classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt provides several convenience macros and methods for internationalization.
    A few of the most common macros used for translation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tr()` returns a translated string if translation is available in a C++ source
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qsTr()` returns a translated string if translation is available in a QML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qtTrId()` finds and returns a translated string identified by an ID in a C++
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qsTrId()` finds and returns a translated string identified by an ID in a QML
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QT_TR_NOOP()` tells `lupdate` to collect the string in the current context
    for translating later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QT_TRID_NOOP()` marks an ID for dynamic translation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QCoreApplication::translate()` provides the translation by querying the installed
    translation files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qsTranslate()` provides a translated version for a given context in a QML
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QQmlEngine::retranslate()` updates all binding expressions with strings marked
    for translation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translatable strings in C++ files are marked using `tr()`, and in QML files
    `qsTr()` is used. We will discuss these macros and methods throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the translatable strings are fetched by the `lupdate` tool and updated
    in a **Translation Source** (**TS**). A TS file is an XML file. Usually, TS files
    follow the following naming convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ApplicationName>_<LanguageCode>_<CountryCode>.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: In this convention, `LanguageCode` is an ISO 639 language code in lowercase
    and `CountryCode` is an ISO 3166 two-letter country code in uppercase. You can
    create translations for the same language but targeting a different country by
    using the specific country code. You can create a default translation file with
    a language code and country code while creating a Qt application through Qt Creator's
    new project wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you create the `.ts` files, you can run `lupdate` to update the `.ts`
    files with all the user-visible strings. You can run `lupdate` from the command
    line as well as from Qt Creator and the Visual Studio add-in. Let''s use Qt''s
    command prompt to run the following command for the `HelloWorld` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`lupdate` fetches the translatable strings from different source files such
    as `.cpp`, `.h`, `.qml`, and `.ui`. For `lupdate` to work effectively, you should
    specify the translation files in the application''s `.pro` file under the `TRANSLATIONS`
    variable. Look at the following `.pro` file section where we have added six translation
    source files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can also add wildcard-based translation file selections with `*.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To translate a Qt Quick application, use the `qsTr()` method to mark the strings
    inside the `.qml` files. You can create a translation file for a single QML file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create multiple translation files for different languages and put them
    inside a `.qrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can process all QML files in a `.qrc` file using `lupdate` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To process all QML files without using a `.qrc` file, type the following into
    Qt''s command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass a C++ source file as an argument along with the resource
    file. It is optional to mention translation files in the `.pro` file. You can
    do it by specifying the translation file on the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`lrelease` integrates translations that are marked as `finished`. If a string
    is missing translations and is marked as `unfinished`, then the original text
    is used. Translators or developers can modify the TS file contents and mark it
    as `finished` with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Qt Linguist and open the `.ts` file from the `.ts` file in the project
    structure and open with Qt Linguist, as shown here:![Figure 11.2 – The Open With
    Qt Linguist option in Qt Creator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – The Open With Qt Linguist option in Qt Creator
  prefs: []
  type: TYPE_NORMAL
- en: Then click on any of the contexts in the **Context** view to see the translatable
    strings for that context in the **Strings** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Source text** view, enter the translation of the current string. You
    can find existing translations and similar phrases in the **Phrases and Guesses**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The translator may enter a comment in the **Translator comments** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish the translation, press *Ctrl* + *Enter* and select the tick icon from
    the toolbar. You will see a green tick mark for translated strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, save the file and exit the Qt Linguist tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can run `lrelease` without specifying a `.pro` file. When you run `lrelease`
    to read the `.ts` files, then it generates `.qm` files that are used by the application
    at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once the `.qm` files are generated, add them to a `.qrc` file. Your application
    is now ready for translation.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use a text ID-based translation mechanism. In this approach, every
    translatable string in the application is assigned a unique identifier. These
    unique text identifiers are directly used in the source code as a replacement
    for actual strings. The user interface developers would need to put more effort
    into this but it is much easier to maintain if your application contains huge
    numbers of translated strings.
  prefs: []
  type: TYPE_NORMAL
- en: In some applications, certain classes may not use `QObject` as the base class
    or use the `Q_OBJECT` macro in their class definition. But these classes may contain
    some strings that may require translation. To solve this issue, Qt provides certain
    macros to add translation support.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `Q_DECLARE_TR_FUNCTIONS(ClassName)` as follows to enable translation
    for your non-Qt classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This macro is defined inside `qcoreapplication.h`. When you add this macro,
    Qt adds the following function to your class to enable translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, you can notice that Qt calls `QCoreApplication::translate()`
    with the class name as the context.
  prefs: []
  type: TYPE_NORMAL
- en: You can also have translatable strings outside a class or method; `QT_TR_NOOP()`
    and `QT_TRANSLATE_NOOP()` are used to mark these strings as translatable. There
    are different macros and functions available for text ID-based translation. You
    can use `qsTrId()` instead of `qsTr()`, and `QT_TRID_NOOP()` instead of `QT_TR_NOOP()`.
    You can use the same text IDs as user interface strings instead of plain strings
    in the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: In Qt Linguist, multiple translation files can be loaded and edited simultaneously.
    You can also use **phrase books** to reuse existing translations. Phrase books
    are standard XML files that contain typical phrases and their translations. These
    files are created and updated by Qt Linguist and can be used by any number of
    projects and applications. If you would like to translate source strings that
    are available in a phrase book, Qt Linguist's Batch Translation function can be
    used. Select **Batch Translation** to specify which phrase books to use and in
    what order during the batch translation process. Only entries with no current
    translation should be considered, and batch-translated entries should be marked
    as **Accepted**. You can also create a new phrase book from the **New Phrase Book**
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '`lupdate` requires all source code to be encoded in UTF-8 by default. Files
    that feature a `CODECFORSRC` qmake variable to `UTF-16` to parse files without
    a BOM as UTF-16\. By default, certain editors such as Visual Studio use a separate
    encoding. You can avoid encoding problems by limiting source code to ASCII and
    using escape sequences for translatable strings.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how to use `lupdate` and `lrelease` to create
    and update translation files. Next, we will learn how to install a translator
    and load a translation file in your Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: Loading translations in a Qt application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we created translation files and understood the uses
    of the tools. To look up translations in a TS file, `QTranslator` functions are
    used. The translator must be instantiated before the application's GUI objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at how to load these translation files using `QTranslator`
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can see that we have created a `translator` object
    and loaded the corresponding translation file. `QLocale` is used to fetch the
    underlying system language. You can also use `QLocale` for localizing numbers,
    the date, the time, and currency strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can load a translation file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are looking into the system language and loading the corresponding
    translation files. The preceding approach works well when you want to use the
    system language as your application language. However, some users may like to
    use a regional language that is different from the system language. In that case,
    we can change the language as per user choice. We will learn how to do that in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Switching languages dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned how to use the system language or a default language
    for your Qt application. In most applications, you can just detect the language
    in `main()` and load an appropriate `.qm` file. Sometimes, your application must
    be able to support changes to the user's language settings while still running.
    An application that is used by multiple people in shifts may need to switch languages
    without requiring a restart.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this in a Qt Widgets-based application, you can override `QWidget::changeEvent()`.
    Then, you have to check whether the event is of the `QEvent::LanguageChange` type.
    You can retranslate the user interface accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet explains how to achieve dynamic translation in a
    Qt Widgets-based GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`QEvent::LocaleChange` can cause the list of installed translators to switch.
    You can create an application with a user interface that provides users with the
    option to change the current application language. When the `QEvent::LanguageChange`
    event occurs, the default event handler for `QWidget` subclasses will call this
    method. If you are using the `QCoreApplication::installTranslator()` function
    to install a new translation, you will get a `LanguageChange` event. In addition,
    by sending `LanguageChange` events to other widgets, the GUI will force them to
    update. Any other events can be passed to the base class for further processing.'
  prefs: []
  type: TYPE_NORMAL
- en: To enable dynamic translation, you can provide an option in the command line
    or over a GUI. By default, Qt puts all of the translatable strings in the `.ui`
    file inside `retranslateUi()`. You have to call this function whenever the language
    is changed. You can also create and call your custom method to retranslate the
    strings created through C++ code based on the `QEvent::LanguageChange` event.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how to achieve dynamic translation in the application
    runtime. In the next section, we will create a translation-aware application using
    Qt Widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization with Qt Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we discussed how to create translation files and how
    to use `QTranslator` to load a translation file. Let's create a simple example
    using Qt Widgets and implement our learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the subsequent steps to create the sample application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Qt Widgets-based application using Qt Creator's new project creation
    wizard and follow through the screens as discussed in earlier chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Translation File** screen, choose **German (Germany)** as the language
    option, or any preferred language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finish the project creation. You will see that `Simplei18nDemo_de_DE.ts` is
    created in your project structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you add a `QLabel` to the `.ui` file and add `Welcome` text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, run `lupdate`. You can run `lupdate` from the command line as well as
    from the Qt Creator interface, as shown in *Figure 11.3*:![Figure 11.3 – Qt Linguist
    options in Qt Creator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Qt Linguist options in Qt Creator
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run `lupdate`, you will see the following output in the console window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the `.ts` file is updated with strings. Open `Simplei18nDemo_de_DE.ts`
    with a plain text editor. You should see the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the user interface strings are updated inside the .ts file
    and the language is defined for the translation at the top of the file. You can
    create respective translation files by modifying this field in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<TS version="2.1" language="de_DE">`'
  prefs: []
  type: TYPE_NORMAL
- en: You will also see that the translation status is `unfinished`.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's open the file with Qt Linguist and complete the translation:![Figure
    11.4 – Example showing different sections of the Qt Linguist interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – Example showing different sections of the Qt Linguist interface
  prefs: []
  type: TYPE_NORMAL
- en: You will see six different sections in the user interface. Select a context
    in the **Context** view to load the corresponding strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a translation in the **Source text** view. You can use Google Translate
    to translate the string into the desired language. Here we have translated the
    strings to the German language using Google Translate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple translations used. Please ignore if the strings don't have
    the exact meaning. I am not familiar with the German language. I have used this
    for demonstration purposes. Hence, I have added a translator's comments.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the translation, press *Ctrl* + *Enter* or click on the green tick
    icon on the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to save the translation. Repeat this for all translatable strings
    listed in the context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `lrelease` from Qt''s command prompt or the IDE''s option. You will see
    that the `.qm` file is generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the translator to `main.cpp` and load the translation file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The final step is to run qmake and build the application. Then, hit the **Run**
    button in the bottom-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have successfully translated our GUI into German. You will see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Output of the translation example using Qt Widgets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – Output of the translation example using Qt Widgets
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You learned how to translate your application into a different
    language. You can now translate your Qt application to a local language and share
    it with your friends and colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how to create a translation-aware application
    using Qt Widgets. In the next section, we will add dynamic translation capability
    to the Qt Widgets application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dynamic translation to a Qt Widgets application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you learned how to create a Qt Widgets-based application
    and change the language to a preferred language. However, like most global applications,
    you may need to provide more translations and allow users to change the language
    on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the example from the preceding section with some additional implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a combo box to the `.ui` file and add three languages to it. For explanation
    purposes, we have used English, German, and Spanish. We have added a message at
    the center and added a language-switching option in a dropdown:![Figure 11.6 –
    A form in Qt Designer showing layouts used in the example
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.6_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – A form in Qt Designer showing layouts used in the example
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the new translation files to the project file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify the `CustomWidget` class and add the following methods for dynamic
    translation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to connect the signal and slot. We have created the connections
    in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the following code to the slot definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are receiving the language choice from the user interface through the
    combo box index change signal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to install a new translator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to reimplement `changeEvent()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run qmake and hit the **Run** button on the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Example showing the output when the English language is selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.7_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Example showing the output when the English language is selected
  prefs: []
  type: TYPE_NORMAL
- en: Change the language from the language selection dropdown. Let's select **German**
    as the new language. You will see the entire GUI changed with German strings:![Figure
    11.8 – Example showing the output when the German language is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.8_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – Example showing the output when the German language is selected
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, switch the language to **Spanish**. You will see the GUI text changed
    to Spanish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Example showing the output when the Spanish language is selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.9_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – Example showing the output when the Spanish language is selected
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully created a multilingual Qt Widgets application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to translate your Qt Widgets-based GUI at runtime.
    In the next section, we will create a translation-aware application using Qt Quick.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization with Qt Quick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed internationalization in Qt Widgets. In
    this section, we will discuss different aspects of internationalizing your Qt
    Quick application. The underlying localization scheme in Qt Quick applications
    is similar to Qt Widgets applications. The same set of tools described in the
    Qt Linguist Manual are also used in Qt Quick. You can translate an application
    that uses both C++ and QML.
  prefs: []
  type: TYPE_NORMAL
- en: In a Qt project file, the `SOURCES` variable is used for C++ source files. If
    you list QML or JavaScript files under this variable, the compiler will attempt
    to use the files considering them as C++ files. As a workaround, you can use a
    `lupdate_only {...}` conditional declaration to make the QML files visible to
    the `lupdate` tool but invisible to the C++ compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example. The application''s `.pro` file snippet lists
    two QML files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also use a wildcard match to specify the QML source files. Since the
    search is not recursive, you must list each directory in which user interface
    strings can be found in the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an example with a simple translation. We will create a similar
    screen as we created in the Qt Widgets application. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Qt Quick-based application using Qt Creator's new project creation
    wizard and follow through the screens as discussed in earlier chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Translation File** screen, choose **German (Germany)** as the language
    option or any preferred language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finish the project creation. You will see that `QMLTranslationDemo_de_DE.ts`
    is created in your project structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you add a `Text` to the `.qml` file and add `Welcome` text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines of code to `main.cpp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The steps are similar to the Qt Widgets example. Next, run `lupdate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the same steps to update the translation in the `.ts` files using Qt
    Linguist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `lrelease` from Qt's command prompt or from the IDE's option. You will see
    that the `.qm` file is generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `.qm` files to the resources (`.qrc`) file and run qmake.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to build and run the application. Hit the **Run** button in
    Qt Creator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the identical output as we have seen in the Qt Widgets example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Output of the translation example using Qt Quick'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.10 – Output of the translation example using Qt Quick
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we translated our Qt Quick application to German.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how to create a translation-aware application
    using Qt Quick. In the next section, we will add dynamic translation capability
    to the Qt Quick application.
  prefs: []
  type: TYPE_NORMAL
- en: Translating dynamically in a Qt Quick application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you learned how to create a Qt Quick-based application
    and how to change the language to a preferred language. Just like the Qt Widgets
    example, you can also add dynamic translations to your Qt Quick application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the previous example with some additional implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an i18n support class named `TranslationSupport` and add the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a helper class that supports the translation feature in
    QML. It is used to update the translation files in the translator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, add the following code to switch the translator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code to the QML `INVOKABLE` method definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.cpp` file, add the following code. Please note that we have exposed
    the `TranslationSupport` instance to the QML engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Then add the `updateGUI()` signal with the `QQmlApplicationEngine::retranslate()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s have a look at the `main.qml` file. We have added a combo box to the
    `.qml` file and added three languages to it. For explanation purposes, we have
    used English, German, and Spanish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Run `lupdate` and proceed with the translation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the same steps to update the translation in `.ts` files using Qt Linguist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `lrelease` from Qt's command prompt or from the IDE's option. You will see
    that the `.qm` file is generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `.qm` files to the resources (`.qrc`) file and run qmake.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to build and run the application. Hit the **Run** button in
    Qt Creator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Qt Quick example showing the output when the English language
    is selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Qt Quick example showing the output when the English language
    is selected
  prefs: []
  type: TYPE_NORMAL
- en: Change the language from the language selection dropdown. Let's select **German**
    as the new language. You will see the entire GUI changed with German strings:![Figure
    11.12 – Qt Quick example showing the output when the German language is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – Qt Quick example showing the output when the German language
    is selected
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, switch the language to **Spanish**. You will see the GUI text changed
    to Spanish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Qt Quick example showing the output when the Spanish language
    is selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B16231.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – Qt Quick example showing the output when the Spanish language
    is selected
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully created a multilingual Qt Quick application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to translate your Qt Quick-based GUI at runtime.
    In the next section, we will discuss how to deploy translation files.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, we learned how to create translation-aware applications
    using both Qt Widgets and QML. You don't have to ship the `.ts` files with your
    application. To deploy translations, your release team must use the updated `.qm`
    files and ship them with the application package. The `.qm` files required for
    the application should be placed in a location where `QTranslator` can locate
    them. Typically, this is done by embedding `qm` files in a resource (`.qrc`) file
    or specifying a path that contain the `.qm` files relative to `QCoreApplication::applicationDirPath()`.
    The `rcc` tool is used to embed the translation files into a Qt application during
    the build process. It works by producing a corresponding C++ file containing specified
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can automate the generation of `.qm` files by adding a script to your `.pro`
    file. You do it by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, use the language codes to declare the languages under the `LANGUAGES`
    variable in your Qt project (`.pro`) file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `lrelease` and `embed_translations` to the `CONFIG` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then add a function to generate the `.ts` files for the intended languages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, define the `TRANSLATIONS_FILES` variable, use `lrelease` to create
    the `.qm` files, and embed them in the application resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding steps will run the `lrelease` automatically and generate the `.qm`
    files. The `lrelease` tool processes the translation files listed under the `TRANSLATIONS`
    and `EXTRA_TRANSLATIONS`. Unlike the `TRANSLATIONS` variable, files listed under
    `EXTRA_TRANSLATIONS` are only processed by `lrelease` tool, not by the `lupdate`.
    You need to embed the `.qm` files into your resource or ship the `.qm` files with
    your deployment package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about automating generation of QM files here: [https://wiki.qt.io/Automating_generation_of_qm_files.](https://wiki.qt.io/Automating_generation_of_qm_files)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to deploy your translation files. In the next
    section, we will summarize our takeaways from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at the core concepts of internationalization
    and localization in Qt. We discussed different tools provided by Qt for internationalization.
    We learned how to use Qt Linguist. We also looked at how to translate a Qt Widgets
    application into a different language. Then, we learned how to translate dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: In the latter part of the chapter, we discussed translating a Qt Quick application.
    Afterward, we learned how to switch languages dynamically in a Qt Quick application.
    Now you can create an application with multiple languages and share it with your
    clients or friends in a different geographical region.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 12*](B16231_12_Final_ASB_ePub.xhtml#_idTextAnchor273), *Performance
    Considerations*, we will learn about tools and tricks to optimize performance
    in a Qt application.
  prefs: []
  type: TYPE_NORMAL
