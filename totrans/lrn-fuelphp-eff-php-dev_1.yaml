- en: Chapter 1. What is FuelPHP?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FuelPHP is a fresh approach to frameworks that strive to be more community-driven.
    There are already more than a hundred developers contributing and extending the
    source code. There are many more helping to provide some of the best documentation
    for a framework currently available.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is community-driven, everyone is in an equal position to spot bugs,
    provide fixes, or add new features to the framework. This has led to the creation
    of features such as the new temporal **ORM** (**Object Relation Mapper**), which
    is a first for any PHP-based ORM. This also means that everyone can help build
    tools that make development easier, more straightforward, and quicker.
  prefs: []
  type: TYPE_NORMAL
- en: The framework is lightweight and allows developers to load only what they need.
    It's a configuration over convention approach. Instead of enforcing conventions,
    they act as recommendations and best practices. This allows new developers to
    jump onto a project and catch up to speed quicker. It also helps when we want
    to find extra team members for projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief history of FuelPHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of FuelPHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to look forward to in Version 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A brief history of FuelPHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FuelPHP started out with the goal of adopting the best practices from other
    frameworks to form a thoroughly modern starting point, which makes full use of
    PHP Version 5.3 features, such as namespaces. It has little in the way of legacy
    and compatibility issues that can affect older frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The framework was started in the year 2010 by *Dan Horrigan*. He was joined
    by Phil Sturgeon, Jelmer Schreuder, Harro Verton, and Frank de Jonge. FuelPHP
    was a break from other frameworks such as CodeIgniter, which was basically still
    a PHP 4 framework. This break allowed for the creation of a more modern framework
    for PHP 5.3, and brings together decades of experience of other languages and
    frameworks, such as Ruby on Rails and Kohana. After a period of community development
    and testing, Version 1.0 of the FuelPHP framework was released in July 2011\.
    This marked a version ready for use on production sites and the start of the growth
    of the community.
  prefs: []
  type: TYPE_NORMAL
- en: The community provides periodic releases (at the time of writing, it is up to
    Version 1.7) with a clear roadmap ([http://fuelphp.com/roadmap](http://fuelphp.com/roadmap))
    of features to be added. This also includes a good guide of progress made to date.
  prefs: []
  type: TYPE_NORMAL
- en: The development of FuelPHP is an open process and all the code is hosted on
    GitHub at [https://github.com/fuel/fuel](https://github.com/fuel/fuel), and the
    main core packages can be found in other repositories on the Fuel GitHub account—a
    full list of these can be found at [https://github.com/fuel/](https://github.com/fuel/).
  prefs: []
  type: TYPE_NORMAL
- en: Features of FuelPHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a Bespoke PHP or a custom-developed framework could give you a greater
    performance. FuelPHP provides many features, documentation, and a great community.
    The following sections describe some of the most useful features.
  prefs: []
  type: TYPE_NORMAL
- en: (H)MVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although FuelPHP is a **Model-View-Controller** (**MVC**) framework, it was
    built to support the HMVC variant of MVC. [Chapter 3](ch03.html "Chapter 3. The
    Architecture"), *The Architecture*, covers the MVC design pattern in detail. **Hierarchical
    Model-View-Controller** (**HMVC**) is a way of separating logic and then reusing
    the controller logic in multiple places. This means that when a web page is generated
    using a theme or a template section, it can be split into multiple sections or
    widgets. Using this approach, it is possible to reuse components or functionality
    throughout a project or in multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the usual MVC structure, FuelPHP allows the use of presentation
    modules (ViewModels). These are a powerful layer that sits between the controller
    and the views, allowing for a smaller controller while still separating the view
    logic from both the controller and the views. If this isn't enough, FuelPHP also
    supports a router-based approach where you can directly route to a closure. This
    then deals with the execution of the input URI.
  prefs: []
  type: TYPE_NORMAL
- en: Modular and extendable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core of FuelPHP has been designed so that it can be extended without the
    need for changing any code in the core. It introduces the notion of packages,
    which are self-contained functionality that can be shared between projects and
    people. Like the core, in the new versions of FuelPHP, these can be installed
    via the **Composer** tool. Just like packages, functionality can also be divided
    into modules. For example, a full user-authentication module can be created to
    handle user actions, such as registration. Modules can include both logic and
    views, and they can be shared between projects. The main difference between packages
    and modules is that packages can be extensions of the core functionality and they
    are not routable, while modules are routable. Both packages and modules are covered
    in [Chapter 5](ch05.html "Chapter 5. Packages"), *Packages* and [Chapter 6](ch06.html
    "Chapter 6. Advanced Topics"), *Advanced Topics*.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everyone wants their applications to be as secure as possible; to this end,
    FuelPHP handles some of the basics for you. Views in FuelPHP will encode all the
    output to ensure that it's secure and is capable of avoiding **Cross-site scripting**
    (**XSS**) attacks. This behavior can be overridden or can be cleaned by the included
    htmLawed library.
  prefs: []
  type: TYPE_NORMAL
- en: The framework also supports **Cross-site request forgery** (**CSRF**) prevention
    with tokens, input filtering, and the query builder, which tries to help in preventing
    SQL injection attacks. **PHPSecLib** is used to offer some of the security features
    in the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Oil – the power of the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are familiar with CakePHP or the Zend framework or Ruby on Rails, then
    you will be comfortable with FuelPHP Oil. It is the command-line utility at the
    heart of FuelPHP—designed to speed up development and efficiency. It also helps
    with testing and debugging. Although not essential, it proves indispensable during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Oil provides a quick way for code generation, scaffolding, running database
    migrations, debugging, and cron-like tasks for background operations. It can also
    be used for custom tasks and background processes.
  prefs: []
  type: TYPE_NORMAL
- en: Oil is a package and can be found at [https://github.com/fuel/oil](https://github.com/fuel/oil).
  prefs: []
  type: TYPE_NORMAL
- en: ORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FuelPHP also comes with an **Object Relation Mapper** (**ORM**) package that
    helps in working with various databases through an object-oriented approach. It
    is relatively lightweight and is not supposed to replace the more complex ORMs
    such as Doctrine or Propel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ORM also supports data relations such as:'
  prefs: []
  type: TYPE_NORMAL
- en: belongs-to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has-one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has-many
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: many-to-many relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another nice feature is cascading deletions; in this case, the ORM will delete
    all the data associated with a single entry.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM package is available separately from FuelPHP and is hosted on GitHub
    at [https://github.com/fuel/orm](https://github.com/fuel/orm).
  prefs: []
  type: TYPE_NORMAL
- en: Base controller classes and model classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FuelPHP includes several classes to give a head start on projects. These include
    controllers that help with templates, one for constructing RESTful APIs, and another
    that combines both templates and RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: On the model side, base classes include **CRUD** (**Create**, **Read**, **Update**,
    and **Delete**) operations. There is a model for soft deletion of records, one
    for nested sets, and lastly a temporal model. This is an easy way of keeping revisions
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authentication framework gives a good basis for user authentication and
    login functionality. It can be extended using drivers for new authentication methods.
    Some of the basics such as groups, basic ACL functions, and password hashing can
    be handled directly in the authentication framework.
  prefs: []
  type: TYPE_NORMAL
- en: Although the authentication package is included when installing FuelPHP, it
    can be upgraded separately to the rest of the application. The code can be obtained
    from [https://github.com/fuel/auth](https://github.com/fuel/auth).
  prefs: []
  type: TYPE_NORMAL
- en: Template parsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The parser package makes it even easier to separate logic from views instead
    of embedding basic PHP into the views. FuelPHP supports many template languages,
    such as Twig, Markdown, Smarty, and **HTML Abstraction Markup Language** (**Haml**).
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although not particularly a feature of the actual framework, the documentation
    for FuelPHP is one of the best available. It is kept up-to-date for each release
    and can be found at [http://fuelphp.com/docs/](http://fuelphp.com/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: What to look forward to in Version 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although this book focuses on FuelPHP 1.6 and newer, it is worth looking forward
    to the next major release of the framework. It brings significant improvements
    but also makes some changes to the way the framework functions.
  prefs: []
  type: TYPE_NORMAL
- en: Global scope and moving to dependency injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the nice features of FuelPHP is the global scope that allows easy static
    syntax and instances when needed. One of the biggest changes in Version 2 is the
    move away from static syntax and instances. The framework used the **Multiton
    design pattern**, rather than the **Singleton design pattern**. Now, the majority
    of Multitons will be replaced with the **Dependency Injection Container** (**DiC**)
    design pattern, but this depends on the class in question.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for the changes is to allow the unit testing of core files and to
    dynamically swap and/or extend our other classes depending upon the needs of the
    application. The move to dependency injection will allow all the core functionality
    to be tested in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Before detailing the next feature, let's run through the design patterns in
    more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Singleton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensures that a class only has a single instance and it provides a global point
    of access to it. The thinking is that a single instance of a class or object can
    be more efficient, but it can add unnecessary restrictions to classes that may
    be better served using a different design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Multiton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is similar to the singleton pattern but expands upon it to include a way
    of managing a map of named instances as key-value pairs. So instead of having
    a single instance of a class or object, this design pattern ensures that there
    is a single instance for each key-value pair. Often the multiton is known as a
    registry of singletons.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This design pattern aims to remove hard coded dependencies and make is possible
    to change them either at run time or compile time.
  prefs: []
  type: TYPE_NORMAL
- en: One example is ensure that variables have default values but also allow for
    them to be overridden, also allow for other objects to be passed to class for
    manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: It allows for mock objects to be used whilst testing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Coding standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the far-reaching changes will be the difference in coding standards.
    FuelPHP Version 2.0 will now conform to both PSR-0 and PSR-1\. This allows a more
    standard auto-loading mechanism and the ability to use Composer. Although Composer
    compatibility was introduced in Version 1.5, this move to PSR is for better consistency.
    It means that the method names will follow the "camelCase" method rather than
    the current "snake_case" method names. Although a simple change, this is likely
    to have a large effect on existing projects and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: With a similar move of other PHP frameworks to a more standardized coding standard,
    there will be more opportunities to re-use functionality from other frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Package management and modularization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Package management for other languages such as Ruby and Ruby on Rails has made
    sharing pieces of code and functionality easy and common-place. The PHP world
    is much larger and this same sharing of functionality is not as common. **PHP
    Extension and Application Repository** (**PEAR**) was a precursor of most package
    managers. It is a framework and distribution system for re-usable PHP components.
    Although infinitely useful, it is not as widely supported by the more popular
    PHP frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with FuelPHP 1.6 and leading into FuelPHP 2.0, dependency management
    will be possible through Composer ([http://getcomposer.org](http://getcomposer.org)).
    This deals with not only single packages, but also their dependencies. It allows
    projects to consistently set up with known versions of libraries required by each
    project. This helps not only with development, but also its testability of the
    project as well as its maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: It also protests against API changes. The core of FuelPHP and other modules
    will be installed via Composer and there will be a gradual migration of some Version
    1 packages.
  prefs: []
  type: TYPE_NORMAL
- en: Backwards compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A legacy package will be released for FuelPHP that will provide aliases for
    the changed function names as part of the change in the coding standards. It will
    also allow the current use of static function calling to continue working, while
    allowing for a better ability to unit test the core functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Speed boosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although initially slower during the initial alpha phases, Version 2.0 is shaping
    up to be faster than Version 1.0\. Currently, the beta version (at the time of
    writing) is 7 percent faster while requiring 8 percent less memory. This might
    not sound much, but it can equate to a large saving if running a large website
    over multiple servers. These figures may get better in the final release of Version
    2.0 after the remaining optimizations are complete.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know a little more about the history of FuelPHP and some of the useful
    features such as ORM, authentication, modules, (H)MVC, and Oil (the command-line
    interface).
  prefs: []
  type: TYPE_NORMAL
- en: We have also listed the following useful links, including the official API documentation
    ([http://fuelphp.com/docs/](http://fuelphp.com/docs/)) and the FuelPHP home page
    ([http://fuelphp.com](http://fuelphp.com)).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also touched upon some of the new features and changes due in Version
    2.0 of FuelPHP.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will install FuelPHP along with an introduction to the
    different environments and configurations.
  prefs: []
  type: TYPE_NORMAL
