- en: Working with Various Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about working with various types of files, such
    as PDF files, Excel , CSV , and `txt` files. Python has modules for performing
    operations on these files. You will learn how to open, edit, and get data from
    these files using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with PDF files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Excel files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with `txt` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with PDF files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about how to work with PDF files using
    Python modules. PDF is a widely used document format and PDF files have `.pdf`
    extensions. Python has a module named `PyPDF2`, that's useful to do various operations
    on `pdf` files. It is third-party module which is a Python library built as a
    PDF toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must install this module first. To install `PyPDF2`, run the following command
    in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are going to look at some of the operations to work on PDF files, such
    as reading a PDF, getting the number of pages, extracting text, and rotating PDF
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a PDF document and getting the number of pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going read a PDF file using the `PyPDF2` module. Also,
    we are going to get the number of pages of that PDF. This module has a function
    called  `PdfFileReader()` that helps in reading a PDF file. Make sure you have
    a PDF file in your system. Right now, I have the `test.pdf` file present in my
    system so I will use this file throughout this section. Enter your PDF filename
    in place of `test.pdf`. Create a script called `read_pdf.py` and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `PyPDF2` module. Next, we created a `pdf`
    file object. `PdfFileReader()` will read the created object. After reading the
    PDF file, we are going to get the number of pages of that `pdf` file using the `numPages`
    property. In this case, it is `20` pages.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To extract the pages of the `pdf` file, the `PyPDF2` module has the `extractText()`
    method. Create a script called `extract_text.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created a file reader object. The `pdf` reader
    object has a function called `getPage()`, which gets the page number (it starts
    from the `0th` index) as an argument and returns the page object. Next, we used
    the `extractText()` method, which will extract the text from the page number that
    we mentioned in `getPage()`. The page index starts from `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating PDF pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how to rotate PDF pages. For that, we
    will use the  `rotate.Clockwise()` method of a `PDF` object. Create a script called `rotate_pdf.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, for the rotation of `pdf`, we first create a `pdf` file
    reader object of the original `pdf` file. Then the rotated pages will be written
    to a new `pdf` file . So, for writing to a new `pdf`, we use the `PdfFileWriter()`
    function of the `PyPDF2` module. The new `pdf` file will be saved with the name
    `rotated.pdf`. Now, we will rotate the pages of the `pdf` file by using the `rotateClockwise()`
    method. Then, using the `addPage()` method, the pages to the rotated `pdf`. Now,
    we have to write those `pdf` pages to a new `pdf` file. So, first we have to open
    the new file object (`pdf_out`) and write `pdf` pages to it using the `write()`
    method of the `pdf` writer object. After all this, we're going to close the original
    (`test.pdf`) file object and the new (`pdf_out`) file object.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Excel files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to work with Excel files, which have the `.xlsx`
    extension. This file extension is for an open XML spreadsheet file format, which
    is used by Microsoft Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Python has different modules: `xlrd` , pandas, and `openpyxl` to work with Excel
    files. In this section, we will learn how to handle Excel files using these three
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will look at an example using the `xlrd` module. The `xlrd` module
    is used for reading, writing, and modifying Excel spreadsheets and doing a lot
    of work.
  prefs: []
  type: TYPE_NORMAL
- en: Using the xlrd module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we have to install the `xlrd` module. Run the following command in your
    Terminal to install the `xlrd` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Make sure you have an Excel file present in your system. I have `sample.xlsx`
    present in my system. So I''m going to use that file throughout this section.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to look at how to read an Excel file and how to extract rows and
    columns from the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Reading an Excel file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look at how to read an Excel file. We are going to
    use the `xlrd` module. Create a script called `read_excel.py` and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we imported the `xlrd` module to read the Excel file.
    We also mentioned the location of the Excel file. Then, we created a file object,
    then we mentioned the index value, so that the reading will start from that index.
    Finally, we printed the results.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the names of columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are extracting column names from the Excel sheet. Create
    a script called `extract_column_names.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are extracting the column names from the Excel
    sheet. We fetched the column names using the `ncols` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Using pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before proceeding to read Excel files using Pandas, first we have to install
    the `pandas` module. We can install `pandas` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Make sure you have an Excel file present in your system. I have `sample.xlsx` present
    in my system. So I am going to use that file throughout this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at some examples using `pandas`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading an Excel file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to read Excel files using the  `pandas`  module.
    Now, let's look at an example of reading an Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script called  `rd_excel_pandas.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are reading an Excel file using the `pandas` module.
    First, we imported the `pandas` module. Then, we created a string called `excel_file`
    to hold the name of the file to be opened, which we want to manipulate using pandas.
    Later on, we created a `df data frame` object. In this example, we used the `read_excel`
    method of pandas to read data from the Excel file with default functions. The
    reading starts with index zero. Finally, we printed the `pandas` data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Reading specific columns in an Excel file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use the pandas module to read an Excel file using the `read_excel` method,
    we can also read specific columns in that file. For reading specific columns,
    we need to use the  `usecols` parameter in the `read_excel` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at an example to read specific columns in an Excel file. Create
    a script called  `rd_excel_pandas1.py`  and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, first we imported the pandas module. Then, we created
    a string called `excel_file` to hold the filename. Then we defined the `cols`
    variable and put index values of the columns inside it. So, when we used the `read_excel`
    method, within that method, we also provided the `usecols` parameter to fetch
    a particular column through the index, which we defined previously in the `cols`
    variable. Therefore, after running the script, we are getting only specific columns
    from the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: We can also perform various operations on Excel files using the pandas module,
    such as reading an Excel file with missing data, skipping particular rows, and
    reading multiple Excel sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Using openpyxl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`openpyxl` is a Python library that''s used to read and write `xlsx`, `xlsm`,
    `xltx`, and `xltm` files. First, we have to install `openpyxl.` Run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will look at some some examples of using `openpyxl`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Excel file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn to create a new Excel file using `openpyxl`.
    Create a script called `create_excel.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, check your current working directory and you will find that `test.xlsx` has
    been created successfully. In the preceding example, we write data into four cells.
    Then, from the `openpyxl` module, we import the `Workbook` class. A workbook is
    the container for all other parts of the document. Next, we set the reference
    object to the active sheet and write values in the cells `A1`, `A2` and `B1`,
    `B2`. Finally, we've written the contents to the `test.xlsx` file with the `save()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Appending values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to append values in Excel. For that, we are going
    to use the `append()` method. We can add a group of values at the bottom of the
    current sheet in which we want to put the values. Create a script called `append_values.py`
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we appended three columns of data in the `append_values.xlsx`
    files sheet. The data we stored was in a tuple of tuples and to append that data
    we went through the container row by row and inserted it using the `append()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Reading multiple cells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to read multiple cells. We will use the `openpyxl`
    module. Create a script called `read_multiple.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are reading the data of three columns by using
    the `range` operation. Then, we read the data from the cells `A1 – C6`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can perform lots of operations, such as merging and, splitting cells,
    on the Excel file using the `openpyxl` module.
  prefs: []
  type: TYPE_NORMAL
- en: Working with CSV files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **CSV** format stands for **Comma Separated Values**. The commas are used
    to separate the fields in a record. These are commonly used for importing and
    exporting the format for spreadsheets and databases.
  prefs: []
  type: TYPE_NORMAL
- en: A CSV file is a plain text file that uses a specific type of structuring to
    arrange tabular data. Python has the  built-in `csv` module that allows Python
    to parse these types of files. The `csv` module can be mostly used to work with
    data that is exported from spreadsheets, as well as databases in text file format,
    with fields and records.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `csv` module has all of the required functions built-in, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`csv.reader`: This function is used to return a `reader` object, which iterates
    over lines of a CSV file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.writer`: This function is used to return a `writer` object, which writes
    data into CSV file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.register_dialect`: This function is used to register a CSV dialect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.unregister_dialect`: This function is used to unregister a CSV dialect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.get_dialect:` This function is used to returns a dialect with a given
    name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.list_dialects`: This function is used to return all registered dialects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csv.field_size_limit`: This function is used to return the current maximum
    field size allowed by the parser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to look at `csv.reader` and `csv.writer`  only.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python has an in-built module, `csv`, which we are going to use here to work
    with CSV files. We will use the `csv.reader` module to read a CSV file. Create
    a script called `csv_read.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding program, we opened our `test.csv` file as `csv_file`. Then,
    we used the `csv.reader()` function to extract the data into the `reader` object,
    which we can iterate over to get each line of our data. Now, we are going to look
    at the second function, `csv.Writer()`
  prefs: []
  type: TYPE_NORMAL
- en: Writing into a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write data in a `csv` file, we use the `csv.writer` module. In this section,
    we will store some data into the Python list and then put that data into the `csv`
    file. Create a script called `csv_write.py` and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding program, we created a list named `write_csv` with a `Name` and
    its `Sport`. Then, after creating the list, we opened the newly created `csv_write.csv`
    file and inserted the `write_csv` list into it using the `csvWriter()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Working with txt files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A plain text file is used to store data that represents only characters or strings
    and doesn't consider any structured metadata. In Python, there's no need to import
    any external library to read and write text files. Python provides an built-in
    function to create, open, close, and write and read text files. To do the operations,
    there are different access modes to govern the type of operation possible in an
    opened file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The access modes in Python are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**R****ead Only Mode (**`''r''`**)**:This mode opens a text file for  the purpose.
    If that file doesn''t exist, it raises an I/O error. We can also call this mode
    the default mode in which the file will open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read and Write Mode (**`''r+''`**)**:This mode opens a text file for reading
    as well as writing purposes and raises an I/O error if the file does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write Only Mode (**`''w''`**): **This mode will open a text file for writing.
    It creates the file if the file does not exist and, for existing file, the data
    is overwritten.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write and Read Mode (**`''w+''`**)**:  This mode will open a text file for
    reading and writing. For the existing file, the data is overwritten.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Append Only Mode (**`''a''`**)**:  This mode will open a text file for writing.
    It creates the file if the file does not exist and the data will be inserted at
    the end of existing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Append and Read Mode (**`''a+''`**)**: This mode will open a text file for
    reading, as well as writing . It creates the file if the file does not exist and
    the data will be inserted at the end of the existing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The open() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This function is used to open a file and does not require any external module
    to be imported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'For the preceding syntax, the file must be in the same directory that our Python
    program resides in. If the file is not in the same directory, then we also have
    to define the file path while opening the file. The syntax for such a condition
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: File opening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `open` function to open the file is `"test.txt"` .
  prefs: []
  type: TYPE_NORMAL
- en: 'The file is in the same directory as the `append` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file is not in the same directory, we have to define the path in the `append`
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The close() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This function is used to close the file, which frees the memory acquired by
    the file. This function is used when the file is not needed anymore or it is going
    to be opened in a different file mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code syntax can be use to simply open and close a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Writing a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using Python, you can create a text file (`test.txt`). By using the code,
    writing to a text file is easy. To open a file for writing, we set the second
    parameter that is in access mode to `"w"`. To write the data into this `test.txt`
    file, we use the `write()` method of the `file handle` object. Create a script
    called  `text_write.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6620eefb-81eb-459b-b9b1-8c43968a5850.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, check your current working directory. You'll find a `test.txt` file that
    we created. Now, check the contents of the file. You will find that the days that
    we have written in the `write()` function will be saved in `test.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding program, we''ve declared the `text_file` variable to open
    a file named `test.txt`. The `open` function takes two arguments: first, the file
    that we want to open, and second, the access mode that represents the permission
    or operation that we want to do or apply on the file. In our program, we used
    the `"w"` letter in our second argument, which indicates `write`. Then, we used **`text_file.close()`**
    to close the instance of the stored `test.txt` file.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reading a file is as easy as writing from a file. To open a file for reading,
    we set the second parameter that is the access mode  to `"r"` instead of `"w"`.
    To read the data from this file, we use the `read()` method of the `file handle`
    object. Create a script called  `text_read.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, we''ve declared the `text_file` variable to open
    a file named `test.txt`. The `open` function takes two arguments: first, the file
    that we want to open, and second, the access mode that represents the permission
    or operation we want to do or apply on the file. In our program, we used the `"r"`
    letter in our second argument, which indicates a `read` operation. Then, we used `text_file.close()`
    to close the instance of the stored `test.txt` file. After running the Python
    program, we can easily see the content in our text file in our Terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about various files. We learned about PDF, Excel,
    CSV, and text files. We used Python modules to perform some operations on these
    types of files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about basic networking and internet
    modules in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between `readline()` and `readlines()` ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `open()` and `with open()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the significance of `r c:\\Downloads` at starting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the generators object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the use of `pass`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a lambda expression?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'XLRD: [https://xlrd.readthedocs.io/en/latest/api.html](https://xlrd.readthedocs.io/en/latest/api.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openoyxl`: [http://www.python-excel.org/](http://www.python-excel.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding generator concepts: [https://wiki.python.org/moin/Generators](https://wiki.python.org/moin/Generators)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
