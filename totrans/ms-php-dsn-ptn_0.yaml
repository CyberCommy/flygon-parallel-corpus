- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever been to a PHP conference? If not, I’d highly recommend it, it
    is the closest you can get to a living and breathing PHP community. A few weeks
    ago, I flew from London to St. Louis, Misouri, to speak at php[tek] (the PHP conference
    run by php[architect]). After the conference, there was a small tradition within
    the PHP community known as WurstCon. Essentially, hundreds of PHP conference attendees
    cram themselves into a small hot dog shop and host a hot dog convention, often
    to the complete surprise of the staff there. Likewise, community nights at PHP
    events are the warmest and most accepting community occasions you’ll ever run
    into; the PHP community is surely one that other development language communities
    envy.
  prefs: []
  type: TYPE_NORMAL
- en: As of PHP 7, the PHP project has changed dramatically; but what I love, remains
    strong. The warmth you will feel at any PHP conference, the openness in the documentation,
    and adoption in the language. Yes, there are practices that are undoubtedly bad
    within PHP itself; however, think of what the PHP community has recently achieved,
    ranging from PHPUnit to Composer. Throughout this book, bear in mind the improvements
    in PHP 7, a few of which I’ll share with you. The trajectory of the project is
    now certainly upwards, and let’s not forget that this wasn’t always true. The
    PHP community has learned its lessons from the past, whilst the language maintains
    the flexibility to write what is bad.
  prefs: []
  type: TYPE_NORMAL
- en: This book will seek to impart strong software engineering skills to you with
    the focus on implementing them in PHP. At the time of publishing this book, there
    is a certain void and a necessity for this kind of material. This book seeks to
    be the lighthouse that will not only demonstrate software design theory, but also
    seek to impart practical information of real value to improve the quality and
    maintainability of the code you write. This book leaves no stone unturned throughout
    the software development cycle and will seek to confront the reasons as to why
    the majority of software projects fail whilst also addressing design, redesign,
    and safeguard effective code.
  prefs: []
  type: TYPE_NORMAL
- en: This book goes beyond traditional design patterns as envisaged by the Gang of
    Four and details the practices that passionate PHP developers need to be successful
    as software engineers or leads on detailed PHP projects. This book will introduce
    you to the core knowledge required to understand project management techniques,
    why the majority software development projects fail, and why you can make yours
    a success.
  prefs: []
  type: TYPE_NORMAL
- en: Originally, I gave thought to writing a book on PHP when Mandi Rose, who I worked
    with previously, suggested I put together a book on the practices I’ve learned
    with PHP. Needless to say, at the time that suggestion was made, the best of my
    career was undoubtedly ahead of me; when the opportunity actually arose to write
    something like this, I felt I had learned dramatically more as time progressed.
    By no means should you see this book as the be-all and end-all of PHP practices;
    instead, you should use it to increase your knowledge base on PHP, but by no means
    limit it to this. In this book, I aim to give something, however small, back to
    the PHP community; after reading this book, I would encourage you to get stuck
    in and share what you’ve learned with others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later in this book, I will advocate Extreme Programming as a methodology and
    courage as a key value of this methodology. I will ask you to bear in mind the
    explanation of courage in The Values of Extreme Programming: “We will tell the
    truth about progress and estimates. We don''t document excuses for failure because
    we plan to succeed. We don''t fear anything because no one ever works alone. We
    will adapt to changes whenever they happen.” This is, of course, some key advice
    we should all follow and seek to genuinely understand risks instead of cowering
    behind them. For many of us, the code we write during parts of our career is the
    highest expression of our labor. Indeed, the late nights turning into early mornings
    we spend debugging and developing are what ultimately allow us to demonstrate
    the fruits of our labor. In essence, as software engineers, the code we write
    defines who we are, as such we should be open to constantly refining and refactoring
    our processes, which is what this book aims to support you in doing. I am incredibly
    honored that you chose to allow me to help you to reach this end.'
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Why "Good PHP Developer" Isnt an Oxymoron"),
    *Why "Good PHP Developer" I*sn''t *an Oxymoron*, introduces the concept of design
    patterns as recurring solutions to commonly arising problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Anti-Patterns"), *Anti-Patterns*, introduces
    how patterns can lead to decidedly negative consequences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Creational Design Patterns"), *Creational
    Design Patterns*, discusses Gang of Four design patterns, namely those surrounding
    object creation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Structural Design Patterns"), *Structural
    Design Patterns*, covers how multiple classes and objects can be combined to deliver
    a clearer interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Behavioral Design Patterns"), *Behavioral
    Design Patterns*, explains how to increase the flexibility of communication between
    objects by identifying patterns that can help with communication between them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Architectural Patterns"), *Architectural
    Patterns*, revolves around resolving common issues related to the architecture
    of a web application/system, potentially outside the code base itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Refactoring"), *Refactoring*, shows how to
    redesign code that has already been written to improve maintainability.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. How to Write Better Code"), *How to Write
    Better Code*, covers a range of concepts that haven’t been discussed elsewhere,
    and it also concludes with some advice for developers.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An installation of PHP 7 will serve you well throughout this book. You should
    be prepared to alter your development environment as needed throughout this book;
    we will address the installation of various tools as we encounter them.
  prefs: []
  type: TYPE_NORMAL
- en: This book is not for the despairingly hostile or those who are passively antagonistic
    to approaching new software engineering principles. It is not for those who seek
    to be lone warriors, either. When altering a given code base, you must seek to
    improve the code of the entire code base and everyone who works on it. You must
    be willing to take personal responsibility of the code you write and not blame
    external factors. Code maintainability cannot be improved unilaterally on shared
    code bases; you must write your code with the intention of maintaining code quality
    for those who maintain it after you. Additionally, seek to go into this book with
    the mindset of being able to share what you’ve learned, whether it is with those
    in your teams, your user groups, or the larger PHP community. In other words,
    approach this book with the end in mind; approach this book with the stated aim
    of improving your code and those in the code base you maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is certainly aimed at the PHP developer looking to learn about the
    complete set of skills needed to be a software engineer, in particular, some lessons
    from software design; this book will seek to educate you on how your code can
    be made more extensible and easier to develop on. This book seeks to take your
    code beyond just being a bag of functions and classes, instead preferring well-designed,
    well-written, and well-tested code.
  prefs: []
  type: TYPE_NORMAL
- en: You will need a working knowledge of PHP and enough to build an application,
    but by no means do you have to be a total expert at everything in PHP; a working
    knowledge of the basics of software engineering will certainly give you a heads
    up.
  prefs: []
  type: TYPE_NORMAL
- en: You must encounter this book with an open mind and a willingness to have your
    preconceptions about software development challenged. This book will confront
    some truths about how you may be failing personally as a developer; it is vital
    that you approach this book with a willingness to take these principles onboard.
  prefs: []
  type: TYPE_NORMAL
- en: This book presents a set of software development patterns and principles that
    you can adopt. It is vital that you understand where these patterns should and
    shouldn’t be applied; this will be explained throughout the book, especially in
    the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A key tenet of reading this book is understanding what PHP is for and what it
    isn’t. I expect you to enter this book understanding what problems you expect
    PHP to solve and what you expect to use other software development languages to
    solve.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `index.php` file now yields this result".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "direct your web browser to your chosen web server and you should see Hello
    world! pop up on screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
