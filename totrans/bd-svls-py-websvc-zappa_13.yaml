- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, Amazon Web Services for Serverless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying your application on serverless architecture is nothing but handover
    your application to Amazon infrastructure. Hence, there are the following benefits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon will take care of auto scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No server management process is required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also makes a huge difference in terms of cost, you pay as per usage which
    is based on the execution time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provide high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Simple Storage Service** (**S3**) is a storage service provided by
    Amazon. AWS Lambda supports inline code execution, where you can directly write
    your code from its web interface. It also supports fetching the code base from
    an Amazon S3 bucket, where you can put your code base as a build package in ZIP
    format. Zappa has a command to generate the ZIP package of your application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2, Getting Started with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's an open source tool developed by gun.io ([https://www.gun.io/](https://www.gun.io/))
    to automate the manual process of creating a serverless environment on AWS infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zappa provides an easy way to configure the AWS **VPC** (**Virtual Private Cloud**)
    by adding the AWS VPC subnets and security group ID in `zappa_setttings.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3, Building a Flask Application with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon API Gateway is a service to connect with other AWS services. API Gateway
    provides a RESTful application interface for mobile and web applications to connect
    with other AWS services. In our case, Zappa configured the API Gateway interface
    with proxy requests to invoke AWS Lambda.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zappa performs the deployment operation based on the `zappa_settings.json` file
    configuration. Zappa uses the `function_name` to point the Flask application object
    in order to configure the application on AWS Lambda and API Gateway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4, Building a Flask-Based REST API with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JWT** (**JSON Web Token**) provides an easy way to secure an application
    from unauthorized access. Access to the API can be authorized based on the JWT
    token provided in the authentication header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `function_name` indicated the module path of Flask application object. It
    helps Zappa to configure the Flask application and its routes with API Gateway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5, Building a Django Application with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon CloudFront is managed web service that delivers static and dynamic web
    content with high speed over the internet. Amazon has various data centers located
    worldwide, these data centers are referred to as edge locations, hence AWS CloudFront
    uses these edge locations to deliver the web content with minimal latency and
    boost the application's performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pipenv is a packing tool used to manage Python packages. It is also recommended
    by the **Python.org** ([https://www.python.org/](https://www.python.org/)). It
    helps to maintain the packages and dependencies along with their versions. Thus
    it helps to develop and maintain a stable version application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6, Building a Django REST API with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django Rest Framework is a library for developing RESTful APIs with Django based
    application. It has a standard pattern to implement APIs over Django Models. It
    offers many features to developers for implementing and managing APIs in a simple
    way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Django-storage is a library for implementing custom storage for your Django
    application. It follows Django's standard in order to persist data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7, Building a Falcon Application with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Falcon frameworks have a great benchmark as compare to other Python frameworks.
    It is intended to write RESTful API in a very optimized way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Peewee library follows Django's model patterns to create database tables and
    performing the CRUD operations. It offers many features such as high performance,
    lightweight, and less complexity. SQLAlchemy has a little learning curve and complexity.
    Peewee can be considered a small/medium size of application or microservices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scheduling is a defined mechanism for executing a program at a particular time
    period. Hence it used with many scenarios where we required to execute a program
    or script to perform a specific time. For example, updating a weather information,
    sending a notification alert, and more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8, Custom Domain with SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Route 53 is a managed service of Amazon. It offers services for domain registration,
    routing internet traffic to your AWS resource for a specific domain, and creating
    a health checkpoint for your running AWS resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Domain name servers** (**DNS**) is a mechanism to maintain and translate
    the domain names into **Internet Protocol** (**IP**) because computers communicate
    with each through IP addresses and it is hard to remember. Hence DNS helps to
    manage domain names against IP addresses.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ACM generates the SSL certificate against a domain name. If you use an SSL certificate
    along with your domain name, it enables HTTPS protocol for transitioning through
    your domain. HTTPS is a secure protocol that encrypts the data over the internet
    and provides a security for your confidential information transfer through your
    domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9, Asynchronous Task Execution on AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS SNS is a web service provides a messaging implementation as a publish and
    subscribe pattern. It supports various resources to subscribe over a channel and
    get published messages. It can be used to manage and implement a notification
    service for your application. There are many other features, which can be considered
    to AWS SNS service for your application development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS SNS works on to publish and subscribe pattern. As it supports AWS Lambda
    to be registered as a subscriber. It can invoke the AWS Lambda function with the
    published message context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10, Advanced Zappa Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda is designed to provide a serverless infrastructure. It instantiates
    the context on invocation request and then destroys itself after serving the request.
    AWS Lambda adds a little time delay for the initial startup and setting up the
    context. To avoid it, you can keep the Lambda instance in a warm state by setting
    up the schedule trigger using AWS CloudWatch. Zappa provides this feature by default
    and you can turn off this feature by setting the `keep_warm` attribute to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is mechanism that allows a domain
    to access restricted resources from the different domain.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zappa provides an easy way of managing large size project as AWS Lambda has
    a limitation of uploading the build package with 50 MB but also have an option
    to service bigger size build packages from Amazon S3\. In Zappa setting, you can
    `slim_handler`to `true` which will upload the build package on Amazon S3 and then
    configure the AWS Lambda against the uploaded build package on Amazon S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11, Securing Serverless Applications with Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: API Gateway authorizer is a mechanism to secure API resources. API Gateway authorizer
    generates an API Key that can bind with any resource. Once you bind the API resources
    then API Gateway will restrict any HTTP request with the API key in the `x-api-key`
    header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Lambda has a feature of **Dead Letter Queue** (**DLQ**), which enables developers
    to monitor the unknown failure. It can be configured against the AWS SNS or SQS
    as a DLQ in the AWS Lambda function. AWS Lambda will publish the failure event
    over the configured AWS SNS or SQS ARN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Virtual Private Cloud creates an isolated virtual network layer where you
    can configure all your AWS resources. AWS VPC will restrict the access from a
    outside the VPC network and enables the security layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 12, Zappa with Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Docker container is a virtual instance of a basic Linux system that enables
    you to perform operations in an isolated environment. Docker container has all
    basic configurations such as networking, filesystem and OS level utilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Docker image is an actual OS image with the required packages. You can also
    create your own image and publish it on the Docker repository. A Docker container
    is an instance of the Docker image. You create *N* number of containers using
    a Docker image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
