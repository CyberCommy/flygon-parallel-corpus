- en: Chapter 3. Linux for Different Purposes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plans we make to set up a server infrastructure or a data center are generally
    the same. We always try to organize services between the servers that we are running,
    respecting our needs. Servers operating on a Linux system can be used to run multiple
    services at once or just one depending on how much processing power that service
    will need and its position inside the network. Following the needs of the users,
    system administrators should always be ready to set up or to take down services
    in their infrastructure. Usually, for a basic system installation, there will
    be a number of services already installed but not well configured.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover some of the main Linux services that most users are
    in need of, and also how to set up, configure, and operate them. Then we are going
    to explore some of those service's aspects, how to secure them, and how to operate
    them in the best way possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure a Gateway server using iptables and IP masquerading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install a VPN server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement BIND as a DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up and use a web server using Apache-MySQL-PHP with ModSecurity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install an FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement OpenSSL in Apache and FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a gateway server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many network infrastructures, system administrators need to separate their
    servers and workstation inside multiple subnetworks. Others use private network
    addresses that can be associated with public addresses using the **Network Address
    Translation** (**NAT**) technology. A Linux gateway server is one of the common
    solutions that can help set up this kind of configuration. The following screenshot
    is a presentation of an example of an architecture where the Gateway server serves
    to pass through both local and external networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a gateway server](img/B04674_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As per the requirement, we are in need of a Linux server with at least two network
    interfaces (as a best practice). We then need to make a bridge between the two
    networks associated with them. During this section, we will be working on setting
    up a gateway between public (external) and private (local) addresses using IP
    forwarding and NAT rules to route the traffic from the private network to the
    public network. We will call the external network **Wide Area Network** (**WAN**)
    and the local network **Local Area Network** (**LAN**).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The traffic generated from the local network will appear to originate from the
    Gateway server to the external network. In this example, we will need another
    machine to present a server inside the LAN network.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will set up the network configuration of the `WAN` interface. To
    do so, there will be two options: either the interface will take its IP configuration
    via DHCP (automatic) or we set it ourselves manually (static). In our case, we
    will do the automatic configuration since our WAN network is provided by a router
    that serves DHCP configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by editing the configuration file of the designated interface
    `eth0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The file will contain the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We should focus on the line where `BOOTPROTO` is written, which is the protocol
    to use for the network configuration, and we need to make sure that it is set
    on `dhcp`.
  prefs: []
  type: TYPE_NORMAL
- en: The default installation sets all the interfaces to the DHCP configuration unless
    they have been modified during the installation or later.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we need to make sure that the `DEVICE` is set to the interface name that
    we are going to use to serve the DHCP server and as named in our server (for our
    case it is `eth0`). Then the option `ONBOOT` is set to `yes`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After editing the file, if needed, make sure to save the modifications before
    leaving the text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'After making sure that all changes are successfully set, we need to restart
    the network manager so the machine can take the DHCP configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: During the execution of this step, the network connection may be lost. We need
    to make sure that we do not need it in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can move to the configuration of the second network interface of the
    gateway server connected to the LAN. For this configuration, we need to use a
    static IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar way to the first interface, we are going to edit the configuration
    file of this interface `eth1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, this file will contain some configuration files, but we will be interested
    in only some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the default configuration, so we need to change it from a dynamic configuration
    to a static one.
  prefs: []
  type: TYPE_NORMAL
- en: The modification will consist of modifying some lines and adding others.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by changing the configuration protocol from `dhcp` to `static` to
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BOOTPROTO="static"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we add the static IP address with this line: `IPADDR="10.0.1.1"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Then the network mask, `NETMASK="255.255.255.0"`.
  prefs: []
  type: TYPE_NORMAL
- en: And, finally, we make sure that the option `DEVICE` is set to `eth1` and the
    option `ONBOOT` is set to `yes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, to make sure that this configuration is successfully applied, we need
    to restart the network service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the configuration does not take effect when typing `ifconfig`, to check
    the interfaces'' configuration we need to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we move on to the configuration of a client, the machine that will be using
    the gateway server. So we need to configure its interface for the LAN network.
    Since we are not limited to one specific client, if we have a graphical interface
    we can just go to the connected interface and enter these configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP address**: `10.0.1.2`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network Mask**: `255.255.255.0`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gateway**: `10.0.1.1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the DNS server, we will go with Google DNS, which is very reliable:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS server**: `8.8.8.8`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not an obligation to enter the Google DNS server address. Some sites may
    be blocking it, others may be using their local DNS server. Depending on the need
    and if we don't have any, Google DNS will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: If we need to use another CentOS 7 server, we may need to do the same steps
    during the static server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We edit the configuration file of the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By changing the configuration protocol to `static` and add these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We also sure that `ONBOOT=yes` and `DEVICE=eth0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Google DNS server, we can edit the `/etc/resolv.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To add these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then restart the network service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We go back to our Gateway server, then start doing the configuration of the
    IP forwarding. First, we need to enable it for the IPv4 packet forwarding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To hold maintain configuration on every system restart we need to make a modification
    to the IP forwarding configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add this line and save:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To reload the configuration made to the file, we need to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The current configuration can be visualized via this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we go to enabling NAT configuration. Using `iptables`, we need to enable
    the IP masquerading. `firewalld` is a service that allows easy configuration of
    `iptables` easily. To use `firewalld` we will rely on the command `firewalld-cmd`,
    then we enter the required configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by configuring the NAT in `firewalld`. First, we will set the LAN
    network as a trusted zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we integrate the LAN interface `eth1` to a zone called `internal`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We do the same for the WAN interface `eth0` to a zone called `external`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we configure the `masquerade` option for the external WAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For an optional DNS configuration, we can make it pass through the `internal`
    zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we finish, we make sure that the NAT is configured to pass through traffic
    from the LAN to the WAN interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to reload the firewall service so that the configuration takes
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After this point, the Gateway server should be running well. To test the configuration,
    we need to ping any website from any machine located on the LAN network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to see the following kind of output to know that our Gateway server
    is working correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We would recommend the use of a DHCP server to set up the configuration for
    all the clients if we are using a desktop machine and are not in need of static
    configuration. Even for a more advanced DHCP configuration we can associate specific
    IP addresses to the servers via their interfaces' MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a VPN server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenVPN is an opensource software application that implements **virtual private
    network** (**VPN**) techniques for creating secure point-to-point or site-to-site
    connections in routed or bridged configurations and remote access facilities.
  prefs: []
  type: TYPE_NORMAL
- en: As a requirement for this section, we are in need for a CentOS 7 server with
    the capacity to install some packages and make some changes to the network configuration
    files (internet and root access). At a later stage, we may need to create some
    authentication certificates. We will cover how to do that too.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start with the installation of the required packages. And before
    we do that, OpenVPN isn''t available in the default CentOS standard repository,
    so we need to add the EPEL repository that contains the popular additional packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After this command is done, we can start OpenVPN. We also need to install an
    RSA generator to generate the SSL key pairs that we will use to secure the VPN
    connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: By the end of the execution of the command, the OpenVPN and the easy-rsa are
    successfully installed on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we move to the configuration part of the OpenVPN. Since OpenVPN has an
    example of a configuration file in its documentation directory, we are going to
    use the `server.conf` file as our initial configuration and build on that. To
    do so, we need to copy it to the `/etc` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can edit it to suit our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: After opening the file, we need to remove some commented lines and make some
    little changes as follows (using `nano` to look for the lines to change, we should
    use *Ctrl* + *w*, then type the word we are looking for).
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to set the RSA encryption length to be 2048 bytes, so we need
    to make sure that the option line that indicates the filename is going to be used
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some articles suggest that a DH key with 1024 bytes is vulnerable, so we recommend
    using a DH key with 2048 bytes or more for better security. The vulnerability
    is called Logjam and for more details, you can read more about it at: [http://sourceforge.net/p/openvpn/mailman/message/34132515/](http://sourceforge.net/p/openvpn/mailman/message/34132515/)'
  prefs: []
  type: TYPE_NORMAL
- en: Then we need to uncomment the line `push redirect-gateway def1 bypass-dhcp"",`
    which tells the client to redirect all traffic to OpenVPN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to set a DNS server to the client, since it will not be able to
    use the one provided by the ISP. Again, I will go with the Google DNS `8.8.8.8`
    and `8.8.4.4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to lead a smooth run for the OpenVPN, we need to run it through no
    privileges first. To do so we need to run it through a user and group called `nobody`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Then save the file and exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, the configuration part of the OpenVPN service is done. We''ll move
    on to the certificate and key generation part, where we need to create some script
    using Easy RSA. We start by creating a directory of Easy RSA in the configuration
    folder of the OpenVPN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to populate the folder with the predefined scripts of Easy RSA
    that generate keys and certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform an easy VPN setup, we will start by typing our information once
    and for all in the `vars` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We are basically changing the lines that start with `export KEY_` to update
    their values to match the ones of the organization desired, and at some point
    we may need to uncomment them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Then save the file and exit.
  prefs: []
  type: TYPE_NORMAL
- en: The field `KEY_NAME` represents the name of the files `.key` and `.crt`.
  prefs: []
  type: TYPE_NORMAL
- en: The field `KEY_CN` is where we should put the domain or the sub-domain that
    leads to our VPN server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that no issues arise during our use of the OpenSSL configuration
    file due to a version update, we will remove the version from the filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we move to the creation of certificate and keys creation. We need to be
    in the `/etc/openvpn/easy-ras` folder to run the scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we start the source in the variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'After that we clean any old generated keys and certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we build the certification authority, which has its information already
    defined as default options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create the keys and certificates for our VPN server. We skip the challenge
    password phase by pressing *Enter*. Then we make sure to validate by typing `Y`
    for the last step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When running this command, we should see the following message if it is running
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to generate the Diffie-Hellman (`dh`) key exchange. This may
    take a while longer, as compared to the other commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'After finishing this step, we will have all our keys and certificates ready.
    We need to copy them so they can be used by our OpenVPN service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: All the clients of this VPN server need certificates to get authenticated. So
    we need to share those keys and certificates with the desired clients. It is best
    to generate separate keys for each client that needs to connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will only generate keys for one client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: With this step, we can say that we are done with the certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Now for the routing step. We will do the routing configuration using `iptables`
    directly without the need of using `firewalld`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to only use the `iptables` configuration, we will first make sure
    that its services are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then disable the `firewalld` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the rule to `iptables` that does the forwarding of the routing
    to the OpenVPN subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to enable IP forwarding in `sysctl` by editing the file `sysctl.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, restart the network service so this configuration can take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now start the OpenVPN service, but before we do this, we need to add
    it to `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can start the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to check whether the service is running, we can use the command
    `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see this message with the activity status `active (running)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'After this check, we can say that our VPN server configuration is done. We
    can now go to the client configuration regardless of the operating system. We
    need to copy the certificates and the keys from the server. We need to copy these
    three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: There are a variety of tools to copy these files from the server to any client.
    The easiest one is `scp`, the shell copy command between two Unix machines. For
    Windows machines we can use folder sharing tools such as Samba, or we can use
    another tool equivalent to SCP called **WinSCP**.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the client machine, we start by copying the desired files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'After the copying is done we should create a file, `client.ovpn`, which is
    a configuration file for the OpenVPN client that helps set up the client to get
    connected to the VPN network provided by the server. The file should contain the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We need to make sure that the first line contains the name of the client typed
    in the keys and certificate. After this, remote should be the public IP address
    of the server or its domain address. In the end, the correct location of the three
    client files should be copied from the server.
  prefs: []
  type: TYPE_NORMAL
- en: The file `client.ovpn` could be used with multiple VPN clients (OpenVPN client
    for Linux, Tunnelblick for MAC OS X, OpenVPN Community Edition Binaries for Windows)
    to get them configured to connect to the VPN.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a CentOS 7 server we will use the OpenVPN client. To use this configuration,
    we use the command `openvpn --config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: By getting the client connected to the VPN server, we can confirm that our VPN
    service is working well.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing BIND as a DNS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BIND is the most widely used open source name server application. It helps implement
    the **Domain Name System** (**DNS**) protocols for the Internet. It provides a
    robust and stable platform on which to build a distributed computing system, with
    knowledge that those systems are fully compliant with published DNS standards.
    It helps resolve queries about names by sending those questions to the appropriate
    servers and responding appropriately to the servers' replies.
  prefs: []
  type: TYPE_NORMAL
- en: As an example of the implementation of BIND, we will set up an internal DNS
    server to resolve some public IP addresses inside the network to simplify the
    mapping inside a large environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following prerequisites to implement BIND:'
  prefs: []
  type: TYPE_NORMAL
- en: One server to have BIND installed and configured on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two machines, either servers or simple workstations, to test the DNS service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root privilege to be able to set up BIND and configure the network to resolve
    from our internal DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we will start by installing BIND on our DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: After getting BIND installed, we start configuring our DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The BIND service has a bunch of configuration files that get included from
    its main configuration file, `named.conf`, which is associated with the process
    that BIND runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'At the beginning of the file we need to add a block just before the `options`
    block, the `acl "trusted"` block, where we are going to define the list of clients
    allowed to do recursive DNS queries. Since our server will be serving two subnets
    we will add its two addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to make some modifications inside the `options`. Since we are using
    IPv4 only, we need to comment the IPv6 line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'And to make sure that the DNS server will listen in both subnets, we will add
    the following two addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: With the IP address `192.168.8.12` as the IP address of the DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we change the line `allow-query` from pointing to the `localhost` to point
    to the `trusted` clients ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we don''t fully rely on our DNS server to respond to all queries, we can
    use a secondary DNS server by typing this command inside the `options`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, at the end of the file we need to add the line that includes the
    local file configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we save the file and move to the local file configuration to set the DNS
    zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The file will be empty since we are the ones who created it, so we need to fill
    it with the necessary zones.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the forward zone. To do so we need to enter the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will add the Reverse zone. Since our first LAN is at `192.168.8.0`/`24`
    we start with the Reverse zone name, which will be `8.168.192`, the reverse of
    `192.168.8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we do same with our second LAN on `10.0.1.0/24`, so its reverse zone name
    `1.0.10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: We need to do the same thing for all the subnets in the network, then we save
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: After finishing with setting the zones and the Reverse zones, we move on to
    create and fill up their corresponding files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating the forwarding file, which is where we define DNS records
    for forward DNS lookups. We create the folder in which we are going to put all
    the zone files. Then we start creating our zone files inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create the Forward zone file and fill it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the following lines. Starting with the SOA record by adding
    the domain of the DNS server, we need to increment the serial value every time
    we edit the zone file so the change can take effect after restarting the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'For the serial, we can make it more understandable by making it look like a
    `date: {yyyymmmdddss} yyyy = year`, `mm = month`, `dd = day`, `ss = a` sequence
    number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we add the name server records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the `A records` for the hosts that belong to this zone, which will
    include every machine, either a server or a workstation, which we want to address
    with our DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Now we create the Reverse zone files. It is where we define DNS PTR records
    for reverse DNS lookups.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the first Reverse zone `db.1.0.10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have done for the first zone file, we need to define the SOA domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the name-server records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add the PTR records that list all the machines with IP addresses
    that are on the subnet of the zone file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we do the second Reverse zone file `db.8.168.192`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We add the SOA domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the name-server records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'And we finish with the PTR records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'We save all files. And we check the BIND configuration by checking the syntax
    of the files `named.conf*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: If no errors are shown, it means that all configuration files are well written
    with no syntax mistakes. Otherwise, try to track the errors and fix them using
    the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then check the zone files using the command `named-checkzone` in each zone
    if we have many:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'If the zone is successfully set we should see this kind of message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the same thing for the Reverse zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'We should also see the same message if everything is well configured. Otherwise,
    we need to troubleshoot the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: After checking all configurations, we are now ready to start the BIND service.
  prefs: []
  type: TYPE_NORMAL
- en: 'And just before that we need to make sure that our firewall allows us to do
    so. We need to open port 53 using the `Firewalld` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'After reloading the Firewall, the change will take effect and now we can start
    the DNS service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we enable it so it can start at the system boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: With this step the DNS server is now ready to receive and respond to DNS queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now do a client configuration to test the DNS server. On a Linux server,
    we only need to modify the `resolv.conf` file by adding the name-server IP address
    and the search domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding the following lines, then saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start the test. We will use a simple ping and the command `nslookup`.
    The ping will only test whether we can reach the machine giving its domain name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also other tools that can give more detailed results when testing
    the DNS service such as `dig` and `nslookup` to do a simple DNS lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the DNS lookup, we will try a reverse DNS lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: After running all these tests, we should check whether all the values are `true`,
    to confirm that we have a fully-working DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a web server using Apache-MySQL-PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the common services that a Linux server offers is being a web server,
    to give its user the capacity to host their web content in a secure, fast, and
    reliable location, browsable from all over the world. In this section, we are
    going to show you how to set up a reliable web server on a CentOS 7 server with
    some security modules that will secure the website, and we will do an implementation
    of a **Content Management System** (**CMS**): Joomla.'
  prefs: []
  type: TYPE_NORMAL
- en: Our web server will host dynamic websites and web applications. So we will install
    a LAMP (Stack) server, represent a Linux operating system with the Apache web
    server, where the site data will be stored in MySQL databases (using MariaDB,
    which is a community-developed fork of the MySQL relational database management
    system intended to remain free under the GNU GPL), and dynamic content processed
    by PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the installation of the Apache web server, which is the
    most popular web server in the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'By the end of the command, the Apache web server is successfully installed.
    We can start it using the command `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Before testing the service, we need to make sure that the server firewall allows
    web access. So, we need to open the ports that Apache is serving from, HTTP (80)
    and HTTPS (443):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now test the web server by typing in any other machine web browser inside
    the same network IP address of the server (`http://Server_IP_Address`). We should
    see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a web server using Apache-MySQL-PHP](img/B04674_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After making sure that the service is working fine, we need to add it to the
    system startup services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Now we will set up two virtual hosts on Apache to show Apache's capacity to
    support multiple websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next part, we will make a number of changes to the Apache configuration
    file, so we will create a backup file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Apache has the capacity to separate its functionality and components into units
    that can be customized and configured independently. These units are called **virtual
    hosts**. Virtual hosts allow us to host multiple domains. Each configured domain
    will direct the visitors to a specific folder specified to the website, which
    holds its information. This technique is extendable as long as the server can
    handle the traffic attracted by the websites stored inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make the folders where we are going to store our websites.
    The directory `/var/www/` is our web server root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we grant these folders permission to be accessible by changing the ownership
    from the root (the user who just created them) to the `$USER` (the user that is
    currently logged in):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'To fully test the virtual hosts, we need to create an example HTML page to
    be opened at the client web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add some HTML code to populate the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, for the second host, we need to create the same file with different
    content to tell the difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we put in the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create the virtual host files in the Apache configuration folder.
    We start by creating the folders where we need to put our files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Then we need to tell the Apache service to use the configuration provided at
    the `sites-enabled` directory by editing the Apache main configuration file. This
    configuration can also be obtained as the configuration directory `/etc/httpd/conf.d`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the following line to the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the file, then we move to the virtual host file creation in the folder
    `sites-available`. The file should always end with `.conf` so the Apache service
    can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we put the following configuration inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the file, and then do the same thing for the second virtual host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'And we put the following commands inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'After configuring both sites, we can now activate the Virtual Hosts to be usable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that all the configurations we have done will be effected, we
    need to restart the Apache service by using either of these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we ever get any error related to our server host name, try to use this command
    to change it and get rid of the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, those domains are not public and they are not defined by any DNS
    server. So we can either add them to our local DNS server or we can just add them
    to the `/etc/hosts` file in our client machine (the machine where we are going
    to open the web browser). This step is only to do the test. Usually we should
    define them with the DNS server of the ISP or at the local DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the two lines that associate our web server IP address to the two
    domains that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we go to the client web browser and we type the domain in the address
    bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: We should see the page associated with the first domain. We do the same thing
    for the second domain. If the test is valid, we confirm that our virtual hosts
    have been created properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can move to secure Apache against one of the most common attacks that
    is affect the world''s websites. A brute-force attack or **Distributed Denial
    of Service** (**DDoS**) attack is a kind of attack that sends multiple requests
    to the same web server to overload it and make it unreachable. Now we are going
    to set up modules that help secure our web server from the kinds of attack. `Mod_Security`
    and `Mod_evasive` are the basic modules that will help detect and prevent intrusions,
    and help reinforce the web server protection against brute-force or DDoS attacks.
    First, we need to install the modules using the package manager. We require that
    the system already has the EPEL repository installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'So to verify that the installation is complete we need to see whether there
    are two files that have been created in the `/etc/httpd/conf.d/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that Apache loads these two modules when it starts, we need to
    add some configuration options to the two configuration files, which have been
    created after the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'And we add the following lines respectively or we make sure that they are uncommented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can restart Apache so the configuration can take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by configuring the `Mod_Security` module. So we need to set up a **Core
    Rule Set** (**CRS**). We will download a free CRS (OWASP) to have it configured
    for our web server. We need to create a directory to put the rules inside before
    downloading its package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'After that we can extract the package there and we can change its name to an
    appropriate one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start configuring the `Mod_Security` module. We need to copy the
    sample file configuration into another file without the .`example` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Then tell Apache to use this module by inserting the following line into the
    Apache main configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create a configuration file in the `/etc/httpd/modsecurity.d/`
    directory to make it easier to upgrade the CRSs if there are newer versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the new file, we need to add the following line and save the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'With this step we can say that the `Mod_Security` module is successfully installed
    and configured. We can now move to the next module, `Mod_Evasive`. To configure
    this module, we need to make sure that some lines are not commented in the main
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'And then check the `IfModule` options are successfully set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go through the previous code in some detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DOSHashTableSize`: This option specifies the size of the hash table used to
    keep track of the IP''s activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOSPageCount`: The legitimate number of identical requests to one resource
    from one IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOSSiteCount`: The same as the `DOSPageCount`, but for all the requests that
    can be made'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOSBlockingPeriod`: The blacklisting period for an IP that excludes the options
    on top'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those numbers are an example of configuration. We can change them as per our
    need.
  prefs: []
  type: TYPE_NORMAL
- en: An extra option that can be useful is `DOSSystemCommand`, which helps to run
    some script that can block IP addresses. To do so we need to add it to the configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to create the script at an appropriate location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'And we should add the following code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'This script requires some system modifications to run properly. Let''s make
    it executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add a line to the `Sudoers` rule file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'For security reasons, editing the file directly may be harmful. We recommend
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, this script works with `iptables` so we need to deactivate `Firewalld`
    and `install` and activate `iptables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Then apply the new configuration we need to restart the Apache service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Finally, our web server is well secured and configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a small tip, the Apache server by default shows what operating system and
    version it has been running on. Sometimes it shows what modules are installed.
    That information can be very valuable for attackers to use as a vulnerability,
    so we need to disable the display of that information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we change the following two lines to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now move to database installation. The database in a server is essential
    for the execution of a dynamic website to be used as a medium to store its data.
    Usually, on old Linux versions, we install MySQL as our default database server
    but recently most Linux distros have migrated to the MariaDB database server.
    To do so, we need to use the package manager to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to install some modules that are not available in the default
    repository. So we need to install the EPEL repository to make sure that we are
    covered for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we start the service and enable it for the next startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'To have a well-secured database server, we need to use the MariaDB secure installation
    command. This command is very useful to customize the level of security of the
    database server with a variety of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We should make sure to specify a powerful root password for the database during
    the execution of the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that our database server is working correctly we can just run
    the CLI interface and run some basic SQL commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: We type the password already set during the secure installation and we will
    have the MariaDB CLI. To quit it just type `quit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order not to type the password each time, we can write the password in a
    file located in our home directory `~/.my.cnf` and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now move to the PHP5 installation. In the future, we will add `phpmyadmin`,
    which is a program that allows the management of the MariaDB database via a graphical
    interface accessible via the web browser. First, we start by installing PHP5 and
    the library that supports MySQL for PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: We can edit `/etc/php/php.ini` to configure where to put error messages, the
    maximum size to upload a file to the website (very useful for dynamic websites
    that handle files), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do some minor configuration to make PHP more secure. First, we can remove
    the information and errors message and log them to a log file. Then turn off remote
    code execution. Also, if we are not in need of a file upload in the website, we
    can disable it. We need to use a safe SQL mode. Finally, we disable dangerous
    PGP functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'To protect PHP from known and unknown flows, we consider installing the Suhosin
    advanced protection system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we configure it so Apache starts using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we restart Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we move to the installation of the packages required for the `phpmyadmin`
    installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing them, we install the `phpmyadmin` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to do a little configuration to enable outside access to the interface
    of `phpmyadmin` other than from the server itself. We need to edit its configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to comment the old configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'And add the new configuration that grants access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to change the authentication from `cookie` to `http`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'And change this line to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'So that the change can take effect, we need to restart Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: To test whether it worked, we only need to type in any web browser located on
    the same network as the web server `http://Server_IP_Addr` `ess/phpmyadmin`. Then
    we need to provide the database root user and its password to log in. We can secure
    `phpMyAdmin` by editing its configuration file such as restricting the source
    IP address that can access the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to install a **Content Management System** (**CMS**) such as Wordpress,
    Joomla, or Drupal, we need to install some PHP modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing those modules, we can proceed with our CMS installation. In
    our case, we will be installing Joomla. First, we need to go to the Joomla website
    and download the latest version into `/var/www` or any `Virtual Host` folder.
    Using Wget we will download the Joomla package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to extract the package using the `unzip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to make sure that the folder where we are going to extract the package
    is empty to have a safe installation with no errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that we can go and open, in any client web browser, the domain where
    we extracted the CMS package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to follow the steps of the installation provided on the website.
    Here is a brief description of what we should provide to finish the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to provide the website name and some of the site administrator information
    (mail, name, password):![Setting up a web server using Apache-MySQL-PHP](img/B04674_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the database part, we need to provide which database we are using (`MySQL`),
    then the server host name (`localhost`), and the user and password of the database
    (`root`), and finally a name of the database in which to store the site information:![Setting
    up a web server using Apache-MySQL-PHP](img/B04674_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If needed, we can enable the FTP server by providing the FTP user and its password,
    and verify the service to check whether it is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we will have an overview where we can check the configuration that we have
    entered and we can have it sent to the administrator via e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we click install to have the website installed and configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As this screenshot shows, we can determine the status of the pre-requirement
    of our CMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a web server using Apache-MySQL-PHP](img/B04674_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The installation site will remind us to remove the installation folder since
    it can present a vulnerability to the website. So to reinforce the security we
    need to remove it manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to copy the configuration provided on the site and put it inside
    a file that we create in the site folder and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access the site and navigate to it or we can open the administration
    panel to make some tweaks to the site or manage the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Now we can say that we have installed and secured our web server and it is ready
    for use.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, multiple clients need a file exchange, and one of the common services
    that allows an easy and fast file exchange is the FTP technologies. In this section,
    we will talk about how to set up an FTP server to help transfer data between two
    machines in the same network or from different networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install an FTP server using the default package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'After having the server installed, we can start the configuration by editing
    the `VSFTPD` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to find the following lines and change them as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we should restart the service and add it to the system startup to auto-start
    at the next boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Basically, most of the errors that won't let the service start are related to
    typos in the configuration file. If we ever get any, we should first check that
    file for any miswritten options.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, to make sure that the service is accessible from other machines
    other than the machine itself, we need to open the FTP port in the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Then update the SELinux Boolean values for FTP service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, we should make some FTP users so clients can use them to log
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start testing the service by going to one of the clients either
    on the same network or outside, and do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: And then we type in the user and its password which we have already defined.
    If we get access to the FTP service that means that our FTP server is successfully
    set up.
  prefs: []
  type: TYPE_NORMAL
- en: Securing Apache and FTP with OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most services provided around the world are very attractive to hackers to attack
    and steal valuable information or to block its activity. In this section we are
    going to present a solution that helps secure two of the most commonly used services
    (`HTTPFTP`). This solution is OpenSSL as an open source toolkit implementing the
    **Secure Sockets Layer** (**SSL**) and **Transport Layer Security** (**TLS**)
    protocols as well as a robust cryptography library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the implementation of OpenSSL for FTP file transfer to make
    it more secure. First, we need to ensure OpenSSL is installed on our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we start configuring the service to work with our FTP server VSFTPD. So
    we need to create an SSL certificate to use with TLS since it the latest most
    secure technology created. To do so we need to create a folder to store the files
    to be generated using SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create the certificate with the keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to fill in the details required during the execution of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`openssl`: The basic SSL command to manage SSL certificates and keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`req –x509`: To specify the public key infrastructure standards for SSL and
    TLS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-node`: To tell OpenSSL to skip the passphrase security option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-days 365`: To set the time of the validity of this certificate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-newkey rsa:1024`: To create a new RSA key 1024 bits long'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-keyout`: To tell OpenSSL where to generate the private key file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-out`: To tell OpenSSL where to generate the certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we add the SSL details to our FTP server main configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'We specify the location of the certificate and the key files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we enable the use of SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we restrict the connections to TLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add some optional configuration to reinforce the site security:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we restart the FTP service to enable the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Then we can test it via an FTP client (Filezilla) that has the capacity to connect
    via FTPS to see that the connection/transfer is now secured.
  prefs: []
  type: TYPE_NORMAL
- en: We now move on to the second part of this section where we are going to secure
    our web server Apache. We will be installing the OpenSSL module for Apache then
    we will configure it to secure Apache.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make sure that Apache is successfully installed and the same
    thing can also be started for OpenSSL. Then we can start the installation of the
    module `Mod_ssl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing it, we move to the configuration part. We need to create a
    folder in which we are going to store our keys and certificate files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create our keys and certificates using OpenSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: We need to fill in all the required details to finish the files' creation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SSL key in Apache must be without password less to not cause a manual reconfiguration
    every time the server restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating all our files, we need to set up a virtual host to use with
    the new certificate. To do so we need to start by editing Apache''s SSL configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: We need to find the section that begins with `<VirtualHost _default_:443>`,
    to make some changes to it to make sure that the SSL certificate is correctly
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to uncomment the `DocumentRoot` line and change the location
    to the desired site that we need to secure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'We do the same thing for the line `ServerName` and we need to change the domain
    to the desired one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we need to find the `SSLCertificateFile` and the `SSLCertificateKeyFile`
    lines and change them to point to where we have created the SSL certificate and
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we save the file and restart Apache to enable the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: To test this configuration, we need to use a web browser of a client machine
    and type in [https://www.packtpub.com/](https://www.packtpub.com/) `uk`. Then
    accept the certificate and access the site.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have gone through the chapter, let''s take a look at the references
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firewalld configuration guide: [https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenVPN server overview: [https://openvpn.net/index.php/access-server/overview.html](https://openvpn.net/index.php/access-server/overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BIND DNS server page: [https://www.isc.org/downloads/bind/](https://www.isc.org/downloads/bind/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server (LAMP) wiki page: [https://en.wikipedia.org/wiki/LAMP_(software_bundle)](https://en.wikipedia.org/wiki/LAMP_(software_bundle))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FTP server Wiki page: [https://en.wikipedia.org/wiki/File_Transfer_Protocol](https://en.wikipedia.org/wiki/File_Transfer_Protocol)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FTPS vs SFTP: [https://www.eldos.com/security/articles/4672.php?page=all](https://www.eldos.com/security/articles/4672.php?page=all)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mod_SSL` for Apache documentation: [http://www.modssl.org/docs/](http://www.modssl.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenSSL webpage: [https://www.openssl.org/](https://www.openssl.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a description of a list of services that the CentOS Linux system
    offers to its users. This description is a step-by-step explanation of how those
    services can be installed on CentOS 7 and how to configure them for best practice.
    We have talked about implementing a Gateway server, using Firewalld, inside a
    local network. Then we have established a VPN server, using OpenVPN, to have clients
    access the network from all around the world. After that, we have set up a DNS
    server using the BIND service. Then we have installed the essential packages to
    set up a fully running web server that can support a dynamic website with some
    tweaking to make it more secure, easy to manage, and extensible, using Apache
    and its modules, MariaDB and PHP. We moved to set up an FTP server to have clients
    access it to transfer data. And we have finished with securing both our web server
    and our FTP server using the OpenSSL self-signed certificates and keys.
  prefs: []
  type: TYPE_NORMAL
- en: We are not done yet with what CentOS 7 can offer. Check out our next [Chapter
    4](ch04.html "Chapter 4. Mail Server with Postfix"), *Mail server using PostFix*,
    which explores in depth how to set up, configure, and secure a mail server using
    Postfix.
  prefs: []
  type: TYPE_NORMAL
