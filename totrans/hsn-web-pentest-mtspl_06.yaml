- en: Using Metasploit for Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information gathering or **reconnaissance** (**recon**) is the most crucial
    and time-consuming phase in the penetration testing cycle. When pentesting a web
    application, you are required to gather as much information as you can. The more
    information you have, the better. Information can be of any type – a web server
    banner, an IP address, a list of opened ports that are running a web application
    service, any supported HTTP headers, and so on. This kind of information will
    help a penetration tester to perform testing checks on a web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover reconnaissance using Metasploit. We'll look at
    which modules you can use to perform the recon.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit **Community Edition** (**CE**) with the web interface installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either a *nix-based system or a Microsoft Windows system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to Shodan and Censys accounts for API keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a nutshell, a *recon* is a phase in which the pentester will gather as much
    information as possible related to the web application that they are testing.
    Recons can be categorized into two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active reconnaissance**: Collecting information on the target and from the
    target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passive reconnaissance**: Collecting information on the target via third-party
    sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at both of them in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Active reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active recon (or an *active attack*) is a type of reconnaissance during which
    the tester communicates with the target server/system either from their own system
    or via a pre-owned **Virtual Private Server** (**VPS**). In this chapter, we will
    look at some of the ways we can use the built-in scripts in Metasploit to perform
    both active and passive recon.
  prefs: []
  type: TYPE_NORMAL
- en: Banner grabbing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Banner grabbing is a technique used to gain information about a device on a
    network, such as the operating system, services running on the open ports, the
    application used, or the version number. It is part of the information-gathering
    phase. Metasploit has a lot of modules that can be used to collect banners from
    different types of services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will use the `http_version` module, which detects
    the version number and names of services running on the HTTP protocol on a given
    IP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Modules from the Project tab bar and type `http_version` in the Search
    Modules box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b862b6f9-26a6-40dc-a8b9-917acc811cf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click on the module name. This will redirect us to the module options,
    where we can specify the target addresses and other settings, as shown in the
    following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our case, we will choose port `80`, as we know the HTTP protocol is running
    on port `80`. This value can be changed to any port number where HTTP is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2717ee38-cd2c-44fd-bc2b-5a1b10d3e3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once everything is set, we click on the Run Module button shown in the previous
    screenshot. A new task will be created. Click on Tasks from the Project Options
    tab to see the status of the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01b968e7-a861-477d-8094-af3671c50cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the module completes execution, we can go back to the Analysis tab and
    click on the Host IP against which we ran the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/525c4a3b-f38f-470c-8a15-da71e2138198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see that the module has detected and printed the banner running on
    port `80` under SERVICE INFORMATION, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9300915a-ab95-4160-9ecc-9405cdc9a303.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's see how the HTTP headers of the web application can be detected.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP header detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now try to detect the HTTP headers of the web application. The HTTP
    header can reveal a lot of information about the application, such as the technology
    being used, the content length, cookie expiry dates, XSS protection, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Modules section and search for `http_header`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/610f2a40-6bbc-496e-ad15-d39f0b27080a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module name will take us to the options page where we can specify
    the Target Addresses, port number, thread, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2f2f72b-33d2-4eec-b016-46f52d734098.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we have configured the settings, we click on Run module and a new task
    will be launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/656b4204-c179-4fe1-b74f-1b6c2a0dd760.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the task completes, we can go to the Analysis tab and, in the Notes section,
    we will be able to see all the headers discovered by the scanner module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24741b57-1301-4893-b102-24c1db1ee70c.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's look at web robot page enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: Web robot page enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`robots.txt` (or the *robots exclusion standard*) is a method used by websites
    to communicate with crawlers or bots. Let''s see how enumeration is done in the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To block a subfolder from `Googlebot`, we will use the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To tell all bots not to crawl the website, we can put the following data in
    the text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we will use the `robots_txt` auxiliary to fetch the contents
    of a website''s `robots.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by searching for the module with the `robots_txt` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03b03718-1eb5-4bea-816a-46eb9ab8b151.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module will redirect us to the options page, where we can set
    the Target Addresses, RPORT, PATH, VHOST, and so on. In our case, we have used
    the example of `www.packtpub.com` as the VHOST:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a037bd79-c623-4acd-8030-e6f065744219.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon clicking the Run module, a new task will be created and we will be able
    to see the status of the script running in the Tasks window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60970054-15a3-4030-8616-270e0012dc92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the task is complete, we can go back to the Analysis tab and click on
    the Notes section of our target host to see the list of all the directories listed
    in the `robots.txt` file of the website, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c564236-f849-4d46-8f99-c102144e21bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's find some misconfigured Git repos on a given website.
  prefs: []
  type: TYPE_NORMAL
- en: Finding hidden Git repos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, while deploying code from Git on a production server, developers
    leave the `git` folder in a public directory. This is dangerous as it may allow
    an attacker to download the entire source code of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the `git_scanner` module, which helps us to discover misconfigured
    repos on a website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by searching for the `git_scanner` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f4fc3c2-a4af-4b9a-9812-4e32a847158a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module will redirect us to the module options page where we
    specify the target address and port, and then click Run module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dcdcfdb-14d1-41ac-807d-57767345b536.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new task is created, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb1264a6-5747-4b5b-a5ba-42ba1f527fed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the task is complete, we can go to the Analysis tab and click on our host.
    In the Notes section, we see that the auxiliary has found the `config` and `index` files
    of the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba9759bb-3cbc-48d3-a0ba-5d4f33b65de6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can go to the Captured Data tab to view the contents of the files
    found by the auxiliary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47345706-391b-4583-b2d7-4fb2f703083d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on View shows the contents of the `config` file, which contains the
    `git` URL, the version, and some branch information. This information can also
    be used to download the entire source code of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad66dcdf-57bc-4e2f-82bc-c3bdf8ba3a94.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will check for open proxy services.
  prefs: []
  type: TYPE_NORMAL
- en: Open proxy detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a very simple script. It allows us to check whether a proxy service
    we found on a port is an open proxy. If a proxy service is an open proxy, we can
    use the server as a proxy to perform different attacks and to avoid detection,
    especially during a red team activity. Implement the following steps to see how
    this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by searching for the `open_proxy` keyword in the Modules tab, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73f96b03-91de-42a6-baad-348edebabfb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the module name, we will be redirected to the options where we set
    the IP, the port, and the URL to check the proxy settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on Run Module will create a new task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/158b1632-b34d-43b1-9072-22f82d4e5f0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the proxy is open, we will see a message in the task window, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c8bee49-d060-4c79-8481-10a3e2de48d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a better understanding of performing active reconnaissance
    using Metasploit, let's move on to the next topic to learn about passive reconnaissance.
  prefs: []
  type: TYPE_NORMAL
- en: Passive reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passive recon is a method of collecting information about a target without engaging
    with the systems actively. We will not directly touch the systems. Instead, we
    will use indirect methods to gather information about the target, for example,
    through Shodan and Censys.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit has a lot of auxiliaries that help in passive recon. In this section,
    we will look at some of the ways in which we can perform passive recon using Metasploit
    auxiliaries.
  prefs: []
  type: TYPE_NORMAL
- en: Archived domain URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Archived domain URLs are one of the best ways to perform passive recon, as they
    tell us about the history of the website and its URLs. Sometimes, websites are
    changed but some old files and folders are left on the server; these may contain
    vulnerabilities and allow us to gain access. Archived.org and the Google Cache
    are the two services we can use to hunt for archived domain URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit also has a built-in auxiliary for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `enum_wayback` keyword in the Search Modules screen to find
    the auxiliary we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c584d2e7-5d3c-4d8b-8eaf-3f61b41946ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module, we will be redirected to the options page where we
    can enter the website domain name. Then, click Run Module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f9c1b7d-f71f-4b33-942d-4d3d9a63974f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new task is created and the module runs successfully, printing the output
    it finds in the task window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfa25a42-3518-48b0-9cca-286560d3ff95.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will be introduced to Censys.
  prefs: []
  type: TYPE_NORMAL
- en: Censys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Censys is a search engine for devices connected to the internet. Censys was
    created in 2015 at the University of Michigan by the security researchers who
    developed ZMap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Censys continuously scans and logs devices on the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit also has a built-in auxiliary that allows us to do a Censys scan.
    We can use the `censys` keyword in the module search to locate the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86ddf557-3840-4bd6-876a-49a90a06f9d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the module will take us to the options page, but before we do that,
    we need to log in to our account on `censys.io` and get API ID and Secret, which
    will be used in the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07bc1203-fcc6-4d99-8f7f-979711d497b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We enter API ID and Secret in the module options and specify the domain name
    as the target address. We''re using `packtpub.com` as an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32340110-8fd1-4e75-9c96-d2b60b1d6b8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Run Module will create a new task. The auxiliary will search
    for different hosts and their ports. The results will be printed as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/995bed48-2007-485e-8c6b-463bde40e501.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit also has modules to search the Shodan and Zoomeye databases, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a97f448-55bd-44b0-a248-ed49a5a9e905.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the output from the `shodan_search` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5ce2ee4-bafa-40e7-88d3-573ef1046be1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run the Zoomeye module, we can search for the `zoomeye` keyword and run
    the module just as we did for Shodan. This is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5251d4a-c93b-4460-9c43-8be4caca129f.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will learn about SSL recon.
  prefs: []
  type: TYPE_NORMAL
- en: SSL recon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure Socket Layer** (**SSL**) is used by organizations to ensure encrypted
    communication between the server and the clients. In this section, we will look
    at the Metasploit module, which uses SSL Labs'' API to gather intel about the
    SSL services running on a host:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can search for the `ssllabs` keyword in the module search to find the module,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be4b94e8-c54e-4d55-961e-a927c913b025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the module name will redirect us to the options page. Here, we set
    the target and click Run Module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2959845c-bb3b-430b-b463-ee336d58aa83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new task will be created, which will show us the scan results and output,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca214953-1217-4aa3-83b2-48ca24228d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: SSL can disclose a lot of things, such as certificate authorities, organization
    names, hosts, and internal IPs. We can use the same module to learn about the
    SSL version running on the server, to check the ciphers allowed by the server,
    and also to check whether the target site has **HTTP Strict Transport Security**
    (**HSTS**) enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the recon process. We started with active
    recon using HTTP headers and discovering Git repos. Then, we moved on to passive
    scans, where we looked at Shodan and SSL analysis, and used archived web pages
    to obtain information relating to a target.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how we can perform web-based enumeration using
    Metasploit. We'll be focusing on HTTP method enumeration, file and directory enumeration,
    subdomain enumeration, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTTP header detection module is not showing any output. Does this mean the
    module is not working properly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The port scan in the Metasploit web interface is a little bit buggy. What can
    you do about this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you load your custom modules in the Metasploit web interface as you use
    them in the Metasploit framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My organization has provided me with the Metasploit web interface installed
    on a VPS. How can I make sure the Web Interface's login page is protected?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To read more about this topic you can check out the below URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate](https://metasploit.help.rapid7.com/docs/replacing-the-ssl-certificate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/](https://www.offensive-security.com/metasploit-unleashed/scanner-http-auxiliary-modules/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
