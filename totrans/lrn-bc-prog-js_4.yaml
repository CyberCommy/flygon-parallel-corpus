- en: Creating a Decentralized Blockchain Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, let''s focus on building a decentralized blockchain network.
    The way that our blockchain works right now is that we have a single blockchain,
    and the only way to access it is through the API: our single server. This server
    is very centralized, which is not beneficial because the API is in total control
    of the blockchain and the data that gets added to it.'
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, all blockchain technology is hosted across a decentralized
    network. In this chapter, that's what we're going to focus on building. We'll
    build a decentralized blockchain network by creating various instances of the
    API. Each of these instances of the API are going to be a network node in our
    blockchain network. All of these nodes will work together to host our blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, it's not just a single network node that has total control over
    our blockchain. Instead, our blockchain is hosted across the entire decentralized
    network. This way, if there's one bad player in our network, or somebody who is
    trying to cheat the system, we can refer to the other network nodes to see what
    the real data should be inside of our blockchain and what our blockchain should
    actually look like.
  prefs: []
  type: TYPE_NORMAL
- en: Having our blockchain hosted across a decentralized network is very powerful
    because it vastly increases the security of our blockchain, and therefore we don't
    have to just trust one single entity with all of our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to create and test multiple nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `currentNodeUrl` to our network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new endpoints for the decentralized network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `/register-and-broadcast-node` endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and testing the `/register-nod`e endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and testing the `/register-nodes-bulk` endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing all of the network endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started with creating our decentralized network.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin by building the decentralized network:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we'll have to do to create our decentralized blockchain
    network is make some modifications to our `api.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our decentralized network, we're going to have multiple instances of our
    API, and each one of them will act as a network node. Since we'll be dealing with
    multiple network nodes, it will be better to rename our `api.js` file to `networkNode.js`
    for easy reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To set up the decentralized network, we''ll have to run the `networkNode.js`
    file multiple times. Each time we run the file, we want it to act as a different
    network node. Let''s do this by running the file on different ports every time
    we run it. To have a different ports value every time, we''ll have to make port a
    variable. To do this, add the following line at the start of the code in our `dev/networkNode.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, go to the `package.json` file and make modifications to the `start` command.
    What we''ll do here is go to the end of our command and pass a variable for the
    port number on which we want a network node to run. In our example, we want to
    run our network node to run on port number `3001`. Consequently, pass `3001` as
    a variable at the end of the start command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To get access to this variable, we passed the `process.argv` variable in our
    `networkNode.js` file. So, what is the `process.argv` variable? This variable
    simply refers to the `start` command that we run to start our server.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of the preceding `start` command as an array of elements. The
    first and the second elements of the command are comprised of `"nodemon --watch
    dev -e js dev/api.js`, and the third element of the command is the `3001` variable.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add more variables to the command, you can simply make a space
    and then add more variables to it.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, to access the port variable in the `start` command, we passed
    the variable as `process.argv [2]` because this array starts with a `0` index and
    our port variable is the third element in the start command.  To simplify this,
    we can access the `3001` variable by stating `process.argv` at position 2\. As
    a result, we gain access to our `port` variable inside of our `dev/networkNode.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to use the `port` variable. Therefore, in the `dev/networkNode.js` 
    file, go to the bottom, where we have mentioned the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have found this, make the following highlighted modifications to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding block of code, we replaced the hardcoded `3000` port number
    with our `port` variable. We also changed `Listening on port 3000...` to `Listening
    on port ${port}...` by using string interpolation and passing the port variable. 
    Now, when we run the `networkNode.js` file, it should be listening on port `3001`
    instead of port `3000`.
  prefs: []
  type: TYPE_NORMAL
- en: One tiny thing that we need to change before we run the `networkNode.js` file
    is that in the `package.json` file in the `start` command, we'll have to  change
    the name of the `api.js` file to `networkNode.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we're all set to run the `networkNode.js` file by passing in the variable
    of whatever port we want as a variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s run the `networkNode.js` file. In the terminal window, type `npm start`.
    By typing this command, the server should start listening to port `3001`, as we
    can observe in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05dc694f-141a-40f3-97a1-13d3447bd607.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can observe that the server is listening
    to port `3001`. We can further verify this by typing `localhost:3001/blockchain`
    in the browser. You should see an output similar to what''s shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a719f771-fc07-439e-8331-8c20cf0f3043.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can see that our blockchain is now hosted
    on port `3001` instead of on port `3000`. If we went to port `3000`, there would
    be nothing there, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/501f3d91-83ef-475e-821b-ba73449070e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Running multiple instances of networkNode.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing that we will want to do is run multiple instances of `networkNode.js`.
    To do that, we are going to add a few more commands to the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, in the `package.json` file, we must change the `"start"` command
    to `"node_1"`. Now, when we run this command, it's going to start our first node,
    which is on port `3001`. Let's give this a try.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the file, go to your terminal, and cancel the previous process by typing `^C%`.
    After doing this, instead of typing `npm start`,  type `npm run node_1`. With
    the help of this command, run our `node_1` on port `3001`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95ea347b-d753-4eb7-8441-cc8cd4bf1b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: All we really did in this process is change the `npm start` command to `npm
    run node_1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our decentralized network, we want to run a couple more of these nodes
    at the same time. Let''s go back to our `package.json` file and add more commands
    that are similar to `"node_1"`. To do this, duplicate the `"node_1": "nodemon
    --watch dev -e js dev/networkNode.js 3001",` command four more times and then
    make modifications to these commands, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb271a9f-6803-490c-96f2-15ccdc17cbbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, save this modification and let''s head back over to our terminal and start
    up the other network nodes. From the previous run, we have the first node, `node_1`,
    running on port `3001`. For this run, we''ll want to run the second node, `node_2`,
    on port `3002`. Therefore, simply type `npm  run node_2` and then press *Enter*.
    We''ll get to observe the following output on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1401807f-a32a-4a46-9add-3e9884fd2169.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have one network node running on port `3001`, and the other network node
    running on port `3002`. Follow a similar process to run the remaining network
    nodes on the remaining ports.
  prefs: []
  type: TYPE_NORMAL
- en: For better visualization and easy understanding, it is recommended that you
    try to run each node on different tabs of the terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: By following this process, what we are actually doing is creating five different
    instances of our `networkNode.js` file. So, essentially, we have five different
    network nodes running.
  prefs: []
  type: TYPE_NORMAL
- en: In the browser, we can check each one of these network nodes by changing the
    port number in `localhost:3001/blockchain`. By doing this, we're going to get
    back a different blockchain running on the different ports.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the multiple nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will continue exploring the five separate network nodes that we created
    in the previous section. By now, you might have all five of the network nodes
    running. If not, going to the previous section and understanding how to get each
    of these nodes running is recommended. What we''ve currently got, which is five
    separate network nodes running, is not really a network. All we have is five separate
    nodes or five separate instances of our API running, but they are not connected
    in any way. To verify that these network nodes are not connected, we can carry
    out a couple of tests:'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's head over to Postman and try make a couple of different transactions
    by hitting the `/transaction` endpoint on the different network nodes that we
    have running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first transaction that we want to make is going to be to our network node,
    which is hosted on port `3001`. So, let''s go into the body and type in some random
    transaction data, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65cccdf0-f3aa-4357-974d-3a132f5d3b74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our transaction data has an amount of 30,000 bitcoins, and we''re sending this
    to network node that''s hosted on port `3001`. Click on the Send button, and if
    the transaction is successful you''ll get the following response, as highlighted
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e7ac10a-deee-434a-b4ad-ffcb10faf3bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's make a transaction to our network node hosted on port `3003` with
    the transaction amount as 10 bitcoins. Then click on the Send button to send the
    transaction to the network node on port `3003`. Here you will also get to observe
    the similar response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have sent the transaction data to the network nodes, let''s verify
    it. Go to the browser and go to `localhost:3001/blockchain`, and then press *Enter*.
    You''ll get to observe a similar response, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f09a700f-459c-4b9e-ac96-6eaa7bfdc362.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can observe that we have one pending transaction
    for 30,000 bitcoin. That's one of the transactions that we just added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the other tab, if we go to `localhost:3002/blockchain`, you''ll see
    that we have no pending transactions because we did not send any transactions
    to this network node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16eb2397-7d30-4ec1-aff6-6549cc2a0d9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, if we go to `localhost:3003/blockchain`, you''ll see that we have a pending
    transaction here for the amount of 10 Bitcoin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3eaf03d0-47f1-4a5b-a1ca-30942869c4e7.png)'
  prefs: []
  type: TYPE_IMG
- en: This was one of the other transactions that we made.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to go to `localhost: 3004/blockchain` and `localhost:3005/blockchain`,
    there should be no transactions there as we''ve not sent any of the transactions
    to these network nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: The conclusion that we can draw from this test is that although we do have five
    different network nodes running parallel to each other, they are not connected
    in any way. As a consequence, our main motive of this chapter will be to connect
    all of the network nodes to each other in order to build up a decentralized network.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the currentNodeUrl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After testing our nodes, the next thing that we're going to do is alter the
    commands in our `package.json` slightly. The reason that we're going to do this
    is because we want each of our network nodes to be aware of what URL they are
    currently on. For example, they could be on `http://localhost:3001`, `localhost:3002`, `localhost:3003`,
    and so on. Therefore, we want each node to be aware of the URL that it is being
    hosted on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `package.json`, as a third parameter to each of our commands, we are
    going to add the node''s URL. Therefore, our first node''s URL will simply be
    `http://localhost:3001`. It is likely that for our second node it will be `http://localhost:3002`.
    Similarly, you can add URLs for the remaining nodes, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee845e2e-6061-4be3-87ce-65abd81fd763.png)'
  prefs: []
  type: TYPE_IMG
- en: After adding the URLs, save the file. Now we have the URL of each node being
    passed in as an argument to the command we use to run each node. Therefore, we
    should have access to these URLs inside of our file, just like we have access
    to our port variables inside of our files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go to the `blockchain.js` file, and at the part where we define
    the const, we''re going to type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With this command, we should have access to the current node's URL by using
    the `currentNodeUrl` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we should assign the `currentNodeUrl` to our `Blockchain` data structure.
    We do this by typing the following highlighted line of code inside of our `function
    Blockchain {}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we also want our blockchain to be aware of all of the other nodes that
    are inside of our network. Therefore, we will add the following code below the
    preceding highlighted line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the further sections, we'll fill up this array with the node URLs of all
    the other nodes in our network so that every node will be aware of all the other
    nodes inside of our blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: New endpoints outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our blockchain, we would now like to create a network and have a way to register
    all of the different nodes that we have with it. Therefore, let's make a couple
    more endpoints that will make it possible to register nodes with our network.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the /register-and-broadcast-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first endpoint that we create will be `/register-and-broadcast-node`, and
    this is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding endpoint will register a node and broadcast that node to the
    whole network. It will do this by passing the URL of the node we want to register
    on the `req` body. Therefore, type the following inside the preceding endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We're not going to build this endpoint now, but when we use it in later sections, we'll
    be sending in the URL of a new node that we want to add to our network. Then we're
    going to make some calculations and broadcast the node to the entire network so
    that all the other nodes can add it as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the /register-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `/register-node` will be the next endpoint that we''ll add to our network.
    This is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This endpoint will register a node with the network.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between register-and-broadcast-node and register-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's try to understand how the `/register-and-broadcast-node` and `/register-node`
    endpoints are different. Basically, what's going to happen here is that whenever
    we want to register a new node with our network, we are going to hit the `/register-and-broadcast-node`
    endpoint. This endpoint is going to register the new node on its own server, and
    then it's going to broadcast this new node to all of the other network nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Those network nodes will simply accept the new network node inside of the `/register-node`
    endpoint, because all these nodes have to do is simply register the broadcast
    nodes. We just want them to register the new node; we do not want them to broadcast
    the new node because this has already occurred.
  prefs: []
  type: TYPE_NORMAL
- en: If all of the other nodes in the network were to broadcast the new node as well,
    that would severely degrade the performance of our blockchain network and would
    lead to an infinite loop that would crash our blockchain. Therefore, when all
    of the other network nodes receive the new node's URL, we just want them to register
    it and not broadcast it.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the /register-nodes-bulk endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final endpoint that we''re going to build in this section will be the `/register-nodes-bulk`
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This endpoint will register multiple nodes at once.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how all of the endpoints work together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning about all of these endpoints might seem little bit confusing at this
    stage, so let''s try to understand this with the help of a diagram. In the following
    diagram, we have our blockchain network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71f53dfa-9348-46fe-8838-40c861f1dc5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's assume that these five network nodes are already connected to each
    other, thus forming our decentralized network. Also, let's assume that we want
    to add a node that is hosted on `localhost:3009` to our network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we''ll do to add that node to our network is hit the `register-and-broadcast-node`
    endpoint on one of our network nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a7ab59d-188a-4e1d-90b1-ea2e81232cee.png)'
  prefs: []
  type: TYPE_IMG
- en: When we hit the `register-and-broadcast-node` endpoint, we need to send the
    URL of the new node that we want to add to our network. For our example, the URL
    is `localhost:3009`. This is the first step for adding a new node to our network. We
    have to hit our `register-and-broadcast-node` endpoint with the new nodes URL
    as data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding diagram, the network node that we hit is going to register
    this new URL on its own node, and then it''s going to broadcast this new node''s
    URL to the rest of the network. All the other nodes in our network will receive
    this data at the `register-node` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec42ecbb-8b21-4f13-890e-fb1269c45861.png)'
  prefs: []
  type: TYPE_IMG
- en: We're going to hit the `register-node` endpoint on all the other network nodes
    because we don't need to broadcast the data any more — we just need to register
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after the new URL is registered with all the other network nodes, our
    original node is going to make a request to the new node, and it''s going to hit
    the `register-node-bulk` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3664b8e3-8571-4e2f-aabf-db42c9e92719.png)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, the original node is going to pass along the URLs of all the other
    nodes with it. So, this call will register all the other nodes that are already
    present inside of our network with the new node.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the node is now part of the network, and all of the nodes inside
    of the network will be aware of all the other nodes present in the network as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's just go over  the whole process one more time. The first thing that
    we're going to do to add a new node to our network is hit the `/register-and-broadcast-node`
    endpoint on one of the nodes inside of our network. This endpoint will register
    the new node's URL, and then it will broadcast that new URL to all the other nodes
    in the network. After the broadcast is complete, the original network node that
    we hit will send a request to the new network node and it will hit the `register-nodes-bulk`
    endpoint. In doing this, it will register all the other nodes in the network with
    our new node.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, when this whole process is complete, all of these nodes will be
    part of our decentralized blockchain network, and they will all be registered
    with each other.
  prefs: []
  type: TYPE_NORMAL
- en: This is how these three endpoints are going to work together. In the following
    section, we're going to build the `register-and-broadcast-node` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Building  the /register-and-broadcast-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start building our register and broadcast node endpoint. The function
    of this endpoint will be to register the new node with itself and then broadcast
    the new node to all the other nodes that are already present in the network. So,
    let''s get started with building the endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding sections, in the `dev/networkNode.js` file, we already have
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined a variable called `newNodeUrl`, and this `newNodeUrl` data
    will be passed onto the request body, similar to how we have transaction data
    being passed into the transaction endpoint. With access to the `newNodeUrl`, the
    first thing that we want to do is register the node with the node's `register-and-broadcast-node` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'To register it, all we have to do is put the `newNodeUrl` inside of our `networkNodes`
    array on our `blockchain` data structure. To do that, in the preceding code block,
    add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding the preceding line of code, we are pushing the `newNodeUrl` into
    the `networkNodes` array. We only want to do this if the `newNodeUrl` isn''t already
    present in the array. Check for this with the help of the `if` statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What the `if` statement is doing is checking if the `newNodeUrl` is not already
    present in the `networkNodes` array. If it is not present, then it is added to
    the array. Consequently, with the help of the preceding block of code, the `newNodeUrl`
    is registered with the `register-and-broadcast-node` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve registered the `newNodeUrl`, what we have to do now is broadcast
    it to all the other nodes inside of the network. To do that, add the following
    line of code after the if block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding block of code, for each network node that is already present
    in the network or for every network node that is already present inside of the
    `networkNodes` array, we want to register our `newNodeUrl` with each of these
    `networkNodes` by hitting the register node endpoint. To do this, we're going
    to have to make a request to every single node at this endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to make this request by importing a new library. Let''s head over
    to the terminal to import the library. In the terminal, we''re going to cancel
    our first network node and then type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Installing this `request-promise` library will allow us to make requests to
    all the other nodes in our network. Once the library has been installed, restart
    the first node again by typing `npm run node_1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s go to the `dev/networkNode.js` file and import the library that
    we just downloaded to the code. Import the library by typing the following line
    of code at the start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding line of code, `rp` stands for the request promise.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's use this library in the `register-and-broadcast-node` endpoint. Over
    here, we have to broadcast our `newNodeUrl` to all the other nodes in our network.
    Do this with the help of  the `request-promise` library that we just imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next couple of steps that we are going to add to the code might look a
    little bit confusing as we''re going through them, but don''t worry. After the
    steps are complete, we''ll walk through  the code  step by step to make sure that
    everything is clear to you. Now let''s take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we want to do for our `request-promise` library is define
    some options that we''re going to use, so type in the following highlighted lines
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Inside of this object, we want to define the options that we want to use for
    each request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first option that we want to define is what URI/URL we want to hit. We
    know that we want to hit the `register-node` endpoints on all of our other `networkNodeUrl`.
    Consequently, we will add the following highlighted line of code to our preceding
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to define the method that we want to use. To hit the `register-node`
    endpoint, we''ll have to use the `POST` method, so add the following code to the
    preceding code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we want to find out what data we''re going to pass along with this request,
    so add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to set the `json` option to true so that we can send
    it as JSON data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the options that we want to use for each request we make. Now let''s
    see how we can use these options. After the `requestOptions` block, add the following
    line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding request is going to return a promise to us, and we want to get
    all of these promises back in a single array. So, before and inside of the `forEach`
    loop, carry out the following highlighted changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, outside of the `forEach` loop, we want to run all of the promises that
    we had requested. Add the following code after the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Continuing to work on the /register-and-broadcast-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's continue to build our `register-and-broadcast-node` endpoint.
    So far, we have registered the new node with the current network node that we're
    on and we have broadcast the new node to all the other nodes in our network. Consequently,
    we're hitting the `register-node` endpoint on all the other nodes inside of our
    network. Also, for now, we're assuming that those other nodes are registering
    the new node, which we haven't built yet, but we're assuming that it's working.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the whole broadcast is completed, we must register all of the nodes that
    are currently inside of our network with the one new node that we are adding to
    the network. For that, we''re going to use our `request-promise` library. Therefore,
    we need to define some options, as highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the options that we want to use (such as `uri`) are defined,
    along with the `POST` method. In the body option, we defined the `allNetworkNodes`
    array, and inside of this array, we want all of the URLs of all the nodes in our
    network, plus the URL of the node that we're currently on. Furthermore, you might
    have noticed that we used a spread operator `...` in the array because `bitcoin.networkNodes`
    is an array and we don't want one inside of another. Instead,  we want to spread
    out all the elements of this array and put them inside of our outer array. Finally,
    we want to define `json` as being `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to make the request, so after the options block, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `data` variable present in the preceding line of code will actually be the
    data that we receive from the aforementioned promise. We're not going to do anything
    with this data, but we want to use `.then` because we want to do the next step
    inside of our endpoint. However, we can only do this after the aforementioned
    promise has completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step that we must complete inside of this endpoint is send a response
    back to whoever called it. Therefore, type the following highlighted lines of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: That is it for our `register-and-broadcast-node` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: A quick recap of how the register-and-broadcast-node endpoint functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's run through this endpoint again for a quick summary of what we did
    in this endpoint so that we have a better understanding of this. Whenever we want
    to register a new node with our network, the `register-and-broadcast-node` endpoint
    is the first point that we want to hit. The first thing that we're doing inside
    of this endpoint is taking the `newNodeUrl` and registering it with the current
    node by pushing it into our `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: The next step that we have to make is to broadcast this `newNodeUrl` to the
    rest of the nodes in our network. We are doing that inside of the `forEach` loop.
    All that's happening inside of this for loop is we're making a request to each
    of the other nodes in our network. We're making this request to the `register-node`
    endpoint. We are then pushing all of these requests into our `register-node` promises
    array, and then we're simply running all of those requests.
  prefs: []
  type: TYPE_NORMAL
- en: Once all of these requests are completed without any errors, we can assume that
    the `newNodeUrl` has been registered successfully with all of our other network
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: After our broadcast is complete, the next thing that we want to do is register
    all of the network nodes that are already present inside of our network with our
    new node. To do this, we make a single request to our new node and we hit the
    `register-nodes-bulk` endpoint. The data that we pass along to this endpoint is
    the URLs of all the nodes that are already present inside of our network.
  prefs: []
  type: TYPE_NORMAL
- en: We then run `rp(bulkRegisterOptions);`, and even though we haven't built the
    `register-nodes-bulk` endpoint yet, we're going to assume that it's working and
    that all of our network nodes have been registered with our new nodes successfully.
    Once that has happened, all of our calculations are complete, and we simply send
    back a note saying that the new node has been registered with the network successfully.
  prefs: []
  type: TYPE_NORMAL
- en: This may seem like a lot to take in at this point, but don't worry; it is recommended
    that you continue moving forward. In further sections, we're going to build our
    `register-node` endpoint, followed by our `register-nodes-bulk` endpoint. As we
    do this, everything should become clearer to you.
  prefs: []
  type: TYPE_NORMAL
- en: Building the  /register-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built the `/register-and-broadcast-node` endpoint, it's time
    we move on to some things that are a little less complex. In this section, let's
    begin building the `register-node` endpoint. This is going to be very straightforward
    compared to the endpoint that we built in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: This `register-node` endpoint is where every node in the network is going to
    receive the broadcast that is sent out by our `register-and-broadcast-node` endpoint.
    The only thing that this `register-node` endpoint has to do is register the new
    node with the node that receives the request for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin building the `register-node` endpoint,  follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we''ll have to do is define the `newNodeUrl`; therefore,
    add the following highlighted line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code is simply stating to use the value of `newNodeUrl`
    that is sent to `req.body`. This is the data that we send to the `/register-node`
    endpoint, and we're going to save that new `nodeNodeUrl` as the `newNodeUrl` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to register the `newNodeUrl` variable with the node that received
    the request. To do that, add the following highlighted line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code will register our new node with the node that we
    are currently on. All we'll do here is simply push the `newNodeUrl` into the current
    node's `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final thing that we have to do is send back a response, so type the
    following highlighted line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to do some error handling inside of this endpoint. The only thing
    that we want to do is add `newNodeUrl` to our `networkNodes` array, if it doesn''t
    already exist in that array. To do this,  we are going to add an if statement
    at the start of `bitcoin.networkNodes.push(newNodeUrl)`.  But before that, let''s
    define a variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: What this preceding highlighted line is stating is that if the index of the
    `newNodeUrl` is negative 1, or, in other words, if the `newNodeUrl` does not exist
    in our network nodes, then the `nodeNotAlreadyPresent` variable will be true.
    If the `newNodeUrl` already exists in our `networkNodes` array, then this variable
    will be false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the if statement, what we''re going to state is that if the `newNodeUrl`
    is not present in our `networkNodes` array then add it by running `bitcoin.networkNodes.push(newNodeUrl)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, there''s one other case that we want to handle, which is that we do not
    want to push the `newNodeUrl` into our `networkNodes` array if the `newNodeUrl`
    is actually the URL of the current node that we''re on. To mention this condition
    in the code, let''s first have to define a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line is simply evaluating the `bitcoin.currentNodeUrl !== newNodeUrl` expression,
    which states whether or not the `currentNodeUrl` equals the `newNodeUrl`. If not,
    then the `notCurrentNode` variable will be true. If they do equal each other,
    then the variable will be false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we just want to add the `notCurrentNode` variable to our if statement,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: What's happening in this if statement is that if the new node is not already
    present in our `networkNodes` array and if the new node is not the same URL as
    the current node that we're on, then we just want to add the new node to our `networkNodes`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Everything that we have learned here is error handling inside of the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the  /register-node endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's test the `/register-node` endpoint to make sure that
    it works properly and to get a better understanding of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the request library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into testing the endpoint, there is a small update that we need
    to carry out. The update is regarding installing the request library. A few sections
    prior, we installed the `request-promise` library. Now, to test the endpoints
    that we just created, it might be necessary for us to also install the request
    library, depending on what version of the `request-promise` library we have.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the request library, simply go to your terminal, and inside of the
    `blockchain` directory run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Endpoint testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into testing, check whether you have all five of our network
    nodes running inside of your terminal. If not, then you will have to set them
    up.  Let''s test the `register-node` endpoint by using Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, we''re going to type `http://localhost:3001/register-node` in
    the address bar, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75f40672-7bbe-403e-adcb-4d41009a6ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: When we hit this endpoint, we are expected to send in a `newNodeUrl` as data
    on our `req.body`. We'll have to set that up now. So, in the Body tab inside of
    the Postman, we want to have raw selected and JSON (application/json) selected
    as the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, inside the textbox, make an object and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s say that we want to register our node that is running on port `3002`
    with our node that''s running on port `3001`. Add the following to our preceding
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have registered our node that's running on `localhost:3002` with
    our node that's running on `localhost:3001`. Therefore, when we hit `http://localhost:3001/register-node`,
    our `localhost:3002` should show up in the `networkNodes` array of our first node
    (that is, `localhost:3001`) because this `register-node` endpoint registers a
    node by placing it into the `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify this, go to Postman and click on the Send button. You will get the
    response New node registered successfully. Now go over to your browser and  type `localhost:3001/blockchain` into
    the address bar, followed by pressing *Enter*. You will see an output similar
    to what''s shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/089da3ad-3891-4605-9b36-62bc7a6d15cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we had just registered our second node with our current node on `localhost:3001`,
    we have our second node's URL inside of this array.
  prefs: []
  type: TYPE_NORMAL
- en: Following the same procedure, you can try to register other nodes too. Try experimenting
    with this. This will help you in gaining a clear understanding of the nodes that
    are registered. If you come across any issues, try to read through the whole procedure
    again.
  prefs: []
  type: TYPE_NORMAL
- en: One important thing that we want to notice here is that if we now go to `localhost:3002/blockchain`,
    we get to observe that there are no network nodes registered in the `networkNodes`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, what we want to happen is that when we register a new node, we want
    it to reverse register as well. So, if we register `localhost:3002` with the node
    on `3001`, then our node on `3002 `should register `localhost:3001`. That way,
    both of these nodes will be aware of each other.
  prefs: []
  type: TYPE_NORMAL
- en: We've actually already built this functionality inside of our `register-and-broadcast-node`
    endpoint. Once we build all three of these endpoints, the functionality that we
    mentioned will work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Building the /register-nodes-bulk endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next endpoint that we are going to build is our `register-nodes-bulk` endpoint;
    this is the final endpoint that we need to build. These three endpoints that we
    have been working on will all work together to create our decentralized blockchain
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start building the endpoint, let's try to understand what the `register-nodes-bulk`
    endpoint does. Whenever a new node gets broadcast to all the other nodes inside
    of the network, we want to take all of the nodes that are already inside of the
    network and send that data back to our new node so that the new node can register
    and recognize all of the nodes that are already present inside of the network.
  prefs: []
  type: TYPE_NORMAL
- en: The `register-nodes-bulk` endpoint will be accepting data that contains the
    URLs of every node that is already present in the network. Then, we're simply
    going to register all of these network nodes with the new node.
  prefs: []
  type: TYPE_NORMAL
- en: The new node is the node on which the `register-nodes-bulk` endpoint is hit.
    This endpoint is only ever hit on a new node that's being added to our network.
  prefs: []
  type: TYPE_NORMAL
- en: To build the `register-nodes-bulk` endpoint, we'll have to make an assumption
    that all of the node URLs that are currently in our network are being passed in
    as data, and that we can access them on the `req.body.allNetworkNodes` property.
    This is because we're sending in the `allNetworkNodes` data when we call this
    endpoint in the `Promise.all(regNodesPromise)` block. Over here, we're sending
    in `allNetworkNodes` to the `register-nodes-bulk` endpoint. This will give us
    access to the `allNetworkNodes` data inside of the endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add the following line of code to our `register-nodes-bulk` endpoint
    that we created in the previous sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s loop through every node URL present in the `allNetworkNodes` array
    and register it with the new node, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all we''re going to do inside of the loop is register each network node
    URL with the current node that we''re on, which is the new node being added to
    the network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: What's happening in the preceding highlighted line of code is that as we cycle
    through all the network nodes with our `forEach` loop, we are registering each
    one by pushing that `networkNodeUrl` into our `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we hit the `/register-nodes-bulk` endpoint, we are on the new node that's
    being added to the network. All of these `networkNodeUrls` are being registered
    to the new node that we are adding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now there are a couple of instances in which we do not want to add a `networkNodeUrl`
    to our `networkNodes` array. To handle these instances, we are going to use an
    if statement. But before that, we need to define a conditional statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: One reason that we would not want to add a `networkNodeUrl` to our `networkNodes`
    array is if this `networkNodeUrl` already exists in our `networkNodes` array;
    that's what we have mentioned in the conditional statement.
  prefs: []
  type: TYPE_NORMAL
- en: All this statement is doing is testing to see if the `networkNodeUrl` that we're
    on is present inside of our `networkNodes` array. From here, it will simply evaluate
    this as either true or false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can add the `nodeNotAlreadyPresent` variable and the if statement, as highlighted 
    in the following code :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The preceding if statement states that if the node is not already present inside
    of our `networkNodes` array, then we're going to register that node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, another instance in which we would not want to register a network node
    is if that network node has the same URL as the network node that we are currently
    on. To handle this, we''ll have to make another variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add this variable to our `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Basically, all we're stating in the `if` statement is that as we cycle through
    each network node that we're adding, if that node is not already present in our
    network node array and if that node is not our current node's URL, then we want
    to add the `networkNodeUrl` to our `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have completed the `forEach` loop, we''ll have registered all of the
    network nodes that are already present inside of our blockchain network. All we
    have to do at this point is send back a response, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Let's quickly review what we have done so far. The endpoint that we've built
    is accepting all of the network nodes as data, and then we are cycling through
    all of the network nodes that are already present in our blockchain network. For
    each node, as long as it is not already registered with the `currentNode` and
    is not the same URL as the `currentNode`, we are going to add the node to our
    `networkNodes` array.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /register-nodes-bulk endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to test our `register-nodes-bulk` endpoint to
    make sure that it works properly. This will allow us to gain a clear understanding
    of how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: To test the endpoint, we are going to head over to Postman. Here, we'll hit
    the `localhost:3001/register-nodes-bulk` endpoint.  When we test this endpoint,
    we expect to receive some data, which is the `allNetworkNodes` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consequently, in the body tab inside Postman, with the raw option and JSON
    (application/json) format selected for the text, add the following lines of code
    to the body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of this array, there are going to be the URLs of all of the nodes that
    are already present in our blockchain network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: When we run this request now, we should register all three of these URLs with
    our node that's running on `localhost:3001`. Let's see if that works. Click on
    the Send button and you will receive a response that states Bulk registration
    successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if we head over to the browser, we can double check that it worked. In
    the address bar, type `localhost:3001/blockchain` and then press *Enter*. You
    will get to observe the three URLs that were added inside of `networkNodes` array,
    since those are bulk registered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e1a0bbc-6040-460b-9646-cf19e3c289e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can try experimenting by adding new nodes to the other nodes
    on different URLs. You'll get to observe the similar response in the `networkNodes`
    array of these nodes.
  prefs: []
  type: TYPE_NORMAL
- en: So, it looks like our `register-node-bulk` endpoint is working just as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Testing all of the network endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From what we have learned in the preceding section,  we know that our `register-node`
    route and that the `register-nodes-bulk` route are both working correctly. So,
    in this section, let's put it all together and test our `register-and-broadcast-node`
    route, which uses the both the `register-node` route and the `register-nodes-bulk`
    route.
  prefs: []
  type: TYPE_NORMAL
- en: The `register-and-broadcast-node` endpoint will allow us to build a decentralized
    blockchain network by allowing us to create a network and add new nodes to it.
    Let's jump right into our first example to get a better understanding of it. To
    understand how the `register-and-broadcast-node` route works, we'll make use of 
    Postman.
  prefs: []
  type: TYPE_NORMAL
- en: In the Postman application, we want to make a post request to register and broadcast
    the node on `localhost:3001`. However, before we do that, just make sure that
    all four nodes are running so that we can test the routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we have no network at all; we just have five individual nodes
    running, but they are not connected in any way. Therefore, the first call that
    we''re going to make is simply going to connect two nodes together to form the
    beginnings of our network. We will now register a node with our node that''s hosted
    on port `3001`. When we hit the `register-and-broadcast-node` endpoint, we must
    send in a `newNodeUrl` that we want to register. In Postman, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'For this first test, we want to register our second node hosted on port `3002`
    with our first node. To do that, we will add the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we make this request, it should register our node that''s hosted
    on `localhost:3002` with our node that''s hosted on `localhost:3001`. Let''s verify
    this by clicking the Send button. You will see an output similar to what''s shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/719bee39-e7d4-4552-9b50-cd0c070994bd.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the new node has been registered
    successfully with the network. Let's verify this by going to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the browser, you will have access to all five nodes that are running. We
    have now registered the node on port `3002` with the node  hosted on `localhost:3001`.
    So, if we refresh the page on the browser now, we''ll get to observe that `localhost:3002`
    has been registered in the `networkNodes` array of port `3001`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec380a6e-515f-4e6d-a627-9c42a1c50b87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can see that we''ve registered `localhost:3002`.
    Now, if we go to `localhost:3002`, we should have `localhost:3001` registered
    in its `networkNodes` array. Let''s refresh and see what we get here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b260a295-1f23-477d-90b5-046958542553.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that both nodes have now formed a
    network and registered each other as a network node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add another node to this network. Let''s head back to Postman
    and change the `localhost:3002` to `localhost:3003`. We''re going to make a request
    to the node that is on `3001`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'What this should do is register our node that''s hosted on `localhost:3003`
    with all the other nodes in the network. So, `3003` should register with `3001`
    and `3002`. Let''s send this request and see if it works. If it''s successfully
    registered, you will see an output similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/835f911b-b92d-46a7-ac78-6ef5f8f25530.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s verify this in our browser. When we refresh in the `localhost:3001`, we
    should have `localhost: 3003` inside of the `networkNodes` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc8bbbbe-1f83-4a38-8369-62c7b9dca2cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, since `localhost:3002` is also part of the network, it should have `localhost:3003`
    inside of the `networkNodes` array. When we made this request, we made it to `3001`
    not `3002`. Localhost `3002 `was already part of the network, and the broadcast
    registered `3003` with all the network nodes that are present in the network.
    To verify this, refresh the `networkNodes` array on `3002`. You will see an output
    similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8980a924-52f1-41b1-9ca1-2956b5d55f59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we can see that we have our third node inside
    of the `localhost:3002` `networkNodes` array as well now. Furthermore, if we go
    over to the `networkNodes` on `localhost:3003` and refresh the page,  we should
    have both `3001` and `3002` inside of the `networkNodes` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d8d197b-0d69-4ab6-acd0-d967272e99b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Consequently, we now have a network comprised of our nodes on `3001`, `3002`,
    and `3003`. These are registered with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's head back to Postman and register the remaining `localhost:3004`
    and `localhost:3005` with the network by following the same procedures that we
    followed to register the initial nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After registering both `3004` and `3005` with the network, if you go to the
    browser, all of these registered nodes should have `localhost:3004` and `localhost:3005`
    inside of their `networkNodes` array. Refresh the `localhost:3001` page and you
    see an output similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64d347a1-5324-4e30-918f-851087536f20.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, if you refresh the other pages, you will get to observe all the nodes,
    similar to what we observed in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: So, this is how we've built up a decentralized network that is comprised of
    five different nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you might be wondering how all of this is working. It''s working because
    when we make a `"newNodeUrl": "http://localhost:3004"` request, we are actually
    adding a command to add `3004` to the network. But then how does `localhost:3004`
    become aware of the entire network from one request?'
  prefs: []
  type: TYPE_NORMAL
- en: If you remember from the preceding sections, when we built the `/register-and-broadcast-node`
    endpoint, there was actually a lot of calculations going on. So, if we take a
    look at the `/register-and-broadcast-node` endpoint code, we can see that the
    first thing that happens inside of our `register-and-broadcast-node` endpoint
    is that we take in the `newNodeUrl` and then broadcast it to every single node
    in the network by hitting their `register-node` endpoint. So, every node in the
    network will become aware of the new node that's being added.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the complete code, please visit [https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/networkNode.js](https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/networkNode.js) and
    refer to the code block which starts with this comment: `//registering a node
    and broadcasting it the network`.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, after the broadcast takes place, we send the request to the new node that
    was just added and register all of the network nodes that are already present
    in the network with the new node. This is where the reverse registration takes
    place. At this point, all of the original nodes in the network are aware of the
    new node, and the new node is aware of all the other nodes in the network. Thus,
    all of the nodes inside of the network become aware of each other, which is what
    needs to happen for our blockchain to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: So, all three of the endpoints (`register-and-broadcast-node`, `register-node`,
    and `register-nodes-bulk`) that we built are very powerful because they work together
    to create a decentralized blockchain network. This is what we have built in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: At this point in the book, it is recommended that you to take some time to play
    around with these endpoints a little bit, making different networks with different
    nodes, and testing it a little bit more to get more familiar with how it's all
    working.
  prefs: []
  type: TYPE_NORMAL
- en: If you are confused about any of the concepts or topics we've covered, it is
    recommend that you once again read through all of the sections in this chapter.
    You'd be surprised how much you can learn and pick up the second time around after
    you already have some context for what is going to be happening and what we're
    going to be building.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now finished creating our decentralized network. In this chapter, we
    learned about a lot of new concepts. We began our journey by learning about how
    to create the multiple instances of our API and how to use them to set up our
    decentralized network. We then defined various endpoints such as `register-and-broadcast-node`,
    `register-node`, and `register-nodes-bulk`. After this, we built these endpoints
    and tested them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to synchronize the network.
  prefs: []
  type: TYPE_NORMAL
