- en: '*Chapter 7*: Working with kubectl Plugins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to do various operations with `kubectl`,
    such as listing nodes and pods and checking logs. In this chapter, let's learn
    how to extend the `kubectl` command base with plugins. `kubectl` has many commands
    but might not always have the ones you want, and, in such instances, we need to
    use plugins. We will learn how to install `kubectl` plugins in order to have more
    features with extra sub-commands. We will see how to use those plugins, and finally,
    we will see how we can create a basic plugin for `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating basic plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A plugin in `kubectl` is just an executable file (it could be a complied Go
    program or a Bash shell script, among other things) the name of which begins with
    `kubectl-`, and to install the plugin you just have to put its executable file
    in a directory that's in your `PATH` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to find and install plugins is by using **Krew** ([https://krew.sigs.k8s.io/](https://krew.sigs.k8s.io/)),
    the Kubernetes plugin manager. Krew is available for macOS, Linux, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Krew is a Kubernetes plugin, so let''s go ahead and install it. For this example,
    we are going to use macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: To install Krew on macOS, run the `$ brew install krew` command as shown in
    the following screenshot:![Figure 7.1 – krew install with brew on macOS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16411_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – krew install with brew on macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to download the plugin list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When we have a locally cached list of all the plugins, let's check for available
    plugins by running the `$ kubectl krew search` command as shown in the following
    screenshot:![Figure 7.2 – List of available plugins
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16411_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – List of available plugins
  prefs: []
  type: TYPE_NORMAL
- en: As the list has more than 90 plugins, in the preceding screenshot we are just
    showing only part of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install a few handy plugins to expand the `kubectl` command base by
    running the `$ kubectl krew install ctx ns view-allocations` command as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Installing plugins using Krew'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Installing plugins using Krew
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, installing `kubectl` plugins is so easy.
  prefs: []
  type: TYPE_NORMAL
- en: Using plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we have installed a few very useful plugins. Let's check out how to use
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have installed three plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl ctx`: This plugin allows us to easily to switch between Kubernetes
    clusters, which is very useful when you have more than one cluster set in your
    `kubeconfig`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lets'' check for available cluster by running the `$ kubectl ctx` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The ctx plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – The ctx plugin
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl ns`: This plugin allows us to switch between namespaces. Let''s check
    for available namespaces in the cluster by running the `$ kubectl ns` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The ns plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – The ns plugin
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl view-allocations`: This plugin lists resource allocations of a namespace,
    such as CPU, memory, storage, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check for resources allocations in the cluster by running the `$ kubectl
    view-allocations` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The view-allocations plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_07_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – The view-allocations plugin
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the preceding list that using plugins looks as though these sub-commands
    are a part of `kubectl` tool itself.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let''s create a simple plugin called `toppods` to show Kubernetes
    cluster nodes. It is just a very simple example of how to create the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create a simple `bash`-based plugin named `kubectl-toppods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s copy the `kubectl-toppods` file to the `~/bin` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure it is executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try to run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Nice! You can see that the plugin is working, and it is not very difficult to
    create a `kubectl` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to install, use, and create `kubectl` plugins.
    It is useful to know how to expand `kubectl` with existing plugins, and how to
    create your ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have learned about a few very handy and useful `kubectl` plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ctx`: Allows us to switch between Kubernetes clusters very easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ns`: Allows us to switch between namespaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view-allocations`: Shows a list of allocations for resources in the cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you work daily with multiple Kubernetes clusters and namespaces, using
    the `ctx` and `ns` plugins will save a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we going to learn how to deploy applications using Kustomize.
  prefs: []
  type: TYPE_NORMAL
