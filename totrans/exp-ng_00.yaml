- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learn how to build great applications with the Angular framework for any deployment
    target--be it mobile, desktop, or native apps.
  prefs: []
  type: TYPE_NORMAL
- en: The book covers everything that is required to write modern, intuitive, and
    responsive applications.
  prefs: []
  type: TYPE_NORMAL
- en: The book covers concepts and fundamentals along with detailed code snippets
    and examples that will help you jump-start and open up new ideas by learning the
    Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: The chapters in the book cover topics that will help any developer pick up Angular
    programming skills easily. At the same time, experienced and seasoned developers
    will learn master the skillset of migrating from the existing AngularJS framework
    and also learn advanced techniques and best practices covered throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Along with great functionality, any application heavily relies on design aspects
    as well. The book will introduce you to and help you sharpen your design skills
    with Material Design and Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to write and create reusable, testable, and maintainable services,
    forms, pipes, async programming, animations, routing, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Did we say testable? You bet. The book introduces you to Jasmine and the Protractor
    framework. While learning about the frameworks, we will learn to write unit test
    scripts using Jasmine and also end-to-end test scripts using the Protractor framework.
  prefs: []
  type: TYPE_NORMAL
- en: The journey of learning and mastering Angular skills will be fun, thought-provoking,
    and above all easy. Step-by-step guides helps users to implement the concepts
    in your applications and projects.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ce100032-6082-4f73-94af-b50a56f63334.xhtml), *Architectural Overview
    and Building a Simple App in Angular*, explains Angular architecture, the basics
    of TypeScript, and also how to create a simple Angular application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](7c26d86c-e80b-49b7-94f6-7411a826a1ad.xhtml), *Migrating AngularJS
    App to Angular App*, shows how to migrate an AngularJS application to Angular
    4, and we will also discuss best practices in migrating the application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](b65ec279-6cf8-4889-97d1-6e3e47519c30.xhtml), *Using Angular CLI
    to Generate Angular Apps with Best Practices*, shows how to use Angular command-line
    interface to generate boilerplate code for an Angular application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ffd90f48-2aef-462a-9d96-35e182ce3db9.xhtml), *Working with Components*,
    discusses the life cycle of components. We will learn how to implement multiple
    and container components and also the interactions between different components.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](57d46335-212e-47fc-b817-828b7f684476.xhtml), *Implementing Angular
    Routing and Navigation*, shows how to create routing strategies and routes for
    our Angular applications. We will learn the building blocks of routing, create
    routes, child routes, and secure routes using route guards. States are an important
    aspect in routing. We will implement states to make secure, multi-state application
    routes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml), *Creating Directives
    and Implementing Change Detection*, explains directives, different types of directive
    provided by Angular, and also how to create custom user-defined directives. We
    will deep dive into learning how Angular handles change detection and how we can
    utilize change detection in our apps.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous Programming
    Using Observables*, shows how to take advantage of asynchronous programming with
    Angular by using Observable and Promises. In addition, we learn how to built a
    basic yet extensible asynchronous JSON API for querying the Marvel cinematic universe.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](1dfecab5-25d2-47a0-88a2-eac2cece692e.xhtml), *Template and Data
    Binding Syntax*, discusses the template syntax for writing expressions, operators,
    attributes, and attaching events to elements. Data binding is one of the key features
    that allows data mapping from data source to view target and vice versa. Additionally,
    we will also learn different ways of data binding and create lot of examples along.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml), *Advanced Forms in
    Angular*, explains how to use and master reactive forms. We tackle the reactive
    part of reactive forms by emphasizing the relationship between your HTML models
    and your NgModels so every change on a given form is propagated to the model.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](847dfea0-b857-4423-84fc-e6f719237f1d.xhtml), *Material Design
    in Angular*, discusses Material Design, which is a new hype regarding design.
    In this chapter, we learn how to integrate material design with Angular. In addition,
    we learn how to use useful components such as grid and button.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](3fdebb29-fbfb-4c2e-9985-d5b7771fcffa.xhtml), *Implementing Angular
    Pipes*, explain that transforming data in the views is one of the most common
    rituals we have to do it in our applications. We will learn how to transform values
    using various built-in pipes and create our own pipes. Additionally, we will learn
    how to pass parameters and customize pipes based on our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](998d521f-cf30-4688-9763-12878fcd23e9.xhtml), *Implementing Angular
    Services*, discusses services and factories, creating Angular services, accessing
    data from components using services, and creating asynchronous services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](2636ff55-fe1e-4e22-995c-ce0f83eea7f8.xhtml), *Applying Dependency
    Injection*, explains how to create injectables, services, and provider classes
    that can be used as shared resources between various components. Additionally,
    we will learn how to create and use the objects created dynamically just-in-time
    using Inject, Provider, `useClass`, and `useValue`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](e2786f99-16cb-4d8a-9be9-bbd76a47ae76.xhtml), *Handling Angular
    Animation*, show that animations are key to designing and building beautiful user
    experiences with smooth transitions and effects. We will learn and implement examples
    using animations, transitions, states, and keyframes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](5845dd1d-b820-4049-8950-5228e0635455.xhtml), *Integrating Bootstrap
    with Angular Application*, discusses Bootstrap, which is arguably the most popular
    frontend framework out there and, in this chapter, we learn what it means to have
    an Angular x Bootstrap application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](38580b89-29c5-4657-819c-7260b6ce7ab4.xhtml), *Testing Angular
    Apps Using the Jasmine and Protractor Frameworks*, teaches the use of arguably
    the most important aspect of the software development process - testing Angular
    applications using the Jasmine and Protractor frameworks. We will start with an
    overview of each of the frameworks and then move on to the testing utilities provided
    by Angular. We will also create sample test scripts for testing Angular components
    and services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](960044b2-fecb-408d-8cff-935d194fef09.xhtml), *Design Patterns
    in Angular*, discusses Typescript, is object-oriented programming language with
    which, we can leverage decades of knowledge on object-oriented architecture. In
    this chapter, we explore some of the most useful object-oriented design patterns
    and learn how to apply them in an Angular way.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following list of softwares:'
  prefs: []
  type: TYPE_NORMAL
- en: NodeJS 6.10 or latest version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM 3.10 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good editor such as Visual Studio Code or Sublime Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser such as chrome or firefox or edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet connection to download and install node packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for JavaScript developers with some prior exposure to Angular.
    We assume that you ve got a working knowledge of HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning. Code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles are shown as follows: "Then, we go into the `advanced-forms` folder and
    prune everything that is not inside the `chap7/angular-promise` subdirectory."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Warnings or important notes appear in a box like this.Tips and tricks appear
    like this.
  prefs: []
  type: TYPE_NORMAL
