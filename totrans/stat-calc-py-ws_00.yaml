- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About the Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you looking to start developing artificial intelligence applications? Do
    you need a refresher on key mathematical concepts? Full of engaging practical
    exercises, *The Statistics and Calculus with Python Workshop* will show you how
    to apply your understanding of advanced mathematics in the context of Python.
  prefs: []
  type: TYPE_NORMAL
- en: The book begins by giving you a high-level overview of the libraries you'll
    use while performing statistics with Python. As you progress, you'll perform various
    mathematical tasks using the Python programming language, such as solving algebraic
    functions with Python starting with basic functions, and then working through
    transformations and solving equations. Later chapters in the book will cover statistics
    and calculus concepts and how to use them to solve problems and gain useful insights.
    Finally, you'll study differential equations with an emphasis on numerical methods
    and learn about algorithms that directly calculate values of functions.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you'll have learned how to apply essential statistics
    and calculus concepts to develop robust Python applications that solve business challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are a Python programmer who wants to develop intelligent solutions that
    solve challenging business problems, then this book is for you. To better grasp
    the concepts explained in this book, you must have a thorough understanding of
    advanced mathematical concepts, such as Markov chains, Euler's formula, and Runge-Kutta
    methods as the book only explains how these techniques and concepts can be implemented
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: About the Chapters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Chapter 1*, *Fundamentals of Python*, introduces you to the Python language.
    You will learn how to use Python''s most integral data structures and control
    flows, as well as picking up best practices for programming-specific tasks such
    as debugging, testing, and version control.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *Python''s Main Tools for Statistics*, introduces the ecosystem
    of scientific computing and visualization in Python. These discussions will revolve
    around the specific Python libraries that facilitate these tasks, such as NumPy,
    pandas, and Matplotlib. Hands-on exercises will help you practice their usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Python''s Statistical Toolbox*, describes the theoretical basics
    of statistical analysis. You will learn about the fundamental components in the
    field of statistics, namely the various types of statistics and statistical variables.
    This chapter also includes a brief overview of a wide range of different Python
    libraries and tools that can help to facilitate specialized tasks, such as SymPy,
    PyMC3, and Bokeh.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Functions and Algebra with Python*, discusses the theoretical
    foundation of mathematical functions and algebraic equations. These discussions
    are also accompanied by interactive exercises that present corresponding tools
    in Python that can streamline and/or automate various procedures, such as drawing
    function graphs and solving equations and systems of equations.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *More Mathematics with Python*, teaches you the basics of sequences,
    series, trigonometry, and complex numbers. While these can prove to be challenging
    theoretical topics, we will consider them from a different practical perspective,
    specifically via practical applications such as financial analysis and 401(k)/retirement calculations.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Matrices and Markov Chains with Python*, introduces you to the
    concepts of matrices and Markov chains. These are mathematical objects commonly
    used in some of the most popular applications of mathematics, such as artificial
    intelligence and machine learning. The chapter is coupled with the hands-on activity
    of developing a word predictor.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Doing Basic Statistics with Python*, marks the start of the portion
    of this book where we specifically focus on statistics and statistical analysis.
    This chapter introduces the process of exploratory data analysis and, in general,
    using simple statistical techniques to interpret a dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Foundational Probability Concepts and Their Applications*, dives
    deeper into complex statistical concepts, such as randomness, random variables,
    and using simulations as a technique to analyze randomness. This chapter will
    help you become more comfortable working with statistical problems that involve
    randomness.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Intermediate Statistics with Python*, wraps up the topic of statistics
    by iterating over the most important theories in the field, such as the law of
    large numbers and central limit theorem, as well as commonly used techniques,
    including confidence intervals, hypothesis testing, and linear regression. With
    the knowledge you''ll gain in this chapter, you will be ready to tackle many real-life
    statistical problems using Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Foundational Calculus with Python*, begins the topic of calculus
    by discussing more involved concepts, such as the slope of a function, the area
    under a curve, optimization, and solids of revolution. Typically considered as
    complicated problems in mathematics, these concepts are explained in an intuitive
    and hands-on manner with the help of Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *More Calculus with Python*, tackles more complex topics in calculus,
    namely, the calculation of arc lengths and surface areas, partial derivatives,
    and series expansions. Once again, we will be able to see the power of Python
    in helping us approach these advanced topics, which normally can be quite challenging
    for many students.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *Intermediate Calculus with Python*, concludes the book with
    some of the most interesting topics in calculus, such as differential equations,
    the Euler method, and the Runge-Kutta method. These methods present an algorithmic
    approach to solving differential equations, which is particularly applicable in
    Python as a computational tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"To do this, we can use the `with` keyword together with the `open()` function
    to interact with the text file."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In some cases, a line of code is immediately followed by its output. These
    cases are presented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the executed code is the line which begins with `>>>`, and
    the output is the second line (`6`).
  prefs: []
  type: TYPE_NORMAL
- en: In other cases, the output is shown separately from the code block, for ease
    of reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Words that you see on the screen, for example, in menus or dialog boxes, also
    appear in the text like this: "When you click on the `Fetch Images` button, the
    images appear with authors'' names."'
  prefs: []
  type: TYPE_NORMAL
- en: 'New terms and important words are shown like this: "Write the returned list
    to the same input file in a new line in the same **comma-separated values** (**CSV**)
    format".'
  prefs: []
  type: TYPE_NORMAL
- en: Code Presentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lines of code that span multiple lines are split using a backslash ( `\` ).
    When the code is executed, Python will ignore the backslash, and treat the code
    on the next line as a direct continuation of the current line.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Comments are added into code to help explain specific bits of logic. Single-line
    comments are denoted using the `#` symbol, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Multi-line comments are enclosed by triple quotes, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we explore the book in detail, we need to set up specific software and
    tools. In the following section, we shall see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Software Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ll also need the following software installed in advance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS: Windows 7 SP1 64-bit, Windows 8.1 64-bit or Windows 10 64-bit, macOS, or
    Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Browser: Latest version of Google Chrome, Firefox, or Microsoft Edge'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation and Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start this book, you will need to install Python (3.7 or above) and
    Jupyter, which are the main tools that we will be using throughout the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best method to install Python is via the environment manager Anaconda, which
    can be downloaded from [https://docs.anaconda.com/anaconda/install/](https://docs.anaconda.com/anaconda/install/).
    Once Anaconda has been successfully installed, you can follow the instructions
    at [https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)
    to create a virtual environment for this project within which Python can be run.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike other methods of installing Python, Anaconda offers an easy-to-navigate
    interface that also takes care of most low-level processes when Python and its
    libraries are to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Following the instructions above, you can create a new environment named `workshop`
    using the command `conda create -n workshop python=3.7`. To activate the new environment,
    run `conda activate workshop`. For the next steps, you will need to activate this
    environment every time you need to test the code.
  prefs: []
  type: TYPE_NORMAL
- en: In this workshop, every time a new library is used that has not already been
    installed, that library can be installed using the `pip install [library_name]`
    or `conda install [library_name]` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Project Jupyter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Project Jupyter is open source, free software that gives you the ability to
    run code written in Python and some other languages interactively from a special
    notebook, similar to a browser interface. It was born in 2014 from the **IPython**
    project and has since become the default choice for the entire data science workforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Jupyter Notebook inside the `workshop` environment, just run
    `conda install -c conda-forge notebook`. For more information about Jupyter installation,
    go here: [https://jupyter.org/install](https://jupyter.org/install).'
  prefs: []
  type: TYPE_NORMAL
- en: At [https://jupyterlab.readthedocs.io/en/stable/getting_started/starting.html](https://jupyterlab.readthedocs.io/en/stable/getting_started/starting.html),
    you will find all the details you need to know how to start the Jupyter Notebook
    server. In this book, we use the classic notebook interface.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we start a notebook from the Anaconda Prompt with the `jupyter notebook`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Start the notebook from the directory where you choose to download the code
    files to in the following *Installing the Code Bundle* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have installed the files in the macOS directory `/Users/YourUserName/Documents/`
    `The-Statistics-and-Calculus-with-Python-Workshop`, then in the CLI you can type
    `cd /Users/YourUserName/Documents/The-Statistics-and-Calculus-with-Python-Workshop`
    and run the `jupyter notebook` command. The Jupyter server will start and you
    will see the Jupyter browser console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 0.1: Jupyter browser console'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15968_Preface_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.1: Jupyter browser console'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are running the Jupyter server, click on `New` and choose `Python
    3`. A new browser tab will open with a new and empty notebook. Rename the Jupyter
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 0.2: Jupyter server interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15968_Preface_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.2: Jupyter server interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main building blocks of Jupyter notebooks are cells. There are two types
    of cells: `In` (short for input) and `Out` (short for output). You can write code,
    normal text, and Markdown in `In` cells, press *Shift* + *Enter* (or *Shift* +
    *Return*), and the code written in that particular `In` cell will be executed.
    The result will be shown in an `Out` cell, and you will land in a new `In` cell,
    ready for the next block of code. Once you get used to this interface, you will
    slowly discover the power and flexibility it offers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start a new cell, by default, it is assumed that you will write code
    in it. However, if you want to write text, then you have to change the type. You
    can do that using the following sequence of keys: *Esc* | *M* | *Enter*. This
    will convert the selected cell to the **Markdown** (**M**) cell type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 0.3: Jupyter Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15968_Preface_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.3: Jupyter Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: When you are done with writing some text, execute it using *Shift* + *Enter*.
    Unlike the case with code cells, the result of the compiled Markdown will be shown
    in the same place as the `In` cell.
  prefs: []
  type: TYPE_NORMAL
- en: To get a *cheat sheet* of all the handy key shortcuts in Jupyter, go to [https://packt.live/33sJuB6](https://packt.live/33sJuB6).
    With this basic introduction, we are ready to embark on an exciting and enlightening
    journey.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pip` comes pre-installed with Anaconda. Once Anaconda is installed on your
    machine, all the required libraries can be installed using `pip`, for example,
    `pip install numpy`. Alternatively, you can install all the required libraries
    using `pip install –r requirements.txt`. You can find the `requirements.txt` file
    at [https://packt.live/3gv0zhb](https://packt.live/3gv0zhb).'
  prefs: []
  type: TYPE_NORMAL
- en: The exercises and activities will be executed in Jupyter Notebooks. Jupyter
    is a Python library and can be installed in the same way as the other Python libraries
    – that is, with `pip install jupyter`, but fortunately, it comes pre-installed
    with Anaconda. To open a notebook, simply run the command `jupyter notebook` in
    the Terminal or Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Code Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the complete code files of this book at [https://packt.live/3kcWZe6](https://packt.live/3kcWZe6).
    You can also run many activities and exercises directly in your web browser by
    using the interactive lab environment at [https://packt.live/2PpqDOX](https://packt.live/2PpqDOX).
  prefs: []
  type: TYPE_NORMAL
- en: We've tried to support interactive versions of all activities and exercises,
    but we recommend a local installation as well for instances where this support
    isn't available.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any issues or questions about installation, please email us at `workshops@packt.com`.
  prefs: []
  type: TYPE_NORMAL
