- en: Piping and I/O Redirection
  prefs: []
  type: TYPE_NORMAL
- en: One of the main principles in Linux is that *E**ach program does one thing well* and
    thus, every Linux command is designed to accomplish a single task efficiently.
    In this chapter, you will learn how to use Linux pipes to unleash the real power
    of Linux commands by combining their functionality to carry out more complex tasks.
    You will also learn about I/O (input/output) redirection, which will enable you
    to read user input and save command output to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Linux pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Linux, you can use a pipe to send the output of one command to be the input
    (argument) of another command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb57d2c1-6ca4-4c4f-aac2-f12da4d9ecb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 – A Linux pipe
  prefs: []
  type: TYPE_NORMAL
- en: A pipe is represented by the vertical bar character on your keyboard. Linux
    pipes are very useful as they allow you to accomplish a relatively complex task
    in an easy way, and throughout the book, you will see that they come in handy
    very often.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do an example, let''s first rename the `hard.txt` file to `facts.txt`,
    as we removed the `facts.txt` file back in [Chapter 6](10bdcc42-aeaf-493a-8c23-9fa33f778424.xhtml),
    *Hard vs. Soft Links*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s use the `head` command to view the first five lines of `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now I want to display only the fifth line `Sky is high.` of the file `facts.txt`;
    how can I do that?
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s where the power of Linux pipes comes into play. If you pipe the output
    of the previous command to the `tail -n 1` command, you will get the fifth line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So by using a pipe, I was able to send the output of the command `head -n 5
    facts.txt` to the input (argument) of the command `tail -n 1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do another example. If you want to display the seventh line of the file
    `facts.txt`, then you will show the first seven lines using the `head` command,
    then use a pipe to `tail` the last line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use more than one pipe at a time as demonstrated in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6eb7018e-8a8e-499a-8308-651eea5d1b14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Two pipes'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you already know that the `lscpu` command displays your processor
    information. The fourth line of the `lscpu` command output shows how many CPUs
    your machine has. You can display the fourth line of the `lscpu` command by using
    two pipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So let''s break down what happened here. The first pipe we used was to show
    the first four lines of the `lscpu` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We then used the second pipe to `tail` the last line, which gets us the fourth line
    in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can similarly display the second line of `lscpu`, which shows your CPU operation
    modes, but I will leave that for you to do as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Input and output redirection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will get to learn one of the coolest Linux features, which
    is I/O (input/output) redirection. Most Linux commands work with three different
    streams of data:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard input (also referred to as `stdin`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard output (also referred to as `stdout`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard error (also referred to as `stderr`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the commands we have discussed so far produce some output. This output
    is sent to a special file called standard output (also referred to as `stdout`).
    By default, the standard output file is linked to the terminal, and that's why
    every time you run a command, you see the output on your terminal. Also, sometimes
    commands will produce error messages. These error messages are sent to another
    special file called standard error (also referred to as `stderr`), and it's also
    linked to the terminal by default.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting standard output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You know that running the `date` command will display the current date on your
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now by using the greater than sign `>`, you can redirect the output of the
    `date` command to a file instead of your terminal! Have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is no output displayed on your screen! That''s because
    the output got redirected to the file `mydate.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool! Let''s try some more examples. You can print a line on your terminal
    with the `echo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to redirect the output to a file named `planets.txt`, you can run
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Notice that the file `planets.txt` was also created in the process.
    Now let''s add more planets to the file `planets.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Hmmm. We added the line "Saturn is a planet." but the line "Mars is a planet."
    is now removed! That''s because redirecting standard output with `>` overwrites
    the file. What we need in this case is to append to the file and this can be done
    by using a double greater than sign `>>`. So now let''s append the line "Mars
    is a planet." back to the file `planets.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! As you can see, it added the line "Mars is a planet." to the end of
    the file. Let''s append one more planet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! One more thing you need to know here is that the standard output (`stdout`)
    is linked to file descriptor 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A FILE DESCRIPTOR?**'
  prefs: []
  type: TYPE_NORMAL
- en: A file descriptor is a number that uniquely identifies an open file in a computer's
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'And so running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Is the same as running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `1` in `1>` references file descriptor 1 (`stdout`).
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting standard error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will get an error message if you try to display the contents of a file
    that doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this error message comes from standard error (`stderr`). If you try to
    redirect errors the same way we did with the standard output, it will not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it still displays the error message on your terminal. That''s
    because `stderr` is linked to file descriptor 2\. And thus, to redirect errors,
    you have to use `2>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you displayed the contents of the file `error.txt`, you would see the
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to remove a file that doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This also produces an error message. We can append this error message to the
    file
  prefs: []
  type: TYPE_NORMAL
- en: '`error.txt` using `2>>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you display the contents of the file `error.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You will see both error messages.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting all output to the same file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some situations where you can get both standard output and an error
    message at the same time. For example, if you run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You will see that it displayed the contents of the file `planets.txt`, but it
    also displayed an error message at the very last line (because there is no file
    `blabla` to concatenate).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose to redirect the error to another file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, you only see the standard output on the screen. Or you may choose
    to redirect the standard output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, you only see the error on the screen. Now, what if you want to redirect
    both the standard output and the error to the same file? In this case, you have
    to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`&1` is referencing the standard output while `2>` is referencing the standard
    error. So what we are basically saying here is: "Redirect the stderr to the same
    place we are redirecting the stdout."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you displayed the contents of the file `all.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can see it includes both the `stdout` and `stderr`.
  prefs: []
  type: TYPE_NORMAL
- en: Discarding output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you don''t need to redirect output to anywhere; you just want to
    throw it away and get rid of it. In this case, you can redirect the output to
    `/dev/null`. This is often used with error messages. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will redirect the error message to `/dev/null`. You can think of `/dev/null`
    as a garbage collector.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting standard input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some Linux commands interact with the user input through the standard input
    (which is your keyboard by default). For example, the `read` command reads input
    from the user and stores it in a variable. For example, you can run the command
    `read weather`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It will then wait for you to enter a line of text. I entered the line `It is
    raining.` and so it stored the line in the `weather` variable. You can use the
    `echo` command to display the contents of a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that you have to precede the variable name with a dollar sign. The `read`
    command is particularly useful in shell scripts, which we will cover later on.
    Now notice I wrote the line `It is raining.` using my keyboard. However, I can
    redirect standard input to come from a file instead using the less-than sign `<`,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This will read the contents of the file `mydate.txt` and store it in the `message`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the variable `message` now has the same contents as the file
    `my- date.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Display only the *5th* line of the file `facts.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the output of the `free` command into a file named `system.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Append the output of the `lscpu` command to the file `system.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the command `rmdir /var` and redirect the error message to the file `error.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
