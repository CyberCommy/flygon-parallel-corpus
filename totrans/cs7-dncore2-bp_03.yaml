- en: Cross Platform .NET Core System Info Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be creating a simple *Information Dashboard* application
    that displays information about the computer we are running on as well as the
    weather conditions at the location of that machine. This is done using the IP
    address, and while perhaps not 100% accurate (seeing as the location given for
    me was a town or so away), the concept I want to prove here is not location accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding the application we''re creating, we will be doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a look at the `Startup.cs` file and adding controllers and views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application on macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and running the application on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter is all about what ASP.NET Core is. For those of you who don't know,
    .NET Core allows us to create applications that will run on Windows, macOS, and
    Linux.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Core includes ASP.NET Core and EF Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft defines ASP.NET Core as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"ASP.NET Core is a cross-platform, high-performance, open-source framework
    for building modern, cloud-based, Internet-connected applications."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, .NET Core is open source. You can find it on GitHub at—[https://github.com/dotnet/core](https://github.com/dotnet/core).
    The benefits of using .NET Core are listed on the document site—[https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/).
    These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A unified story for building web UI and web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration of modern client-side frameworks and development workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cloud-ready, environment-based configuration system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lightweight, high-performance, and modular HTTP request pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to host on **IIS** (**Internet Information Services**) or self-host
    in your own process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can run on .NET Core, which supports true side-by-side app versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tooling that simplifies modern web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to build and run on Windows, macOS, and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source and community-focused
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I encourage you to have a look at the Microsoft document site for this topic
    at—[https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/).
  prefs: []
  type: TYPE_NORMAL
- en: In reality, ASP.NET Core includes just the NuGet packages applicable to your
    project. This means smaller and better-performing applications. The use of NuGet
    will become evident in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's get to it. Let's create our first cross-platform ASP.NET Core MVC
    application next.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is set up .NET Core 2.0 on our development machine.
    For the purposes of this book, I am using a Windows PC to illustrate this step
    but, in reality, you would be able to set up a .NET Core application on macOS
    or on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: I will be illustrating how to set up .NET Core on Linux later on in this chapter.
    The process is similar for macOS, but I find that it is a bit trickier on Linux.
    Therefore, I have opted to show this step by step for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS, I will show you how to run this application created on a Windows
    PC. This is the true beauty of .NET Core. It is a truly cross-platform technology
    capable of performing flawlessly on any of the three platforms (Windows, macOS,
    and Linux):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your browser to [https://www.microsoft.com/net/core](https://www.microsoft.com/net/core)
    and download the .NET Core SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96908c83-5395-4f3b-86e3-dda1b45b6af5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The installation is also quite straightforward. If you have a look at this
    screen, you will notice similarities between this and the Linux installation.
    Both have a note that informs you that it will run a command during the installation
    process to improve the project restore speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01c16d8d-5324-4943-a661-1fcc7cd38ffa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation is complete, you will find some links to resources,
    documentation, tutorials, and release notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee852623-3c0e-43c8-b119-6a6a57b7bf9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Start Visual Studio and create a new ASP.NET Core Web Application. Also, select
    .NET Framework 4.6.2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d128c41-30b5-4433-a094-a294ede6f7f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select the Web Application (Model-View-Controller**)**
    from the templates and ensure that you have selected ASP.NET Core 2.0\. When you
    are ready, click on the OK button to create your ASP.NET Core project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77f9efc7-3da3-460e-a758-8e931920f2f9.png)'
  prefs: []
  type: TYPE_IMG
- en: After your project is created, you will see the familiar MVC structure in Solution
    Explorer. The Model-View-Controller architectural pattern takes a bit of getting
    used to, especially if you are a web developer coming from the traditional ASP.NET
    Web Forms approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'I guarantee you that after a while of working with MVC, you will not want to
    go back to ASP.NET Web Forms. Working with MVC is a lot of fun and in many ways
    more rewarding, especially if this is still all new to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3da47bd2-8afa-47db-a2a0-d084d240f0ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the application is now, you can run it by holding down *Ctrl *+ *F5* or
    hitting the debug button in Visual Studio. When the application starts up, the
    browser will display the standard view for your MVC application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55f91ff8-2bc4-4181-8243-c85ba648a3df.png)'
  prefs: []
  type: TYPE_IMG
- en: Stop the debug session and right-click on the project in Solution Explorer.
    From the context menu that pops up, click on ManageNuGetPackages**...**, which
    will open the NuGet form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first NuGet package we are going to add is `Newtonsoft.Json`. This is to
    enable us to work with JSON in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Install button to add the latest version to your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/712f18a2-9b07-4d54-b714-934e92d39ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: The next NuGet package we are going to add is called `DarkSkyCore`. This is
    a .NET Standard library for using the Dark Sky API.
  prefs: []
  type: TYPE_NORMAL
- en: I can already see the question marks popping up at the statement a .NET Standard
    library. We are dealing with .NET Core here, right? What, then, is the .NET Standard?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following website (.NET Core Tutorials) explains it really well ([https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/](https://dotnetcoretutorials.com/2017/01/13/net-standard-vs-net-core-whats-difference/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"If you write a library that you want working on .net Core, UWP, Windows Phone
    and .net Framework, you will need to only use classes that are available on all
    of those platforms. How do you know what classes are available on all platforms?
    The .net Standard!"'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET Standard is exactly that, a standard. If you want to target more platforms,
    you need to target a lower version of the standard. If you want more APIs available
    to you, you need to target a higher version of the standard. There is a GitHub
    repository, [https://github.com/dotnet/standard](https://github.com/dotnet/standard),
    that you can check out, and for a handy chart that shows you which version of
    each platform implements each version of the standard, swing over to—[https://github.com/dotnet/standard/blob/master/docs/versions.md](https://github.com/dotnet/standard/blob/master/docs/versions.md)
    and check it out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to `DarkSkyCore`. Click on the Install button to get the latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5da45e25-a948-46e4-bf5b-5d32da6fa99d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our NuGet packages in place, let's have a look at the project
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The project in detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking at the project after I have added all the required resources, controllers,
    views, and models, you will notice that I have added some extra folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'My solution will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_docs` (marked **1** in the following screenshot): A personal preference of
    mine is to keep a folder where I can make notes and keep relevant links I find
    useful for the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`climacons`(**2**): This is the folder containing the SVG files that will serve
    as the weather icon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InformationController`(**3**): This is the controller for the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InformationModel`(**4**): This is the model for the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetInfo`(**5**): This is the view corresponding to the `GetInfo()` method
    on my controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from the `Models`, `Views`, and `Controllers` folders, you can place
    the other folders where you see fit. Just remember to keep references to them
    relevant to your solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfd236a6-dcef-439d-b104-671e6b24bce2.png)'
  prefs: []
  type: TYPE_IMG
- en: Climacons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adam Whitcroft has created 75 climatically categorized pictographs for web
    applications and UI designers. We will need to download them to use in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Head on over to [http://adamwhitcroft.com/climacons/](http://adamwhitcroft.com/climacons/)
    and download the set to include them in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always remember to provide attribution back to the creators of resources you
    use in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include the folder in the project, simply place the SVG files in a folder
    in your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bad6f486-dddc-490a-b932-810e3082fbcb.png)'
  prefs: []
  type: TYPE_IMG
- en: The Startup.cs file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digging deeper into the code, let's start at the `Startup.cs` file. It should
    have been created by default as in the following code listings, but for the sake
    of completeness, I have included it here too.
  prefs: []
  type: TYPE_NORMAL
- en: As a standard naming convention, the name `Startup` is used for this file. In
    reality, though, you can call it whatever you like. Just be sure to rename it
    in the `Program.cs` file too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `using` statements should be included in the `Startup.cs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The code contained in the `Startup` file will be the same for you and is generated
    by default when creating the application. We will not be modifying this file for
    this chapter but, typically, if you wanted to add any middleware, you would come
    here to the `Configure()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The InformationModel class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The model for this application is pretty straightforward. All this will do
    is expose the values obtained in our controller and provide the view access to
    these values. To add the model, right-click the `Models` folder and add a new
    class called `InformationModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can then add the properties, as illustrated in the preceding code listing.
  prefs: []
  type: TYPE_NORMAL
- en: The InformationController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step we need to take is to add the controller for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the `Controllers` folder and select Add, and then click on Controller
    from the context menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4d643e4-f6b4-4c7c-a11d-0cd38a4722e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new controller called `InformationController` by selecting MVC Controller
    - Empty from the Add Scaffold screen. The following `using` statements need to
    be added to the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The Microsoft documentation says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The IHostingEnvironment service provides the core abstraction for working
    with environments. This service is provided by the ASP.NET hosting layer, and
    can be injected into your startup logic via Dependency Injection."'
  prefs: []
  type: TYPE_NORMAL
- en: To read more on this, browse to [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments)
    and check out the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following properties to the preceding constructor in our controller.
    You will notice that we have added the `IHostingEnvironment` interface to the
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an empty method called `GetInfo()`. The naming of the controllers (and
    the methods contained inside them), views, and models is quite deliberate. The
    MVC design pattern follows a set of conventions that, if adhered to, make binding
    this altogether quite easy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you recall, the `Startup` class defined a `MapRoute` call in the `Configure()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8f289d8-e874-4fff-9ae2-000d4299d608.png)'
  prefs: []
  type: TYPE_IMG
- en: This section of code `{controller=Home}/{action=Index}/{id?}` is called the
    **route template**. The MVC application uses tokenizing to extract the route values.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{controller=Home}` defines the name of the controller with a default of `Home`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{action=Index}` defines the method of the controller with a default of `Index`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, `{id?}` is defined as an optional by the `?` and can be used to pass
    around parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that if I don't give the application a route (or URL), it will use
    the defaults which have been set up in the `MapRoute` call.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, I give the application a route of `http://localhost:50239/Information/GetInfo`,
    it will redirect to the `GetInfo()` method on the `InformationController`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on routing, go to—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing)
    and read through the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Staying inside our `Controllers` folder, add a class called `LocationInfo`.
    We will use this to bind the JSON string to it after calling the location info
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To get the location information, you can use one of many location APIs. I used
    an API over at [https://ipapi.co](https://ipapi.co) to provide the location information
    for me. The `GetLocationInfo()` method simply calls the API and deserializes the
    JSON returned into the `LocationInfo` class created a moment ago.
  prefs: []
  type: TYPE_NORMAL
- en: 'Personally, I think that the name `ipapi` is really clever. It is something
    one will not easily forget. They also provide a free tier in their pricing which
    is for 1,000 requests per day. This is perfect for personal use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next API we will be using is **Dark Sky**. You will need to sign up for
    an account at [https://darksky.net/dev](https://darksky.net/dev) in order to get
    your API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b41cd207-2ca0-4ea1-bf25-873c143c1e7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What I like about Dark Sky is that their API also allows you 1,000 free API
    calls every day:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8380a50-69da-404c-9e9e-ee8f186cc26f.png)'
  prefs: []
  type: TYPE_IMG
- en: This makes it perfect for personal use. If you have high-volume users, even
    the pay-as-you-go option isn't expensive at all.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that if you make use of the Dark Sky API for a commercial application,
    you cannot require each user of your application to register for a Dark Sky API
    key. All users of your Dark Sky application must use the specific API key you
    generated via the online portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those who are interested, the FAQ provides clarity on this and many other
    important questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '"...your end-users should not sign up for Dark Sky API keys: the API key should
    be associated with your app or service, not your users.'
  prefs: []
  type: TYPE_NORMAL
- en: The 1,000 free calls per day are intended to facilitate personal use and application
    development, not to provide free weather data to your app. It costs us money to
    develop and maintain the infrastructure that supports the Dark Sky API. If your
    application were to grow in popularity, we would have to pay for the use of resources
    necessary to handle increased traffic (to the benefit of your service and your
    users) without the financial means to support it. For this reason, applications
    that ask users to register for an API key are prohibited by our terms of service."
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping track of the API calls is also very easy and can be viewed via the
    online portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6030bb06-60d1-407e-8783-b192fbc5a0b6.png)'
  prefs: []
  type: TYPE_IMG
- en: With the Dark Sky API registration sorted, we want to see whether the application
    is running in a region that uses the metric system or imperial system for units
    of measure.
  prefs: []
  type: TYPE_NORMAL
- en: Create a method called `GetUnitOfMeasure()` that returns a `DarkSkyService.OptionalParameters`
    object. All this essentially does is use the `RegionInfo` class to check whether
    the current region is metric or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It then sets the `optParms` variable and returns it to the calling class. I
    also take the liberty of sneaking in the symbol for Celsius or Fahrenheit for
    the `TempUnitOfMeasure` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The next method to add is called `GetCurrentWeatherIcon()`, which will be used
    to determine the Dark Sky icon to display on our web page. There are many more
    to choose from, but I have opted, for the sake of brevity, to only include these
    few icon names. These icon names correspond to the fill list of SVG filenames
    in the `climacons` folder in our solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The next method to create is the `GetWeatherInfo()` method. All this does is
    call the `DarkSkyService` class and pass it the API key you generated earlier
    in the Dark Sky portal. You will notice that the code is not really rocket science
    at all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps in the class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the API key for Dark Sky.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate a new `DarkSkyService` object using the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the `OptionalParameters` object that determines the unit of measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then use the latitude and longitude along with `optParms` to get the forecast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the forecast, I find the appropriate weather icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I do a `Path.Combine` to get the correct path to the SVG file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I read all the text contained inside that SVG file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, I set some properties for the attribution back to Dark Sky, the weather
    summary, and set the temperature value rounded up using the `Round` function in
    the static `Math` class. In the code, I don't need to fully qualify this because
    I have imported the static `Math` class earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your code therefore needs to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we need to add the appropriate code to the `GetInfo()`
    method. The first section of the method deals with finding the system information
    of the computer the application is running on. This will obviously change based
    on the operating system we are running our .NET Core app on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The last section of the `GetInfo()` method deals with determining the weather
    information we crafted in the previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: The next portion of work will entail creating our view. Once we are done with
    that, the real fun starts.
  prefs: []
  type: TYPE_NORMAL
- en: The GetInfo view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Putting the view together is quite straightforward. I opted for a very minimalistic
    approach (apart from the weather icon), but you can be as creative here as you
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the `Views` folder and add a new folder called `Information`. Inside
    the `Information` folder, add a new view called `GetInfo` by right-clicking the
    folder and selecting Add and then clicking on View... from the context menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/392dc872-5f29-429c-9e32-c300a7592f36.png)'
  prefs: []
  type: TYPE_IMG
- en: The naming of the view also adheres to the naming convention used in MVC.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *The project in detail* section earlier in this chapter for an
    image of the Visual Studio solution displaying the layout of the `Views` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view which has been created uses Razor syntax. Razor is a way for developers
    to add C# code (server code) directly inside web pages. The code inside the `GetInfo.cshtml`
    page looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, MVC adds the `@model` keyword to Razor's vernacular. By doing
    this, you are allowing the view to specify the type of the view's `Model` property.
    The syntax is `@model class` and is contained in the first line, `@model` `SystemInfo.Models.InformationModel`,
    which strongly types the view to the `InformationModel` class.
  prefs: []
  type: TYPE_NORMAL
- en: With this kind of flexibility, you can add C# expressions directly into your
    client-side code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last bit of code you need to add is to the `_Layout.cshtml` file in the
    `Views/Shared` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2fc9200b-bf77-48d7-a2dd-f26898cde252.png)'
  prefs: []
  type: TYPE_IMG
- en: We are just adding a link to the menu here to navigate to our `InformationController`
    class. You will notice that the code follows the convention of controller and
    action, where the `asp-controller` specifies the `InformationController` class
    and the `asp-action` specifies the `GetInfo` method inside that controller.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, the application should be ready to run. Build it and make sure
    you get a clean build. Run the application and click on the Information Dashboard
    menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Information Dashboard will display the computer information it is running
    on as well as the weather information for the current location the machine is
    located at (or close thereby):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e06fe826-52a5-4d73-9316-dd992810413a.png)'
  prefs: []
  type: TYPE_IMG
- en: For the Windows portion of this chapter, I used Azure and therefore the server
    is located in the US. That is why the information displayed is US-based.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s have a peek at the generated HTML code from our Razor view.
    If you use the built-in developer tools (I''m using Chrome) and view the page
    source, you will find that the HTML created from the Razor view is quite unremarkable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: At the end of the day, all this is is just HTML. What is remarkable, however,
    is the fact that we used Razor to access properties on our model and place them
    directly inside the HTML of our view.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this portion of the chapter, I will assume that you are using a Mac that
    has had .NET Core 1.1 installed. If you do not have .NET Core installed on your
    Mac, head on over to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    and follow the installation steps (or follow along):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply put, from your .NET Core solution in Windows, just publish the .NET
    Core application. Then, go ahead and copy the published files to your Mac. I just
    put my published files in a desktop folder called `netCoreInfoDash`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac9f3d05-7015-495b-8c70-66299776af27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Terminal on your Mac and change the working directory to the `netCoreInfoDash`
    folder. Type in the command `dotnet SystemInfo.dll` and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec98083f-8bc4-48c4-9917-e7532b1588bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because the project was created for .NET Core 2.0 and our Mac only has .NET
    Core 1.1, we will see the following error message in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e3e57ef-1ec4-41a4-ae7f-09c5f71c7515.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to update the version of .NET Core on the Mac to version 2.0\. To do
    this, go to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    and install .NET Core 2.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Installing the .NET Core SDK is quite straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b63d4f5a-8068-4356-b453-f3f11bb5e9f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In no time at all, .NET Core 2.0 is installed on your Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfdaab9f-2f88-4965-8225-adbddd07312f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in the Terminal, type in `dotnet SystemInfo.dll` and hit *Enter*. This
    time, you will see the following information output in the Terminal window. You
    will see that the address `http://localhost:5000` is specified. The port listed
    for you might change, but `5000` is usually the port given:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1cd2559-ea7c-429e-b621-53c40c11d9b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the browser on your Mac (it can be Safari, but I use Chrome) and navigate
    to—`http://localhost:5000`. You will see that the familiar application start page
    is displayed. If you click on the Information Dashboard menu item, you will see
    the page we created exactly as it was displayed on the Windows machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c503ed7d-dae5-4827-b646-48d2c6d12c0a.png)'
  prefs: []
  type: TYPE_IMG
- en: The only difference here is that the Mac is not on Azure and is in fact in my
    office in South Africa. The temperature information has changed to Celsius and
    the machine information displayed is for that of my Mac. It's a nice Spring evening
    here in South Africa.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the app on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everyone keeps talking about the ability of .NET Core to run cross-platform,
    even on Linux. I, therefore, decided to give it a try. I know that Linux might
    not interest many of you, but there is a definite sense of satisfaction of being
    able to use a powerful operating system such as Linux.
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing .NET Core applications, I would encourage you to set up
    a Linux box for testing purposes. There are many ways that you can go about doing
    this. If you have access to Azure, you can set up a Linux VM on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use virtualization software to provide a fully functional VM on
    your local machine. The option I chose was to use **VirtualBox** as well as testing
    out the process on **Parallels**. Both methods are really easy, but VirtualBox
    is free to use so this would be a good option. You can download the latest version
    of VirtualBox from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    for free.
  prefs: []
  type: TYPE_NORMAL
- en: You can also save yourself the setup time by downloading ready to use VirtualBox
    images from a variety of sites online. Just make sure they are reputable sites
    such as **OS Boxes** at—[http://www.osboxes.org/virtualbox-images/](http://www.osboxes.org/virtualbox-images/).
  prefs: []
  type: TYPE_NORMAL
- en: Whatever route you choose to follow, the rest of this chapter will assume that
    you have already set up your Linux environment and that you are ready to set up
    your .NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s see how to install .NET Core for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the instructions for installing .NET Core 2.0 for your particular flavor
    of Linux from—[https://www.microsoft.com/net/download/linux](https://www.microsoft.com/net/download/linux):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a84828a-443c-458d-a77e-a68bc49fdbb7.png)'
  prefs: []
  type: TYPE_IMG
- en: I am using **Ubuntu 16.04**, and clicking on the `sudo apt-get install dotnet-sdk-2.0.0`
    link will take me to the installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Terminal window on Linux Ubuntu (or Linux Mint) by typing *Ctrl*
    + *Alt* + *T*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Seeing as I am running a fresh copy of Linux, I need to install **cURL** first.
    This tool allows me to transfer data to and from servers to my local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to get cURL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal will ask for your password. Typing in the password does nothing
    on the screen, but keep on typing and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password that doesn't display a masked output to the screen as you type
    is by design when working with Linux. It's a feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/238b9dd6-ea4d-4fa2-9b77-b9b37a2dec66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to register the trusted Microsoft signature key. Type-in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7ba9167c-cfa0-47e2-8276-5f3647615c80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When this is done, type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to register the Microsoft Product feed for Ubuntu 16.04\. To do
    this, type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, directly after that, type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can install the .NET Core 2.0 SDK by typing in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal asks us if we want to continue, which we do. So, type in `Y` and
    hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6637c3ca-6c08-4303-8e0a-8030ed021670.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When this process is complete, you will see the cursor ready for input next
    to the `~$`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/596c89d6-1133-417a-9826-cf6866f3f434.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check which version of .NET Core is installed, type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This should display 2.0.0\. We now have .NET Core 2.0 installed on our Linux
    machine. As a quick start, make a new directory called `testapp` and change your
    working directory to the `testapp` directory by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e59a2cb7-4e9b-4e4c-971b-b4205f046ee4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just want to see whether .NET Core is working on our Linux machine, so while
    you''re in the `testapp` directory, type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Yes, it is that easy. This has just created a new MVC Web project for us on
    Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce22123e-4dfd-4512-ab10-45613f438473.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we did on our Mac, type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30d2d43e-713b-4cda-a2a6-c1b0adea6372.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the output in the Terminal, you will notice that the same port number is
    displayed for localhost. Unlike macOS, on Ubuntu I can click on `http://localhost:5000`
    inside the Terminal window. This will open up the application we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06247e66-347f-494b-98e1-d618a8e97e3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we know .NET Core 2.0 is running correctly on Linux, let''s copy over
    the project files to our Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder on the desktop; you can call it whatever you like. Copy the
    project files for the .NET Core application into that folder (do not copy the
    published files into this folder):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will remember that on macOS, we only copied the published files. This is
    different on Linux. Here, you need to copy all your project files.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae9ec898-2504-4f9d-bf4c-bba33f9d63f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click the folder and select Open in Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we are in the folder containing our solution files, type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This command restores the dependencies and tools of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35fb27ba-59f9-4336-8443-c916776a7fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because we are working with the solution files, I needed to navigate one folder
    down and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b9e971-656c-4fda-83cb-e0bb7c91da44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigating to `http://localhost:50240` displayed in the Terminal window takes
    me to the start page of my application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7261740-3045-486f-b517-99bf2ae47acb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Information Dashboard menu item will take us to the page we
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6709a9b-66d2-48ce-b661-f34c9fbd3862.png)'
  prefs: []
  type: TYPE_IMG
- en: And that is all there is to it. We have an ASP.NET Core MVC application created
    on a Windows PC using Visual Studio 2017 Enterprise, which is running on a Linux
    machine. The best thing of all is that we didn't change a single line of code
    to get our application to run on the different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking back at this chapter, we had a look at setting up an ASP.NET Core application
    on Windows. We looked at adding views and controllers and, if you are familiar
    with ASP.NET MVC, then you will have felt right at home. If not, ASP.NET MVC is
    really very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we had a look at what makes .NET Core so powerful by running the same
    application on Windows, macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The power of .NET Core should be evident to you by now. It allows developers
    to write truly cross-platform applications using .NET. This technology is a game
    changer and something every developer must get to grips with.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you might wonder what we need to do when we want to hook up a database
    to a .NET Core application. In the next chapter, we will look at using MongoDB
    on an ASP.NET Core MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we want to use MongoDB, you might wonder? Well, MongoDB is free, open
    source, and flexible. Then again, why would we not want to use MongoDB? See you
    in the next chapter!
  prefs: []
  type: TYPE_NORMAL
