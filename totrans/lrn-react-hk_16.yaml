- en: MobX and Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about Redux and how to use Redux in combination
    with Hooks. We also learned how to migrate existing Redux applications to a Hook-based
    solution. Furthermore, we learned about the trade-offs of using Reducer Hooks
    versus Redux, and when to use either one of them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to use MobX in combination with Hooks.
    We are going to start by learning how to handle state with MobX, then move on
    to using MobX with Hooks. Furthermore, we will learn how to migrate an existing
    MobX application to Hooks. Finally, we are going to discuss the pros and cons
    of using MobX. By the end of this chapter, you will fully understand how to write
    MobX applications using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning what MobX is and how it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling state with MobX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MobX with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating a MobX application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about the trade-offs of MobX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found in the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter13](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter13).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand it properly.
    However, if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What is MobX?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MobX takes a different approach than Redux. Rather than applying restrictions
    to make state changes predictable, it aims to automatically update anything that
    is derived from the application state. Rather than dispatching actions, in MobX
    we can directly modify the state object and MobX will take care of updating anything
    that uses the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MobX life cycle works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Events (such as `onClick`) invoke actions, which are the only things that can
    modify state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'State is observable, and should not contain redundant or derivable data. State
    is very flexible—it can contain classes, arrays, references, or it can even be
    a graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Computed values are derived from state through a pure function. These will
    be automatically updated by MobX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Reactions are like computed values, but they can also produce a side effect
    instead of a value, such as updating the user interface in React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see a visualization of the MobX life cycle in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/980b2234-8ff9-4bb6-8d22-4447522b692a.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization of the MobX life cycle
  prefs: []
  type: TYPE_NORMAL
- en: MobX and React work very well together. Whenever MobX detects that state has
    changed, it will cause a re-render of the appropriate components.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Redux, there are not many restrictions to learn about in order to use
    MobX. We only need to learn about a handful of core concepts, such as observables,
    computed values, and reactions.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know about the MobX life cycle, let's move on to handling state
    with MobX in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Handling state with MobX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn about MobX is by using it in practice and seeing how it
    works. So, let's start by porting our ToDo application from [Chapter 11](cf5ec080-00ae-46a8-afa0-46f5c7b3b259.xhtml), *Migrating
    from React Class Components*, to MobX. We start by copying the code example from `Chapter11/chapter11_2/`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MobX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to install MobX and MobX React, via `npm`. Execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that MobX and MobX React are installed, we can start setting up the store.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the MobX store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing MobX, it is time to set up our MobX store. The store will store
    all state, and the related computed values and actions. It is usually defined
    with a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the MobX store now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/store.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `observable`, `action`, and `computed` decorators, as well as the
    `decorate` function from MobX. These will be used to tag various functions and
    values in our store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Also import the `fetchAPITodos` and `generateID` functions from our API code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define the store by using a class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this store, we store a `todos` array, and the `filter` string value. These
    two values are observables. We are going to tag them as such later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With a special project setup, we could use an experimental JavaScript feature,
    known as **decorators**, to tag our values as observables by writing `@observable
    todos = []`. However, this syntax is not supported by `create-react-app`, since
    it is not part of the JavaScript standard yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define a computed value in order to get all of the filtered `todos`
    from our store. The function will be similar to the one that we had in `src/App.js`,
    but now we will use `this.filter` and `this.todos`. Again, we have to tag the
    function as `computed` later on. MobX will automatically trigger this function
    when needed, and store the result until the state that it depends on changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define our actions. We start with the `fetch` action. As before, we
    have to tag our action functions with the `action` decorator at a later point.
    In MobX, we can directly modify our state by setting `this.todos`. Because the
    `todos` value is observable, any changes to it will be automatically tracked by
    MobX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our `addTodo` action. In MobX, we do not use immutable values,
    so we should not create a new array. Instead, we always modify the existing `this.todos`
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, MobX takes a more imperative approach, where values are directly
    modified, and MobX automatically keeps track of the changes. We do not need to
    use the rest/spread syntax to create new arrays; instead, we modify the existing
    state array directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is the `toggleTodo` action. Here, we loop through all of the `todos`
    and modify the item with a matching `id`. Note how we can modify items within
    an array, and the change will still be tracked by MobX. In fact, MobX will even
    notice that only one value of the array has changed. In combination with React,
    this means that the list component will not re-render; only the item component
    of the item that changed is going to re-render. Please note that for this to be
    possible, we have to split up our components appropriately, such as making separate
    list and item components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `for (let .. of ..) {` construct will loop through all items of an array,
    or any other iterable value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we define the `removeTodo` action. First, we find the `index` of the `todo`
    item that we want to remove:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we use `splice` to remove one element—starting from the `index` of the
    found element. This means that we cut out the item with the given `id` from our
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The last action that we define, is the `filterTodos` action. Here, we simply
    set the `this.filter` value to the new filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have to decorate our store with the various decorators that we
    mentioned earlier. We do this by calling the `decorate` function on our store
    class and passing an object mapping values and methods to decorators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We start with the `todos` and `filter` values, which are observables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we decorate the `computed` value*—*`filteredTodos`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we decorate our actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, our MobX store is decorated properly and ready to be used!
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Provider component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could now initialize the store in our `App` component, and pass it down to
    all of the other components. However, it is a better idea to use React Context.
    That way, we can access the store from anywhere in our app. MobX React offers
    a `Provider` component, which provides the store in a context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started using the `Provider` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/index.js`, and import the `Provider` component from `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `TodoStore` from our `store.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a new instance of the `TodoStore` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have to adjust the first argument to `ReactDOM.render()`, in order
    to wrap the `App` component with the `Provider` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Unlike Redux, with MobX, it is possible to provide multiple stores in our app.
    However, here, we only provide one store, and we call it `todoStore`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our store is initialized and ready to be used in all other components.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our MobX store is available as a context, we can start connecting our
    components to it. To do so, MobX React provides the `inject` higher-order component,
    which we can use to inject the store into our components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to connect the following components to our MobX
    store:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AddTodo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TodoFilter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the App component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start by connecting our `App` component, where we will use the
    `fetch` action to fetch all `todos` from our API, when the app initializes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s connect the `App` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and import the `inject` function from `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, wrap the `App` component with `inject`. The `inject` function is used
    to inject the store (or multiple stores) as props to the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible to specify multiple stores in the `inject` function, as follows:
    `inject(''todoStore'', ''otherStore'')`. Then, two props will be injected: `todoStore`
    and `otherStore`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the `todoStore` available, we can use it to call the `fetch`
    action within our Effect Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now remove the `filteredTodos` Memo Hook, the handler functions, the
    `StateContext.Provider` component, and all of the props that we passed down to
    the other components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `App` component will fetch `todos` from the API, and then they will
    be stored in the `TodoStore`.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the TodoList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After storing the `todos` in our store, we can get them from the store, and
    then we can list all of the todo items in the `TodoList` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s connect the `TodoList` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoList.js` and import the `inject` and `observer` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Remove all context-related imports and Hooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As before, we use the `inject` function to wrap the component. Additionally,
    we now wrap our component with the `observer` function. The `observer` function
    tells MobX that this component should re-render when the store updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the `filteredTodos` computed value from our store, to list all
    todo items with the filter applied. To make sure that MobX can still track when
    changes to the `item` object occur, we *do not* use the spread syntax here. If
    we used the spread syntax, all of the todo items would re-render, even if only
    one changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, our app will already list all of the todo items. However, we cannot toggle
    or remove the todo items yet.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the TodoItem component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to toggle or remove todo items, we have to connect the `TodoItem`
    component. We also define the `TodoItem` component as an observer, so that MobX
    knows it will have to re-render the component when the `item` object changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s connect the `TodoItem` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoItem.js`, and import the `inject` and `observer` functions from `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, wrap the `TodoItem` component with `inject` and `observer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use destructuring of the `item` object within the component. As
    it is defined as an observer, MobX will be able to track changes to the `item`
    object, even after destructuring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `todoStore` available, we can use it to adjust our handler
    functions, and to call the corresponding actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `TodoItem` component will call the `toggleTodo` and `removeTodo` actions
    from our `todoStore`, so we can now toggle and remove the todo items!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the AddTodo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to add new todo items, we have to connect the `AddTodo` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s connect the `AddTodo` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/AddTodo.js` and import the `inject` function from `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, wrap the `AddTodo` component with `inject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `todoStore` available, we can use it to adjust our handler
    function, and to call the `addTodo` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `AddTodo` component will call the `addTodo` action from our `todoStore`,
    so we can now add new todo items!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the TodoFilter component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, we have to connect the `TodoFilter` component in order to be able to
    select different filters. We also want to show the currently selected filter,
    so this component needs to be an `observer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s connect the `TodoFilter` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoFilter.js` and import the `inject` and `observer` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `inject` and `observer` functions to wrap the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We now adjust our handler function to call the `filterTodos` action from the
    store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we adjust the `style` object to use the `filter` value from `todoStore`,
    in order to check whether the filter is currently selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, we can now get rid of passing down the props in the `FilterItem`
    component. Remove the following parts that are marked in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can select new filters, which will be marked as selected, in bold. The
    todo list will also automatically be filtered, because MobX detects a change in
    the `filter` value, which causes the `filteredTodos` computed value to update,
    and the `TodoList` observer component to re-render.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter13/chapter13_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using MobX with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to use MobX with React. As we have seen,
    to be able to connect our components to the MobX store, we need to wrap them with
    the `inject` function, and in some cases, also with the `observer` function. Instead
    of using these higher-order components to wrap our components, since the release
    of v6 of `mobx-react`, we can also use Hooks to connect our components to the
    MobX store. We are now going to use MobX with Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Defining a store Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, we have to define a Hook in order to access our own store. As
    we have learned before, MobX uses React Context to provide, and inject, state
    into various components. We can get the `MobXProviderContext` from `mobx-react` and
    create our own custom context Hook in order to access all stores. Then, we can
    create another Hook, to specifically access our `TodoStore`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s begin defining a store Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useContext` Hook from `react`, and the `MobXProviderContext` from
    `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define and export a `useStores` Hook, which returns a Context Hook
    for the `MobXProviderContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define a `useTodoStore` Hook, which gets the `todoStore` from our
    previous Hook, and then returns it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a general Hook, to access all stores from MobX, and a specific
    Hook to access the `TodoStore`. If we need to, we can also define more Hooks for
    other stores at a later point.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading components to Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating a Hook to access our store, we can use it instead of wrapping
    our components with the `inject` higher-order component function. In the upcoming
    sections, we will see how we can use Hooks to upgrade our various components.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for the App component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start by upgrading our `App` component. It is possible to gradually
    refactor components so that they use Hooks instead. We do not need to refactor
    every component at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Hooks for the `App` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js` and remove the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `useTodoStore` Hook from our `hooks.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the `inject` function that is wrapping the `App` component, and
    remove all props. The `App` function definition should now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use our Todo Store Hook to get the `todoStore` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our app still works in the same way as before! However, we are
    now using Hooks in the `App` component, which makes the code much more clean and
    concise.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for the TodoList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to upgrade our `TodoList` component. Additionally, we are
    also going to use the `useObserver` Hook, which replaces the `observer` higher-order
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Hooks for the `TodoList` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoList.js`, and remove the following import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `useObserver` Hook from `mobx-react` and the `useTodoStore` Hook
    from our `hooks.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the `inject` and `observer` functions that are wrapping the `TodoList`
    component, and also remove all props. The `TodoList` function definition should
    now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we use the Todo Store Hook to get the `todoStore` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap the returned elements with the `useObserver` Hook. Everything
    within the Observer Hook will be recomputed when the state that is used within
    the Hook changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In our case, MobX will detect that the observer that was defined via the `useObserver` Hook
    depends on `todoStore.filteredTodos`, and `filteredTodos` depends on the `filter`
    and `todos` values. As a result, the list will be re-rendered whenever either
    the `filter` value or the `todos` array changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for the TodoItem component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to upgrade the `TodoItem` component, which will be a similar
    process to what we did with the `TodoList` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Hooks for the `TodoItem` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoItem.js` and remove the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `useObserver` Hook from `mobx-react`, and the `useTodoStore` Hook
    from our `hooks.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the `inject` and `observer` functions that are wrapping the `TodoItem`
    component, and also remove the `todoStore` prop. The `TodoItem` function definition
    should now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to remove the destructuring (the code in bold) because our whole
    component is not defined as observable anymore, so MobX will not be able to track
    the changes to the `item` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use the Todo Store Hook to get the `todoStore` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to adjust the handler functions so that they use `item.id` instead
    of `id` directly. Please note that we assume that the `id` does not change, therefore,
    it is not wrapped within an Observer Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap the `return` statement with an Observer Hook and do the destructuring
    there. This ensures that changes to the `item` object are tracked by MobX, and
    that the component will re-render accordingly when the properties of the object
    change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `TodoItem` component is properly connected to the MobX store.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `item.id` property changes, we would have to wrap the handler functions,
    and the `return` function, within a single `useObserver` Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note that we cannot wrap the handler functions and the `return` statement in
    separate Observer Hooks, because then the handler functions would only be defined
    within the closure of the first Observer Hook. This would mean that we would not
    be able to access the handler functions from within the second Observer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to continue to upgrade our components by using Hooks for
    the `AddTodo` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for the AddTodo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We repeat the same upgrade process as we did in the `App` component for the
    `AddTodo` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/AddTodo.js` and remove the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `useTodoStore` Hook from our `hooks.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the `inject` function that is wrapping the `AddTodo` component,
    and also remove all props. The `AddTodo` function definition should now look as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the Todo Store Hook to get the `todoStore` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `AddTodo` component is connected to the MobX store and we can move
    on to upgrading the `TodoFilter` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for the TodoFilter component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the `TodoFilter` component, we are going to use a similar process to the
    one that we used for the `TodoList` component. We are going to use our `useTodoStore` Hook
    and the `useObserver` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Hooks for the `TodoFilter` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/TodoFilter.js` and remove the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `useObserver` Hook from `mobx-react`, and the `useTodoStore` Hook
    from our `hooks.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, remove the `inject` and `observer` functions that are wrapping the `TodoFilterItem`
    component, and also remove the `todoStore` prop. The `TodoFilterItem` function
    definition should now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we use the Todo Store Hook to get the `todoStore` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap the `style` object with the `useObserver` Hook. Remember,
    everything within the Observer Hook will be re-computed when the state that is
    used within the Hook changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `style` object will be re-computed whenever the `todoStore.filter`
    value changes, which will cause the element to re-render, and change the font
    weight when a different filter is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter13/chapter13_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using the local store Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to providing global stores to store application-wide state, MobX
    also provides local stores to store local state. To create a local store, we can
    use the `useLocalStore` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to implement the Local Store Hook in the `AddTodo` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/AddTodo.js` and import the `useLocalStore` Hook, as well as the `useObserver` Hook
    from `mobx-react`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove the following State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with a Local Store Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: In this local store, we can define state values, computed values, and actions.
    The `useLocalStore` Hook will automatically decorate values as observable, getter
    functions (the `get` prefix) as computed values, and normal functions as actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with a `value` state for the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a computed value, which will tell us whether the add button
    should be `disabled` or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the actions. The first action updates the `value` from an input
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define another action to update the `value` from a simple string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can adjust the input handler function, and call the `updateFromInput`
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have to adjust the `handleAdd` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap the elements with a `useObserver` Hook, in order to make sure
    that the `input` field value gets updated when it changes, and we adjust the `disabled`
    and `value` props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `AddTodo` component uses a local MobX store in order to handle its
    input value, and to disable/enable the button. As you can see, with MobX, it is
    possible to use multiple stores, for local as well as global states. The hard
    part is deciding how to split up and group your stores in a way that makes sense
    for the given application.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter13/chapter13_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Migrating a MobX application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to replace MobX higher-order components,
    such as `inject` and `observer` in existing MobX applications with Hooks. Now,
    we are going to learn how to migrate local state to Hooks in existing MobX applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'An existing MobX application can be migrated to a Hook-based solution by following
    three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a State Hook for simple local state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `useLocalState` Hook for complex local state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping global state in separate MobX stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already learned how to use a State Hook in the early chapters of this
    book. State Hooks make sense for simple state, such as the current state of a
    checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: We have already learned how to use the `useLocalState` Hook in this chapter.
    We can use the Local State Hook for complex local state, such as complex forms
    where multiple fields interact with each other. Then, we can replace multiple
    State and Effect Hooks with a single Local State Hook and computed values and
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, global state should be stored in separate MobX stores, such as the `TodoStore`,
    which we defined in this chapter. In MobX, multiple stores can be created and
    passed down to components using the `Provider` component. We can then create a
    separate custom Hook for each of the stores.
  prefs: []
  type: TYPE_NORMAL
- en: The trade-offs of MobX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To wrap up, let''s summarize the pros and cons of using MobX in a web application.
    First, let''s start with the positives:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides a simple way of dealing with state changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less boilerplate code is required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers flexibility in how our application code is structured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple global and local stores can be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes the `App` component much simpler (it offloads state management and
    actions to MobX)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MobX is perfect for small—and large projects—that deal with complex state changes,
    and state that is used across many components.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are also downsides to using MobX:'
  prefs: []
  type: TYPE_NORMAL
- en: State changes could happen anywhere, not just in a single store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its flexibility means that it is possible to structure the project in a bad
    way, which could cause errors or bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MobX requires a wrapper component (`Provider`) in order to connect the app to
    the store, if we want to get all the features (we could directly import and use
    the MobX store, but it would break features such as server-side rendering)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If state changes are simple, and only local state within components is needed,
    MobX should not be used. In that case, a State or a Reducer Hook might be enough.
    With Reducer and State Hooks, there is no need for wrapper components in order
    to connect our app to the store.
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility is a good thing, but it can also cause us to structure a project
    badly. However, MobX provides a project called `mobx-state-tree`, which allows
    us to make our MobX applications more structured and enforce a certain kind of
    architecture. More information can be found on the project page in the following
    GitHub repository: [https://github.com/mobxjs/mobx-state-tree](https://github.com/mobxjs/mobx-state-tree).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned what MobX is, which elements it consists of,
    and how they work together. Then, we learned how to use MobX for state management
    in practice. We also learned how to connect a MobX store to React components,
    by using the `inject` and `observer` higher-order components. Next, we replaced
    the higher-order components with Hooks, which made our code much more clean and
    concise. We also learned how to use a Local Store Hook to deal with complex local
    state in MobX. Finally, we learned how to migrate an existing MobX application
    to Hooks, and we recapped what the trade-offs of using MobX are.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter marks the end of this book. In this book, we started out with a
    motivation to use Hooks. We learned that there are common problems in React apps
    that cannot be easily solved without Hooks. Then, we created our first component
    using Hooks and compared it to a class-component-based solution. Next, we learned
    about various Hooks in depth, starting with the State Hook, which is the most
    ubiquitous of them all. We also learned about solving common problems with Hooks,
    such as conditional Hooks and Hooks in loops.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about the State Hook in depth, we developed a small blog app
    using Hooks. We then learned about Reducer Hooks, Effect Hooks, and Context Hooks,
    in order to be able to implement more features in our app. Next, we learned how
    to request resources efficiently using Hooks. Furthermore, we learned how to prevent
    unnecessary re-rendering with `React.memo`, and how to implement lazy-loading
    with React Suspense. Then, we implemented routes in our blog app, and we learned
    how Hooks can make dynamic routing much easier.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about various Hooks that are provided by the community, which
    make dealing with input fields, various data structures, responsive design, and
    undo/redo functionality so much easier. Furthermore, we learned about the rules
    of Hooks, how to create our own custom Hooks, and how interactions between Hooks
    work. Toward the end, we learned how to effectively migrate from existing class-component-based
    apps, to a Hook-based solution. Finally, we learned how to use Hooks with Redux
    and MobX, and how to migrate existing Redux and MobX applications to Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about Hooks in depth, we are ready to use them in our
    applications! We have also learned how to migrate existing projects to Hooks,
    so we can start doing that now. I hope you enjoyed learning about React Hooks,
    and that you are looking forward to implementing Hooks in your applications! I
    am sure that using Hooks will make coding much more enjoyable for you, just like
    they did for me.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which elements form the MobX life cycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which decorators does MobX provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we connect components to MobX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hooks does MobX provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we access the MobX store using Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we store local state using MobX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should we go about migrating an existing MobX application to Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using MobX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the disadvantages of using MobX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should MobX not be used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to MobX from the official MobX docs: [https://mobx.js.org/getting-started.html](https://mobx.js.org/getting-started.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official MobX docs: [https://mobx.js.org](https://mobx.js.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A video course on the basics of MobX: [https://egghead.io/lessons/react-sync-the-ui-with-the-app-state-using-mobx-observable-and-observer-in-react](https://egghead.io/lessons/react-sync-the-ui-with-the-app-state-using-mobx-observable-and-observer-in-react)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The official MobX React docs: [https://mobx-react.js.org/](https://mobx-react.js.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mobx` project on GitHub: [https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mobx-react` project on GitHub: [https://github.com/mobxjs/mobx-react](https://github.com/mobxjs/mobx-react)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mobx-state-tree` project on GitHub: [https://github.com/mobxjs/mobx-state-tree](https://github.com/mobxjs/mobx-state-tree)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
