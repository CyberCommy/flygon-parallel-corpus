- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much of today's web environment has changed dramatically – not only in terms
    of creating web applications but also when it comes to creating server-side applications.
    A frontend ecosystem that was dominated by jQuery and CSS frameworks such as Bootstrap
    has been replaced with reactive, fully fledged applications that could be mistaken
    for an application running on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: The language we write these applications in has also changed in a dramatic fashion.
    What was once a mess of `var` and scope issues has turned into a fast and easy-to-program
    language. JavaScript has not only changed the way we write our frontend, it has
    also changed the backend programming experience.
  prefs: []
  type: TYPE_NORMAL
- en: We are now able to write server-side applications in the language that we write
    our frontend in. JavaScript has also modernized, and possibly even popularized,
    the event-driven system with Node.js. We can now write code for both our frontend
    and backend in JavaScript and possibly even share the JavaScript files we generate
    between the two.
  prefs: []
  type: TYPE_NORMAL
- en: However, while the application landscape has evolved and many people have moved
    onto modern frameworks, such as React and Vue.js for the frontend and Express
    and Sails for the backend, many of these developers do not understand the inner
    workings. While this showcases just how simple it is to enter into the ecosystem,
    it also showcases how easy it is to not understand how to optimize our code bases.
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on teaching highly performant JavaScript. This not only means
    fast execution speeds, but also a lower memory footprint. This means that any
    frontend system will get to the user faster, and we will be able to start our
    applications that much faster. On top of this, we have many new technologies that
    have moved the web forward, such as Web Workers.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for those who are interested in all the latest features of the
    modern web. On top of this, it's also for those with an interest in reducing memory
    costs while increasing speed. People who are interested in how a computer works
    and even how a JavaScript compiler works will be interested in the contents of
    this book. Finally, for those who are interested in WebAssembly but do not know
    where to start, this is a good jumping-off point in learning the essentials.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](28196d54-886b-4b9c-9974-190c0800c971.xhtml), *Tools for High Performance
    on the Web*, will cover the various browsers that our applications can run on.
    We will also take a look at the various tools that help us to debug, profile,
    and even run ad hoc code to test the functionality of our JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](513ba745-b44e-4a18-96f1-7cfbccd75ff9.xhtml), *Immutability versus
    Mutability – The Balance between Safety and Speed*, will take a look at the concepts
    of mutable/immutable state. We will cover when and where to use each. On top of
    this, we will cover how to create the illusion of immutability while having a
    mutable data structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](da1a0a36-4261-43f1-a42b-a9d94284dc9f.xhtml), *Vanilla Land – Looking
    at the Modern Web*, will take a look at how far JavaScript has come and all of
    the new and notable features up to ECMAScript 2020\. On top of this, we will look
    at various advanced features, such as currying and writing in a functional manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](bbac23b7-12e2-412e-9aaa-f31b1c321dab.xhtml), *Practical Example –
    A Look at Svelte and Being Vanilla*, will cover a fairly new framework called
    Svelte. It will go over this compile to Vanilla JavaScript framework and explore
    how it achieves lightning-fast results with an intuitive framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](6c403493-7028-408c-9da6-b6650ad6bfcb.xhtml), *Switching Contexts –
    No DOM, Different Vanilla*, will cover the low-level Node.js work. This means
    taking a look at the various modules available to us. We will also take a look
    at how we can achieve amazing results with no extra libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](7dc2a5fd-0c78-49e7-9e84-f789eab14ca5.xhtml), *Message Passing –
    Learning about the Different Types*, will take a look at different ways to talk
    among different processes. We will cover unnamed pipes, named pipes, sockets,
    and transmission via TCP/UDP. We will also take a look at HTTP/2 and briefly look
    at HTTP/3.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](81cf1aa1-6ded-4d94-8686-e2bd65db6a8c.xhtml), *Streams – Understanding
    Stream and Non-Blocking I/O*, will cover the Stream API and how to utilize it.
    We will cover each type of stream and the use cases for each. On top of this,
    we will implement some practical streams that, with some modification, could be
    used in other projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](dc96fd47-7979-4029-80dd-f42712a1d296.xhtml), *Data Formats – Looking
    at Different Data Types Other Than JSON*, will look into schema and schema-less
    data types. We will look into implementing a data format and then see popular
    data formats in action.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml), *Practical Example
    – Building a Static Server*, will take the previous four chapters and apply these
    concepts and build a static site generator. While it may not be as powerful as
    GatsbyJS, it will have most of the features we expect from a static site generator.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](d1a2a4d4-8ed1-4d82-a098-835d61c01b86.xhtml), *Workers – Learning
    about Dedicated and Shared Workers*, will move back to the frontend and take a
    look at two of the web worker types. We will utilize these to process data from
    the main thread. On top of this, we will take a look at how we can talk among
    our workers and the main process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](85fd3774-6bce-4d86-85f3-355d7f140b5b.xhtml), *Service Workers
    – Caching and Making Things Faster*, will look at the service worker and the life
    cycle of the service worker. On top of this, we will look at practical examples
    of how to utilize a service worker in a progressive web application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](6662ad13-783a-440b-9565-8a75223284da.xhtml), *Building and Deploying
    a Full Web Application*, will look at **continuous integration**/**continuous
    deployment** (**CI**/**CD**) with the tool CircleCI. We will see how we can use
    it to deploy our web application built in [Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml),
    *Practical Example – Building a Static Server*,to a server. We will even take
    a look at adding some security checks to our application before deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](13ca1263-4202-4c5c-ab9f-3af4e92a00de.xhtml), *WebAssembly – A
    Brief Look into Native Code on the Web*,will look at this relatively new technology.
    We will see how to write low-level WebAssembly and how it runs on the web. We
    will then turn our attention to writing C++ for the browser. Finally, we will
    take a look at a ported application and the WebAssembly that is behind it.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, the requirements to run most of the code are minimal. A computer
    that is capable of handling Chrome, Node.js, and a C compiler is needed. The C
    compiler that we will be utilizing near the end of this book will be CMake. These
    systems should work on all modern operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: For Chrome, having the latest versions will be helpful as we will be utilizing
    some features that are either in the proposal stage or in ECMAScript 2020. We
    are using the latest LTS version of Node.js (v12.16.1), and are avoiding the use
    of Node.js 13 as it won't be promoted to LTS. On top of this, the command-line
    tool for Windows is not that great, so it is recommended to download Cmder, from [https://cmder.net/](https://cmder.net/),
    to have a Bash-like shell for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a modern IDE or editor is needed. We will be utilizing Visual Studio
    Code throughout this book, but many other alternatives, such as Visual Studio,
    IntelliJ, Sublime Text 3, and so on, can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in the book** | **Operating system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Svelte.js v3 | Windows 10/OSX/Linux |'
  prefs: []
  type: TYPE_TB
- en: '| ECMAScript 2020 | Windows 10/OSX/Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Node.js v12.16.1 LTS | Windows 10/OSX/Linux |'
  prefs: []
  type: TYPE_TB
- en: '| WebAssembly | Windows 10/OSX/Linux |'
  prefs: []
  type: TYPE_TB
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript](https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "This is very similar to `console.time` and `timeEnd` but
    it should showcase what is available with generators."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "If we open the DevTools by pressing *F12* in Windows, we may see
    the **Shader Editor** tab already."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
