- en: '*Chapter 8*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enhance Jest Configuration with Module Aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The module managers that we have in the JavaScript community, primarily ES
    Modules and CommonJS, don''t support project-based paths. They only support relative
    paths for our own modules and paths for the `node_modules` folder. As a project
    grows a little, it''s common to see paths such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Luckily, we have different ways to cope with this, in a way that we can define
    aliases for folders relative to the project root, so we can write the previous
    line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `@` is an arbitrary character to define the root project. You can define
    your own, however. Let's see what solutions we have available to apply module
    aliasing. Let's begin from where we left off in the **last chapter** ([https://github.com/alexjoverm/vue-testing-series/tree/test-slots](https://github.com/alexjoverm/vue-testing-series/tree/test-slots)).
  prefs: []
  type: TYPE_NORMAL
- en: Webpack Aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Webpack aliases** ([https://webpack.js.org/configuration/resolve/#resolve-alias](https://webpack.js.org/configuration/resolve/#resolve-alias))
    are very simple to set up. You just need to add a `resolve.alias` property to
    your webpack configuration. If you take a look at `build/webpack.base.conf.js`,
    it already has it defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Taking this as an entry point, we can add a simple alias that points to the
    `src` folder and use that as the root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this alone, we can access anything, taking the root project as the `@`
    symbol. Let''s go to `src/App.vue` and change the reference to those two components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And if we run `npm start` and open the browser at `localhost:8080`, that should
    work out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we try to run the tests by running `npm t`, we''ll see that Jest
    doesn''t find the modules. We still haven''t configured Jest to do this. Therefore,
    let''s go to `package.json`, where the Jest config is located, and add `"@/([^\\.]*)$":
    "<rootDir>/src/$1"` to `moduleNameMapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation of the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@(.*)$`: Whatever starts with ``@``, and continues with literally whatever
    (`(.*)$`) till the end of the string, grouping it by using the parenthesis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<rootDir>/src/$1`: `<rootDir>` is a special Jest word, meaning the root directory.
    Then, we map it to `src` and, with `$1`, we append the whatever clause from the
    `(.*)` statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `@/components/MessageList` will be mapped to `../src/components/MessageList`
    when you're importing it from the `src` or `test` folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s really it. Now, you can even update your `App.test.js` file to use
    the alias as well since it''s usable from within the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Also, it will work for both `.vue` and `.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often, multiple aliases are used for convenience, so instead of using just
    a single `@` to define your root folder, you use many. For example, let's say
    you have an `actions` folder and a `models` folder. If you create an alias for
    each one and then you move the folders around, you just need to change the aliases
    instead of updating all the references to it in the codebase. That's the power
    of module aliases â€“ they make your codebase easier to maintain and cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add a `components` alias to `build/webpack.base.conf.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we just need to add it to the Jest configuration in `package.json` too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It is as simple as that. Now, we can try it in `App.vue` to use both forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Stop and rerun the tests and that should work. You may also run `npm start`
    and try that.
  prefs: []
  type: TYPE_NORMAL
- en: Other Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've seen **babel-plugin-webpack-alias** ([https://github.com/trayio/babel-plugin-webpack-alias](https://github.com/trayio/babel-plugin-webpack-alias)),
    especially used for other testing frameworks such as **mocha** ([https://mochajs.org/](https://mochajs.org/)),
    which doesn't have a module mapper.
  prefs: []
  type: TYPE_NORMAL
- en: I haven't tried it myself since Jest already provides you with that, but if
    you have done so, or want to try, please share how it went.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding module aliases is very simple and can keep your code base much cleaner
    and easier to maintain. Jest also makes it very easy to define them; you just
    need to keep in sync with webpack aliases, and you can say bye-bye to dot-hell
    references.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the working code relating to this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/Enhance-Jest-configuration-with-Module-Aliases](https://github.com/alexjoverm/vue-testing-series/tree/Enhance-Jest-configuration-with-Module-Aliases)).
  prefs: []
  type: TYPE_NORMAL
