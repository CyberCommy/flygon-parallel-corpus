- en: Chapter 3. Jenkins and the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](part0014_split_000.html#DB7S1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 1. Preparatory Steps"), *Preparatory Steps*, we took a high-level look
    at the basic principles and goals of Continuous Integration. We then walked through
    some fairly typical Jenkins use case scenarios to illustrate some of the ways
    in which extending Jenkins can help us to achieve these goals.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a more detailed look at how to extend Jenkins
    and achieve the principles and goals of Continuous Integration. The focus of this
    chapter is to discover the ways in which we can help make things easier for software
    developers. The support and *buy in* of both the management and development teams
    is vital for the success of any good build process, and developers are obviously
    a fundamental part of any software development team.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at some of the approaches that you can use to extend and
    adapt Jenkins to suit the specific needs and requirements of your developers,
    and we will demonstrate how adapting the way in which Jenkins information is presented
    to these developers can be customized to fit in naturally with the way they work.
    The intention here is to empower people with the tools that they find both beneficial
    and easy to use and to thereby encourage people to *do the right thing*, rather
    than try to make them do what we dictate using metrics, threats, nagging e-mails,
    and pointing the finger of blame every time a build fails—this is a sure way to
    end up with a lot of disgruntled developers who just want to keep their heads
    down!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding motivations is the key to understanding behaviors, and, quite
    reasonably, developers are usually highly focused on developing code changes.
    They are usually not too interested in performing additional tasks, such as monitoring
    a build dashboard for updates or scrolling through a day's worth of e-mails to
    check whether someone else has recently broken the build before they commit their
    change. They are naturally focused on their role, their priorities, writing code
    and tests, and delivering them so that they can move on to pick up the next task.
    Anything that detracts or distracts from this goal may be seen as counterproductive.
    So, if we can extend Jenkins to simultaneously make things easier for developers
    to focus on the quality of their code and encourage them to *do the right thing*
    from a Continuous Integration point of view, everyone should be happier... well,
    that's the aim anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'The approach that I usually use to achieve this is best described by this quote:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Make the wrong thing hard and the right thing easy."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --Ray Hunt |'
  prefs: []
  type: TYPE_TB
- en: It's a simple but effective mantra that I have found to really work in this
    kind of situation. Ray Hunt was the father of the natural horsemanship movement,
    and he used this philosophy with great success while training horses. And, between
    you and me, I have had some success when applying it to developers too!
  prefs: []
  type: TYPE_NORMAL
- en: The focus of this chapter, therefore, is to explore the ways in which we can
    extend Jenkins to provide our hardworking developers with the information they
    need to have in hand in a way that is natural and convenient for them to absorb,
    and makes it easy for them to *do the right thing*. If we can present our information
    directly in the IDE where they are already spending a majority of their time,
    hopefully we can achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting back to our Continuous Integration aims, from a developer-centric point
    of view, we are trying to encourage three main behaviors here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commit frequently**: We can help here by making this easy to do using a suitable
    version control system that allows quick check-ins from within the IDE that the
    developers are using and by not distracting them from it to check on build tasks
    and statuses.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**If the build is broken, fix it as a top priority**: Making the current state
    very obvious will help to achieve this.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Check the result of your actions**: This will greatly improve its functionality.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rapid feedback and making it easy to see (and hard to miss it!) will help here
    too. If we can present all this information nicely and clearly from within the
    IDE that developers are already using, we should see some big improvements with
    little effort.
  prefs: []
  type: TYPE_NORMAL
- en: While the technologically focused solutions that we are about to run through
    should be helpful from our point of view, we can't expect them to be a miracle
    cure on their own. As mentioned previously, it takes a team working together to
    make these things work, so establishing and monitoring a set of developer best
    practices, publishing standards and guidelines, and providing user education and
    information, all play an important part in setting up an efficient and professional
    development team and productive build process IDEs, and Jenkins Build Connectors.
  prefs: []
  type: TYPE_NORMAL
- en: There are different development IDEs, and the selection depends on a number
    of factors, such as programming language (Java, C++, .Net, and so on), environment
    (Linux, Windows, Mac, and so on), and corporate and personal preferences (open
    or closed source). We will take a look at a few of the most popular IDEs and the
    solutions for them; however, there are many others as well that are available
    to suit different requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse and Mylyn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and probably by far the most popular of all the development IDEs that
    we will look at is the Eclipse platform—this is extremely popular for a number
    of different projects including Java, C/C++, and PHP, and it has a vast user base
    and a wealth of mature and easily available plugins.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve our goal of presenting Jenkins information to developers, Mylyn is
    currently the most popular extension that we can use in conjunction with Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is more information on Mylyn and the many features it provides at this
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.eclipse.org/mylyn/](http://www.eclipse.org/mylyn/)'
  prefs: []
  type: TYPE_NORMAL
- en: The documentation at this link also states that Mylyn *reduces information overload
    and makes multitasking easy*, which sounds exactly like what we are looking for!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Mylyn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mylyn comes preinstalled with the most recent versions of Eclipse, so you may
    just need to select it by navigating to **Window** | **Show View** | **Other**,
    then selecting the **Builds** component from the **Mylyn** category like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mylyn](../images/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you just need to configure Mylyn using the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use a version of Eclipse that does not come bundled with Mylyn, you
    can download and install it using the standard Eclipse installation process by
    selecting **Help** | **Software Updates…** then add a new update site with this
    URL: [http://download.eclipse.org/tools/mylyn/update/e3.4](http://download.eclipse.org/tools/mylyn/update/e3.4%20)
    (or a later version, if available and preferred).'
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been done, select the new update site that you just created and
    add the Mylyn components you would like to install.
  prefs: []
  type: TYPE_NORMAL
- en: Mylyn and Jenkins configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once installed, you will then be able to select **Window** from the main toolbar
    menu, and then **Show View**, **Mylyn**, and **Builds**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should produce a window similar to the following, from which you can then
    select the highlighted option to create a new build server definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mylyn and Jenkins configurations](../images/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This produces a new wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mylyn and Jenkins configurations](../images/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the **Hudson** option and clicking on **Next**, you are presented
    with a **Server Properties** dialogue where you can define and configure the properties
    for **New Build Server**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mylyn and Jenkins configurations](../images/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here you can specify the URL and the credentials required for your Jenkins server.
    A quick refresh should show a successful connection to your Jenkins instance and
    also pull back a list of job definitions for you to select from. Note that Mylyn
    caters to a host of other connection and authorization features here, which you
    can configure if required.
  prefs: []
  type: TYPE_NORMAL
- en: After a quick check using the **Validate** button, click on **Finish** to save
    and close the server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should result in a new **Builds** window displaying live information on
    the jobs that you have selected from your Jenkins server, something similar to
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mylyn and Jenkins configurations](../images/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exploring the options in this window shows that you can right-click and select
    a number of functions to perform on a selected job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mylyn and Jenkins configurations](../images/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can perform the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: View the history for a selected job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the job in a browser inside Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the selected job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the console output for the last run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the JUnit results in the JUnit view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these can be done directly from within the Eclipse IDE, making it very
    easy for developers to keep an eye on the things they need to know with very little
    effort and minimal distractions.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA and Jenkins build connectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IntelliJ IDEA, developed by JetBrains, is another very popular Integrated Development
    Environment, and, similar to Eclipse, it also has a large number of add-ons and
    plugins that are available to extend its use and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take a quick look at installing and configuring the
    **Jenkins Control Plugin** for IntelliJ IDEA, and we will configure it to provide
    a functionality similar to that provided by Mylyn under Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing plugins in IntelliJ is very easy—open the **Preferences** menu item,
    then select **Plugins** on the left-hand side menu. The Jenkins Control plugin
    is not currently bundled with the IDE, so click on the **Browse repositories…**
    button as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliJ IDEA and Jenkins build connectors](../images/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This opens up a new subwindow where you can enter `Jenkins` in the search dialogue
    to find the two (currently) available plugins, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliJ IDEA and Jenkins build connectors](../images/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the green **Install Plugin** button—the plugin will be downloaded and
    you will be prompted to restart IntelliJ IDEA—this completes the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'After restarting the IDE, click on the **View** menu, select **Tool Windows**,
    and you should see a new **Jenkins** option. Selecting this produces a new pane
    entitled **Jenkins**, where you can configure the connection to a Jenkins server
    by clicking on the spanner icon and filling out the requisite details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliJ IDEA and Jenkins build connectors](../images/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: My example Jenkins instance is very simplistic—you will probably want to use
    authentication on a real Jenkins instance and therefore, will need to fill out
    the corresponding details. You may want to tweak the timing and logging settings
    to suit yourself; however, the basic setup is very simple and also very similar
    to the earlier Mylyn example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, hit the **OK** button, and you should see a view of your Jenkins
    instance inside IntelliJ:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliJ IDEA and Jenkins build connectors](../images/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As with Mylyn, you can perform several useful functions using this plugin—monitoring
    the status of builds, triggering new builds, and viewing the results and history
    of the selected jobs.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NetBeans IDE has an inbuilt functionality to monitor Jenkins via the `HudsonInNetBeans`
    service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting the **Services** tab within NetBeans will reveal a Hudson Builders
    item where you can define your Jenkins instance and configure which items you
    would like to monitor based on the View definitions available on your Jenkins
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NetBeans](../images/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have registered the server, you will be notified of any failures by
    a popup within the IDE. You can read more about the functionality and configuration
    of this extension here: [http://wiki.netbeans.org/HudsonInNetBeans#General_setup_and_view](http://wiki.netbeans.org/HudsonInNetBeans#General_setup_and_view).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the Build Monitor plugin can also be added to include status bar
    notifications—it can be downloaded from the plugin home page here: [http://plugins.netbeans.org/plugin/814/build-monitor](http://plugins.netbeans.org/plugin/814/build-monitor).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the plugin is installed from **Tools** | **Plugins** menu item by selecting
    the **Downloaded** option and navigating to the recently downloaded file with
    an `.nbm` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NetBeans](../images/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, simply select **Install**, agree to the terms, and click on **Install**
    again—once complete, click on **Finish**. You should now have a status bar item
    that can be configured to monitor the status of one or more of your Jenkins jobs,
    thus, providing another useful and unobtrusive mechanism to keep an eye on more
    important builds.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the key aims of Continuous Integration and how
    they specifically relate to developers. We have reviewed what we want to achieve
    in this area and how we can do so, that is, by enabling developers to easily do
    the right thing and by making their lives and roles easier.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different options available that allow us to integrate Jenkins
    and the developers' environment, and we have detailed some popular examples of
    three of the most popular IDEs—there are many other options available for these
    IDEs and for others too. If the preceding options don't fit with your environment,
    hopefully the general idea and approach will translate to something that suits
    you. These plugins are being developed and enhanced on a regular basis, so pick
    the approach and the combination that works best for you and your environment.
    The key aim is to make life easy for others and encourage them to make your life
    easier too!
  prefs: []
  type: TYPE_NORMAL
- en: Also, there are many other ways in which we can communicate Jenkins information
    to others besides the IDE; there are system tray notifiers, Information Radiators,
    dashboards, custom web apps, e-mail alerts, instant message notifications, and
    even automated lava lamps, and foam-rocket launchers!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at several other ways in which we can
    interact with Jenkins—these are more technical and less end user-focused, but
    are related in a way that may give you some alternative ideas to develop your
    own bespoke solutions.
  prefs: []
  type: TYPE_NORMAL
