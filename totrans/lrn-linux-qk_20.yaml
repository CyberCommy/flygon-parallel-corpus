- en: Everyone Needs Disk Space
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to manage your hard disk in Linux. You will
    learn how to create new partitions on your drive. Then you will learn how to create
    and mount filesystems. Finally, you will learn how to use LVM to create logical
    volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Where are your devices?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we all know by now, a file represents everything in Linux, and devices are
    no exception. All your devices are located inside the `/dev` directory; this includes
    your keyboard, mouse, terminal, hard disk, USB devices, CD-ROM, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The terminal you are working on right now is, in fact, a device. If you run
    the `w` command, you will see the name of the terminal you are connected to in
    the second column of the output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In my case, it is `pts/0`; **pts** is short for **pseudoterminal** slave. Now,
    this terminal is represented by the file `/dev/pts/0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I will echo the line `Hello Friend` to `/dev/pts/0` and pay close attention
    to what will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `Hello Friend` got printed to my terminal! Now you can play
    that game with other users on your system. You can run the `w` command to figure
    out which terminal they are using and then start sending them messages!
  prefs: []
  type: TYPE_NORMAL
- en: Where is your hard disk?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To know which file represents your hard disk; you need to run the command `lsblk`,
    which is short for **list block**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, I can see that the name of my hard disk device is **sda**,
    which is short for **SCSI Disk A**. Now you need to understand that depending
    on the type of your hard disk drive, you may get a different name. `Figure 1`
    summarizes Linux naming strategies for different types of hard drives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82b56fd7-4fe7-4523-872b-b91c61bce092.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Hard disk naming in Linux'
  prefs: []
  type: TYPE_NORMAL
- en: So from the output of the `lsblk` command, you can conclude that I only have
    one disk (`sda`) on my virtual machine. Now we don't want to play with this disk
    as it contains the root filesystem, so let's add another disk to our virtual machine
    for learning purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding disks to your virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few steps you need to follow to successfully add a new disk to
    your virtual machine. You have to follow these steps in this specific order:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down your virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Virtual Machine Settings | Storage | Create new Disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start your virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So the first step is pretty simple; shut down your virtual machine because
    you cannot add a new disk to your virtual machine while it is still running. For
    the second step, you need to go to your virtual machine settings, then click on
    storage and then select your disk controller, right-click, and then create a new
    disk as shown in `Figure 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/024cef9e-10f2-4238-8345-1497975ccc2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Creating a new disk on your virtual machine'
  prefs: []
  type: TYPE_NORMAL
- en: You will then be asked to choose the size for your new disk. You can select
    any size you want. I have an abundance of disk space on my host machine, so I
    will add a 10 GB disk to my virtual machine. After you are done, the last step
    is to start up your virtual machine again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to see your new disk as soon as your virtual machine starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: My new disk got the name `sdb` because it is the second disk on my virtual machine,
    and you can also see that its size is 10 GB.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new disk partitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s play with the new disk that we just created. The first thing you
    may want to do is to create a new partition. To create a new partition, we use
    the `fdisk` command followed by the disk name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So to create a new partition on the `/dev/sdb` disk; you can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This opens up the `fdisk` utility. If you are unsure what to do; you can enter
    `m` for help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to create a new partition so enter `n`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It will then ask you if you want a primary partition or an extended partition.
    We would accept the default selection (primary) so just hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It will then ask you to select a partition number. We will also accept the
    default, which is partition number `1`, so just hit *Enter*. Notice that you can
    create up to four primary partitions on a given disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then be prompted to choose the sector you would want your new partition
    to start at; hit *Enter* to accept the default (`2048`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you will be asked to choose the size of your new partition; I want a 2
    GB partition so I would type `+2G` and then hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you have to save the configuration by hitting `w`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run `lsblk` to see the new partition you just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the 2 GB partition `sdb1` is listed under `sdb`. You can also use
    the `-l` option with the `fdisk` command to print out the partition table of your
    disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating new filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I cannot start creating files and directories on my `/dev/sdb1` partition just
    yet; first, I need to create a filesystem. A filesystem basically dictates how
    data is organized and stored on a disk (or partition). A good analogy would be
    passengers on an airplane; flight companies can't just let the passengers (data)
    seat themselves in an airplane (partition); it would be a total mess.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different types of filesystems available on Linux. It is important
    to note that `ext4` and `xfs` are the most commonly used filesystems. `Figure
    3` shows you only a few of the available filesystems that are supported on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0169a0bc-a2a3-4d85-b34a-6bf083622441.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Linux filesystems'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read the description of each Linux filesystem type in the filesystems
    `man` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a filesystem, we use the `mkfs` command, which is short for make
    filesystem. The general syntax for the `mkfs` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create an `ext4` filesystem on our new partition `/dev/sdb1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We have created an `ext4` filesystem on our partition `/dev/sdb1`. We can verify
    our work by running the `file -s` command on the `/dev/sdb1` partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it displays that there is an `ext4` filesystem on the `/dev/sdb1`
    partition.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `wipefs` command to remove (wipe out) a filesystem. For example,
    if you want to remove the `ext4` filesystem that we just created on `/dev/sdb1`,
    you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you rerun `file -s` on the `/dev/sdb1` partition, you will see there
    is no filesystem signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s recreate an `ext4` filesystem on `/dev/sdb1` and keep it this time around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Mounting filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created an `ext4` filesystem on the partition `/dev/sdb1`. Now we need
    to mount our filesystem somewhere in the Linux directory tree.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS MOUNTING?**'
  prefs: []
  type: TYPE_NORMAL
- en: Mounting refers to the process of attaching any filesystem or any storage device
    (like USB flash drives, CDs, etc.) to a directory.
  prefs: []
  type: TYPE_NORMAL
- en: But why do we need to mount? I mean we have just created an `ext4` filesystem
    on the 2 GB partition `/dev/sdb1`. Can't we just start creating files in `/dev/sdb1`?
    The answer is a big FAT NO! Remember, `/dev/sdb1` is only a file that represents
    a partition.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount a filesystem, we use the mount command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'So let''s assume we are going to use the filesystem `/dev/sdb1` to store our
    games. In this case, let''s create a new directory `/games`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the only thing left is to mount our filesystem `/dev/sdb1` on the `/games`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify our work by running the `lsblk` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `/dev/sdb1` is indeed mounted on `/games`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `mount` command by itself to list all the mounted filesystems
    on your system. For example, to verify that `/dev/sdb1` is mounted on `/games`,
    you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have 2 GB available for us to use in `/games` and you can use the `df`
    command to display the filesystem disk space usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create three files in `/games`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Unmounting filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also unmount (the reverse of mounting) a filesystem. As you may have
    guessed, unmounting refers to the process of detaching a filesystem or a storage
    device. To unmount a filesystem, you can use `umount` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to the `/games` directory and try to unmount the `/dev/sdb1` filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Oops! It is saying that the target is busy! That''s because I am inside the
    mount point `/games`; I will back up one directory and then try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This time it worked! You have to be careful and never unmount a filesystem or
    any storage device while it is actively being used; otherwise, you may lose data!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s verify the filesystem `/dev/sdb1` is indeed unmounted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Yup! It is definitely unmounted! Now let''s list the contents of the `/games`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing! But do not panic or worry! The three files we created still exist
    in the `/dev/sdb1` filesystem. We need to mount the filesystem again, and you
    will see the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Permanently mounting filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mount` command only mounts a filesystem temporarily; that is, filesystems
    mounted with the `mount` command won't survive a system reboot. If you want to
    mount a filesystem permanently, then you need to include it in the filesystem
    table file `/etc/fstab`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each entry (or line) in `/etc/fstab` represents a different filesystem, and
    each line consists of the following six fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`filesystem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mount_dir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fstype`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mount_options`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dump`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_fs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, for example, to mount our `/dev/sdb1` filesystem on `/games` permanently,
    you need to include the following line in `/etc/fstab`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You should add the line to the end of the `/etc/fstab` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s unmount `/dev/sdb1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can now mount `/dev/sdb1` permanently by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice we did not specify a mount destination this time; that''s because the
    mount destination is already specified in the `/etc/fstab` file. You can use the
    `-a` option with the `mount` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To mount all the filesystems that are included in `/etc/fstab`. It is also
    used to check for syntax errors. For example, if you made a typo in `/etc/fstab`
    and wrote `/dev/sdx1` instead of `/dev/sdb1`, it will show you the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'All the mounts specified in `/etc/fstab` are permanent and they will survive
    a system reboot. You may also refer to the `fstab` man page for more information
    on `/etc/fstab`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Running out of space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create huge files that would consume all the available disk space in `/games`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A fast way to create big files in Linux is by using the `dd` command. To demonstrate,
    let''s first change to the `/games` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run the following command to create a `1` GB file named `bigGame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now already used more than half of the available space in `/games`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s attempt to create another file named `bigFish` of size 3 GB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We got an error as we ran out of space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can''t even create a tiny file with the word `Hello` in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Corrupting and fixing filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some unfortunate situations, you may run into an issue where your system
    will not boot because of a corrupted filesystem. In this case, you have to fix
    your filesystem so your system boots properly. I will show you how you can corrupt
    a filesystem, and then I will show you how you can repair it.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to corrupt a filesystem is by writing random data to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will surely corrupt your `/dev/sdb1` filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `/dev/sdb1` filesystem is now corrupted! If you don''t believe me, unmount
    it and then try to mount it back again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, it unmounted successfully! Let''s see if it will mount:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it fails to mount as it spits out an error message.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! Your filesystem is corrupted. What can we do now? Well, we can certainly
    fix it!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the file system check command `fsck` to check and repair filesystems.
    So let''s run `fsck` on our corrupted filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it states that the filesystem contains garbage data and asks
    if you want to clear the errors. You can hit *Y*, but it will keep asking you
    again and again for every single inode it is fixing! You can avoid that by using
    the `-y` option, which answers an automatic yes to all prompts during the repair
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: When you run it, you will see a lot of numbers running down on your screen.
    Do not worry! It is fixing your corrupted filesystem. It is basically going through
    thousands of inodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After it finishes, you can rerun `fsck` to verify the filesystem is now clean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazing! Now let''s try to mount it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: It mounted this time around. Mission accomplished! We have successfully fixed
    the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: LVM to the rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run out of space on a filesystem, things can get very ugly. We already
    ran out of space in `/games`, and there is no easy solution that exists for adding
    more space using standard partitioning. Luckily, **Logical Volume Manager **(**LVM**)
    offers a better alternative for managing filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the LVM package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start playing with LVM, first, we need to install the `lvm2` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation is complete, you can run the `lvm version` command to
    verify the installation is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Three layers of abstraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how LVM works, you first need to visualize it. LVM is like a cake
    that is made up of three layers, as shown in `Figure 4`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cd58b01-8016-44de-8b93-83690b286996.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Visualizing LVM'
  prefs: []
  type: TYPE_NORMAL
- en: Physical volumes construct the first (base layer) of the LVM cake. Physical
    volumes can either be whole disks (`/dev/sdb`, `/dev/sdc`, etc) or partitions
    (`/dev/sdb2`, `/dev/sdc3`, etc).
  prefs: []
  type: TYPE_NORMAL
- en: The **Volume Group** layer is the second and biggest layer in the LVM cake,
    and it sits on top of the **Physical Volume** layer. A volume group can span multiple
    physical volumes; that is, one volume group can be composed of one or more physical
    volumes.
  prefs: []
  type: TYPE_NORMAL
- en: The **Logical Volume** layer makes up the third and last layer in the LVM cake.
    Multiple logical volumes can belong to the same volume group, as shown in `Figure
    4`. Finally, you can create filesystems on logical volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating physical volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe for creating physical volumes is pretty simple; you only need a disk
    or a partition. We have already created a `2` GB partition `/dev/sdb1`. Now go
    ahead and create three more partitions under `/dev/sdb`, each of size `2` GB.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the end result should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a physical volume, we use the `pvcreate` command followed by a disk
    or a partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to create three physical volumes: `/dev/sdb2`, `/dev/sdb3`, and
    `/dev/sdb4`. You can create all three with one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool stuff! You can also use the `pvs` command to list all physical volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Alright! Everything looks good so far.
  prefs: []
  type: TYPE_NORMAL
- en: Creating volume groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One volume group can span multiple physical volumes. So let''s create a volume
    group that would consist of the two physical volumes: `/dev/sdb2` and `/dev/sdb3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a volume group, we use the `vgcreate` command followed by the name
    of the new volume group and then the physical volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a volume group named `myvg` that would span `/dev/sdb2` and `/de-
    v/sdb3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! You can also use the `vgs` command to list all volume groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the size of the volume group `myvg` is equal to `4` GB, which is
    the total size of `/dev/sdb2` and `/dev/sdb3`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating logical volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now create logical volumes on top of our `mvg` volume group.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a logical volume, we use the `lvcreate` command followed by the size
    of the logical volume, the name of the logical volume, and finally, the volume
    group name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a logical volume named `mybooks` of size `2` GB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create another logical volume named `myprojects` of size `500` MB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `lvs` command to list all logical volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: One final step remains, which is creating filesystems on our logical volumes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your logical volumes are represented in the device mapper directory `/dev/mapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an `ext4` filesystem on our `mybooks` logical volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can create an `ext4` filesystem on our `myprojects` logical volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to mount both filesystems somewhere so we will create two new directories,
    `/books` and `/projects`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can mount both filesystems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check the last two lines of the `mount` command output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Indeed! Both filesystems are mounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize; these are the steps that you need to follow to create LVM logical
    volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a physical volume(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a volume group(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a logical volume(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a filesystem(s) on the logical volume(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mount the filesystem(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pretty easy, right?
  prefs: []
  type: TYPE_NORMAL
- en: Extending logical volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now comes the moment of appreciation. After all the hard work you have put in
    so far, you will see why LVM is such a big deal in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consume all the available space in `/books`. Notice we only have 2 GB
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to the `/books` directory and create a 1 GB file named `book1` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create another file `book2` of size 900 MB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now running out of space! You will get an error if you attempt to create
    a 100 MB file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now officially out of disk space in `/books`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Here comes LVM to our rescue. We do have some disk space left on our `myvg`
    volume group, so we can extend the size of our logical volumes and thus the size
    of our filesystems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'We precisely have 1.5 GB of disk space left on `myvg`. We can now use the `lvextend`
    command to add 1 GB to our `/dev/mapper/myvg-mybooks` logical volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-r` option is essential as it resizes the filesystem along with the logical
    volume. We can now see that our `mybooks` logical volume has grown from 2 GB to
    3 GB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Consequently, we have gained more disk space in `/books`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s check how much disk size we have remaining in our `myvg` volume
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go all out and extend our `myprojects` logical volume to take up all
    the remaining space left in `myvg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the size of our `myprojects` logical volume has increased and eaten
    up all that''s left in `myvg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can''t extend our logical volumes as the `myvg` volume group ran out
    of space. Try to add 12 MB to our `mybooks` logical volume, and you will get an
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Extending volume groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can only extend our logical volumes if we have available space on the volume
    group. Now how do we extend a volume group? We simply add a physical volume to
    it!
  prefs: []
  type: TYPE_NORMAL
- en: Remember, I left out the one physical volume `/dev/sdb4` that I didn't add to
    the volume group `myvg`. Now it's time to add it!
  prefs: []
  type: TYPE_NORMAL
- en: 'To extend a volume group, we use the `vgextend` command followed by the volume
    group name and then the physical volumes you wish to add. So to add the physical
    volume `dev/sdb4` to our `myvg` volume group, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have added a whole 2 GB to our `myvg` volume group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: How amazing is that? You can now extend either of your two logical volumes as
    we added more disk space to the volume group. We should all take a moment to appreciate
    the power and flexibility of Linux LVM.
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time for the last knowledge check exercise in the book. I am sure you
    will miss them!
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new 1 GB disk to your virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create three 250 MB partitions on your new disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your three new partitions to create three physical volumes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a volume group named `bigvg` that spans all your three physical volumes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a logical volume named `biglv` of size 500 MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `ext4` filesystem on the `biglv` logical volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mount your filesystem on the `/mnt/wikileaks` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
