- en: Chapter 5. Programming Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned about Code:Blocks and app development for Windows in previous
    chapters. In this chapter we will use this knowledge and develop an app from scratch
    as an exercise. We will first take a look at the final app and then develop it
    from ground up. We will use the tools we learned in the previous chapters, which
    you can refer as you need.
  prefs: []
  type: TYPE_NORMAL
- en: Developing MyPaint – an image viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will develop an image viewer app as an exercise in this chapter. Our image
    viewer app shall have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It shall open `.jpeg`, `.png`, and `.bmp` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It shall allow user to zoom in and out of the loaded image at an interval of
    10 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zoom range shall be within 10 percent to 200 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There shall be keyboard shortcuts assigned to most commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There shall be toolbar to provide access to commonly used functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app shall be developed using wxSmith plugin of Code::Blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app shall use wxWidgets toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our app shall look like the following screenshot. The following screenshot shows
    our image viewer app has opened the `Koala.jpg` file (part of Windows 7 standard
    wallpaper set) with a zoom level set at 60 percent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing MyPaint – an image viewer](img/3415OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looks interesting, doesn't it? Let us begin our exercise and solve it. We'll
    do it in two steps.
  prefs: []
  type: TYPE_NORMAL
- en: Understand the structure of our image viewer app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin app development with Code::Blocks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anatomy of exercise app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our image viewer app uses several C++ classes to open, display, and control
    display of image. The following screenshot highlights major classes that are responsible
    for user interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Anatomy of exercise app](img/3415OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us see more about the classes listed in the following bullet list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `wxFrame` class: This class represents main window. All other visual elements
    are displayed inside this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wxMenuBar` class: This class shows the menu bar in our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wxToolBar` class: This class shows a tool bar in our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wxScrolledWindow` class: This class is used to display images. This class
    creates a resizable window to match window size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wxStatusBar` class: This class shows a status bar at the bottom of our
    app. We''ll be using this to display menu item help and other information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A tree of the classes and their relationship with the `wxFrame` derived class
    is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Anatomy of exercise app](img/3415OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram `wxMenuBar`, `wxToolBar`, and `wxStatusBar` are derived
    classes and have been added directly to `wxFrame` derived class.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas we need couple of extra classes for the `wxScrolledWindow` derived class.
    We have two intermediate classes, `wxBoxSizer` and `wxGridSizer`, for the `wxScrolledWindow`
    derived class. These classes are known as layout classes that help laying out
    child windows within a parent window. Note that layout classes are not visible
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: wxWidgets provides a class to load, manipulate multiple image formats via the
    `wxImage` class. This class is the engine of our app. The `wxScrolledWindow` class
    uses it to load and manipulate image file. `wxPaintDC` is the class that `wxScrolledWindow`
    uses to paint loaded image file on to itself.
  prefs: []
  type: TYPE_NORMAL
- en: With this introduction to the structure of our app we shall proceed with the
    development of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Solution of exercise problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us solve it step-by-step by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `wxWidgets` project and set the project name to `MyPaint`. Choose
    **wxSmith** as the **Preferred GUI Builder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **wxFrame** in the **Management** pane as shown in the following
    screenshot:![Solution of exercise problem](img/3415OS_05_02A.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Title` property to `MyPaint`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Layout** tab and click on the wxBoxSizer button as shown in the
    following screenshot. Then click on the frame shown inside wxSmith window:![Solution
    of exercise problem](img/3415OS_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next add a wxGridSizer to the newly added wxBoxSizer in a similar manner. Refer
    to the following screenshot for the wxGridSizer button. After wxGridSizer is added
    set the **Cols** property to `1`.![Solution of exercise problem](img/3415OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Standard** tab and add a wxScrolledWindow to the wxGridSizer
    as per the following screenshot:![Solution of exercise problem](img/3415OS_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following properties for wxScrolledWindow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Var name** to `MyPaintWindow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Min Width** to `640` and **Min Height** to `480`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Border Width** to 5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this step the **Management** pane shall look similar to the following screenshot:![Solution
    of exercise problem](img/3415OS_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Dialogs** tab and click on the wxFileDialog button. Set the
    following properties according to the bullet list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Message** to `Select file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wildcard** to `*.bmp;*.jpg;*.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Var name** to `MyPaintFileDialog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the **Tools** in the **Management** pane can click on the wxStatusBar
    item. Set the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Var name** to `StatusBarMain`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fields** to `2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Field 1**, **Width** to `5`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Field 2**, **Width** to `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next open the **MenuBar Editor** and add menu items as per the next screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Menu item | ID | Label | Accelerator | Help item |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **&File** &#124; **&Open Image** | `idFileOpen` | `&Open Image` | `Ctrl +
    O` | `Opens an Image file...` |'
  prefs: []
  type: TYPE_TB
- en: '| **&View** &#124; **Zoom &In** | `idViewZoomIn` | `Zoom &In` | `Ctrl++` |
    `Zooms +10%` |'
  prefs: []
  type: TYPE_TB
- en: '| **&View** &#124; **Zoom &Out** | `idViewZoomOut` | `Zoom &Out` | `Ctrl+-`
    | `Zooms -10%` |'
  prefs: []
  type: TYPE_TB
- en: 'The final menu bar editor window shall look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Solution of exercise problem](img/3415OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll now add a wxToolBar to our app. Click on the **Tools** tab as shown in
    the following screenshot and click on the wxToolBar button to add a wxToolBar
    to our app.![Solution of exercise problem](img/3415OS_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the wxToolBar icon in the wxSmith window and add the following
    items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Label | Options | Bitmap | Tooltip/Help text |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Open an image…** | **Normal** | Image from wxArtProvider—wxART_FILE_OPEN
    | `Opens an image file` |'
  prefs: []
  type: TYPE_TB
- en: '| – | Separator | – | – |'
  prefs: []
  type: TYPE_TB
- en: '| **Zoom in** | **Normal** | `zoom_in.png` file from the project folder | `Zoom
    in by 10%` |'
  prefs: []
  type: TYPE_TB
- en: '| **Zoom out** | **Normal** | `zoom_out.png` file from the project folder |
    `Zoom out by 10%` |'
  prefs: []
  type: TYPE_TB
- en: The final **ToolBar editor** window will look similar to the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Solution of exercise problem](img/3415OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have completed addition of most GUI elements. We need to write code to complete
    our app. Before doing that please note that wxSmith generated code remains inside
    the matching `//(*` and `//*)` block. Do not write your code inside this block
    as wxSmith will delete any custom code within this block while regenerating code.
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code inside the `MyPaintFrame` class declaration in the `MyPaintFrame.h`
    file as a private member variable and function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add the following code inside the `MyPaintFrame()` constructor function. We
    will be creating a new image class and assign it to `m_Image` variable. We'll
    use `SetScrollbars()` and `ShowScrollbars()` function to assign scroll bar related
    properties. We'll assign initial zoom factor of 100 percent and use the `wxInitAllImageHandlers()`
    function to initialize image processing engine for our app. Finally we'll use
    the `SetStatusText()` function to set status bar text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Click on the resources tree and navigate to **&File** | **&Open Image** menu
    option. Go to the **Events** tab (identified by **{}**), click on the dropdown
    menu next to **EVT_MENU** and select the **--- Add new handler ---** menu option.
    Enter `OnFileOpen` as the name of the event handler. Then enter the following
    code inside the `MyPaintFrame::OnFileOpen()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next add the `OnViewZoomIn` and `OnViewZoomOut` event handler function to **Zoom
    &In** and **Zoom &Out** by navigating to **&View** | **Zoom &In** and **&View**
    | **Zoom &Out** menu options respectively. Refer completed exercise for the code
    to be added to each handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **MyPaintWindow** from the resources tree and click on the **Events**
    tab. Add the `OnMyPaintWindowPaint` event handler to **EVT_PAINT** and paste the
    following code. This code paints loaded image on `wxScrolledWindow`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `OnResize` event handler to **MyPaintWindow** and add the following line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next add `RefreshPaintWindow()` function to the `MyPaintFrame` class and add
    the following code inside that function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll add code to our toolbar buttons. Select the **Item: Open an image…**
    item in the resource tree and go to the **Events** tab. Add the existing `OnFileOpen`
    event handler to **EVT_TOOL**. This will connect the existing `OnFileOpen()` function
    to this toolbar button. So clicking on this toolbar button will emulate navigating
    to the **File** | **Open menu** options.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow previous steps and connect the **Zoom in** and **Zoom out** toolbar buttons
    to `OnViewZoomIn` and `OnViewZoomOut` event handlers respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our app is now complete. Hit *F9* key to build and run. Upon successful build
    app will be run and we'll be presented with app window. Now open any image file
    and enjoy viewing it inside your freshly written app. Our app will now look as
    per the following screenshot:![Solution of exercise problem](img/3415OS_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We planned and wrote our own image viewer app in this exercise. We have used
    the RAD capability of Code::Blocks to write our app and we found that we can write
    an app from scratch within a short period of time.
  prefs: []
  type: TYPE_NORMAL
- en: With this we conclude our book on app development with C++ and Code::Blocks.
    C++ is a vast subject. Code::Blocks also has numerous features. It is impossible
    to highlight each and every aspect of them. I hope that with this book I have
    been able to shed light on app development with C++ and Code::Blocks. I also believe
    this book has also shown that app development with C++ and Code::Blocks can be
    fun and exciting.
  prefs: []
  type: TYPE_NORMAL
