- en: Appendix A. Application Design with ArcGIS Templates and Dojo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most difficult tasks for many web developers when building GIS applications
    is designing and creating the user interface. The ArcGIS API for JavaScript and
    Dojo greatly simplifies this task. Dojo's layout dijits provide a simple, efficient
    way to create application layouts, and Esri provides a number of sample application
    layouts and templates that you can use to get up and running quickly. In this
    appendix, the reader will learn techniques to quickly design the layout of an
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The Dojo BorderContainer dijit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the AGIS API for JavaScript is built directly on top of the Dojo JavaScript
    framework, you automatically have access to the user interface Dojo libraries,
    including layout dijits such as `BorderContainer`. The layout dijits are a set
    of user interface elements you can add to an application that give you control
    over the layout of the application. The `BorderContainer` dijit serves primarily
    as a container for other child containers and can be one of these two design types:
    headline or sidebar. You define the design type using the `design` attribute.
    The design type can be either `headline` or `sidebar` and both can be split into
    as many as 5 different regions: `top`, `bottom`, `right`, `left`, and `center`.
    Each region is normally filled by a Dojo layout element. It is also possible to
    nest regions for greater control over the layout of an application. For example,
    you might include a second `BorderContainer` within the `center` region of a master
    `BorderContainer`. Using this second `BorderContainer,` you could then further
    divide the `center` region.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Dojo BorderContainer dijit](graphics/7965_A1_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following code example, we are defining `design` to be of type `headline`.
    This results in the general configuration that you see in the code, with the `top`
    and `bottom` regions stretching across the entire width of the screen space. In
    this case, you only need to set the `height` property for the `top` and `bottom`
    regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the following code example, we define `design` as `sidebar`. With the `sidebar`
    design, the `left` and `right` regions expand to take up `100%` of the height
    of the window, sacrificing the area available to the `top` and `bottom` regions.
    In this case, you need to define only the `width` style property as the height
    will always be `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In either case, the center region will conform to fit the amount of space available,
    based on the sizing of the other regions. The following screenshots that you will
    see depict both of the design types available for `BorderContainer`. The first
    shows a `headline` style while the second shows a `sidebar` style.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Dojo BorderContainer dijit](graphics/7965_A1_2.jpg)![The Dojo BorderContainer
    dijit](graphics/7965_A1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Additional Dojo layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each region of `BorderContainer` (top, bottom, left, right, and center) can
    be filled by a Dojo layout element. These elements are `AccordionContainer`, `SplitContainer`,
    `StackContainer`, and `TabContainer`. You can also create a nested set of `BorderContainer`
    objects to further divide the available layout space.
  prefs: []
  type: TYPE_NORMAL
- en: Child elements are placed inside a region through the use of the `region` attribute,
    as seen in the following code example. Notice that in the highlighted section,
    the `region` attribute is set to `left`. This will create `ContentPane` in the
    `left` region. `ContentPane` is a very basic layout element and is used as a container
    for other widgets. In this case, it is going to hold `TabContainer` (highlighted),
    which contains additional `ContentPane` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot illustrates the location and content that was generated
    using `ContentPane` and `TabContainer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Additional Dojo layout elements](graphics/7965_A1_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`AccordionContainer` holds a set of panes whose titles are visible, but only
    one pane''s content is visible at a time. As the user clicks on a title, the pane
    contents become visible. These are excellent user interface containers that can
    hold a lot of information in a small area.'
  prefs: []
  type: TYPE_NORMAL
- en: Esri has provided a number of sample layouts that you can use to get started
    with the layout of your application. The help page for the ArcGIS API for JavaScript
    includes a **Samples** tab containing dozens of sample scripts you can use in
    your application including various layout samples. In the next section, you'll
    learn how to integrate one of these sample layouts into your application.
  prefs: []
  type: TYPE_NORMAL
- en: Time to practice with sample layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you will download a sample layout provided by Esri. You'll
    then examine the layout to get a feel of the basic layout elements provided by
    Dojo. Finally, you'll make some changes to the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting this exercise, you'll want to make sure that you have access
    to a web server. If you don't have access to a web server or if a web server isn't
    already installed on your computer, you can download and install the open source
    web server Apache ([http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi)).
    Microsoft IIS is another commonly used web server and there are many others that
    you can use as well. For the purpose of this exercise, I will assume that you
    are using the Apache web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A web server installed on your local computer will be referred to through URL
    as `http://localhost`. This points to the `htdocs` folder under `C:\Program Files\Apache
    Software Foundation\Apache2.2\` if you've installed Apache on a Windows platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Samples** tab of the ArcGIS API for JavaScript site ([https://developers.arcgis.com/en/javascript/jssamples/](https://developers.arcgis.com/en/javascript/jssamples/)),
    search for `Layouts` in the search box to generate a list of available layout
    samples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the list of search results until you see the **Layout with left
    pane** sample seen in the following screenshot. Click on this item:![Time to practice
    with sample layouts](graphics/7965_A1_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download as a zip file** link to download the sample.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder in your `htdocs` folder under `C:\Program Files\Apache Software
    Foundation\Apache2.2\` and name it `layout`. Unzip the file that you downloaded
    into this folder. This will create a file called `index.html`, along with the
    `css` and `images` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a web browser and go to the URL `http://localhost/layout/index.html` so
    you can see the current layout. You should see something similar to the following
    screenshot:![Time to practice with sample layouts](graphics/7965_A1_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `index.html` in your favorite text or web editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the file until you see the `<body>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The highest level layout container is `BorderContainer`. A `<div>` tag will
    contain `BorderContainer` and all other child layout elements need to be located
    inside this `<div>` tag. Examine the following code. The highlighted section is
    the code used to define our top level `BorderContainer`. Notice that the design
    has been set to `headline`, which means that the top and bottom regions will be
    scrolled across the entire width of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Inside `BorderContainer`, you will find several child layout elements defined
    with the `ContentPane` dijit. `ContentPane` is a very generic layout element that
    simply holds either text or additional layout elements, such as `TabContainer`
    or `AccordionContainer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that in the previous code example, each `ContentPane` layout element
    has a region that has been designed for each layout element. In this case, we
    have defined all of the available regions, with the exception of the `right` region.
    This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice with sample layouts](graphics/7965_A1_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, examine the following highlighted code. The highlighted code defines the
    content for the `left` region. A simple `ContentPane` layout element is defined,
    which as I mentioned previously is a very simple container for other layout elements
    or text. Inside this `ContentPane`, we have created a `TabContainer` layout element
    and assigned two tabs. Each tab is created as `ContentPane`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A common scenario would be to create a tab container that holds a legend for
    the map, as seen in the following screenshot:![Time to practice with sample layouts](graphics/7965_A1_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you understand the basic concepts of creating layout elements, you
    can add content for the `right` region. Add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the `css` folder that you extracted earlier in the exercise, there is a file
    called `layout.css`. This contains the styling information for our application.
    Open this file in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the text `#rightPane` as seen in the following code example. Properties
    are defined for the background color, foreground color, border styling, and width
    of the region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Recall that in the previous code block that you added, we gave `id` of `rightPane`
    to the `right` region. The CSS section will style our pane by giving it a background
    color (white), foreground color, width, and border.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, open your web browser and reload `http://localhost/layout/index.html`,
    or simply refresh the page if you already have it opened. Now you should see new
    content for the `right` region of the application. Currently, it only holds some
    text as the content, but you could easily add additional content, including user
    interface widgets (dijits). We'll do that in the next step when we add `AccordionContainer`.![Time
    to practice with sample layouts](graphics/7965_A1_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll add `AccordionContainer` to the `right` region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, add a reference to the `AccordionContainer` resource, as seen in the
    following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add `AccordionContainer` inside `ContentPane` for the `right` region as
    well as the content for each of the panes. The highlighted code below should be
    added to the `ContentPane` you created in step 14:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh your browser to see the new `AccordionContainer` layout element as seen
    in the following screenshot. In this exercise, you learned how to quickly create
    an application layout using Esri sample layouts.![Time to practice with sample
    layouts](graphics/7965_A1_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing and implementing the appearance of a GIS web mapping application is
    often a difficult task for developers. Design and development are two very different
    skill sets. Most people aren't good at both. However, Dojo's layout widgets and
    Esri sample templates make it much easier to build complex designs with very little
    coding. In this appendix, you learned how to use an Esri sample to quickly define
    and build the layout of an application.
  prefs: []
  type: TYPE_NORMAL
