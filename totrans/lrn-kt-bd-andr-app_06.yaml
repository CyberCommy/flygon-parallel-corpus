- en: Functions and Lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be bringing work on the TicTacToe game to a close whilst
    learning about functions in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the process, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about higher-order functions and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about lambdas and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Kotlin, functions are declared in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a43c5b1-8044-4d90-a432-6aadd65fc9b7.png)'
  prefs: []
  type: TYPE_IMG
- en: The **return** type and **parameters** are optional. A function with no `return`
    type by default returns a `Unit`. `Unit` is equivalent to `void` in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function with a single expression as its body can eliminate the curly braces
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `return` type can also be left out if the type can be inferred by the compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Kotlin, function parameters are defined using the pascal notation (**parameter_name:Type**).
    Each parameter''s type has to be explicitly declared. Parameters can be assigned
    a default value in the function declaration. This is done using the format: **parameter_name:Type
    = defaultValue**. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example:'
  prefs: []
  type: TYPE_NORMAL
- en: When calling the `addStudent()` function, you can leave out the `classRoomNo` parameter.
    For example, `joseph` will have a default `classRoomNo` value of `1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cases where you do not pass all the parameters to a function, the parameters
    passed have to be preceded by their parameter names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher–order functions and lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The term higher-order function refers to a function that either takes another
    function as a parameter or returns a function or both. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `logStudent()` function takes three parameters: `name`, `age`, and
    `createStudent`. `createStudent` is a function that takes a `String` and an `Int`
    as its parameters and returns a `Student` object.'
  prefs: []
  type: TYPE_NORMAL
- en: The `createStudent` function is not declared but passed as an expression to
    the `logStudent()` function. This is called a **lambda expression**.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lambda expression is an anonymous function that is not declared but passed
    immediately as an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and make use of lambda expressions in our TicTacToe app. Open
    `MainActivity.kt`. In the `startNewGame()` function, replace the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace them with this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the previous lines of code, we have an anonymous object that is implementing
    a Java interface that has a single abstract method (`onClick()`). All of this
    can be replaced with a simple lambda expression.
  prefs: []
  type: TYPE_NORMAL
- en: A **Single Abstract Method** (**SAM**), as it is often called, refers to the
    functional method in an interface. The interface typically contains only one abstract
    method that is known as SAM or a functional method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build and run to see the state of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/529b1022-a3fd-4096-896b-e620e549a24c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go ahead and make use of all we've learned so far to in order complete
    work on the game.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio provides a default tool chain that supports most of the JAVA
    8 features, including lambda expressions. It is highly recommended that you use
    the default tool chain and disable all other options such as jackoptions, and
    retrolambda.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a game status check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will work on functions that will help us figure out the
    winner of our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the following function to the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This function is used to check whether the game board is full. Here, we go through
    all the cells on the board and return `false` if any of them are empty. If none
    of the cells are empty, we return `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the `isWinner()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, you check whether the character passed is the winner. The character is
    the winner if it appears three times in either a horizontal, vertical or diagonal
    row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `checkGameStatus()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function makes use of the `isBoardFull()` and `isWinner()` functions
    to determine who the winner of the game is. If neither X nor O has won and the
    board is full, then it's a draw. Show an alert displaying either the winner of
    the game or a message telling the user that the game was a draw.
  prefs: []
  type: TYPE_NORMAL
- en: Next, add a call to `checkGameStatus()` at the end of the `cellClickListener()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60fca23e-aee9-4834-9797-a9bc33c7a48b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, implement the functionality for the **FloatingActionButton**. In the
    `onCreate()` function, replace the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, build and run. Now, when you click the **FloatingActionButton**, the
    board will be cleared for you to restart the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c213cc7-02c2-4256-aac7-5693c4995769.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to work with functions and lambdas in Kotlin
    and completed work on our TicTacToe game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will work on creating a location-based alarm whilst
    learning to use Google location services and how to perform network calls on Android.
  prefs: []
  type: TYPE_NORMAL
