- en: Working with React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first React Native application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Todo List with React Native
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing React Navigation V2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Native is a framework for building mobile apps using JavaScript and React.
    Many people think that with React Native you make some "mobile web app" or a "hybrid
    app" (such as Ionic, PhoneGap or Sencha), but you build a native app because React
    Native converts your React code to Java for Android or Objective-C for iOS apps.
    React Native uses most of the React concepts, such as components, props, state
    and lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Advantages of React Native**:'
  prefs: []
  type: TYPE_NORMAL
- en: You code once, and you get two native apps (Android and iOS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't need to have experience with Java, Objective-C, or Swift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIT license (open source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requirements for Windows**:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android SDK (>= 7.0 Nougat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android AVD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requirements for Mac**:'
  prefs: []
  type: TYPE_NORMAL
- en: XCode (>= 9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first React Native Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to build a React Native application and understand
    the main differences between React and React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create our new React Native application, we need to install the `react-native-cli` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to create our first app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do it with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After we built our React Native app, we need to install Watchman, which is a
    file-watching service required by React Native. To install it, go to [https://facebook.github.io/watchman/docs/install.html](https://facebook.github.io/watchman/docs/install.html) and
    download the latest version for your OS (Windows, Mac, or Linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case, we are going to use Homebrew to install it for Mac. If you don''t
    have Homebrew, you can install it with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Watchman, you need to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the React Native project, we need to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works fine, you should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e35eac32-1884-4536-a5f9-54f4da4d66f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes you can get errors from Watchman, for example,
  prefs: []
  type: TYPE_NORMAL
- en: 'Watchman error: too many pending cache jobs. Make sure watchman is running
    for this project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get that error or another, you have to uninstall Watchman by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brew unlink watchman`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And then reinstall it using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brew update && brew upgrade`'
  prefs: []
  type: TYPE_NORMAL
- en: '`brew install watchman`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal (*Cmd* + *T*) and run this command (depending on the device
    you want to use):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no errors, you should see the simulator running the default application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c3401446-ceb5-4e10-b3cf-05035956e486.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our application running, let''s open our code and modify it
    a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to the simulator again, you will need to press *Cmd* + *R* to reload
    the app to see the new changes reflected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7eee4328-9e21-4817-aa7b-509f29d091eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''re probably wondering if there is a way to do automatic reload instead
    of doing this process manually, and of course, there is a way to enable the Live
    Reload option; you need to press *Cmd* + *D* to open the development menu and
    then select the Enable Live Reload option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bb6d8d70-44a2-46a2-ab0f-056639812a61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another exciting option is Debug JS Remotely. If you click on that one, it
    will automatically open a Chrome tab where we can see the logs we added to our
    application using `console.log`. For example, if I add `console.log(''==== Debugging
    my First React Native App! ===='');` in my render method, I should see it like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a3c376a1-cb8c-43fe-8892-5b62157c4b6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go back to the code. Maybe you are a little bit confused about the code
    you saw in `App.js` because you didn't see a `<div>` tag or even worse the way
    the styles are being created like an object instead of using a CSS file as we
    do in React. I've got some good news and some bad news; the bad news is that React
    Native does not support CSS and JSX/HTML code as React does. The good news is
    that once you understand that the `<View>` component is the equivalent of using
    a `<div>`, `<Text>` is the equivalent of using `<p>`, and the styles are like
    CSS modules (object), everything else works the same as React (props, state, lifecycle
    methods).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new component (`Home`). For this purpose, we have to create a directory
    called components, and then we save this file as `Home.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: components/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `App.js`, we import the `Home` component, and we render it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, creating a new React Native application is very easy but there
    are some key differences between React (using JSX) and React Native using a special
    markup with object styles even there are some limitations on the styles as well,
    for example, let''s create a flex layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: components/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You probably don''t like looking at a huge file (me neither), so let''s separate
    our component and our styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: components/HomeStyles.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then in our `Home` component, we can import the styles and use them in the
    same way as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: components/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/143ec48a-2ad7-448b-976e-385f6f5c2ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: But there is something unusual.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, I created styles for the `<Text>` components (headerText, column1Text,
    and so on), and this is because some styles are not allowed in the View component.
    For example, if you try to add the `color: ''white''` property to the `<View>` component,
    you will see that the property won''t work and Header will have the black text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1ddeecf5-b761-499f-87d7-3232e4eff05f.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Todo List with React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to handle events in React Native and
    how to handle the state by creating a simple Todo list.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, I created a new React Application called "MySecondReactNativeApp":'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `src` folder and move the `App.js` file inside. Also, modify this
    file to include our Todo list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `Todo` component will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/TodoStyles.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we did in our component was set our state. The `task` state
    is for the input to create new items, and the `list` state is to save all the
    tasks items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TextInput` component creates an input element, the main difference from
    the input in React is that instead of using the `onChange` method, it is using
    `onChangeText` and by default gets the value, and we can update our state directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TouchableOpacity` component is to handle click events (`onPress` in React
    Native) and can be used as a button. Maybe you''re wondering why I didn''t use
    the component `Button` directly; this is because on iOS it''s not possible to
    add a background color to the button, it only works with backgrounds on Android.
    Using `TouchableOpacity` (or `TouchableHighlight`), you can personalize the styles,
    and it works perfectly as a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the render of the tasks, I implemented a Zebra style (mixed colors) for
    the tasks. Also, we are handling `onPressDeleteTask` to remove each item by clicking
    the X button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the application, the first thing we are going to see is this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d2f0dae-68e1-4133-8a46-c2c045dc9934.png)'
  prefs: []
  type: TYPE_IMG
- en: If we don't have any tasks, we will see the "There are no tasks yet, create
    a new one!" message.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there is an input on the top that has the "Add a new task" placeholder.
    Let''s add some tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95c20111-0c20-4279-8f72-5234768adff0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we can delete the tasks by clicking on the X; I''ll remove the Pay
    the rent task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f9de4d83-f22e-4816-9327-a31a04995b7e.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see with this basic Todo list, we learned how to use the local state
    and how to handle click and change events in React Native.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to prevent the user from deleting a task by accident, you can add
    an Alert that will ask the user whether they are sure they want to remove the
    selected task. For this, we need to import the Alert component from react-native
    and modify our onPressDeleteTask method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the application and you try to delete a task now, you will see this
    native alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/16f565c9-3af5-4830-8e61-ee002c1821da.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementing React Navigation V2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to implement React Navigation V2 in
    our React Native application. We will create a simple navigation between sections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install the `react-navigation` dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement React Navigation v2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include `createDrawerNavigation` and `DrawerItems` from react-navigation and
    the components we want to render as sections (Home and Configuration):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In CustomDrawerComponent, we will render the Codejobs logo and the menu (you
    can modify this as you need it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `AppDrawerNavigator`, specifying the components we want to display in
    the menu as sections (Home and Configuration). Also, we need to pass `contentComponent`
    with the `CustomDrawerComponent` we created before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the App class and render the `AppDrawerNavigator` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'File: App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the section components; the first one is the Home component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: sections/Home.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the Configuration section component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'File: sections/Configuration.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed we are using the same styles on both components, that''s
    why I created a separate file for the styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: sections/sectionStyles.js'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the assets we are using in the repository (`Chapter14/Recipe3/ReactNavigation/assets`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you did everything correctly, you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a052dd30-f924-435f-a83b-638c45f25c04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first component that is being rendered is the `Home` component. If you
    click on the Hamburger menu, you will see the drawer with the two sections (`Home`
    and `Configuration`) with their respective icons and the Codejobs logo at the
    top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dcc0a03c-da76-4ff7-8c97-6fe3a7c5ae85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, if you click on Configuration, you will see that component as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9f441f0e-0391-41b6-bc7a-e86a6c40dc2f.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the drawer again, you will notice that the current section that is
    open is also active in the menu (in this case, Configuration).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/71b34a74-dd57-455a-a21e-1f1688d78f3b.png)'
  prefs: []
  type: TYPE_IMG
