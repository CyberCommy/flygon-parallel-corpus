- en: Chapter 5. Bringing the Canvas to Life with Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Animation class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a linear motion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an oscillation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oscillating a bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swinging a pendulum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating mechanical gears
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating a clock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating particle physics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating microscopic life forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stressing the canvas and displaying the FPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first half of this book, we covered the fundamental capabilities of the
    HTML5 canvas, including path drawing, shape drawing, working with images and video,
    and transformations. This chapter focuses on animation, which is not a part of
    the HTML5 canvas API. Although the API doesn't provide us with animation functionality,
    we can certainly create an Animation class that can be used to support animation
    projects. We'll cover the essential types of motion including linear motion, accelerations,
    and oscillations, and we'll use what we've learned to create some really awesome
    demos. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Animation class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the HTML5 canvas API doesn't provide methods for animation, we'll have to
    create our own Animation class for handling an animation stage. This recipe will
    cover the basics of animation and provide an Animation class for all of our future
    animation projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As browsers and computer hardware are not created equally, it's important to
    understand that the optimal **FPS** (**Frames Per Second**) value for each animation
    varies depending on the browser, the computer's hardware, and the animation's
    algorithm. Therefore, it would be quite difficult for a developer to figure out
    what the best FPS value is for each user. Fortunately, browsers are now implementing
    a `requestAnimationFrame` method of the `window` object which can automatically
    determine the best FPS for animations (thank goodness). As we'll see later in
    this chapter, a typical FPS value for a smooth animation is somewhere between
    40 and 60 frames per second.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready...](img/1369_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Take a look at the preceding diagram. To create an animation, we first need
    to initialize the objects on our stage. We can refer to the canvas as a "stage"
    because the objects in the canvas that will be moving can be seen as "actors"
    on the stage. Moreover, the stage analogy provides us with a sense that stuff
    is *happening* in the canvas, instead of just sitting there. Once our objects
    are initialized, we can start an animation loop that updates the stage, clears
    the canvas, redraws the stage, and then request a new animation frame.
  prefs: []
  type: TYPE_NORMAL
- en: As this behavior can define any type of animation, it makes a lot of sense for
    us to create an Animation class that handles these steps for us under the covers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create an Animation class which will support the animation
    recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `Animation` constructor and create a cross-browser `requestAnimationFrame`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getContext()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getCanvas()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `clear()` method which clears the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `setStage()` method that sets the `stage()` function. This function
    will execute for each animation frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `isAnimating()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getFrame()` method that returns the frame number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `start()` method that starts the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `stop()` method that stops the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getTimeInterval()` method that returns the time in milliseconds
    between the last frame and the current frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getTime()` method that returns the time in milliseconds that the
    animation has been running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getFps()` method that returns the current FPS of the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `animationLoop()` method that handles the animation loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea of the `Animation` class is to simplify our animation projects by encapsulating
    and hiding all of the logic that animations require, such as providing the time
    interval between frames, handling the animation loop, and clearing the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The key to the `Animation` class is inside the `Animation` constructor, where
    we set the `requestAnimFrame` method of the `window` object. This method acts
    as a cross-browser implementation of the `requestAnimationFrame`, which allows
    the user's browser to decide what the optimal FPS of the animation should be.
    The FPS is completely dynamic and will change throughout the animation.
  prefs: []
  type: TYPE_NORMAL
- en: Our `Animation` class also provides some handy methods such as `getTimeInterval()`,
    which returns the number of milliseconds since the last animation frame, the `getTime()`
    method which returns the number of milliseconds the animation has ran since it
    was started, a `start()` method which starts the animation, a `stop()` method
    which stops the animation, and a `clear()` method which clears the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a working `Animation` class ready for prime time, the rest
    of the animations in this chapter, and your future animation projects as well,
    will be a piece of cake.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a linear motion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll try out our `Animation` class by creating a simple linear
    motion animation by moving a box from the left of the canvas to the right of the
    canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a linear motion](img/1369_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to move a box from one side of the canvas to the other:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the box''s linear speed and create a `box` object that contains the
    box''s position and size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function, which updates the box''s position, clears the canvas,
    and draws the box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a simple linear motion, first we need to instantiate a new `Animation`
    object, and then get the canvas and context. Next, we can define the speed of
    the box, which for this recipe we've set to 100 pixels / second, and we can create
    a `box` object that contains the box's position and size.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our box has been initialized, we can define the `stage()` function
    which will be executed within the animation loop. For each animation loop, we
    can update the position of the box by first calculating the distance that the
    box moved between the last frame and the current frame, and then update the box's
    x position by adding the distance that it travelled. Once the box reaches the
    edge of the canvas, we can stop the animation by calling `stop()`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, once the `stage()` function has been defined, we can start the animation
    with the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating acceleration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a handle on the basics of animation, let's try something a
    little bit more complex by accelerating a box downwards due to the force of gravity.
  prefs: []
  type: TYPE_NORMAL
- en: '![startAnimation() methodCreating acceleration](img/1369_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a box at the top of the canvas which falls downward
    due to the force of gravity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Define gravity and create a `box` object that contains the box''s position,
    x and y velocity, and size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the box, clears the canvas, and draws
    the box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an acceleration, we can increment the velocity of the box, update
    the position of the box with the new velocity, clear the canvas, and then draw
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can calculate the new y velocity of the box for each frame by adding the
    change in velocity due to gravity, which is set to 2 pixels / second^2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can calculate the new y position of the box by adding the distance
    that it travelled since the last frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In other words, the change in y position is equal to the box's velocity multiplied
    by the change in time (the time interval).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can add a condition that checks to see if the box has reached the
    bottom of the canvas, and if it has, we can then stop the animation with the `stop()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Accelerations are particularly useful when applying forces to an object or particle.
    Some examples of applied forces include gravity, air resistance, damping, floor
    friction, and electromagnetic forces. For really intensive animations that require
    a lot of physics, you might consider looking for an open source vector library
    to help handle velocities and accelerations in both the x and y direction.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating oscillation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore the third major type of motion—oscillation. Some
    good examples of oscillations are a bouncing weight attached to a spring, an oscillating
    bubble, or a pendulum that swings back and forth.
  prefs: []
  type: TYPE_NORMAL
- en: '![Craccelerationworkingeating oscillation](img/1369_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to oscillate a box back and forth:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `box` object that contains the box''s position and size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the parameters required for the harmonic oscillation equation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the box''s position based on the harmonic
    oscillation equation, clears the canvas, and then draws the box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the page loads, we can instantiate a new `Animation` object and then get
    the canvas and context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can create a `box` object which defines the box''s position and size,
    and then define the variables required for the equation of harmonic oscillation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: For this recipe, we've set the amplitude `A` to `150`, the period `T` to `2`
    seconds, and the offset `x0` and the phase difference `Φ` to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: For each animation frame, we can leverage the equation for harmonic oscillation
    to update the box's position, clear the canvas, and then draw the box using the
    `rect()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can start the animation using the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oscillating a bubble
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll create a life-like oscillating bubble using the principles
    of harmonic oscillation and canvas transformations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Oscillating a bubble](img/1369_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a life-like oscillating bubble floating in the
    air:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the width and height scale of the
    bubble, clears the canvas, scales the canvas context, and then draws the bubble:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we talk about oscillating a bubble, it's a good idea to first cover how
    we can use canvas transformations to stretch the bubble in both the x and y direction.
    To draw a bubble that has been stretched horizontally, we can translate the context
    to the center of the canvas, scale the context horizontally, and then draw a bubble.
    To draw a bubble that has been stretched vertically, we can translate it to the
    center of the canvas, scale the context vertically, and then draw the bubble.
  prefs: []
  type: TYPE_NORMAL
- en: In order to oscillate the bubble, we need to alternate which direction the canvas
    is scaled in such a way that the horizontal scale and the vertical scale always
    equals a constant, which in our case is 1.8, so that the volume of the bubble
    remains constant. Once this relationship is in place, we can use the equation
    of harmonic oscillation to oscillate both the x and y scale of the bubble.
  prefs: []
  type: TYPE_NORMAL
- en: When the page first loads, we can instantiate a new `Animation` object and get
    the canvas and context. Next, we can set the `stage()` function which is responsible
    for updating the bubble, clearing the canvas, and then drawing the bubble for
    each animation frame. To update the bubble for each frame, we can calculate the
    horizontal and vertical scale of the bubble by using the equation of harmonic
    oscillation. Next, we can clear the canvas, and then draw the bubble using the
    `arc()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, once the `stage()` function has been set, we can start the animation
    with the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scaling the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Transforming a circle into an oval* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swinging a pendulum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the bubble recipe, whose width and height oscillate as a function of
    time, in this recipe we'll create a pendulum whose *angle* oscillates as a function
    of time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Swinging a pendulum](img/1369_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to swing a pendulum back and forth:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate a new `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the properties of the pendulum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the angle of the pendulum, clears
    the canvas, and then draws the pendulum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the page loads, we can instantiate a new `Animation` object and then get
    the canvas and context. Next, we can define the properties of our pendulum, including
    the angular amplitude, the period, the initial angle theta, the pendulum length,
    width, and the center of rotation.
  prefs: []
  type: TYPE_NORMAL
- en: Once our pendulum has been initialized, we can set the `stage()` function which
    will update the pendulum angle with the equation of harmonic oscillation, clear
    the canvas, and then immediately redraw the pendulum.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a pendulum by drawing a couple of circles at the rotation point,
    drawing a thick line from the rotation point to the weight of the pendulum to
    form the shaft, and then drawing a big circle at the end of the line that has
    a nice diagonal gray gradient to create the illusion of a polished surface.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `stage()` function has been set, we can start the animation with the
    `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a line* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with custom shapes and fill styles* in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating mechanical gears
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the mechanics and engineers out there, this one's for you. In this recipe,
    we'll create a system of interconnected rotating gears.
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating mechanical gears](img/1369_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to animate a system of interconnected gears:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the constructor for the `Gear` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `draw` method of the `Gear` class which draws a `gear` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Build an array of `gear` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the rotation of each gear, clears
    the canvas, and then draws the gears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a system of rotating gears, we can reuse the gear drawing procedure
    from [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites") and create
    a `Gear` class that has some additional properties such as number of teeth, color,
    theta, and theta speed. `theta` defines the angular position of the gear and `thetaSpeed`
    defines the angular speed of the gear. We can also add a `clockwise` property
    to the `Gear` class that defines the direction of the gear rotation.
  prefs: []
  type: TYPE_NORMAL
- en: Once the page loads, we can instantiate a new `Animation` object and get the
    canvas and context. Next, we can initialize some gears by instantiating `Gear`
    objects and pushing them onto the gears array. Now that our stage is initialized,
    we can set the `stage()` function which will update the angle of each gear, clear
    the canvas, and then draw each of the gears using the `draw()` method of the `Gear`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the `stage()` function has been set, we can start the animation with
    the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating patterns with loops: drawing a gear* in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating a clock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those of you who slip into a trance when you're developing cool projects,
    where time seems to melt away, this one's for you. In this recipe, we'll create
    a nifty animated clock to remind us of the real-world time outside of cyber space.
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating a clock](img/1369_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to animate the hour, minute, and second hands on a clock:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object, get the canvas context, and define the clock
    radius:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which gets the current time, calculates the angle
    for the hour hand, minute hand, and second hand, clears the canvas, and then draws
    the clock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the page loads, we can instantiate a new `Animation` object and then get
    the canvas and context. Next, we can start defining the `stage()` function which
    is responsible for updating the clock, clearing the canvas, and then drawing the
    clock for each animation loop.
  prefs: []
  type: TYPE_NORMAL
- en: In the update portion of the code, we can instantiate a new `Date()` object
    and then get the hours, minutes, and seconds. Next, we can adjust the hour and
    minute to represent a 12-hour time (AM and PM).
  prefs: []
  type: TYPE_NORMAL
- en: 'After clearing the canvas, we can begin drawing the clock:'
  prefs: []
  type: TYPE_NORMAL
- en: Translate the canvas context to the center of the canvas with the `translate()`
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw the body with the `arc()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a loop that draws the numbers of the clock around the edge with the `fillText()`
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply a drop shadow with the `shadowOffsetX` and `shadowOffsetY` properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw the clock rim by stroking the circle with `stroke()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw each of the clock hands by rotating the canvas context and then drawing
    a thin trapezoid whose thickest end resides at the center.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, once the `stage()` function has been set, we can start the animation
    with the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with custom shapes and fill styles* in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating particle physics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've covered the basics of classical physics, let's put it all together.
    In this recipe, we'll simulate particle physics by modeling gravity, boundary
    conditions, collision damping, and floor friction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Simulating particle physics](img/1369_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to launch a particle inside the canvas and observe it''s
    projectile path as it bounces on the walls, gradually falls down to the floor
    due to gravity, and then slows to a stop due to floor friction:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `applyPhysics()` function which takes a particle as input and updates
    its position and velocity based on physics variables such as gravity, collision
    damping, and floor friction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate a new `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize a `particle` object with a position, x and y velocity, and radius:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the particle by passing it to the
    `applyPhysics()` function, clears the canvas, and then draws the particle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To simulate particle physics, we need to handle the particle's x and y position
    and the particle's velocity in both the x and y direction for each frame. The
    key to understanding particle physics simulations is to remember that the movement
    of the particle in the system is based on the sum of all the forces acting on
    the particle. In our case, gravity will be pulling the particle downwards, collisions
    against the walls, ceiling, and floor will reduce the particle's velocity according
    to the collision damper constant, and floor friction will reduce the particle's
    horizontal speed when it rolls on the floor.
  prefs: []
  type: TYPE_NORMAL
- en: To start off, when the page loads we can instantiate a new `Animation` object
    and then get the canvas and context. Next, we can initialize a particle with a
    position, initial velocity, and size. Now that we've initialized the actors on
    the stage (the particle), we can set the `stage()` function which will update
    the particle, clear the canvas, and then draw the particle for each animation
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: The update logic happens inside the `applyPhysics()` function, which is passed
    a reference to the `Animation` object, and also the `particle` object. The `applyPhysics()`
    function walks through a list of conditions that updates the particle's position
    and velocity.
  prefs: []
  type: TYPE_NORMAL
- en: After the `applyPhysics()` function has been called and the particle has been
    updated, we can clear the canvas and then draw the particle by drawing a simple
    circle whose radius is equal to the radius of the particle.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, once the `stage()` function has been set, we can start the animation
    with the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you really wanted to get fancy, you could even add additional forces such
    as air resistance. As a general rule of thumb, the more forces that you add to
    a particle simulation, the more life-like it becomes. You can play around with
    different initial positions and velocities to see different projectile paths.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating microscopic life forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever seen microscopic life forms in a microscope and observed how they
    wiggle around? This recipe is inspired by the alien-like world of micro-organisms.
    In this recipe, we'll create 100 random microbes and let them loose in the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating microscopic life forms](img/1369_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create wiggling microbes moving inside the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandColor()` function that returns a random color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandTheta()` function that returns a random theta:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `updateMicrobes()` function that updates `microbe` objects by adding
    a new head segment with a randomly generated angle to each microbe, and then removing
    the tail segment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawMicrobes()` function that draws all of the microbes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize 100 microbes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function that updates the microbes by calling the `updateMicrobes()`
    function, clears the canvas, and then draws the microbes by calling the `drawMicrobes()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a micro-organism, we can draw a series of connected segments to create
    a short snake-like creature. We can represent a micro-organism as an object containing
    a head position and an array of angles. These angles represent the angle between
    segments.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe initializes 100 randomized micro-organisms and positions them in
    the center of the canvas. Our `stage()` function contains the `updateMicrobes()`
    and `drawMicrobes()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `updateMicrobes()` function loops through all of the microbe objects, adds
    a new head segment, and removes the tail segment for each microbe. In this way,
    the segments of each microbe will wiggle as they move across the canvas. When
    the head of a microbe hits the edge of the canvas, its angle will be increased
    by 90 degrees so that it bounces back into the canvas area.
  prefs: []
  type: TYPE_NORMAL
- en: The `drawMicrobes()` function loops through all of the `microbe` objects, positions
    the drawing cursor at the head for each microbe, and then draws 20 line segments
    according to the angle of each segment.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a spiral* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a drawing application* in [Chapter 6](ch06.html "Chapter 6. Interacting
    with the Canvas: Attaching Event Listeners to Shapes and Regions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stressing the canvas and displaying the FPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After seeing the last recipe, you might be thinking "Is there a limit to how
    many microbes we can animate?" The straightforward answer to this question is
    yes. As the 2D context of the HTML5 canvas is not hardware-accelerated, and as
    our animations are driven purely by JavaScript, there is definitely a point where
    the browser will start to choke if it's working overtime. To illustrate this,
    we can draw the FPS of our animation and observe the relationship between the
    number of microbes on the screen and the FPS value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stressing the canvas and displaying the FPS](img/1369_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to stress the canvas and display the FPS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the `Animation` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawFps()` function that draws the FPS value in the top-right corner
    of the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandColor()` function that returns a random color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getRandTheta()` function that returns a random theta:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `updateMicrobes()` function that updates `microbe` objects by adding
    a new head segment with a randomly generated angle to each microbe and then removing
    the tail segment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawMicrobes()` function that draws all of the microbes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate an `Animation` object and get the canvas context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize 1,500 microbes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stage()` function which updates the microbes, updates the FPS value
    every 10 frames, clears the canvas, and then draws the microbes and the FPS value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw the FPS of the animation, we can create the `drawFps()` function that
    takes in an FPS value as input, draws a black box in the upper-right corner of
    the canvas, and then writes out the FPS value. To avoid updating the FPS too frequently,
    we can store a copy of the FPS value in the variable `FPS`, and update it every
    10 frames. In this way, the FPS will update, at the most, six times per second.
  prefs: []
  type: TYPE_NORMAL
- en: To stress the canvas, we can simply initialize more microbes. In this recipe,
    we've initialized 1,500 microbes. If you try out the code for yourself, you can
    play with different numbers to see how the FPS is affected.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, a typical animation should run at about 40 to 60 FPS.
    If the FPS drops below 30, you'll start to notice a slight lag in the animation.
    When testing in Google Chrome on a 32-bit Windows 7 machine with a 2.2 GHz AMD
    processor and 2 GB of RAM (yes I know, I need to upgrade), I was seeing about
    5 FPS when animating 1,500 microbes. It doesn't look bad, but it's not great.
    When animating 2,000 microbes or more, the animation starts to look unacceptably
    choppy.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all of the animations that we've created with the 2D context perform
    great on desktops and laptops. However, if you find yourself in a situation where
    your animations are computationally expensive enough that they aren't performing
    well in the 2D context, you might consider using WebGL instead (we'll cover WebGL
    in [Chapter 9](ch09.html "Chapter 9. Introducing WebGL"), *Introduction to WebGL*).
    Unlike the 2D context, WebGL leverages hardware acceleration. At the time of writing,
    the 2D context in all of the major browsers does not utilize hardware acceleration.
    Using WebGL does come at a cost, however, because it's much more difficult to
    develop and maintain WebGL animations than it is to create 2D context animations.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a spiral* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a drawing application* in [Chapter 6](ch06.html "Chapter 6. Interacting
    with the Canvas: Attaching Event Listeners to Shapes and Regions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
