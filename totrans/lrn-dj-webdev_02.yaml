- en: Chapter 2. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python and Django are available for multiple platforms. In this chapter, we
    will see how to set up our development environment on UNIX/Linux, Windows, and
    Mac OS X. We will also see how to create our first project and connect it to a
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the database system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the development server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the required software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our development environment consists of Python, Django, and a database system.
    In the following sections, we will see how to install these software packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django is written in Python, so naturally, the first step in setting up our
    development environment is to install Python. Python is available for a variety
    of operating systems, and installing Python is no different from installing other
    software packages. The procedure, however, depends on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: For installation, you need to make sure that you get a recent version of Python.
    Django requires Python 2.7 or higher. The latest version of Python is 3.4.2 for
    3.x and 2.7.9 for 2.x versions.
  prefs: []
  type: TYPE_NORMAL
- en: Please read the section relevant to your operating system for installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python has a standard installer for Windows users. Simply head to [https://www.python.org/download/](https://www.python.org/download/)
    and download the latest version. Next, double-click on the `.exe` or `.msi` file
    and follow the installation instructions step by step. The graphical installer
    will guide you through the installation process and create shortcuts to Python
    executables in the Start menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done with the installation, we need to add the Python directory to the
    system path so that we can access Python while using the Command Prompt. To do
    so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Control Panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **System and Security** icon or text and then look for **System**
    (as seen in Windows 7), as shown in the following screenshot:![Installing Python
    on Windows](img/image00266.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Advanced System Settings** and a pop-up window will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environment Variables** button and a new dialog box will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Path** system variable and edit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Append the path to where you installed Python as its value (the default path
    is usually `c:\PythonXX`, where `XX` is your Python version), as shown in the
    following screenshot:![Installing Python on Windows](img/image00267.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to test your installation, open the **Run** dialog box, type `python`,
    and hit the *Enter* button. The Python interactive shell should open.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to separate the new path from the one before it with a semicolon
    (`;`).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Unix/Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you use Linux or another flavor of Unix, chances are that you already have
    Python installed. To check, open a terminal, type `python`, and hit the *Enter*
    button. If you see the Python interactive shell, you already have Python installed.
    You should get the following output after typing `python` in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing Python on Unix/Linux](img/image00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first line of the output indicates the version installed on your system
    (2.7.6, here).
  prefs: []
  type: TYPE_NORMAL
- en: If you receive an error message instead of seeing the preceding output, or have
    an old version of Python, please read on.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that Unix/Linux users install and update Python through the
    system's package manager. Although the actual details vary from system to system,
    it won't be any different from installing any other package.
  prefs: []
  type: TYPE_NORMAL
- en: 'For APT-based Linux distributions, such as **Debian** and **Ubuntu**, open
    a terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you have **Synaptic Package Manager**, simply search for Python, mark its
    package for installation, and click on the **Apply** button.
  prefs: []
  type: TYPE_NORMAL
- en: Users of other Linux distributions should check their system documentation for
    information on how to use the package manager to install packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Mac OS X
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mac OS X comes with Python preinstalled. However, due to Apple's release cycle,
    it's often an old version. If you start the Python interactive shell and find
    a version older than 2.3, please visit [http://www.python.org/download/mac/](http://www.python.org/download/mac/)
    and download a newer installer for your version of Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Python is up and running, we are almost ready. Next, we will install
    **virtualenv**.
  prefs: []
  type: TYPE_NORMAL
- en: Installing virtualenv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With virtualenv you can create an isolated Python environment. It's not much
    of a need in the beginning, but it's a lifesaver for dependency management (for
    example, if one of your web applications requires one version of the library and
    another application, due to some legacy or compatibility issues, requires another
    version of the same library, or if changes made in one library or application
    break the rest of the applications).
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtualenv can be used to avoid such problematic situations. It will create
    its own environment so that it will not mess with your global settings. It usually
    creates its own directories and shared libraries to make virtualenv work without
    any external interference. If you have **pip 1.3** or greater, install it globally.
    You can use the following command to install virtualenv:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing virtualenv](img/image00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it has been downloaded fully, virtualenv will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing virtualenv](img/image00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have not installed pip yet, you can install it with `sudo apt-get install
    python-pip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all! Now you can create your virtual environment by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing virtualenv](img/image00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Virtualenv has very detailed online documentation, which you must follow for
    any kind of issue faced while using virtualenv. The following lines are an excerpt
    from that online documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*This creates `ENV/lib/pythonX.X/site-packages`, where any libraries you install
    will go. It also creates `ENV/bin/python`, which is a Python interpreter that
    uses this environment. Anytime you use that interpreter (including when a script
    has `#!/path/to/ENV/bin/python` in it) the libraries in that environment will
    be used.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can find the virtualenv online documentation at [https://pypi.python.org/pypi/virtualenv/1.8.2](https://pypi.python.org/pypi/virtualenv/1.8.2).
  prefs: []
  type: TYPE_NORMAL
- en: A new `virtualenv` folder also includes the pip installer, so you can use the
    `ENV/bin/pip` command to install additional packages into the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Activate script**: In a newly created virtual environment there will be a
    `bin/activate` shell script. For Windows systems, activate scripts are provided
    for **CMD** and **Powershell**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Unix systems, we can use the following command to activate the `virtualenv`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing virtualenv](img/image00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On Windows, we can use the following command to activate the `virtualenv` script
    on the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Type `deactivate` to undo the changes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing virtualenv](img/image00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This changes your `$PATH` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more about activate scripts, such as which environment you are using
    or whether you need to activate the script, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://virtualenv.readthedocs.org/en/latest/virtualenv.html](http://virtualenv.readthedocs.org/en/latest/virtualenv.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Django is very easy, but it depends slightly on your operating system.
    Since Python is a platform-independent language, Django has one package that works
    everywhere regardless of your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: To download Django, head to [http://www.djangoproject.com/download/](http://www.djangoproject.com/download/)
    and grab the latest official version. The code in this book is developed on Django
    1.7 (the latest as of this writing), but most of the code should run on later
    official releases. Next, follow the instructions related to your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Django compatibility with operating systems – Windows versus Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few points you need to know for when you deal with operating systems.
    Many packages and settings need to be tweaked before running Django without any
    flaws. Let''s take a look at them:'
  prefs: []
  type: TYPE_NORMAL
- en: Some Python packages cannot be installed correctly, or at all in Windows; if
    they can, they will create a lot of hassle when you do
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to deploy your Django application, it makes more sense to use a
    Unix-flavored system, simply because 99 percent of the time, your deployment environment
    is the same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your applications are complex, it's easier to get the required dependencies,
    be they extensions in Linux, libraries, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Django on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you have downloaded the Django archive, extract it to the C drive and
    open the command prompt (from **Start** | **Accessories**). Now, change the current
    directory to where you extracted Django from by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x.xx` is your Django version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, install Django by running the following command (you will need administrative
    privileges for this):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not have a program to handle the `.tar.gz` files on your system, I
    recommend using **7-Zip**, which is free and available at [http://www.7-zip.org/](http://www.7-zip.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If, for some reason, the preceding instructions didn't work, you can manually
    copy the `django` folder inside the archive to the `Lib\site-packages` folder
    located in the Python installation directory. This will do the job of running
    the `setup.py` installation command.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is copying the `django-admin.py` file from `Django-x.xx\django\bin`
    to somewhere in your system path, such as `c:\windows` or the folder where you
    installed Python.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, you can safely remove the `c:\Django-x.xx` folder because it is no
    longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! To test your installation, open a command prompt and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you see the current version of Django printed on screen, then everything
    is set.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django on Unix/Linux and Mac OS X
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The installation instructions for all Unix and Linux systems are the same.
    You need to run the following commands in the directory where the `Django-x.xx.tar.gz`
    archive is located. These commands will extract the archive and install Django
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions should work on any Unix/Linux system, as well as
    Mac OS X. However, it may be easier to install Django through your system''s package
    manager if it has a package for Django. Ubuntu has one; so to install Django on
    Ubuntu, simply look for a package called `python-django` in Synaptic, or run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can test your installation by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you see the current version of Django printed on screen, then everything
    is set.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a database system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Django does not require a database to function, the application we are
    going to develop does. So, in the final step of software installation, we are
    going to make sure that we have a database system for handling our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth noting that Django supports several database engines: **MySQL**,
    **PostgreSQL**, **MS SQL Server**, **Oracle**, and **SQLite**. Interestingly,
    however, you only need to learn one API in order to use any of these database
    systems. This is possible because of Django''s database layer that abstracts access
    to the database system. We will learn about this later, but, for now, you only
    need to know that, regardless of what database system you choose, you will be
    able to run Django applications developed in this book (or elsewhere) without
    modification.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have Python 2.7 or higher, you don't need to install anything. Python
    2.7 comes with the SQLite database management system contained in a module named
    `sqlite3`. Unlike client-server database systems, SQLite does not require a resident
    process in memory and it stores the database in a single file, which makes it
    ideal for our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have Python 2.7, you can install the Python module for SQLite manually
    by downloading it at [http://www.pysqlite.org/](http://www.pysqlite.org/) (Windows
    users) or through your package manager (Unix/Linux).
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you already have another Django-supported database server
    installed on your system, you can also use this. We will tell Django what database
    system to use by editing a configuration file, as we will see in later sections.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Don''t I need Apache or some other web server?**'
  prefs: []
  type: TYPE_NORMAL
- en: Django comes with its own web server, which we are going to use during the development
    phase because it is lightweight and comes pre-configured for Django. However,
    Django does support Apache and other popular web servers, such as light tpd, nginx,
    and so on. We will see how to configure Django for Apache when we prepare our
    application for deployment later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies to the database manager. During the development phase, we will
    use SQLite because it is easy to set up, but when we deploy the application, we
    will switch to a database server such as MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: As I said earlier, regardless of what components we use, our code will stay
    the same; Django handles all the communication with the web and database servers
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now with the software we need in place, the time has come for the fun part–creating
    our first Django project!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you recall from the Django installation section, we used a command called
    `django-admin.py` to test our installation. This utility is the heart of Django''s
    project management facilities, as it enables the user to do a range of project
    management tasks, including these:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing the project's database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating the current project and testing for errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the development web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see how to use some of these tasks in the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create your first Django project, open a terminal (or Command Prompt for
    Windows users; that is, **Start** | **Run** | **cmd**), and type the following
    command. Then, hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will make a folder named `django_bookmarks` in the current directory
    and create the initial directory structure inside it. Let''s see what kind of
    files are created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a quick explanation of what these files are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__init__.py`: Django projects are Python packages, and this file is required
    to tell Python that this folder is to be treated as a package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A package in Python's terminology is a collection of modules, and they are used
    to group similar files together and prevent naming conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '`manage.py`: This is another utility script used to manage our project. You
    can think of it as your project''s version of the `django-admin.py` file. Actually,
    both `django-admin.py` and `manage.py` share the same backend code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settings.py`: This is the main configuration file for your Django project.
    In it, you can specify a variety of options, including the database settings,
    site language(s), what Django features need to be enabled, and so on. Various
    sections of this file will be explained as we progress with building our application
    during the next chapters, but for this chapter, we will only see how to enter
    the database settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url.py`: This is another configuration file. You can think of it as a mapping
    between the URLs and Python functions that handle them. This file is one of Django''s
    powerful features, and we will see how to utilize it in the next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we start writing code for our application, we will create new files inside
    the project's folder; so the folder also serves as a container for our code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a general idea of the structure of a Django project, let's
    configure our database system.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will start working with setting up the database with various
    options and configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now that we have a source code editor ready, let''s open the `settings.py`
    file in the project folder and see what it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you may have already noticed, the file contains a number of variables that
    control various aspects of the application. Entering a new value for a variable
    is as simple as doing a Python assignment statement. In addition, the file is
    extensively commented, and comments explain what variables control in detail.
  prefs: []
  type: TYPE_NORMAL
- en: What concerns us now is configuring the database. As mentioned before, Django
    supports several database systems, so first of all, we have to specify what database
    system we are going to use. This is controlled by the `DATABASE_ENGINE` variable.
    If you have SQLite installed, set the variable to `'sqlite3'`. Otherwise, pick
    the value that matches your database engine from the comment next to the variable
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the database name. Keep the database name default, as it is. On the
    other hand, if you are using a database server, you need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the relevant information for the database: username, password, host,
    and port. (SQLite does not require any of these.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the actual database inside the database server, as Django won't do this
    by itself. In MySQL, for example, this is done through the `mysql` command line
    utility or phpMyAdmin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we will tell Django to populate the configured database with tables.
    Although we haven''t created any tables for our data yet (and won''t do so until
    the next chapter), Django requires several tables in the database for some of
    its features to function properly. Creating these tables is as easy as issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If everything is correct, status messages will scroll on the screen, indicating
    that tables are being created. When prompted for the superuser account, enter
    your preferred username, email, and password. If, on the other hand, the database
    is misconfigured, an error message will be printed to help you troubleshoot the
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: With this done, we are ready to launch our application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using python manage.py**'
  prefs: []
  type: TYPE_NORMAL
- en: When running a command that starts with `python manage.py`, make sure that you
    are currently in the project's directory where `manage.py` is located.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the development server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed before, Django comes with a lightweight web server for developing
    and testing applications. This server is pre-configured to work with Django, and,
    more importantly, it restarts whenever you modify the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the server, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open your browser and navigate to this URL: `http://localhost:8000/`.
    You should see a welcome message, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the development server](img/image00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have created and configured your first Django project.
    This project will be the base on top of which we will build our bookmarking application.
    During the next chapter, we will start developing our application, and the page
    displayed by the web server will be replaced by something we wrote ourselves!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you may have noticed, the web server runs on port 8000 by default. If you
    want to change the port, you can specify it on the command line by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the development server is only accessible from the local machine by default.
    If you want to access the development server from another machine on your network,
    use the following command-line arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have prepared our development environment, created our first
    project, and learned how to launch the Django development server. We learned how
    to install Django and virtualenv in Windows and Linux. We learned the basic mechanisms
    of how Django settings work and even learned how to install a database.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to start building our social bookmarking application! The next
    chapter takes you through a tour of the main Django components and develops a
    working prototype for our bookmark sharing application. It's going to be a fun
    chapter with many new things to learn, so keep reading!
  prefs: []
  type: TYPE_NORMAL
