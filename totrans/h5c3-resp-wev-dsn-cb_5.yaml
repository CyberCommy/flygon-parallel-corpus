- en: Chapter 5. Making Mobile-first Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Using the Safari Developer Tools' User Agent switcher
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Masking your user agent in Chrome with a plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using browser resizing plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning the viewport and its options
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tags for jQuery Mobile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a second page in jQuery Mobile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a list element in jQuery Mobile
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a mobile native-looking button with jQuery Mobile
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a mobile stylesheet for mobile browsers only using the media query
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding JavaScript for mobile browsers only
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus our efforts on mobile-first Responsive Design.
    By this, we mean first designing your site for the mobile device, and then applying
    variation or even a wholly different look for the desktop. We'll cover a few recipes
    on jQuery Mobile, a free and open source library of mobile UI elements and widgets.
    In addition, we'll build some client-side scripting to handle a unique look only
    for mobile devices.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Using the Safari Developer Tools' User Agent switcher
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For developing mobile-first applications, you will need to deploy them locally
    and test the various features you have developed. Many of the responsive web recipes
    we have worked on so far relied on media queries to determine layout based on
    size to deliver the optimized view of your site. This is not the only way in which
    apps can deliver mobile layout, there are more. One method is, by sniffing the
    **user agent**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You may already know about the user agent, but let's assume you don't. Besides,
    knowing everything already simply defeats the purpose of buying the book, now
    doesn't it? The user agent exists in the request header and identifies the client
    software making the request. It contains information about your processor, operating
    system version, browser, rendering engine, IP address, and other identifying information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: According to the needs of the project or the preference of the developer, some
    websites are designed to display different template files for mobile devices,
    or based on other details of the user agent data. This method requires a different
    server or client intelligence to read the user agent and interpret its data to
    deliver the presentation for that scenario.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: So you've created a new web application, and the software displays the mobile
    template when the user agent details a mobile device. However, you want to be
    able to test it on the fly and not have to spin up a web server, so the next best
    thing is to use the user agent masking feature in Safari.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Using the Safari browser user agent switcher is a win-win, because not only
    does it mimic the user agent of the mobile Safari browser on iOS devices, but
    it also mimics the user agent of the Android browsers. So you can be at peace
    because the Android user agent was changed to say that it is also Mobile Safari,
    just to make your life easier. Wasn't that nice of them?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a good practice to clearly specify in your scope of work which browsers
    and user agents you will be testing for.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On an Apple computer, it's already installed. You are ahead of the game. So
    hang on while the Windows people catch up.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: It looks unlikely that Apple will continue developing Safari for Windows. In
    fact, when you search for `Safari Windows`, the first link is not to the Safari
    homepage, but to an Apple support page with a link to the last Safari for Windows
    version, Safari 5.1.7 for Windows, not to the latest version (Version 6). But
    for the point of the recipe, let us continue.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, open the Safari browser; you will want to go to a website that works
    as a demonstration for reading the user agent. Go to [http://whatsmyuseragent.com](http://whatsmyuseragent.com),
    and the page will show you details of your user agent.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'In Safari, go to **Safari** | **Preferences**, or press *Command* `+` *,*.
    In the **Advanced** tab, select the **Show Develop menu in menu bar** checkbox.
    You can see this illustrated in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_05_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Now the menu bar shows the menu option **Develop**. Click on it and select
    **user agent**; a sub menu appears with different user agent options. There are
    a number of useful options here, but for this recipe, the most contextually useful
    ones are **Safari iOS 5.1 - iPhone** and **Safari iOS 5.1 - iPad** (it is very
    likely that you may have a version other than Version 5.1). This is demonstrated
    in the next screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_05_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'Select one of the iOS versions; the page will automatically be refreshed. You
    will now see the new user agent information, as illustrated in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_05_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I know it doesn't look like much happened, but what did happen was pretty big.
    The browser gave the server information about your computer and browser, and it
    served you a different web page as a result. You could build logic that delivers
    a special stylesheet, template, scripts, or completely different page content
    for mobile browsers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Masking your user agent in Chrome with a plugin
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Chrome browser is rich with a multitude of plugins that you can use for
    just about any purpose under the sun. Let's explore a user-agent masking plugin
    to mask your user agent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Why would you want to "mask" your user agent? Isn't that dishonest? Okay I'll
    admit it, it is. But here is one of the few cases where the ends genuinely justify
    the means. Besides, there's no harm done; it's not like the server figures out
    that your browser was lying to it and feels deceived and hurt. Masking your user
    agent gives you the power to convince the web server that your desktop browser
    is really a mobile browser. If the server believes you are using a mobile browser
    and its logic dictates that it should deliver a mobile version, then that's what
    you will get.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to find a way to be able to toggle between different user agents, and
    we want it to be really simple. In fact, we want it to be a button on the browser
    that we can press and switch. So where will we get this awesome bit of technological
    trickery? At the Chrome Web Store!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: I've tried a few different Chrome browser plugins and have found one that has
    become a favorite in my responsive toolkit. The **User-Agent Switcher** for Chrome
    offers a snappy method to toggle between a comprehensive list of user agents.
    To get it, take the easier path and do a search for `Google UA Spoofer`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first search result should be a link to the User-Agent Switcher in the Chrome
    Web Store. If it is, go to it and click on the **ADD TO CHROME** button. That's
    all you need to do to install it. Using it will be easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Now look at the topmost section of your browser, to the right of the address
    bar, and find a new icon in the shape of a tiny mask. When you click on it, a
    menu of different browsers pops up, with submenus for available versions. We tested
    it, it is easy. See the following screenshot for proof:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Chrome User Agent Spoofer browser plugin intercepts the normal browser user
    agent information in the request header and replaces it with the spoofed user
    agent information. So far, we've merely discussed how to test the user agent spoofer.
    How you will design your site to handle different user agents is a completely
    different subject.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: To see it in action, go to [http://whatsmyuseragent.com/](http://whatsmyuseragent.com/)
    and then toggle the browser plugin, from **iOS** to **iPhone**. You will see the
    user agent information change to **iPhone**. Try some more experiments and see
    how the masked user agent affects your favorite sites.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at some of the various popular sites around the Web and you'll see
    how they handle different user agents. Some serve a different theme, while some
    redirect your browser to a subdomain for their mobile version. For example, [http://facebook.com](http://facebook.com)
    redirects to [http://m.facebook.com/?_rdr](http://m.facebook.com/?_rdr) for the
    iOS user agent, and [https://plus.google.com/](https://plus.google.com/) redirects
    to [https://plus.google.com/app/basic/stream](https://plus.google.com/app/basic/stream)
    for a mobile version of their site.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the masked user agent displays the page
    differently:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5442OT_05_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Using browser resizing plugins
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be frank with you; this recipe is about installing and using the browser
    resizing plugin that I use. If you have a better one, tell me about it. The one
    I have chosen after searching is called "Window Resizer".
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Apart from testing on the target device, resizing the window with the plugin
    is the most accurate method of testing your media query. It is, however, only
    part of the testing you should put your responsive site through. Be sure to test
    it with emulators, and of course, actual devices, before deploying it. There's
    nothing worse than deploying a live site and watching it crash and burn after
    someone brings it to your attention.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google is your friend. Search for `Window Resizer`. The first search result
    should be the Window Resizer plugin in the Chrome Web Store. There it is, like
    a beacon in the night! It has five stars, it's free; how could you not have clicked
    on that link already?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will find yourself at the install page in the Chrome Web Store if you have
    gone along with me. You will see an attractive, wide, and calming deep blue button
    that says **+ ADD TO CHROME**. You are drawn to it and feel the need to click
    on it. You see in the blue, the sky at night that you look up to and wonder how
    far you will travel one day. You think about all the different sizes your browser
    could be. You think about the pain you feel while dragging the corners of your
    window, trying to guess its size. You can't take it anymore. Click on the button!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: A flutter of movement across your browser window indicates that changes are
    being made. In the end, the blue button turns green. You are done here.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: In your browser window, a new icon that looks like a tiny browser window has
    found its home on the right-hand side of your address field. Curiosity dictates
    that you need to know what this thing can do.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: This is a virtually perfect way to test different media queries and responsive
    versions of your website, second only to testing it directly on the target device.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the button to test your responsive designs to pixel-perfect precision.
    When you click on it, it unveils a list of different browser window sizes. Each
    one is perfectly measured and will bend your browser''s size according to your
    will. The browser plugin does all of the guesswork and precise measuring for you,
    as it directly affects the browser window size at the click of a button! See the
    following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5442OT_05_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Learning the viewport and its options
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If nothing else, it can be said that the purpose of the viewport is to tame
    the mobile browser window. The viewport is vital to determining how your mobile
    browser renders the mobile web page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using an Apple computer, an iOS simulator can be obtained by downloading
    Xcode from Apple. It is part of the Xcode package. I usually get to it by using
    Spotlight. Press *Command* + the Space bar; the Spotlight search field appears
    in the top-right corner of your screen. Start typing in `iOS Simulator`, and it
    will appear in the search results. Click on it to spin up the iOS simulator.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open up one of the responsive projects that you've done from a previous recipe
    project. I suggest opening up the [resp-width-layout-media-query.html](http://resp-width-layout-media-query.html)
    project from the *Creating a responsive width layout with media query* recipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: To get an iOS simulator for Windows, you'll need to find one on the Web. After
    searching, I found a good one at [http://iphone4simulator.com/](http://iphone4simulator.com/),
    and another at [http://iphonetester.com/](http://iphonetester.com/). To use them,
    you'll need to upload your project files to a web host before this web simulator
    can view it. The simulator cannot read files from your local hard drive, unless
    you are running a local web server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'First, for comparison, view the file in your browser. Then in your iPhone simulator,
    enter the URL of the files, and you''ll discover the shock and horror of seeing
    your site looking just like the desktop version. I experienced the same frustration
    when my early responsive projects did not work the way I wanted them to. The problem
    is that the mobile browser does not know what size you want it to be. It is smart
    but not clever. Like all software, it needs good instructions. So take a deep
    breath and we will fix it together. The problem is illustrated in the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_05_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'You can tell the mobile browser what it should do by configuring the viewport.
    First add the simple viewport `<meta>` tag:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Before we go any further, I should tell you about this caveat. If you don't
    intend to do a design for the mobile device, then leave out the viewport `<meta>`
    tag. It can cause unintended consequences on your page delivery. In fact, it might
    just show a sliver of your page and not allow the viewer to pan out our scroll
    to view the whole page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Now we will discuss its options. First, the width; I'm a big fan of the K.I.S.S.
    principle (keep it short and simple). Unless you have a reason for specifying
    a particular width, enter the device width as the viewport width. This way, it
    will read the device width and set that as the page width. Setting a specific
    width, `1000px` for example, will look okay on your iPad, but on your phone devices
    it will render too wide and nullify the media queries smaller than that width.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you''ve made the change, open your iOS simulator''s browser and view the
    file. You can see the fixed version in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_05_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Next, let's talk about scaling. Let's assume you have no special request to
    do anything weird, like starting the scale with any value other than one. Add
    to the viewport `<meta>` tag, the initial scale value of `1`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Okay, I know I said don't do anything weird, but just for demonstration, change
    your initial scale to `2`. Refresh your screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Next, change it to `0.4`. Remember this is just for demonstration. Please refresh
    your screen again. In the portrait view, you can see that the web page uses the
    small screen media query. Now, change the orientation of the simulator to bring
    it to landscape mode. You will now see that the larger media query is active.
    That was an interesting experiment; now change your initial scale back to `1`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Finally, do you want your viewers to be able to zoom in and out using the multi-touch
    pinch? Use the meta attribute `maximum-scale` to limit how much zooming you want
    to allow. Set the maximum scale to `1` if you want to disallow zooming.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The viewport `<meta>` tag was included in the Safari Mobile browser by Apple
    initially, and was then added to other browsers. It is used to define the width
    the page should be read in. When the browser sees the viewport `<meta>` tag with
    the width attribute defined, it loads the page at the scale defined in that width
    setting, coupled with the initial scale attribute.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Adding tags for jQuery Mobile
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe jumps deep into a new area of responsive design, that is, mobile-first.
    Mobile-first, in a nutshell, means that you would first design for a mobile version
    of the site and then make modifications for the desktop. Now, this does not mean
    that you are designing a "mobile only" website, only that designing your layouts
    and styles for mobile comes first.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Mobile-first may require rethinking your designs, or at least designing from
    a different perspective. But isn't change good? Can't we all improve our design
    skills by trying out new approaches? Isn't Darwinism merely the survival of those
    who are best suited to adapt to change?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: So let's go ahead with an open mind and try some mobile-first development.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, hop on over to the jQuery Mobile site. It is at [http://jquerymobile.com](http://jquerymobile.com).
    Otherwise, you can simply search for `jQuery Mobile` if you are lazy like me.
    I'll provide the direct link if you don't want to search for it and because you
    are my special buddy. The direct link to the site is [http://lmgtfy.com/?q=jquery+mobile&l=1](http://lmgtfy.com/?q=jquery+mobile&l=1).
    I'll even shorten that for you; go to [http://bit.ly/TMpuB8](http://bit.ly/TMpuB8).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can download the library if you want to host your files locally (and
    there are some very good reasons to do that); for this recipe, however, we can
    do it the more expedient way and let someone else host all the necessary files.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery Mobile site has a veritable cornucopia of docs and samples. It even
    has download builders, so you can scale down the necessary libraries to just those
    that are needed to run your mobile web app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a new HTML document in your IDE. Add the viewport `<meta>` tag
    to your header:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, include links to the jQuery Mobile CSS and JavaScript files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It's worth it to pause for a pedagogical minute and talk about your stylesheets.
    In the previous piece of code, we are linking to a remote jQuery CSS. I would
    recommend you (if you are going to host this file locally) to leave it as is and
    add all of your new CSS for your elements in an entirely different stylesheet.
    Additionally, if you want to make any changes to jQuery's CSS, add another CSS
    file and make explicit namespaced overrides, or use the `!important` override.
    Name this something like `jQuery-mobile-changes.css`. I don't expect that you
    will need to do this, but just in case you do, this is a good way to handle it.
    I recommend this because when a new version of jQuery is released, you won't need
    to break your site when you upgrade.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'That covers most of your header. Now let''s create some basic content for the
    page. First, let''s wrap the page with a `<div>` element:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One of the really great features of jQuery Mobile is that it uses tags, which
    you can put inside the HTML elements that are not used to render your page. The
    benefit is that you can use the same template for your desktop site just by swapping
    out the jQuery Mobile scripts and styles for your own. Next, add some tags to
    your wrapping `<div>` element that tell jQuery Mobile to act on this page. Add
    `data-role="page"` to the element.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's demonstrate by building a sample text page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Add a new `h1` header title wrapped in a `<div>` element. To the `<div>` element,
    add a `data-role="header"` attribute. Then, open the file in a browser to see
    the jQuery Mobile theme.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's a good start; let's continue by adding some more examples of page structure
    in jQuery Mobile.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also give these elements IDs and classes for your desktop version.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Next, add a body. Add a paragraph of some filler text and then wrap the paragraph
    in a `<div>` element. Assign an HTML5 data attribute `data-role:"content"` to
    the `<div>` element.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, add a footer. Wrap a simple text in an `h4` tag, and wrap that in
    a `<div>` element. Now give that `<div>` element the attribute `data-role="footer"`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That''s all there is to it. The jQuery Mobile site has great documentation
    and examples on how to further build mobile sites using their framework. We will
    be going through more jQuery Mobile recipes in this chapter. Go check them out.
    This is how your page will look with jQuery Mobile:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。jQuery Mobile网站有很好的文档和示例，介绍了如何进一步使用他们的框架构建移动站点。在本章中，我们将继续介绍更多的jQuery Mobile示例。去看看吧。这是使用jQuery
    Mobile的页面效果：
- en: '![How to do it...](img/5442OT_05_09.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_09.jpg)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: jQuery Mobile uses HTML5 data attributes to fire the scripts for markup and
    widgets. The script will automatically act when you place the data attribute in
    the element.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile使用HTML5数据属性来触发标记和小部件的脚本。当您在元素中放置数据属性时，脚本将自动起作用。
- en: Adding a second page in jQuery Mobile
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中添加第二个页面
- en: There is a really cool feature in jQuery Mobile that allows you to divide a
    bigger HTML page into smaller, digestible parts. Imagine you have a page that
    has a lot of content and you don't want to force your audience to keep scrolling
    down to read. Consider using jQuery Mobile's multipage template structure. The
    user experience of a web page on a mobile device is very different from that of
    the one on a desktop. On the old desktop Web, it was often said, "Content is king";
    now that the Web is mobile, there is limited space, and it's easy for all that
    content to become too much content. You may want to consider limiting some of
    what is displayed on each page. In this recipe, we will use jQuery Mobile to divide
    a large page with lots of data into smaller digestible bits.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中有一个非常酷的功能，允许您将一个更大的HTML页面分成更小、可消化的部分。想象一下，您有一个包含大量内容的页面，您不希望强迫您的受众不断向下滚动阅读。考虑使用jQuery
    Mobile的多页面模板结构。移动设备上的网页用户体验与桌面上的网页用户体验非常不同。在旧的桌面Web上，经常说“内容为王”；现在Web是移动的，空间有限，所有内容很容易变得过多。您可能希望考虑限制每个页面显示的一些内容。在本示例中，我们将使用jQuery
    Mobile将包含大量数据的大页面分成更小的可消化部分。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the previous recipe, we built a simple page using jQuery Mobile tags. Let's
    dig up the file from that recipe and save it as a new file to work on. This will
    serve as a starting point for this recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用了jQuery Mobile标记构建了一个简单的页面。让我们找出那个示例的文件，并将其另存为一个新文件进行操作。这将作为本示例的起点。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add an ID of `p1` to the outer, wrapping `<div>` element (with the page `data-role`).
    This will help jQuery identify and transition between the multipage elements.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部包裹的`<div>`元素（带有页面`data-role`）中添加ID为`p1`。这将帮助jQuery识别和在多页面元素之间进行过渡。
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You have created what jQuery Mobile will recognize as the first page among the
    multiple pages. Let's create the next one. Create new opening and closing `<div>`
    elements right before the closing `<body>` tag. Give this `<div>` element a `data-role="page"`
    element just like the previous instance, and an ID of `p2`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了jQuery Mobile将识别为多个页面中的第一个页面。让我们创建下一个页面。在闭合的`<body>`标签之前，创建新的开放和闭合的`<div>`元素。给这个`<div>`元素一个`data-role="page"`元素，就像之前的实例一样，并且ID为`p2`。
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This page will need `data-role="header"`, `data-role="content"`, and `data-role="footer"`,
    just like the previous `<div>` element `data-role="page"`. You can also simply
    copy the previous section and paste it into the `"p2"` `<div>` element.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面将需要`data-role="header"`、`data-role="content"`和`data-role="footer"`，就像之前的`<div>`元素`data-role="page"`一样。您也可以简单地复制上一节并将其粘贴到`"p2"`
    `<div>`元素中。
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are almost done; we only need to link the pages together. In the `"p1"`
    content, right before the closing `<div>` element, add an `href` anchor tag linking
    to `"#p2"`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了；我们只需要将页面链接在一起。在`"p1"`内容中，在闭合的`<div>`元素之前，添加一个`href`锚标签，链接到`"#p2"`：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `"p2"` `<div>` element, inside the `data-role="content"` `<div>` element,
    add another link, linking back to the first page ID:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`"p2"` `<div>`元素中，在`data-role="content"` `<div>`元素内部，添加另一个链接，链接回第一个页面的ID：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now save the file and launch it. You''ll see it create a nice and native-looking
    mobile website. Click on the **Page** links and you''ll see that there is a smooth
    fade transition between the multipage pages. You will also notice that the back
    button works as well. If you think about it, this behavior is very useful for
    the native app look and feel of our website. See the first page in the next screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存文件并启动它。您将看到它创建了一个漂亮且原生的移动网站。单击**页面**链接，您将看到多页面之间有平滑的淡入淡出过渡。您还会注意到返回按钮也可以正常工作。如果您仔细考虑，这种行为对于网站的原生应用外观和感觉非常有用。请查看下一个截图中的第一个页面：
- en: '![How to do it...](img/5442OT_05_10.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_10.jpg)'
- en: 'The second page is illustrated in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了第二个页面：
- en: '![How to do it...](img/5442OT_05_11.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_11.jpg)'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: jQuery Mobile can load multiple pages within a single HTML page and present
    them as multiple pages or subpages. To link between them, simply add `HREF="#page"`.
    When that link is clicked, jQuery Mobile will look for an internal page with that
    ID and smoothly write it to the viewport.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile可以在单个HTML页面内加载多个页面，并将它们呈现为多个页面或子页面。要在它们之间进行链接，只需添加`HREF="#page"`。当单击该链接时，jQuery
    Mobile将查找具有该ID的内部页面，并平滑地将其写入视口。
- en: Making a list element in jQuery Mobile
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中创建列表元素
- en: 'Let me be the first to say this: I love unordered lists. Conversely, I have
    an equally intense aversion to "programmer art" tables. In fact, I''ve earned
    a reputation with the people I work with as a "destroyer of tables". There are
    very few sets of things in HTML that can''t be displayed using a good list, which
    is why I adore the way in which jQuery Mobile handles lists. jQuery Mobile lists,
    in my opinion, prove why a list is the superior way to present data, menus, navigation,
    and so on. Enough of my abnormal obsession with unordered lists, let''s go through
    a recipe about jQuery Mobile lists together.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think about how many awful tables you have put out on the Internet and what
    terrible things all of that deadweight code has turned into. That's enough admonishment
    for the crimes of your past, let's move forward and make some jQuery Mobile lists!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new page with the necessary header information that jQuery Mobile wants.
    Include the viewport `<meta>` tag and the links to the jQuery Mobile stylesheet,
    the jQuery JavaScript, and finally, the jQuery Mobile JavaScript. You can host
    these locally on your own server or use those hosted at [http://code.jquery.com](http://code.jquery.com).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next create a `<div>` element with the `data-role="page"` attribute. This is
    an HTML5 attribute that jQuery Mobile uses to deploy style, elements, and widgets.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside that `<div>` wrap, create an unordered list of your favorite robots.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's not launch this right now. We both already know that this will look like
    a plain old list. If you were making a separate CSS for a desktop version, you
    could style this list there.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Add the attribute `data-role="listview"` to your unordered list. Now you can
    launch this and see that it looks like a styled list of robots.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Let's keep going. Because this is a list, and we love lists, we're going to
    just keep playing with it and see what jQuery Mobile can do with it. Add another
    attribute, `data-inset="true"`. Now your list has a cool wrap border around it
    so each item does not stretch to the edge of the screen.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may end up with a really long list, like when you make a list
    of cool robots, because robots are cool, and you don't want to have to keep scrolling
    and scrolling to select your favorite robot. jQuery Mobile has a built-in solution
    for this, a filtering element. Invoke it by adding a new attribute, `data-filter="true"`.
    Refresh your mobile browser; you will see an input at the top to enter a `filtertext`
    element. The Search widget uses a client-side search/filter to filter out list
    items. No longer will you have to scroll down to find that awesome robot at the
    bottom of your list.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take this to the next level. What if we want to be able to filter the
    robots by some other data that we don''t want to display, such as the robot manufacturer?
    You can add the attribute `data-filtertext=""` to each list item. It would look
    something like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'See the following figure for a demonstration:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_12.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: This list can even be styled differently by assigning a theme in the data attribute.
    Try adding `data-theme="a"` to the unordered list. Now try using the letters `b`
    through `f`. Each one has a different theme that you can apply to the list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Here is the unordered list with the different attributes we have used so far.
    The figure after the following piece of code shows the different themes in action.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![How to do it...](img/5442OT_05_13.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Next let's see what happens when these list items become links. Add an `href`
    anchor tag to each item.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When you refresh your screen, you will see how it adds the icon to indicate
    that it is a clickable link. However, since `href` links to `#`, it does not load
    a new page. See the following screenshot for the illustrated example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_14.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: Let's break this list apart, into two groups, the "destroy all humans" group
    and the "workerbot" group. Add another list item for the first group to the top
    of the list, with the attribute `data-role="list-divider"`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Add another similar list item about halfway down the list.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is shown in the next screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_15.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: You might feel the need to organize your robots into these groups if it makes
    you feel good. We can take this impulse further and make the lists nested. Add
    a `ul` element to the `list-divider` that you just made, and then cut and paste
    the first half of the robots' `li` code into this `ul` element.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Do the same for the next list section. Then, refresh to see the new results.
    Check out the following figure:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_16.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'You can add an `h3` header title wrap to the parent list items, and even a
    description wrapped in a paragraph element. These lists keep getting fancier and
    fancier. See the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_17.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: So let's do one final list feature and call it a recipe. This is a gorgeous
    widget for handling lists. You can make a list of collapsible list elements. We're
    going to change the `ul` and `li` list item attributes. First, make the outer
    `ul` list element contain the attributes `data-role="collapsible-set"`, `data-theme="b"`,
    and `data-content-theme="d"`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Each of the two direct child `li` elements of that `ul` element should have
    the attribute `data-role="collapsible"`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Give the attributes `data-role="listview"` and `data-filter="true"` to the child
    `ul` element of that collapsible `li` list item.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The whole unordered list list will look like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The finished list has been depicted in the following figure:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_18.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That was amazing. You did not have to do much apart from making a good list.
    No table could have pulled that off, ever. As long as you use the HTML5 data attributes
    in your elements, jQuery Mobile will do the heavy lifting and turn your list into
    a sleek, native-looking web app. jQuery Mobile takes the data attribute (which
    doesn't affect the layout or style), and from it, it rewrites the HTML and CSS
    for the mobile version.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Adding a mobile, native-looking button with jQuery Mobile
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make buttons! Making a button may seem like a very trivial part of the
    design, but contrarily, when you are building a web application, a button can
    be a very important part of the site's usability.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile has an impressive array of button invocations, and they are all
    easy to use. They are usable within many other jQuery Mobile widgets as well.
    In addition, it is just as easy to make a button from a link as it is to make
    one from a `form input` element.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your IDE or text editor, spin up a new HTML document and add the requisite
    header tags. First add the viewport `<meta>` tag, followed by links to the jQuery
    Mobile CSS and the JavaScript libraries jQuery and jQuery Mobile.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In your HTML `<body>` tag, add a `<div>` element with the HTML5 attribute `data-role="page"`.
    Inside it, add an `h1` header and wrap it with a `<div>` element with the `data-role="header"`
    attribute. Following the header element, add a `<div>` element with the `data-role="content"`
    attribute. See the following code snippet:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's compare some different methods to create a basic button. First, there
    is the HTML5 element `<button>`, various `<input>` form elements `button` and
    `submit`, and an `href` pseudo button. Put one of each inside your content `<div>`
    element.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Launch your new page. You will see four new buttons that look identical (with
    the exception of the text). You can see that each of these methods is delivered
    the same way. This is impressive, as your non-mobile version of the template file
    may require you to use a certain type of `submit` element (which is not exactly
    mobile-first, but no one is perfect). See the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_19.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: Let's continue with this recipe now by demonstrating how to add icons to the
    buttons using jQuery Mobile. This is a simple, one-step process; it uses an HTML5
    data attribute, the `data-icon` attribute. In your first button, add the `data-icon="delete"`
    attribute; in the next one, add the `data-icon="check"` attribute; add `data-icon="plus"`
    to the next one; and finally, add `data-icon="arrow-l"` to the last button in
    this set of buttons. There is a list of icons that you can put in there; you can
    find them in the documentation.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the new buttons:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_20.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: 'You can also make a button smaller by adding the `data-mini="true"` attribute
    and position the icon at the right, left, top, or bottom corners of the button
    using the `data-iconpos` attribute. Otherwise, you can use the `data-iconpos="notext"`
    attribute to only show the icon. See the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_21.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: The default behavior for these jQuery Mobile buttons is to stretch across the
    whole screen. You can change this by adding the attribute `data-inline="true"`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It''s messy, but you can see it in action here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_22.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: They will become inline elements, similar to the list items that are displayed
    as inline. We're almost done, but there's still some fun to be had. We can also
    make button groups easily. Remove the `data-inline="true"` attribute that you
    added in the previous section. Next, wrap the button elements with a `<div>` element,
    with the attribute `data-role="controlgroup"`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now you can see the potential for creative button groups and keeping them together
    in a pretty package. Let's add some more effects to the button group. If you add
    `data-type="horizontal"` to the `"controlgroup"` `<div>` element, you'll make
    a mess that you'll need to clean up. One way to clean this up would be to change
    all of the `data-iconpos` attributes to `"notext"`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, as we have seen in the previous jQuery Mobile recipes, the `data-theme`
    attribute can make your buttons colorful. To quickly show this effect, add a different
    `data-theme` attribute (`a`, `b`, `c`, `e`) to each of the buttons (I skipped
    `d`, it looked too much like `c`). These are illustrated in the next screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_23.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you really need to know about how this works is which data tags to use to
    make jQuery Mobile pick up the HTML elements and turn them into mobile-native
    buttons. It happens auto-magically actually, when you have the correct attributes,
    and it works no matter what method of the `submit` button it is applied to. jQuery
    Mobile fires an event on the HTML5 attributes and adds the HTML and styles to
    the rendered page.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Adding a mobile stylesheet for mobile browsers only using the media query
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we want to be able to use a stylesheet in the template only
    for use by mobile browsers. JavaScript aside, there is no way in client-side rendering
    to listen for the user agent and deliver some logic or special template for mobile
    browsers. Let's take the K.I.S.S. approach and get as close as we can with a media
    query.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are numerous ways to write JavaScript to detect a user agent,
    and we will cover that in a later recipe, but for now let's write a killer media
    query to lock down the mobile browser for a specific CSS. In the previous recipes,
    our media queries were performed inside a stylesheet. This one will be different
    as we will put it inside the HTML header link. Change is good, do not worry. The
    reason we are putting the media query within the HTML link to the CSS file is
    that we want to call that CSS file only under special circumstances. This recipe
    is especially useful when you are using mobile-first design and technologies like
    jQuery Mobile.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fire up your handy IDE and start a new HTML page. Be sure to add your viewport
    `<meta>` tag. If you like, you can add a paragraph of text in the HTML body.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `<body>` tag of your new HTML file, add two paragraphs of text. Each
    with a different class (`class="a"` and `class="b"`). This will be enough HTML
    to demonstrate the media query at work.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now back to the `<head>` tag. First, let''s add the viewport `<meta>` tag.
    Include the content attribute `"width=device-width"`. Next, add some simple style
    for the font (`font-size: 100%`).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next we''re going to add the link to the mobile CSS stylesheet with a media
    query. The basic stylesheet link contains `rel="stylesheet"` and the path. Add
    to it the conditions it needs to satisfy to use that stylesheet. Add a media query
    for `screen` and `max-device-width=320px`. Your CSS link should look like this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There's nothing more for us to do in the HTML file, so create a CSS file in
    the same directory and name it `mobile.css`. Open it to edit it. We don't need
    to do much here, only one line is sufficient. Add a line for the `b` class paragraph
    and give it an attribute of `2rem` for the font size. REM means Relative EM, or
    relative to the root font size (in case you skipped the responsive typography
    recipes).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now let''s try it out. Open your HTML file in a browser, and then open it in
    your mobile device simulator. Here, you can see the mobile device has a unique
    presentation with a different font size for the `b` class paragraph. See this
    recipe illustrated in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_05_24.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The media query is designed to become active only on devices that have a screen
    resolution of 320px or lesser. Anything greater than that ignores (it still does
    get downloaded) the CSS file linked. You could additionally write media queries
    for other specific devices as well.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript for mobile browsers only
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we wrote a media query inside a stylesheet link. This
    was useful for our own mobile-first responsive web development. However, when
    using JavaScript code specifically for mobile platforms, such as jQuery Mobile,
    you might not want to have them initiated on desktop computers. Let's build a
    tiny JavaScript code that detects the mobile device screen size and then deploys
    jQuery Mobile for it but not for the desktop.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile-first technologies like jQuery Mobile are amazing tools when you have
    a server-side technology. They do need server-side logic to work the best. If
    you are not fortunate enough to have access to server-side logic, you can employ
    some client-side tricks to work your magic.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have not looked through the jQuery Mobile recipes, take a look now; we're
    going to reuse one of the recipes that we have used already.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Open up one of the files that you created in the previous recipe using jQuery
    Mobile. You can use the *Adding a mobile, native-looking button with jQuery Mobile*
    recipe. If you worked through this recipe on making a mobile, native-looking button,
    use it to follow along.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: When we last saw this file, the jQuery Mobile script took your plain old boring
    HTML buttons and turned them into cool jQuery Mobile buttons. All you needed was
    to include the HTML5 data attributes in your elements, and jQuery Mobile did the
    rest auto-magically. So what if you only want this to happen on a mobile device?
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Well, you would be in trouble if it weren't for the magic of client-side scripting.
    We first want the script to be aware that it is dealing with a mobile device.
    One way is by querying the user agent of the DOM element. I've seen a few people
    do that, but it's complicated enough to be bug-prone. So instead, let's detect
    the size of the device screen. Most mobile viewports are at most 600 pixels wide
    or smaller; so for now, you are safe if you are developing applications assuming
    that that is the correct maximum size.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: So let's make the script get the screen width from the DOM; if it's smaller
    than 600px, go get jQuery Mobile script. First, using jQuery, fire a function
    when the document loads.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Inside the function, write a conditional statement; if the screen is smaller
    than 600, then do something.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: That's a good start, but let's be more specific about "doing something". What
    we want the script to do is fetch and run the jQuery Mobile script. A good method
    for that is jQuery's `$.getScript()` function. So put that in the `if` condition,
    including the jQuery Mobile source URL.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now load the page in your mobile device emulator.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the emulator successfully spoofs the device width in the request, you will
    see the jQuery Mobile version of the HTML page. In your desktop browser, no matter
    what size your browser window is, you will not be able to load the jQuery Mobile
    script.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: jQuery's `$.getScript()` is a function that loads an external script into the
    header. You can use it like we did in the recipe, to conditionally load an external
    JavaScript and additionally execute functions on its successful loading.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
