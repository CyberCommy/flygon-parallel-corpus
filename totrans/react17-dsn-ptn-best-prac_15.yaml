- en: React Router
  prefs: []
  type: TYPE_NORMAL
- en: React, unlike Angular, is a library instead of a framework, meaning specific
    functionalities (for example, routing or PropTypes) are not part of the React
    Core. Instead, routing is handled by a third-party library called **React Router**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will see how to implement React Router in your application,
    and by the end of the relevant sections, you will be able to add dynamic routes
    and understand how React Router works.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the differences between the `react-router`, `react-router-dom`,
    and `react-router-native` packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install and configure React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `<Switch>` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `exact` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding parameters to the routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code for this chapter in the book's GitHub Repository at [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you create a new React application using `create-react-app`, the first
    thing you need to do is to install React Router v5.x, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You probably are confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `react-router-dom` package was created originally to contain version 4,
    and `react-router` uses version 3\. The `react-router-dom` package has some improvements
    over `react-router`. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: The improved `<Link>` component (which renders `<a>`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<BrowserRouter>`, which interacts with the browser `window.history`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<NavLink>`, which is a `<Link>` wrapper that knows whether it's active
    or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<HashRouter>`, which uses the hash in the URL to render the components.
    If you have one static page, you should use this component instead of `<BrowserRouter>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create some sections to test some basic routes. We need to create four
    stateless components (`About`, `Contact`, `Home`, and `Error404`) and name them
    as `index.tsx` in their directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add the following to the `src/components/Home.tsx` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `src/components/About.tsx` component can be created with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following creates the `src/components/Contact.tsx` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `src/components/Error404.tsx` component is created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have created all the functional components, we need to modify our
    `index.tsx` file to import our route file, which we will create in the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the `routes.tsx` file, where we will render our `Home`
    component when the user accesses the root path (`/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to modify our `App.tsx` file to render the route components
    as children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the application, you will see the `Home` component in the root (`/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1fe43ab2-7d5b-4a17-8154-8f62e752c41a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add `Error404` when the user tries to access any other route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the application again. You will see that both the `Home` and `Error404`
    components are rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b470c24-6b43-43d0-8664-440f15b4f3fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You are probably wondering why this is happening. It''s because we need to
    use the `<Switch>` component to execute just one component if it matches the path.
    For this, we need to import the `Switch` component and add it as a wrapper for
    our routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you go to the root (`/`), you will see that the `Home` component and
    `Error404` won''t be executed at the same time, but if we go to `/somefakeurl`,
    we will see that the `Home` component is executed as well, and this is a problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4350be0f-ff8f-411b-a9fe-9ddfc02bbd7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix the problem, we need to add the `exact` prop in the route that we want
    to match. The problem is that `/somefakeurl` will match our root path (`/`), but
    if we want to be very specific about the paths, we need to add the `exact` prop
    to our `Home` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you go to `/somefakeurl` one more time, you will be able to see the
    Error404 component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef641b8e-0018-4766-8356-93b8619c1870.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can add our other components (`About` and `Contact`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can visit `/about`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7201c1f-4873-4de7-b241-350a37f94c68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can now visit `/contact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6eeb5a0-b3f7-4189-9fa7-1a31ae08bf40.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have implemented your first routes, now let's add some parameters
    to the routes in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding parameters to the routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned how to use React Router for basic routes (one-level
    routes). Now, I will show you how to add some parameters to the routes and get
    them into our components.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will create a `Contacts` component to display a list of
    contacts when we visit the `/contacts` route, but we will show the contact information
    (`name`, `phone`, and `email`) when the user visits `/contacts/:contactId`.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is to create our `Contacts` component. Let's use
    the following skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use these CSS styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have created the `Contacts` component, you need to import it into
    our route file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will be able to see the `Contacts` component if you go to the `/contacts`
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f0684f4-fd5b-4559-98d4-9e7f3c73109e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the `Contacts` component is connected to React Router, let''s render
    our contacts as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the `<Link>` component, which will generate an
    `<a>` tag that points to `/contacts/contact.id`, and this is because we will add
    a new nested route into our route file to match the ID of the contact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'React Router has a special prop called `match`, which is an object that contains
    all the data related to the route, and if we have parameters, we will be able
    to see them in the `match` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `match` prop looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e07ca5e-dcbf-4071-91bb-455b6cbd3392.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `match` props contain a lot of useful information. React
    Router also includes the object's history and location. Also, we can get all the
    parameters we pass within the routes; in this case, we are receiving the `contactId`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application again, you should see your contacts like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6242d69a-e3df-4538-8e22-73bbc86df9ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on John Smith (whose `contactId` is `2`), you will see the contact
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fdc306b8-aec1-471d-ba18-9e726cb4b6ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, you can add a navbar in the `App` component to access all the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s modify our `App` styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff9aa68e-33e2-4ece-915b-e04e5b403e48.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to add routes with parameters to your application – this is
    amazing, right?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our journey through React Router has come to an end, and now you know how to
    install and configure React Router, how to create basic routes, and how to add
    parameters to the nested routes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to avoid some of the most common anti-patterns
    in React.
  prefs: []
  type: TYPE_NORMAL
