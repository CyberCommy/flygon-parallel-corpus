- en: Active Directory Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored how to exploit an organization's networks.
    We went from networking fundamentals to discovering the latest attacking methodologies.
    This chapter is your next step to gaining more knowledge about securing another
    important technical system for every modern company, which is Active Directory.
    We will take you to another level of experience following a well-designed plan
    to obtain the required skills to defend another environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning Active Directory and Kerberos concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of various Active Directory attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning what defensive measures are effective and how they mitigate current
    attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A directory is a book that lists individuals or organizations including details,
    such as names, addresses, and emails, in a sorted way, generally alphabetically
    or by theme. In other words, a directory contains stored and structured objects
    to ease the access and the manipulation of these objects. In a small-scale organization,
    if you need a file, you need to know in what server the file resides and its full
    path. This works in small environments, but it is not practical in medium- and
    large-scale companies. Thus, locating a file using that way could be a real challenge.
    The problem doesn't stop there, as we know every user could have many access credentials,
    such as passwords, which makes it difficult to manage all the credentials, if
    the number is high. That is why the need arose for a directory service to locate
    resources without knowing the full location. The following graph illustrates an
    example of an hierarchical directory
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Active Directory provides a directory service for managing and solving
    these challenges. It comes with many other features and capabilities. Nowadays,
    Active Directory plays an important role in many modern organizations and institutions.
    Communication is a critical aspect for business, and a directory service is a
    wise choice because it acts as a single container point for all the required information.
    Active Directory is based on a client/server architecture. The following graph
    show an example of Active directory users.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Active Directory consists of the following four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active Directory forest**: This is an Active Directory instance that acts
    like a top-level container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory domains**: This is the collection of administratively defined
    objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory units**: You use these container objects to arrange other
    objects in a manner that supports your administrative purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sites**: These are the containers of the objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This illustration shows an example of Active Directory forests and trees:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Single Sign-On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Single Sign-On** (**SSO**) is a central approach generally represented by
    an authentication server that allows many systems to authenticate in a productive
    way, without the need to remember different passwords. This mechanism also improves
    developers'' productivity by providing a single authentication point, so they
    won’t worry about that part and they can focus on more important tasks. The SSO
    solution is great, but as discussed in the previous chapters, a single point is
    an attractive target for attackers.  The following graph shows how Single sign-on
    is simplifying authentication.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Kerberos authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kerberos is an authentication protocol under RFC 1510, integrated in Windows
    operating systems from the beginning of this millennium. It was developed by the
    **Massachusetts Institute of Technology** (**MIT**) under the Athena Project.
    You can check it and test it via its official website, [http://www.kerberos.org](http://www.kerberos.org).
    The Kerberos environment contains three parts: the client, the server, and the
    **Key Distribution Center** (**KDC**), as shown in the following figure. It provides
    identity-based on a key distribution model, presented by Needham and Schroeder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Kerberos needs the following five steps to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication is requested from the authentication server, KDC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: KDC sends back a session encrypted with the sender’s secret key, in addition
    to the ticket-granting encrypted with a ticket-granting service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The receiver then decrypts the session and requests permission from the ticket-granting
    service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the session is valid, the ticket-granting service sends a client/server session
    to grant access to the resource, in addition to a service ticket encrypted with
    the resource key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resource validates the session and grants access to the client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Kerberos provides a great authentication solution, but it stores keys as plain
    texts, which represents a huge threat for the organization. In fact, if an attacker
    could access the KDC, they would compromise all the keys. The following graph
    show the different steps of Kerberos operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lightweight Directory Access Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active Directory uses **Lightweight Directory Access Protocol** (**LDAP**) as
    an access protocol, which relies on the TCP/IP stack. The LDAP supports Kerberos
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: This protocol uses an inverted-tree hierarchical structure, so every entry has
    a defined position. This structure is called the **Directory Information Tree** (**DIT**).
    The **Distinguished Name** (**DN**) represents the full path of the entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram represents the different interaction between the users
    (**Common Name** (**CN**)). Filter groups are restricted to some applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: PowerShell and Active Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PowerShell is an automated framework that provides system administrators with
    many capabilities to perform tasks. It supports the scripting language. Every
    command in the script is called a **cmdlet**. You can build your own cmdlets using
    the .NET programming language. An explanation is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check out a forest, you can use the `get-adforest` cmdlet, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check all the commands type: `Get-Command`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the domains, you can use** `Get-ADDomain`**, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the trust of the forest, you need to use `get-adtrust`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`get-aduser` is used to get a specified user, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'PowerShell is used as an attack platform in many cases for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It runs code in memory without touching disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It downloads and executes code from another system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It interfaces with .NET and Windows APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most organizations are not watching PowerShell activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CMD.exe` is commonly blocked, though not PowerShell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Directory attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active Directory is a high-profile target for attackers. Because of its common
    architecture (single point), it is a targeted system. There are many Active Directory
    attacks. It is a complex system, so the following subsections will discuss different
    types of attacks from different attacking vectors.
  prefs: []
  type: TYPE_NORMAL
- en: PowerView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reconnaissance is a crucial step in information security. PowerView is an amazing
    recon tool – it is a domain-network situational awareness tool. You can grab it
    from [https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1).
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, clone the project or simply download it as a `.zip` file, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'PowerView will give you the ability to perform many reconnaissance tasks, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Users**: `Get-NetUser`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**: `Get-NetGroup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sessions**: `Get-NetSession`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPO locations**: `Find-GPOLocation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory objects**: `Set-ADObject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forests**: `Get-NetForest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kerberos attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kerberos is a high-profile target for attackers, as discussed in the previous
    section. But before diving deep into Kerberos attacks, let's discover some PowerShell
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '`get-adrootdse`: It is used to get the objects of root, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`get-adforest`: It is used to check Active Directory forests, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`get-domaincontroller`: Lists the domain controllers, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get Active Directory computers, use `get-adcomputer`, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`get-adgroupmemberb`: To get members of an AD group members, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before diving into Active Directory attack techniques, let''s discover some
    of PowerShell''s capabilities as an offensive platform. To do that, we will take
    PowerShell Empire as a demonstration because it is a great tool for creating agents
    to compromise systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to `cd Empire/setup` and run the `./install.sh` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait a moment for the installation to finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Voila! You are now ready to use PowerShell Empire:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to generate an agent, you just need to type `usemodule external/generate_agent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.gif)'
  prefs: []
  type: TYPE_IMG
- en: Kerberos TGS service ticket offline cracking (Kerberoast)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in previous sections, Kerberos uses tickets to authenticate, thanks
    to a trusted third party based on symmetric-key cryptography. One of the most
    common attacks is Kerberos TGS service ticket offline cracking, also known as
    Kerberoast. With this technique, the attacker exploits the fact that most service
    account passwords have the same length as the domain password. In other words,
    you don't need to brute force both passwords because most service accounts don’t
    have passwords set to expire. To mitigate this attack, you need to ensure that
    the service account passwords are longer than 25 characters. These are the steps
    of the Ticket-Granting *Service* (*TGS*)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SPN scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Service Principal Names** (**SPNs**) represent an instance of a specific
    discoverable service, such as HTTP, LDAP, and SQL. They are used by Kerberos to
    connect a service with a service account. You can scan these services without
    performing a port scanning because SPNs could be represented like this, for example, `MSSQLSvc/<domain>:3170`
    (`3170` is the port number).'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check all the SPN services using Microsoft’s built-in tool, you
    just need to type `setspn -Q */*`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To retrieve an AD ticket, type: `> $ticket = Get-TGSCipher -SPN <SPN_service_Here>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To crack the ticket, you can use john the ripper, which is a well-known password
    cracking utility, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Passwords in SYSVOL and group policy preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This attack is much simpler than the previous attack. To escalate from domain
    user to domain admin, the attacker just needs to search the domain SYSVOL DFS
    share for XML files. SYSVOL is the domain-wide share in Active Directory to which
    all authenticated users have read access.
  prefs: []
  type: TYPE_NORMAL
- en: 14-068 Kerberos vulnerability on a domain controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To exploit the MS14-068 Kerberos vulnerability, you can use a Python script
    called **PyKEK**, the Kerberos exploitation kit to inject the TGT into memory,
    as shown. Clone the python script from this GitHub repository [https://github.com/bidord/pykek](https://github.com/bidord/pykek):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you are able to use the script following this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Dumping all domain credentials with Mimikatz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dumping credentials is a classic technique in information security. Dumping
    domain credentials is one of the well-known Active Directory techniques. This
    technique could be done with the help of a powerful utility named **Mimikatz**,
    which is developed by Benjamin Delpy. You can download it from its official GitHub
    repository [https://github.com/gentilkiwi/mimikatz](https://github.com/gentilkiwi/mimikatz):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To build Mimikatz, you need to build it using Visual Studio. In my case, I
    am using Visual Studio 2015 Professional. If you want to use the binary directly,
    download it from [https://github.com/gentilkiwi/mimikatz/releases/tag/2.1.1-20171203](https://github.com/gentilkiwi/mimikatz/releases/tag/2.1.1-20171203):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the main interface of Mimikatz:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's discover some Mimikatz commands and utilities.
  prefs: []
  type: TYPE_NORMAL
- en: '`CRYPTO::Certificates`: List and check certificates, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`SEKURLSA::Ekeys`: Checks Kerberos encryption keys ([https://adsecurity.org/?page_id=1821#SEKURLSAEkeys](https://adsecurity.org/?page_id=1821#SEKURLSAEkeys))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PRIVILEGE::Debug`: Checks Debug rights'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOKEN::List`: Checks all the system tokens, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`TOKEN::Elevate`: Check domain admin, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`TOKEN::Elevate/domainadmin`: To impersonate a token with domain admin credentials:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pass the credential
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pass the credential is a simple and easy technique to discover an NTLM hashed
    password, without the pain of cracking it using a great deal of computing power.
    Although Windows doesn''t support passing the hash via networks, you can try **Pass-the-Ticket** (**PtT**)
    technique as a penetration tester, which is the process of grabbing a ticket and
    using it in a non-legitimate way. This graph show the NTLM authentication flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dumping LSASS memory with Task Manager (get domain admin credentials)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Memory dumping is a classic technique to recover some hidden information, including
    passwords and credentials. One of the Active Directory techniques is dumping LSASS
    memory using the Task Manager. Mimikatz has great capabilities, such as the features
    discussed before; one of them is dumping LSASS memory from the `LSASS.dmp` file,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the operation succeeds, you will receive this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.gif)'
  prefs: []
  type: TYPE_IMG
- en: Dumping Active Directory domain credentials from an NTDS.dit file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another dumping technique that threatens Active Directory environments is dumping
    credentials from an `NTDS.dit` file (Active Directory data is stored in the `NTDS.dit`).
    The Active Directory credentials can be extracted using a Python script called `secretdump.py`.
    It is built into the Kali Linux environment, or you can download it from this
    link ;[https://github.com/CoreSecurity/impacket](https://github.com/CoreSecurity/impacket):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00134.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the script in the `examples` folder, in addition to many other
    useful scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the data, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed the most common real-world Active Directory threats.
    We went from the basic terminology and components of an Active Directory to discovering
    the latest Active Directory attacks, and the steps required to defend them. The
    next chapter will explore the world of Docker. You will learn how to build secured
    Dockerized environments.
  prefs: []
  type: TYPE_NORMAL
