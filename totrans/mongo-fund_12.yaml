- en: 12\. Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to MongoDB Charts, which offers the best way
    to create visualizations using data from a MongoDB database. You will start by
    learning the basics of the MongoDB Charts data visualization engine, then go on
    to create new dashboards and charts to understand the difference between the various
    types of graphs. You will also integrate and customize graphs with other external
    applications. By the end of this chapter, you will be well versed in the basic
    concepts of the Charts PaaS cloud interface and be able to perform the steps necessary
    to build useful graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The visual representation of data is extremely useful for reporting as well
    as for business presentations. The advantages of using charts for data visualization
    in science, statistics, and mathematics cannot be overstated. Graphs and charts
    can effectively communicate essential information for business decisions to be
    made, in much the same way that movies can tell stories by using images in motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB has developed a new, integrated tool for data visualization, called
    MongoDB Charts. This is a relatively new feature, with its first release in the
    second quarter of 2018\. MongoDB Charts allows users to perform quick data representation
    from a MongoDB database without writing code in a programming language such as
    Java or Python. Currently, there are two different implementations of MongoDB Charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MongoDB Charts PaaS** (**Platform as a Service**): This refers to the cloud
    service for Charts. This version of Charts is fully integrated with Atlas cloud
    projects and databases. It does not require any installation on the client side,
    and is free to use with an Atlas cloud account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB Charts Server**: This refers to the on-premises MongoDB Charts tools,
    installed locally. The Charts server needs to be downloaded from MongoDB and installed
    on a dedicated server installation with Docker. On-premises Charts is included
    as part of MongoDB Enterprise Advanced, and it will not be covered in this course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The features available for users are similar in both versions of MongoDB Charts.
    Using just a simple browser client, users can create dashboards and a variety
    of charts. Mongo DB continuously expands upon the Charts tools by adding new features
    in the application and bug-fixes with each new release.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will consider a scenario wherein John, an employee
    at XYZ organization, has been assigned to create a dashboard with information
    from a database containing a collection of movies. John is a beginner with limited
    experience in MongoDB. He wonders whether there is an easy way to build graphics
    without writing code in a programming language. And that is where MongoDB Charts
    comes into play. First, we will learn about **Menus and Tabs** in MongoDB Charts.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Menus and Tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start the MongoDB Charts GUI application, users need to first log into the
    Atlas cloud web application. MongoDB Charts (the PaaS version) is bound to one
    Atlas project (the "per project" option), so if there are multiple Atlas projects,
    the user needs to select the currently active Atlas project. As described in previous
    chapters, the name of the Atlas project is chosen when the project is created.
    For this chapter, the name of the project is the default project name in Atlas:
    `Project 0`. The `Charts` tab is visible in the Atlas web application as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1: Charts tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.1: Charts tab'
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB Charts option needs to be activated before the first use. To do
    so, you need to click on the `Activate Now` button to activate the Charts application,
    as shown in *Figure 12.1*. The activation process will only take a minute. During
    the activation, the Atlas application will set up Charts and will generate the
    database metadata necessary to create and run Charts.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from *Figure 12.1*, in MongoDB Charts, there is a maximum limit
    of 1 GB data transfer per month that can be used for sandpit testing and for learning
    about Charts. Once the limit is reached, MongoDB Charts cannot be used until the
    end of the month. However, the limit can be increased by upgrading the free-tier
    service to a paid Atlas service. You can find more details regarding this at [https://www.mongodb.com/pricing](https://www.mongodb.com/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that, once activated, the MongoDB Charts option will remain activated
    for the entire lifetime of your Atlas project. You will be asked if you wish to
    populate with sample data or connect an existing cluster in ATALS cloud. If you
    wish to remove the Charts option, you can do so by going to the Atlas project
    settings. This could be useful if you want to re-activate a fresh new version
    of Charts for an existing project. Nevertheless, removing Charts should be done
    with caution because it will automatically delete all charts and dashboards saved
    in the cloud. Once Atlas Charts is activated, the application starts and it can
    be used to create charts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2: Charts application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.2: Charts application'
  prefs: []
  type: TYPE_NORMAL
- en: 'The option buttons are displayed on the left side of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dashboards`: As the name suggests, this option helps manage dashboards. A
    dashboard is a set of different charts combined into a single page for business
    reporting purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Data Sources`: Using this option, you can manage the data source, which is
    simply a reference to the MongoDB database collection from which data is processed
    to display charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Charts Settings`: This option allows users to manage chart authentication
    providers and to monitor the network bandwidth usage of the Charts application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To return to the main Atlas web application, you can click the `Atlas` tab link
    on the top bar in the Charts application.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In business presentations, information is usually displayed that's pertinent
    to subject areas. A subject area is a category, such as human resources or real
    estate. A subject display contains all the relevant data indicators for the respective
    business area, but data from one subject area is often not correlated with database
    structures. That is how data is stored in the MongoDB database. Therefore, dashboards
    are a chart grouping feature for when we need to present data in a centralized
    and meaningful way for businesses.
  prefs: []
  type: TYPE_NORMAL
- en: In the current version of Charts, the cloud application automatically creates
    an empty dashboard for us. The default dashboard has a name, `User's Dashboard`,
    as shown in *Figure 12.2*, where `User` is the Atlas login username.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can delete the default dashboard and create additional dashboards for your
    business presentations. To create a new dashboard, you can click on the `Add Dashboard`
    button as shown in *Figure 12.2*. A dialog box will open in which you need to
    add details about the new dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3: Add Dashboard dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.3: Add Dashboard dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access dashboard properties, click on the `…` button from the dashboard
    box, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4: Dashboard properties drop-down menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.4: Dashboard properties drop-down menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few buttons and options available in the dashboard context:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Edit Title / Description`: This option is used to change the current title
    or description of the dashboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Duplicate Dashboard`: This option copies the dashboard to a new one, with
    a different name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Delete Dashboard`: This option removes the dashboard from MongoDB Charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lock`: This option assigns dashboard permissions for Atlas project users.
    This option is not useful for free-tier Atlas Charts, as MongoDB does not allow
    you to manage project users and teams with the free tier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To view a dashboard, click on the dashboard name link (for example, `User''s
    Dashboard`). The dashboard will open and show all charts contained in it. If no
    charts are created, then an empty dashboard is displayed as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5: User''s Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.5: User''s Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we will go through the steps to add charts to our dashboards.
    But before we can add new charts, we must ensure that database documents are available
    for our charts. This is the topic of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Data Sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data sources represent the interface between MongoDB database structures and
    the MongoDB Charts presentation engine. A data source is a pointer to a specific
    database collection (or collections) from which the data is processed to create
    a graph. As MongoDB Charts is integrated with the Atlas web application, all data
    sources are configured to connect to Atlas database deployments. Therefore, a
    data source contains a description of the Atlas cluster deployment, the database,
    and the collection that will be used for Charts.
  prefs: []
  type: TYPE_NORMAL
- en: A data source also enables a level of isolation between the MongoDB database
    and MongoDB Charts application users. It is guaranteed that data sources do not
    modify MongoDB databases because they access databases in read-only mode. Without
    a data source, Charts cannot access JSON documents from a MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Charts (the PaaS version) permits data sources to reference data only
    from Atlas cloud cluster deployments. Therefore, it is not possible to create
    a data source from your local MongoDB database installation. Before you can generate
    a new data source, database collections and documents must be uploaded to your
    Atlas database cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the data sources, click on the `Data Sources` tab on the left, as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6: Data Sources tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.6: Data Sources tab'
  prefs: []
  type: TYPE_NORMAL
- en: In the middle, you can observe a list with existing data sources and the `Add
    Data Source` button in the upper-right corner of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, in the current version of Charts, one sample data source is
    automatically populated by your application. The name of this sample data source
    is `Sample Data: Movies`. MongoDB tries to facilitate a quick introduction to
    Charts by providing a sample data source and sample dashboards/charts, so that
    users can see some charts without learning how to use the Charts interface.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample data source `Sample Data: Movies` cannot be changed or deleted by
    users. That is because the sample data source is pointing to a special Atlas database,
    which is external to your project and not accessible to users. As it is not guaranteed
    that this data source will exist in future versions, you should ignore this data
    source and continue as if there are none.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new data source, you must provide the connection details to your
    cloud MongoDB database. A data source usually points to a single database collection.
    As you are already familiar with the MongoDB database structure, it should be
    relatively easy to create a new data source in Charts.
  prefs: []
  type: TYPE_NORMAL
- en: However, data sources can be more complicated to deal with than a single database
    collection. More complex options (which are called **data source preprocessing**)
    are available for Charts users. Complex data sources include features such as
    filtering, joining, and aggregation. More details about preprocessing features
    will be covered later in this chapter. For the moment, let's focus on creating
    a new data source in Charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a data source, click on the `Add Data Source` button as shown in
    *Figure: 12.6*. A new window with the `Add Data Sources` wizard will appear on
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7: Add Data Sources window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.7: Add Data Sources window'
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with a list of cloud databases available for Charts (*Figure
    12.7*). In the case of free-tier Atlas, there will be one `M0` cluster available.
    As you can see, the footer says `The connection made to your clusters from Charts
    will be read-only`. This is to reassure you that the data source will not alter
    the database information. You can choose `Cluster0` from the cluster list and
    then click on the `Next` button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, a list of available databases is displayed. You can expand each database,
    display all collections within, and select a specific collection from the respective
    database, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8: Select collections window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.8: Select collections window'
  prefs: []
  type: TYPE_NORMAL
- en: You can select the entire database or expand the database section and select
    one or more collections from within the database. If you select multiple collections
    (or multiple databases), Atlas will generate multiple data sources—one data source
    for each database collection. It is therefore possible to create multiple data
    sources without going through this setup assistant multiple times. The limitation
    in this case is that all data sources will point to a single database cluster
    that was selected previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the data source is configured and saved, it will appear in the list, as
    shown in *Figure 12.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9: Data Sources tab shows that sample_supplies database is configured'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.9: Data Sources tab shows that sample_supplies database is configured'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.01: Working with Data Sources'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create new data sources for Charts. These will reappear
    in examples later in this chapter, so it is important to follow the steps here
    carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please ensure that you have uploaded the Atlas sample data in your `M0` cluster
    as it was shown in the first three chapters of this book. As explained before,
    a new data source cannot be defined without a valid MongoDB database collection.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Data Source` tab, click on `Add Data Source`, as shown in *Figure 12.6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select your own cluster, as shown in *Figure 12.7*. Then, click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the database list, click on the `sample_mflix` database. If you wish,
    you can expand the database section to see the list of all collections from the
    `sample_mflix` database:![Figure 12.10: Selecting the sample_mflix database'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.10: Selecting the sample_mflix database'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `Finish` button. You should be able to see five additional data
    sources (one for each collection) created in your interface, as shown in the following
    figure:![Figure 12.11: Data Sources list updated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.11: Data Sources list updated'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you added a new data source in MongoDB Charts.
  prefs: []
  type: TYPE_NORMAL
- en: Data Source Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Complex MongoDB projects can have many developers and business users working
    together with Charts. In such cases, the Atlas user who creates a new data source
    may need to share it with other Atlas project users. As explained in previous
    chapters, Atlas applications can manage multiple users for large Atlas deployments.
    However, this concept is not applicable for the free-tier Atlas sandpit projects
    in which most of the examples in this book are presented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a user creates a new data source, they become the owner of that data source
    and can share it with other project members by clicking on the `ACCESS` button
    in the `Charts` tab in the `Data Sources` window (see *Figure 12.9*). Here is
    a screenshot example from the `M0` free-tier cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12: Data Source Permissions window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.12: Data Source Permissions window'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen from the preceding screenshot, the owner can enable or disable
    the `VIEWER` permission for `Everyone in Project0`. The `VIEWER` permission allows
    users to "use" the data source to build their own charts. Other users are not
    allowed to modify or delete the data source.
  prefs: []
  type: TYPE_NORMAL
- en: For large projects, the data source owner can grant permission to a specific
    Atlas group or users that are invited to the project. These advanced permissions,
    which are specific to large Atlas projects, are not covered in this introductory
    course.
  prefs: []
  type: TYPE_NORMAL
- en: Building Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New charts can be created in MongoDB Charts using the Chart Builder. To start
    the Chart Builder, open a dashboard. You can open your own user dashboard by clicking
    on the `User's Dashboard` link in the dashboard tab, as shown in *Figure 12.5*.
    Then, click on the `ADD CHART` button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the Chart Builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13: Chart Builder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.13: Chart Builder'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to choose the data source. The `Choose a Data Source` button
    appears highlighted in green in the top-left corner. Note that a valid data source
    needs to be created and published before you can assign it to a chart. Also, it
    is not possible to assign more than one data source to a chart. By default, all
    documents from a collection are retrieved for the Chart Builder.
  prefs: []
  type: TYPE_NORMAL
- en: There is an option to click the `Sample Mode` radio button. This mode enables
    Charts to retrieve only a subset of documents from the database. There is no rule
    about the maximum number of JSON documents that should be loaded in the Chart
    Builder. For example, if the goal is to display precise aggregation values, then
    we may need to retrieve all the documents. On the other hand, if the goal is to
    display a trend or a correlation graph, then just a sample of documents should
    suffice. Nevertheless, loading an extremely high amount of data in Charts (more
    than 1 GB) will have a negative impact on Charts' performance and is discouraged.
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the left side of the Chart Builder page, you can see the list of collection
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14: Fields area in the Chart Builder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.14: Fields area in the Chart Builder'
  prefs: []
  type: TYPE_NORMAL
- en: Each field has a name and a data type, as you have already seen in *Chapter
    2*, *Documents and Data Types*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of data types in the Chart Builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`A` – String'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#` – Numeric (integer or float)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[]` – Array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{}` – Sub-document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the example screenshot (*Figure 12.14*), the movies data source has been
    selected for `sample_mflix.movies`.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various types of charts available that you can choose from. They
    all could represent similar views. However, some chart types are better suited
    to a particular scenario or database data type. The following table enlists all
    the chart types and their respective functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15: Types of charts in MongoDB'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.15: Types of charts in MongoDB'
  prefs: []
  type: TYPE_NORMAL
- en: Each chart type could have one or more sub-types that are visual variations
    of the main chart and are useful in different presentations. Since a chart sub-type
    is dependent on the main chart type, we will discuss them for each type of chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'A chart sub-type can be selected from the same menu, just under `Chart Type`,
    as shown in the following screenshot for the `Bar` chart type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16: Bar chart sub-types'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.16: Bar chart sub-types'
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are four different sub-types for bar and column charts as shown
    in *Figure 12.16*. While most sub-types are only variations of the same chart
    type, some sub-types can be useful to focus on different aspects of data. For
    example, the `Grouped` sub-type is useful to compare values in different categories
    while `Stacked` is useful to see the cumulated values for all categories. The
    simplest way to identify the right sub-type for you is to quickly navigate through
    them. The Charts engine will automatically re-display the chart in your chosen
    sub-type form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just under the `Chart Type` selection menu, there is a submenu with other tabs
    that is used to define chart channels or dimensions. The following screenshot
    shows these:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17: Chart channels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.17: Chart channels'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list gives a brief description of each tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Encode`: This is for defining the chart channels. A channel describes how
    the data is translated into a chart visualization item. Different chart types
    have different encode channels. For example, bar and line graphs have channels
    represented by Cartesian coordinates (an X axis and a Y axis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Filter`: This is for defining data filters. This option helps filter input
    documents, so only the required documents are considered for the chart plotting.
    This is useful if we want to exclude non-relevant data from our graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Customize`: This is used to define functional and aesthetical customizations
    of charts, such as chart colors and labels. While this option is non-essential,
    it often makes a big difference in terms of graph readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More detailed information about channel utilization is presented later in this
    chapter. For now, let's go through some of the chart types and practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: Bar and Column Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bar and column charts are probably the most common type of charts used in presentations.
    The basic format of the chart is comprised of a set of bars with different values
    for height and thickness, arranged in a bi-dimensional graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bar charts are especially useful to represent aggregated values for categorical
    data. The main designation for bar charts is therefore data categorization or
    classification. While this material is not a comprehensive theory on data science,
    a short introduction will help you to understand the basics. Here is a description
    of how categorical data can be defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data classification**: This pertains to data that can be identified based
    on a category or label, for example, quality (high, average, low) or color (white,
    red, blue). This could also include a few distinct numerical values or numbers
    used as categories (not values).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data binning**: This means grouping data in a category based on an interval.
    For example, numerical values between 0 and 9.99 could be grouped in the first
    bin, and numbers between 10 and 19.99 in the second bin, and so on. In this way,
    we can group many values into relatively few categories. Binning is the method
    used to represent graphs for statistical analysis, called histograms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have defined data categories, our bi-dimensional bar chart can be built
    from there. The data category will populate one dimension of the chart, while
    the calculated (aggregated) values will populate the other dimension of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.02: Creating a Bar Chart to Display Movies'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this exercise is to create a bar chart and to get familiar with
    the MongoDB Charts interface menu and options:'
  prefs: []
  type: TYPE_NORMAL
- en: First, choose the chart type and then drag and drop fields into the `Encode`
    area. For example, if you choose the chart type `Bar` and `Grouped`, you can see
    the X and Y axes in the `Encode` area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Select `sample_mflix.movies datasource` for this chart (top-left drop down menu)
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the field named `title` (movie title) and drag it to `Y Axis`:![Figure
    12.18: Dragging the title field to the Y Axis'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.18: Dragging the title field to the Y Axis'
  prefs: []
  type: TYPE_NORMAL
- en: To limit the number of values, click `Limit Results` and enter `5` in the `Show` box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Accept the default option for `SORT BY`, which is `VALUE` (see *Figure 12.17*).
    We will explain the various options in the encoding channels in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to define values for the X axis. Expand the `awards` field
    sub-document, then click and drag and drop `wins` to `X Axis`. Keep the default
    setting for `AGGREGATE`, which is `SUM`:![Figure 12.19: Adding the wins field
    to the X Axis'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.19: Adding the wins field to the X Axis'
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph should now automatically appear on the right side of the Chart Builder
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.20: Top five movies sorted by the number of awards'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.20: Top five movies sorted by the number of awards'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, group the bars based on database fields. For this feature, add multiple
    fields to the `X Axis` channel while keeping `title` as the only `Y Axis` value.
    To add a second set of values on the X axis (`Grouped` bar), drag and drop `nominations`
    to `X Axis`:![Figure 12.21: Dragging the nominations field to X Axis'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.21: Dragging the nominations field to X Axis'
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart is then automatically updated to show both `nominations` and `wins`
    for each movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22: Bar graph showing awards and nominations for top movies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.22: Bar graph showing awards and nominations for top movies'
  prefs: []
  type: TYPE_NORMAL
- en: This graph sub-type is particularly useful if you want to compare values. In
    this case, you compared the number of nominations and wins for each movie. As
    you can see, the values are "grouped." This is exactly the meaning of the `Grouped`
    tab in the `Chart Type` selection menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to see them "stacked" instead of grouped, then just click on
    the `Stacked` button (*Figure 12.21*) and the chart will be automatically updated.
    This option is useful if we want to see the total cumulated values of movie award
    nominations and wins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23: Result with stacked bars (instead of grouped)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.23: Result with stacked bars (instead of grouped)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, switching from one sub-type to another in MongoDB Charts comes
    down to one click. As a result, the chart is automatically redrawn in the new
    format without any other user input. This feature is extremely useful once we
    decide whether our initial sub-type choice was the right one for our presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at other types of charts that are available in Atlas.
  prefs: []
  type: TYPE_NORMAL
- en: Circular Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Circular charts are colored round circles or semi-circles, often sub-divided
    into slices to represent values or percentages. The circular chart is also "unidimensional,"
    which means that the graph can only represent a single set of scalar values and
    not values that can be represented in a Cartesian coordinate system. Considering
    this limitation, we need to be aware that there is little information that we
    can represent using this type of chart. Nevertheless, a circular chart provides
    a powerful visual representation of data proportions, by putting an emphasis on
    the ratio between one slice and the whole. Because of its simplicity and visual
    impact, this type of chart is also highly effective for presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two sub-types of circular charts: `Donut` and `Gauge`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Donut`: This represents a full, colored circle (pie), which is divided into
    slices that represent values or percentages. There could be many values or slices.
    However, it is recommended to limit the number of values, so that the donut is
    divided into a relatively small number of slices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gauge`: This represents a semi-circle, with a ratio from the total. This type
    of graph is a simplified version of the donut type because it can represent a
    single value proportion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next exercise, you will learn how to build a donut chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.03: Creating a Pie Chart Graph from the Movies Collection'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Say you need to represent the movies based on their country of origin. As a
    pie representation is generally more intuitive than a table, you decide to use
    a donut chart to represent this data. This will also allow you to put an emphasis
    on the top movie-producing countries in the world:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Donut` sub-type from the `Chart Type` drop-down menu:![Figure 12.24:
    Selecting donut chart sub-type'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.24: Selecting donut chart sub-type'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click and drag the `countries` field to the `Label` channel, as in the following screenshot:![Figure
    12.25: Dragging the countries field to the Label channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.25: Dragging the countries field to the Label channel'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `CHOOSE METHOD` dropdown and select `Array element by index (index
    = 0)` to choose the first element of the array in all documents. Accept the default
    option for `SORT BY`—that is, `VALUE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Because the `countries` field is a JSON array data type, your best option will
    be an `ARRAY REDUCTION` method, so that Charts will know how to interpret the
    data. In this example, you are focusing on the primary country producer (`index
    = 0`) and ignoring co-producers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reduce the number of results (using the `Limit Results` option) to `10`. In
    this way, your pie will have only `10` slices, which will correspond to the top
    10 movie producers:![Figure 12.26: Setting the value of Limit Results to 10'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.26: Setting the value of Limit Results to 10'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag and drop the `title` field into the `Arc` channel and select the option
    of `COUNT` for the `AGGREGATE` dropdown. The circular chart should appear on the
    right side of the screen as follows:![Figure 12.27: Donut chart for the top movie-producing
    countries'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.27: Donut chart for the top movie-producing countries'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise walked you through the few simple steps needed to build a donut
    or pie chart. Almost any presentation or dashboard contains at least one pie chart
    because of how attractive they look. But attractiveness is not the only reason
    donut charts are so popular. The donut chart is also a powerful tool to represent
    ratios and proportions in visual graphs. The following section will take a look
    at another type of chart, that is, geospatial charts.
  prefs: []
  type: TYPE_NORMAL
- en: Geospatial Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Geospatial charts are a special category of charts wherein geographical data
    is the main ingredient for building the graph. The simplest definition of geographical
    (or geospatial) data is that it contains information about a specific location
    on the planet. The location details are pinpointed on a map to build a geospatial
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Geospatial information can be specific or more general. The following are a
    few examples of geospatial data that can be mapped easily using a map engine,
    such as Google Maps:'
  prefs: []
  type: TYPE_NORMAL
- en: Precise longitude and latitude coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An address that can be mapped using a map engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broader locations such as cities, regions, or countries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, say that we have a database that contains information about cars.
    The main database collection contains millions of documents about cars, such as
    the model, odometer details, and other attributes. A few other attributes will
    also describe the physical address where the vehicle is registered. That information
    can then be used to build a geospatial chart using a city map.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few chart sub-types for geospatial charts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Choropleth` charts: This chart shows colored geographical areas, such as regions
    and countries. This type of chart is less specific and, in general, is useful
    for high-level aggregations—for example, a chart that displays the total number
    of COVID-19 cases per country.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Scatter` charts: This chart requires a precise address or location. The chart
    marks the location with a dot or a small circle on the map. This chart is useful
    if we want to display a chart with a relatively small number of precise locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Heatmap` charts: A heatmap displays colors with different intensities on a
    map. A higher intensity corresponds to a higher density of database entities in
    that location. Heatmap charts are useful to display large numbers of objects on
    a map, where users are more interested in density rather than a precise location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you will complete an exercise using the `sample_mflix`
    database, which contains sample geospatial information to further practice using
    geo-point information in a new geospatial chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.04: Creating a Geospatial Chart'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The purpose of this exercise is to create a geospatial chart that represents
    a map of all movie theaters located in the United States of America. You will
    use the `theaters` collection to map geographical data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Data Source`, choose `sample_mflix.theaters`:![Figure 12.28: Selecting
    sample_mflix.theaters as the data source'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.28: Selecting sample_mflix.theaters as the data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Geospatial` chart and, from the sub-type categories, select `Heatmap`:![Figure
    12.29: Selecting Heatmap from the list of geospatial chart sub-types'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.29: Selecting Heatmap from the list of geospatial chart sub-types'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `geo` field and drag it into the `Coordinates` encoding channel:![Figure
    12.30: Dragging the geo field into the Coordinates encoding channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.30: Dragging the geo field into the Coordinates encoding channel'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the `theatreId` field and drag it into the `Intensity` channel:![Figure
    12.31: Dragging theatreId field into the Intensity channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.31: Dragging theatreId field into the Intensity channel'
  prefs: []
  type: TYPE_NORMAL
- en: When switching to the `Heatmap` chart type, you should notice an immediate chart
    update with color areas, instead of dots—with red intensity around large US cities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The USA map should appear on the right side of the window and will show the
    theaters'' density using different color gradients. The color coding is displayed
    on the right side of the chart. The highest density of movie theaters (around
    New York City) will appear in red on the map (see *Figure 12.32*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.32: Heatmap chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.32: Heatmap chart'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you practiced building a geospatial chart of all movie theaters
    in the USA. You started with data analysis to see whether the database information
    was suitable for presenting via a geospatial chart. Once data is available in
    the MongoDB database, building a chart is relatively easy.
  prefs: []
  type: TYPE_NORMAL
- en: Complex Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, you saw how easy it is to use MongoDB Charts in Atlas.
    While the user interface is very intuitive and easy to use, it is also very powerful.
    There are many options available in MongoDB Charts so that data from the database
    can be preprocessed, grouped, and displayed in various ways. We'll take a look
    at more advanced configuration topics in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing and Filtering Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed previously, charts access the database through data sources that
    are defined in Charts. By default, all documents from a database collection are
    selected to build a new chart. Moreover, the data fields in Charts will inherit
    the original database JSON document data format.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that a data source cannot alter or modify the database. In a real-life
    scenario, it happens quite often that the data format is not ideal for presenting
    via a chart. The data must be prepared, or the data format needs to be altered
    in some way before it is ready to be used for our chart. This category of data
    preparation for plotting is called preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data preprocessing includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data filtering**: Filtering the data such that only certain documents are
    selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data type change**: Modifying the data type so that it fits the Chart Builder
    better'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding new fields**: Adding custom fields that do not exist in the MongoDB database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data filtering allows users to select only a subset of documents from a MongoDB
    collection. Sometimes, the database collection is just too large, which makes
    the operation in the Chart Builder slower and less effective. One of the ways
    this can be overcome is to sample the data. Another method is to simply filter
    the data based on some categories so that only a subset of documents is considered
    for the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few ways in which a user can control the number of documents processed
    in a chart. These are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.33: Ways in which a user can control the number'
  prefs: []
  type: TYPE_NORMAL
- en: of documents processed in a chart
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.33: Ways in which a user can control the number of documents processed
    in a chart'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you choose one filter method that is the most appropriate
    for the chart's requirements and use just that filter. Mixing two or three filtering
    methods into the same chart could lead to confusion and should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Except for the **Filter Tab** method, which is a part of the UI, all other
    methods require JavaScript code to define the filter. The query syntax was presented
    in detail in *Chapter 4*, *Querying Documents*. The same format of querying can
    be used in Charts too. For example, to define a filter for all Italian or French
    movies released after 1999, the following JSON query can be written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this query is entered into the `Query` bar, the `Apply` button should
    be clicked, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.34: Query bar example screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.34: Query bar example screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Filtering documents may lead to a delayed chart response, especially when working
    with large databases. To help with performance, you can create indexes on collection
    fields that are involved in filter expressions, as seen in *Chapter 9*, *Performance*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Custom Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Charts allows users to add custom fields that can be used to build charts. Sometimes
    raw data from MongoDB does not offer the right attributes for creating a new chart
    and it becomes important to add custom fields. Most of these custom fields are
    either derived or calculated using the source database values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom fields can be added by clicking the `+ Add Field` button in the `Fields`
    area of the Chart Builder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.35: The Add Field button in the Fields area'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.35: The Add Field button in the Fields area'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of fields that can be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MISSED`: This option is used to add a field that is missing from the list
    of fields. For example, imagine a new field has been added to the application
    and only a few documents in the database have the new field. In such a case, MongoDB
    Charts can add the missing field to the initial load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CALCULATED`: This is used to add a new field that does not exist in the collection.
    For example, the source database for a ride-sharing app can have fields for the
    number of hours and the tariff per hour. However, the total value (hours multiplied
    by the tariff) might not be in the database. Therefore, we can add a new custom
    field that is calculated from other values in the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to add a `MISSED` field if the field does not exist in any
    collection document. In this case, you need to add/update the collection document
    first.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand this concept, consider this practical example. In this
    example, you will add a new calculated field in Charts. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `Add Field` button, and then click on the `CALCULATED` button,
    as in the following screenshot:![Figure 12.36: Adding a new field'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.36: Adding a new field'
  prefs: []
  type: TYPE_NORMAL
- en: Type the new field name in as `adjusted_rating`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the formula for calculating the total value, that is, `tomatoes.viewer.rating
    * 1.2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Save` button. You should now be able to see the new calculated
    field and use it in charts, just like any other data-type attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Calculated fields are not saved in the database. Their scope is only within
    the MongoDB Chart Builder. Moreover, a calculated field can be deleted from the
    `Fields` list.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, the data from the database is not the right data type. In such cases,
    MongoDB Charts allows users to change fields to a data type appropriate for chart
    plotting. For example, a chart channel may require data to be in numeric format
    to aggregate `SUM` or `AVERAGE`. To change a field, drag the mouse pointer over
    the field name in the `Fields` list (on the left side of the `Chart Builder` window):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.37: Selecting Convert type from the fullplot field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.37: Selecting Convert type from the fullplot field'
  prefs: []
  type: TYPE_NORMAL
- en: Upon clicking on the `...` menu and selecting the `Convert type` option (the
    only one available), a list of JSON data types will be displayed. Then, you can
    choose the desired data type and click on the `SAVE` button.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to change the `metacritic` numerical field (`#`) into
    a string field (`A`), you can click on `metacritic` and a new `Convert type` window
    will appear as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.38: Convert type window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.38: Convert type window'
  prefs: []
  type: TYPE_NORMAL
- en: Note that changing a field's data type will have an effect only on the current
    chart and will not change the data type in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the most recent version of Charts, there is another option in the context
    field menu [`…`], which is called `lookup`. The `lookup` field allows us to build
    a chart by joining a second collection from the same database. More details on
    how to join collections were given in *Chapter 4*, *Querying Documents*.
  prefs: []
  type: TYPE_NORMAL
- en: Channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The encoding channels are one of the most important aspects of data visualization.
    The channel decides how the data is visualized in the chart. Users can get confusing
    charts or totally unexpected results if they select the wrong channel type. Therefore,
    a proper understanding of encoding channels is essential for efficient chart building
    and data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in previous examples, the encoding channels lie under the `Encode`
    tab in the Chart Builder, just under the chart sub-type selection buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.39: Encoding channels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.39: Encoding channels'
  prefs: []
  type: TYPE_NORMAL
- en: Each encoding channel has a name and a type. The channel name defines the target
    in the graph—that is, the end to which the channel will be used. For example,
    the `X Axis` channel name indicates that the channel is providing the values for
    the horizontal axis of the graph. It is clear in this case that we are going to
    have a Cartesian bi-dimensional chart. The channel type defines what type of data
    is expected as the channel input. Finding the right data type for the channel
    input is important. Also, as you have probably noticed by now, not all data types
    can be accepted as channel input.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four channel types available in MongoDB Charts, as listed in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.40: List of channel types in MongoDB Charts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.40: List of channel types in MongoDB Charts'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to assign channel values from sub-documents or array fields in
    a JSON document. In this case, MongoDB charts will ask you to identify the element
    that is considered for the channel encoding—for example, array index `[0]` (which
    points to the first element in the array, for each document).
  prefs: []
  type: TYPE_NORMAL
- en: Aggregation and Binning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data in one channel is often combined with a category data type channel so that
    it can calculate aggregate values for each category. For example, we can `SUM`
    aggregate all awards for French films. In the Chart Builder, when a field is dragged
    and dropped into an aggregation channel, it is assumed that the values will be
    aggregated in the chart. The Chart Builder does this transparently without requiring
    you to write the code for an aggregation pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: The aggregation type will depend on the data type that we provide on the channel
    input. For example, it is not possible to `SUM` if the data type provided to the
    channel is text.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few types of aggregations, as listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.41: Types of aggregations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.41: Types of aggregations'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some channels can have the `Series` type. This option allows users to add a
    second dimension to a chart, either unique or binning, by grouping data in a range
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.05: Binning Values for a Bar Graph'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will build another bar chart that shows movies produced
    in Italy. In this graph, you need to aggregate data per movie release year. Also,
    the chart should only consider movies released after 1970\. To build this chart,
    you need to filter the documents and choose the encoding fields for representing
    movies aggregated per year. The following steps will help you complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: From the dashboard window, click on `Add Chart`, and then choose the `Bar` chart
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop the `year` field to the categorical channel `Y Axis`. The chart
    builder will detect that there are too many categorical distinct values (years)
    and will propose binning them (grouping them in 10-year periods). Now, toggle
    `Binning` on and for `Bin Size`, enter the value `10` (see the following figure):![Figure
    12.42: Entering 10 as the value for Bin Size'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.42: Entering 10 as the value for Bin Size'
  prefs: []
  type: TYPE_NORMAL
- en: Drag and drop the `title` field to the categorical channel `X Axis`. Then, choose
    the `AGGREGATE` function option `COUNT` and click the `Filter` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the `countries` field to the chart filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `Italy` from the chart filter as follows:![Figure 12.43: Selecting Italy
    from the list of countries'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.43: Selecting Italy from the list of countries'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag and drop the second field, `year`, to the chart filter, and set `Min`
    to `1970` as follows:![Figure 12.44: Selecting 1970 as the Min value for the year
    field'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.44: Selecting 1970 as the Min value for the year field'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the chart title to `Movies from Italy`, as follows:![Figure 12.45: The
    final Movies from Italy bar chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.45: The final Movies from Italy bar chart'
  prefs: []
  type: TYPE_NORMAL
- en: Save the chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you created a chart using both filtering and aggregation techniques
    in a simple manner and without writing any JavaScript code. The new chart is saved
    on the dashboard, so it can be loaded and edited later. The MongoDB Chart Builder
    has an efficient web GUI, which helps users to create complex charts. Besides
    being simple to use, the interface also has numerous options and configuration
    items you can choose from.
  prefs: []
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, the topics in this chapter have focused on describing the functionality
    of MongoDB Charts PaaS. We have learned that users can easily build dashboards
    and charts using data sources from the Atlas cloud database. The last topic of
    this chapter addresses the end result of a MongoDB chart—that is, how the dashboards
    and charts can be used for presentations and applications.
  prefs: []
  type: TYPE_NORMAL
- en: One option is to save the charts as images and integrate them into MS PowerPoint
    presentations or to publish them as web page content. While this option is very
    simple, it has one main disadvantage in that the chart image is static. Therefore,
    the chart is not updated when the database is updated.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to use MongoDB Charts as a presentation tool. This option
    guarantees that charts are refreshed and rendered each time the database is updated.
    Nevertheless, this option is probably not ideal, as the content is limited to
    the MongoDB Charts user interface and cannot be easily integrated.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, MongoDB Charts has an option to publish charts as dynamic content
    for web pages and web applications. It can also be easily integrated into an MS
    PowerPoint presentation. This integration feature is called **Embedded Charts**
    and allows charts to be automatically refreshed after a pre-established time interval.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embedding charts is an option you can use to share charts outside of the MongoDB
    Charts tool by providing web links that can be used in data presentations and applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods to share charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Unauthenticated`: With this method, users are not required to authenticate
    themselves to access the chart. They only need to have the access link. This option
    is appropriate for public data or information that is not sensitive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Authenticated`: With this method, users are required to authenticate themselves
    to access the chart. This option is appropriate for charts with non-public data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Verified Signature`: With this method, users are required to provide a signature
    key to access the chart. This option is appropriate for sensitive data and requires
    additional configuration and code to verify the signature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the method depends on data security requirements and policies. The
    `Unauthenticated` method is acceptable for learning or testing with non-sensitive
    data. In applications with real or sensitive data, the `Verified Signature` method
    should always be used for integration with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few options for embedded charts, as shown in the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.46: Embed Chart window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.46: Embed Chart window'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you want to configure `Unauthenticated` access for users.
    After selecting the `Unauthenticated` option, you can specify the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User Specified Filters (optional)`: You can specify the fields that are not
    visible for sharing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Auto refresh`: You can specify the time interval at which the chart is automatically
    refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Theme`: You can specify a `Light` or `Dark` chart theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The embedded code is automatically generated and can be copied to the application
    code as you can see from *Figure 12.46*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12.06: Adding Charts to HTML pages'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a simple HTML report containing embedded
    charts created with MongoDB Atlas Charts. Use the saved chart `Movies from Italy`,
    created in *Exercise 12.05*, *Binning Values for a Bar Graph*:'
  prefs: []
  type: TYPE_NORMAL
- en: As you have done in the preceding sections, enable access to the data source
    by navigating to the `Data Source` tab and select the data source `sample_mflix.movies`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the right side of the menu (`…`) and choose `External Sharing Options`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click `Unauthenticated or Authenticated Access`, and then click on `Save`,
    as shown in the following figure:![Figure 12.47: External Sharing Options screenshot'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.47: External Sharing Options screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `Dashboards` tab and open the `Movies` dashboard. You should be able
    to see charts created and saved, including the `Movies from Italy` bar chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the right side of the chart (`…`) and then click `Embed Chart` as
    shown in the following figure:![Figure 12.48: Selecting the Embed Chart option'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.48: Selecting the Embed Chart option'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Embed Chart` window will appear as can be seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.49: Embed Chart page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.49: Embed Chart page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Unauthenticated` tab and change the settings as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Auto refresh`: `1 minute`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Theme`: `Light`'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `EMBED CODE` content that appears at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Users can interact with the embedded chart by selecting filters. To activate
    this optional feature, click on `User Specified Filters (optional)` and select
    the field that can be used to determine the chart filters. The JavaScript SDK
    allows integrating MongoDB charts using a coding library. This option is developer-driven,
    and it is not presented in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple HTML page, using a text editor such as Notepad, and save it
    with the `.html` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, consider the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In its place, add the code copied in *step 7*. The end code result should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the Notepad file. Then, open the file using an internet browser, such
    as Google Chrome or Microsoft Edge. The browser should display the page with dynamic
    chart content, as the following screenshot shows:![Figure 12.50: Browser view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.50: Browser view'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is a good example of how MongoDB charts can be integrated into
    HTML web pages so that the content is dynamically updated every time the data
    changes. In this case, if the database records are updated and the chart is changed,
    the web page will also be updated after an interval of 1 minute, to reflect the
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have discussed the options available for chart presentation
    and integration with external applications. In most business use cases, static
    images are not appropriate for dynamic web content and applications. The `Embed
    Chart` option from MongoDB allows users to integrate charts in presentations and
    web applications. Both secure and non-secure chart publishing options are available.
    However, the secure option should always be used for data-sensitive presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 12.01: Creating a Sales Presentation Dashboard'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this activity, you will create a new chart with sales statistics from a
    sample database. Specifically, the analysis must help identify sales in Denver,
    Colorado, based on the sales item type. The following steps will help you complete
    this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a donut circular chart to plot the top sales aggregated per sales item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new data source from the `sample_supplies` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filter data so that only documents from Denver stores are considered in the
    report. The chart should display a donut with the top 10 items (by value) and
    should be named `Denver Sales (million $)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use chart label formatting to display the values in millions and interpret the
    data based on the resulting charts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final output should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.51: Sales chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.51: Sales chart'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor483).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter differed from previous chapters in that it focused on the Charts
    user interface rather than MongoDB programming. The results that can be achieved
    using the Atlas cloud Charts module are impressive, allowing users to focus on
    data rather than programming and presentation.
  prefs: []
  type: TYPE_NORMAL
- en: There are various chart types and sub-types to choose from, which makes Charts
    both more effective and easier to work with. MongoDB Charts can also be easily
    integrated with other web applications using the `EMBED CODE` option, which is
    an advantage for developers because they do not need to deal with another programming
    module to plot graphs in their applications. In the next chapter, we will look
    at a business use case in which MongoDB will be used for managing the backend.
  prefs: []
  type: TYPE_NORMAL
