- en: Remote Administration with SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating and using key pairs with ssh-keygen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH client arguments and options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a client-side SSH configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the server-side SSH configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating host keys and updating `known_hosts`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using local forwarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using remote forwarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ProxyJump and bastion hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SSH to create a SOCKS Proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding and using SSH agents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running multiple SSH servers on one box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first chapter, we SSH''d to our VM using one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we're going to expand on this, looking at making connecting
    easier with SSH key pairs; running over the security benefits of SSH; making changes
    to both the client and server side configuration; setting up a port forward and
    reverse port forward connections; learning about ProxyJump and bastion hosts,
    as well as setting up a temporary proxy with SSH; and finally, we're going to
    look at SSH agents and setting up an additional SSH server on our VM.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter assumes that you have a rudimentary understanding of SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As introduced in the first chapter, we're going to use Vagrant and VirtualBox
    for all of our work in this chapter and those going forward. This allows us to
    quickly provision infrastructure for testing, and saves you the manual job of
    creating multiple VMs each time.
  prefs: []
  type: TYPE_NORMAL
- en: If you really, really, don't want to use VirtualBox or Vagrant, then you don't
    have to, and I've tried to keep the examples as generic as possible, but you will
    probably find it much easier if you do.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve put together the following `Vagrantfile` for use in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note something new about this `Vagrantfile`. We've included a provision step,
    which runs the code assigned to the variable at the top of the file. In this case,
    we're making some changes to the SSH configuration of the default CentOS image,
    so our examples work as we expect. We've put all three VMs on their own private
    network.
  prefs: []
  type: TYPE_NORMAL
- en: It would be advisable to create a folder called `Chapter Two` and copy this
    code into a file called `Vagrantfile` or if you're using the code from GitHub,
    navigating into the right folder.
  prefs: []
  type: TYPE_NORMAL
- en: Running `vagrant up` from inside the folder containing your `Vagrantfile` should
    configure two VMs for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once provisioned, make sure that you can connect to the first by running the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Vagrant is great for testing purposes, but you shouldn't use it in a production
    environment for deploying machines. Some of the decisions that are made are for
    ease of use (such as those around the default `vagrant` user in our image) and
    as a result, are not best practices for a secure deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Generating and using key pairs with ssh-keygen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords are great, but they're also terrible.
  prefs: []
  type: TYPE_NORMAL
- en: Most people use weak passwords, and while I hope that's not you, there's always
    the chance that someone in your team doesn't have the discipline you do, and resorts
    to `football99` or similar for connecting to your shared remote host.
  prefs: []
  type: TYPE_NORMAL
- en: With password access enabled, anyone might be able to connect to your server
    from any country by brute-forcing their way into your machine, given enough time
    and enough processing power.
  prefs: []
  type: TYPE_NORMAL
- en: I say "might" because as long as you use secure passwords of a decent length,
    passwords can be hard to guess, even with the power of a sun. Consult your company
    security policy when deciding these things, or read up on the best practices at
    the time you're writing the policy yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Here's where keys come in.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH keys are based on the concept of public key cryptography. They come in
    two parts: a `public` half, and a `private` half, the public part of which you
    can place onto servers, and the private part of which you keep about your person,
    either on your laptop, or maybe a secure USB stick (one that is itself encrypted
    and password protected).'
  prefs: []
  type: TYPE_NORMAL
- en: Despite the obvious suggestion of public and private half, I have frequently
    seen people misunderstand this concept and share their private half instead of
    the public one. This generally results in the key being labelled as compromised,
    and the individual in question being asked to generate a new pair, with a short
    chat about the definition of `private` and `public` in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: Once your public half of a key is on your server, you can SSH to your remote
    host using the local, private half of your key for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: SSH keys can even offer a degree of ease, as most operating systems come with
    a keychain of some sort that can be automatically unlocked on user-login, and
    which has the private parts of your key safely stored. SSH'ing to a machine then
    becomes a trivial affair where you can securely connect without being prompted
    at all!
  prefs: []
  type: TYPE_NORMAL
- en: We're going to generate an SSH key pair and use that pair to SSH between our
    machines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin, ensure that you have two VMs configured with a private network between
    each.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `Vagrantfile` in the *Technical requirements* section to accomplish
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the first of your machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Check that the IP address of `centos1` is correctly configured, using the command
    `ip a` from [Chapter 1](e2264f18-69d3-4ff4-af6c-dc8fe152b3e0.xhtml), *Introduction
    and Environment Setup*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We expect it to be `192.168.33.10`, under the `eth1` device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `hostname -I` to get the IP address of a box, as seen below,
    but you should note that you won''t get an obvious interface designation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Check that you can ping the IP address of `centos2` from within `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set the second IP to `192.168.33.11`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have network connectivity between our VMs!
  prefs: []
  type: TYPE_NORMAL
- en: If you're unable to ping between machines, start by checking your network settings
    within VirtualBox, and connect to each of your machines using the `vagrant ssh`
    command to check the assigned IP address.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to go over the steps to generate and copy a key to a remote host,
    using two types of key.
  prefs: []
  type: TYPE_NORMAL
- en: First, we're going to generate a more traditional **Rivest-Shamir-Adleman**
    (**RSA**) key, and then we're going to generate a newer type of key, the `Ed25519`
    key.
  prefs: []
  type: TYPE_NORMAL
- en: RSA example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''re going to generate our key, confirming the default location in
    which to save the key, and providing a passphrase when prompted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The randomart image in the preceding code is mostly for humans so that keys
    can be validated by sight. Personally, I've never used it (other than a little
    further along in this chapter,) but you might.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''re going to copy our newly generated RSA key to `centos2`, providing
    the password for `centos2` when prompted:'
  prefs: []
  type: TYPE_NORMAL
- en: The default password for the `vagrant` user on these boxes is `vagrant`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we're going to check that we can access `centos2`, by means of the
    key we just generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be prompted for the passphrase we set when the key was generated. Type
    it in when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ed25519 example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with our RSA example, we will start by generating a new key, this time specifying
    the type as 'ed25519'.
  prefs: []
  type: TYPE_NORMAL
- en: Ed25519 keys are elliptical-curve based and a lot of very clever people believe
    they offer superior security to RSA. The keys themselves are also much shorter
    (which we'll touch on later,) meaning if you've ever got to type one out, it's
    a lot less work. Annoyingly you can't use the public half of an Ed25519 key for
    encrypting files, as you can with an RSA public half, so there's a trade off but
    it depends on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will again accept the default location for where to save our key, and provide
    a passphrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to copy our new key over to `centos2`. Note that we''re also specifying
    the `id_ed25519.pub` file as the one to copy over:'
  prefs: []
  type: TYPE_NORMAL
- en: Again, the default password for these boxes is `vagrant`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you've run this example straight after the one before it, you may be asked
    for the passphrase to your RSA key, instead of the password to the box itself.
    This is fine, and it highlights the fact that key-based authentication is attempted
    first. If this is the case for you, simply provide the passphrase to your RSA
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, attempt to SSH to `centos2`, specifying the private half of
    the `Ed25519` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The principle of asynchronous keys and public key cryptography can be awkward
    for people to get their head around. For the most part, you won't need to worry
    about the mathematics of key generation—you should just know that you will always
    end up with two keys, a public one and a private one.
  prefs: []
  type: TYPE_NORMAL
- en: Dimble, an entirely fictional engineer who thinks it's a good idea to store
    his `private` SSH key on a public `GitLab` server in a repository named `my stuff`
    is a security risk, because he never owned a dictionary, and believes that the
    word private means "share it with the world", which it doesn't. He also disabled
    the passphrase on his `private` key because he didn't like the fact there was
    an extra step between him and his server. Don't be like Dimble—keep your `private`
    key safe and secure.
  prefs: []
  type: TYPE_NORMAL
- en: The public and private key files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As hinted at previously, what we've done here is create two files, one half
    of which can be freely passed around (the public half) and one half of which we
    keep safe somewhere else (the private half).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, these files are located in the home directory of your user, in
    the hidden `.ssh` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The public halves of our keys end in `.pub`, and the private halves don't have
    a file extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at each of the four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The private half of our RSA key is a file that's sensitive, and as we made it
    `4096` bits when we generated it, this file will be very long (hence my snip).
  prefs: []
  type: TYPE_NORMAL
- en: The public half of our RSA key is the file that's placed on remote machines.
    It is still affected by the bit-length we specified, though it's nowhere near
    as lengthy as the private half.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that we've also got a comment at the end, `Example RSA Key`, which we specified
    at generation time. This will usually be the user and machine hostname of the
    box it's generated on, when no comment is explicitly passed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then, there is our private (sensitive) `Ed25519` key. Note that this file is
    much shorter than its RSA counterpart, and this is because `Ed25519` keys have
    a fixed length (this also means that the `-b` flag is ignored at generation time).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have our public `Ed25519` file, so short that you could conceivably
    write it onto a bit of paper and hand it to your colleague to copy onto a server
    (though they really, really won't thank you for it, and will most likely not offer
    to make you a cup of tea any time soon).
  prefs: []
  type: TYPE_NORMAL
- en: We also have our comment, `Example Ed25519 key`.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, printing the private halves of the keys that I've just generated
    flies in the face of what I said about passing around private keys, although it's
    for documentation, and I'm going to destroy these VMs once I'm finished with them,
    so I felt adding them here for clarity was important. DO NOT USE THESE KEYS.
  prefs: []
  type: TYPE_NORMAL
- en: The authorized_keys file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you connect to your remote host, SSH validates the key ID you're providing
    against a list of `authorized_keys`.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we used the `ssh-copy-id` command to place our key on the remote
    server. What this actually does is put it in a specific file of the home user
    you're connecting to.
  prefs: []
  type: TYPE_NORMAL
- en: 'On our `centos2` host, we can find this file in the user''s home directory,
    under `.ssh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking inside this file reveals the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see three keys, over three lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first key is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is the key that Vagrant uses to connect to the VMs. It's not one we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is our generated RSA key. Note that it's longer than the Vagrant default,
    owing to the custom `4096` bit-length that we specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our third key is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This is our `Ed25519` key.
  prefs: []
  type: TYPE_NORMAL
- en: You could, if you so wished, manually copy public keys into the `authorized_keys`
    file on the host you're connecting to. The `ssh-copy-id` command we used is simply
    a convenient way of cutting out a few of the extra steps.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is sensitive about the **permissions** that its files have.
  prefs: []
  type: TYPE_NORMAL
- en: You don't want your private key to be readable by any random user who might
    be on your system, so as a result, plain SSH won't work if it thinks you have
    bad permissions set.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, this won't be an issue if you've just generated your keys, but if
    you later move them between computers, you might find that you've spoiled the
    permissions slightly.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good rule of thumb is to assume locked-down settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the above command, we can see that the public and private halves of the keys
    (id_rsa keys and id_ed25519 keys) have different values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The public halves of the keys (`*.pub`) have the value `644` (read/write, read,
    read):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The private halved of the keys have the value 600 (read/write, none, none):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To passphrase or not to passphrase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While you can generate a key without a passphrase, and there are valid use cases
    for doing so (for example, in the case of automated deployments), it is considered
    a best practice to generate your own key with a passphrase.
  prefs: []
  type: TYPE_NORMAL
- en: This does mean that if your key isn't unlocked in your keychain (which itself
    might be unlocked when you log into your machine), you will be prompted for the
    passphrase to unlock the key. You might consider this a hassle, but think of it
    in terms of the security onion (multiple layers of security... it's not a great
    analogy, unless security makes you cry.) If you lost your private key, the malicious
    person that picks it up won't be able to use it to access your stuff.
  prefs: []
  type: TYPE_NORMAL
- en: If you do lose a private key, or leave it on a USB stick on a bus, you should
    immediately rotate your keys by revoking the old one from any location where the
    public half is installed, and generating a new pair to use.
  prefs: []
  type: TYPE_NORMAL
- en: Additional flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we generated our keys, we also added a couple of flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with any software, checking the manual page for the command you''re running
    can provide a sometimes overwhelming amount of additional detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To save a little bit of a headache, I''m going to highlight some options that
    may be of interest to you, starting with `-b`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We used the `-b` flag to specify a large amount of bits during the generation
    of our RSA key. The minimum is `1024` and the default is `2048`. Your place of
    business may have requirements on the length of RSA keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have the comment flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We used this to add a bit of description to our keys. It might be useful if
    you use different keys for different things (this is my `GitLab` key, this is
    my personal server key, this is my company server key, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do need multiple keys, you may want to pass the name of your new key
    within the generation command (as opposed to typing it out when prompted):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have  `-l` to print the fingerprint of a key, and/or the ASCII art
    if you so wish. This can be very useful for verifying key pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change the passphrase of a private half, but don''t want to
    generate a new key, you can use the `-p` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify the type of key you wish to generate, you can use the `-t` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When choosing the type of key to generate, consider your requirements. RSA is
    generally the most compatible, but your company may have other policies, or you
    may have a personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: I've come across two scenarios where `Ed25519` keys couldn't be used – one was
    an in-house script that required RSA for encrypting files, and the other was OpenStack,
    at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there''s good old `-v`, providing verbose output since the early days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This can be passed multiple times, that is, `-vvv` is also valid, with each
    `v` increasing the debug level.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section deliberately doesn't go into the minutia of SSH key exchange or
    the different types of key (with the exception of the two used in our example).
    There are excellent books on SSH that can provide a wealth of information, and
    the OpenSSH developers themselves are constantly working on improvements to the
    software. OpenSSH is only one implementation of SSH, but it is by far the most
    popular. It is the default on every Linux distribution I've used, it's in use
    on macOS, and it's the standard on the BSDs (especially OpenBSD, where it's developed).
  prefs: []
  type: TYPE_NORMAL
- en: SSH client arguments and options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is a powerful piece of software, as we've already discussed, and while it
    can be used in a very simple way to enable access to your server, it is also extremely
    flexible.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we're going to look at common flags that are used with SSH
    in environments that may have different requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the same Vagrant boxes as before.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with the previous section, confirm that both of your Vagrant boxes are enabled,
    and connect to the first using the `vagrant` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to take a look at the basics of SSH first.
  prefs: []
  type: TYPE_NORMAL
- en: SSH using hostnames instead of IPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our examples so far, we've been using IP addresses to connect to our remote
    host.
  prefs: []
  type: TYPE_NORMAL
- en: SSH is also capable of connecting to hostnames.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to create a quick hosts entry so that we can resolve our name
    to an IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a quick way to make a remote host resolvable to a name.
    There's no guarantee that it will stick on some systems, especially those where
    a third party controls the `hosts` file. In a real-world scenario, it is highly
    likely you'll have some sort of DNS setup that will make connecting to hostnames
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should now be able to SSH using the host''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note that we once again had to accept the fingerprint of the host we're connecting
    to.
  prefs: []
  type: TYPE_NORMAL
- en: SSHing to a different user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the user you're connecting to is different to the one you're using locally
    (in our examples, it's always `vagrant` and `vagrant`), then you can manually
    specify the username on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way to do this is with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way is with a flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: SSHing to a different port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the SSH server you're connecting to is listening on a different port (this
    is quite common), then you might have to specify the port in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default is `22`, but if you''ve changed this for whatever reason, you could
    also specify the new port, for example, `2020`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note this example won't work right now, because we haven't changed the port
    the server is listening on.
  prefs: []
  type: TYPE_NORMAL
- en: SSHing to an IPv6 address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv6 addresses look a lot more imposing than they really are, and it's advisable
    that you get to grips with them sooner rather than later (even if people have
    been predicting the dominance of IPv6 for over a decade now).
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we're going to find the IPv6 address of `centos2` and connect
    to that.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, connect to `centos2` and run the `ip a` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: I've highlighted the IPv6 address in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back on `centos1`, let''s connect using IPv6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note that we've had to specify the network interface on the end of our command.
    This is only necessary in the case of link-local addresses, and shouldn't be necessary
    for global IPv6 addresses.
  prefs: []
  type: TYPE_NORMAL
- en: A comparison to link-local addresses in the IPv6 world are subnets in the IPv4
    world, that is, link-local devices are those that can see each other on a local
    network, via their link-local addresses (which themselves are generated based
    on factors like the MAC address of the interface that the address is on). They
    should always have the link-local prefix (`FE80::/10`).
  prefs: []
  type: TYPE_NORMAL
- en: SSHing before running a command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While you'll mostly use SSH for connecting to remote boxes, it's also possible
    to run a command on a remote host without having to linger there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''re running a command to print the hostname file on the remote box,
    while staying on `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This is especially useful for automation software, or scripts that you want
    to run locally but which interact with remote machines.
  prefs: []
  type: TYPE_NORMAL
- en: SSH and X11 forwarding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not generally used these days, but still useful in some select situations, `X11`
    forwarding is the act of running a program on a remote box, and displaying said
    program on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set up your session using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: There are security implications of working with `X11` forwarding. Consult your
    distribution's manual page for information around this, as the default behavior
    can differ from distribution to distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, this is only possible with `X` Window Manager setups, and the more
    modern Wayland display server protocol doesn't have a similar ability, due in
    part to wanting to keep things simple.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is a large and feature-rich program. When you manipulate how it behaves
    using flags, you're modifying the default behavior to your own ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with any command, they can be simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'But they can also be complex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As an exercise, using the SSH manual page if you need to, see if you can work
    out what this command will accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH escape characters are an important additional element to note.
  prefs: []
  type: TYPE_NORMAL
- en: Occasionally, you can be connected to a system and your connection times out,
    locking up your session.
  prefs: []
  type: TYPE_NORMAL
- en: This usually manifests in the form of an unblinking and unresponsive Terminal.
    You generally can't hit *Ctrl* + *D* to log out, and can't type.
  prefs: []
  type: TYPE_NORMAL
- en: 'You would instead hit the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: While the key combination is officially listed as `~.` it actually requires
    the *Enter* key being pressed first (as in, newline), so it's frequently written
    as `\n~`.
  prefs: []
  type: TYPE_NORMAL
- en: This tip is brought to you by an eagle-eyed technical editor!
  prefs: []
  type: TYPE_NORMAL
- en: That's a tilde character (find it on your keyboard, usually using the S*hift*
    key), followed by a dot.
  prefs: []
  type: TYPE_NORMAL
- en: Your session should immediately disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the SSH manual page for more escape characters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, there's a lot more to SSH options than I've listed in this recipe, and
    we've yet to cover a few that have their own sections in the rest of this chapter,
    but still there's a considerable amount we won't be using here.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the manual page for SSH on a boring Tuesday. I did.
  prefs: []
  type: TYPE_NORMAL
- en: Using a client-side SSH configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it's nice to be able to manipulate SSH using command-line arguments, it's
    also nice to not have to bother.
  prefs: []
  type: TYPE_NORMAL
- en: If you've got a system you work on day in and day out, it can be beneficial
    to configure your setup with your typical arguments on a permanent basis. This
    is where the client-side SSH configuration file comes in.
  prefs: []
  type: TYPE_NORMAL
- en: On our example box, the default `ssh_config` file is located in the `/etc/ssh/`
    directory. Open this file to have a look if you like, but don't make any changes
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with the previous section, confirm that both of your Vagrant boxes are enabled,
    and connect to the first using the `vagrant` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: To configure different options for our user, we're going to create an SSH configuration
    file in our home directory.
  prefs: []
  type: TYPE_NORMAL
- en: This goes in the same place as most of our SSH files, `~/.ssh/`.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you see a `~` character, think of it as **my home** in your head. Expanded,
    this location is `/home/vagrant/.ssh/`.
  prefs: []
  type: TYPE_NORMAL
- en: Create the file, lock down the permissions, and open it in your editor of choice—I'm
    going to use `vi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to call it `config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within your `config` file, create the start of four blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'One should be a wildcard block (using `*`) and the other should be variations
    on the name `CentOS2` (note the capitals):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the V6 entry, we actually use two percentage signs, instead of
    the single one we used on the command line. This is so that SSH doesn't misinterpret
    what we mean and try to read the entry with a `%e` value.
  prefs: []
  type: TYPE_NORMAL
- en: Inside these blocks, we've set a few basic options based on what we did previously
    on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: With these settings in place, we can save and exit our configuration file, and
    try to connect to our specified hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to connect to our other VM on its IPv4 address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''re going to use our IPv6 address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to resolve the hostname of the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Most systems will also auto complete entries in the SSH config file. Try it
    out yourself by typing `ssh C` and hitting *Tab* three times.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting with the wildcard host entry (`Host *`), this is a global entry. Settings
    within this block will apply to all hosts (except `CentOS2-V6`, which we''ll get
    to soon):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''ve said that each and every host in this file will use our `Ed25519`
    key to connect, and we will always connect on port `22`. This block should be
    used for global settings in general. You can also omit it entirely if you desire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In our first specific host block, which we've called `CentOS2-V4`, we specify
    the IPv4 address of the host, and the user to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connecting to this entry with verbosity turned up looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Within this blob of noise, we can see some crucial things, emboldened for your
    convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we can see where SSH starts to read the configuration data from our
    config file. It applies the settings for the wildcard entry, followed by those
    for this specific host.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we can see the prompt for the `Ed25519` key specified in the host wildcard
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can see that our session is authenticated to `192.168.33.11` (or
    the IPv4 address).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now take a look at the `CentOS-V6` block, we start to see differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Again, note the double percentage signs.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you''ll notice that we''ve got the port and a different `IdentityFile`
    entry specified. This is due to the `Host *` block not applying to `CentOS2-V6`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This means that no settings from the wildcard block will apply to `CentOS2-V6`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we connect to our host, again in a verbose fashion, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: What's specifically different are the lines about matching config, which this
    time inform us that the wildcard block won't be applied because of the negated
    match for `CentOS2-V6`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that `id_rsa` is being used this time instead, and we've specifically
    connected to the IPv6 address of the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s look at `CentOS2-Hostname`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Again, note the matching of configuration, and the fact that we're connected
    to the IPv4 address.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do one more thing with this, which is up the verbosity on our connection,
    getting to the next debug level, and hopefully seeing something else of note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see the second debug level (`debug2`) and specifically, we can
    see the moment `centos2` was given in the block and was resolved to an address.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noticed that in my examples, I used a mixture of upper and lower
    characters for my names (for example, `CentOS2-V4`). I do this because it means
    that I know when I'm using my SSH config file, and can be sure at a glance that
    I'm using the settings I configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s nothing stopping you from creating a block like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This is perfectly valid, and the settings will be read as normal.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also do clever things such as specific domain matching. If you have
    to manage two different sets of servers differentiated by their domains, you can
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Attempting to connect to hosts in either of these domains will result in specific
    configuration options being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ssh_config` manual page is worth a look, even if you only use it to fall
    asleep.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the server-side SSH configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the last few sections, we've been focusing on the client configuration.
    We've tweaked our connection string on the command line and we've written a configuration
    file to be read automatically by SSH when connecting to our second host.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we're going to take a look at the `sshd_config` file, or the
    server-side of the configuration tango, on our second host.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to make a few example and routine changes to get you familiar with
    the concept.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connect to both `centos1` and `centos2`. Doing this from outside (in separate
    windows, and using `vagrant ssh`) is best:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Place your Terminal windows side by side for easy viewing.
  prefs: []
  type: TYPE_NORMAL
- en: There is a chance that you will break SSH access to your server in this section,
    which is why I advise using Vagrant for your testing. If you do make a mistake,
    don't worry – simply destroy your VMs and start again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On your `centos2` machine, open `/etc/ssh/sshd_config` in your favorite editor.
  prefs: []
  type: TYPE_NORMAL
- en: This file is large, and can seem a little daunting the first time you open it
    up.
  prefs: []
  type: TYPE_NORMAL
- en: The options listed are most of the settings that the SSH server (`sshd`) will
    read when it starts up, and apply to your running daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to start with a simple one, that is, changing the default port
    on which the SSH daemon runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the preceding code so that the `Port` line is uncommented and now reads
    `2222`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: As the handy note before this block informs us, we also have to modify SELinux
    so that it's aware that the SSH daemon will be trying to use a different port.
  prefs: []
  type: TYPE_NORMAL
- en: This file suggests that we use `semanage`, so let's do just that.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll find which package provides semanage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll run the recommended command with our new port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, we can safely restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This shouldn't kick you off the VM, as `sshd` is designed so that changes won't
    cause a loss of access, even if those changes will stop you from logging on again
    (once you've voluntarily disconnected.)
  prefs: []
  type: TYPE_NORMAL
- en: Try logging out now, and then logging back in again.
  prefs: []
  type: TYPE_NORMAL
- en: 'A forewarning: this should fail!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fear not! Instead, connect to `centos1` on your second Terminal (you should
    have two connections open to `centos1` at this point) and SSH back onto `centos2`
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! SSH is now running on a different port!
  prefs: []
  type: TYPE_NORMAL
- en: You can confirm this from within the OS with the following command (which we'll
    cover in greater detail later on:)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the preceding code, we're printing both the IPv4 and IPv6 values.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the listen address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, SSH will listen on all addresses and interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: We're going to change this so that it's listening on only IPv4 and our `eth1`
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the preceding options to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: We've uncommented two of the options and changed their values.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding block, you may have noticed that `ListenAddress ::` is also
    listed. Here, `::` is the IPv6 equivalent of `0.0.0.0` in IPv4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Running our `ss` command from before, you may notice that the IPv6 option has
    disappeared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now exit our session to `centos2` (using *Ctrl* + *D*) and try to SSH
    to the IPv6 link-local address, it will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: A great success—we've squashed any possibility of trend-setters logging into
    our server on IPv6!
  prefs: []
  type: TYPE_NORMAL
- en: On to a serious note for a minute, I've been hearing about the demise of IPv4
    and the rise of IPv6 for years, pretty much since I started in computing. In that
    time, not much has changed, and both carriers and service providers have continued
    to eke everything they can out of IPv4, even introducing horrible things such
    as Carrier-grade NAT. I do hope that IPv6 picks up steam, not least because we're
    effectively out of IPv4 addresses to allocate.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the daemon logging level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several levels that SSH can log at, dictated by the `LogLevel` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The possibilities are `QUIET`, `FATAL`, `ERROR`, `INFO`, `VERBOSE`, `DEBUG`,
    `DEBUG1`, `DEBUG2`, and `DEBUG3`.
  prefs: []
  type: TYPE_NORMAL
- en: The SSH daemon manual lists the `DEBUG` options as all violating the privacy
    of users, and therefore it is not recommended that you use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to bump this up to `VERBOSE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's have a look at what difference that made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s our `secure` log at `INFO` level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s our `secure` log at `VERBOSE` level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Disallowing root login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some distributions deny root login by default, and this is widely considered
    a good idea. Here, we have a user (vagrant) that we can use to get around so that
    we don't need to log in as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the line with `PermitRootLogin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to `no`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This does not disallow `local` root login, so in a pinch, you can still connect
    to a console (or plug a keyboard and mouse into the physical machine) and log
    in with the root user locally.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling passwords (force key use)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we've got our public keys on this host, we no longer need to allow password-based
    access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the `PasswordAuthentication` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Change this line to `no`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The eagle-eyed among you will have noticed that I already flipped this setting
    once, in the `Vagrantfile` at the start of this chapter. This was to allow us
    to use Vagrant as a learning experience, and we are effectively reversing the
    reversal right now.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a message of the day (motd)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Providing your `PrintMotd` setting is set to `yes`, you can have users see the
    contents of `/etc/motd` when they log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, ensure that it is set to `yes` in the SSH daemon config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, restart the SSH daemon, and then modify the `/etc/motd` file to something
    sensible. Alternatively, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This message will now be printed whenever you log in.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is usually used by companies to warn bad actors who are attempting
    to gain access to their systems. Occasionally, it's used by bored system administrators
    to quote Futurama at you.
  prefs: []
  type: TYPE_NORMAL
- en: The UseDNS setting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last option I''m going to cover is the `UseDNS` entry, as it''s a source
    of pain for quite a few people:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that `UseDNS` has been explicitly set to `no` in our configuration
    file. This is the default.
  prefs: []
  type: TYPE_NORMAL
- en: When set to `no`, the SSH daemon will not look up the remote host name, and
    check that the remote IP maps back to the expected IP, based on that host name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To confuse you further, here''s the manual entry of `UseDNS `:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Specifies whether sshd(8) should look up the remote host name, and to check
    that the resolved host name for the remote IP address maps back to the very same
    IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: If this option is set to no (the default) then only addresses and not host names
    may be used in ~/.ssh/authorized_keys from and sshd_config Match Host directives."
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that when `UseDNS` is set to `yes`, and the machine you're
    connecting from doesn't have a reverse DNS entry set, SSH will try and match the
    IP it expects with what it's seeing, and likely fail to do so.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, all this means is that if your DNS is broken on the box you're
    trying to connect to, you have to wait around like a lemon for a bit while the
    DNS request times out, and eventually let you in. To frustrate matters further,
    this feature is almost useless out of the box, as highlighted in this mailing
    list email: [https://lists.centos.org/pipermail/centos-devel/2016-July/014981.html](https://lists.centos.org/pipermail/centos-devel/2016-July/014981.html).
  prefs: []
  type: TYPE_NORMAL
- en: AllowUsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already denied the root user access to our system, but what if we wanted
    to take this a step further and specify the users we want to grant access to?
  prefs: []
  type: TYPE_NORMAL
- en: For that, we need the `AllowUsers` setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is rarely a default setting, or even commented out in the `sshd_config`
    file, so we''re going to add it to the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the SSH daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Now, you've got a system that only the `vagrant` user will be able to SSH to.
    You can also add multiple names to this list, or even substitute this whitelist
    for a blacklist, with `DenyUsers`.
  prefs: []
  type: TYPE_NORMAL
- en: If we want, we can work on a group basis (instead of individual usernames) with
    `AllowGroups` and `DenyGroups`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've been through and changed a few common settings, we're going to
    have a quick look at what happens when you restart the SSH daemon.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH''s `systemd` unit file will look similar to this, though your system may
    vary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: By default, we can see that the binary used is `/usr/sbin/sshd` with `$OPTIONS`
    passed from elsewhere (in this case the `EnvironmentFile` value, as listed previously).
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading the manual for `sshd`, we find the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-f config_file` option ([https://man.openbsd.org/sshd](https://man.openbsd.org/sshd))
    is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Specifies the name of the configuration file. The default is /etc/ssh/sshd_config.
    sshd refuses to start if there is no configuration file."'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have the answer of why `sshd_config` is read by default—it's baked
    in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've only covered some of the basic options people tend to change when configuring
    the SSH daemon for their own environment, but most administrators don't bother
    making any changes at all, leaving whatever the configured defaults are.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get a better understanding of all the daemon options available to you, read
    through the `sshd_config` manual page and take a look at the page for the `sshd`
    executable, too.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating host keys and updating known_hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing we've not mentioned yet are host keys, and the `known_hosts` file.
  prefs: []
  type: TYPE_NORMAL
- en: This is something that is often overlooked, so I'd like to take a few minutes
    to go over these otherwise-ignored treasures.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will inspect what happens when you first SSH to a new machine,
    and then we will change the keys of that machine to see what problems this causes
    us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connect to `centos1` and `centos2` in different sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: If you're working on a fresh setup, SSH to `centos2` from `centos1` and accept
    the host key when you're presented with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log back out of `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve now got an entry in our `known_hosts` file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this IP and key are found on `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: We can prove this easily by having a look at the key's fingerprint on both machines,
    and comparing the ASCII art.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos2`, this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'And from the `known_hosts` file on `centos1` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: That's genuinely the first time I've ever used the `-v` option to get the ASCII
    art out of a key for comparison purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've confirmed our setup, we're going to change the host keys on `centos2`
    and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos2`, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: We've just moved the keys we accepted as gospel on `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: Our session stays up because we're already authenticated and connected. If we
    were to disconnect at this point, we would have to accept a different set of keys
    (we moved the ECDSA keys, but there's still `Ed25519` host keys available, which
    SSH would pick up instead).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to generate a new set of keys by using the catchall `-A`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confirm these exist by checking the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Log out of `centos2` and try to log back in again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: SSH tries to save you from doing something bad. Because it's already aware of
    the IP you're trying to connect to, and has a `known_hosts` entry for it, it compares
    the known key it has on file with that of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Since we've just regenerated the keys on the box, we've been presented with
    a horrible-looking error.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth getting over the mental block of just scoffing and working around
    this error. Try to lend yourself five seconds of thought and confirm that the
    error is expected. Too often, I've seen people immediately grumble when faced
    with this message and bypass it straight away. If you've already accepted the
    key on a box once, you shouldn't see a warning about it again, this can mean that
    the box has been tampered with, or your connection is being "man in the middle'd."
    Be vigilant!
  prefs: []
  type: TYPE_NORMAL
- en: 'Clear the old key (the line location of which is emboldened in the preceding
    code) from our `known_hosts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now be able to SSH to `centos2` again and accept the new key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ssh-keygen` command we used is a quick way of placing expected host keys
    in the default location. Because we''d removed the key we expected to be there,
    we would have failed to connect to our host, and been prompted with the horrible
    error we saw previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, we can see SSH checking our `known_hosts` file, then
    getting the key from the remote host, and finally throwing a fit.
  prefs: []
  type: TYPE_NORMAL
- en: To reconnect to the host, we simply had to remove the offending entry from the
    `known_hosts` file on our client-side, and then attempt our connection again.
  prefs: []
  type: TYPE_NORMAL
- en: We used `-R` to remove the offending key, but you can use any method to do so
    as it's just a text file. If you wish you can even empty the entire `known_hosts`
    file, but this will also mean you'll have to accept keys for every box you've
    ever connected to, once again.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what happens if you remove all the host keys from the server?
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can either re-provision your VM, or log on via the console
    and generate new keys.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Confirm that both of your Vagrant boxes are enabled, and connect to both using
    the `vagrant` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve previously changed the SSH configuration file, it might be an idea
    to destroy your boxes and re-provision them first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Using local forwarding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local forwarding is the act of mapping local TCP ports or Unix sockets onto
    remote ports or sockets. It's commonly used when either accessing a system securely
    (by requiring the user to first SSH to the box, thus encrypting their connection),
    or for troubleshooting problems.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we're going to start a small `webserver` on `centos2`, which
    we're going to connect to from `centos1`, first by connecting to the IP and port
    directly, and then by a connection to a mapped local port, utilizing port forwarding.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On `centos2`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: You've just created a small, Python-based web server, listening on every address
    at port `8888`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can confirm this by running a `curl` command from `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Note the listing of the home directory contents from `centos2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos2`, you should see your connection (`200` response):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Python's built-in web server module is very handy for testing. I used it here
    because it's available out of the box in our installation, but I wouldn't use
    it in a production environment, as there are better (and faster) alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm we''ve not yet got anything listening locally on port `9999`, perform
    another `curl` command from `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to locally forward connections to the local port `9999` to the remote
    port `8888`.
  prefs: []
  type: TYPE_NORMAL
- en: On the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following from `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: You may be prompted for your password (depending on what you've done in terms
    of key setup) and then be dropped back to the `centos1` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Our SSH connection will stay up for two minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we run a `curl`, checking that our forwarding is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Success! Here, we're curling the localhost IP address of `centos1` on our forwarded
    port and we're getting the directory listing from `centos2`!
  prefs: []
  type: TYPE_NORMAL
- en: Using an SSH config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we wanted to create this forwarding setup each time we connected to `centos2`,
    we can add the option to our SSH configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the emboldened line in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you SSH to the host specified, you will create a forwarded connection
    without having to specify it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: You're not limited to one `LocalForward` entry per host—you can have several.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use the `-L` flag with SSH, you're specifying that any connection attempts
    made to the local machine, on the first port listed, are to be forwarded to the
    remote host and port.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'First, the `-f` and `sleep 120` at the end of the command are a quick way to
    create a session and background it while we perform our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: In the real world, you're not limited to just one Terminal window, and generally,
    you'll find yourself opening a session to a remote host in one window while you
    work in another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part is the interesting bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're saying that local port `9999` should have any connection requests
    forwarded to the remote host on `127.0.0.1:8888`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of the way we created our web server, the following is also valid syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: This is because our remote web server was listening on all addresses, so instead
    of sending our request to the remote localhost address, we're just using the `eth1`
    address instead.
  prefs: []
  type: TYPE_NORMAL
- en: I've frequently seen setups where less secure programs are run on the localhost
    address only, meaning that if you want to access the program, you have to SSH
    to the remote host first.
  prefs: []
  type: TYPE_NORMAL
- en: You're also not limited to cURL and the command line—you could navigate to `http://127.0.0.1:9999`
    in your web browser, and it would still work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tips and tricks for SSH are somewhat endless, but the following can be good
    to practice.
  prefs: []
  type: TYPE_NORMAL
- en: Watching our SSH session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see when your SSH tunnel has closed, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon disconnection, this process will end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Connecting to systems beyond the remote host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`LocalForwarding` can even be used to access hosts that the remote machine
    can see, but your local one can''t.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following configuration entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `centos2` can see the host with the IP `192.168.33.12`, and
    the server it's got listening on port `6666`.
  prefs: []
  type: TYPE_NORMAL
- en: When we connect to `centos2` and create our tunnel, we can connect locally to
    `127.0.0.1:7777`, viewing the web server on `192.168.33.12:6666`.
  prefs: []
  type: TYPE_NORMAL
- en: This is widely used in conjunction with bastion hosts, which we will look at
    soon.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forwarding local connection attempts to a remote host can be an extremely useful
    troubleshooting and access control method.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the SSH manual page for more detail and expansion on the options
    listed in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SSH manual page can be brought up on most Linux systems using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Using remote forwarding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we looked at the ability to forward local connection
    attempts to a remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''re going to look at something very similar: remote forwarding.'
  prefs: []
  type: TYPE_NORMAL
- en: With remote forwarding, connection attempts made to a specified address and
    port on a remote machine are passed back through the SSH tunnel you've set up,
    and are processed on the local machine (your client).
  prefs: []
  type: TYPE_NORMAL
- en: Start on `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start it's worth noting that remote forwarding is a great way to punch
    holes out of networks, which means that it can also be a nightmare for security
    professionals charged with maintaining a network. With great power comes great
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Confirm that both of your Vagrant boxes are enabled, and connect to both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we're going to start by using our single command at our prompt, and then
    we'll look at how to set up the connection every time you SSH to a machine using
    the SSH config file.
  prefs: []
  type: TYPE_NORMAL
- en: On the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On `centos1`, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected to `centos2`, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: You will probably be prompted to add a host key, and then be prompted for a
    password. We're connecting back to `centos1`, so provide the default Vagrant password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be left at the `centos1` command-line prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Using an SSH config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with `LocalForward`, we can also use an SSH config file for `RemoteForward`
    connections, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see the exact setup we used in the command line section, only
    specified in the config file, so that it''s always available without having to
    type the flags out each time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we actually do here is... odd:'
  prefs: []
  type: TYPE_NORMAL
- en: We SSH to `centos2`, while saying that any connection attempts made to port
    `5353` on the remote machine (`centos2`) are to be passed back over the SSH session
    to our client (`centos1`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then run SSH on our remote machine (`centos2`), specifying the localhost
    address and the port that we're passing back to `centos1`, `127.0.0.1:5353`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The connection attempt is passed back over our established SSH session to `centos1`,
    where the SSH server accepts the connection request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, we're locally SSH'ing to `centos1` by specifying the local address
    and remote forwarded port on `centos2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confused? I was the first time someone explained this to me.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand this, we can use the `w` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos1`, this gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see our default Vagrant connection (from `10.0.2.2`), but we can
    also see a local connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apparently, we''ve SSH''d to our machine from the localhost address (`127.0.0.1`).
    This is actually the SSH session we established on `centos2` using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'On `centos2`, the `w` command gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see our default Vagrant connection (from `10.0.2.2`), but we can
    also see the remote connection from `centos1` (`192.168.33.10`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not just SSH that this can be used with. In the same way, we can forward
    ports from the remote session to our local machine – we have a wealth of options
    available to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start and background a simple web server on `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s SSH to `centos2`, while stating that any requests made on the remote
    machine to `127.0.0.1:7777` are passed back along the established SSH session
    to `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'On `centos2`, we should now be able to `curl 127.0.0.1:7777` and see the contents
    of Vagrant''s home directory on `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Success!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it may seem that this has limited uses, as far as nifty tricks go, you
    might find some curious cases for it in your career.
  prefs: []
  type: TYPE_NORMAL
- en: I have used this on one or two occasions, when DNS has been broken on a remote
    machine, and I've instead forwarded DNS requests back over an established SSH
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: ProxyJump and bastion hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to take a look at one very new SSH option, a slightly older SSH
    option, and the concept of bastion hosts (or jump boxes) in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We need three machines because we're going to use one machine as the "gateway"
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Set up your three VMs, preferably using the `Vagrantfile` at the top of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to each box, and then check that from `centos1`, you can ping `centos2`
    and `centos3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: These are on `192.168.33.11` and `192.168.33.12` if you're using the supplied
    `Vagrantfile`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From `centos1`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: You may be prompted to accept keys and also be asked for your password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find yourself on `centos3`, having jumped through `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Using an SSH config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The same trick can be used by specifying the `ProxyJump` option in your SSH
    config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now SSH to `centos3` via `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `-J` and `ProxyJump` options are a way to connect through a specified host,
    to a host beyond.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manual entry from the official manual pages ([https://man.openbsd.org/ssh](https://man.openbsd.org/ssh))
    for `-J [user@]host[:port]` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the target host by first making a ssh connection to the jump host
    described by destination and then establishing a TCP forwarding to the ultimate
    destination from there. Multiple jump hops may be specified separated by comma
    characters. This is a shortcut to specify a ProxyJump configuration directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manual entry from [https://man.openbsd.org/ssh_config](https://man.openbsd.org/ssh_config) for `ProxyJump` is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies one or more jump proxies as either [user@]host[:port] or an ssh URI.
    Multiple proxies may be separated by comma characters and will be visited sequentially.
    Setting this option will cause ssh(1) to connect to the target host by first making
    a ssh(1) connection to the specified ProxyJump host and then establishing a TCP
    forwarding to the ultimate target from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the `-v` flag with SSH, we can see what happens in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Emboldened in the preceding output, we can see the key steps that take place
    during the connection sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH reads the configuration for the host we're connecting to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH realises it has to use a `ProxyJump` host to access the specifed box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH translates the `ProxyJump` option into the equivalent `ProxyCommand` entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH reads the configuration for the `ProxyJump` host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH connects and authenticates against the `ProxyJump` host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH uses its established connection to the `ProxyJump` to connect to the destination
    host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH notes that it's authenticated to the destination host (via proxy).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know the basics of `ProxyJump`, let's take a look at some scenarios
    you may find useful.
  prefs: []
  type: TYPE_NORMAL
- en: More than once, using `ProxyJump` in the following ways listed has saved me
    literally milliseconds of time!
  prefs: []
  type: TYPE_NORMAL
- en: Multiple hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the example given previously is relatively simple, it's worth noting that
    you can do some pretty complex things with `ProxyJump`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list hosts, as the manual page suggests, and you can also chain hosts,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'The advantage of `ProxyJump` itself should be obvious: using this technique,
    you can create a setup where it only takes one command from your local machine
    to access a remote and otherwise inaccessible box.'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, you might use `ProxyJump` in an environment with one ingress server.
  prefs: []
  type: TYPE_NORMAL
- en: '`ProxyJump` also makes forwarding ports easier. If you add a `LocalForward`
    line to `CentOS4-V4` in the preceding code, SSH will take care of handling the
    traffic through the `ProxyJump` hosts, too! This can be especially handy as it
    stops you having to forward ports manually, potentially through several hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: ProxyCommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we saw in our debug message was SSH translating the fairly simple `ProxyJump`
    entry into a `ProxyCommand` line.
  prefs: []
  type: TYPE_NORMAL
- en: '`ProxyCommand` is the more traditional way of setting up this kind of forwarding,
    but not only is it syntactically more irritating, it''s also messy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Looks more awkward, doesn't it? But it works in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful on older distributions, which maybe haven't received the
    `ProxyJump` feature yet.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever forget the syntax for `ProxyCommand` and you have a box around that
    supports `ProxyJump`, remember that the `ProxyCommand` syntax is printed for you
    in the `SSH -v` debug we created before.
  prefs: []
  type: TYPE_NORMAL
- en: Bastion hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of this is great, but why would you need this if you're managing servers?
    Especially servers you control...
  prefs: []
  type: TYPE_NORMAL
- en: Consider your environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the office, you might have access to every machine the company has under
    its dominion, because you're sat on a LAN segment that has unfettered access to
    every other network segment.
  prefs: []
  type: TYPE_NORMAL
- en: Remotely, you might have a VPN machine on the border of your network, to which
    you need to initially establish a connection before you're able to SSH to other
    machines.
  prefs: []
  type: TYPE_NORMAL
- en: Bastion hosts are something you might consider, and they can be used in conjunction
    with a VPN.
  prefs: []
  type: TYPE_NORMAL
- en: You, as the system administrator, can decide that you'd like a single point
    of ingress for people SSH'ing to machines to easily log traffic and maybe manage
    keys – perhaps because you're just vindictive and want everyone's config file
    to be that much longer?
  prefs: []
  type: TYPE_NORMAL
- en: Work with your network team, consult your company's policies, and design a network
    that you can easily maintain, and that others won't mind using.
  prefs: []
  type: TYPE_NORMAL
- en: Your company may have specific security policies in place that limit what you're
    allowed to do. Remember, it's not about what you *can* do, it's about what you
    should do. No one will congratulate you for being clever when you're being marched
    out of the office for bypassing security. By all means highlight security problems
    when you see them, just don't exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: Using SSH to create a SOCKS Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is great.
  prefs: []
  type: TYPE_NORMAL
- en: 'I never get tired of talking about how great it is, and it would be remiss
    of me to not mention one of its best features: the ability to quickly and easily
    set up a SOCKS proxy.'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous sections, we forwarded individual ports, but what if we were
    using a bastion host to connect to a slew of different websites within a network?
    Would you like to add tens of lines to your SSH config file? Or manually type
    out each port and mapping every time?
  prefs: []
  type: TYPE_NORMAL
- en: I didn't think so.
  prefs: []
  type: TYPE_NORMAL
- en: That's where the `-D` flag comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'See `-D [bind_address:]port` in the SSH manual page ([https://man.openbsd.org/ssh](https://man.openbsd.org/ssh)):'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies a local "dynamic" application-level port forwarding. This works by
    allocating a socket to listen to port on the local side, optionally bound to the
    specified bind_address. Whenever a connection is made to this port, the connection
    is forwarded over the secure channel, and the application protocol is then used
    to determine where to connect to from the remote machine. Currently the SOCKS4
    and SOCKS5 protocols are supported, and ssh will act as a SOCKS server. Only root
    can forward privileged ports. Dynamic port forwardings can also be specified in
    the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 addresses can be specified by enclosing the address in square brackets.
    Only the superuser can forward privileged ports. By default, the local port is
    bound in accordance with the GatewayPorts setting. However, an explicit bind_address
    may be used to bind the connection to a specific address. The bind_address of
    "localhost" indicates that the listening port be bound for local use only, while
    an empty address or '*' indicates that the port should be available from all interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that with a single command, you can set up a connection that
    you can then forward traffic through (from a web browser, or other applications
    that support `SOCKS` proxies). You don't have to punch holes through firewalls,
    and you don't have to manually map ports.
  prefs: []
  type: TYPE_NORMAL
- en: '`SOCKS` itself is an internet protocol, and quite an old one at that, though
    we still actively use `SOCKS5`, which was approved by the Internet Engineering
    Task Force in 1996! It''s like any other proxy server, allowing you to exchange
    packets over a connection; in this case, our SSH tunnel. Applications may choose
    to natively support SOCKS proxies or not, but a lot of commons ones will (Firefox,
    for example).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we're going to be using `centos1` and `centos2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you have a connection open to both machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'On `centos2`, let''s set up our small web server again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to `centos1`, where we'll first set up our SOCKS proxy using just one
    command, and then look at how to start the proxy each time we SSH to the box.
  prefs: []
  type: TYPE_NORMAL
- en: On the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s establish our SSH session and disconnect from the established session
    at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Once established (until the sleep runs out), we can use our proxy to query anything
    and everything that `centos2` can see via the SSH session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check out our web server on `centos2`, from `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Brilliant! We've run a cURL against a localhost address, but by passing it through
    the proxy, our request has been run against `centos2` instead!
  prefs: []
  type: TYPE_NORMAL
- en: Using an SSH config file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The same can be accomplished, as shown previously, by using an SSH config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now be confident our proxy will be available each time we connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'And again, look at the contents of the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Just to prove we were really using our proxy, let''s try the `curl` command
    without an established session (you will have to wait for SSH to time out, or
    kill the process if it''s not already died):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you add the `-D` option to SSH, or add the `DynamicForward` option to your
    SSH config file, you're telling SSH that you want to specify a port on your `local`
    side that will forward any requests received to it over your SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down our commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'First, as we did previously, we''ve used `-f` and sleep to keep a connection
    open, while dropping us back to the `centos1` prompt once a connection is established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve also specified our `-D` option, with a randomly chosen port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: I use `9999` through force of habit, but occasionally I mix it up a bit by using
    `7777`, or even `6666` if I'm feeling really wild. You may use whichever port
    you wish (above `1024`, as those below this can only be used by root.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''re established, we use the following command to check our proxy is
    available for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Breaking this down into its two parts, we start with the variable we''re setting
    for just this run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: cURL uses `all_proxy` as a way of setting the SOCKS proxy for its run.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your browser, you may find the option to set a `SOCKS` server under settings,
    and in some other applications, `SOCKS` proxies can be configured when required.
    Gnome''s network manager looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dcbe70c-ae11-4f6b-a090-19800aa7a1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other part of our command is `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: With our `all_proxy` setting, cURL knows to use the SOCKS proxy on port `9999`
    for its connections, meaning that when we query `127.0.0.1:8888`, we're sending
    that request over our SSH session to resolve on `centos2`.
  prefs: []
  type: TYPE_NORMAL
- en: Neat!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to take it one step further, have a look at using `tcpdump` on
    your remote side to check out traffic traversing your network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see traffic come through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Understanding and using SSH agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing we touched on briefly was the concept of an SSH agent.
  prefs: []
  type: TYPE_NORMAL
- en: When you SSH to a server (after setting up a key) and you're prompted for a
    passphrase, what you're actually doing is decrypting the private key part of your
    public-private key pair (the `id_rsa` file by default), so that it can be used
    to verify that you are who you say you are against the remote host. It can get
    tedious to do this each time you SSH to a server, especially if you're managing
    hundreds or thousands of constantly changing boxes.
  prefs: []
  type: TYPE_NORMAL
- en: That's where SSH agents come in. They're somewhere for your now-decrypted private
    key to live, once you've given it the passphrase, for the duration of your session.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've got your private key loaded into your agent, the agent is then responsible
    for presenting the key to any servers you connect to, without you having to type
    your passphrase again, saving valuable seconds and finger strain.
  prefs: []
  type: TYPE_NORMAL
- en: Most desktop Linux distributions will start an SSH agent of some sort within
    your user session, sometimes unlocking your private keys when you log in to your
    user account.
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS has a specific SSH config file option for `UseKeychain` ([https://developer.apple.com/library/archive/technotes/tn2449/_index.html](https://developer.apple.com/library/archive/technotes/tn2449/_index.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"On macOS, specifies whether the system should search for passphrases in the
    user''s keychain when attempting to use a particular key. When the passphrase
    is provided by the user, this option also specifies whether the passphrase should
    be stored into the keychain once it has been verified to be correct. The argument
    must be "yes" or "no". The default is "no"."'
  prefs: []
  type: TYPE_NORMAL
- en: If you're running macOS on your desktop, you might consider this option.
  prefs: []
  type: TYPE_NORMAL
- en: 'On my Ubuntu laptop installation, looking for a running agent reveals this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking for this process ID shows me what''s running as my `ssh-agent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we're going to start an SSH agent on `centos1` and load a key
    into it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with the previous section, confirm that both of your Vagrant boxes are enabled
    and connect to the first using the `vagrant` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure you have an SSH key available on `centos1`. Re-read the previous section
    on generating an SSH key if you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy your key to `centos2` if you haven''t already, accepting the host key
    if you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that attempting to log into `centos2` prompts you for your key passphrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you're on `centos1` to begin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by running the `ssh-agent` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: You can see it's printed several environment variables and the process ID it's
    running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can confirm this is the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the various variables that have been provided for you and paste them into
    the same window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the `ssh-add` command and fill in your key''s passphrase when prompted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: You can see that it informs you that it's added your identity.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH to `centos2`, and prepare to be amazed when you''re not prompted for your
    passphrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: You may think that you don't mind typing in your passphrase once or twice a
    day, and you'd be fine to think that, but if you're logging into a machine that
    infrequently, you're probably a very lucky system administrator. Where SSH agents
    excel is when you want to log into tens or hundreds of machines, or even if you're
    using a `ProxyJump` box, and don't feel like typing your passphrase any more times
    than is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'To kill a running agent, use `-k`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: I have seen cases where companies don't like the use of SSH agents, and mandate
    passwords or passphrases each time. Check you're not violating some obscure security
    policy to make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run the suggested unset commands to remove the variables we set before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Simply logging out of your session won't stop the `ssh-agent` program from running.
    Be mindful of this if you choose to use it. Likewise, you shouldn't run an agent
    on a remote host shared between multiple people – it's best kept to your personal
    machine. If you plan on using an SSH agent, read up on current security practices.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we initially run `ssh-agent`, the agent itself is started in the background,
    and we're given the necessary environment variables for SSH. After they're set,
    running SSH will cause it to read these variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add a couple of `-vv` flags to SSH, we can see it find our key in the
    agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Without the agent loaded, but with the key present, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'The SSH environment variables are also read by `ssh-add`, which we used to
    add our key to the agent. To quote the manual page:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The authentication agent must be running and the SSH_AUTH_SOCK environment
    variable must contain the name of its socket for ssh-add to work."'
  prefs: []
  type: TYPE_NORMAL
- en: When you've got one key or more in an agent, SSH will try to use these keys
    to authenticate against remote hosts, removing the need to type your password
    each time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to add the agent start command to a script (say `.bashrc`), you
    may want to automatically evaluate the environment variables given to you. `ssh-agent` assumes
    you're starting it this way.
  prefs: []
  type: TYPE_NORMAL
- en: In the manual page for `ssh-agent`, you even get this tip.
  prefs: []
  type: TYPE_NORMAL
- en: '"There are two main ways to get an agent set up: The first is that the agent
    starts a new sub‐command into which some environment variables are exported, eg
    ssh-agent xterm &. The second is that the agent prints the needed shell commands
    (either sh(1) or csh(1) syntax can be generated) which can be evaluated in the
    calling shell, eg eval ''ssh-agent -s'' for Bourne-type shells such as sh(1) or
    ksh(1) and eval ''ssh-agent -c'' for csh(1) and derivatives."'
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, this means that it''s easiest to start the agent like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're using a Bash sub-shell to start and read the agent's output.
  prefs: []
  type: TYPE_NORMAL
- en: ssh-add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ssh-add` has a few decent options available, some of which are handy to know
    about.'
  prefs: []
  type: TYPE_NORMAL
- en: '`-l` will allow you to see loaded identities, along with their fingerprints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '`-D` will allow you to remove all identities (and `-d` can be used to remove
    specific ones):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '`-x` will lock an agent, while `-X` will unlock it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: AddKeysToAgent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using an agent, you might like the SSH config file option `AddKeysToAgent`,
    which will automatically add used keys to your `ssh-agent` for future use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following; we''re starting with no keys in our agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Note that the first time, we're prompted for our key's passphrase. The second
    time, we're not.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now loaded into our agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all handled by one config option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other SSH agents, other than the default one supplied with OpenSSH
    (which we used here.) There are also some systems that use more pieces (such as
    PAM on most desktop distributions.) Have a read around and see if you can work
    out how your distro of choice does things.
  prefs: []
  type: TYPE_NORMAL
- en: Running multiple SSH servers on one box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it can be a requirement to run multiple SSH servers on one box. You
    may want to use one for regular, day-to-day activities, and the other server for
    backups or automation.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it's perfectly possible to run two distinct versions of the SSH
    server at once.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to use `centos2` for this, setting up a secondary SSH server on
    port `2020`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't already, I would advise destroying your previous Vagrant boxes
    and deploying new ones for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once new boxes are created, connect to both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `policycoreutils-python` on `centos2`, for `semanage` later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''re going to make a copy of our initial configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''re going to make a couple of changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''re going to copy our `systemd` unit file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''re going to make some changes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the old environment file to a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, point this environment file to our new configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell SELinux we''re going to be running an SSH daemon on `2020`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell `systemd` we''ve made changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'Start and enable our second server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'Check it''s running by SSH''ing from `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Remember when we were looking at host keys before? What we can see in the preceding
    code is that both the port `22` server and `2020` server are sharing host keys,
    as we were only asked to accept them once.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All we've done here is duplicate a few files and made some sensible changes
    to ensure that the two processes don't interact with each other very much.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we created the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: We then ran a couple of `sed` commands to change some values. Specifically,
    we modified the port the server would listen on, and the process ID file it would
    use (the PID modification is frequently overlooked).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we copied the `systemd` unit file that comes with the OpenSSH server package
    on CentOS, tweaking it slightly by changing the description and pointing it to
    a different environment file.
  prefs: []
  type: TYPE_NORMAL
- en: We put the resulting unit file (`sshd_2020.service`) in a different location
    to the original to differentiate it from a supplied default.
  prefs: []
  type: TYPE_NORMAL
- en: 'We copied the environment file and made a modification to pass a new option
    to the SSH daemon when it''s started. This new option was a different configuration
    file (the one we started off making):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: We then updated our SELinux policy to make it aware of the new server's intentions,
    reloaded systemd's running configuration, and both enabled and started our server.
  prefs: []
  type: TYPE_NORMAL
- en: Your milage may vary in terms of the standard location for configuration and
    environment files. This can change between major distro releases, and some settings
    frequently differ between different distributions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're interested in seeing both servers running, there's a few methods of
    doing so.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos2`, start with `ss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use systemd''s built-in commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'And lastly, we can use good old `ps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While I've spent this chapter describing some brilliant things that SSH is capable
    of and singing its praises throughout, it's worth highlighting that it's still
    software, and it's also constantly evolving. Because it's software, it can have
    bugs and unexpected behavior, though the developers behind it are some of the
    best, what with it being part of the OpenBSD suite of software.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take anything away from this chapter, make it the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use key-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable root login over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a local SSH config file for connecting to remote machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'd highly recommend signing up to the various SSH mailing lists if you're a
    bit sad like I am, and keeping an eye out for new features that might capture
    your imagination. `ProxyJump` hasn't been around for long, and it's very handy.
  prefs: []
  type: TYPE_NORMAL
- en: I do recall instances that SSH wound me up in some form or other, such as the
    time I spent a long hour or two bashing my head against a desk, trying to work
    out why SSH just wouldn't read a private RSA file, only to discover that it needed
    the public half to be in the same folder too, on the local machine. That's a considerable
    amount of time I won't get back, but it's a mistake I won't make twice.
  prefs: []
  type: TYPE_NORMAL
- en: That said, I can also share many more instances where SSH has downright impressed
    me, and made my life easier. It's basically the Swiss Army knife of system administration,
    and not just because it's usually the way you connect to a box.
  prefs: []
  type: TYPE_NORMAL
- en: People use SSH for administration, transferring backups, moving files between
    boxes, automation using tools such as Ansible, wrapping other connections inside,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: I once saw an implementation of OpenSSH atop Windows, because the people running
    the Windows servers were Unix people, and distrusted RDP. They used to SSH to
    the box, local forwarding the RDP session on `127.0.0.1:3389` and connecting to
    RDP through the SSH session... it was slow...
  prefs: []
  type: TYPE_NORMAL
- en: It's solid, secure, and a pleasure to use. It works on Linux, macOS, the BSDs,
    Solaris, and even Windows!
  prefs: []
  type: TYPE_NORMAL
- en: Here's a big thanks to SSH, and OpenSSH specifically.
  prefs: []
  type: TYPE_NORMAL
- en: Some things we didn't discuss in this chapter were ciphers, message integrity
    codes, key exchange algorithms, and so on. Primarily, this is because these subjects
    are nearly a book in themselves, and are definitely out of scope for what we're
    doing here. I generally trust the maintainers of the various packages to choose
    sensible defaults, but there's no harm in reading up on security independently,
    should you feel compelled.
  prefs: []
  type: TYPE_NORMAL
