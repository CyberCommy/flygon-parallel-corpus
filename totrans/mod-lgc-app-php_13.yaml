- en: Chapter 13. Separate Public and Non-Public Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point we have made major strides in reorganizing the core of our legacy
    application. However, the surrounding architecture still leaves much to be desired.
  prefs: []
  type: TYPE_NORMAL
- en: Among other things, our entire application is still embedded in the document
    root. This means that we need special protections on resources we intend to keep
    private, or that we need to rely on obscurity to make sure that clients do not
    browse to resources not intended to be public. Errors in web server configuration—or
    failure to attend to specific security measures—may reveal parts of our application
    to the public.
  prefs: []
  type: TYPE_NORMAL
- en: As such, our next step is to extract all public resources to a new document
    root. This will keep the non-public resources from being delivered by accident
    and will set up a structure for further refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: Intermingled resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our web server acts as a combined front controller, router, and dispatcher
    for our legacy application. The routes to the page scripts are mapped directly
    onto the file system, using the web server document root as a base. The web server
    document root, in turn, is mapped directly to the root of the legacy application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the web server document root is `/var/www/htdocs`, it currently
    doubles as the application root. Thus, the URL path `/foo/bar.php` maps directly
    to `/var/www/htdocs/foo/bar.php`.
  prefs: []
  type: TYPE_NORMAL
- en: This may be fine for public resources, but there are large parts of our application
    that we do not want to be directly accessible by outsiders. For example, directories
    related to configuration and setup should not be exposed to possible outside examination.
    An error in the web server configuration may reveal the code itself, making our
    passwords and other information available to malicious users.
  prefs: []
  type: TYPE_NORMAL
- en: The separation process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the process itself is straightforward, the change we are making is
    a foundational one. It affects the server configuration as well as the legacy
    application structure. To fully effect this change, we will need to coordinate
    closely with any operations personnel who are in charge of server deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the process is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate with operations to communicate our intentions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new document root directory in our legacy application, along with a
    temporary index file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reconfigure the server to point to the new document root directory, and spot
    check the new configuration to see if our temporary index file appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the temporary index file, then move all public resources to the new document
    root, and spot check along the way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit, push, and coordinate with operations for QA testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Coordinate with operations personnel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the single most important step in the process. We should never make
    changes that affect server configurations without discussing our intentions with
    the people in charge of the servers (our operations personnel).
  prefs: []
  type: TYPE_NORMAL
- en: The feedback from operations will inform us as to the path we need to follow
    for making sure our change will be effective. They will advise or instruct us
    as to what the new document root directory name should be, along with what the
    new server configuration directives should be. They are the ones in charge of
    deploying the application, so we want to do our best to make their job as easy
    as possible. If operations is unhappy, then everyone will be unhappy.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if we have no operations personnel and are in charge of our own
    deployments, our job is both easier and harder. It is easier because we have no
    coordination and communication costs. It is harder because we need specific, detailed
    knowledge about server configurations. Proceed carefully in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document root directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After coordinating with our operations personnel, we create a document root
    directory in the legacy application structure. Our operations contacts will have
    advised us on a proper directory name; in this case, let us assume that name is
    `docroot/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we currently have a legacy application structure that looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**var/www/htdocs/**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '... we add a new `docroot/` directory at the top level of the application.
    In the new document root directory, we add a temporary `index.html` file. This
    will let us know, later, if our server reconfiguration works properly. It can
    contain any text we like, such as `Rejoice! The new configuration works!`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we are done, the new directory structure will look something more like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**/var/www/htdocs/**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Reconfigure the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now reconfigure our local development web server to point to the new `docroot/`
    directory. Our operations personnel should have given us some instructions on
    how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Apache, we might edit the configuration file for our local development environment
    to change the `DocumentRoot` directive in a related `.conf` file from the main
    application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '... to our newly created subdirectory within the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We then save the file, and reload or restart the server to apply our changes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The applicable `DocumentRoot` directive may be in one of many locations. It
    could be in the main `httpd.conf` file, or perhaps inside a separate configuration
    file as part of a `VirtualHost` directive. If we are using something other than
    Apache, the configuration is probably in an entirely different file. Unfortunately,
    it is beyond the scope of this book to give full instructions on web server administration.
    Please review the documentation for your particular server for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have applied our configuration changes, we browse to our legacy application
    to see if the new document root is being honored. We should see the contents of
    our temporary `index.html` file. If not, we have done something wrong and need
    to revisit our changes until they work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Move public resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have configured the web server to point to our new `docroot/` directory,
    we can safely remove our temporary `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing so, our next step is to move all of our public resources from their
    current locations into the new `docroot/` directory. This includes all of our
    page scripts, style sheets, JavaScript files, images, and so on. It does *not*
    include anything that users should not be able to browse to: classes, includes,
    setup, configuration, command-line scripts, tests, view files, and so forth.'
  prefs: []
  type: TYPE_NORMAL
- en: We want to maintain the same relative location in `docroot/` as they had when
    in the base of the application, so we should not change file names or directory
    names when moving.
  prefs: []
  type: TYPE_NORMAL
- en: As we move our public resources to their new location, we should occasionally
    spot check our modified structure by browsing through the application. This will
    help us discover any problems with our changes earlier rather than later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of our moved PHP files may still depend on `include` files in specific
    locations. In these cases, we may need to modify them to point to paths relative
    to our new `docroot/` directory. Alternatively, we may need to modify our include-path
    values so that they can find the necessary files.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we are done, we will have a directory structure that looks a little more
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**/var/www/htdocs/**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Commit, push, coordinate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have moved all of our public resources to the new `docroot/` directory
    and the legacy application works properly in this new structure, we commit all
    of our changes and push them to the common repository.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we would normally notify QA of our changes for them to test.
    However, because we have made a foundational change to the server configuration,
    we need to coordinate the QA testing with our operations personnel. Operations
    will probably need to deploy the new configuration to the QA servers. Only then
    will QA be able to effectively check our work.
  prefs: []
  type: TYPE_NORMAL
- en: Common Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is This Really Necessary?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time it seems harmless to leave the various non-public resources
    in the document root. But for our next step, it is going to be very important
    that we have a separation between our public resources and our non-public ones.
  prefs: []
  type: TYPE_NORMAL
- en: Review and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now begun to refactor the overarching architecture of our legacy application.
    By creating a document root that separates our public resources from non-public
    ones, we can start to put together a front-controller system to control access
    to our application.
  prefs: []
  type: TYPE_NORMAL
