- en: '*Chapter 8*: Assessing AWS API Gateway'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS API Gateway acts as a gateway to applications that can host various types
    of data. The data they host varies; however, what does not is the fact the some
    of the data may be considered attractive to unauthorized personnel – such as the
    locations of S3 buckets or an overly permissive header. This chapter will discuss
    what AWS API Gateway is, and how you can learn to inspect API calls and manipulate
    API calls with open source tools.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how AWS APIs work will allow us to grow our mindset outside of
    the Linux Terminal and into the browser and understand the basics of web services
    and how to interact with them. While going through this chapter, remember that
    quite a few of the techniques in it can also assess all web applications within
    AWS. This chapter aims to have you obtain a thorough understanding of AWS APIs
    and how to evaluate web applications by manipulating API calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and configuring AWS APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first API with AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting traffic with Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Burp Suite: [https://portswigger.net/burp/communitydownload](https://portswigger.net/burp/communitydownload)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kPr2sb](https://bit.ly/3kPr2sb)'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and configuring AWS APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever wondered how information goes from your computer to a website
    or the backend server of that website? Well, typically, your request is sent from
    your browser and then goes through something called an **application programming
    interface** (**API**). An API is an interface implemented to allow other applications
    or hosts to interact with one central point. In this case, the API is the central
    point and the applications will be services that we interact with within AWS.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does this mean with AWS and how are we going to be using it through
    this book? Well, first we need to understand the basic terms of what an Amazon
    API is and how the Amazon API gateway manages services. We will get an understanding
    of this by looking at some high-level views of APIs in an AWS environment, and
    then later learn how to intercept and manipulate an API request the same way we
    would in a real-life pentest.
  prefs: []
  type: TYPE_NORMAL
- en: AWS API Gateway is a managed service that gives a **front door** that allows
    you to access applications and access data on various AWS services. The gateway
    handles all the tasks that involve accepting and processing requests to and from
    the API. APIs also play a crucial role in authentication and authorization control,
    which play a crucial role in security. If someone were able to bypass authentication
    and authorization mechanisms, they would be able to get direct access to the service
    or resource that is being targeted.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start looking at high-level maps of APIs and how they work with our
    AWS environments, we need to understand the two API types that are mentioned by
    AWS. The two APIs that we will discuss are **RESTful APIs** and **WebSocket APIs**.
  prefs: []
  type: TYPE_NORMAL
- en: RESTful APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: REST is actually an acronym for **REpresentational State Transfer**. RESTful
    API design enables us to make what is called a stateless call or stateless request.
    This stateless request allows calls to be redeployed if something fails, and can
    also scale when needed. This function makes RESTful APIs reasonably sought after
    in cloud applications, such as AWS, because the scaling of the stateless API can
    easily integrate with agile scaling cloud environments. Due to their agile nature,
    RESTful APIs can make calls and changes based on traffic load fairly quickly without
    becoming overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is quite a bit of information about APIs that goes way above the material
    in this book. If you want to learn more about RESTful APIs, check out the AWS
    documentation here: [https://docs.aws.amazon.com/apigateway/api-reference/](https://docs.aws.amazon.com/apigateway/api-reference/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we understand a little more about RESTful APIs, let''s briefly mention
    the other type of API: WebSocket APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The WebSocket API gateway is a collection of various routes integrated with
    various services such as Lambda functions and HTTP endpoints. WebSocket APIs are
    bidirectional and ensure that an end client can send traffic to and from services
    and that services can also send communication back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional essentially means traffic can function in two different directions.
  prefs: []
  type: TYPE_NORMAL
- en: Due to their versatility and bidirectional functionality, WebSocket APIs are
    commonly used in applications that run real-time streaming channels, such as games,
    financial trading platforms used on Wall Street, and chat applications – some
    of which you may use to talk with your friends and family!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have been briefed on what APIs are and how they work, I want us
    to start moving more toward applying some hands-on practical knowledge to help
    bring everything full circle. However, before we do that, let's take a quick look
    at a high-level overview of how an API will work in AWS and interact with a service
    such as Lambda in a **virtual private cloud** (**VPC**) and also an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of API maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will briefly illustrate a high-level view of how APIs can work
    with a Lambda function within a VPC and an EC2 instance. The advantage of running
    an API and integrating it with various services is that you can scale multiple
    services through a web traffic portal, in this case, the API, and log everything
    centrally from the API. As mentioned, APIs allow scaling to occur quickly and
    efficiently – so having them as the main portal to access multiple services will
    enable you to build more services that are queried from one central API.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at a simple solution for creating an API that allows you
    to access a Lambda function and an EC2 instance. For this example, we are not
    worried about what the services are doing. We are more concerned with understanding
    how traffic flows from the Amazon API gateway to the services, and back from the
    services to the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following illustration to help you understand the API process with
    AWS services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – AWS API Gateway diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – AWS API Gateway diagram
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the diagram, we can see that the **External User** is attempting
    to access services through the API. Remember that the API uses web request calls
    to post and retrieve information. The **Amazon API Gateway** makes a call to the
    **Lambda function** or the **EC2 instance** based on what the user is requesting.
    The service then sends data back to the external user. This completes the traffic
    flow between the user and the services.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about web requests later in this chapter when manipulating
    calls on APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good understanding of what an API is and how it works with
    AWS services, let's move forward with making our own API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first API with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will be a simple but concise walk-through of setting up your own
    API within AWS. We aren't going to worry about connecting any services to it –
    we will do that in later exercises when inspecting traffic and manipulating calls
    on to the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are instructions that will help guide you through creating an
    API that you can use throughout this chapter. To get started, log in to the AWS
    console and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for the `api` service in the search bar at the main menu of the AWS console:![Figure
    8.2 – Searching for api
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Searching for api
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll be given a list of APIs to choose from. Select **REST API** and
    click **Build**:![Figure 8.3 – Building an API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Building an API
  prefs: []
  type: TYPE_NORMAL
- en: Now you'll need to configure the API. Make sure that you choose `PentestPacktAWS`.
    You may call your API whatever you like, but ensure that you remember the name.
    Giving a description is optional, but is good practice, especially when you start
    building out more APIs – it will help you remember the purpose of each API:![Figure
    8.4 – Naming the API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Naming the API
  prefs: []
  type: TYPE_NORMAL
- en: Once you have input all your information, click **Create API** to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you click **Create API**, you'll be introduced to the main dashboard of
    your API. This is where we'll configure our API later in this chapter. For now,
    feel free to get familiar with the panel.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to create an API, the next logical step is to understand
    the tool we are going to use to assess the API. The next section of this chapter
    focuses on a popular web tool called Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section of the chapter will discuss a tool that we have yet to use in this
    book. The tool that we will be using is a proxy tool that allows us to perform
    security testing on web applications, and in our case, it will enable us to intercept
    requests being sent to and from our AWS API targets. This means that Burp Suite
    will give us full control over requests sent via our web browser, making us able
    to manipulate calls to and from APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A proxy is a server or a service that inspects and analyzes traffic before it
    is sent to our target.
  prefs: []
  type: TYPE_NORMAL
- en: Intercepting calls to and from APIs allows us to see parameters such as tokens,
    sessions, and other attributes that may be able to be altered to make the API
    accept calls that it shouldn't. This is a fairly common technique that is used
    by bug bounty hunters and web application penetration testers.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'A bug bounty hunter is a freelance penetration tester who works with companies
    and tests their applications for bugs on the website. These bugs are reported
    through a third-party service known as a bug bounty program. Find out more about
    bug bounty programs here: [https://whatis.techtarget.com/definition/bug-bounty-program](https://whatis.techtarget.com/definition/bug-bounty-program).'
  prefs: []
  type: TYPE_NORMAL
- en: In this next section, we will log into our local Kali Linux machine and start
    up Burp Suite and configure it to our web browser. Once we have that set up, we
    will intercept a few different requests and inspect various web requests to understand
    more about how to use the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Burp Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand more about what Burp Suite is, let's move forward with
    actually getting our hands dirty and start using the application. Before we can
    begin, you'll need to have your local Kali Linux machine started in VirtualBox.
    Once you have the machine up and running, log into the Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, use the following steps to get Burp Suite up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a Terminal and type `burpsuite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Burp Suite is open, you'll need to select **Temporary Project**:![Figure
    8.5 – New Burp project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – New Burp project
  prefs: []
  type: TYPE_NORMAL
- en: Select **Use Burp defaults**:![Figure 8.6 – Use Burp defaults
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Use Burp defaults
  prefs: []
  type: TYPE_NORMAL
- en: Next, go to the **Proxy** tab and find the **Options** section:![Figure 8.7
    – Configuring the interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Configuring the interface
  prefs: []
  type: TYPE_NORMAL
- en: You'll want to ensure that your interface is configured to your local address
    of `127.0.0.1` and that the port is set to `8080`. Burp Suite has this configured
    by default, however, in the case that it may not be like that – you can configure
    Burp Suite to meet the specifications of the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great, now we have set up Burp Suite to bind to our localhost on port `8080`.
    What this means is that any traffic being sent to and from port `8080` through
    our localhost will get caught by Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: We aren't done yet, now we need to configure our browser to also push traffic
    through our localhost on the designated port that we have assigned it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, open up Firefox within your Kali Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal and type `firefox` and hit **Enter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the options in the top right of the browser and select **Preferences**:![Figure
    8.8 – Browser configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Browser configuration
  prefs: []
  type: TYPE_NORMAL
- en: Next, type `proxy` in the search bar of the **Preferences** section. Click **Settings…**
    to continue:![Figure 8.9 – Configuring the web proxy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Configuring the web proxy
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that `8080`. Ensure that **Use this proxy server for all protocols**
    is selected. That will allow encrypted traffic to also be passed through. Click
    **OK** when you''re finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Setting parameters for your proxy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Setting parameters for your proxy
  prefs: []
  type: TYPE_NORMAL
- en: Great job, you have successfully configured your browser to work with Burp Suite.
    From here, we will start to use Burp Suite to intercept web requests for the rest
    of this chapter. However, before we can get started, we need to install the Burp
    Suite certificate on our browser. It's important that we have the ability to intercept
    traffic so that we can see unencrypted and encrypted traffic going through web
    service protocols via our browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Burp Suite certificate, follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Burp Suite running and configured, type the following web address in your
    browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://burp](http://burp)'
  prefs: []
  type: TYPE_NORMAL
- en: You'll see in the top-right corner a banner that says **CA Certificate**. Click
    on it:![Figure 8.11 – Burp certificate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – Burp certificate
  prefs: []
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the `certificates`. Click **View Certificates…**:![Figure 8.12 –
    Viewing certificates
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – Viewing certificates
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll be prompted with the **Certificate Manager**. Here, you'll need
    to import the certificate we just downloaded from Burp Suite. To do this, click
    **Import…**:![Figure 8.13 – Importing certificates
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Importing certificates
  prefs: []
  type: TYPE_NORMAL
- en: Import the `cacert.der` file we just downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check **Trust this CA to identify websites** and **Trust this CA to identify
    email users**. Click **OK** when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Importing certificates continued'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Importing certificates continued
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! Now we are officially ready to intercept some web requests! Moving
    forward, when using Burp Suite for anything in this book, or in real life, please
    ensure that you turn the proxy on before use, and turn it off after using it!
    If you don't turn off the proxy, then you may experience some issues using your
    web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re still having trouble with your Burp Suite application, check the
    help guide for resolutions to common issues: [https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting](https://portswigger.net/burp/documentation/desktop/getting-started/proxy-troubleshooting).'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting traffic with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This next section is going to go over how we can inspect our traffic to and
    from the REST API we just created. Inspecting traffic with Burp Suite is crucial
    to network pentesting and web application penetration testing because it allows
    us to see all the communications over a particular connection. While we won't
    worry about network intercepting, we will be using many of the same techniques
    used in web application penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin moving forward with inspecting traffic, we need to ensure that
    we do some quick housekeeping before we get started. We will need to ensure that
    we have deployed our AWS API gateway too so that we can learn how to intercept
    traffic coming to and from the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the API gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, log back into the AWS console and go to the API that we created
    at the beginning of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Selecting our API'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Selecting our API
  prefs: []
  type: TYPE_NORMAL
- en: Click on the API to access the gateway to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have entered the main configuration screen for your AWS API, you''ll
    need to select **Actions**. This will drop down a menu that has options for creating
    methods, deleting the API, and most of all, creating a method and deploying the
    API. The following steps will help guide you through deploying the API:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Actions**:![Figure 8.16 – Selecting Actions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – Selecting Actions
  prefs: []
  type: TYPE_NORMAL
- en: Select **Create Method**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **ANY** as the action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Mock** as the integration type:![Figure 8.17 – Creating Mock methods
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Creating Mock methods
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Great, we now have a method that can be used to call the API. Now that we have
    a method, we can move forward with deploying our API and making it accessible.
    The next steps will help us with deploying the API:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Actions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Deploy API**:![Figure 8.18 – Deploy API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – Deploy API
  prefs: []
  type: TYPE_NORMAL
- en: Select **[New Stage]** for **Deployment stage**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the stage name, use **prod**:![Figure 8.19 – Configuring Stage name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – Configuring Stage name
  prefs: []
  type: TYPE_NORMAL
- en: To finish, click **Deploy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click **Deploy**, you will notice that there will be a banner at
    the top of your AWS API dashboard. The banner will say **Invoke URL**. You should
    see a web address that looks something as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – API banner'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.20 – API banner
  prefs: []
  type: TYPE_NORMAL
- en: That web address is the web address to your newly deployed AWS API and will
    be what we use to test intercepting traffic in the next section. Know that your
    API address will be different than the web address in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's move forward with intercepting some traffic on our newly deployed
    AWS API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting practical with intercepting API calls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now for some fun, hands-on stuff. Now we are going to pivot away from the housekeeping
    portion, to perform some hands-on exercises to help to get you to use Burp Suite.
    Before continuing, ensure that you have Burp Suite and your browser configured
    to intercept web traffic. Please refer to the *Configuring Burp Suite* section
    if you need a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Burp Suite and your web browser configured correctly, let''s go ahead
    and get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and put your API URL into the address bar and hit *Enter*.
    Check *step 5* in the previous section for a reminder on how to **Invoke URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your Burp Suite application should come up with an **Intercept** window:![Figure
    8.21 – GET request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21 – GET request
  prefs: []
  type: TYPE_NORMAL
- en: What's happening here is we are intercepting the call between our host and the
    server. Notice the `GET` parameter followed by `/prod`. This means we are attempting
    to retrieve the `prod` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To continue, click **Forward** to push the request to the server:![Figure 8.22
    – Web browser after a forwarding request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.22_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.22 – Web browser after a forwarding request
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a blank screen – this is totally fine. Because the page
    rendered blank and there is not a **Not Found** banner, we know the URL works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now successfully intercepted a packet between our host machine and the
    AWS API. While this may seem basic, it's paramount that we understand the basics
    of Burp Suite intercepting web traffic before we begin to manipulate the calls
    between the API and our host. If we skipped understanding how to set up our environment
    and understand basic intercepting, we have failed to really understand what exact
    processes are occurring.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to move forward with the final section of this chapter. We
    will learn a little more about HTTP methods and learn about manipulating API calls
    by building on everything we have learned this far.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started, we need to understand the basic HTTP methods that we
    can use to manipulate API calls. HTTP request methods are essentially an action
    that you would like to execute on the target API. Commonly known as HTTP verbs,
    these methods can allow us to put data and retrieve data or information from the
    target resources. The next section will briefly talk about those methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `GET` method requests resources from a specific address. Requests using
    `GET` should only retrieve data. The `HEAD` method asks for an acknowledgment
    equal to a `GET` request, only without the acknowledgment body. The `DELETE` method
    is used to delete a specified resource. The `POST` method is used to submit data
    to the target resource – typically, you see `POST` methods used to post data and
    cause issues. The `PUT` method is used to PUT data on the target server.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what HTTP methods are and how they work, let's see them
    in action. For this next example, we are going to run through an exercise where
    we manipulate calls to a vulnerable S3 API. If you need a refresher on creating
    S3 buckets, please refer to [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)*,
    Exploiting S3 Buckets*.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about creating APIs for S3, please refer to this resource: [https://aws.amazon.com/s3/features/access-points/](https://aws.amazon.com/s3/features/access-points/).
    You will need to create a bucket with your own test folder in it to perform the
    next exercise.'
  prefs: []
  type: TYPE_NORMAL
- en: Fun with altering HTTP methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this next section, we are going to be targeting an S3 bucket through an
    AWS API. The bucket is located at [https://awspublicpackt.s3.amazonaws.com/](https://awspublicpackt.s3.amazonaws.com/).
    Let''s move forward with intercepting it in Burp Suite:'
  prefs: []
  type: TYPE_NORMAL
- en: With Burp Suite and your browser configured to intercept web traffic, input
    the address in your URL bar:![Figure 8.23 – Burp request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.23_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.23 – Burp request
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we are intercepting the API call based on the `host` parameter.
    We are using the `GET` method, meaning we are retrieving the resources. Click
    **Forward** to continue:![Figure 8.24 – Viewing bucket objects and keys
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.24_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.24 – Viewing bucket objects and keys
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a directory called `TestAPI.txt`. Next, let's move
    forward and intercept the `test` directory and see whether we can view the text
    file:![Figure 8.25 – Retrieving TestAPI.txt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.25_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.25 – Retrieving TestAPI.txt
  prefs: []
  type: TYPE_NORMAL
- en: Click **Forward**:![Figure 8.26 – Output of TestAPI.txt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.26_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.26 – Output of TestAPI.txt
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the contents of the text file are being displayed. This means we
    have read access. Next, let's see whether we can place an object in the bucket
    by manipulating the API. Let's use the `PUT` method to place the `HackedAPI.txt`
    test file into the `i love pentesting` data into the text file:![Figure 8.27 –
    Placing data by manipulating API calls
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.27_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.27 – Placing data by manipulating API calls
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to confirm we have placed data on the target, we can use the `curl` command
    in our Terminal to check and see whether the data was stored. We use the following
    command to validate that the data was put in the S3 bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28 – Successful data upload'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.28_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.28 – Successful data upload
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we have successfully put data in the S3 bucket by manipulating
    calls within the API. Next, let's see whether we can delete the `/test` legitimate
    resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, we were able to manipulate calls between our host and the resource
    by manipulating methods within the HTTP request. Based on the exercise we just
    did, we were able to read and write data to the resource by manipulating the HTTP
    calls. This is extremely dangerous because an attacker could leave behind malware
    or steal sensitive information if discovered. It's crucial that proper access
    controls are put in place to ensure that resources aren't left unsecured.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's move forward, wrap up the chapter, and start looking at heading toward
    the next part of this book, [*Chapter 9*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381)*,
    Real-Life Pentesting with Metasploit and More!*
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned a bit about web traffic and web requests as they
    pertain to APIs and gateways in AWS. We learned how to deploy a simple API gateway,
    and also learned how to use a vital tool for assessing APIs and gateways – Burp
    Suite. We ran through a fun exercise that illustrated using Burp Suite to manipulate
    HTTP requests and mentioned the dangers of leaving APIs vulnerable. With this
    knowledge, you can now perform attacks and assessments on web-based applications
    and services using the methods learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to further our knowledge of AWS by applying more hands-on experience
    in the next chapter. It is the longest chapter in the book and will have you setting
    up new environments and exploiting them based on scenarios – ultimately, teaching
    you the technical portion of AWS pentesting and the processes that come with it.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'List of bug bounty programs: [https://www.bugcrowd.com/bug-bounty-list/](https://www.bugcrowd.com/bug-bounty-list/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WebSocket API: [https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From Poll to Push: Transform APIs using Amazon API Gateway REST APIs and WebSockets:
    [https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/](https://aws.amazon.com/blogs/compute/from-poll-to-push-transform-apis-using-amazon-api-gateway-rest-apis-and-websockets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
