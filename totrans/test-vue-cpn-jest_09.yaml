- en: '*Chapter 9*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshot Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've seen how you can test the structure, styles, methods, computed
    properties, events, watchers, and more of Vue.js components. And you've learned
    to do this by using a variety of techniques and methods.
  prefs: []
  type: TYPE_NORMAL
- en: But what if I tell you that you can test most of it by simply using snapshot
    testing?
  prefs: []
  type: TYPE_NORMAL
- en: You've already seen snapshot testing being used in *Chapter 1, Write the first
    Vue.js Component Unit Test in Jest* and *Chapter 2*, *Test Deeply Rendered Vue.js
    Components* but those chapters focused more on explaining shallow and deep rendering,
    so I haven't yet explained it in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Snapshot testing** is the technique of assertion by comparing two different
    outputs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of it as something similar to the screenshot technique used in end-to-end
    tests to check regressions: the first test run takes a screenshot of a part of
    the screen (for instance, a button), and, from that moment on, all the following
    runs of the same test will compare a new screenshot with the original one. If
    they''re the same, the test passes; otherwise, there is a regression.'
  prefs: []
  type: TYPE_NORMAL
- en: Snapshot testing works in the same way, but instead of comparing images, it
    compares serializable output, such as JSON and HTML, or just strings.
  prefs: []
  type: TYPE_NORMAL
- en: Since Vue.js renders HTML, you can use snapshot testing to assert the rendered
    HTML, given different states of a component.
  prefs: []
  type: TYPE_NORMAL
- en: Rethinking in Snapshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this example, let''s consider the following `ContactBox.vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we can test several aspects of this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fullName` is the combination of `name` + `surname`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a `selected` class when the component is selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It emits a `contact-click` event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One way to create tests that validate these specifications would be to check
    everything separately â€“ the classes attached to the DOM elements, the HTML structure,
    the computed properties, and the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you''ve seen in other chapters, you could perform these tests as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But now, let's think about how snapshot testing can help us here.
  prefs: []
  type: TYPE_NORMAL
- en: If you think about it, the component renders according to its state. Let's refer
    to this as the **rendering state**.
  prefs: []
  type: TYPE_NORMAL
- en: With snapshot testing, instead of worrying about checking for specific things,
    such as attributes, classes, methods, and computed properties, we can instead
    check the rendering state, as this is the projected result of the component state.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, you can use snapshot testing for the previous test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, instead of now checking things separately, I'm just asserting
    the snapshot of `cmp.element`, this being the rendered HTML of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the test suite now, a `ContactBox.test.js.snap` file should have
    been created and you''ll see a message in the console output as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Image56419.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the snapshot generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this test is to check that the computed property, `fullName`,
    combines both the name and surname, separated by a space. Looking at the snapshot,
    you can see that this is happening and that *John Doe* is there, so you may consider
    this test valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, you can write the second test using snapshot testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the only aspect that changes between this test and the previous
    one is the setting of the `selected` property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s the power of snapshot testing: you play with *different states of the
    components*, while you just need to assert the rendering state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of this test is to validate that it has a `selected` class when
    the property is `true`. Now, let''s run the test suite again, and if you check
    `ContactBox.test.js.snap` again, you''ll see that another snapshot has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And the selected class is there, as expected, so we can consider this one to
    also be valid.
  prefs: []
  type: TYPE_NORMAL
- en: When Snapshot Testing Doesn't Help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you noticed that I didn''t mention anything about the third test? To recall
    this test, let''s check it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this case, when the component is clicked, it doesn't perform any action that
    changes the component state, which means that the rendering state won't change.
    We're just testing behavior here that has no effect on the rendering of the component.
  prefs: []
  type: TYPE_NORMAL
- en: For that reason, we can say that *snapshot testing is useful for checking changes
    in the rendering state*. If the rendering state doesn't change, there is no way
    that snapshot testing can help us.
  prefs: []
  type: TYPE_NORMAL
- en: When a Test Fails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The snapshots generated are the source of truth when it comes to deciding whether
    a test is valid. That's the way regressions are checked, and, ultimately, that
    depends on your criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, go to the `ContactBox.vue` component and change the `fullName`
    computed property to be separated by a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the tests again, some of them will fail since the rendering result
    is different from before. You''ll get an error along the lines of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From that point on, as it''s usually in relation to testing, you must decide
    whether that''s an intentional change or whether it''s a regression. You can press
    *''u''* in order to update the snapshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Image56429.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be convenient when applying TDD to use the watch mode, `npm run test
    -- --watch`. This would be very convenient since Jest gives you a number of options
    for updating snapshots:'
  prefs: []
  type: TYPE_NORMAL
- en: Press **'u'** to update all snapshots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press **'i'** to update snapshots interactively, one by one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshot testing **saves you a lot of time**. This example was basic, but imagine
    testing a more complex component with many different rendering states...
  prefs: []
  type: TYPE_NORMAL
- en: Sure, you can assert in relation to specific things, but that's much more cumbersome
    than asserting how the component is rendered depending on the state, since, most
    of the time, if you change the code, you have to change the assertions in relation
    to the tests, while, with snapshot testing, you don't need to.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can **find regressions** that you didn't take into account,
    perhaps something you didn't consider in your tests, or something that has changed
    the rendering of the component, but the snapshots will alert you to this.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would now like to mention a number of **caveats** that you should remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Snapshot testing doesn't replace specific assertions. While it can do so most
    of the time, both ways of testing are totally combinable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't update snapshots too easily. If you see that a test fails because it doesn't
    match a snapshot, take an in-depth look at it before updating it too quickly.
    I've been there as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to try it yourself, you can find the full example used in this chapter
    on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/chapter-9](https://github.com/alexjoverm/vue-testing-series/tree/chapter-9)).
  prefs: []
  type: TYPE_NORMAL
