- en: Windows Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss and take a look at Windows containers. Microsoft
    has embraced containers as a way of deploying older applications on new hardware.
    Unlike Linux containers, Windows containers are only available on Windows-based
    Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Windows containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your Docker host for Windows containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Windows containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows container Dockerfile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows containers and Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As per previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS—yes, even though we are going to be running Windows containers, you can
    still use your macOS client. More on that later.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker commands we will be running will work on all three of the operating
    systems on which we have installed Docker so far. However, in this chapter, the
    containers we will be launching will only work on a Windows Docker host. We will
    be using VirtualBox and Vagrant on macOS and Linux-based machines to assist in
    getting a Windows Docker host up and running.
  prefs: []
  type: TYPE_NORMAL
- en: A full copy of the code used in this chapter can be found at [https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2PfjuSR](http://bit.ly/2PfjuSR)'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Windows containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As someone who has been using mostly macOS and Linux computers and laptops alongside
    Linux servers pretty much daily for the past 20 years, coupled with the fact that
    my only experience of running Microsoft Windows was the Windows XP and Windows
    10 gaming PCs I have had, along with the odd Windows server I was unable to avoid
    at work, the advent of Windows Containers was an interesting development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I would never have classed myself as a Linux/UNIX fanboy. However, Microsoft''s
    actions over the last few years have surprised even me. Back in 2014, at one of
    its Azure events, Microsoft declared that "Microsoft![](Images/ef26c732-b5bc-41ad-a5e7-e32524861a68.png)Linux",
    and it hasn''t looked back since:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux is a first-class citizen in Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET Core is cross-platform, meaning that you can run your .NET applications
    on Linux and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server is now available on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can run Linux shells, such as Ubuntu, on Windows 10 Professional machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell has been ported to Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has developed cross-platform tools, such as Visual Studio Code, and open
    sourced them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is acquiring GitHub for $7.5 billion!!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is clear that the Microsoft of old, where former CEO Steve Ballmer famously
    roasted both the open source and Linux communities by calling them something that
    would not be appropriate to repeat here, has gone.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the announcement, which was made in October 2014 months after Microsoft
    publicly declared its love of Linux, that Docker and Microsoft were forming a
    partnership to drive the adoption of containers on Windows-based operating systems
    such as Windows 10 Professional and Windows Server 2016 came as no surprise to
    anyone.
  prefs: []
  type: TYPE_NORMAL
- en: So what are Windows containers?
  prefs: []
  type: TYPE_NORMAL
- en: Well, on the face of it, they are no different to Linux containers. The work
    by Microsoft on the Windows kernel has introduced the same process isolation as
    found on Linux. Also, like Linux containers, this isolation extends to a sandboxed
    filesystem and even a Windows registry.
  prefs: []
  type: TYPE_NORMAL
- en: As each container is effectively a fresh Windows Core or Windows Nano, which,
    in turn, are cut down Windows server images (think Alpine Linux but for Windows), installation
    administrators can run multiple Dockerized applications on the same host without
    having to worry about any custom registry changes or requirements clashing and
    causing problems.
  prefs: []
  type: TYPE_NORMAL
- en: Couple this with the same ease of use supplied by the Docker command-line client
    and administrators have a way to migrate their legacy applications to more modern
    hardware and also host operating systems without the worries and overhead of having
    to manage multiple virtual machines running older unsupported versions of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: There is also another layer of isolation provided by Windows Containers. Hyper-V
    isolation runs the container processes within a minimal hypervisor when the container
    is started. This further isolates the container processes from the host machine.
    However, there is a cost of a small amount of additional resources needed for
    each container running with Hyper-V isolation, while these containers will also
    have an increased start time as the hypervisor needs to be launched before the
    container can be started.
  prefs: []
  type: TYPE_NORMAL
- en: While Hyper-V isolation does use Microsoft's hypervisor, which can be found
    in both Windows server and desktop editions as well as the Xbox One system software,
    you can't manage Hyper-V isolated containers using the standard Hyper-V management
    tools. You have to use Docker.
  prefs: []
  type: TYPE_NORMAL
- en: After all the work and effort Microsoft had to put into enabling containers
    in the Windows kernel, why did they choose Docker over just creating their management
    tool?
  prefs: []
  type: TYPE_NORMAL
- en: Docker had already established itself as the go-to tool for managing containers
    with a set of proven APIs and a large community. Also, it was open source, which
    meant that Microsoft could not only adapt it for use on Windows, but also contribute
    to its development.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram gives an overview of how Docker on Windows works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0021ddf3-befc-4ebf-ab5a-f0d066aa5463.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that I said Docker on Windows, not Docker for Windows; they are very
    different products. Docker on Windows is the native version of the Docker Engine
    and client that interacts with the Windows kernel to provide Windows containers.
    Docker for Windows is a native as possible experience for developers to run both
    Linux and Windows containers on their desktops.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Docker host for Windows containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have guessed, you are going to need access to a Windows host running
    Docker. Don't worry too much if you are not running a Windows 10 Professional
    machine—there are ways in which you can achieve this on macOS and Linux. Before
    we talk about those, let's look at how you can run Windows containers on Windows
    10 Professional with your Docker for Windows installation.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Windows 10 Professional** supports Windows containers out of the box. By
    default, however, it is configured to run Linux containers. To switch from running
    Linux containers to Windows containers, right-click on the Docker icon in your
    system tray and select **Switch to Windows containers ...** from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fe51cd8e-9f4c-455d-b29e-35619f7b1e3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will bring up the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e278b88e-0e03-4cb2-b98b-40babb3dce46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit the **Switch** button and, after a few seconds, you will now be managing
    Windows containers. You can see this by opening up a prompt and running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen from the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/12ba843c-1fe8-4489-b1de-4469687e8470.png)'
  prefs: []
  type: TYPE_IMG
- en: The Docker Engine has an `OS/Arch` of `windows/amd64`, rather than the `linux/amd64`
    we have been used to seeing up until now. So that covers Windows 10 Professional.
    But what about people like me who prefer macOS and Linux?
  prefs: []
  type: TYPE_NORMAL
- en: macOS and Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get access to Windows containers on macOS and Linux machines, we will be
    using the excellent resources put together by Stefan Scherer. In the `chapter06`
    folder of the repository that accompanies this book, there is a forked version
    of Stefan's Windows –`docker-machine repo` , which contains all of the files you
    need to get up and running with Windows containers on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, you will need the following tools – Vagrant by Hashicorp,
    and Virtualbox by Oracle. You can download these from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once downloaded and installed, open a Terminal, go to the `chapter06/docker-machine`
    repository folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will download a VirtualBox Windows Server 2016 core eval image that contains
    everything needed to get you up and running with Windows containers. The download
    is just over 10 GB, so please make sure that you have the bandwidth and disk space
    needed to run the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vagrant will launch the image, configure Docker on the VM, and copy the certificate
    files needed for your local Docker client to interact with the host to your machine.
    To switch over to using the newly launched Docker Windows host, just run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be going into more detail on Docker Machine in the next chapter. However,
    what the preceding command has done is reconfigure your local Docker client to
    speak to the Docker Windows host. You can see this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are not following along you can see the expected output below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/064755f6-ee49-4fe6-b71b-0973b323a80f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we are now connected to a Docker Engine running on `windows/amd64`.
    To switch back, you can either restart your terminal session or run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are finished with the Docker Windows host, you can run the following
    command to stop it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to remove it altogether, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding commands must be run from within the `chapter06/docker-machine` repository folder.
  prefs: []
  type: TYPE_NORMAL
- en: Running Windows containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As already hinted at by the first part of this chapter, launching and interacting
    with Windows containers using the Docker command-line client is no different to
    what we have been running so far. Let''s test this by running the `hello-world`
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as before, this will download the `hello-world` container and return a
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b1f3e83b-2a2f-4089-b125-d13066170b11.png)'
  prefs: []
  type: TYPE_IMG
- en: The only difference on this occasion is that rather than the Linux image, Docker
    pulled the `windows-amd64` version of the image that is based on the `nanoserver-sac2016` image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at running a container in the foreground, this time running
    PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your shell is active, running the following command will give you the
    computer name, which is the container ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the full output of the commands above in the terminal output below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9dce60a5-07b2-411d-9cae-7eb02d587ff7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have exited PowerShell by running `exit`, you can see the container
    ID by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the expected output in the screen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/48cc683a-524b-44f7-b0a2-e1382991fd5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's take a look at building an image that does something.
  prefs: []
  type: TYPE_NORMAL
- en: A Windows container Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows container images use the same format Dockerfile commands as Linux containers.
    The following Dockerfile will download, install, and enable the IIS web server
    on the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can build the image using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once built, running `docker image ls` should show you the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/57a6cc54-4042-4683-a586-a74f8c423a3b.png)'
  prefs: []
  type: TYPE_IMG
- en: The one immediate thing you will notice about Windows container images is that
    they are big. This is something that is being worked on with the release of Server
    2019.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the container with the following command will start the IIS image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see your newly launched container in action by opening your browser.
    However, instead of going to `http://localhost``:8080/`, you will need to access
    it via the NAT IP of the container. If you are using Windows 10 Professional,
    you can find the NAT IP by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will give you an IP address, simply augmented with `8080/` at the end;
    for example, `http://172.31.20.180:8080/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS users can run the following command to open their browsers using the
    IP address of the Vagrant VM we launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Whichever operating system you have launched your IIS container on, you should
    see the following default holding page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/13e49dd0-5f66-4d63-aaa7-a98ea2e989af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To stop and remove the containers we have launched so far, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So far, I am sure you will agree that the experience is no different to using
    Docker with Linux-based containers.
  prefs: []
  type: TYPE_NORMAL
- en: Windows containers and Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the final section of this chapter, we are going to look at using Docker Compose
    with our Windows Docker host. As you will have already guessed, there isn't much
    change from the commands we ran in the previous chapter. In the `chapter06` folder
    in the repository, there is a fork of the `dotnet-album-viewer` application from
    the Docker Examples repository as this ships with a `docker-compose.yml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker Compose file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is using the same structure, flags, and commands as the previous
    Docker Compose files we have looked at, the only difference being that we are
    using images from the Docker Hub that are designed for Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the required images, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, once built, launch using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As before, you can then use this command to find out the IP address on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To open the application you just need to put the  IP address of your Docker
    host in your browser. If you are running using macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8fe03330-f09d-4274-96c9-8bdbc5e641e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have finished with the application, you can run the following command
    to remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have briefly looked at Windows containers. As you have seen,
    thanks to Microsoft's adoption of Docker as a management tool for Windows containers,
    the experience is familiar to anyone who has used Docker to manage Linux containers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to take a more detailed look at Docker Machine.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker on Windows introduces what additional layer of isolation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command would you use to find out the NAT IP address of your Windows container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Docker on Windows introduces an additional set of commands you
    need to use in order to manage your Windows containers?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more information on the topics mentioned in this chapter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker and Microsoft Partnership Announcement: [https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server and Docker – The Internals Behind Bringing Docker and Containers
    to Windows: [https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefan Scherer on GitHub: [https://github.com/stefanScherer/](https://github.com/stefanScherer/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dotnet-album-viewer` repository:[ https://github.com/dockersamples/dotnet-album-viewer](https://github.com/dockersamples/dotnet-album-viewer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
