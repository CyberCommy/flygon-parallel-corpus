- en: Chapter 4. Controllers in MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we will be discussing what a Controller is, its structure,
    what its purpose is in the MVC pattern, and its usage in Laravel's extended design
    pattern and structure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that will be discussed in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What is a Controller?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Controller's purpose in the MVC design pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Controller's interaction with other components of the MVC design pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Laravel handles the Controller in its design pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a Controller?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Controller is a part of the Model-View-Controller (MVC) design pattern that
    we can simply describe as the logical layer of our application. It understands
    the requests that come from the other end (a user or an API request), makes calls
    to the corresponding methods, performs primary checks, handles the logic of the
    request, and then returns the data to the corresponding View or redirects the
    end user to another route.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the Controller
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the major roles of the Controller in an MVC structure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Holding the logic of the application and defining which event should be fired
    upon actions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being the intermediary step between the Model, View, and other components of
    the application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating actions and responses that come from the View and Model that can
    be understood by them and sending them to other layers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a bridge between other components of the application and facilitating
    communication between them
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making primary permission checks in construct methods before any action
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can best be explained with a real-world example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we have a user management website, and in the administration
    panel, an administrator tries to delete a user. In design patterns that follow
    SOLID principles, the following things happen if an admin clicks on the delete
    user button:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: From the View, the admin sends a request to the corresponding Controller to
    delete the news item.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Controller understands this request and performs primary checks. First,
    it checks if the requester (the administrator, in our case) is really an administrator
    and has permissions to delete this user.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the primary checks, the Controller tells the Model to delete the user.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Model performs some checks of its own and either deletes the user and tells
    the Controller that the user is deleted, or tells the Controller that the user
    is not available (maybe the user is already deleted).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the response comes from the Model, the Controller either tells the View
    to tell the administrator the user is deleted or redirects to another page with
    a response like a 404 not found page.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see from the preceding example, for all interactions, the Controller
    holds the major role for the communication between the components of the application.
    In an MVC pattern that follows SOLID principles, without the Controller, the View
    cannot interact with the Model and vice versa. Although there are some derivations
    to this architectural pattern, like where View interacts with Model(s) directly,
    in a perfect SOLID design architecture, the Controller should always be the intermediate
    element for all interactions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The Controller can also be considered as a translator. It gets input from the
    View in various ways and converts it to request(s) that can be understood by the
    Model(s), and vice versa.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![The purpose of the Controller](Image00008.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Controllers in Laravel
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Laravel 4, the Controllers are simple PHP classes with their filenames and
    classnames ending with the suffix `Controller` (not forced, but highly recommended;
    it's a standard between developers), which extends the class `BaseController`
    , and are stored in the folder `app/controllers` as default. This folder structure
    is defined in the `composer.json` file's `classmap` key and is not forced. Thanks
    to the Composer, as long as you define where the Controllers are stored in your
    application's structure, you can put them in any folder you like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a very simple Controller for Laravel 4:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Controller holds all the action methods for actions that are defined in
    `routes.php` , in which all the actions (every link that the users interact with)
    are set in Laravel 4.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In Laravel 3, the developers had to prefix methods with either `GET` or `POST`
    so as to understand the corresponding request's type. If your request was a `GET`
    request, your method's name would have to be `get_profile` , and if the request
    was a `POST` request, it'd have to be like `post_profile` . Thanks to Laravel
    4, it's now not forced, and you can name your methods any way you like.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: A question now crops up. How do we access this method of the Controller? As
    we mentioned earlier, we'll be using routes to do this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Routes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Routes are a set of rules defined in `app/routes.php` that tell Laravel, upon
    receiving an incoming request, which closure functions and/or Controller methods
    are being called based on the requested URL. There are various ways to define
    a route. Three of these are explained as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use closure functions and set the logic for the action directly from
    `app/routes.php` . Have a look at the following code:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we've called the `get()` method because we want this route to be a `GET`
    request. The first parameter is the path of the action, so if we call `http://ourwebsite.com/hello`
    , this route action will be called. The second parameter can be from various selections.
    It can either be an array that holds the name, filter and action, a string that
    defines the Controller's method for action, or a closure function which holds
    the logic directly. In our example, we've put a closure function and returned
    a string directly to the end user. So if the user navigates to `http://ourwebsite.com/hello`
    , the end user will see the message **Ahoy, everyone!** directly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way to set a route is to pass a second parameter as a string, define
    which Controller it is passed to, and the action to be called. Have a look at
    the following code:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the string `ProfileController@hello` tells Laravel that the method `hello`
    will be called from the Controller named `ProfileController` . We've separated
    them using the character `@` .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The third way is to set an array as a second parameter, which gets various
    keys and values. Have a look at the following code:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The array can have more than one parameter that define the route''s name, the
    filter that''ll be applied before calling the action, and which Controller and
    its method(s) will be used. The following are the three different keys:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: The `before` key defines the filter before calling the action, so you can set
    some filtering parameters before calling each action. For example, if you have
    a members-only area and you don't want guests to access that resource, you can
    pass filters by using the `before` parameter in your route.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `as` key defines the name of the route. This is quite beneficial. Let's
    say you need to change the URL structure of your application. Classically, if
    you change the route's action path, you need to change every URL or redirections
    for this action through your application. Instead, if you set the links and redirections
    with names, you only need to change the path once, and all links and redirections
    will be magically fixed.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `uses` key has the exact same structure as our second example. It holds
    the name of the Controller and its method(s) upon calling.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In all these examples, the route did not get any parameters, and we didn''t
    pass any parameters. Think like this: we have accessed the profiles area by using
    routes, but in these examples, we didn''t set a way to access a specific user.
    How would we set a parameter to these routes? For this, we''ll have to set the
    parameters in curly brackets.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following to set a parameter to a route:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The parameter(s) in curly brackets become a variable name directly in closure
    methods. This approach also offers us a way to filter these parameters before
    the Controller''s method runs. Using `where()` , you can filter these parameters.
    Have a look at the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The method `where()` is either an array with keys and values, or two parameters,
    in which the first is the name in curly brackets, and the second is a regular
    expression to filter the parameter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we've filtered the parameter ID with a regular expression to
    match only numbers, so in this way, we will be distinguishing different kinds
    of data to overload the endpoint.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Also, there is another benefit to this approach. If a person tries to navigate
    to `http://ourwebsite.com/users/xssSqlInjection` , Laravel will throw a 404 error
    even before going to the Controller's method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: If we follow this structure, we need to set each action one by one for each
    `GET` , `POST` , `PUT` , and `DELETE` requests. If you want to use the RESTful
    structure for your actions, instead of setting each route one by one, you can
    use the `controller()` method of the `Route` class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Certain steps need to be followed to set the routes of a RESTful Controller.
    For a user Controller, the following are the steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: You first need to make a new Controller named `UserController` and set your
    RESTful methods such as `index()` , `create()` , `store()` , `show($id)` , `edit($id)`
    , `update($id)` , and `destroy($id)` .
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then you need to set the RESTful Controller in `app/routes.php` by running
    the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Laravel offers a faster way to create Resourceful Controllers. These are called
    Resource Controllers by Laravel. Follow these steps to set the routes of a Resourceful
    Controller:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'You first need to make a new Controller with Resourceful methods using Laravel''s
    PHP client, `artisan` . Have a look at the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this command, a new file named `NewsController.php` is automatically generated
    in the `app/controllers` folder with all the Resourceful methods already defined
    inside it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you need to set the Resourceful Controller in `app/routes.php` by running
    the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While setting the Resourceful Controller, you can set what actions are to be
    included or excluded by setting a third parameter to this `Route` definition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'To include actions that will be defined in the Resourceful Controller (kind
    of like a whitelist), you use the `only` key as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To exclude actions that will be defined in the Resourceful Controller (kind
    of like a blacklist), you use the `except` key as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All Resource Controller actions have defined route names. You may also want
    to override action names in some cases, and this can be done by setting up a third
    parameter called `names` as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you have gone through the previous chapter, you may remember we had filters
    in routes, but we didn''t use the key `before` in RESTful and Resourceful Controllers.
    To use the key `before` , we can perform the steps we the previously followed
    or set filters in Controllers. These can be set in the `__construct()` method
    of the Controller (if there is none, create one) as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, we've set filters using the `beforeFilter()` and `afterFilter()`
    methods. These methods either get a closure function or the name of the filter
    as a first parameter and an optional second parameter, as an array, to define
    where these filters work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we've firstly set CSRF (Cross-site Request Forgery, which is
    a method to forge a trusted request and to inject malicious code into the application
    through this forged request) protection filters to all the `POST` actions; after
    that, we've defined a filter in a closure function and used the `afterFilter`
    method to log all `fooAction` and `barAction` events' statuses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table is a list of actions that Laravel''s Resource Controller
    handles:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '| Verb | Path | Action | Route name |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/resource` | Index | `resource.index` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/resource/create` | Create | `resource.create` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/resource` | Store | `resource.store` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/resource/{resource}` | Show | `resource.show` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/resource/{resource}/edit` | Edit | `resource.edit` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| `PUT` /`PATCH` | `/resource/{resource}` | Update | `resource.update` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | `/resource/{resource}` | Destroy | `resource.destroy` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: Using Controllers inside folders
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you may want to group Controllers inside a folder, and have them
    in a more hierarchical structure. There are two ways to achieve this.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Before explaining these methods, let''s assume we have a `UserController.php`
    file inside an `app/controllers/admin` folder, which we''ve just created for admin-related
    Controller files. There is a question that crops up here: how do we make both
    Laravel and the Controller files understand where the Controllers are? Namespaces
    are used for such requirements. Namespaces are simple ways to encapsulate and
    group items.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you have the `app/controllers/UserController.php` and `app/controllers/admin/UserController.php`
    files. How do we call a specific one? Namespaces come in handy here. Save the
    following file as `app/controllers/admin/UserController.php` :'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we define the route as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we''ve added some new additions to this Controller. They are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The first one is `namespace admin;` . This simply defines that this file is
    inside a folder called `admin` .
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second one is `use View;` . If our Controller is under a folder or a defined
    `namespace` unless we import them, all the classes we''ll be calling will be like
    `namespace\class` . If we didn''t add this line, the `View::make()` function would
    throw an error saying `Class admin\View not found` . To understand this better,
    you can think of this like HTML''s assets calling. Let''s assume you are browsing
    `admin/users.html` , and inside it there is an image whose path is defined in
    this format: `<img src= "assets/img/avatar.png" />` . As you may imagine, the
    image will be requested from `admin/assets/img/avatar.png` because it is inside
    a folder called `assets` . This is exactly the same situation.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've added a `\` (backslash) character while we're extending from the `BaseController`
    class. This will signify that it will be called from root. If we didn't add `use
    View;` to our class and wanted to make `View::make()` work, we should modify it
    to `\View::make()` (with a leading backslash) so that the correct class will be
    requested.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a totally new folder structure, it can be defined in two ways. Either
    add each folder path into the `autoload/classmap` object in the `composer.json`
    file or define a `psr-0` autoload. Let's assume we have a new `app/myApp` folder,
    and inside it is a Controller located at `app/myApp/controllers/admin/UserController.php`
    .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `classmap` object to the Controller as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now add a `psr-0` autoload to the code as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then run `composer dump-autoload` from the terminal to regenerate autoload classes.
    By this `psr-0` autoload, we've taught our Composer project to autoload everything
    recursively inside the `myApp` folder, which is inside the `app` folder. Another
    way is to prefix the classname with the namespace folders and use `underscores
    (_)` between each folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we have a Controller, `app/controllers/foo/bar/BazController.php`
    . Save the following inside this folder:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we define the route as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, we navigate to `http://yourwebsite/foobarbaz` . It will work automatically
    even without namespacing or including classes using `use` .
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the role of the Controller in the MVC pattern and
    how you can use Controllers and set routes in Laravel 4\. We also learned about
    filters and RESTful and Resourceful Controllers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: For more information, you can refer to the official documentation page, located
    at [http://laravel.com/docs/controllers](http://laravel.com/docs/controllers)
    . In the next chapter, we'll learn about Laravel's unique design pattern, and
    how it uses Repositories, Facades, and the Factory pattern.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考位于[http://laravel.com/docs/controllers](http://laravel.com/docs/controllers)的官方文档页面。在下一章中，我们将学习关于Laravel独特的设计模式，以及它如何使用Repositories、Facades和工厂模式。
