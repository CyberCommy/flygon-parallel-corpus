- en: Setting Up Your Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React Native ecosystem has evolved quite a bit since the first edition.
    The open source tool Expo.io, in particular, has streamlined both the project
    initialization and development phases, making working in React Native even more
    of a pleasure than it already was in version 0.36.
  prefs: []
  type: TYPE_NORMAL
- en: With the Expo workflow, you'll be able to build native iOS and Android applications
    using only JavaScript, work in the iOS simulator and Android emulator with live
    reload, and effortlessly test your app on any real-world device via Expo's app.
    Until you need access to native code (say, to integrate with legacy native code
    from a separate code base), you can develop your application entirely in JavaScript
    without ever needing to use Xcode or Android Studio. If your project ever evolves
    into an app that must support native code, Expo provides the ability to ejectyour
    project, which changes your app into native code for use in Xcode and Android
    Studio. For more information on ejecting your Expo project, please see [Chapter
    10](5c915008-f34e-46c4-89f5-129626af88c1.xhtml), *App Workflow and Third-Party
    Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: Expo is an awesome way to build fully featured apps for Android and iOS devices,
    without ever having to deal with native code. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing your first application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your application in a simulator/emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your application on a real device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover installing the tools you''ll be using throughout this
    book. They include:'
  prefs: []
  type: TYPE_NORMAL
- en: Expo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode (for iOS simulator, macOS only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watchman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step toward building our first React Native application is installing
    the dependencies in order to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the introduction of this chapter, Expo provides us with a workflow
    in which we can avoid working in Xcode and Android Studio altogether, so we can
    develop solely in JavaScript. However, in order to run your app in the iOS simulator,
    you will need to have Xcode installed.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode requires macOS, and therefore running your React Native application in
    an iOS simulator is only possible on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode should be downloaded from the App Store. You can search the App Store
    for Xcode, or use the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://itunes.apple.com/app/xcode/id497799835](https://itunes.apple.com/app/xcode/id497799835).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode is a sizable download, so expect this part to take a little while. Once
    you have installed Xcode via the App Store, you can run it via the `Applications`
    folder in the Finder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the first screen you will see when launching Xcode. Note, if this is
    the first time you''ve installed Xcode, you will not see recent projects listed
    down the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fccac559-1b6f-4fbd-a9e1-df9cf7777be4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the menu bar, choose Xcode | Preferences... as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a59eb8ca-7c3e-4103-b906-a6603f12f75f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Components tab, and install a simulator from the list of provided
    simulators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cc9d1bb1-78ee-46a4-b705-067611cfe959.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once installed, you can open the simulator from the menu bar: Xcode | Open
    Developer Tool | Simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**![](assets/786b9447-3a97-44b9-bfa3-b73e1aeb1b03.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio comes with the official Android emulator, which is the emulator
    that Expo recommends for use during development.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download Android Studio from [https://developer.android.com/studio/](https://developer.android.com/studio/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the downloaded file and drag the Android Studio.app icon to the Applications folder
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d969b12d-6b0c-42e6-b833-ec29541b3248.png)'
  prefs: []
  type: TYPE_IMG
- en: Once installed, we'll need to change the Android Studio preferences. Open Android
    Studio, and then open Preferences from the Android Studio menu in the system bar.
    In the Preferences submenus, select Appearance & Behavior | System Settings | Android
    SDK. Under the SDK Tools tab, ensure that you have some version of Android SDK
    Build-Tools installed, and install it if isn't installed already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll also need to add the Android SDK location to the system `PATH` by editing `~/.bash_profile` or `~/.bashrc`.
    You can do this by adding the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to replace `MY_USER_NAME` with your system username.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS, you will also need to add platform-tools to your `PATH` in `~/.bash_profile` or `~/.bashrc`.
    You can do this by adding the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to replace `MY_USER_NAME` with your system username.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve never edited a `.bash_profile` or `.bashrc` file before, or aren''t
    familiar with `PATH`, you can get more information on what purpose they serve
    and how to work with them from the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.rc.fas.harvard.edu/resources/documentation/editing-your-bashrc/](https://www.rc.fas.harvard.edu/resources/documentation/editing-your-bashrc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/](https://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `PATH` was correctly updated, the `adb` command should work in the Terminal.
    You may have to restart your Terminal for the changes to take effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a fresh install of Android Studio, you''ll see a welcome screen. Start a
    new app to fully open the software. Then, select the AVD Manager from the buttons
    in the top -right corner of the window, as indicated in the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6ca12bc5-4d5a-49db-ab25-2c21e2602074.png)'
  prefs: []
  type: TYPE_IMG
- en: Press Create Virtual Device in the opened modal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select a device in the Select Hardware screen, and then press Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ee381f01-110e-4ccf-af75-b169a486ea64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Download one of the system images under the Recommended tab of the System Image screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cc9b9206-b23c-450b-9784-fcd823387812.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press Finish on the final screen and Android Studio will create your new virtual
    device. The device can be run at any time by pressing the play button in the row
    of buttons in the top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9ec76ee1-bcef-4a91-a28d-5b3a261d8be0.png)'
  prefs: []
  type: TYPE_IMG
- en: To run your app on an Android emulator during development, Expo used to recommend
    using the excellent third-party emulator Genymotion. As of Expo version 29, however,
    they now recommend using the official emulator that ships with Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: You can follow the step-by-step guide provided in the official Expo documentation
    to ensure that Android Studio is set up to work properly with your Expo development
    workflow. The guide can be found at [https://docs.expo.io/versions/latest/workflow/android-studio-emulator](https://docs.expo.io/versions/latest/workflow/android-studio-emulator).
  prefs: []
  type: TYPE_NORMAL
- en: This is all the setup you need to get started developing your first React Native
    app using Expo! There are, however, a few extra steps you'll need to perform for
    working with pure React Native applications (non-Expo applications). Pure React
    Native app development will be covered in depth in Chapter 10, *App Workflow and
    Third-Party Plugins*. Since this setup process is a little more involved and subject
    to change, I recommend referring to the official guide. You can find these instructions
    in the React Native: Getting Started guide, located at [https://facebook.github.io/react-native/docs/getting-started.html](https://facebook.github.io/react-native/docs/getting-started.html) under
    the Building Projects with Native Code tab section.
  prefs: []
  type: TYPE_NORMAL
- en: Once Simulator is open, select your desired iOS device via the menu bar: Hardware | Device | 
    [IOS Version] | [ iOS Device ]. When running Expo applications in Simulator in
    the future, the same device should be used automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app can be started with the Expo CLI in your Terminal if you run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The command will build your app and open the Expo Developer Tools in your web
    browser. In the Expo Developer Tools, select Run on iOS Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have launched an app in the simulator, you'll be able to press the Run
    on iOS Simulator button without opening Simulator from Xcode. It should also remember
    your device choice. Opening Simulator from Xcode provides an easy way to choose
    your preferred iOS device to simulate.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the steps in the Expo guide, which can be found in the *Installing
    Android Studio* section, you would have also seen that it covered installing a
    virtual device that we can run as our emulator. To start your app on the emulator,
    just open the Android Virtual Device you installed in Android Studio, run the `expo
    start` command in your Terminal, and select Run on Android device/emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine, and
    is designed to build scalable network applications. Node allows JavaScript to
    be executed in a Terminal, and is an indispensable tool for any web developer.
    For more information on what Node.js is, you can read the project's *About Node.js*
    page at [https://nodejs.org/en/about/](https://nodejs.org/en/about/).
  prefs: []
  type: TYPE_NORMAL
- en: According to the Expo installation documentation, Node.js is not technically
    required, but as soon as you start actually building something, you'll want to
    have it. Node.js itself is outside the scope of this book, but you can check out
    the *Further reading *section at the end of this chapter for more resources on
    working with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are numerous methods to install Node.js, and it is therefore difficult
    to recommend a particular installation method. On macOS, you can install Node.js
    in one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Node.js from the project's site at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing via Homebrew. If you are familiar with Homebrew, this process is
    explained succinctly at [https://medium.com/@katopz/how-to-install-specific-nodejs-version-c6e1cec8aa11](https://medium.com/@katopz/how-to-install-specific-nodejs-version-c6e1cec8aa11).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing via Node Version Manager (NVM; [https://github.com/creationix/nvm](https://github.com/creationix/nvm)).
    NVM allows you to install multiple versions of Node.js and easily switch between
    them. Use the instructions provided in the repository's README to install NVM.
    This is the recommended method, due to its flexibility, as long as you're comfortable
    working in the Terminal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Expo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Expo project used to have a GUI-based development environment called the
    Expo XDE, which has been replaced with a browser-based GUI called the Expo Developer
    Tools. Since the Expo XDE has been deprecated, creating new Expo apps is now always
    done using the Expo CLI. This can be installed using npm (Node Package Manager,
    which comes as part of Node.js) via the Terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We'll be using Expo quite a bit throughout this book to create and build out
    React Native applications, particularly those apps that do not need access to
    native iOS or Android code. Applications built with Expo have some very nice advantages
    for development, helping obfuscate native code, streamlining app publishing and
    push notifications, and providing a lot of useful functionality built into the
    Expo SDK. For more information on how Expo works, and how it fits into the bigger
    picture of React Native development, see Chapter 10, *App Workflow and Third-Party
    Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Watchman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Watchman is a tool used internally by React Native. Its purpose is to watch
    files for updates, and trigger responses (such as live reloading) when changes
    occur. The Expo documentation recommends installing Watchman, since it has been
    reported that some macOS users have run into issues without it. The recommended
    method for installing Watchman is via Homebrew. The missing package manager for
    macOS, Homebrew allows you to install a wide array of useful programs straight
    from your Terminal. It''s an indispensable tool that should be in every developer''s
    tool bag:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have Homebrew installed already, run the following command in
    the Terminal to install it (you can read more about it and view the official documentation
    at [https://brew.sh/](https://brew.sh/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Homebrew has been installed, run the following two commands in Terminal
    to install `watchman`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Initializing your first app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is all the setup you need in order to get started developing your first
    React Native app using Expo! There are however a few extra steps you'll need to
    perform for working with pure React Native apps (non-Expo apps). Pure React Native
    app development will be covered in depth in [Chapter 10](5c915008-f34e-46c4-89f5-129626af88c1.xhtml),
    *App Workflow and Third-Party Plugins*. Since this setup process is a little more
    involved and subject to change, I recommend referring to the official guide. You
    can find these instructions in the React Native | Getting Started guide located
    at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/getting-started.html](https://facebook.github.io/react-native/docs/getting-started.html)
    under the Building Projects with Native Code tab. From here on out, we can use
    the magic provided by Expo to easily create new apps for development.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create our first app using Expo via the Expo CLI. Making a new application
    is as simple as running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command will first prompt you which type of app you''d like to
    create: either a `blank` app, which has no functionality added, or a `tabs` app,
    which will create a new app with minimal tab navigation. For the recipes in this
    book, we''ll be using the `blank` app option.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you've selected your preferred application type, a new, empty Expo-powered
    React Native app in a new `project-name` directory is created, along with all
    of the dependencies needed to start developing right away. All you need to do
    is begin editing the `App.js` file in the new project directory to get to work.
  prefs: []
  type: TYPE_NORMAL
- en: To run our new app, we can `cd` into the directory, then use the `expo start`
    command. This will automatically build and serve the app, and open a new browser
    window with the Expo Developer Tools for your in-development React Native app.
  prefs: []
  type: TYPE_NORMAL
- en: For a list of all of the available commands for the Expo CLI, check out the
    documentation at [https://docs.expo.io/versions/latest/guides/expo-cli.html](https://docs.expo.io/versions/latest/guides/expo-cli.html).
  prefs: []
  type: TYPE_NORMAL
- en: With our first application created, let's move on to running the application
    in an iOS simulator and/or Android emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Running your app in a simulator/emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created a new project, and started running that project with Expo in
    the last step. Once we start making changes to our React Native code, wouldn't
    it be nice to see the results of those changes? Thanks to Expo, running your project
    in the installed iOS simulator or Android emulator has also been streamlined.
  prefs: []
  type: TYPE_NORMAL
- en: Running your app on an iOS simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running your app in the Xcode simulator only takes a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Simulator from the menu bar: Xcode | Open Developer Tool | Simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**![](assets/f777110d-c8e4-438f-833d-330d03c6e695.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The app can be started with the Expo CLI in your Terminal if you run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The command will build your app and open the Expo Developer Tools in your web
    browser. In the Expo Developer Tools, select Run on iOS Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time you run a React Native app on the iOS simulator via Run on iOS
    Simulator, the Expo app will be installed on the simulator, and your app will
    automatically be opened within the Expo app. The simulated iOS will ask if you
    want to Open in "Expo"?.Choose Open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/beedc679-8089-4313-89bd-183d734aa54d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon loading, you will see the Expo Developer menu. You can toggle between
    this menu and your React Native app by pressing *command* key *+ D* on your keyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a8edd55d-7cc2-4483-bb52-63930f7c5c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have launched an app in the simulator, you'll be able to press the Run
    on iOS Simulator button without opening Simulator from Xcode. It should also remember
    your device choice. Opening Simulator from Xcode provides an easy way to choose
    your preferred iOS device to simulate.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can toggle between your React Native app and the Expo Developer menu, a
    list of helpful features for development, by pressing *command* key + *M* on your
    keyboard. The Expo Developer menu should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cdc2973-e449-46da-b0f8-db3fa04351e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Running your app on a real device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running your development app on a real device as easy as running your app on
    a simulator. With the clever combination of the native Expo app and a QR code,
    running on a real device is only a few clicks and taps away!
  prefs: []
  type: TYPE_NORMAL
- en: Running your app on an iPhone or Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can get the in-development app running on your phone in three simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the App Store on your iPhone, or the Google Play Store on your Android
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and download the Expo Client app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While your app is running on your development machine, you should also have
    the Expo Developer Tools open in a browser. You should see a QR code at the bottom
    of the left-hand side menu of the Expo Developer Tools. Use the iPhone's native
    Camera app, or the Scan QR Code button in the Expo Client app on Android, to scan
    the QR code. This will open your in-development app on the device within the Expo
    Client app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your React Native app should now be running on your real device, fully equipped
    with live reload! You can also shake the device to toggle between your React Native
    app and the Expo Developer menu.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've gone through all the steps required for getting started
    with developing React Native apps, including initializing a new project, emulating
    running your new project on your computer, and running your development app on
    real-world devices. Thanks to the power of Expo, it's easier to jump in and start
    working than ever before.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've got everything set up, it's time to start building!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a list of other resources covering similar topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Expo installation documentation at [https://docs.expo.io/versions/latest/introduction/installation.html](https://docs.expo.io/versions/latest/introduction/installation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Node.js Web Development* at [https://www.packtpub.com/mapt/book/web_development/9781785881503](https://www.packtpub.com/mapt/book/web_development/9781785881503)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing Hot Reloading - React Native* at [https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html](https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html).
    This blog post from the React Native team describes how Hot Reloading works in
    depth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Publishing with Expo* at [https://docs.expo.io/versions/latest/guides/publishing.html](https://docs.expo.io/versions/latest/guides/publishing.html). Expo
    has a publish feature that allows you to share your in-development React Native
    application with fellow developers by creating a persistent URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expo Snack at [https://snack.expo.io](https://snack.expo.io). Similar to [codepen.io](http://codepen.io)
    or [jsfiddle.net](https://jsfiddle.net/), Snack lets you live edit a React Native
    app in the browser!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
