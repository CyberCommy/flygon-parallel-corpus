- en: A Form in its Simplest Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right! Let's dive into this headfirst (with a little detour on the way to
    make it look pretty). We will create a very simple page with a form. This form
    will ask for some basic personal data from our user, and the second part of the
    form will be used for more specific questions.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a solid understanding of how to build
    basic forms in Vue, plus you'll get a quick refresher on basic Vue concepts such
    as `v-model`, events, and properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started using Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actually writing some code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding the inputs to local state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting the form's data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing in Axios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02](https://github.com/PacktPublishing/Building-Forms-with-Vue.js/tree/master/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/35F6340](http://bit.ly/35F6340)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started using Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by adding Bootstrap 4 as a dependency to our project, so we won't
    have to think about design and can focus on the functionality of our forms.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap is a popular open source toolkit that gives us some predefined classes
    and styles so that we can make our app look nice without having to worry much
    about styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get Bootstrap installed and set up for our project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the Terminal to your project''s folder, and install the dependency
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! This adds the package to our `node_modules` folder and `package.json`.
    Now, go ahead and import the necessary styles into `src/main.js`. Use the following
    command to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We're not going to be using any of Bootstrap's scripts, so we can live with
    only the minified CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a little cleaning on our `App.vue` file because, right now, we only
    have some boilerplate code—but we want to start fresh! So, let''s begin the cleaning:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace everything inside `App.vue` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and start up your development server by running the following on your
    Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Open up the link that the Terminal shows you (the one that says local) and you
    should see a blank screen in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Behold the blank canvas of the first steps to form greatness and stuff! Yaaas!
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and get working on the actual form. It's time for some code.
  prefs: []
  type: TYPE_NORMAL
- en: Actually writing some code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right, enough setup—let's write some code! We will start with a very simple
    form so that our users can fill out their personal information. Nothing crazy,
    just baby steps.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add three fields to our form. A `firstName` input, a `lastName`
    input, and an `email` input. Finally, we will add a `Submit` button.
  prefs: []
  type: TYPE_NORMAL
- en: Remember back when we installed Bootstrap? This is where it comes out to shine.
    All of the classes that we are going to add to our markup will get magically styled
    by Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make these changes to your `App.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code example, we have set up a container with `row`. Inside
    this `row`, we have populated it with three different inputs, two `text` types
    (one for the first and one for the last name), and an `email` type input. Finally,
    we added `<button>`, which will serve as the main way to submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: Save your file and check out your browser. If you still have the server running,
    you should see the changes reflected automatically. Okay, I agree it's a little
    underwhelming, but I did say we're starting with a simple example, and this is
    as simple as it gets!
  prefs: []
  type: TYPE_NORMAL
- en: The form is fully functional, and you can even click the Submit button for it
    to submit to itself and accomplish absolutely nothing. Neat! But let's spice this
    up with some Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Binding the inputs to local state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of forms in a web application is to capture some user input and
    be able to do something with it. In our example, we still don't have any way to
    access the user's input with JavaScript for our Vuetiful plans—so, let's start
    with that.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that you do not necessarily have to wrap up your form's data inside
    a secondary object, but, I have found it to be cleaner—especially when you start
    adding other data properties to your component, which may not necessarily be related
    to your form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `data` property on the instance of your `App.vue` file. Inside
    of it, we''re going to declare a `form` object, which will, in turn, hold a property
    for each one of our inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For us to bind our inputs' values to our internal state, we need to make use
    of Vue's `v-model` attribute. So, let's add `v-model` to each of our inputs. That
    way, whenever the user types in or deletes information, the value of the input
    element will be bound to our `data` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that `v-model` is not a *magical* attribute. It is a shorthand for
    two things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It binds the `input` event of our input boxes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It binds the `value` attribute to our `data` property:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and add `v-model` to all of our inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Vue developer tools displaying the two-way
    data binding between our form and the internal state in our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3de882c9-f5d0-4299-8ec2-c0c7c3852100.png)'
  prefs: []
  type: TYPE_IMG
- en: Great job! Now, this isn't super impressive, but we are building the foundations
    for things to come.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we're going to look at how to handle the form being
    submitted and sent to an API endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting the form's data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As it currently is, the form is getting submitted to the same URL when you click
    the Submit button. This is not Vue magic—this is just default `<form>` behavior,
    especially since we didn't specify an action attribute on the tag.
  prefs: []
  type: TYPE_NORMAL
- en: In most real-world scenarios, you'll want to perform a couple of operations
    before submitting a form. The most common would be validating some inputs, or
    perhaps even overriding the default submit behavior with an asynchronous call
    using a library such as Axios.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to make sure that, when the user clicks the Submit button, we
    prevent the form from going out on its own. We also want to bind a new method
    to it being clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s bind to the form''s `submit` event first. Remember that we want to add
    the `.prevent` modifier to the event so that, when the form is submitted, the
    default behavior doesn''t trigger, and our function will run as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Sweet! Now we need to create this new `onSubmit` method on the configuration
    of our `App.vue` file. Let's use `console.log` inside the `click` method handler
    to verify that it works before going into more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code as a property inside the export default declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Just to verify that everything is working, go ahead and open up your browser
    and click the Submit button a few times. Check the console; the log should say
    click. So far, so good—we've managed to take control of the form's behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make a *very* basic validation method as an example. We will verify that
    the input's length is `> 0` (not empty) for the three fields. In a later chapter,
    we will go into Vuelidate, which will provide more deep and powerful validation
    to our forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a new computed property called `formIsValid`, which will check
    for the conditions we just discussed. Add the following to `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a computed property checking the state of our form, let's actually
    use it on the `onSubmit` method. We will verify that `this.formIsValid` is `true`,
    and if it isn't we will simply return and prevent the form from being submitted.
    For now, we will only use `console.log` for a confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the `onSubmit` method to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and test this on your browser. If you are missing any fields, you will
    not get `console.log` as the validation will fail. If you fill them up and hit
    the Submit button, you will get the message in your console.
  prefs: []
  type: TYPE_NORMAL
- en: In the next block, we will incorporate a third-party library, Axios, to help
    us to send the data.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing in Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in our form is to actually have the form send the user's data
    to our servers. For the sake of example, the data is not going to be actually
    stored anywhere, but we will look at the steps of creating the POST call that
    most forms will use for transferring the data to an API or server endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Axios is a fantastic and popular library for sending and receiving data from
    servers. I personally recommend it as a go-to whenever you need to make any HTTP
    calls from your Vue apps. You can find the official GitHub page here: [github.com/axios/axios](http://github.com/axios/axios).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the next set of steps to get Axios ready on your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fire up your Terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We are going to need an API endpoint to make our calls to. Since we don't have
    any servers at hand—and to keep things really simple—we are going to use an app
    called Mockoon. Head over to [mockoon.com/#download](http://mockoon.com/#download) and
    download the app for your OS. Once you have it installed, launch it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second column, you are going to see two example routes; the one that
    we are interested in is the POST route to /dolphins (frankly, I'm more of a sea
    otter kind of girl, but I'm rolling with the punches). Go ahead and click the
    green play triangle on the very top; this will start a server on `localhost:3000`
    as default, but you can change the port if the default doesn't work for you for
    whatever reason.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that Axios has been added as a dependency to the project, we can import
    it into `App.vue` to make use of its different methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the import statement to the top of the `App.vue` file, right after the
    opening `<script>` tag, and before the `export default {` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to this import, we now have Axios available anywhere in this component.
    Please keep in mind that if, later on, we want to use it on another component
    or file, we will have to import it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the `onSubmit` button once more. This time, we will get rid of `console.log`
    and then make an `async` call with Axios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Every Axios method returns a promise, which is a vanilla JavaScript object.
    The `then` block is called whenever this promise resolves, in other words, when
    the actual HTTP request is completed! For more information about promises, MDN
    has a great resource at [developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
  prefs: []
  type: TYPE_NORMAL
- en: If you go to your browser now and try it out, you will see that, when the Submit
    button is clicked, our `onSubmit` method is triggered and `console.log` is successfully
    executed. At this point, we can say we have a very basic (but sadly useless) form!
  prefs: []
  type: TYPE_NORMAL
- en: Let's take it a little bit further and actually disable the input button until
    the form is valid. (Remember that our validation is very weak right now, but we
    will work on it later on.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your template, and let''s hook up the `:disabled` attribute of the
    button to our computed property, `formIsValid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once again, test this out in your browser and you will see that the input button
    is grayed out until the form is actually filled out. Neat!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken the first steps to create a simple data-gathering
    form. We styled it using Bootstrap and we hooked into the `<form>` events. Finally,
    we used Axios and Mockoon to send the data to a dummy backend for testing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look into building reusable form components
    harnessing the power of Vue.
  prefs: []
  type: TYPE_NORMAL
