- en: '*Chapter 19*: Animations and Interpolations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will see how we can use the `Animation` class to make our UI a little
    less static and a bit more interesting. As we have come to expect, the Android
    API will allow us to do some quite advanced things with relatively straightforward
    code, and the `Animation` class is no different.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter can be approximately divided into these parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to how animations in Android work and are implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to a UI widget we haven't explored yet, `SeekBar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a working animation app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's explore how animations in Android work.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019).
  prefs: []
  type: TYPE_NORMAL
- en: Animations in Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The normal way to create an animation in Android is through XML. We can write
    XML animations and then load and play them in Java, on a specified UI widget.
    So, for example, we can write an animation that fades in and out five times over
    3 seconds, then play that animation on an `ImageView` or any other widget. We
    can think of these XML animations as a script as they define the type, order,
    and timing.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore some of the different properties we can assign to our animations,
    then how to use them in our Java code, and finally, we can make a neat animations
    app to try it all out.
  prefs: []
  type: TYPE_NORMAL
- en: Designing cool animations in XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned that XML can be used to describe animations as well as UI layouts,
    but let's find out exactly how. We can state the properties of an animation that
    describe the starting and ending appearance of a widget. The XML can then be loaded
    by our Java code by referencing the name of the XML file that contains it and
    turning it into a usable Java object, again not unlike a UI layout.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a quick look at some of the animation property pairs we can state to
    create an animation. Straight after we have looked at some XML, we will see how
    to use it in our Java.
  prefs: []
  type: TYPE_NORMAL
- en: Fading in and out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alpha is the measure of transparency. So, by stating the starting `fromAlpha`
    and ending `toAlpha` values, we can fade items in and out. A value of `0.0` is
    invisible and `1.0` is an object''s normal appearance. Steadily moving between
    the two makes a fading-in effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Moving
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can move an object within our UI by using a similar technique. `fromXDelta`
    and `toXDelta` can have their values set as a percentage of the size of the object
    being animated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code moves an object from left to right at a distance equal to
    the width of the object itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In addition, there are the `fromYDelta` and `toYDelta` properties for animating
    up and down.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling or stretching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`fromXScale` and `toXScale` will increase or decrease the scale of an object.
    As an example, the following code will change the object, running the animation
    from normal size to invisible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As another example, we could shrink the object to a tenth of its usual size
    using `android:fromYScale="0.1"` or make it 10 times bigger using `android:fromYScale="10.0"`.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the duration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, none of these animations would be especially interesting if they
    just instantly arrived at their conclusion. To make our animations more interesting,
    we can, therefore, set their duration in milliseconds. A millisecond is one-thousandth
    of a second. We can also make the timing easier, especially in relation to other
    animations, by setting `startOffset`, also in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next code would begin an animation one-third of a second after we started
    it and it would take two-thirds of a second to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Rotating animations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to spin something around, just use `fromDegrees` and `toDegrees`.
    This next code, probably predictably, will spin a widget around in a complete
    circle because, of course, there are 360 degrees in a circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Repeating animations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Repetition might be important in some animations, perhaps a wobble or shake
    effect, so we can add a `repeatCount` property. In addition, we can specify how
    the animation is repeated by setting `repeatMode`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code would repeat an animation 10 times, each time reversing
    the direction of the animation. The `repeatMode` property is relative to the current
    state of the animation. What this means is that if you, for example, rotated a
    button from 0 to 360 degrees, the second part of the animation (the first repeat)
    would rotate the other way from 360 back to 0\. The third part of the animation
    (the second repeat) would again reverse and rotate from 0 to 360:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the 360-degree spin example, the preceding code would spin a widget through
    360 degrees to the right, then back 360 degrees to the left, five times. This
    is 10 repeats, reversing after each.
  prefs: []
  type: TYPE_NORMAL
- en: Combining an animation's properties with set
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To combine groups of these effects, we need to use `set`. This code shows how
    we can combine all the previous code snippets we have just seen into an actual
    XML animation that will compile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We still haven't seen any Java with which to bring these animations to life.
    Let's fix that now.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating animations and controlling them with Java code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This next snippet of Java code shows how we would declare an object of the
    `Animation` type, initialize it with an animation contained in an XML file named
    `fade_in.xml`, and start the animation on an `ImageView` widget. Soon we will
    do this in a project and see where to put the XML animations as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We already have quite a powerful arsenal of animations and control features
    for things such as timing. But the Android API gives us a little bit more than
    this as well.
  prefs: []
  type: TYPE_NORMAL
- en: More animation features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can listen for the status of animations much as we can listen for clicks
    on a button. We can also use **interpolators** to make our animations more life-like
    and pleasing. Let's look at listeners first.
  prefs: []
  type: TYPE_NORMAL
- en: Listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we implement the `AnimationListener` interface, we can indeed listen to the
    status of animations by overriding the three methods that tell us when something
    has occurred. We could then act based on these events.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnAnimationEnd` announces the end of an animation, `onAnimationRepeat` is
    called each and every time an animation begins a repeat, and perhaps predictably,
    `onAnimationStart` is called when an animation has started animating. This might
    not be the same time as when `startAnimation` is called if `startOffset` is set
    in the animation''s XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will see how `AnimationListener` works in the animation demo app, as well
    as putting another widget, `SeekBar`, into action.
  prefs: []
  type: TYPE_NORMAL
- en: Animation interpolators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you can think back to high school, you might remember exciting lessons about
    calculating acceleration. If we animate something at a constant speed, then at
    first glance, things might seem OK. If we then compare the animation to another
    that uses gradual acceleration, then the latter will almost certainly be more
    pleasing to watch.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that if we were not told that the only difference between the
    two animations was that one used acceleration and the other didn't, we wouldn't
    be able to say why we preferred it. Our brains are more receptive to things that
    conform to the norms of the world around us. This is why adding a bit of real-world
    physics such as acceleration and deceleration improves our animations.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we want to do, however, is start doing a bunch of mathematical
    calculations just to slide a button onto the screen or spin some text in a circle.
  prefs: []
  type: TYPE_NORMAL
- en: This is where **interpolators** come in. They are animation modifiers that we
    can set in a single line of code within our XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of interpolators are `accelerate_interpolator` and `cycle_interpolator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will put some interpolators, along with some XML animations and the related
    Java code, into action next.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about interpolators and the Android `Animation` class on
    the developer website here: [http://developer.android.com/guide/topics/resources/animation-resource.html](http://developer.android.com/guide/topics/resources/animation-resource.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Animation demo app – introducing SeekBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's enough theory, especially with something that should be visual. Let's
    build an animation demo app that explores everything we have just discussed and
    a bit more.
  prefs: []
  type: TYPE_NORMAL
- en: This app involves small amounts of code in lots of different files. Therefore,
    I have tried to make it plain which code is in which file, so you can keep track
    of what is going on. This will make the Java we write for this app more understandable
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: The app will demonstrate rotations, fades, translations, animation events, interpolations,
    and controlling duration with a `SeekBar` widget. The best way to explain what
    the `SeekBar` widget does is to build it and then watch it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the animation demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project called `Animation Demo` using the **Empty Activity** template,
    leaving all the other settings at their defaults. As usual, should you wish to
    speed things up by copy and pasting the layout, the Java code, or the animation
    XML, it can all be found in the [*Chapter 19*](B16773_19_ePub_RK.xhtml#_idTextAnchor331)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following reference screenshot of the finished layout to help guide
    you through the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.1 – Finished layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.1_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.1 – Finished layout
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to lay out the UI for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `activity_main.xml` in the design view of the editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the default `TextView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `ImageView` widget to the top-center of the layout. Use the previous
    reference screenshot to guide you. Use `@mipmap/ic_launcher` to show the Android
    robot in the `ImageView` widget when prompted to do so by selecting **Project**
    | **ic_launcher** in the pop-up **Resources** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `id` property of the `ImageView` widget to `imageView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Directly below the `ImageView` widget, add a `TextView` widget. Set the `id`
    attribute to `textStatus`. I made my `TextView` widget a little bigger by dragging
    its edges and changed its `textSize` attribute to `40sp`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will add a large selection of `id` property values we add to them later
    in the tutorial will be. Follow this next screenshot to lay out 12 buttons. Alter
    the `text` attribute on each so that your buttons have the same text as those
    in the next screenshot. The `text` attributes are detailed specifically in the
    next step in case the screenshot isn't clear enough:![Figure 19.2 – text attributes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.2_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.2 – text attributes
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To make the process of laying out the buttons quicker, lay them out just approximately
    at first, then add the `text` attributes from the next step, and then fine-tune
    the button positions to get a neat layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the text values as they are in the screenshot. Here are all the values
    from left to right and top to bottom: `FADE IN`, `FADE OUT`, `FADE IN OUT`, `ZOOM
    IN`, `ZOOM OUT`, `LEFT RIGHT`, `RIGHT LEFT`, `TOP BOT`, `BOUNCE`, `FLASH`, `ROTATE
    LEFT`, and `ROTATE RIGHT`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `SeekBar` widget from the `id` property to `seekBarSpeed` and the `max`
    property to `5000`. This means that the seek bar will hold a value between `0`
    and `5000` as it is dragged by the user from left to right. We will see how we
    can read and use this data soon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to make the `SeekBar` widget much wider. To achieve this, you use the
    exact same technique as with any widget; just drag the edges of the widget. However,
    as the seek bar is quite small, it is hard to increase its size without accidentally
    selecting the constraint handles. To overcome this problem, zoom in to the design
    by holding the *Ctrl* key and rolling the middle mouse wheel forward. You can
    then grab the edges of the seek bar without touching the constraint handles. I
    have shown this in action in the next screenshot:![Figure 19.3 – Grab the edges
    of the seek bar
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_19.3_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.3 – Grab the edges of the seek bar
  prefs: []
  type: TYPE_NORMAL
- en: Now add a `TextView` widget just to the right of the `SeekBar` widget and set
    its `id` property to `textSeekerSpeed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tweak the positions to look like the reference image at the start of these steps,
    and then click the **Infer Constraints** button to lock the positions. Of course,
    you can do this manually if you want the practice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next add the following `id` properties to the buttons, as identified by the
    text property that you have already set. If you are asked whether you want to
    **Update usages…** as you enter these values, select **Yes**:![](img/Table_19.1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will see how to use this newcomer to our UI (`SeekBar`) when we get to coding
    the `MainActivity` class in a few sections time.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the XML animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click on the `anim` in the **Directory name** field and left-click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, right-click on the new `fade_in`, and then left-click **OK**. Delete the
    entire contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `fade_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `fade_in_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `zoom_in`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `zoom_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `left_right`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `right_left`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `top_bot`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `flash`, and then left-click **OK**. Delete the entire contents
    and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `bounce`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `rotate_left`, and then left-click `pivotX="50%"` and `pivotY="50%"`.
    This makes the rotate animation central on the widget that will be animated. We
    can think of this as setting the pivot point of the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the `rotate_right`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now we can write the Java code to add our animations to our UI.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the animation demo app with Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `MainActivity.java` file. Now, below the class declaration, we can
    declare the following member variables for the animations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add these member variables below for the UI widgets after the previous
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to add the following `import` statements at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.view.animation.Animation;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.Button;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.ImageView;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.SeekBar;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.widget.TextView;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add an `int` member variable that will be used to track the current
    value/position of the seek bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s call two new methods from the `onCreate` method after the call to
    the `setContentView` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: At this point, the two new lines of code will have errors until we implement
    the two new methods.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will implement the `loadAnimations` method. Although the code in this
    method is quite extensive, it is also very straightforward. All we are doing is
    using the static `loadAnimation` method of the `AnimationUtils` class to initialize
    each of our `Animation` references with one of our XML animations. Notice also
    that for the `animFadeIn` `Animation` reference, we also call `setAnimationListener`
    on it. We will write the methods to listen for events shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `loadAnimations` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to import one new class at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.view.animation.AnimationUtils;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the `loadUI` method in three sections. First, let''s get a reference
    to the parts of our XML layout in the usual way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will add a click listener for each button. Add this code immediately
    after the last block within the `loadUI` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The code we just added creates errors in all the lines of code. We can ignore
    them for now as we will fix them shortly and discuss what happened.
  prefs: []
  type: TYPE_NORMAL
- en: The third and last section of the `loadUI` method sets up an anonymous class
    to handle the `SeekBar` widget. We could have added this as an interface to the
    `MainActivity` class as we did with listening for button clicks and animation
    events, but with a single `SeekBar` widget like this, it makes sense to handle
    it directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will override three methods as is required by the interface when implementing
    `OnSeekBarChangeListener`:'
  prefs: []
  type: TYPE_NORMAL
- en: A method that detects a change in the position of the seek bar called `onProgressChanged`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that detects the user starting to change the position called `onStartTrackingTouch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that detects when the user has finished using the seek bar called `onStopTrackingTouch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To achieve our goals, we only need to add code to the `onProgressChanged` method
    but we must still override them all.
  prefs: []
  type: TYPE_NORMAL
- en: All we do in the `onProgressChanged` method is assign the current value of the
    seek bar to the `seekSpeedProgress` member variable so it can be accessed from
    elsewhere. Then we use this value along with the maximum possible value of the
    `SeekBar` widget, obtained by calling `seekBarSpeed.getMax()`, and output a message
    to the `textSeekerSpeed` `TextView` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the code we have just discussed into the `loadUI` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to alter the `MainActivity` class declaration to implement two interfaces.
    In this app, we will be listening for clicks and animation events, so the two
    interfaces we will be using are `View.OnClickListener` and `Animation.AnimationListener`.
    Notice that to implement more than one interface, we simply separate the interfaces
    with a comma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alter the `MainActivity` class declaration by adding the following highlighted
    code we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, we can add and implement the required methods for those interfaces
    – first, the following methods of `AnimationListener`: `onAnimationEnd`, `onAnimationRepeat`,
    and `onaAnimationStart`. We only need to add a little code to two of these methods.
    In `onAnimationEnd`, we set the `text` property of `textStatus` to `STOPPED`,
    and in the `onAnimationStart` method, we set the `text` property of `textStatus`
    to `RUNNING`. This will demonstrate our animation listeners are indeed listening
    and working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `onClick` method is quite long but not anything complicated. Each `case`
    that handles each button from the UI simply sets the duration of the animation
    based on the current position of the seek bar, sets up the animation so it can
    be listened to for events, and then starts the animation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to use your preferred technique to import the `View` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import android.view.View;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `onClick` method we have just discussed, and we have then completed
    this mini-app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the app. Move the seek bar to roughly the center so the animations
    run for a reasonable amount of time, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.4 – Move the seek bar to roughly the center'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.4_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.4 – Move the seek bar to roughly the center
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **ZOOM IN** button to see the effect, as shown in this next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.5 – ZOOM IN effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.5_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.5 – ZOOM IN effect
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how the text on the Android robot changes from **RUNNING** to **STOPPED**
    at the appropriate time. Now click one of the **ROTATE** buttons to see this effect
    shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.6 – Rotate button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_19.6_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.6 – Rotate button
  prefs: []
  type: TYPE_NORMAL
- en: Most of the other animations don't do themselves justice in a screenshot, so
    be sure to try them all out for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know how to animate widgets now but what about shapes or images that I create
    myself?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An `ImageView` can hold any image you like. Just add the image to the `drawable`
    folder and then set the appropriate `src` attribute on the `ImageView` widget.
    You can then animate whatever image is being shown in the `ImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: But what if I want more flexibility than this, such as for a drawing app or
    even a game?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To implement this kind of functionality, we will need to learn about another
    general computing concept (`Paint`, `Canvas`, and `SurfaceView`). We will learn
    how to draw anything from a single pixel to shapes and then move them around the
    screen starting in the next chapter, [*Chapter 20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345),
    *Drawing Graphics*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have another app-enhancing trick up our sleeves and we know that animations
    in Android are quite straightforward. We can design an animation in XML and add
    the file to the `anim` folder. After that, we can get a reference to the animation
    in XML with an `Animation` object in our Java code.
  prefs: []
  type: TYPE_NORMAL
- en: We can then use a reference to a widget in our UI and set an animation to it
    using `setAnimation` and passing in the `Animation` object. We commence the animation
    by calling `startAnimation` on the reference to the widget.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw that we can control the timing of animations, as well as listening
    for animation events.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about drawing graphics in Android. This will
    be the start of several chapters on graphics, where we will build a kids'-style
    drawing app.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing text property** | **Value of id property to set** |'
  prefs: []
  type: TYPE_TB
- en: '| Fade In | `btnFadeIn` |'
  prefs: []
  type: TYPE_TB
- en: '| Fade Out | `btnFadeOut` |'
  prefs: []
  type: TYPE_TB
- en: '| Fade In Out | `btnFadeInOut` |'
  prefs: []
  type: TYPE_TB
- en: '| Zoom In | `btnZoomIn` |'
  prefs: []
  type: TYPE_TB
- en: '| Zoom Out | `btnZoomOut` |'
  prefs: []
  type: TYPE_TB
- en: '| Left Right | `btnLeftRight` |'
  prefs: []
  type: TYPE_TB
- en: '| Right Left | `btnRightLeft` |'
  prefs: []
  type: TYPE_TB
- en: '| Top Bot | `btnTopBottom` |'
  prefs: []
  type: TYPE_TB
- en: '| Bounce | `btnBounce` |'
  prefs: []
  type: TYPE_TB
- en: '| Flash | `btnFlash` |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate Left | `btnRotateLeft` |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate Right | `btnRotateRight` |'
  prefs: []
  type: TYPE_TB
