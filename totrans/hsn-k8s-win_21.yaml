- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chapter 1: Creating Containers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object Namespaces, Process Table, Job Objects, and Windows Container Isolation
    Filesystem. Additionally, on top of these low-level functionalities, **Host Compute
    Service** (**HCS**) and **Host Network Service** (**HNS**) abstract the public
    interface for running and managing containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows Server containers require the host OS version to match the container
    base image OS version. Additionally, on Windows, you can use Hyper-V isolation,
    which enables running containers with a non-matching base image OS version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Hyper-V isolation, each container is running inside a dedicated, minimal
    Hyper-V virtual machine. Containers do not share the kernel with host OS; there
    are no compatibility limitations between the host OS version and the container
    base OS version. Use Hyper-V isolation if you need to run containers with a non-matching
    base image OS version and in multi-tenant environments with untrusted code execution
    scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable LCOW support in Docker Desktop (version 18.02 or later), you have
    to enable the experimental features option in Docker Settings | Daemon. Creating
    an LCOW container requires specifying the `--platform linux` parameter for the
    `docker run` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker logs <containerId>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Windows containers that have Powershell installed, you can use the following
    command: `docker exec -it <containerId> powershell.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 2: Managing State in Containers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The container layer is the top writeable layer in the filesystem for each Docker
    container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bind mounts provide a simple functionality of mounting any file or directory
    from the container host to a given container. Volumes provide similar functionality
    but they are fully managed by Docker, so you do not have to worry about physical
    paths in the container host filesystem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The writeable container layer is coupled with the container host, which means
    it is not possible to easily move the data to a different host. Layer filesystems
    provide worse performance than direct access to the host filesystem (for example,
    using volumes). You cannot share the writeable layer between different containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the SMB Global Mapping feature on Windows host, which is provided to mount
    SMB shares visible to the containers. Then, you can mount the SMB share in a container
    as a regular directory from the host machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. To persist your storage data for Hyper-V containers, you have to use Docker
    volumes. If you need to use bind mounts (for example, for SMB Global Mappings),
    you have to use process isolation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker volume prune`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Volume drivers in Docker can be used to manage volumes that are hosted on remote
    machines or in cloud services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 3: Working with Container Images'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Docker registry is an organized, hierarchical system for storing Docker images,
    providing scalable distribution of images. Docker Hub is the official, public
    Docker registry hosted and managed by Docker, Inc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A tag is a versioning label for a single image in a repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<dockerId>/<repositoryName>:<tag>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Azure Container Registry** (**ACR**) is a fully managed private Docker registry
    provided by the Azure cloud. In the case of ACR, you store the images using your
    own Azure storage account and you can make the registry fully private, for your
    own infrastructure needs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`latest` is the default tag used when you pull or build images (if you do not
    specify an explicit tag). In general, you should not use the `latest` tag apart
    from in development scenarios. In production, always specify an explicit tag for
    your Kubernetes manifests or in the Dockerfile instructions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Semver suggests the following scheme of using three numbers, major, minor,
    and patch, separated with dots: `<major>.<minor>.<patch>`, where each number is
    incremented as needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Docker Content Trust** (**DCT**) provides a means of verifying digital signatures
    of data being transferred between Docker engine and the Docker registry. This
    verification allows the publishers to sign their images and the consumer (Docker
    engine) to verify the signatures to ensure the integrity and source of the images.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 4: Kubernetes Concepts and Windows Support'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The control plane (master) consists of a set of components that are responsible
    for global decisions regarding the cluster, such as the scheduling and deployment
    of application instances to worker nodes and managing cluster events. The data
    plane consists of worker nodes that are responsible for running container workloads
    scheduled by the master.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cluster management is performed using a declarative model, which makes Kubernetes
    very powerful—you describe the desired state and Kubernetes does all of the heavy
    lifting to transform the current state of the cluster to the desired state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Kubernetes Pod consists of one or more containers that share kernel namespaces,
    IPC, a network stack (so you address them by the same cluster IP and they can
    communicate via localhost), and storage. In other words, Pods can contain multiple
    containers that share some resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Deployment API object is used for the declarative management of ReplicaSet
    rollouts and scaling. This is the key API object for ensuring the smooth rollout
    of a new version of your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows machines can only join the cluster as worker nodes. There is no possibility
    and no plans for running master components on Windows. The setup of a local Kubernetes
    development environment for hybrid Linux/Windows clusters is complex and currently
    no standard solutions, such as Minikube or Docker Desktop for Windows' support
    such a configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minikube aims at providing a stable environment for local development with Kubernetes.
    It is available on Windows, Linux, and macOS but can provide Linux clusters only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**AKS** (short for **Azure Kubernetes Service**) is a fully managed Kubernetes
    cluster offering by Azure. AKS Engine is an official, open source tool for provisioning
    self-managed Kubernetes cluster on Azure. Internally, AKS uses AKS Engine but
    they cannot manage clusters created by one another.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Kubernetes Networking'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pods running on a node must be able to communicate with all Pods on all nodes
    (including the Pod's node) without NAT and explicit port mapping. All Kubernetes
    components running on a node, for example, kubelet or system daemons/services,
    must be able to communicate with all Pods on that node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use Flannel with host-gw only if there is Layer 2 (L2) connectivity
    between the nodes in the cluster. In other words, there cannot be any L3 routers
    between the nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A NodePort Service is implemented as a ClusterIP Service with the additional
    capability of being reachable using any cluster node IP address and a specified
    port. To achieve that, kube-proxy exposes the same port on each node from the
    range of 30000–32767 (which is configurable) and sets up forwarding so that any
    connections to this port will be forwarded to ClusterIP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduced cost (you use only one cloud load balancer to serve the incoming traffic)
    and L7 load balancing capabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A container runtime uses CNI plugins to connect containers to the network and
    remove them from the network when needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An internal vSwitch is not connected to a network adapter on the container host,
    whereas an external vSwitch is connected and provides connectivity with external
    networks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker network modes (drivers) are a concept coming from Docker that is part
    of the **Container Network Model** (**CNM**). This specification was proposed
    by Docker to solve container networking setup and management challenges in a modular,
    pluginable way. CNI is a CNCF project aiming at providing a simple and clear interface
    between any container runtime and network implementation. They solve almost the
    same problem but in different ways. On Windows, the implementation of Docker network
    modes and CNI plugins is the same—they are lightweight adapters for HNS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, overlay network mode creates a VXLAN overlay network using VFP at
    an external Hyper-V vSwitch. Each overlay network has its own IP subnet, determined
    by a customizable IP prefix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 6: Interacting with Kubernetes Clusters'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: kubectl uses the kubeconfig file, which is located in `~\.kube\config`. This
    YAML configuration file contains all of the parameters required for kubectl to
    connect to the Kubernetes API for your cluster
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use a `KUBECONFIG` environment variable or the `--kubeconfig` flag for
    individual commands to force kubectl to use a different kubeconfig.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Contexts are used for organizing and coordinating access to multiple Kubernetes
    clusters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl create` is an imperative command to create new API resources, whereas
    `kubectl apply` is a declarative management command for managing API resources.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl patch` updates a resource by merging the current resource state and
    a patch that contains only the modified properties. A common use case for patching
    is when you need to enforce a node selector for an existing DaemonSet in hybrid
    Linux/Windows clusters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl logs <podName>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl cp <podName>:<sourceRemotePath> <destinationLocalPath>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 7: Deploying a Hybrid On-Premises Kubernetes Cluster'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use an internal NAT Hyper-V vSwitch if you plan to use the cluster for local
    development only. Any external inbound communication (apart from your Hyper-V
    host machine) will require NAT. Use an external Hyper-V vSwitch if your network
    has DHCP and DNS servers that you (or the network administrator) can manage. This
    will be the case in most production deployments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In short, changing operating system configuration, such as disabling swap, installing
    a Docker container runtime, installing Kubernetes packages, and performing `kubeadm
    init`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Service subnet is a virtual subnet (non-routable) used by Pods for accessing
    services. Routable address translation from virtual IPs is performed by kube-proxy
    running on nodes. The Pod subnet is a global subnet used by all Pods in the cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubeadm token create --print-join-command`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl taint nodes --all node-role.kubernetes.io/master-`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Flannel network with a host-gw backend (win-bridge CNI plugin on Windows
    nodes): A host-gw backend is preferable as it is in a stable feature state, whereas
    an overlay backend is still in alpha feature state for Windows nodes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In short, download `sig-windows-tools` scripts, which install the Docker and
    Kubernetes packages; prepare JSON configuration file for the scripts; and execute
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl logs <podName>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 8: Deploying a Hybrid Azure Kubernetes Service Engine Cluster'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AKS is a fully managed Kubernetes cluster offering by Azure. AKS Engine is an
    official, open source tool for provisioning self-managed Kubernetes clusters on
    Azure. Internally, AKS uses AKS Engine, but they cannot manage clusters created
    by one another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AKS Engine generates an **Azure Resource Manager** (**ARM**) template based
    on a supplied configuration file (cluster apimodel). Then, you can use this ARM
    template to deploy a fully functional, self-managed Kubernetes cluster on Azure
    infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Even if AKS internally uses AKS Engine, it is not possible to use AKS Engine
    to manage AKS and vice versa.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure CLI, Azure Cloud Shell, kubectl, and optionally the SSH client for
    Windows if you would like to connect to the nodes using SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AKS Engine uses the apimodel (or cluster definition) JSON file to generate ARM
    templates, which can be used for deploying Kubernetes clusters directly to Azure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use SSH and execute the following command: `ssh azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming that `10.240.0.4` is the private IP of the Windows node, create an
    SSH connection to the master that forwards the RDP port to the Windows node using the `ssh
    -L 5500:10.240.0.4:3389 azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com` command.
    In a new command-line window, start an RDP session using the `mstsc /v:localhost:5500`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 9: Deploying Your First Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The imperative approach consists of executing imperative kubectl commands, such
    as `kubectl run` or `kubectl expo``se`. In the declarative approach, you always
    modify object configurations (manifest files) and create or update them in the
    cluster using the `kubectl apply` command (alternatively, you can use Kustomization
    files).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The imperative `kubectl delete` command is preferred over declarative deletion
    as it gives predictable results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl diff -f <file/directory>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The recommended practice is using `nodeSelector` for the predictable scheduling
    of your Pods for both Windows and Linux containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use `kubectl proxy` to access any Service API object. `kubectl port-forward`
    is a more low-level command that you can use for accessing individual Pods or
    Pods running in a deployment or behind a service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using an Ingress Controller is possible only if you have nodes that are capable
    of running Ingress Controller Pods. For example, for ingress-nginx, the deployment
    of an Ingress Controller is possible for Linux nodes only—you will be able to
    create Ingress objects for services running on Windows nodes but all of the load
    balancing will be performed on Linux nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl scale deployment/<deploymentName> --replicas=<targetNumberOfReplicas>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 10: Deploying Microsoft SQL Server 2019 and ASP.NET MVC Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can choose from the following: passing arguments to the container commands,
    defining system environment variables for the container, mounting ConfigMaps or
    Secrets as container volumes, and optionally wrapping everything up using PodPresets.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LogMonitor.exe` acts as a supervisor for your application process and prints
    logs to standard output, which are gathered from different sources based on the
    configuration file. There are plans to further extend this solution to be used
    in the sidecar container pattern.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure that the migrations can be rolled back and that the database
    schema is fully compatible with the old and new application versions. In other
    words, backward-incompatible changes such as renames have to be handled specially
    to make things backward compatible between the individual steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This guarantees data persistence when the Pod is terminated and ensures SQL
    Server failover, even if the new Pod is scheduled on a different node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to use the `ef6.exe` command to apply the migrations. This can be executed
    using the Kubernetes Job object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you use a `requests` value for resources that is lower than the `limits`
    value, you can enter the state of resource overcommitting. This makes it possible
    for Pods to temporarily use more resources than they have requested and enables
    the more effective bin-packing of Pod workloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The VS remote debugger is exposed at the `4020` TCP port from your container.
    To connect to it, without exposing it as a Service object, you need to use kubectl
    port forwarding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 11: Configuring Applications to Use Kubernetes Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The general principle of namespaces is providing resource quotas and a scope
    for object names. You will organize the namespaces depending on the size of your
    cluster and your team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The readiness probe is used to determine whether a given container is ready
    to accept traffic. The liveness probe is used to detect whether a container needs
    to be restarted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wrong configuration of this probe can result in cascading failures in your
    services and container restart loops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`requests` specifies the guaranteed amount of a given resource provided by
    the system. `limits` specifies the maximum amount of a given resource provided
    by the system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Avoiding thrashing (replica count fluctuating frequently).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ConfigMaps and Secrets can hold technically any type of data consisting of key-value
    pairs. The purpose of Secrets is keeping sensitive information for accessing dependencies,
    whereas ConfigMaps should be used for general application configuration purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`volumeClaimTemplates` is used for creating a dedicated PersistentVolumeClaim
    for each Pod replica in this StatefulSet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure real zero-downtime updates of your deployments in Kubernetes, you
    need to configure proper probes, especially readiness. In this way, the user will
    be redirected to a replica only if this replica can properly respond to the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The principle of least privilege: Your applications should have access to their
    own resources only (it is recommended that you run each application using a dedicated
    service account that has access to Secrets or ConfigMaps for the very application),
    and users should have restricted access depending on their role in the project
    (for example, a QA engineer may be fine with just read-only access to the cluster).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 12: Development Workflow with Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm is used to create redistributable packages for your Kubernetes application.
    You can use it to deploy applications provided by others or use it for your own
    applications as an internal package and dependency manager for microservices in
    your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Helm 2 required a dedicated service deployed on Kubernetes named Tiller, which
    was responsible for actual communication with Kubernetes API. This has caused
    various problems, including security and RBAC issues. As of Helm 3.0.0, Tiller
    is no longer needed and chart management is done by the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a Kubernetes Job object as a post-installation hook in Helm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a new Docker image in the Helm chart manifest or values file and perform `helm
    upgrade`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Snapshot Debugger is a feature of Azure Application Insights that monitors
    exception telemetry from your application, including production scenarios. Whenever
    there is an unhandled exception (top-throwing), the Snapshot Debugger collects
    managed memory dumps, which can be analyzed directly in the Azure portal or, for
    more advanced scenarios, using Visual Studio 2019 Enterprise edition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should prefer proper declarative management of Kubernetes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure Dev Spaces service provides a rapid and iterative development experience
    for teams using AKS clusters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 13: Securing Kubernetes Clusters and Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes itself does not provide a means for managing normal external users
    who access the cluster. This should be delegated to an external authentication
    provider that can integrate with Kubernetes, for example, via Authenticating Proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To reduce the attack vector, the recommended practice is to never expose Kubernetes
    Dashboard using a LoadBalancer service and always use a kubectl proxy for accessing
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will provide an extra layer of security for your API resources and Secrets,
    which otherwise would be kept in etcd in unencrypted form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, this feature is supported only in Linux containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NetworkPolicy objects define how groups of Pods can communicate with each other
    and network endpoints in general—think of them as a basic firewall for enforcing
    network segmentation at Layer 3 of the OSI model. To use network policies, you
    need to use one of the network providers that support network policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, Kubernetes Secrets that are mounted to Pods as volumes are written
    in cleartext on node disk storage (not RAM). The reason for this is that Windows
    currently does not support mounting an in-memory filesystem to Pod containers.
    This may pose security risks and entails additional actions to secure the cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have root privileges, you can enumerate all environment variables for
    a process from `/proc/<pid>/environ`, including Secrets injected in that way.
    For Secrets mounted as volumes, it is not possible as you use `tmpfs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 14: Monitoring Kubernetes Applications Using Prometheus'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Providing observability for your components means exposing information about
    their inner state so that you can access the data easily and reason about the
    actual state of your components. In other words, if something is observable, you
    can understand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WMI Exporter can be used to monitor a Windows node host OS and hardware. For
    monitoring the Docker Engine itself, you can use the experimental metrics server
    exposed by the Engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In production environments running at a large scale, you can use Prometheus
    Operator to easily deploy and manage multiple Prometheus clusters for different
    needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WMI Exporter and the Docker Engine metrics server are exposing the metrics on
    dedicated ports on each node. We need two extra scraping jobs that handle them
    individually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Telegraf service hosted directly in your container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Providing additional instrumentation and insights into business logic for your
    applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your Service Object manifest, define an additional annotation, for example, `prometheus.io/secondary-port`.
    After that, you have to create a dedicated scraping job, which will consume the
    new annotation, in a similar way to `prometheus.io/port`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heatmaps are the most effective way of visualizing histogram changes over time
    and recently Grafana was extended with native support for heatmaps for Prometheus
    histogram metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 15: Disaster Recovery'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main difference between DR and BC is that DR focuses on getting the infrastructure
    up and running following an outage, whereas BC covers keeping the business scenarios
    running during a major incident.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `etcd` cluster is used by the master and persistent volumes are used by
    Pods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A snapshot is a backup file provided by the v3 API of etcd.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Velero can perform `etcd` snapshots, manage them in external storage, and restore
    if needed. Additionally, it can be used for performing backups of persistent volumes
    using Restic integration. Etcd-operator is used for provisioning of multiple `etcd`
    clusters on top of Kubernetes. You can easily manage the `etcd` clusters and perform
    backup-restore operations. Use this approach if you plan to manage multiple Kubernetes
    clusters in your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access all Kubernetes master nodes and, on all machines, perform the same steps
    in parallel: download the target snapshot file, restore it to a local directory,
    stop Kubernetes master components, stop the `etcd` service, stop the kubelet service,
    swap the `etcd` data directory, start the `etcd` service, and finally start the
    kubelet service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Kubernetes CronJob gives you the ability to schedule Kubernetes Jobs at a
    fixed schedule, similar to cron in Linux systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the failed member from the cluster, add a new replacement member, and
    if there is more than one failed member, replace the members sequentially.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 16: Production Considerations for Running Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In immutable infrastructure, you additionally do not perform any modifications
    to the configuration of machines once they are provisioned. If you need a configuration
    change or a hotfix, you need to build a new machine image and provision new machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes can be seen as a platform for managing your immutable container infrastructure
    for your application workloads—whenever you create a new Docker image and roll
    out a new version of deployment, you are just creating new containers and throwing
    away the old ones. If you use a declarative approach for managing your Kubernetes
    Objects, you end up with neat Infrastructure-as-Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitOps is a way of managing the Kubernetes cluster and your applications, proposed
    by WeaveWorks, where the Git repository is the single source of truth for the
    declarative infrastructure and your application workloads. This approach fully
    complies with the Infrastructure-as-Code paradigm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flux can be used for easily implementing GitOps for your Kubernetes clusters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upgrade the components running on the primary master node, upgrade the components
    running on the additional master nodes, and upgrade the worker nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cordon (mark the node as unschedulable) the node and drain the existing Pods,
    then apply the required updates and reboot the machine, and uncordon the node
    to make it schedulable again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
