- en: Appendix A. Defining PSR-7 Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this appendix, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing PSR-7 value object classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a PSR-7 Request class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a PSR-7 Response class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PHP Standard Recommendation number 7** (**PSR-7**) defines a number of interfaces,
    but does not provide actual implementations. Accordingly, we need to define concrete
    code implementations in order to start creating custom middleware.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing PSR-7 value object classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to work with PSR-7 requests and responses, we first need to define
    a series of value objects. These are classes that represent logical objects used
    in web-based activities such as URIs, file uploads, and streaming request or response
    bodies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code for the PSR-7 interfaces is available as a `Composer` package.
    It is considered a best practice to use `Composer` to manage external software,
    including PSR-7 interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, go to the following URL to obtain the latest versions of the
    PSR-7 interface definitions: [https://github.com/php-fig/http-message](https://github.com/php-fig/http-message).
    The source code is also available. At the time of writing, the following definitions
    are available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Interface | Extends | Notes | What the methods handle |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `MessageInterface` |   | Defines methods common to HTTP messages | Headers,
    message body (that is, content), and protocol |'
  prefs: []
  type: TYPE_TB
- en: '| `RequestInterface` | `MessageInterface` | Represents requests generated by
    a client | The URI, HTTP method, and the request target |'
  prefs: []
  type: TYPE_TB
- en: '| `ServerRequestInterface` | `RequestInterface` | Represents a request coming
    to a server from a client | Server and query parameters, cookies, uploaded files,
    and the parsed body |'
  prefs: []
  type: TYPE_TB
- en: '| `ResponseInterface` | `MessageInterface` | Represents a response from the
    server to client | HTTP status code and reason |'
  prefs: []
  type: TYPE_TB
- en: '| `StreamInterface` |   | Represents the data stream | Streaming behavior such
    as seek, tell, read, write, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `UriInterface` |   | Represents the URI | Scheme (that is, HTTP, HTTPS),
    host, port, username, password (that is, for FTP), query parameters, path, and
    fragment |'
  prefs: []
  type: TYPE_TB
- en: '| `UploadedFileInterface` |   | Deals with uploaded files | File size, media
    type, moving the file, and filename |'
  prefs: []
  type: TYPE_TB
- en: 'Unfortunately, we will need to create concrete classes that implement these
    interfaces in order to utilize PSR-7\. Fortunately, the interface classes are
    extensively documented internally through a series of comments. We will start
    with a separate class that contains useful constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we take advantage of a new feature introduced in PHP 7 that allows
    us to define a constant as an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A complete list of HTTP status codes can be found here: [https://tools.ietf.org/html/rfc7231#section-6.1](https://tools.ietf.org/html/rfc7231#section-6.1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will tackle classes that represent value objects used by other PSR-7
    classes. For a start, here is the class that represents a URI. In the constructor,
    we accept a URI string as an argument, and break it down into its component parts
    using the `parse_url()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**URI** stands for **Uniform Resource Indicator**. This is what you would see
    at the top of your browser when making a request. For more information on what
    comprises a URI, have a look at [http://tools.ietf.org/html/rfc3986](http://tools.ietf.org/html/rfc3986).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the constructor, we define methods to access the component parts
    of the URI. The **scheme** represents a PHP wrapper (that is, HTTP, FTP, and so
    on):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The **authority** represents the username (if present), the host, and optionally
    the port number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**User info** represents the username (if present) and optionally the password.
    An example of when a password is used is when accessing an FTP website such as
    `ftp://username:password@website.com:/path`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Host** is the DNS address included in the URI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Port** is the HTTP port, if present. You will note if a port is listed in
    our `STANDARD_PORTS` constant, the return value is `NULL`, according to the requirements
    of PSR-7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Path** is the part of the URI that follows the DNS address. According to
    PSR-7, this must be encoded. We use the `rawurlencode()` PHP function as it is
    compliant with RFC 3986\. We cannot just encode the entire path, however, as the
    path separator (that is, `/`) would also get encoded! Accordingly, we need to
    first break it up using `explode()`, encode the parts, and then reassemble it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a method to retrieve the `query` string (that is, from `$_GET`).
    These too must be URL-encoded. First, we define `getQueryParams()`, which breaks
    the query string into an associative array. You will note the reset option in
    case we wish to refresh the query parameters. We then define `getQuery()`, which
    takes the array and produces a proper URL-encoded string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we provide a method to return the `fragment` (that is, a `#` in
    the URI), and any part following it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a series of `withXXX()` methods, which match the `getXXX()`
    methods described above. These methods are designed to add, replace, or remove
    properties associated with the request class (scheme, authority, user info, and
    so on). In addition, these methods return the current instance that allows us
    to use these methods in a series of successive calls (often referred to as the
    **fluent interface**). We start with `withScheme()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will note that an empty argument, according to PSR-7, signals the removal
    of that property. You will also note that we do not allow a scheme that does not
    match what is defined in our `Constants::STANDARD_PORTS` array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We then apply similar logic to methods that overwrite, add, or replace the
    user info, host, port, path, query, and fragment. Note that the `withQuery()`
    method resets the query parameters array. `withHost()`, `withPort()`, `withPath()`,
    and `withFragment()` use the same logic, but are not shown to conserve space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap up the `Application\MiddleWare\Uri` class with `__toString()`,
    which, when the object is used in a string context, returns a proper URI, assembled
    from `$uriParts`. We also define a convenience method, `getUriString()`, that
    simply calls `__toString()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `authority` URI part is present, we add it. `authority` includes the
    user information, host, and port. Otherwise, we just append `host` and `port`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Before adding `path`, we first check whether the first character is `/`. If
    not, we need to add this separator. We then add `query` and `fragment`, if present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the use of string dereferencing (that is, `$path[0]`), now part of PHP
    7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we turn our attention to a class that represents the body of the message.
    As it is not known how large the body might be, PSR-7 recommends that the body
    should be treated as a **stream**. A stream is a resource that allows access to
    input and output sources in a linear fashion. In PHP, all file commands operate
    on top of the `Streams` sub-system, so this is a natural fit. PSR-7 formalizes
    this by way of `Psr\Http\Message\StreamInterface` that defines such methods as
    `read()`, `write()`, `seek()`, and so on. We now present `Application\MiddleWare\Stream`
    that we can use to represent the body of incoming or outgoing requests and/or
    responses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, we open the stream using a simple `fopen()` command. We
    then use `stream_get_meta_data()` to get information on the stream. For other
    details, we create an `SplFileInfo` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason why we chose `fopen()` over the more modern `SplFileObject` is that
    the latter does not allow direct access to the inner file resource object, and
    is therefore useless for this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We include two convenience methods that provide access to the resource, as
    well as access to the `SplFileInfo` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define low-level core streaming methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to define informational methods that tell us about the stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Following PSR-7 guidelines, we then define `getContents()` and `__toString()`
    in order to dump the contents of the stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'An important variation of the `Stream` class shown previously is `TextStream`
    that is designed for situations where the body is a string (that is, an array
    encoded as JSON) rather than a file. As we need to make absolutely certain that
    the incoming `$input` value is of the string data type, we invoke PHP 7 strict
    types just after the opening tag. We also identify a `$pos` property (that is,
    position) that will emulate a file pointer, but instead point to a position within
    the string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the methods are quite simple and self-explanatory. The `$stream` property
    is the input string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To emulate streaming behavior, `tell()`, `eof()`, `seek()`, and so on, work
    with `$pos`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `read()` and `write()` methods work with `$pos` and substrings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The last of the value objects to be presented is `Application\MiddleWare\UploadedFile`.
    As with the other classes, we first define properties that represent aspects of
    a file upload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, we allow the definition of the name attribute of the file
    upload form field, as well as the corresponding array in `$_FILES`. We add the
    last parameter to signal whether or not we want the class to generate a new random
    filename once the uploaded file is confirmed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create a `Stream` class instance for the temporary or moved file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `moveTo()` method performs the actual file movement. Note the extensive
    series of safety checks to help prevent an injection attack. If randomize is not
    enabled, we use the original user-supplied filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We then provide access to the other parameters returned in `$_FILES` from the
    `$info` property. Please note that the return values from `getClientFilename()`
    and `getClientMediaType()` should be considered untrusted, as they originate from
    the outside. We also add a method to return the moved filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, go to [https://github.com/php-fig/http-message/tree/master/src](https://github.com/php-fig/http-message/tree/master/src),
    the GitHub repository for the PSR-7 interfaces, and download them. Create a directory
    called `Psr/Http/Message` in `/path/to/source` and places the files there. Alternatively,
    you can visit [https://packagist.org/packages/psr/http-message](https://packagist.org/packages/psr/http-message)
    and install the source code using `Composer`. (For instructions on how to obtain
    and use `Composer`, you can visit [https://getcomposer.org/](https://getcomposer.org/).)
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go ahead and define the classes discussed previously, summarized in this
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Steps discussed in |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\Constants` | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\Uri` | 3 to 16 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\Stream` | 17 to 22 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\TextStream` | 23 to 26 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\UploadedFile` | 27 to 31 |'
  prefs: []
  type: TYPE_TB
- en: 'Next, define a `chap_09_middleware_value_objects_uri.php` calling program that
    implements autoloading and uses the appropriate classes. Please note that if you
    use `Composer`, unless otherwise instructed, it will create a folder called `vendor`.
    `Composer` also adds its own autoloader, which you are free to use here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then create a `Uri` instance and use the `with` methods to add parameters.
    You can then echo the `Uri` instance directly as `__toString()` is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, create a directory called `uploads` from `/path/to/source/for/this/chapter`.
    Go ahead and define another calling program, `chap_09_middleware_value_objects_file_upload.php`,
    that sets up autoloading and uses the appropriate classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside a `try...catch` block, check to see whether any files were uploaded.
    If so, loop through `$_FILES` and create `UploadedFile` instances where `tmp_name`
    is set. You can then use the `moveTo()` method to move the files to `TARGET_DIR`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the view logic, display a simple file upload form. You could also use `phpinfo(`)
    to display information about what was uploaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, if there were any uploaded files, you can display information on each
    one. You can also use `getStream()` followed by `getContents()` to display each
    file (assuming you''re using short text files):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the output might appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on PSR, please have a look at [https://en.wikipedia.org/wiki/PHP_Standard_Recommendation](https://en.wikipedia.org/wiki/PHP_Standard_Recommendation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For information on PSR-7 specifically, here is the official description: [http://www.php-fig.org/psr/psr-7/](http://www.php-fig.org/psr/psr-7/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For information on PHP streams, take a look at [http://php.net/manual/en/book.stream.php](http://php.net/manual/en/book.stream.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a PSR-7 Request class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key characteristics of PSR-7 middleware is the use of **Request**
    and **Response** classes. When applied, this enables different blocks of software
    to perform together without sharing any specific knowledge between them. In this
    context, a request class should encompass all aspects of the original user request,
    including such items as browser settings, the original URL requested, parameters
    passed, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, be sure to define classes to represent the `Uri`, `Stream`, and `UploadedFile`
    value objects, as described in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we are ready to define the core `Application\MiddleWare\Message` class.
    This class consumes `Stream` and `Uri` and implements `Psr\Http\Message\MessageInterface`.
    We first define properties for the key value objects, including those representing
    the message body (that is, a `StreamInterface` instance), version, and HTTP headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have the `getBody()` method that represents a `StreamInterface` instance.
    A companion method, `withBody()`, returns the current `Message` instance and allows
    us to overwrite the current value of `body`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'PSR-7 recommends that headers should be viewed as case-insensitive. Accordingly,
    we define a `findHeader()` method (not directly defined by `MessageInterface`)
    that locates a header using `stripos()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The next method, not defined by PSR-7, is designed to populate the `$httpHeaders`
    property. This property is assumed to be an associative array where the key is
    the header, and the value is the string representing the header value. If there
    is more than one value, additional values separated by commas are appended to
    the string. There is an excellent `apache_request_headers()` PHP function from
    the Apache extension that produces headers if they are not already available in
    `$httpHeaders`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If `apache_request_headers()` is not available (that is, the Apache extension
    is not enabled), we provide an alternative, `altApacheReqHeaders()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Implementing `getHeaders()` (required in PSR-7) is now a trivial loop through
    the `$httpHeaders` property produced by the `getHttpHeaders()` method discussed
    in step 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we provide a series of `with` methods designed to overwrite or replace
    headers. Since there can be many headers, we also have a method that adds to the
    existing set of headers. The `withoutHeader()` method is used to remove a header
    instance. Notice the consistent use of `findHeader()`, mentioned in the previous
    step, to allow for case-insensitive handling of headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We then provide a series of useful header-related methods to confirm a header
    exists, retrieve a single header line, and retrieve a header in array form, as
    per PSR-7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to round off header handling, we present `getHeadersAsString` that
    produces a single header string with the headers separated by `\r\n` for direct
    use with PHP stream contexts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Still within the `Message` class, we now turn our attention to version handling.
    According to PSR-7, the return value for the protocol version (that is, HTTP/1.1)
    should only be the numerical part. For this reason, we also provide `onlyVersion()`
    that strips off any non-digit character, allowing periods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, almost as an anticlimax, we are ready to define our `Request` class.
    It must be noted here, however, that we need to consider both out-bound as well
    as in-bound requests. That is to say, we need a class to represent an outgoing
    request a client will make to a server, as well as a request *received* from a
    client by a server. Accordingly, we provide `Application\MiddleWare\Request` (requests
    a client will make to a server), and `Application\MiddleWare\ServerRequest` (requests
    received from a client by a server). The good news is that most of our work has
    already been done: notice that our `Request` class extends `Message`. We also
    provide properties to represent the URI and HTTP method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'All properties in the constructor default to `NULL`, but we leave open the
    possibility of defining the appropriate arguments right away. We use the inherited
    `onlyVersion()` method to sanitize the version. We also define `checkMethod()`
    to make sure any method supplied is on our list of supported HTTP methods, defined
    as a constant array in `Constants`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to interpret the request target as the originally requested URI
    in the form of a string. Bear in mind that our `Uri` class has methods that will
    parse this into its component parts, hence our provision of the `$uriObj` property.
    In the case of `withRequestTarget()`, notice that we run `getUri()` that performs
    the aforementioned parsing process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `get` and `with` methods, which represent the HTTP method, reveal no surprises.
    We use `checkMethod()`, used in the constructor as well, to ensure the method
    matches those we plan to support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have a `get` and `with` method for the URI. As mentioned in step
    14, we retain the original request string in the `$uri` property and the newly
    parsed `Uri` instance in `$uriObj`. Note the extra flag to preserve any existing
    `Host` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ServerRequest` class extends `Request` and provides additional functionality
    to retrieve information of interest to a server handling an incoming request.
    We start by defining properties that will represent incoming data read from the
    various PHP `$_ super-globals` (that is, `$_SERVER`, `$_POST`, and so on):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define a series of getters to pull super-global information. We do
    not show everything, to conserve space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'As uploaded files are supposed to be represented as independent `UploadedFile`
    objects (presented in the previous recipe), we also define a method that takes
    `$uploadedFileInfo` and creates `UploadedFile` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the other classes defined previously, we provide `with` methods that
    add or overwrite properties and return the new instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'One important aspect of PSR-7 messages is that the body should also be available
    in a parsed manner, that is to say, a sort of structured representation rather
    than just a raw stream. Accordingly, we define `getParsedBody()` and its accompanying
    `with` method. The PSR-7 recommendations are quite specific when it comes to form
    posting. Note the series of `if` statements that check the `Content-Type` header
    as well as the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We also allow for attributes that are not precisely defined in PSR-7\. Rather,
    we leave this open so that the developer can provide whatever is appropriate for
    the application. Notice the use of `withoutAttributes()` that allows you to remove
    attributes at will:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in order to load the different properties from an in-bound request,
    we define `initialize()`, which is not in PSR-7, but is extremely convenient:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, be sure to complete the preceding recipe, as the `Message` and `Request`
    classes consume `Uri`, `Stream`, and `UploadedFile` value objects. After that,
    go ahead and define the classes summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Steps they are discussed in |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\Message` | 2 to 9 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\Request` | 10 to 14 |'
  prefs: []
  type: TYPE_TB
- en: '| `Application\MiddleWare\ServerRequest` | 15 to 20 |'
  prefs: []
  type: TYPE_TB
- en: 'After that, you can define a server program, `chap_09_middleware_server.php`,
    which sets up autoloading and uses the appropriate classes. This script will pull
    the incoming request into a `ServerRequest` instance, initialize it, and then
    use `var_dump()` to show what information was received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server program, first change to the `/path/to/source/for/this/chapter
    folder`. You can then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the client, first create a calling program, `chap_09_middleware_request.php`,
    that sets up autoloading, uses the appropriate classes, and defines the target
    server and a local text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can create a `Stream` instance using the text as a source. This will
    become the body of a new Request, which, in this case, mirrors what might be expected
    for a form posting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then directly build a `Request` instance, supplying parameters as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the fluent interface syntax to produce exactly the
    same results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then set up a cURL resource to simulate a form posting, where the data
    parameter is the contents of the text file. You can follow that with `curl_init()`,
    `curl_exec()`, and so on, echoing the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the direct output might appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An excellent article that shows example usage written by *Matthew Weir O''Phinney*,
    the editor of PSR-7 (also the lead architect for Zend Framework 1, 2, and 3),
    is available here: [https://mwop.net/blog/2015-01-26-psr-7-by-example.html](https://mwop.net/blog/2015-01-26-psr-7-by-example.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a PSR-7 Response class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Response class represents outbound information returned to whatever entity
    made the original request. HTTP headers play an important role in this context
    as we need to know that format is requested by the client, usually in the incoming
    `Accept` header. We then need to set the appropriate `Content-Type` header in
    the Response class to match that format. Otherwise, the actual body of the response
    will be HTML, JSON, or whatever else has been requested (and delivered).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Response` class is actually much easier to implement than the `Request`
    class as we are only concerned with returning the response from the server to
    the client. Additionally, it extends our `Application\MiddleWare\Message` class
    where most of the work has been done. So, all that remains to be done is to define
    an `Application\MiddleWare\Response` class. As you will note, the only unique
    property is `$statusCode`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor is not defined by PSR-7, but we provide it for convenience,
    allowing a developer to create a `Response` instance with all parts intact. We
    use methods from `Message` and constants from the `Constants` class to verify
    the arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We provide a nice way to set the HTTP status code, irrespective of any headers,
    using `http_response_code()`, available from PHP 5.4 onwards. As this work is
    on PHP 7, we are safe in the knowledge that this method exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, it is of interest to obtain the status code using the following
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the other PSR-7-based classes discussed in earlier recipes, we also
    define a `with` method that sets the status code and returns the current instance.
    Note the use of `STATUS_CODES` to confirm its existence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define a method that returns the reason for the HTTP status, which
    is a short text phrase, in this example, based on RFC 7231\. Note the use of the
    PHP 7 null coalesce operator `??` that returns the first non-null item out of
    three possible choices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, be sure to define the classes discussed in the previous two recipes.
    After that, you can create another simple server program, `chap_09_middleware_server_with_response.php`,
    which sets up autoloading and uses the appropriate classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then define an array with key/value pairs, where the value points to
    a text file in the current directory to be used as content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside a `try...catch` block, you can initialize some variables, initialize
    the server request, and set up a temporary filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, check to see whether the method is GET or POST. If it''s GET, check
    to see whether an `id` parameter was passed. If so, return the body of the matching
    text file. Otherwise, return a list of text files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, return a response indicating a success code 204 and the size of
    the request body received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then catch any exceptions and report them with a status code of 500:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The response needs to be wrapped in a stream, so you can write the body out
    to the temp file and create it as `Stream`. You can also set the `Content-Type`
    header to `application/json` and run `getHeaders()`, which outputs the current
    set of headers. After that, echo the body of the response. For this illustration,
    you could also dump the `Response` instance to confirm it was constructed correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'To wrap things up, catch any errors or exceptions using `Throwable`, and don''t
    forget to delete the temp file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, it''s just a matter of opening a terminal window, changing to the
    `/path/to/source/for/this/chapter` directory, and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'From a browser, you can then call this program, adding an `id` parameter. You
    might consider opening the developer tools to monitor the response header. Here
    is an example of the expected output. Note the content type of `application/json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on PSR, please visit [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following table summarizes the state of PSR-7 compliance at the time of
    writing. The frameworks not included in this table either do not have PSR-7 support
    at all, or lack documentation for PSR-7.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Framework | Website | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Slim | [http://www.slimframework.com/docs/concepts/value-objects.html](http://www.slimframework.com/docs/concepts/value-objects.html)
    | High PSR-7 compliance |'
  prefs: []
  type: TYPE_TB
- en: '| Laravel/Lumen | [https://lumen.laravel.com/docs/5.2/requests](https://lumen.laravel.com/docs/5.2/requests)
    | High PSR-7 compliance |'
  prefs: []
  type: TYPE_TB
- en: '| Zend Framework 3/Expressive | [https://framework.zend.com/blog/2016-06-28-zend-framework-3.html](https://framework.zend.com/blog/2016-06-28-zend-framework-3.html)
    or [https://zendframework.github.io/zend-expressive/](https://zendframework.github.io/zend-expressive/)
    respectively | High PSR-7 complianceAlso Diactoros, and Straigility |'
  prefs: []
  type: TYPE_TB
- en: '| Zend Framework 2 | [https://github.com/zendframework/zend-psr7bridge](https://github.com/zendframework/zend-psr7bridge)
    | PSR-7 bridge available |'
  prefs: []
  type: TYPE_TB
- en: '| Symfony | [http://symfony.com/doc/current/cookbook/psr7.html](http://symfony.com/doc/current/cookbook/psr7.html)
    | PSR-7 bridge available |'
  prefs: []
  type: TYPE_TB
- en: '| Joomla | [https://www.joomla.org](https://www.joomla.org) | Limited PSR-7
    support |'
  prefs: []
  type: TYPE_TB
- en: '| Cake PHP | [http://mark-story.com/posts/view/psr7-bridge-for-cakephp](http://mark-story.com/posts/view/psr7-bridge-for-cakephp)
    | PSR-7 support is in the roadmap and will use the bridge approach |'
  prefs: []
  type: TYPE_TB
- en: 'There are a number of PSR-7 middleware classes already available. The following
    table summarizes some of the more popular ones:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Middleware | Website | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Guzzle | [https://github.com/guzzle/psr7](https://github.com/guzzle/psr7)
    | HTTP message library |'
  prefs: []
  type: TYPE_TB
- en: '| Relay | [http://relayphp.com/](http://relayphp.com/) | Dispatcher |'
  prefs: []
  type: TYPE_TB
- en: '| Radar | [https://github.com/radarphp/Radar.Project](https://github.com/radarphp/Radar.Project)
    | Action/domain/responder skeleton |'
  prefs: []
  type: TYPE_TB
- en: '| NegotiationMiddleware | [https://github.com/rszrama/negotiation-middleware](https://github.com/rszrama/negotiation-middleware)
    | Content negotiation |'
  prefs: []
  type: TYPE_TB
- en: '| psr7-csrf-middleware | [https://packagist.org/packages/schnittstabil/psr7-csrf-middleware](https://packagist.org/packages/schnittstabil/psr7-csrf-middleware)
    | Cross Site Request Forgery prevention |'
  prefs: []
  type: TYPE_TB
- en: '| oauth2-server | [http://alexbilbie.com/2016/04/league-oauth2-server-version-5-is-out](http://alexbilbie.com/2016/04/league-oauth2-server-version-5-is-out)
    | OAuth2 server which supports PSR-7 |'
  prefs: []
  type: TYPE_TB
- en: '| zend-diactoros | [https://zendframework.github.io/zend-diactoros/](https://zendframework.github.io/zend-diactoros/)
    | PSR-7 HTTP message implementation |'
  prefs: []
  type: TYPE_TB
