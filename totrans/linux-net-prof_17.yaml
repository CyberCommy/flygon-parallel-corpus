- en: '*Chapter 14*: Honeypot Services on Linux'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be discussing honeypots – fake services that you can
    deploy to collect attacker activity with a false positive rate of just about zero.
    We'll discuss various architectures and placement options, as well as the risks
    of deploying honeypots. A few different honeypot architectures will be discussed
    as well. This chapter should start you on the path of implementing various "deception"
    approaches on the network to distract and delay your attackers and provide very
    high-fidelity logs of attacker activity with almost no false positives.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot overview – what is a honeypot, and why do I want one?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment scenarios and architecture – where do I put a honeypot?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risks of deploying honeypots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example honeypots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed/community honeypot – the Internet Storm Center's DShield Honeypot
    Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the honeypot options discussed in this chapter can be deployed directly
    on the example Linux host that we've been using throughout this book, or on a
    copy of that host VM. The final example honeypot from the Internet Storm Center
    might be one that you choose to put on a different, dedicated host. In particular,
    if you plan to put this service on the internet, I'd suggest a dedicated host
    that you can delete at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot overview – what is a honeypot, and why do I want one?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A honeypot server is essentially a fake server – something that presents itself
    as a *real* server of one type or another, but has no data or function behind
    it, other than logging and alerting on any connection activity.
  prefs: []
  type: TYPE_NORMAL
- en: Why would you want something like this? Remember in [*Chapter 13*](B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236),
    *Intrusion Prevention Systems on Linux*, when we were dealing with false positive
    alerts? These are alerts that report an attack but are actually triggered by normal
    activity. Well, honeypots generally only send what you could call "high fidelity"
    alerts. If a honeypot triggers, it's either because of real attacker behavior,
    or misconfiguration.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you might have a honeypot SQL server up in your server's VLAN.
    This server would be listening on port `1433/tcp` (SQL) and possibly also on `3389/tcp`
    (Remote Desktop). Since it's not an actual SQL server, it should never (ever)
    see a connection on either port. If it does see a connection, either it's someone
    poking around on the network where they likely shouldn't be, or it's a valid attack.
    FYI – a penetration test will almost always trigger honeypots very soon in the
    project, as they scan various subnets for common services.
  prefs: []
  type: TYPE_NORMAL
- en: 'That being said, in many attacks, you only have a short window to isolate and
    evict your attacker before irreparable harm is done. Can a honeypot help with
    that? The short answer is yes, absolutely. Honeypots take several forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_14_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These scenarios typically apply to internal honeypots, and attackers that are
    already on your network. The attacker in these situations has compromised one
    or more hosts on your network and is trying to move "up the food chain" to more
    valuable hosts and services (and data). In these situations, you have some level
    of control of the attacker's platform – if it's a compromised host you can take
    it offline and rebuild it, or if it's the attacker's physical host (after a wireless
    network compromise, for instance), you can kick them off your network and remediate
    their access method.
  prefs: []
  type: TYPE_NORMAL
- en: Another scenario entirely is for research. For instance, you might put a honeypot
    web server on the public internet to monitor the trends in various attacks. These
    trends are often the first indicator to the security community that a new vulnerability
    exists – we'll see attackers trying to take advantage of a web service vulnerability
    on a particular platform, something we haven't seen "in the wild" before. Or you
    might see attacks against authentication services for web or SSH servers using
    new accounts, which might indicate a new strain of malware or possibly that some
    new service has experienced a breach involving their subscribers' credentials.
    So, in this case, we're not protecting our network but monitoring for new hostile
    activity that can be used to protect everyone's network.
  prefs: []
  type: TYPE_NORMAL
- en: Honeypots don't stop with network services. It's becoming more common to see
    data and credentials being used in the same way. For instance, you might have
    files with "attractive" names that trigger an alert when they are opened – this
    might indicate that you have an internal attacker (be sure to log the IP address
    and userid of course). Or you may have "dummy" accounts in the system that trigger
    if access to them is attempted – these might again be used to find out when an
    attacker is inside the environment. Or you might "watermark" key data, so that
    if it is ever seen outside of your environment, you would know that your organization
    had been breached. All of these take advantage of the same mindset – having a
    set of high fidelity alerts that trigger when an attacker accesses an attractive
    server, account, or even an attractive file.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know what a honeypot server is and why you might want one, let's
    explore a bit further to see where in your network you might choose to put one.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment scenarios and architecture – where do I put a honeypot?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great use of honeypots on an internal network is to simply monitor for connection
    requests to ports that are commonly attacked. In a typical organization's internal
    network, there is a short list of ports that an attacker might scan for in their
    first "let's explore the network" set of scans. If you see a connection request
    to any of these on a server that isn't legitimately hosting that service, that's
    a very high fidelity alert! This pretty positively indicates malicious activity!
  prefs: []
  type: TYPE_NORMAL
- en: 'What ports might you watch for? A reasonable start list might include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_14_Table_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The list of course goes on and on – it's very common to tailor your honeypot
    services to reflect the actual services running in your environment. For instance,
    a manufacturing facility or public utility might stand up honeypots masquerading
    as **Supervisory Control and Data Acquisition** (**SCADA**) or **Industrial Control
    System** (**ICS**) services.
  prefs: []
  type: TYPE_NORMAL
- en: From our list, if you were trying to emulate a SQL server to your attacker,
    you might have your honeypot listening on TCP ports `445` and `1433`. What you
    don't want to do is to listen on too many ports. If you have a server listening
    on all of the ports in the preceding table for instance, that immediately telegraphs
    to your attacker that "this is a honeypot," since those ports would almost never
    occur on a single production host. It also tells your attacker to modify their
    attack, since now they know you have honeypots, and presumably that you are monitoring
    honeypot activity.
  prefs: []
  type: TYPE_NORMAL
- en: So, where should we put honeypots? In days past, having a honeypot server was
    more of a "sport" for system administrators with an interest in security, and
    they would put SSH honeypots on the internet just to see what people would do.
    Those days are gone now, and anything placed directly on the internet will see
    several attacks per day – or per hour or per minute, depending on what kind of
    organization they are and what services are being presented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where do we see honeypots in a modern network? You might put one in a DMZ:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Honeypots in a DMZ](img/B16336_14_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Honeypots in a DMZ
  prefs: []
  type: TYPE_NORMAL
- en: 'This however simply detects internet attacks, which is of limited usefulness
    – attacks from the internet are pretty much continuous, as we discussed in [*Chapter
    13*](B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236), *Intrusion Prevention Systems
    on Linux*. More commonly, we''ll see honeypots on internal subnets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Honeypots on the internal network](img/B16336_14_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Honeypots on the internal network
  prefs: []
  type: TYPE_NORMAL
- en: This approach is a great way to detect internal attacks with almost 100% fidelity.
    Any internal scans that you do on an ad hoc or scheduled basis will of course
    get detected, but aside from those, all detections from these honeypots should
    be legitimate attacks, or at least activity worth investigating.
  prefs: []
  type: TYPE_NORMAL
- en: Research honeypots on the public internet allow the collection of trends in
    various attacks. In addition, these will usually also allow you to compare your
    profile of attacks against the consolidated attack data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – "Research" honeypots on the public internet](img/B16336_14_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – "Research" honeypots on the public internet
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an idea the various architectures involved in deploying several
    types of honeypots, and why we might want or need one, what are the risks involved
    in deploying "deception hosts" of these types?
  prefs: []
  type: TYPE_NORMAL
- en: Risks of deploying honeypots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s common sense that since honeypots are there to detect attackers, it is
    certainly possible to see them be successfully attacked and compromised. In particular,
    the last example where you are exposing services to the internet is a fairly risky
    game. If an attacker should compromise your honeypot, not only do they have a
    foothold in your network, but they now have control over the alerts being sent
    by that honeypot, which you likely depend on to detect attacks. That being said,
    it''s wise to always plan for a compromise, and have mitigations at the ready:'
  prefs: []
  type: TYPE_NORMAL
- en: If your honeypot faces the public internet, place it in a DMZ such that there
    is no access from that segment to any of your other production hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your honeypot is in your internal network, you might still want to place
    it in a DMZ with NAT entries to make it appear to be in the internal network.
    Alternatively, a **private VLAN** (**PVLAN**) can work well for this placement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only allow the outbound activity that you desire to see from the honeypot service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image your honeypot so that if you need to recover it from scratch you are doing
    so from a known good image, rather than re-installing Linux and so on from scratch.
    Taking advantage of virtualization can be a big help here – recovering a honeypot
    server should take only minutes or seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log all honeypot activity to a central location. This is a given, as over time
    you will find that you will likely end up with several of these deployed in various
    situations. Central logging allows you to configure central alerting, all off
    of the hosts that your attacker may end up compromising. Refer to [*Chapter 12*](B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216),
    *Network Monitoring Using Linux*, for approaches for central logging, and securing
    those log servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate your honeypot images regularly – other than local logs, there shouldn't
    be any long-term data of note in the honeypot itself, so if you have good host
    recovery mechanisms, it's smart to automate a re-image of your honeypots at regular
    intervals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the architecture and this warning in mind, let's discuss some common honeypot
    types, starting with a basic port alerting approach.
  prefs: []
  type: TYPE_NORMAL
- en: Example honeypots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll discuss building and deploying various honeypot solutions.
    We''ll cover how to build them, where you might want to place them, and why. We''ll
    focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic "TCP port" honeypots, where we alert on attacker port scans and attempted
    connections to our various services. We'll discuss these both as alerts with no
    open ports (so the attacker doesn't know they tripped an alarm), and as actual
    open-port services that will slow your attacker down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-built honeypot applications, both open source and commercial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Internet Storm Center's DShield Honeypot, which is both distributed and
    internet-based.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get to it, starting with a few different approaches to standing up "open
    port" honeypot hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Basic port alerting honeypots – iptables, netcat, and portspoof
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basic port connection requests are easy to catch in Linux, you don't even need
    a listening port! So not only are you going to catch malicious hosts on your internal
    network, but they don't see any open ports at all, so have no indication that
    you have them "on film."
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we''ll use `iptables` to watch for connection requests on any given
    port, then log them when they occur. This command will monitor for connection
    requests (`SYN` packet) to port `8888/tcp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can easily test this with `nmap` (from a remote machine) – note that the
    port is in fact closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Referring to [*Chapter 12*](B16336_12_Final_NM_ePub.xhtml#_idTextAnchor216),
    *Network Monitoring Using Linux*, from here it's easy to log to a remote syslog
    server and alert on any occurrence of the word `HONEYPOT`. We can extend this
    model to include any number of interesting ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want the port open and alerting, you can do that with `netcat` – you
    could even "fancy it up" by adding banners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we''re listening on arbitrary ports, you''ll want to run this script
    with root privileges. Also note that if you want a specific banner (for instance,
    RDP for port `3389/tcp` or ICA for `1494/tcp`), you''d create those banner files
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The log file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A better approach would be to use an actual package that someone maintains,
    something that will listen on multiple ports. You can code something up quick
    in Python that listens on specific ports, then logs an alert for every connection.
    Or you can take advantage of the good work of other people who've already done
    this, and also done the debugging so you don't have to!
  prefs: []
  type: TYPE_NORMAL
- en: Portspoof is one such app – you can find this at [https://github.com/drk1wi/portspoof](https://github.com/drk1wi/portspoof).
  prefs: []
  type: TYPE_NORMAL
- en: 'Portspoof uses an "old-school" Linux install; that is, change your directory
    to the `portspoof` download directory, then execute following commands in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This installs Portspoof into `/usr/local/bin`, with the configuration files
    in `/usr/local/etc`.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at `/usr/local/etc/portspoof.conf` using `more` or `less` – you'll
    find that it's well commented and easy to modify to match your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this tool is ready to use immediately after installation. Let''s
    first redirect all the ports we want to listen on using `iptables`, and point
    them to port `4444/tcp`, which is the default port for `portspoof`. Note that
    you''ll need `sudo` rights to make this `iptables` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, simply run `portspoof`, using the default signatures and configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll scan a few redirected ports, a few that are redirected and a few
    that aren''t – note that we''re collecting the service "banners" using `banner.nse`,
    and `portspoof` has some banners preconfigured for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Back on the `portspoof` screen, we''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also grab the `portspoof` entries out of syslog. The information is
    the same, but the timestamp is formatted in ASCII instead of "seconds since the
    start of the epoch":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if it''s time to tear down `portspoof`, you''ll want to remove those
    NAT entries we put in, putting your Linux host back to its original handling of
    those ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: But what if we want something more complex? We can certainly make our home-built
    honeypot more and more complex and realistic to an attacker, or we can purchase
    a more complete offering, with full reporting and support offerings.
  prefs: []
  type: TYPE_NORMAL
- en: Other common honeypots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the public side of things, you can use **Cowrie** ([https://github.com/cowrie/cowrie](https://github.com/cowrie/cowrie)),
    which is an SSH honeypot maintained by *Michel Oosterhof*. This can be configured
    to behave like a real host – the object of the game of course is to waste the
    time of the attacker to give you time to evict them from your network. Along the
    way, you can get some gauge of their skill level, and also often get an indication
    of what they're actually trying to accomplish in their attack.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebLabyrinth** ([https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth))
    by *Ben Jackson* presents a never-ending series of web pages to act as a "tarpit"
    for web scanners. Again, the goals are the same – waste the time of the attacker,
    and gain as much intelligence about them as possible during the attack.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thinkst Canary** ([https://canary.tools/](https://canary.tools/) and [https://thinkst.com/](https://thinkst.com/))
    is a commercial solution and is extremely thorough in the detail and completeness
    it offers. In fact, the level of detail in this product allows you to stand up
    an entire "decoy data center" or "decoy factory." Not only does it allow you to
    fool the attacker, often the deception is to the level that they think they are
    actually progressing through a production environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move out of the internal network and the associated internal and DMZ honeypots
    and look at the research-oriented honeypots.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed/community honeypot – the Internet Storm Center's DShield Honeypot
    Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, get the current date and time from your host. Any activity that''s heavily
    dependent on logs needs accurate time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If your date/time is off or isn't configured reliably, you'll want to fix that
    before you start – this is true of almost any service in any operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, change to an installation directory, then download the app using `git`.
    If you don''t have `git`, use the standard `sudo apt-get install git` that we''ve
    used throughout this book to get it. Once `git` is installed, this command will
    create a `dshield` directory under the current working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the `install` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Along the way, there will be several input screens. We''ll cover some of the
    key ones here:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we have the standard warning that honeypot logs will of course contain
    sensitive information, both from your environment and about the attacker:![](img/B16336_14_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.4 – Warning about sensitive information
  prefs: []
  type: TYPE_NORMAL
- en: The next installation screen seems to indicate that this is installing on the
    Raspberry Pi platform. Don't worry, while this is a very common platform for this
    firewall, it will install on most common Linux distributions.![Figure 14.5 – Second
    warning about installation and support](img/B16336_14_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.5 – Second warning about installation and support
  prefs: []
  type: TYPE_NORMAL
- en: Next, we get yet another warning, indicating that your collected data will become
    part of a larger dataset that is the Internet Storm Center's DShield project.
    Your data does get anonymized when it's consolidated into the larger dataset,
    but if your organization isn't prepared to share security data, then this type
    of project might not be right for you:![Figure 14.6 – Third installation warning
    about data sharing](img/B16336_14_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.6 – Third installation warning about data sharing
  prefs: []
  type: TYPE_NORMAL
- en: You'll be asked if you want to enable automatic updates. The default here is
    to enable these – only disable them if you have a really good reason to.![Figure
    14.7 – Installation pick for updates](img/B16336_14_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.7 – Installation pick for updates
  prefs: []
  type: TYPE_NORMAL
- en: You'll be asked for your email address and API key. This is used for the data
    submission process. You can get your API key by logging into the [https://isc.sans.edu](https://isc.sans.edu)
    site and viewing your account status:![Figure 14.8 – Credential inputs for uploading
    data](img/B16336_14_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.8 – Credential inputs for uploading data
  prefs: []
  type: TYPE_NORMAL
- en: You'll also be asked which interface you want the honeypot to listen on. In
    these cases, normally there is only one interface – you definitely don't want
    your honeypot to bypass your firewall controls!![Figure 14.9 – Interface selection](img/B16336_14_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.9 – Interface selection
  prefs: []
  type: TYPE_NORMAL
- en: The certificate information for your HTTPS honeypot gets inputted – if you want
    your sensor to be somewhat anonymous to your attacker, you might choose to put
    bogus information into these fields. In this example, we're showing mostly legitimate
    information. Note that the HTTPS honeypot is not yet implemented at the time of
    this writing, but it is in the planning stages.![Figure 14.10 – Certificate information](img/B16336_14_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.10 – Certificate information
  prefs: []
  type: TYPE_NORMAL
- en: You'll be asked if you want to install a **Certificate Authority** (**CA**).
    In most cases, choosing **Yes** here makes sense – this will install a self-signed
    certificate on the HTTPS service.![Figure 14.11 – Is a CA required?](img/B16336_14_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 14.11 – Is a CA required?
  prefs: []
  type: TYPE_NORMAL
- en: The final screen reboots the host and informs you that your actual SSH service
    will be changing to a different port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Final installation screen](img/B16336_14_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – Final installation screen
  prefs: []
  type: TYPE_NORMAL
- en: 'After the reboot, check the honeypot status. Note that the sensor is installed
    in `/srv/dshield`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Also, to ensure that your reports are being submitted, after an hour or two
    check [https://isc.sans.edu/myreports.html](https://isc.sans.edu/myreports.html)
    (you'll need to log in).
  prefs: []
  type: TYPE_NORMAL
- en: 'The error that shows in the status check is that this host is not on the internet
    yet – that will be our next step. In my case, I''ll be placing it in a DMZ, with
    inbound access only to ports `22/tcp`, `80/tcp`, and `443/tcp`. After making this
    change, our status check now passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When a browser is directed to the honeypot''s address, this is what they''ll
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – ISC web honeypot as seen from a browser](img/B16336_14_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – ISC web honeypot as seen from a browser
  prefs: []
  type: TYPE_NORMAL
- en: 'On the honeypot server itself, you can see the various login sessions as attackers
    gain access to the fake SSH and Telnet servers. At `/srv/cowrie/var/log/cowrie`,
    the files are `cowrie.json` and `cowrie.log` (along with dated versions from previous
    days):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `JSON` file of course is formatted for you to consume with code. For instance,
    a Python script might take the information and feed it to a SIEM or another "next-stage"
    defense tool.
  prefs: []
  type: TYPE_NORMAL
- en: The text file however is easily readable – you can open it with `more` or `less`
    (two of the common text-viewing applications in Linux). Let's look at a few log
    entries of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting a new session is shown in the following code block – note that the
    protocol and the source IP are both in the log entry. In the SSH session, you''ll
    also see all of the various SSH encryption parameters in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also look for commands that the various attackers try to run. In these
    examples, they are trying to download additional Linux tools, since the honeypot
    seems to be missing some, or possibly some malware to run persistently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note that the first attacker is sending an ASCII string at the end in hexadecimal,
    `'\x63\x6F\x6E\x6E\x65\x63\x74\x65\x64'`, which translates to "connected." This
    is possibly to evade an IPS. Base64 encoding is another common evasion technique
    that you'll see in honeypot logs.
  prefs: []
  type: TYPE_NORMAL
- en: The second attacker has a series of `rm` commands, to clean up their various
    work files after they've accomplished their goals.
  prefs: []
  type: TYPE_NORMAL
- en: Note that another thing that you'll likely see in SSH logs is syntax errors.
    Often these are from poorly tested scripts, but once sessions are established
    more frequently, you'll see a real human driving the keyboard, so you'll have
    some indication of their skill level (or how late at night it is in their time
    zone) from any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these next examples, the attackers are trying to download cryptocurrency
    miner applications to add their newly compromised Linux host into their cryptocurrency
    mining "farm":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that they both add a `history –c` addendum to their commands, which clears
    the interactive history of the current session, to hide the attacker's activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the attacker is trying to add a malware download into the
    Linux scheduler cron, so that they can maintain persistence – if their malware
    is ever terminated or removed, it''ll just be re-downloaded and re-installed when
    the next scheduled task comes around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The various files that attackers try to download are collected in the `/srv/cowrie/var/lib/cowrie/downloads`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize the Cowrie honeypot – some common changes you might make
    are located at the following places:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_14_Table_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What''s left? Simply check your ISC account online – links that will be of
    interest to you are located under **My Account**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – ISC honeypot – online reports](img/B16336_14_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – ISC honeypot – online reports
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss each of these options in a bit more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_14_Table_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Online, the SSH activity against your honeypot is summarized in the ISC portal
    under **My SSH reports**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15 – SSH honeypot reports](img/B16336_14_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.15 – SSH honeypot reports
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the main report for the SSH consolidated data involves the user
    IDs and passwords used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16 – ISC SSH report – Consolidated userids and passwords seen](img/B16336_14_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.16 – ISC SSH report – Consolidated userids and passwords seen
  prefs: []
  type: TYPE_NORMAL
- en: All activity is logged though, so we do see research projects against this attack
    data from time to time, and the various reports are being refined as time goes
    on.
  prefs: []
  type: TYPE_NORMAL
- en: The web honeypot has similar configurations to the SSH honeypot. The detections
    for various attacks are updated in the `/srv/www/etc/signatures.xml` file. These
    are updated periodically from the central server at the Internet Storm Center,
    so while you can make local edits yourself, these changes are likely to get "clobbered"
    on the next update.
  prefs: []
  type: TYPE_NORMAL
- en: Web activity against the honeypot is all logged too, of course. Local logs are
    in the `/srv/www/DB/webserver.sqlite` database (in SQLite format). Local logs
    can also be found in `/var/log/syslog` by grepping for the `webpy` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various things that were detected in the example honeypot include the following
    attacker, who is looking for HNAP services. HNAP is an often-attacked protocol
    and is usually used to control fleets of ISP modems ([https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)),
    so an HNAP compromise can often lead to compromising a large number of devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The same attacker is also probing for `goform/webLogin`. In this example, they
    are testing for a recent vulnerability on common Linksys routers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This attacker is looking for the `boa` web server. This web server has a few
    known vulnerabilities, and is used by several different manufacturers of internet-attached
    security cameras ([https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231](https://isc.sans.edu/diary/Pentesters+%28and+Attackers%29+Love+Internet+Connected+Security+Cameras%21/21231)).
    Unfortunately, the `boa` web server project has been abandoned, so no fixes will
    be forthcoming:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'These activity reports are similarly logged in your ISC portal, under **My
    404 Reports** – let''s look at a few. This attacker is looking for Netgear routers,
    likely looking for any number of recent vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.17 – ISC 404 report – Attacker looking for vulnerable Netgear services](img/B16336_14_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.17 – ISC 404 report – Attacker looking for vulnerable Netgear services
  prefs: []
  type: TYPE_NORMAL
- en: 'This one is looking for `phpmyadmin`, which is a common web administration
    portal for the MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18 – ISC 404 report – Attacker looking for vulnerable MySQL web
    portals](img/B16336_14_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.18 – ISC 404 report – Attacker looking for vulnerable MySQL web portals
  prefs: []
  type: TYPE_NORMAL
- en: Note that the first example does not have a User-Agent string, so this is likely
    an automated scanner. The second example does have a User-Agent string, but in
    all honesty that's likely just camouflage; it's probably also an automated scanner
    looking for public vulnerabilities to exploit.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a good understanding of what the main honeypot types are,
    why you might prefer one over the other for any particular situation, and how
    to build each one.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This wraps up our discussion of honeypots, network-based methods of deceiving
    and delaying an attacker, and sending alerts to the defender as the attacks progress.
    You should have a good understanding of each of the main types of honeypots, where
    you might best deploy each to attain your goals as a defender, how to build honeypots,
    and how to secure them. I hope you have a good grasp of the advantages of these
    approaches, and plan to deploy at least a few of them in your network!
  prefs: []
  type: TYPE_NORMAL
- en: This is also the last chapter in this book, so congratulations on your perseverance!
    We've discussed deploying Linux in all kinds of ways in a data center, with a
    focus on how these approaches can help a network professional. In each section,
    we've tried to cover how to secure each service, or the security implications
    of deploying that service – often both. I hope this book has illustrated the advantages
    of using Linux for some or all of these uses in your own network, and that you'll
    be able to proceed to picking a distribution and start building!
  prefs: []
  type: TYPE_NORMAL
- en: Happy networking (with Linux of course)!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for `portspoof` uses an example where all 65,535 TCP ports
    are sent to the installed honeypot. Why is this a bad idea?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which port combination might you enable to masquerade as a Windows **Active
    Directory** (**AD**) domain controller?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more on the subject, check out the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Portspoof examples: [https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md](https://adhdproject.github.io/#!Tools/Annoyance/Portspoof.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/](https://www.blackhillsinfosec.com/how-to-use-portspoof-cyber-deception/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'LaBrea tarpit honeypot: [https://labrea.sourceforge.io/labrea-info.html](https://labrea.sourceforge.io/labrea-info.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuring the Tarpit Honeypot in Microsoft Exchange: [https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx](https://social.technet.microsoft.com/wiki/contents/articles/52447.exchange-2016-set-the-tarpit-levels-with-powershell.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WebLabyrinth: [https://github.com/mayhemiclabs/weblabyrinth](https://github.com/mayhemiclabs/weblabyrinth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thinkst Canary honeypot: [https://canary.tools/](https://canary.tools/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Internet Storm Center''s DShield Honeypot project: [https://isc.sans.edu/honeypot.html](https://isc.sans.edu/honeypot.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/DShield-ISC/dshield](https://github.com/DShield-ISC/dshield)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Strand, J., Asadoorian, P., Donnelly, B., Robish, E., and Galbraith, B. (2017).
    *Offensive Countermeasures: The Art of Active Defense*. CreateSpace Independent
    Publishing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
