- en: Chapter 4. Customizing Your Clouds Quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have tackled creating our first OpenStack administration playbook,
    it is time to progress onto our next task. The next task we will cover is how
    to customize the project quotas in your cloud. This is normally the next step
    in the process of setting up new projects/tenants for your cloud consumers. We
    will step through how one would manually do this first and then transition into
    creating a playbook with roles to fully automate it:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining and creating quotas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding the playbook and roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playbook and role review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining and creating quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are quotas? Within OpenStack, you can set quotas on a tenant/project or
    user level in order to restrict the resource consumption allowed. The Compute
    service (Nova) manages the quota values and also enforces them. As a cloud operator,
    this is another important feature OpenStack offers. Quotas allow you to control
    the cloud's overall system capacity. You may ask, why not just set up one default
    quota and let every project use it? We will step through why this approach may
    or may not work based on the particular use case. It is also worth mentioning
    that the Block Storage service (Cinder) also has the capability of setting quotas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we now know that you can set quotas, let''s review what resources can
    be restricted and what the default values are. The following table describes the
    type of quotas that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Quota Name** | **Defines the number of** |'
  prefs: []
  type: TYPE_TB
- en: '| Instances | Instances allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Cores | Instance cores allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| RAM (MB) | RAM megabytes allowed in each instance |'
  prefs: []
  type: TYPE_TB
- en: '| Floating IPs | Floating IPs allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Fixed IPs | Fixed IPs allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Metadata Items | Metadata items allowed in each instance |'
  prefs: []
  type: TYPE_TB
- en: '| Injected Files | Injected files allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Injected File Content Bytes | Content bytes allowed in each injected file
    |'
  prefs: []
  type: TYPE_TB
- en: '| Keypairs | Keypairs allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Security Groups | Security groups allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Security Group Rules | Rules allowed in each security group |'
  prefs: []
  type: TYPE_TB
- en: '| Server Groups | Server groups allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: '| Server Group Members | Server group members allowed in each project |'
  prefs: []
  type: TYPE_TB
- en: As you can see, there are quite a few options to apply restrictions to. As a
    cloud operator, you would want to take full advantage of tuning these options
    on a per-project basis. Taking on this approach allows you to optimize your cloud
    usage, in essence stretching your resources further while provisioning only what
    is needed. As an administrator, I hated seeing wasted resources hanging out there
    when, if better controls were in place, they could be used for something else.
    Quotas serve as the opposite approach, also the concept of keeping the Cloud Consumer
    from exhausting all of the cloud resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, the process of tuning quotas does involve efforts (aka extra work). Thus,
    the concept of setting global default quota values has become popular. To view
    the default quota values, you would execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining and creating quotas](graphics/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you wish to set a quota value to be unlimited, set the value to `-1`.
    This tells Nova to allow that resource to be unrestricted for that project or
    globally if set as default.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's focus on how we can adjust the quota values manually using CLI. For
    simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  prefs: []
  type: TYPE_NORMAL
- en: Manually creating quotas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be accurate, you only have the capability to update the values set for global
    quotas or quotas set for a specific tenant/project. You cannot create new quotas;
    just update the values. To list, update, and reset a quota involves sending requests
    to the Compute service (Nova).
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like with every OpenStack service, you must authenticate first by sourcing
    the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction to
    OpenStack"), *Introduction to OpenStack*. You would then need to provide the values
    for the quota you wish to update (refer to the table mentioned earlier for your
    options). Now, let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `quota show` command to confirm the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'A real life working example could look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that the preceding example only shows updating the `instance` and
    `core` quotas for a project. There are other quota values that can be updated.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up default quotas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the event you wish to only set up a default quota that all tenant/projects
    and users will be assigned, the process is a bit different. Nova also manages
    the default quota assignments. Setting up a default quota can be very useful when
    you wish to quickly create a tenant/project or user with automatic built-in controls
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: Nothing is worse than creating a project that has no resource restrictions by
    mistake, and before you know it, the consumers of that project have exhausted
    your cloud. Cloud is intended to give the consumers the impression of being limitless.
    In reality, we all know that there is no such thing; everything has a limit in
    some manner. From my experience, if you give a user 20 vCPU, they will use it
    all if allowed. Putting cloud resource restrictions in place is very important
    as a cloud operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to update the default quota for your cloud is given later. This
    command can be executed after authenticating just as in the previous examples.
    The quota options are the same as updating a project or user-specific quota. Again,
    please refer to the table mentioned earlier for your options. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One of the main differences with the preceding command is you must supply something
    that Nova refers to as `quota` class. A `quota` class is the way Nova distinguishes
    between a default `quota` and a custom `quota` you may set up. Assuming future
    releases of Nova will include the ability to create additional `quota` classes.
    For now, you only have the ability to update the only `quota` class available,
    which is named `default`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A working example of the command would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Please keep in mind, whatever you set the default `quota` values to is what
    every project or user will have configured initially.
  prefs: []
  type: TYPE_NORMAL
- en: Resetting quota values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A time may come when you may want to start fresh and reset a quota set for
    a project(s) or user(s). Fortunately, this is an easy process within OpenStack.
    You would use the `quota-delete` command for Nova. This will delete the custom
    quota and reset it back to the default quota. See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding command, you would supply either the tenant ID or the user
    ID to which you want to revert the quota back to the default values.
  prefs: []
  type: TYPE_NORMAL
- en: Automation considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating this role, there was only one automation decision that I had to
    make outside of the ones we covered in the previous chapter. All the other considerations
    carried over.
  prefs: []
  type: TYPE_NORMAL
- en: Because the Nova `quota` commands allow numerous options to be passed with no
    interdependencies, we have to figure out a way to not restrict that flexibility
    in the role and at the same time not require constant updates directly to the
    role. Ansible makes such a decision really easy by allowing variables to be passed
    as a `hash`. Within the variable file, you can then define the options for each
    project or user and have the task cycle through each project/user with those options.
  prefs: []
  type: TYPE_NORMAL
- en: 'I promise this is the last time I will make this disclaimer, but I felt that
    it is important to emphasize:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many ways to approach automating tasks for OpenStack with Ansible,
    the ones shown in this book is just one way I personally have found success with
    and most certainly not the only way. The playbooks/roles are intended to be working
    examples you can use as is or adjust/improve for your personal use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Just like last time, now that this has been said let's get on with creating
    this role.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the playbooks and roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now create a role that allows us to update a single and/or multiple
    project(s) quotas at one time. Updating a quota is a relatively simple two-step
    process. Step 1 is to record the tenant ID or user ID in which you wish to update
    the quota for. Then, step 2 is to actually update the quota.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are only creating a role in this example, we can start with the `main.yml`
    file within the role directory named `adjust-quotas/tasks`. The contents at the
    beginning of this file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Just like the manual commands we reviewed earlier in this chapter, you must
    supply the quota options you wish to adjust and the tenant name from the variable
    file we will review later. Again, we are using the `with_together` command to
    loop through the two variables defined pairing the values together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a further breakdown of the variables defined in the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the role is executed, no output is generated in this particular case.
    If you wanted to provide an output to confirm the successful execution of the
    task, you can add the `quota show` command as an additional task in your role.
    An example of that would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You have now completed your second OpenStack administration role. To support
    this role, we now need to create the variable file that will go along with it.
    The variable file named `main.yml`, which will be located in the `adjust-quotas/vars`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The values shown in the following example are just working examples. Let''s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a moment to break down each variable. The summary would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our variable file is created, we can move on to creating the master
    playbook file. Just like in the previous chapter, the file will be named `quota-update.yml`
    and saved to the root of the playbook directory. The contents of the `quota-update.yml`
    file would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The summary of this file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: All that is left is to populate our host inventory file and the global variable
    file. Since we already created these in the previous chapter, there is no need
    to repeat this process. The values defined earlier would remain the same. Here
    is a quick recap of how those files are configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hosts file in the root of the playbook directory is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Global variable file inside the `group_vars/` directory is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: OK, so here we are, two administration playbooks and roles completed now. As
    always, we will finish up the chapter with a quick review of the playbook and
    role just created.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing playbooks and roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get right to it, we can start from the top with the role we created named
    `create-users-env`. The completed role and file, named `main.yml`, located in
    the `adjust-quotas/tasks` directory, looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding variable file, named `main.yml`, located in the `adjust-quota/vars`
    directory, for this role will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the master playbook file, named `quota-update.yml`, located in the `root`
    of the `playbook` directory, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Following this, we created the hosts file, which also is located in the `root` directory
    of the `playbook` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrapped this playbook all up by creating the global variable file
    named `util_container`, saving it to the `group_vars/` directory of the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete set of code can again be found in the following GitHub repository
    at [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now of course, we have to test out our work. Assuming that you have cloned
    the GitHub repository mentioned earlier, the command to test out the playbook
    from the Deployment node would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an OpenStack operator quotas will be a focus on yours, so any effort in being
    able to streamlet that process will be beneficial. Ansible is the key to being
    able to simplify repeated tasks such as this.  Just as in the previous chapter,
    you can use this role in combination with others as many times as you want. This
    is why, you want to design your roles to be the base generic task as much as possible .
  prefs: []
  type: TYPE_NORMAL
- en: Some of the things we covered in this chapter are defining what a quota within
    OpenStack is. We then took that knowledge and learned how to update a quota for
    a project/user using the OpenStack CLI. We applied some base principles as to
    why you would use the default cloud quotas and how to update them appropriately.
    Next, we reviewed how to reset any of the custom quotas created. Finally, we developed
    our very own Ansible playbook and role to automate updating custom project/user
    quotas.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now to move on to the next chapter where we will take on the administrative
    task of snapshotting your cloud. The functionality of taking instance snapshots
    is a powerful tool if you wanted to use that instance as a gold copy and/or retain
    a backup of the instance. Understanding how to handle this sort of task on a cloud
    operator level is very beneficial. The next chapter will cover how to create snapshots
    manually, cover the power of being able to snapshot all instances within a project
    at once and then of course conclude with how to automate that task with Ansible.
    On to [Chapter 5](ch05.html "Chapter 5. Snapshot Your Cloud"), *Snapshot Your
    Cloud*, we go!
  prefs: []
  type: TYPE_NORMAL
