- en: Automating Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered a wide array of techniques for managing
    user and group accounts. First, we investigated the various directories from which
    the new user's home directories are populated. Next, we dealt with user account
    creation. Also, we looked at the various configuration files where the user passwords
    are kept. Finally, our focus was on the groups. We covered the steps for creating
    a group, and adding, removing, and assigning a password for a group.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our focus switches to automation, particularly automating tasks.
    We will cover scheduling of tasks using various methods. We often work with various
    tasks on a daily basis, rather than having to run the tasks manually and repetitively
    over a period of time; it's good practice to implement some type of additional
    automation, and we will be looking at permissions regarding execution of tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The `at`, `atq`, and `arm` commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `crontab` file and `anacron` command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions for tasks using configuration files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing automation using the at, atq, and atrm commands
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover some common methods for automating various type
    of tasks within a Linux system. First, we will cover the `at` command. Next, we
    will work with handling queues using the `atq` command. Finally, we will finish
    off this section with the technique used for removing jobs, using the `atrm` command.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The at command
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `at` command schedules a task to run at a fixed time; it runs once. You
    can schedule a simple task such as appending some output to a file or as complex
    as backing up a database. The basic syntax for starting the `at` utility is as
    follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see the `at` command in action using our Fedora 28 system; we simply
    type `at` without specifying any option:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Based on the preceding command, without specifying a time, the `at` utility
    will return `Garbled time`. Here is how we specify the time:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Based on the preceding output, as soon as we enter a date (in this case we
    entered a time in the format HH:MM) it launches the `at` utility and we are presented
    with a `warning: commands will be executed using /bin/sh` warning; this tells
    us which shell the `at` utility is going to use when it is executed. From here,
    we can type any command that we would like to run at the specified time. An example
    might be this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It may seem that nothing has changed; for the changes to be saved we would
    have to tell the `at` utility that we have finished entering our commands. This
    is done using the *Ctrl* + *D* combination:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Based on the preceding output, the `at` utility has scheduled a task to run
    at `18:10` from the present time. Another way to schedule a task with the `at`
    utility is to specify the time in the 12-hour format. Here is how we accomplish
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Awesome! Based on the preceding output, we have specified the time using a
    12-hour format, by tagging on `PM`. This tells the `at` utility to execute the
    job at `9:00 PM` from the current time. Also, we can specify the time using a
    keyword. For instance, we can say `tomorrow`, ` noon tomorrow`,  `next week`, ` next
    Monday`, `fri`, to name a few. Here is how this would look:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Great! Based on the preceding output, the `at` utility has used the current
    date to calculate when it will be executed. Also, `<EOT>` is the result of pressing
    *Ctrl* + *D*. Another way to specify when to run the `at` utility is to use a
    combination of keywords. We could, for example, specify `now + 4 weeks`, `now
    + 6 years`, `now + 25 minutes`, and so on. Here is how this looks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Excellent! Based on the preceding output, we can see that the `at` utility
    uses the current date and time to base its calculations. Also, we can specify
    the year to see its calculation too:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Great job! Based on the preceding output, the `at` utility is going to run
    this task 25 years from the present time. We can see a list of some common options
    that can be passed with the `at` utility, we pass the `-help` option:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The atq command
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Thus far, we have been creating a number of tasks to be executed using the
    `at` utility. It would be nice to keep a track of what is scheduled to run using
    the `at` command; the `atq` command does just that. To see how this works, we
    can run the `atq` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Based on the preceding output, we have two jobs listed to be run by the `at`
    utility. When we run the `atq` command as the root user, all jobs are listed to
    be run by the `at` command; this is different when we run the `at` command as
    a standard user. Only the user jobs will be listed. Here is how this would look:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Based on the preceding output, the user is unaware of the jobs that the root
    user has scheduled using the `at` command. Also, we can view the queue using the
    `at` command; we pass the `-l` option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Awesome! Based on the preceding command, we can see that the output is identical
    to that of the `atq` command. This is due to the fact that the `-l` option used
    with the `at` command is simply an alias of the `atq` command.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The atrm command
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s nice to have the ability to schedule jobs to be run using the `at` utility.
    However, we need some form of control over the jobs scheduled. If we''ve decided
    to cancel a job, we can use the `atrm` command. The `atrm` command is used for
    canceling a job before it is executed by the `at` utility. For instance, we schedule
    a reboot using the `at` utility:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Based on the preceding command, we have specified to reboot the system in five
    minutes using the `at` command. Now if for some reason we want to cancel this
    job, we can use the `atrm` command. We would do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Great! Based on the preceding command, we used the `atq` command to list the
    scheduled jobs; we then used the `atrm` command and specified the job ID to remove
    it. Also, we can remove a job using the `at` utility; to do so, we pass the `-r`
    or `-d` option:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Great! Based on the preceding output, we can see that the job with ID `4` was
    removed using the `-r` option of the `at` command. The `-d` option of the `at`
    command works the same way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Managing automation using cron, crontab, and anacron
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover some techniques for managing tasks that normally
    require being run more than once. First, we will begin with the various `cron`
    directories. Next, we will work with `crontab`. Finally, we will then cover `anacron`.
    The highlight will the fact that they are not a replacement for each other, but
    rather they play key roles in managing tasks within a Linux system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Cron
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw earlier, the `at` utility only runs a task once. There are times when
    we need to run a task multiple times. It is cumbersome having to be present to
    type a task with the `at` utility each time we want to execute a given job. For
    instance, backups, this is one of the most common tasks that most Linux admins
    are responsible for carrying out.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'In light of these circumstances, we can use the `cron` utility, more specifically
    the `/etc/cron.*` directories; we place our task, which we would like to be run.
    The jobs could be run hourly, daily, or monthly. Cron uses the `crond` daemon.
    In Ubuntu, the `cron` daemon is called `cron` or `cron.service` , whereas in Fedora
    28, the `cron` daemon is called `crond` or `crond.service`. We can check the status
    of the `cron` daemon on Ubuntu as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Based on the preceding output, the `cron` daemon called `cron.service`. Let''s
    check in Fedora 28 for the `cron` daemon:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Great! As can be seen in Fedora 28, the cron service is called `crond.service`.
    Next, let''s take a look at the `cron` directories:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Based on the preceding output, there are no tasks scheduled to be run every
    hour. However, we will place a number of tasks in the `/etc/cron.daily` directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Based on the preceding output, there are a number of tasks, such as `passwd`,
    `dpkg`, `mlocate`, to name a few, which are scheduled to run daily. Likewise,
    we can look inside `/etc/cron.monthly`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Awesome! We can take a deeper look at one of the scheduled task. Let''s look
    at the `/etc/cron.daily/passwd` task:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Based on the preceding output, we can see the task is written as a script.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Crontab
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve just seen, we can place our tasks in their respective `/etc/cron.*`
    directory. This then gets executed every hour, day, or monthly. However, we can
    get even more flexibility; instead of placing our scripts in the `/etc/cron.*`
    directory, we can place our script inside `crontab` itself. We can explore the
    `/etc/crontab` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Excellent! We can see in the preceding output that the scripts we have covered
    are in the last part; they get executed by `crontab`. We can add our own entry
    inside `crontab`. We pass the `-e` option with `crontab`; this means to enter
    edit mode:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we have to specify which editor to use; we will accept the default:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'Awesome! Based on the preceding screenshot, we have some guidelines on how
    to define an entry. Let''s define our own entry:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Based on the preceding screenshot, we have defined our entry to be run every
    half of a minute, every day; the `ls` command will be run against the `/boot`
    directory, and this will then append its output and save it to `/home/philip/Documents/ls_crontab`.
    The syntax for defining the time is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once we''ve finished creating our entry, we need to write our changes; we''re
    using the nano editor so we press *Ctrl* + *O* to write the changes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'Now, the `crontab` file will be generated for the user as can be seen as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Based on the preceding output, we can see our entry at the bottom. Once 30
    minutes have elapsed, our file will be generated, and we can see the output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Awesome, we will wait another 30 minutes, and we will see the output appended:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Excellent! Note that a standard user would not see the `crontab` job for the
    root user:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, the root user can see entries for any user by passing the `-u` option:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Awesome!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Anacron
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Interestingly, Anacron is not meant as a replacement for `cron` , but instead
    it''s meant to be used in scenarios where the environment involves the system
    being off some of the time. Furthermore, Anacron does not expect the system to
    be on at all times. For instance, laptops are shut down from time to time. Another
    distinct feature of Anacron is the fact that the duration is defined in days or
    monthly and not hours or minutes. If you have a job to be executed at a certain
    time and the system is off, rest assured when the system is powered up Anacron
    will execute the job. We can take a look at the `anacrontab` file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Based on the preceding output, we can see some `cron` entries inside the `anacrontab`
    file. We can see that `anacron` compliments `cron` and it does not replace `cron`.
    The way we read an entry in the `anacrontab` file is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can get information on the jobs in the `/var/spool/anacron` directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Awesome! We can look inside one of these files and we see the last time the
    job was run:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Great! Based on the preceding output, we can see the timestamp when the job
    was executed. To see the jobs which `anacron` is handling in foreground, we can
    use the `-d` option with `anacron`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Based on the preceding output, currently there are no jobs being executed.
    We can create an entry by editing the `/etc/anacrontab` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Based on the preceding output, we now see a new entry for our custom entry.
    We can look inside the file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Based on the preceding output, the file is empty because the job has not yet
    been run. We can text for a syntax error in the `anacrontab` file by passing the
    `-T` option with `anacron`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Based on the preceding output, no syntax error was found. We can update the
    timestamp for the jobs without running the jobs, by using the `-u` option:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We didn''t see any output because the timestamps were updated in the background.
    We can add the `-d` option, and we will see what is happening in the foreground:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Awesome! We can execute the job immediately by passing the `-f` option with
    `anacron`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Based on the preceding output, anacron is attempting to execute the jobs; however,
    it has to wait until the delay has elapsed for each job. Here is where the power
    of `-n` shines; it will ignore the delay set:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Excellent! Now, we can check the `/home/philip/Documents` for the `ls_anacron`
    file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Great! We can look inside the `ls_anacron` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Perfect!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Permissions for tasks using configuration files
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can restrict access to the `at` and `cron` utilities using `/etc/at.allow`,
    `/etc/at.deny`, `/etc/cron.allow` and `/etc/cron.deny`. If the files don''t exist
    then we can create them; the `/etc/at.allow` and `/etc/cron.allow` files are sufficient.
    For the `/etc/at.allow` file, we do the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Awesome! Now, only these users will be allowed to execute jobs using `at` or
    `cron`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dealt with automation at the command line. We touched on
    the `at` utility, focusing on creating a job that runs once. Next, our focus was
    the usage of the `atq` utility and how it displays all scheduled jobs that the
    `at` utility will run. Also, we saw how to leverage an option with the `at` utility
    to enable us to view the job queue. Following this, we looked at the `atrm` utility,
    the primary focus being the ability to remove a scheduled job. In addition to
    this, we also saw the possibility of stopping a job by using the `at` command
    and passing an option. We then covered `cron` , focusing on the various `cron`
    directories; each plays a vital role in terms of automating tasks. Next, we worked
    with `crontab`; we saw the breakdown of the syntax, and we then created a custom
    entry in `crontab`. Following this, we worked with `anacron`. We saw the use case
    of `anacron` and how it complements `cron`. We then created our own custom entry
    and executed the jobs in order to gain a better understanding of `anacron`. Finally,
    we looked at restrictions in terms of automation; primarily, we looked at restricting
    access to the `at` and `cron` utilities.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, our focus will be on time management, particularly, maintaining
    the system time and performing logging, both local and remote. The next chapter
    is of utmost importance to anyone working within a networking environment who
    deals with monitoring on a daily basis. I invite you to come and join me for another
    exciting chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What will be the output if no option is passed with the `at` command?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. Invalid syntax
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: B. Garbled time
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: C. No output
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Which is a valid `at` command?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. at 9:00 AM next next
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: B. at 9:00 AM tonite tonite
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: C. At 9:00 AM next Monday
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Which does `<EOT>` mean in the `at` utility?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. End of Time
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: B. *CTRL*+ *D* was pressed
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: C. *CTRL* + *X *was pressed
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Which option prints a queue using the `at` command?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-a`
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: B. `-c`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: C. `-d`
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: D. `-l`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Which option removes a job using the `at` command?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-a`
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: B. `-c`
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: C. `-a`
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: D. `-r`
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Which other command can be used to print the job queue created with the `at`
    command?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `atrm`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: B. `atc`
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: C. `atq`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: D. `atr`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Which option runs a job every minute using `crontab`?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `1/30 * * * *`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: B. `*/20 * * * *`
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: C. `*****`
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: D. `****1`
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to open `crontab` and start making changes?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-a`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: B. `-e`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: C.  `-b`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: D. `-c`
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Which word can represent 7 in anacron?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `@daily`
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: B. `@monthly`
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: C. `@weekly`
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: D. `@sunday`
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Which option forces `anacron` to run jobs before their schedule?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-f`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: B. `-e`
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: C. `-c`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: D. `-a`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This site gives useful information about the `at` utility: [https://linuxconfig.org](https://linuxconfig.org)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about `cron` : [https://code.tutsplus.com](https://code.tutsplus.com)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about `anacron` : [https://linux.101hacks.com](https://linux.101hacks.com)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该网站提供关于`anacron`的有用信息：[https://linux.101hacks.com](https://linux.101hacks.com)
