- en: Graphs and Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to retrieve data from a database using
    Qt's `sql` module. There are many ways to present this data to the users, such
    as displaying it in the form of tables or diagrams. In this chapter, we will learn
    how to do the latter—presenting data with different types of graphs and charts
    using Qt's charts module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of charts and graphs in Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charts and graphs implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the dashboard page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Qt 5.7, several modules that were only available for commercial users
    before have become free for all the open source package users, which includes
    the Qt Charts module. Therefore, it is considered a very new module for most Qt
    users who don't own the commercial license.
  prefs: []
  type: TYPE_NORMAL
- en: Do note that, unlike most of the Qt modules that are available under an LGPLv3
    license, the Qt Chart module is offered under an GPLv3 license. Unlike LGPLv3,
    a GPLv3 license requires you to release the source code of your application, while
    your application must also be licensed under GPLv3\. This means that you are not
    allowed to static-link Qt Chart with your application. It also prevents the module
    from being used in proprietary software.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the GNU licenses, please head over to the following link: [https://www.gnu.org/licenses/gpl-faq.html.](https://www.gnu.org/licenses/gpl-faq.html)
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Types of charts and graphs in Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Qt supports most commonly used diagrams, and even allows the developer to customize
    the look and feel of them so that they can be used for many different purposes.
    The Qt Charts module provides the following chart types:'
  prefs: []
  type: TYPE_NORMAL
- en: Line and spline charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polar charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area and scatter charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box-and-whiskers charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Candlestick charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line and spline charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first type of chart is the **line and spline chart**. These charts are
    typically presented as a series of points/markers that are connected by lines.
    In a line chart, the points are connected by straight lines to show the changes
    of the variables over a period of time. On the other hand, spline charts are very
    similar to line charts except the points are connected by a spline/curve line
    instead of straight lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/629caf81-65dc-4ade-bca7-c83446b9563a.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bar charts** are one of the most commonly used diagrams beside line charts
    and pie charts. A bar chart is quite similar to a line chart, except it doesn''t
    connect the data along an axis. Instead, a bar chart displays its data using individual
    rectangular shapes, where its height is determined by the value of the data. This
    means that the higher the value, the taller the rectangular shape will become:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da0e850e-1370-4f92-9b2f-59d6ff87010f.png)'
  prefs: []
  type: TYPE_IMG
- en: Pie charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **pie chart**, as its name implies, is a type of chart that looks like a
    pie. A pie chart presents its data in the form of pie slices. The size of each
    slice of pie will be determined by the overall percentage of its value compared
    to the rest of the data. Therefore, pie charts are normally used to display fraction,
    ratio, percentage, or a share of a set of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bef47cfa-ec84-4d74-9a31-7fccac977da3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, a pie chart can also be displayed in a donut shape (also known as
    donut chart):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21decb70-9994-4aa5-9201-0d617a5577f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Polar charts** present data in a circular graph, where the placement of the
    data is based on both the angle and the distance from the center of the graph,
    which means the higher the value of the data, the further away the point is from
    the center of the chart. You can display multiple types of graphs within the polar
    chart, such as line, spline, area, and scatter to visualize the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12341292-4158-439e-a319-746511e60aab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are a gamer, you should have noticed this type of graph being used in
    some video games to display the in-game character''s attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/388b962c-afac-421e-afe0-076d47706e35.png)'
  prefs: []
  type: TYPE_IMG
- en: Area and scatter charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **area chart **displays its data as an area or shape to indicate volume.
    It's usually used to compare the differences between two or more datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb091f5c-a7aa-4329-9faf-40f1f7e1ead0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Scatter charts**, on the other hand, are used to display a collection of
    data points, and for showing the non-linear relationship between two or more datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2ce41e1-47a7-4fdf-832a-df1bc9b62b47.png)'
  prefs: []
  type: TYPE_IMG
- en: Box-and-whiskers charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Box-and-whiskers charts** present data as quartiles extended with whiskers
    that show the variability of the values. The boxes may have lines extending vertically
    called *whiskers*. These lines indicate variability outside the upper and lower
    quartiles, and any point outside those lines or whiskers is considered an outlier.
    Box-and-whisker charts are most commonly used in statistical analysis, such as
    stock market analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd88e23e-128d-4f49-828e-6e548e6f83ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Candlestick charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Candlestick charts** are visually quite similar to the box-and-whiskers charts,
    except they are used to represent the difference between the opening and closing
    value, while showing the direction of the value (whether increasing or decreasing)
    through different colors. If the value of a particular piece of data stays the
    same, the rectangular shape will not be shown at all:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b4c98ab-bbee-4f7f-8168-c054e28be15d.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information regarding the different types of charts supported by Qt,
    please head over to the following link: [https://doc.qt.io/qt-5/qtcharts-overview.html.](https://doc.qt.io/qt-5/qtcharts-overview.html)
  prefs: []
  type: TYPE_NORMAL
- en: Qt supports most of the diagram types you need for your project. It is also
    extremely easy to implement these diagrams in Qt. Let's see how we can do it!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing charts and graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt makes drawing different types of diagrams easy by putting the complex drawing
    algorithms behind different abstraction layers, and providing us with a set of
    classes and functions that can be used to easily create these diagrams without
    knowing how the drawing algorithm works behind the scenes. These classes and functions
    are all included in the chart module that comes together with Qt.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new Qt Widgets Application project and try to create our first
    chart in Qt.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created the new project, open up the project file (`.pro`) and
    add the `charts` module to your project, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.h` and add the following to include the header files
    that are required for using the `charts` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `QtCharts` and `QtChartView` headers are both essential for Qt's `charts`
    module. You must include both of them for any type of chart to work at all. The
    other two headers, namely `QBarSet`and `QBarSeries`, are used here because we're
    going to create a bar chart. The headers that get included in your project will
    be different depending on the type of chart you want to create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `mainwindow.ui` and drag either Vertical Layout or Horizontal Layout
    to the central widget. Then, select the central widget and click either Layout
    Horizontally or Layout Vertically. The layout direction is not particularly important,
    as we will only create a single chart here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e4f032b-86fb-4548-a497-f60076f9a6d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, right-click on the layout widget you just dragged to the central
    widget, and select Morph into | QFrame. This will change the layout widget into
    a QFrame widget while still maintaining its layout properties. If you create a
    QFrame from Widget Box, it won''t have the layout properties that we need. This
    step is important so that we can set it as the parent of our chart later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef83d89-2839-43c4-9537-cb34557dddec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now open up `mainwindow.cpp` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code above initializes all the categories that will be displayed in the
    bar chart. Then, we also added six different items of data to each category, which
    will later be represented in the form of bars/rectangular shapes.
  prefs: []
  type: TYPE_NORMAL
- en: The `QBarSet` class represents a set of bars in the bar chart. It groups several
    bars into a bar set, which can then be labeled. QBarSeries, on the other hand,
    represents a series of bars grouped by category. In other words, bars that have
    the same color belong to the same series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, initiate the `QChart` object and add the series to it. We also set the
    chart''s title and enable animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we create a bar chart category axis and apply it to the bar chart''s
    *x *axis. We used a `QStringList` variable, which is similar to an array, but
    explicitly for storing strings. The `QBarCategoryAxis` will then take the string
    list and populate it over the *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a chart view for Qt to render the bar chart and set it as a
    child of the frame widget in the main window; otherwise, it won''t be rendered
    on the main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button in Qt Creator, and you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca8c434b-348e-442c-83fc-d763be3e71c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s do a pie chart; it''s really easy. First, instead of `QBarSet` and
    `QBarSeries`, we include `QPieSeries` and `QPieSlice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `QPieSeries` object and set up the name and value of each data.
    After that, set one of the slices to a different visual style and make it pop
    out from the rest. Then, create a `QChart` object and link it with the `QPieSeries`object
    that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Last, but not least, create the `QChartView` object and link it with the `QChart`
    object we just created. Then, set it as a child of the frame widget, and we're
    good to go!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Press the Run button now, and you should be able to see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5355056-5e99-4777-804c-117005d6848d.png)'
  prefs: []
  type: TYPE_IMG
- en: For more examples of how to create different charts in Qt, please check out
    their sample code at the following link: [https://doc.qt.io/qt-5/qtcharts-examples.html](https://doc.qt.io/qt-5/qtcharts-examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen that it is easy to create graphs and charts with Qt, let's
    expand the project we started in the previous chapters and create a dashboard
    for it!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dashboard page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a functional login page that allows the
    user to sign in using their username and password. What we need to do next is
    to create the dashboard page, which the user will automatically get directed to
    upon successful login.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dashboard page usually serves as a quick overview for the user about the
    status of their company, business, project, assets, and/or other statistics. The
    following image shows an example of what a dashboard page could look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00d8ae97-eb16-42e8-87b2-e6fc98288a8a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are quite a number of charts and graphs that are being
    used on the dashboard page because it is the best way for displaying a huge number
    of data without making the users feel overwhelmed. Moreover, graphs and charts
    can let the users understand the overall situation easily without digging too
    much into the details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open up our previous project and open the `mainwindow.ui` file. The
    user interface should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d94821f7-5f65-4794-824b-f819318c9b22.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we already have the login page now, but we need to add in another
    page for the dashboard as well. For multiple pages to co-exist in the same program
    and to be able to switch between different pages at any time, Qt provides us with
    something called **QStackedWidget**.
  prefs: []
  type: TYPE_NORMAL
- en: A stacked widget is just like a book that you can add more and more pages to,
    but it shows only one page at a time. Each page is a completely different GUI,
    so it won't interfere with other pages in the stacked widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the previous login page was not made with a stacked widget in mind, we
    have to make some adjustments to it. First, drag and drop a stacked widget from
    the Widget Box to the central widget of your application, and then, we need to
    move everything previously under the central widget into the first page of the
    stacked widget, which we renamed loginPage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e44e2d8-9594-4cea-88c6-970b2e7fb0b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, set all the layout settings of the central widget to `0`, so that it
    contains no margin at all, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4870550e-3423-44cc-9e59-782f31959dd6.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, we must cut away the code in the style sheet property of the central
    widget, and paste it to the login page's style sheet property. In other words,
    the background image, button style, and other visual settings are now only applied
    to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re done, you should be getting two completely different GUIs (the
    dashboard page is empty for now) when switching between pages on the stacked widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c047da2-209c-4102-94c5-ac0e8ec76c60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, drag and drop a grid layout to the dashboard page, and apply Layout Vertically
    to the dashboard page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed2ed650-4139-46e9-99f8-f2375414f6f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, drag and drop six Vertical Layout into the Grid Layout, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc848c1e-1aa3-4a26-a6e1-966834507a66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select each of the vertical layouts we just added to the grid layout,
    and turn it into QFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5761610-be0c-4854-a859-603a27326ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: Just as we did in the charts implementation examples, we must turn the layout
    into a `QFrame` (or `QWidget`) so that we can attach the chart on it as a child
    object. If you directly drag a `QFrame` from the widget box and don't use morphing,
    the `QFrame` objects do not have the layout properties, and hence the charts may
    not be resizing themselves to fit the `QFrame`'s geometry. Also, name those `QFrame`
    objects as `chart1` to `chart6` as we're going to need them in the following steps.
    Once you're done with that, let's proceed to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your project (`.pro`) file and add the `charts` module, just as
    we did in the earlier example in this chapter. Then, open up `mainwindow.h` and
    include all the headers required. This time around, we also include the `QLineSeries`
    header for creating the line chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, declare the pointers for the charts, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll add the code for creating a bar chart. This is the same bar chart
    we created earlier in the chart implementation example, except it''s now attached
    to the `QFrame` object called `chart1`, and is set to enable *anti-aliasing* when
    rendering. The anti-aliasing feature removes the jagged edges of all charts and
    thus makes the rendering appear smoother:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we also add the code for the pie chart. Again, this is the same pie chart
    from the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we also add a line graph to the dashboard, which is something new.
    The code is very simple and very similar to the pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, we must add a resize-event slot to the main window
    class, and make the charts follow the size of their respective parent when the
    main window is being resized. This can be done by first going to the `mainwindow.h`
    and adding in the event-handler declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.cpp` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Do note that the `QMainWindow::resizeEvent(event)` must be called first so that
    the default behavior will be triggered before you call your custom methods below
    it. `resizeEvent()` is one of the many event handlers provided by Qt for reacting
    to its events, such as mouse events, window events, paint events, and so on. Unlike
    the signal-and-slots mechanism, you need to replace the virtual function of the
    event handler to make it do what you want it to do when the event is being called.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we build and run the project now, we should be getting something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a440a24-0d6a-4d47-b54b-a50aee5eaffc.png)'
  prefs: []
  type: TYPE_IMG
- en: Looks pretty neat, doesn't it! However, for the sake of simplicity and so as
    not to confuse the readers, the charts are all hard-coded and are not using any
    data from the database. If you intend to use data from the database, don't make
    any SQL query during program startup, as this will make your program freeze if
    the data you're loading is very large, or your server is very slow.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to do it is to load the data only when you're switching from the
    login page to the dashboard page (or upon switching to any other pages) so that
    the loading time is less obvious to the user. To do this, right-click on the stacked
    widget and select Go to slot. Then, select currentChanged(int) and click OK.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/531baa65-d083-4a70-a57c-aeff6def670a.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, a new slot function will be created automatically by Qt. This function
    will be called automatically when the stacked widget is switching between pages.
    You can check which page it is currently switching over to by checking the `arg1`
    variable. The `arg1` value will be `0` if the target page is the first page within
    stacked widget, or `1` if the target is the second page, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can submit the SQL query only when the stacked widget is showing the dashboard
    page, which is the second page (`arg1`equals to `1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Phew! That's a lot to digest for this chapter! Hopefully, this chapter will
    help you understand how to create a beautiful and informative page for your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chart module in Qt is the combination of feature and visual aesthetic. Not
    only is it easy to implement without the need to write a very long code just to
    display the chart, but it is also customizable to suit your visual requirements.
    We really need to be thankful to Qt developers for opening up this module and
    allowing non-commercial users to use it for free!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create a really nice-looking dashboard,
    and display different types of charts on it using the Qt Chart module. In the
    coming chapter, we will learn how to use view widget, dialog boxes, and file-selection
    dialogs.
  prefs: []
  type: TYPE_NORMAL
