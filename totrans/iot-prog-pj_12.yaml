- en: Enhancing Our IoT Doorbell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to
    Web Services*, we explored web services. We then introduced Bluetooth in [Chapter
    11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell Button Using
    Bluetooth*, and built a Bluetooth doorbell using the Android app Blue Dot and
    our Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will enhance our Bluetooth doorbell by adding the ability
    to send messages when someone is at the door. We will take what we've learned,
    and apply it to add text message functionality using the Twilio account we set
    up in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to
    Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending a text message when someone is at the door
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a secret doorbell application with text messaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the two projects in this chapter, we will use the circuit from [Chapter
    11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell Button Using
    Bluetooth*. We will also make use of the Blue Dot app for Android devices as described
    in [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell
    Button Using Bluetooth*. The following is a diagram of the application we will
    create in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48881639-1b37-4934-880b-12c34b044a47.png)'
  prefs: []
  type: TYPE_IMG
- en: We will create two versions of this application. The first version of our application
    will be a simple Bluetooth doorbell, where pressing the blue dot fires off the
    buzzer and RGB LED light show. After the alarm has been triggered, a text message
    will be sent using Twilio Cloud Services.
  prefs: []
  type: TYPE_NORMAL
- en: An altered version of the application will use swiping gestures on the Blue
    Dot app to indicate particular visitors. Each of the four potential visitors will
    have their own unique swiping gesture with the blue dot. After the custom buzzer
    ring and RGB LED light show, a text message will be sent informing the recipient
    of who is at the door. The Twilio Cloud will be used for this as well.
  prefs: []
  type: TYPE_NORMAL
- en: Both projects should take a morning or afternoon to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 330 Ohm resistors (3 of them)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active buzzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android device (phone/tablet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending a text message when someone is at the door
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to
    Web Services*, we created text messages using a technology called Twilio. In that
    instance, we used Twilio to send text messages when an intruder was detected.
    In [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell
    Button Using Bluetooth*, we created a Bluetooth doorbell using the Blue Dot app
    on an Android phone or tablet. The doorbell sounded a buzzer and gave a little
    light show on an RGB LED.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we will combine Twilio with the Bluetooth doorbell, and have
    a text message sent when someone pushes the Blue Dot doorbell (refer to [Chapter
    10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to Web Services*,
    and [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating a Doorbell
    Button Using Bluetooth*, to familiarize yourself with these technologies).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple doorbell application with text messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create our simple doorbell application do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `Doorbell.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Blue Dot app on your Android device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the big blue dot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should hear the ring and see the light sequence cycle twice, with a short
    delay between rings. You should get something similar to the following printed
    in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first three lines indicate that the Blue Dot app has connected to our Raspberry
    Pi through our Python program. The last line indicates that a text message was
    sent. As we are using the test environment, an actual text message was not sent,
    but the Twilio service was called.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the code. We start by defining our class and giving it
    the name `Doorbell`. This is a good name for our class, as we have written our
    code such that everything to do with a doorbell is contained in `Doorbell.py` file.
    This file holds both the `Doorbell` class, used to alert a user, as well as the
    Blue Dot code, used to trigger the doorbell. The Blue Dot code actually sits outside
    of the `Doorbell` class definition, as we view it as part of the Blue Dot app,
    not the doorbell itself. We certainly could have designed our code such that the `Doorbell`
    class contains code to trigger the alarm; however, this separation of the alarm
    from the alarm trigger makes it easier to reuse the `Doorbell` class as an alerting
    mechanism in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choosing class names can be tricky. However, it is very important to choose
    the correct class name, as it will make it easier to build your application with
    class names that fit the purpose they are intended for. Class names are usually
    nouns, and the methods inside the classes are verbs. Generally, it is better to
    have a class represent one thing or idea. For example, we named our class `Doorbell`,
    as we have designed it to encapsulate what a doorbell does: alert the user that
    someone is at the door. Taking that idea into account, it makes sense that the `Doorbell`
    class would contain code to light up an LED, sound a buzzer, and send a text message,
    as those three actions fall under the idea of alerting a user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we define our class, we create class variables that are used in our class
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `init` and `setEnvironment` methods set the variables we use in our class.
    The `test_env` variable determines whether we use the Twilio test or live environments
    in our code. The test environment is used by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `doorbell_sequence`, `sendTextMessage`, and `light_show` methods are similar
    to methods we've covered previously in this book. It is through these three methods
    that we alert a user that someone is at the door. Of note here is the return value
    sent from the `sendTextMessage` method: `return 'Doorbell text message sent -
    ' + message.sid`. By having this in the code, we are able to use the `sendTextMessage` method to
    provide a printed confirmation in our shell that a text message has been sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned previously, the Blue Dot portion of our code sits outside of the
    class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The previous code is something we've seen before. We define the `pressed` method, where
    we instantiate a new `doorbell` object, and then call the `doorbell_sequence`
    method of `doorbell`. The `blue_dot` variable is a `BlueDot` object, where we
    are only concerned with the `when_pressed` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of note here is the line containing the `doorbell = Doorbell(2, 0.5, ''There
    is someone at the door'')` statement. In this line, we instantiate a `Doorbell`
    object, which we call `doorbell`, with `num_of_rings` equal to `2`; `ring_delay`
    (or duration) equal to `0.5`; and a message equal to `There is someone at the
    door`. We do not pass in a `test_env` environment value. Thus, the default setting
    of `True` is used to set our `doorbell` object to use the Twilio test environment,
    where no text message is sent. To change it so that a text message will be sent,
    change the statement to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you set up the Twilio account parameters accordingly. You should
    get a text message on your cell phone telling you that someone is at the door.
    The following is the message I received on my iPhone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d69e13e-94fe-4952-8dc1-998cca3258f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a secret doorbell application with text messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the ability to send a text message whenever someone pushes
    the big blue button on our Android device, let''s make it a bit more complicated.
    We will modify the `SecretDoorbell` class we created in [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml), *Creating
    a Doorbell Button Using Bluetooth*, and give it the ability to send text messages
    telling us who is at the door. Like we did previously, we will put all our code
    into one file to keep it compact:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SecretDoorbell.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Blue Dot app on your Android device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swipe the blue dot downwards from the top position
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should hear the buzzer sound once for about three seconds, and see the
    RGB LED perform its light show once. Something similar to the following will be
    displayed at the bottom of the shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As in the previous project, we will get a message indicating that a text message
    was sent, but we will not actually receive a text message, due to being in the
    Twilio test environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we get our application to send us a text message that will tell us who
    is at the door based on how they swiped, let's take a look at the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `SecretDoorbell.py` file is exactly the same as our `Doorbell.py` file,
    with the exception of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The class, `SecretDoorbell`, is created as a subclass of `Doorbell`, thereby
    inheriting the methods from `Doorbell`. The `names` array that we created stores
    the names and ring properties associated with the names in the array. So, for
    example, the first element has the name of `Bob`, a `num_of_rings` value of `4`,
    and a `ring_delay` (duration) value of `0.5`. When this record is used in a live
    Twilio environment, you should hear the buzzer and see the RGB LED light show
    cycle four times, with a short delay between the the rings. The `init` method
    of `SecretDoorbell` collects `person_num` (or, basically, position information
    in the names array) and uses it to instantiate the `Doorbell` parent class. The
    `test_env` value is defaulted to `True`, meaning we can only turn on the live
    Twilio environment by specifically overriding this value. This keeps us from accidentally
    using up our Twilio account balance before we are ready to actually deploy the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The Blue Dot code in our file sits outside of the `SecretDoorbell` class definition.
    We did the same in the previous project, as it allows us to keep the doorbell
    functionality separate from the doorbell trigger (the Blue Dot app on our Android
    device).
  prefs: []
  type: TYPE_NORMAL
- en: In our Blue Dot code, we instantiate a `BlueDot` object that we call `blue_dot`,
    before assigning the `when_swiped` event to `swiped`. In `swiped`, we instantiate
    a `SecretDoorbell` object with the value of `0` for the `swipe.up` gesture, `1` for `swipe.down`,
    `2` for `swipe.left`, and `3` for `swipe.right`. These values correspond to the
    array positions in the names array of the `SecretDoorbell` class. We do not pass
    in a value for `test_env` when we instantiate a `SecretDoorbell` object for any
    of the gestures, thus a text message is not sent. Just as in the previous project,
    we print to the shell the successful result of running the `doorbell_sequence`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have a text message sent, we only have to override the default `test_env`
    value with the `False` value. We do this when we instantiate a `SecretDoorbell`
    object for our swipe gestures in the `swiped` method. Our code is designed in
    such a way that we can have a text message sent for one or many gestures. Modify
    the following `elif` statement in `swiped`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: What we have done here, is turn on the live Twilio environment for the `swipe.down`
    gesture by overriding the `test_env` variable. The `1` value, which we instantiate
    our `SecretDoorbell` object with, corresponds to the second element in the `names`
    array in `SecretDoorbell`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, when you run the app and swipe from top to bottom on the blue dot, you should
    receive a text message from Twilio saying that Josephine is at the door, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fa0067b8-c184-4ae2-9be1-281df3a40d2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to add text messaging to our doorbell application.
    This creates a doorbell fit for the age of the Internet of Things. It's easy to
    see how the concept of the IoT Bluetooth doorbell could be expanded—imagine turning
    on the porch lights when someone pushes the doorbell.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see how the Blue Dot app could be utilized in other ways as well.
    We could program a certain swiping sequence with our Blue Dot app, perhaps to
    unlock the door. Imagine not having to carry around keys!
  prefs: []
  type: TYPE_NORMAL
- en: This is the last chapter before we introduce our robot car. In the following
    chapters, we will take the concepts we have learned so far and apply them to a
    robot that we control through the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does the Blue Dot app connect to our Raspberry Pi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Running a message through the Twilio test environment creates
    a text message that is sent to your phone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the service we use to send text messages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We create our `SecretDoorbell` class as a subclass of the `Doorbell`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the four Blue Dot gestures we use in our second application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Naming a class in a way that describes what it does makes coding
    easier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `Doorbell` and `SecretDoorbell`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Josephine's ring pattern involves one long buzzer sound.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? You need to use an Android phone in order to receive text messages
    from our applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should Constance swipe the blue dot, so we know that it's her at the door?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We touched a little on the Twilio service. However, there is still more to learn—visit [https://www.twilio.com/docs/tutorials](https://www.twilio.com/docs/tutorials)
    for more information.
  prefs: []
  type: TYPE_NORMAL
