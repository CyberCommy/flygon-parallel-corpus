- en: Chapter 8. Ajax Mashups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and consuming web services using PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Flickr API with Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Twitter API with Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating text using Google Ajax API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for a location within a Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching within XX km. radius of Google Map with markers and Info window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps with markers and Info window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a city/country using IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting currencies using Ajax and PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of web services is one of the important qualities of the web developer
    these days. In this chapter, we first go through consuming the web services provided
    by the popular websites.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will be learning about the introduction of popular web services
    formats like SOAP, REST, and XML-RPC. After that section, we will learn how to
    interact with the API of various popular web applications like Flickr, Twitter,
    Google Translate, Google Maps, and a Currency Convertor using foxrate.org's XML-RPC
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a typical web-based application, a web client (usually a browser) sends an
    HTTP request to a web server and the web server sends the response via the HTTP
    protocol to the client.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's suppose you want to get the weather report of a particular
    city. In this scenario, you visit a news portal and search for your city's weather
    report via HTML in that news portal.
  prefs: []
  type: TYPE_NORMAL
- en: But, web services act in a different manner. Rather than allowing access to
    the information via HTML pages as we mentioned above, web services cause a server
    to expose application logic, which the client can use programmatically. In simple
    words, it means that the server exposes a set of APIs (that is, functions) that
    a client can call. Thus, a web service is an exposed application on a server,
    which a client can access using the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Since the API exposed using web services should be platform independent, XML,
    as well as JSON, is used for the communication between the client and the server.
    The set of functions that a server exposes is usually described using a language
    called Web Services Description Language (WSDL).
  prefs: []
  type: TYPE_NORMAL
- en: '**Web services** are a set of tools that can be used in a number of ways. The
    three most common styles of using them are REST, XML-RPC, and SOAP.'
  prefs: []
  type: TYPE_NORMAL
- en: While creating web widgets, we may have to use various standards of web services
    and let's glance through these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SOAP, formerly defined as **Simple Object Access Protocol**, is one of the most
    popular methods of accessing remote procedures on the Internet. It is a protocol
    for exchanging XML-based messages from client to server normally using HTTP and
    HTTPS protocol. SOAP procedures that are exposed in the XML format can be used
    from a client using SOAP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'SOAP is an XML-based messaging-protocol. A SOAP request in XML format contains
    the following main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Envelope This defines the document as a SOAP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Body Element This contains the information about the procedure call with parameters
    and expected response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optional headers and fault element These contain supplementary information about
    the SOAP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A typical example of how a SOAP procedure can be used is a website exposing
    a function called `addTwoNumbers()` to add two numbers and send the response to
    the SOAP client. Since SOAP's request and response are sent using XML format they
    are platform independent and can be called from the remote server.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP is criticized for its substantial complexity, with the necessity to serialize
    the remote call and then construct a SOAP envelope to contain it. Due to this
    complexity, the REST way is becoming popula for using web services.
  prefs: []
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: REST stands for *Representational State Transfer*, and probably the most popular
    way to create and utilize web services these days. It is a simple yet powerful
    method of creating and consuming web services. REST is sometime known as **RESTful
    Web Services**. RESTful web services uses HTTP or a similar protocol by constraining
    the interface to the standard operations like GET, POST, and PUT methods. REST
    focuses on interacting with stateful resources rather than messages or operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two main principles of RESTful web services are:'
  prefs: []
  type: TYPE_NORMAL
- en: Resources are represented by URL. Resources can be thought of as an entity that
    a user can access as an API of a web service. Each resource in a REST application
    has a unique URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations in RESTful Web Services are carried out by standard HTTP operations
    such GET, POST, and PUT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at an example to understand the REST principle. Suppose that we've
    a marketplace website where merchants can upload, view, and delete the products.
    Let's look at the RESTful interface of web services of the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: Each Product detail can be accessed from a unique URL. Let's suppose it is [http://marketplace-website.com/product/123](http://marketplace-website.com/product/123)
    and the HTTP GET method can be used to get the details of the product from the
    preceding URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTTP POST method can be used to post a new product to the website with the
    details specified by the server in a particular URL specified by the server and
    the server responses with information regarding the product upload.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTTP DELETE method can be used to delete the particular product from the
    website using a unique URL for this operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML-Remote Procedure call is another way of providing and consuming web services.
    XML-RPC uses XML to encode the request and response of the services and HTTP as
    a transport medium for them.
  prefs: []
  type: TYPE_NORMAL
- en: XML-RPC is a very simple protocol for using and consuming web services. It has
    a definite set of XML formats for defining the procedure, the data type, and commands.
    XML-RPC is designed to be as simple as possible. It allows complex data structures
    to be transmitted, processed, and returned using its procedures. Let's look at
    an XML request format for calling a remote procedure using XML-RPC and then look
    at the response returned by the server in XML-RPC format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, XML format for sending requests is fairly simple and even the
    data types of the parameters are defined in the procedure call. Now, let''s look
    at the response to the preceding call in XML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you see, the XML response is very simple to understand. That's why XML-RPC
    is also used in many websites providing web-services.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and consuming web services using PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP can be used for creating and consuming web services. PHP has powerful libraries
    for creating and consuming web services that use SOAP or XML-RPC or REST.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to understand how to consume web services in PHP using a simple example.
    In this example, we're going to get the details of a phrase from the API of Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wikipedia ([http://www.wikipedia.org](http://www.wikipedia.org)) is a free web-based
    multilingual encyclopedia. Almost all of its articles can be edited by anyone
    if they have more information about the subjects. It is probably the largest and
    most popular website where people find information about general knowledge or
    specific topics. Currently, Wikipedia has articles in 282 languages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wikipedia has an API at [http://en.wikipedia.org/w/api.php](http://en.wikipedia.org/w/api.php),
    which can be used for various purposes to access and modify the information at
    Wikipedia.org. In our example, we're just getting an explanation of a term using
    Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: 'To invoke the API call, we need to access the following URL of the Wikipedia
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/w/api.php?format=xml&action=opensearch&search=PHP&limit=1](http://en.wikipedia.org/w/api.php?format=xml&action=opensearch&search=PHP&limit=1)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding URL, the parameter of the API call is self explanatory.
    We're accessing the action called opensearch of API with the search keyword PHP.
    We're limiting the result to 1 and the output we're getting is in XML format.
    Now, let's look at the XML output the preceding API call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the preceding code, we get an XML result containing a definition
    of the keyword PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to look at an example PHP code to call the Wickipedia API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Example of a Wikipedia API call using PHP**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to understand the preceding code line by line. The first two
    lines of the code are initialization of the variables with the search keyword
    and forming the URL for the API call. Now, let''s try to understand the other
    lines of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line initializes the new session of CURL. The CURL library is
    used for transferring data using various protocols over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: To use the CURL function, make sure that your PHP is compiled with CURL library
    support otherwise you'll end up having a Fatal Eorror while trying to execute
    the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at other lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `curl_setopt()` function is used to set the different options of the CURL
    execution. The `CURLOPT_URL` option is used for setting the URL of the call. `CURLOPT_RETURNTRANSFER`
    is set to 1, which means that the response received by executing `curl_exec()`
    is not output directly but returned as a string. Furthermore, `CURLOPT_USERAGENT`
    is used to set the User Agent of the call to a meaningful one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's very important to set the proper User Agent while making API calls in some
    cases; otherwise the API server might reject your call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After that, the CURL call is executed with the `curl_exec()` function. The XML
    response is saved in the `$xml_reponse` variable. The `$xml_reponse` variable
    is parsed using the **Simplexml** parser of PHP. And, if it is a valid response
    then the XML node Description exists, which is sent as output to the browser using
    the `echo` statement in the last line.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After executing the preceding code, you'll see the following output in the browser,
    which is just the description of Facebook you got form the API response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Facebook (stylized facebook) is a social networking service and website launched
    in February 2004, operated and privately owned by Facebook, Inc**.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Flickr API with Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at using Flickr API to retrieve images from Flickr.com
    with the specified search tag that is input from the textbox. In this section,
    we will see how to use the JSONP web services provided by Flickr using jQuery
    to get the response directly in JavaScript itself and parse it and display it.
    We're not using PHP in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JSONP**, JSON with padding, is an enhanced format of JSON data in which JSON
    data is wrapped inside function calls, which allows a page to access the data
    from a different domain. JSONP allows us cross-domain communication with the help
    of the`<script>` element. The `XMLHttpRequest` object of JavaScript, which is
    widely used in Ajax applications, is not capable of cross-domain communication
    due to restrictions of modern browsers. JSONP comes in handy to overcome such
    situations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to understand how JSONP works. JSONP is nothing more than arbitrary
    JavaScript code that is executed as a function call. Let''s try to understand
    with an example. First let''s look at a simple JSON data of item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this data can be easily passed to a function as parameter too, like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's suppose the preceding code is the response from the `product.php` from
    a domain called `example.com`; then the preceding code can be executed from any
    other domain with the help of a `script` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Whichever page uses the preceding script tag, the code `itemsDetails({'name':'iphone'
    , 'model':'3GS' })`; is executed, which is just a function call.
  prefs: []
  type: TYPE_NORMAL
- en: So in conclusion, JSONP is padded or prefixed JSON data that is wrapped inside
    a function call to make cross-domain communication possible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s look at what our Flickr search with tags application looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is just a simple application where you will enter the keyword and our application
    will search for photos containing the tag and display them. We will use the Flickr's
    public photo feed available at [http://www.flickr.com/services/feeds/docs/photos_public/](http://www.flickr.com/services/feeds/docs/photos_public/).
  prefs: []
  type: TYPE_NORMAL
- en: The sample URL of the feed to find the photos containing the tag sky and get
    an API response in JSON format can be invoked like the following with the parameters
    **tags** and **format:**
  prefs: []
  type: TYPE_NORMAL
- en: '`http://api.flickr.com/services/feeds/photos_public. gne?tags=sky&format=json.`'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the code of the application that uses JSONP web services
    form Flickr API to search for images by tags and show them. The source code of
    this example can be found on the `example-2.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have had a good look at the preceding code already. Even so, let's
    try to understand the main part of the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're just defining CSS styles to elements. The first declaration with
    `#photos` sets that the top margin of the element will be 20 pixels. Another CSS
    declaration, `#photos img` is applied to all the`<img>` elements inside the element
    with ID `photos`. In the second declaration, we've set the height of the image
    elements to 140 pixels along with a margin of 10 pixel at the right and bottom.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery library for the application is hosted in Google. We can use it directly
    in our application to save the bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We're using version 1.4.2 of jQuery here. Now, let's look at the actual jQuery
    function for handling the submission of the form while searching for a photo using
    a tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here we've attached an event handler to a form with ID **photoform** to the
    submit event. This function is called whenever the form is submitted. The first
    line stores the value of the textbox, which has ID keyword, to a JavaScript variable
    called `keyword`. The next line shows the **Please wait.**. message in the photo
    container element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, after that we're using jQuery's powerful `getJSON` function to get the
    JSONP data of from the remote domain. Remember that the variable `data` in the
    callback function holds the JSON data returned from the JSONP API call.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding API call, we've specified the `jsoncallback` parameter, which
    is set to `?`. This means that jQuery automatically replaces `?` with a correct
    method name, automatically calling our specific callback.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code removes the elements that are child nodes of the photo container
    that is, `#photo`. Before looking at how JSON data is parsed and displayed using
    jQuery, let's first look at the sample JSON response sent by the Flickr feed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After looking at the preceding response format, now let's look at how preceding
    JSON response is parsed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you know `data` is a variable that holds the JSON data. The `data.items`
    array holds individual items of the response. This data is looped over using the
    `each()` function of jQuery. The callback function of the `each()` function accepts
    two arguments; the first one is the index and the second one is the value itself.
    As you can see above in the JSON response format response, the image URL of Flickr
    can be accessed from the loop using the `item.media.m` variable. The `append()`
    function of jQuery is used to append the images to the photo container element.
  prefs: []
  type: TYPE_NORMAL
- en: And there is a `return false`; statement at the end of the callback of the form
    `submit()` function to prevent the form from submitting, which leads to reloading
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from JSON, Flickr provides feeds in many different formats like RSS, Atom,
    SQL, YAML, and so on. You can use these formats of feeds according to your application
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more functions of the Flickr API, like uploading photos, getting
    friend's photos, and so on, then you can look at Flickr's API in detail at [http://www.flickr.com/services/api/](http://www.flickr.com/services/api/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Twitter API with Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to create a tool using PHP and Ajax that uses
    Twitter search API to retrieve the tweets from the user containing the searched
    for keyword. We will use Ajax, PHP, and Twitter API to make this tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can call the Twitter search API as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://search.twitter.com/search.format?q=your_query_string](http://search.twitter.com/search.format?q=your_query_string)'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous call, the `format` can be replaced with `json` or `atom`. Furthermore,
    we can make a JSONP call with the extra `callback` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://search.twitter.com/search.format?q=your_query_string&callback=?](http://search.twitter.com/search.format?q=your_query_string&callback=?)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose we want to search tweets with **php** in the search keyword
    and have the response in JSON format; then we can call the Twitter API like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://search.twitter.com/search.json?q=php](http://search.twitter.com/search.json?q=php)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here you can see the interface of the Twitter search application using Ajax.
    This is a very simple interface with minimal CSS. There is a textbox where user
    the enters the search keyword and hits the **Search** button. This search keyword
    is passed to the PHP script via Ajax and the PHP script gets the result from Twitter
    by calling the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's look at the code of this application. There are two files associated
    with this example. One file is `example-3.html` which has the JavaScript, CSS,
    and HTML code for the front-end operations. The other is the `twitter.php` file
    that is called via Ajax to fetch the result from Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at the code of `example-3.html:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see in the preceding code, there is an Ajax call to the `twitter.php`
    file. Let''s see the code of the `twitter.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at the code and its interface, now let's look at how it really
    works in detail.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at the `example-1.html` file. It has CSS styles at the top
    that we don't need much explanation about.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the HTML code is also self-explanatory; I think you will not have
    a hard time trying to understand it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s jump to the jQuery code and understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've assigned the value of the textbox with ID `keyword` to the JavaScript
    variable called `keyword`. After that, we've put the informative message to the
    element with ID `tweets` to show it until the response is received from Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the preceding code, we''re calling the Ajax function of jQuery with
    a parameter query that has the value of the text entered in the textbox. Once
    the Ajax request is completed, the successful response is inserted into the #tweets.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the type of request is not specified in jQuery's Ajax function, the default
    request type will be GET.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''ve seen in the preceding code, there is an Ajax call to `twitter.php`.
    Now, lets'' go through the code of the `twitter.php` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: These first two lines are the key lines of the code. In the first line, we're
    getting the content of the search result from Twitter using the `file_get_contents()`
    function of PHP. The response is then stored in the `$raw_data` variable. In the
    second line, the JSON data is converted into PHP variables using the `json_decode()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before looking at the remaining part, let''s look at the JSON response we get
    from Twitter API with the search API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see the sample JSON response from Twitter in the preceding code snippet,
    the response is available in the results variable in the form of an array. Now,
    let's look at the PHP code that is used to parse the preceding response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous code, first we're counting of the number of tweets
    returned as JSON data. If there are more than zero results then we're parsing
    each individual tweets and displaying them on `li` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Translating text using Google Ajax API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the Google Ajax API to translate text from
    one language to other languages. Google provides Ajax APIs for a large set of
    operations, like for Google Map, language translation, charts, and so on. In this
    part, we will look at how to use Google translate Ajax API to translate text from
    one language to another language.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the Google Ajax API, we first need to sign up the key for your particular
    domain. You can get the API key for Google Ajax API form this URL: [http://code.google.com/apis/loader/signup.html](http://code.google.com/apis/loader/signup.html).
    After getting the API key, you can insert the Google API with the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after calling the URL, we can load the particular module for the application.
    Let''s say we''re going to use the Ajax language API; then we can load it like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: where the first parameter is the module you want to use on your page. Here,
    we're using the language module. The second argument is the version of the particular
    module, which is 1 here in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is also a third parameter in the `load()` function, which is `packages`.
    This is optional and can be used when required. For example, to load Google visualization
    module with the corechart package we use the following code: `google.load(''visualization'',
    ''1'', {''packages'':[''corechart'']})`;'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's take a look at the interface of the language translation tool that
    we have built using the help of the Google translate API.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the interface is simple and minimal.
    There is a text area where you can enter the text to be translated. Below that,
    there is select dropdown where you can select the language to which the preceding
    text needs to be translated. For the example, in this application we've added
    just 5 popular languages in the dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are more languages that Google supports in the translation API. Google
    keeps on adding more language support so for the latest language support, please
    look at the URL for the latest list of languages supported: [http://code.google.com/apis/language/translate/v1/getting_started.html#translatableLanguages](http://code.google.com/apis/language/translate/v1/getting_started.html#translatableLanguages).'
  prefs: []
  type: TYPE_NORMAL
- en: After looking at this tool's interface, now let's look at its code to explore
    how it actually works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at the code, let's look at the details of the main part of the
    code to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at how the JavaScript API is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We're calling the JavaScript API of Google with our API key. After that, in
    the next line of code, we're loading the language module of Google API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the definition of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding, we're calling the `translate_text()` function
    on the submit action of the form. And also remember that the `onsubmit` event
    is expecting a return type. If the return type is `true` the form gets submitted
    otherwise the submit event is not fired.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the `translate_text()` function of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the first two lines of the preceding listing, we're assigning the values
    to the variables `text` and `lang`, which hold the content to be translated and
    language to which that content needs to be translated.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the next 4 lines of the listing, we're just validating whether the
    `text` variable is empty or not. If the content to translate passed is empty,
    `false` is returned to the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user can simply put a space in the textarea to bypass the preceding validation.
    JavaScript doesn't have a built-in `trim()` function like PHP. You can write your
    own or if you're already using a JavaScript library like jQuery in your application
    those libraries usually provide the `trim()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the main part of the Google translate API code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding code, the API has a `translate()` function
    with 4 parameters. Let''s look at each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Text - This parameter contains the text or content that needs to be translated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source language - This parameter is the source language of the text or content
    provided. As you can see in the preceding listing it's blank. If blank, we ask
    the function to auto-detect the source language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination language - This parameter is the destination language to which the
    text needs to be translated. In our case, this variable is the value of the selected
    language from the dropdown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Callback function - The fourth parameter is the callback function that receives
    the result of the translation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the callback function, we're checking first if the result of the translation
    is empty or not. If it is not empty, we're displaying the translated text on the`<div>`
    element with ID `translated_text`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps, probably the most popular mapping service on the Web, is the mapping
    application provided by Google free of cost. Google Maps contains a powerful API,
    by using which Google Maps can be used by different third-party websites for various
    purposes like route planning, finding driving directions and distance, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Google Maps is becoming a very powerful and useful tool day by day as it's been
    widely used by many review-based service applications and many popular mobile
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to embed a Google map to a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Google Map can be embedded in a website using a simple`<Iframe>` code that
    is basically used for displaying the map of a particular location or highlighting
    the landmarks of the location. It can't be used for Google Map API interactions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see the previous image, you can get the Iframe code of the particular
    location from the Google map by clicking the **Link** tab.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But rather than using`<iframe>`, we're more interested in using the JavaScript
    API on the Google Map. So, let's look at an example of using the JavaScript API
    to use the Google Map in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this book, we're using the Google Map JavaScript API version 3.0. The code
    of the other versions of Google Map API might differ. Furthermore, version 3 doesn't
    need an API key to make the call to Google Map API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's try to understand the preceding code in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This is the container where the map is shown. You can see in the CSS styling
    that defines this container defined with the width of 500 pixels and height of
    500 pixels. You can also see that the `showmap()` function is called when a page
    is fully loaded on the `onload()` event.
  prefs: []
  type: TYPE_NORMAL
- en: Now, Google Map JavaScript API can be used in a web page by including the JavaScript
    file of the following URL in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You can see there is a `sensor` parameter specified to `false`. You must specify
    this parameter explicitly. This parameter specifies whether our map-based application
    is using a sensor to determine the user's location or not.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sensor is usually set to `true` on applications like the GPS locators that are
    widely used on mobile phones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at the code of the `showmap()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we're creating the object `Lat_lng` of `latLng` class and
    there are two parameters passed to the constructor. The first parameter is latitude
    and the second parameter is longitude. The latitude and longitude values given
    in the above examples are of Kathmandu, Nepal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the other line we''re creating the `map_options` object for setting different
    options of the map. The center of the map is specified with the `lat_lng` object.
    The zoom level of the map is set to 18\. The third setting is `mapTypeId`, which
    is set to `google.maps.MapTypeId.SATELLITE` for a photographic satellite map.
    Other than this, there are three other map types that are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.ROADMAP` this is the default 2D tile you see on Google
    Maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.HYBRID` this is a kind of satellite map with the feature
    of showing prominent landmarks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.TERRAIN` this type is used for displaying a physical
    map based on terrain information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, using the elementary `google.maps.Map` object we'll display the
    map in the specified container.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter of this object is the DOM object of the container to show
    the map and the second parameter is the options of the map that we've earlier
    defined in the `map_options` object.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's look at how the Google map looks after it's on the web page with the
    above code. This is the satellite map of the center point of Kathmandu, Nepal.
    This is just a simple Google map where you can use functionalities like zooming
    the map, dragging the map to see other places, and viewing different types of
    Map like Satellite, Roadmap or Terrain.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching a location within a Google Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After looking at how to use the Google Map JavaScript API to embed a map in
    a web page, now let's look at a simple application to search the location within
    the Google Map using Google Map API's `GeoCoder()` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tool has a very simple application with a simple interface. You can view
    its interface in the following image. It has a simple textbox where you can enter
    the values. The value can be any location, city, or landmark in the world. Then,
    the Google API's *geocoder* will find the location and point to it. The map will
    be centered to the location we're searching for, if that location is found. A
    red marker, which is the default marker provided by Google Map API, will be placed
    on the found location on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Geocoding is the process of converting an address like "619 Escuela Ave, Mountain
    View, CA" to a geographical coordinate system (37.394011, -122.095528) that is,
    into latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the red marker, a small information window opens that shows
    the full address location returned by Google Map API of the place we're searching
    for.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at how this application's interface works, let's look at the code
    for it. We're using different classes of Google Map API here in this tool. Here
    is the code of the listing that you can find in `example-6.html` in the source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at the code, now let's have a look at the details of how the code
    of this application really works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: There are four global JavaScript variables defined in this application. One
    is for the map object, another for the geocoder object of the API, the next one
    is a temporary variable for storing a marker to clear later on—the `temp_mark`
    variable is tricky here and you'll see how it is used for clearing the marker
    from the map because Google MAP v3 doesn't have any predefined function to clear
    markers form the map. The fourth global variable defined in our application is
    for storing the information window object. After looking at the global JavaScript
    variables, let's now look at the different JavaScript functions that are called
    from different events.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding snippet clearly, the `showmap()` function is
    called when the page is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: There is another function `show_address_in_map()`, which is called when we try
    to submit a form and this function returns the `false` value to prevent the form
    from being submitted, which would lead to reloading the page.
  prefs: []
  type: TYPE_NORMAL
- en: Now first, let's have a look at the details of the `show_map()` function; it
    is very similar to the `show_map()` function defined in the last recipe using
    Google Maps. A few differences are that we've moved the `map_obj` variable from
    a local variable to a global variable. Furthermore, the map type we're using here
    in this application is `ROADMAP`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go through the code of another function called `show_address_in_map()`,
    which is called when a form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In the first line of the code, we're declaring a object of the `Geocoder()`
    class. This is one of the main classes of this application; the object of this
    class sends the geocode request to the server. In another line, we're assigning
    the value of the searched address to the `address` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''re sending `geocode` the request to the server with the address parameter
    assigned to the `address` variable. When there is a result, it calls the callback
    function. This function has two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the result array of the `GeocoderResult` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is an object of the `GeocoderStatus` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more details of the Geocoder class from the Google Map API's page
    at [http://code.google.com/apis/maps/documentation/javascript/reference.html#Geocoder](http://code.google.com/apis/maps/documentation/javascript/reference.html#Geocoder).
  prefs: []
  type: TYPE_NORMAL
- en: On the callback function, we're checking the status of the result by comparing
    it with the variable `google.maps.GeocoderStatus.OK`, which means that the results
    variable contains a valid geocoder reponse.
  prefs: []
  type: TYPE_NORMAL
- en: On the next line, we're using the `setCenter()` method of `google.maps.Map`
    class to center the map to the location of the first result returned by the `getcode()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's have look at the response format, that is, the format of the results
    variable to understand the remaining part of the code. This format gives a clear
    understanding of the response object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `results[0].geometry.location` variable is an object of the `google.maps.LatLng`
    type and this is the latitude and longitude together. We're using the `results[0]`
    variable here because the first result returned by the geocoder is the most relevant
    result for the searched address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s proceed further to the other part of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the above listing of the code, we're first checking whether the `temp_marker`
    variable is empty or not. If this variable is not set or empty, then no action
    is taken. But if it contains a marker object, then the marker is removed from
    map using the `setMap()` function. The `setMap()` function is basically used for
    assigning a marker to the map object but when it is set to `null`, it removes
    the marker from the map.
  prefs: []
  type: TYPE_NORMAL
- en: On the next line, we're creating the marker object on the `map_obj` map object
    and the position of the marker will be the first result of the position returned
    by the geocoding service.
  prefs: []
  type: TYPE_NORMAL
- en: And on the next line, the `temp_mark` variable is assigned with the marker object
    that is created for clearing the marker later on for the new search result—which
    avoids showing more than one marker on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the marker, now let''s attach the information window to the
    marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates the information window. The content of the information
    window is set to the formatted result we got as the response of the geocoding
    service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above code, we''re attaching the click event to the marker. When it
    is clicked, the information window is opened using the `open()` function. This
    function accepts two arguments: the first one is a map object and the second one
    is an anchor object, and in our case the anchor object is the marker object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line is used to alert a popup to display the information and
    status of the address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Searching within XX km. radius of Google Maps with markers and Info window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After looking at how to find the location within a Google Map using a textbox,
    now, let''s move on to a slightly more complex application called a "Resturant
    finder application". This application is a simple but a powerful one. When the
    user enters a place in the textbox, the application looks for the restaurants
    within the radius of the specified number of kilometers from the searched location.
    We will use the Haversine formula to find the circular distance. You can read
    more about it from here: [http://en.wikipedia.org/wiki/Haversine_formula](http://en.wikipedia.org/wiki/Haversine_formula).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's have a look at the details of how this application looks and how
    to create it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at what the application looks like, now let's look at the background
    knowledge required like the Haversine formula and database structure and data
    required for this application.
  prefs: []
  type: TYPE_NORMAL
- en: Haversine formula for calculating circular distance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before getting into the code, first let''s try to understand how to use the
    Haversine formula to calculate the circular distance from one place to another
    place when we''ve longitude and latitude of both places. If you''re good in math,
    the URL [http://en.wikipedia.org/wiki/Haversine_formula](http://en.wikipedia.org/wiki/Haversine_formula)
    in Wikipedia has the in-depth detail about it. For clear understanding of Haversine
    formula, please look at the URL: [http://www.movable-type.co.uk/scripts/latlong.html](http://www.movable-type.co.uk/scripts/latlong.html).
    It has example code in JavaScript as well as a formula in Excel. Referring to
    the above URL, let''s have a look at the Excel formula to calculate the distance
    between two locations which is:'
  prefs: []
  type: TYPE_NORMAL
- en: =6371*ACOS(SIN(RADIANS(lat1))*SIN(RADIANS(lat2))+COS(RADIANS(lat1))*COS(RADIANS(lat2))*COS(RADIANS(lon2)-
    RADIANS(lon1)))
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the above, 6371 is the radius of the Earth in kilometers. If you want to
    find distance in miles, please replace 6371 with 3959\. Please also note that
    the trigonometry functions accept the angle in radians and not in degrees, so
    angles are converted into radians before passing them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to convert it into SQL query because that is how we are going
    to use it in this application for finding the distance between two places.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In this formula `(lat1, lon1)` is the geographical coordinates of one place
    while `(lat2, lon2)` is the coordinates of another place.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since this application is based on a database table, now, let''s create the
    table structure for this application. The following is the SQL code to create
    the table that is used for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to see the details of the different fields we''ve used for this
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: id - this is the primary key field for this table. The data type of this field
    is integer with a maximum of 11 digits. The `AUTO_INCREMENT` property specifies
    that the value of this field is auto-incremented with 1 (with the previous highest
    value) if this field's value is not specified in the INSERT statement or query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name - this is a varchar field with a length of 60\. This field holds the name
    of the restaurant in our application. Please increase the size from 60 to more
    if you feel that it's not enough for your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: address - this field is a varchar field with a length of 90\. This field holds
    the address of the restaurant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lat - This fields holds the latitude value for the location of the particular
    restaurant. We've specified the data type of this field as the float type with
    length of (9,6), which means that it can hold 9 digits with 6 digits of precision
    after the decimal. So, the range of the values this fields falls from 999.999999
    to 999.999999\. Because of the current Google MAP API's zoom level capabilities,
    we don't require more than 6 digits of precision after the decimal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lon - this field holds the longitude value of the location of the restaurant.
    The field type and length of field is same as for the lat, which is float and
    (9,6) respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After looking at the table we''ve used for the application, let''s look at
    the sample data we''re using for this application. We are using very few data
    as it''s just for testing purposes. The following are the SQL statements to create
    the sample data of restaurants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: You can execute the above SQL code to insert the data in your favorite MySQL
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: In this application, we used location data for sample purposes and it has been
    made available for testing. If you want to test the example with more data and
    you know the location of the place but you don't have the geographical coordinate
    data of a location, you can take the help of Google Geocoding API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose we want to know the latitude and longitude of the location of
    the place called "Thapathali, Kathmandu"; then we can send the request to Google
    Geocoding API with the following Request URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://maps.googleapis.com/maps/api/geocode/json?address=thapathali,kathmandu,Nepal&sensor=false](http://maps.googleapis.com/maps/api/geocode/json?address=thapathali,kathmandu,Nepal&sensor=false)'
  prefs: []
  type: TYPE_NORMAL
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`json` in the URL is the format of the response; if you want the response in
    XML then you can replace `json` by `XML`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `address` parameter contains the address of the location that you want to
    geocode into latitude and longitude.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response will be in JSON format and you can easily parse it and use it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, let's have a look at the interface of this application. There
    is a textbox where users enter the location. Then, using the Google Map API's
    geocoding service and data stored in PHP, we will find the distance within the
    radius of 10 kilometers of the searched place in our example.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After looking at some background knowledge required to make the application,
    now, let's look at the code that builds this application.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at the code of the `example-7.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After looking at this example, let''s now look at the code of the `restaurant-result.php`
    file that is called from Ajax when the latitude and longitude are submitted from
    the `search_near_by()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After looking at the code, let's try to understand how this application's code
    works. First, let's try to understand the code of the `restaurant-result.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In the above line the RADIUS variable is defined to 10, which means that we're
    searching the region within the radius of 10 kilometers of the location. You can
    change the value here according to your need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: In the first two lines of the preceding code, we're get the values of the latitude
    and longitude from the Ajax call. After that we create the SQL query to find the
    locations within the radius of 10 kilometer distance from the searched location.
    Also note that we're getting the first 10 results from the SQL query.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to create the XML format that we're using later on to create
    markers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: While creating the XML, we're using the `htmlentities()` function to convert
    the special characters like`<, >` into HTML entities like`&gt, &lt`, and so on
    to avoid malformation of the XML data because of these special characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the XML output generated by the `restaurant-result.php`
    script by calling this function on a browser like `restaurant-result.php?lat=27.6862181&lng=85.31491419999998`
    where this specified latitude and longitude belong to the location ''Kupondole,
    Lalitpur, Nepal'':'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: After looking at the PHP code and the XML output of the closed restaurants,
    now let's have a look at the JavaScript code in the `example-7.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at the code of the `search_map()` function first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In this function `search_map()`, we're using the geocoding functionality of
    the Google Map API to convert the address into latitude and longitude using the
    `geocode()` function. If the address is found and the geocoding result is returned
    successfully, the map is centered to the first location found using `setCenter()`
    function. Then, the `search_near_by()` function is called with the parameter `results[0].geometry.location`,
    which is the object holding latitude and longitude value of the closet matched
    location from the searched address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, first let''s look at the first two lines of the `search_near_by()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: As you can see clearly, we're making an Ajax request to the the PHP file `restaurant-result.php`
    using jQuery's `get` function that sends the Ajax request with the `get` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `data` variable contains the XML response containing the information of
    the closest restaurants found returned from the server-side response.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look how at the XML response is parsed in the `search_near_by()`
    function in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In the above, the `data.documentElement` refers to the root node of the data
    object. The `markers` variable contains nodes with the name marker as it gets
    returned by the `getElemementByTagName()` DOM function.
  prefs: []
  type: TYPE_NORMAL
- en: After that going through the each XML nodes in the loop, we've called the function
    called `create_marker()` to create the marker of each location returned from XML.
    Please note the `point` variable is an object of `LatLng` class as the `marker`
    class requires it to create the marker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the create marker function that creates the markers and
    information window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this function, first we're creating an HTML format to show on the information
    window. After that we're creating a marker object and pushing this marker object
    into the `markers_arr` variable. We will use the `markers_arr` to store the `marker`
    object temporarily so it can be cleared from the map later on the next location
    search. Thus, we're attaching a click event to the marker for showing an information
    window with the provided content.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's have a closer look at the `clear_marker()` function that is called
    from the `search_map()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In the above function, `markers_arr` is a global array variable and it contains
    the `marker` object stored from the statement `markers_arr.push(marker)`; in the
    `create_markers()` function. Each marker is removed from the map using the `setMap()`
    function with the null parameter. And finally, the global variable `markers_arr`
    is assigned to an empty array to save some memory.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a city/country using IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will convert an IP address into city and country name. We
    will use the API from [http://www.ipinfodb.com/](http://www.ipinfodb.com/) to
    get the name of the city and country from the IP Address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IpInfodb.com is one of the popular web services for providing IP to country
    and city information using its RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this, first you need to get the access key by registering on the website.
    Once you''ve got the API key then you can make the call. Now, let''s understand
    how to make the API call to the website. The API can be called using the following
    Restful API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://api.ipinfodb.com/v3/ip-city/?format=xml&key=<yourkey>&ip=<your ip>](http://api.ipinfodb.com/v3/ip-city/?format=xml&key=<yourkey>&ip=<your)'
  prefs: []
  type: TYPE_NORMAL
- en: where the format value can be XML or JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Now, after looking at the request API call, let's look at the response to the
    API call for the IP address of 128.88.69.78.
  prefs: []
  type: TYPE_NORMAL
- en: '**<Response>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<statusCode>OK</statusCode>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<statusMessage/>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<ipAddress>128.88.69.78</ipAddress>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<countryCode>US</countryCode>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<countryName>UNITED STATES</countryName>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<regionName>CALIFORNIA</regionName>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<cityName>PALO ALTO</cityName>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<zipCode>94304</zipCode>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<latitude>37.4404</latitude>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<longitude>-122.14</longitude>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<timeZone>-08:00</timeZone>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</Response>**'
  prefs: []
  type: TYPE_NORMAL
- en: The response contains the geographical information about the IP address to which
    it belongs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the factors like the IP address being looked up from an existing database,
    the response of the API might not be 100% accurate. Furthermore, the response
    for a reserved IP like 127.0.0.1 might not lead to any specific result.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After looking at the information about the API of IpInfodb, now let''s look
    at the interface of our application. It has a textbox where you can enter the
    IP address, and the geographic location of the IP address is shown in the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: City Name, Region/State/Province Name, Country Name
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's look at the code that built this application to find the location
    from the IP address.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's have a look at the code of the `example-8.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the above code, there is an Ajax call to `ip.php`. Let''s
    look at the PHP code of the `ip.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After looking at the code of the two files `example-8.html` and `ip.php`, now,
    let''s dig through the code of the first. Let''s go through the PHP code of `ip.php`,
    which is called from Ajax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see above, we''ve used the `filter_var()` along with the `FILTER_VALIDATEIP`
    constant to validate whether the IP address value of the variable `$ip` is a valid
    IP address format or not. This function, introduced in PHP 5.2, is one of the
    powerful validation functions. You can find more about the other filter constants
    that can be used with this function from this URL: [http://www.php.net/manual/en/filter.filters.php](http://www.php.net/manual/en/filter.filters.php).
    If the IP address is not a valid IP address, then we''re assigning the error message
    to the `errormsg` key of the return array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the API call when the IP address is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first we're making the string to form the request that
    is then called with `file_get_contents()`. The XML response is then passed to
    the `simplexml_load_string()` function for parsing, it parses the XML data into
    the SimpleXML object of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SimpleXML parser was introduced in PHP 5 and to use functions like `simplexml_load_string()`,
    you need to have the SimpleXML extension installed in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Now here, we're checking the response value `statusCode` node and depending
    upon the value of this we're forming the Ajax response in the `$return_array`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can't pass the `$return_array` directly to JavaScript, as it is an array
    in PHP. It should be converted into a JSON object so it can be accessed easily
    by JavaScript so in the last line, we've used the `json_encode()` function of
    PHP to encode this array to JSON.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's call `ip.php` with a valid IP address and see the response. For example,
    call
  prefs: []
  type: TYPE_NORMAL
- en: '`ip.php?ip=78.41.205.188` and you''ll get the JSON response as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**{"errormsg":"","city":"AMSTERDAM","country":"NETHERLANDS","region":"NOORD-HOLLAND"}**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the Ajax call we've used in `example-8.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the above Ajax function, we're looking at the JSON response,
    which is there in the `data` variable. First, we're checking whether there is
    an error message or not by checking the `data.errormsg` variable. If there is
    an error, we're displaying it directly in the div with the ID `result`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is no error message, then there are values in the `data.city, data.region`,
    and `data.country` variables and the string is formed to show the location information
    on the div with ID `result`.
  prefs: []
  type: TYPE_NORMAL
- en: Converting currencies using Ajax and PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to convert currencies using Ajax and PHP. In
    this example, we will use the API provided by foxrate.org. Forxrate.org has provided
    the web services in the XML-RPC format. We consumed an XML-RPC web service in
    this example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Foxrate.org''s currency convertor API is located at: [http://foxrate.org/rpc/](http://foxrate.org/rpc/).
    The method name for the XML-RPC call is *foxrate.currencyConvert*. The parameters
    that can be passed to this function are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From currency This is the code of the currency in which original currency amount
    is in. Examples can be USD or GBP. The list of currency codes of currencies can
    be found here: [http://en.wikipedia.org/wiki/ISO_4217](http://en.wikipedia.org/wiki/ISO_4217).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targetted currency This is the currency code of the targeted currency to which
    the amount needs to be converted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amount The third parameter to the method call is the amount that needs to be
    converted from the original currency to the targeted currency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s look at what the response of XML-RPC call to `foxrate.currencyConvert`
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<methodResponse>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<params>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<param>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<value>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<struct>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<member><name>flerror</name><value><int>0</int></value></member>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<member><name>amount</name><value><double>33.016</double></value></member>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<member><name>message</name><value><string>cached</string></value></member>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</struct>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</value>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</param>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</params>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</methodResponse>**'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, its XML-RPC response format has three parameters *flerror, amount*,
    and *message*. The *flerror* contains value 1 if there is error in the call and
    0 if the call is successful. The *amount* is the converted amount and *message*
    contains the error message or other useful messages relating to the call.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's look at the interface of this tool. There is a textbox where you
    can enter the amount that needs to be converted into USD. The second one is the
    select dropdown in which you can select the currency from which the amount is
    to be converted into United States dollars. For demonstration purposes, we've
    used only a few popular currencies here in our example.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's have a look at the code that creates this tool to convert the currency
    using foxrate.org's API. First, let's have a look at the `example-9.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this code, there is an Ajax call to `convert-currency.php`
    using the `load()` function of jQuery. Let's look at the code of `convert-currency.php`,
    which uses the `xml-rpc` function of PHP to call foxrate.org's API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting from `example-9.html`, when you click the "Convert to USD" button,
    it will call the event handler of this button at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we're validating the amount first as to whether it's a valid
    number or not. For this purpose, there is a function called `isNaN()` in JavaScript
    that checks whether the value is a legal number or not a number. That means *isNan*
    refers to is-Not-a-Number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's look at the way of using Ajax using the `load()` function of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The above code makes the Ajax call to the URL in the parenthesis of the `load()`
    function and the response will be injected to the div with ID `output` that is,
    to `#output`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to understand the code of the `convert-currency.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: This line calls the user-defined function called `convert_currency()`. This
    function accepts three argument, the first one, `$from_curr`, is the currency
    that needs to be converted. `TO_CURRRNCY` is the constant defined as the *USD*
    value and `$amount` is the amount that needs to be converted. Now, let's look
    at the `convert_currency()` function.
  prefs: []
  type: TYPE_NORMAL
- en: To encode the XML-RPC request to XML-RPC format, we use the `xmlrpc_encode_request()`
    function generally with two parameters. The first one is the name of the method
    to be called and the second one is the parameter of the XML-RPC call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Now, the next part is to create the stream context with the request method specifying
    POST as specified by foxrate.org.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the content, we''ve the context resource in the `$context` variable
    that can be used with the `file_get_contents()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: where the second parameter of `file_get_contents()` is to specify the use whether
    to `include_path` value set in `php.ini` or not. We've passed it as a `false`
    here. The `$file` variable contains the XML response in XML-RPC format. Now, we
    need to decode it into native PHP types and `xmlrpc_decode()` decodes the XML-RPC
    response to PHP type variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'After decoding the response to PHP, `var_dump($response)` gives the following
    sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**array(3) {**'
  prefs: []
  type: TYPE_NORMAL
- en: '**["flerror"]=>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**int(0)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**["amount"]=>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**float(33.016)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**["message"]=>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**string(6) "cached**"'
  prefs: []
  type: TYPE_NORMAL
- en: '**}**'
  prefs: []
  type: TYPE_NORMAL
- en: where you can see that the response is converted into PHP native type variables.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this `$response` variable is returned from this function and printed
    in the desired output using the `echo` statement.
  prefs: []
  type: TYPE_NORMAL
