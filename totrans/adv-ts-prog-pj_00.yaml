- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a book about TypeScript; but then again, you got that from the title.
    But it's more than just a book about TypeScript. This is a book about how TypeScript
    can be used to go beyond basic examples. That means that this is a book about
    topics that are just that little bit harder than you might already have covered
    in your first forays into the world of TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: So, we could probably rephrase that opening sentence to "This is a book about
    TypeScript and some of the fun and cool ways that you can use TypeScript with
    technologies that are more advanced than ones I've been using before".
  prefs: []
  type: TYPE_NORMAL
- en: Upfront, I will say that this book is not a book about how to program in Angular,
    React,  Vue, or ASP.NET Core. Those are big topics that deserve their own separate
    books (indeed, at the end of each chapter, I do my best to point you toward other
    resources that will help you learn these technologies on a much deeper level than
    the brief chapters we will have on them). Instead, for Angular and React, I try
    to limit the introduction of new features to no more than five new concepts per
    chapter. Where we are using a technology such as Bootstrap, which has a technology-specific
    implementation, we will use the library that is most appropriate, such as `reactstrap`
    for React. We do this because these libraries have been designed to work with
    the **user interface** (**UI**) framework in question.
  prefs: []
  type: TYPE_NORMAL
- en: When we were doing the initial research for this book, one of the questions
    that kept cropping up was, "what's hot right now? What are people using that's
    new and exciting?" This book aims to offer an introduction to some of those technologies,
    including GraphQL, microservices, and machine learning. Again, this book cannot
    teach everything about the relevant technology. What it does do is provide an
    introduction to the technology and show how we can leverage the power of TypeScript
    to make our lives so much easier when developing with it.
  prefs: []
  type: TYPE_NORMAL
- en: One thing we will find as we go through the book is that I tend to focus on
    **object-oriented programming** (**OOP**) pretty heavily. We will be building
    a lot of classes. There are many reasons for this, but the biggest reason for
    this focus is that in early chapters, we are going to be writing code that we
    can make use of in later chapters. I also wanted to write code that you could
    just drop into your own code base if you wanted to. With TypeScript, class-based
    development makes this make this so much simpler. This also gives us the opportunity
    to talk about techniques that we can apply to make code simpler, even when using
    more advanced technologies, so we cover principles such as classes having a single
    responsibility (known as the Single Responsibility Pattern), and pattern-based
    development, where we apply well-known software engineering patterns to complex
    problems to make the solution simple.
  prefs: []
  type: TYPE_NORMAL
- en: As well as TypeScript, we are going to be looking at using Bootstrap for the
    UI for most of the chapters. In the couple of chapters on Angular, we do look
    at using Angular Material instead of Bootstrap for laying out interfaces, because
    Material and Angular go hand in hand, and if you end up developing commercial
    Angular applications, then chances are that you are going to use Material.
  prefs: []
  type: TYPE_NORMAL
- en: The first chapter introduces us to features that we might not have used before,
    such as rest and spread, so we will cover them in more depth there. In later chapters,
    we will be using these features in a way that should become natural, so, rather
    than disturbing the flow of the code by calling out a particular item, we will
    tend to just use the features in a way that becomes second nature. The other side
    to this is that, as we progress through the book, we will find that features from
    earlier chapters will generally be touched on again, so that we don't just do
    something once and then forget about it.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for people who are comfortable with at least the basics
    of TypeScript. If you know how to use the TypeScript Compiler, tsc, to build a
    config file and compile code, and the basics of things such as type safety, functions,
    and classes in TypeScript, then you should be able to get something out of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a more advanced understanding of TypeScript, then there should be
    plenty of material on technologies that you've not used before that will be of
    interest.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](56be9c18-a050-4794-bbd6-c51cd62f8f35.xhtml), *Advanced TypeScript
    Features*, introduces us to features of TypeScript that we may not have encountered
    before, such as using Union and Intersection types, creating our own type declarations,
    and using Decorators to enable aspect-oriented programming, among other features.
    With this chapter, we are going to get familiar with a variety of TypeScript techniques
    that we will use on a daily basis as professional coders.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](3593e33f-7490-47b6-b129-ab5e08aef1b0.xhtml), *Creating a Markdown
    Editor with TypeScript*, is where we write our first practical project – a simple
    Markdown editor. We are going to create a simple parser that we are going to hook
    up, inside a web page, to a text block and use it to identify when the user has
    typed in a Markdown tag and reflect this in a preview area. While writing this
    code, we are going to see how we can use design patterns with TypeScript to build
    more robust solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](0839db17-09f2-4fa8-aa10-1cbce47eaec7.xhtml), *A React Bootstrap
    Personal Contacts Manager*, sees us building a personal contacts manager with
    the popular React library. While we are writing our application, we will see how
    React uses a special TSX file to mix TypeScript and HTML together to produce user
    components. We will also look at how to use binding and state in React to automatically
    update data models when the user changes values. The ultimate aim here is to create
    a UI that allows us to enter, save, and retrieve information using the browser''s
    own IndexedDB database, and to see how we can apply validation to components to
    make sure that input is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](23db6d37-1947-4f7b-9b25-3195c2df7274.xhtml), *The MEAN Stack –
    Building a Photo Gallery*, is the first time we encounter the MEAN stack. The
    MEAN stack describes a specific number of cooperative technologies to build applications
    that run on both the client and the server. We use this stack to write a photo
    gallery application using Angular as our UI, with MongoDB being used to store
    images that the user uploads. As we create the application, we will use the power
    of Angular to create services and components. At the same time, we are going to
    see how we can use Angular Material to create attractive UIs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](05f23d63-20d8-4d72-97af-042e8a5a3864.xhtml), *Angular ToDo App
    with GraphQL and Apollo*, introduces us to the idea that we don''t just need to
    use REST to communicate between a client and a server. One of the hot topics right
    now is the use of GraphQL to create applications that can consume and update data
    from multiple points using GraphQL servers and clients. The Angular application
    we write in this chapter will manage a list of to-do items for the user and will
    further demonstrate Angular features such as using templates to switch between
    read-only and editable features, as well as seeing what Angular provides out of
    the box to validate user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](9b60d7b2-7831-4125-b975-4a10c32b1cae.xhtml), *Building a Chat Room
    Application Using Socket.IO*, further explores the ideas that we don''t need to
    rely on REST communications. We are going to look at how we can establish long-running
    client/server applications in Angular, where the connection between the client
    and the server appears to be kept permanently open so that messages can be passed
    backward and forward. Using the power of Socket.IO, we are going to write a chatroom
    application. To further enhance our code, we are going to use an external authentication
    provider to help us professionally secure our application so that we avoid embarrassing
    authentication failures such as storing passwords in plaintext.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](e8c1594d-72de-47a5-bc5c-29af9b8e84fb.xhtml), *Angular Cloud-Based
    Mapping with Firebase*, it has become impossible to ignore the growth of cloud-based
    services. In this, our last Angular application, we are going to use two separate
    cloud-based services. The first one we are going to use, Bing mapping, will show
    us how to sign up to a third-party, cloud-based mapping service and integrate
    it into our application. We will discuss the effect of scale on costs for this
    service. We will display a map where the user can save points of interest, with
    the data being stored in a separate cloud-based database using Google''s Firebase
    cloud platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](4eb2bf24-c302-4054-82ac-702e0933d533.xhtml), *Building a CRM Using
    React and Microservices*, builds on our experiences with both React and the MEAN
    stack to introduce us to working with the equivalent React-based stack. When we
    first encountered MEAN, we used REST to talk to a single application endpoint.
    In this application, we are going to talk to multiple microservices to create
    a simplified React-based CRM system. We will discuss what microservices are and
    when we would want to use them, as well as seeing how we can design and document
    REST APIs using Swagger. The main takeaway from this chapter is that we introduce
    Docker to show how we can run up our services inside their own containers; containers
    are currently one of the favorite topics among developers when developing applications
    because of the way they simplify the rolling out of applications, and they aren''t
    that hard to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](2d90d890-2cce-4c6d-b230-83dd3e94c441.xhtml), *Image Recognition
    with Vue.js and TensorFlow.js*, introduces us to using our web browser to host
    machine learning using TensorFlow.js. We will write an application using the popular
    Vue.js framework to identify images using pre-trained image models. We will extend
    this to see how to create pose detection applications that recognize which pose
    you are in and can be extended to tracking your poses using a web camera for purposes
    of sports coaching.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](a31a998a-b0e5-4b1b-bc6e-b62c37615028.xhtml), *Building an ASP.NET
    Core Music Library*, is a big departure for us. We have written a number of applications
    now where TypeScript has represented the main coding language that we use to build
    our UIs. With ASP.NET Core, we are going to write a music library application
    where we can enter the name of an artist and search for details of their music
    using the free Discogs music API. We will be using a combination of C# and TypeScript
    to both run queries against Discog and to build up our UI.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a basic knowledge of TypeScript in order to work with the content
    in this book. Knowledge of HTML and web pages would be useful as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where download code uses a package manager such as `npm`, you need to know how
    to restore the packages, because we haven't included them in the repository. To
    restore them, you can use `npm install` in the same directory that `package.json`
    is in, and that will restore the packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last chapter, you won't have to explicitly download missing packages.
    Visual Studio will restore these packages when you build the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at **[https://github.com/PacktPublishing/Advanced-TypeScript-3-Programming-Projects](https://github.com/PacktPublishing/Advanced-TypeScript-3-Programming-Projects)**. In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789133042_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789133042_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "The following `tsconfig.json` file is used".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Typically, Angular is used to create **Single-Page Applications**
    (**SPAs**), whereby small sections of the client are updated rather than having
    to reload the whole page when a navigation event happens."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
