- en: Chapter 2.  Build a Basic Website Using MySQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will look at some basic concepts of a Node.js application
    using a relational database, in this case Mysql.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some differences between **Object Document Mapper** (**ODM**)
    from MongoDB and **Object Relational Mapper** (**ORM**) used by **sequelize**
    and Mysql. For this we will create a simple application and use the resources
    we have available which is **sequelize,** a powerful middleware for creation of
    models and mapping database.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use another engine template called Swig and demonstrate how we
    can add the template engine manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the Swig template engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing default routes from an express generator to the MVC approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Squelize-CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use ORM with Sequelize Models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with database migrations scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to dealing with MySQL database relations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter we will create the following sample application.
    This chapter assumes that you have already installed and are running Mysql database
    on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example application
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to create another directory, as I keep all the chapters under
    git control I'll use the same root folder as chapter 1, *Build a Twitter like
    application using MVC design pattern in Node.js.*
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `chapter-02`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell on this folder and type the express command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using only the `--git` flag this time, we will use another
    template engine but we will install it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Swig template engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to do is to change the default express template engine to use
    **Swig**, a pretty simple template engine very flexible and stable, also offers
    us a syntax very similar to AngularJS which denotes expressions just by using
    double curly brackets `{{ variableName }}`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about **Swig** can be found on the official website at: [https://github.com/paularmstrong/swig](https://github.com/paularmstrong/swig).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `package.json` file and replace the `jade` line with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open terminal/shell in project folder and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we proceed, let''s make some adjustment to `app.js`, we need to add
    the `Swig` module. Open `app.js` and add the following code, right after the `var
    bodyParser = require(''body-parser'');` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the default `jade` template engine line for the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Refactoring the views folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did before, let''s change the `views` folder to the following new structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`views`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pages/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partials/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the default `jade` files form `views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `layout.html` inside the `pages` folder and place the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `index.html` inside the `views/pages` folder and place the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `error.html` page inside the `views/pages` folder and place the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to adjust the `views` path on `app.js`, and  replace the code right
    after `var app = express();` function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: At this time we have completed the first step of starting our MVC application.
    In the previous chapter we used pretty much of the original structure created
    by the express command, but in this example we will use the MVC pattern in its
    full meaning, Model, View, Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controllers folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a folder called `controllers` inside the root project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `index.js` inside the `controllers` folder and place the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `app.js` file and replace the original `index` route `app.use(''/'',
    routes);` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the controller path to the `app.js` file right after `var swig = require(''swig'');`
    declaration, replace the original code with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to check if all goes as expected: we''ll run the application
    and check the result. Type in your terminal/shell the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the following URL: `http://localhost:3000`, and you''ll see the welcome
    message of express framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Removing the default routes folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s remove the default `routes` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `routes` folder and its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `user route` from the `app.js`, after the index controller line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding partials files for head and footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now lets add files for head and footer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `views/partials` folder create a new file called `head.html` and
    place the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `views/partials` folder create a file called `footer.html` and place
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, its time to add the partials file to the `layout.html` page using the
    `include` tag. Open `layout.html` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally we are ready to continue with our project. This time our directories
    structure will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding partials files for head and footer](img/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Sequelize-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sequelize-cli** is a very useful command-line interface for creating models,
    configurations and migration files to databases. It''s integrated with Sequelize
    middleware and operates with many relational databases such as PostgreSQL, MySQL,
    MSSQL, Sqlite.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about Sequelize middleware implementation at:
    [http://docs.sequelizejs.com/en/latest/](http://docs.sequelizejs.com/en/latest/)
    and full documentation of **Sequelize-Cli** at: [https://github.com/sequelize/cli](https://github.com/sequelize/cli).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `sequelize` with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember we always use the `-save` flag to add the module to our `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `.sequelizerc` on the  root folder and place the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'On terminal/shell, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `init` command, the terminal will show the following output message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command also creates the models directory to store application schema,
    a configuration file, and folders to hold seeders and the  migrations script.
    Don't worry about this now, we will look at migrations in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the config.js file with database credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, the `sequelize` command creates many files, including a database
    configuration file. This file has a sample configuration for application databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `config/config.json` and edit the `development` tag with our database
    details, as the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that I'm using user root with no password to connect with my database,
    if you have a different user or are using a different password, replace the previous
    code with your own credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a User scheme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the help of `Sequelize-cli` we will create a simple scheme for application
    users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell at the root project folder and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output on your terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the user model file present at: `models/User.js`, here add `sequelize`
    using the `define()` function to create the User scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that this command created the `User.js` file within the `models` folder
    and also created a migration file containing a hash and the name of the operation
    to be performed on the database within the `migrations` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This file contains the boilerplate necessary for creation of the User table
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Creating Band schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create the schema that will store in the database the data of each band
    that the user creates in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As in the previous step, two files were created, one for migration of data
    and another to be used as a Band model, as the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating associations between Band and User models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the last step before using the schemes migration script, we will need to
    create the associations between the User model and the Band model. We will use
    the following associations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Model** | **Association** |'
  prefs: []
  type: TYPE_TB
- en: '| `Band.js` | `Band.belongsTo(models.User);` |'
  prefs: []
  type: TYPE_TB
- en: '| `User.js` | `User.hasMany(models.Band);` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more about associations at the following link: [http://docs.sequelizejs.com/en/latest/docs/associations/](http://docs.sequelizejs.com/en/latest/docs/associations/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `User.js` model and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `Band.js` model and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database on MySql
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before attempting to access the Mysql console make sure that it is running.
    To check that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and login your Mysql with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, if you are using a different user or password, using the following
    command and replace `youruser` and `yourpassword` for your own credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create our database, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The result after the command will be the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This confirms that the operation was successful, and we are ready to go forward.
  prefs: []
  type: TYPE_NORMAL
- en: Using db migrations to insert data on Mysql
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now is the time to do the migration of the schemes to the database. Again we
    use the `sequelize-cli` for this migration. Before we proceed, we need to install
    a Mysql module manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `Sequelize` interface depends on the individual modules of each
    type of database used in the application, in our case we are useing Mysql
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be the result of the operation above, the output from your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Checking database tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could use your own Mysql console to see if the tables were created successfully.
    However I will use another feature with a graphical interface that greatly facilitates
    the work, as it allows a faster and easier display, and perform operations on
    the basis of data very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: As I am using Mac OSX I will use an application called **Sequel Pro**, it's
    a free and lightweight application to manage MySql databases.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about **Sequel Pro** at: [http://www.sequelpro.com/](http://www.sequelpro.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous command: `sequelize db:migrate` created the tables as we can see
    on the following figures:'
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the Bands table selected on the left side, the right side
    shows its content with the properties we setup on Band schema:![Checking database
    tables](img/image_02_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Band table
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the `SequelizeMeta` table selected on the left side, the
    right side shows its content with `Sequelize` files generated on the `config/migrations`
    folder:![Checking database tables](img/image_02_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Migrations files
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the user table selected on the left side, the right side
    shows its content with the properties we setup on the User schema:![Checking database
    tables](img/image_02_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User table
  prefs: []
  type: TYPE_NORMAL
- en: The `SquelizeMeta` table holds the migration files in the same way that we had
    on migrations folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created the necessary files for data insertion in our database,
    we are ready to move on and create other files for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to create the controls for the models User and Band:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `controllers` folder, create a new file called `User.js` and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the first line of the file imports the `index` model; this file is
    the basis for creation of all the controls, it is the `sequelize` that is used
    to map the other models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same for the Band controller within the `controllers` folder; create
    a file called `Band.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s refactor the `index.js` controller and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note that, using the previous code, we just created a simple list to show some
    albums on the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application templates/views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create the application views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `views/pages` folder, create a new file called `band-list.html`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `views/pages/index.html` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `views/pages/layou.html` and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Adding style to the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll also add a few lines of CSS in the `public/stylesheet` file to style our
    example application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `public/stylesheets/style.css` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Adding routes and a controller to the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will edit the `app.js` file to add routes to the `band-list.html` view and
    also their respective controller:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.js` and add the following lines after the index controller import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code after the index route `app.get(''/'', index.show);`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: At this moment, we have almost all of the application working; let's check the
    result on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser and go to this URL: `http://localhost:3000/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will be the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding routes and a controller to the application](img/image_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Index template of the home screen
  prefs: []
  type: TYPE_NORMAL
- en: If we check out the Band's route at `http://localhost:3000/bands`, we will see
    an empty screen, and the same goes for `http://localhost:3000/users`, but here
    we've found an empty **JSON** array.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add some content to the Band's routes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding database content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add some content in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `mvc_mysql_app.sql` and place the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Open **Sequel Pro**, click on F**ile > Import >**, and select the SQL file `mvc_mysql_app.sql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to your browser and refresh the `http://localhost:3000/bands` page;
    you will see the following result:![Adding database content](img/image_02_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Band-list.html
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Bands form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create the form for the creation of bands using the modal feature
    bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `views/pages/index.html` file and add the following code at the end
    of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the application, open your terminal/shell, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Insert an Album** button, and you can see the band form inside the
    model window, as shown in the following screenshot:![Creating a Bands form](img/image_02_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modal screen
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a new Band
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s check the form behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: **Sepultura**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: **Brazilian Thrash Metal Band**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Best album: **https://s2.vagalume.com/sepultura/discografia/roots-W320.jpg**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Year: **1996**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the  ****save** changes** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the form processes, you will be redirected to `band-list.html` with the
    new record, as the following figure shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting a new Band](img/image_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Band-list.html screen with the new record
  prefs: []
  type: TYPE_NORMAL
- en: 'The `create()` function on the `Band.js` controller is activated with the form
    `POST` and the following code from `Band.js` controller is used to save the data
    and redirect the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Main difference between ODM (mongoose) and ORM (sequelize)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main difference between both database mappers is that Sequelize uses promises
    and Mongoose does not. Promises are easy to handle with asynchronous events. To
    be more clear, let''s see the following code to compare both middlewares:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code block extracted from the `passport.js` file from the previous chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the same code block using the `sequelize` promises function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of the `then()` function is to deal with all returns.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored all the features of the `sequelize-CLI` command
    line to create a mapping of tables in a relational database. We saw how to create
    models interactively using the sequelize model feature `create()`, and we also
    saw how to migrate the schema files to the database.
  prefs: []
  type: TYPE_NORMAL
- en: We started the application with a standard template engine and saw how to refactor
    the engine templates and use another resource for this, the **Swig** template
    library.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to use some SQL commands to connect to the MySQL database and
    some basic commands for creating tables.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the utilization and manipulation of images
    using Node.js and other important resources.
  prefs: []
  type: TYPE_NORMAL
