- en: Chapter 2.  Build a Basic Website Using MySQL Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will look at some basic concepts of a Node.js application
    using a relational database, in this case Mysql.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some differences between **Object Document Mapper** (**ODM**)
    from MongoDB and **Object Relational Mapper** (**ORM**) used by **sequelize**
    and Mysql. For this we will create a simple application and use the resources
    we have available which is **sequelize,** a powerful middleware for creation of
    models and mapping database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We will also use another engine template called Swig and demonstrate how we
    can add the template engine manually.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: How to use the Swig template engine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing default routes from an express generator to the MVC approach
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Squelize-CLI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use ORM with Sequelize Models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with database migrations scripts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to dealing with MySQL database relations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter we will create the following sample application.
    This chapter assumes that you have already installed and are running Mysql database
    on your machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_02_001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: Example application
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline applications
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to create another directory, as I keep all the chapters under
    git control I'll use the same root folder as chapter 1, *Build a Twitter like
    application using MVC design pattern in Node.js.*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `chapter-02`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell on this folder and type the express command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we are using only the `--git` flag this time, we will use another
    template engine but we will install it manually.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Swig template engine
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to do is to change the default express template engine to use
    **Swig**, a pretty simple template engine very flexible and stable, also offers
    us a syntax very similar to AngularJS which denotes expressions just by using
    double curly brackets `{{ variableName }}`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about **Swig** can be found on the official website at: [https://github.com/paularmstrong/swig](https://github.com/paularmstrong/swig).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `package.json` file and replace the `jade` line with the following:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open terminal/shell in project folder and type:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Before we proceed, let''s make some adjustment to `app.js`, we need to add
    the `Swig` module. Open `app.js` and add the following code, right after the `var
    bodyParser = require(''body-parser'');` line:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Replace the default `jade` template engine line for the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Refactoring the views folder
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did before, let''s change the `views` folder to the following new structure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '`views`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '`pages/`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partials/`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the default `jade` files form `views` folder.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `layout.html` inside the `pages` folder and place the
    following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create an `index.html` inside the `views/pages` folder and place the following
    code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create an `error.html` page inside the `views/pages` folder and place the following
    code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We need to adjust the `views` path on `app.js`, and  replace the code right
    after `var app = express();` function with the following code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this time we have completed the first step of starting our MVC application.
    In the previous chapter we used pretty much of the original structure created
    by the express command, but in this example we will use the MVC pattern in its
    full meaning, Model, View, Controller.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controllers folder
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a folder called `controllers` inside the root project folder.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `index.js` inside the `controllers` folder and place the following
    code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Edit the `app.js` file and replace the original `index` route `app.use(''/'',
    routes);` with the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the controller path to the `app.js` file right after `var swig = require(''swig'');`
    declaration, replace the original code with the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now it''s time to check if all goes as expected: we''ll run the application
    and check the result. Type in your terminal/shell the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Check the following URL: `http://localhost:3000`, and you''ll see the welcome
    message of express framework.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Removing the default routes folder
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s remove the default `routes` folder:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `routes` folder and its contents.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `user route` from the `app.js`, after the index controller line.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding partials files for head and footer
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now lets add files for head and footer:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `views/partials` folder create a new file called `head.html` and
    place the following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the `views/partials` folder create a file called `footer.html` and place
    the following code:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, its time to add the partials file to the `layout.html` page using the
    `include` tag. Open `layout.html` and add the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally we are ready to continue with our project. This time our directories
    structure will look like the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding partials files for head and footer](img/image_02_002.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Folder structure
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Sequelize-cli
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sequelize-cli** is a very useful command-line interface for creating models,
    configurations and migration files to databases. It''s integrated with Sequelize
    middleware and operates with many relational databases such as PostgreSQL, MySQL,
    MSSQL, Sqlite.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about Sequelize middleware implementation at:
    [http://docs.sequelizejs.com/en/latest/](http://docs.sequelizejs.com/en/latest/)
    and full documentation of **Sequelize-Cli** at: [https://github.com/sequelize/cli](https://github.com/sequelize/cli).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Install `sequelize` with the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember we always use the `-save` flag to add the module to our `package.json`
    file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `.sequelizerc` on the  root folder and place the following
    code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On terminal/shell, type the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the `init` command, the terminal will show the following output message:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command also creates the models directory to store application schema,
    a configuration file, and folders to hold seeders and the  migrations script.
    Don't worry about this now, we will look at migrations in the next section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Editing the config.js file with database credentials
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, the `sequelize` command creates many files, including a database
    configuration file. This file has a sample configuration for application databases.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `config/config.json` and edit the `development` tag with our database
    details, as the following highlighted code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that I'm using user root with no password to connect with my database,
    if you have a different user or are using a different password, replace the previous
    code with your own credentials.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Creating a User scheme
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the help of `Sequelize-cli` we will create a simple scheme for application
    users:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell at the root project folder and type the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see the following output on your terminal window:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s check the user model file present at: `models/User.js`, here add `sequelize`
    using the `define()` function to create the User scheme:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that this command created the `User.js` file within the `models` folder
    and also created a migration file containing a hash and the name of the operation
    to be performed on the database within the `migrations` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: This file contains the boilerplate necessary for creation of the User table
    in the database.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Creating Band schema
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create the schema that will store in the database the data of each band
    that the user creates in the system.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As in the previous step, two files were created, one for migration of data
    and another to be used as a Band model, as the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating associations between Band and User models
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the last step before using the schemes migration script, we will need to
    create the associations between the User model and the Band model. We will use
    the following associations:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '| **Model** | **Association** |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| `Band.js` | `Band.belongsTo(models.User);` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| `User.js` | `User.hasMany(models.Band);` |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more about associations at the following link: [http://docs.sequelizejs.com/en/latest/docs/associations/](http://docs.sequelizejs.com/en/latest/docs/associations/).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `User.js` model and add the following highlighted code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the `Band.js` model and add the following highlighted code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Creating the database on MySql
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before attempting to access the Mysql console make sure that it is running.
    To check that:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and login your Mysql with the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Remember, if you are using a different user or password, using the following
    command and replace `youruser` and `yourpassword` for your own credentials:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now let''s create our database, type the following command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result after the command will be the following line:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This confirms that the operation was successful, and we are ready to go forward.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Using db migrations to insert data on Mysql
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now is the time to do the migration of the schemes to the database. Again we
    use the `sequelize-cli` for this migration. Before we proceed, we need to install
    a Mysql module manually.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `Sequelize` interface depends on the individual modules of each
    type of database used in the application, in our case we are useing Mysql
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will be the result of the operation above, the output from your terminal:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Checking database tables
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could use your own Mysql console to see if the tables were created successfully.
    However I will use another feature with a graphical interface that greatly facilitates
    the work, as it allows a faster and easier display, and perform operations on
    the basis of data very quickly.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: As I am using Mac OSX I will use an application called **Sequel Pro**, it's
    a free and lightweight application to manage MySql databases.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about **Sequel Pro** at: [http://www.sequelpro.com/](http://www.sequelpro.com/).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous command: `sequelize db:migrate` created the tables as we can see
    on the following figures:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the Bands table selected on the left side, the right side
    shows its content with the properties we setup on Band schema:![Checking database
    tables](img/image_02_003.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Band table
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the `SequelizeMeta` table selected on the left side, the
    right side shows its content with `Sequelize` files generated on the `config/migrations`
    folder:![Checking database tables](img/image_02_004.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Migrations files
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: This picture shows the user table selected on the left side, the right side
    shows its content with the properties we setup on the User schema:![Checking database
    tables](img/image_02_005.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User table
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The `SquelizeMeta` table holds the migration files in the same way that we had
    on migrations folder.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created the necessary files for data insertion in our database,
    we are ready to move on and create other files for the application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application controllers
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to create the controls for the models User and Band:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `controllers` folder, create a new file called `User.js` and add
    the following code:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the first line of the file imports the `index` model; this file is
    the basis for creation of all the controls, it is the `sequelize` that is used
    to map the other models.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same for the Band controller within the `controllers` folder; create
    a file called `Band.js` and add the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now let''s refactor the `index.js` controller and add the following code:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note that, using the previous code, we just created a simple list to show some
    albums on the home screen.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application templates/views
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create the application views:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `views/pages` folder, create a new file called `band-list.html`
    and add the following code:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Open `views/pages/index.html` and add the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open `views/pages/layou.html` and add the following highlighted code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views/pages/layou.html`并添加以下突出显示的代码：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Adding style to the application
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序添加样式
- en: We'll also add a few lines of CSS in the `public/stylesheet` file to style our
    example application.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`public/stylesheet`文件中添加一些CSS行来为我们的示例应用程序设置样式。
- en: 'Open `public/stylesheets/style.css` and add the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`public/stylesheets/style.css`并添加以下代码：
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Adding routes and a controller to the application
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加路由和应用程序控制器
- en: 'We will edit the `app.js` file to add routes to the `band-list.html` view and
    also their respective controller:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编辑`app.js`文件以向`band-list.html`视图添加路由，以及它们各自的控制器：
- en: 'Open `app.js` and add the following lines after the index controller import:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.js`并在索引控制器导入后添加以下行：
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following code after the index route `app.get(''/'', index.show);`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在索引路由`app.get('/', index.show);`后添加以下代码：
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: At this moment, we have almost all of the application working; let's check the
    result on the browser.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们几乎完成了应用程序的所有工作； 让我们在浏览器上检查结果。
- en: 'Open your terminal/shell and type the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端/ shell，并键入以下命令：
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Open your browser and go to this URL: `http://localhost:3000/`
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到此URL：`http://localhost:3000/`
- en: 'The result will be the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是以下截图：
- en: '![Adding routes and a controller to the application](img/image_02_006.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![添加路由和应用程序控制器](img/image_02_006.jpg)'
- en: Index template of the home screen
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 主屏幕的索引模板
- en: If we check out the Band's route at `http://localhost:3000/bands`, we will see
    an empty screen, and the same goes for `http://localhost:3000/users`, but here
    we've found an empty **JSON** array.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查`http://localhost:3000/bands`上的Band路由，我们将看到一个空屏幕，`http://localhost:3000/users`也是一样，但在这里我们找到了一个空的**JSON**数组。
- en: Let's add some content to the Band's routes.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为Band的路由添加一些内容。
- en: Adding database content
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据库内容
- en: 'Let''s add some content in the database:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在数据库中添加一些内容：
- en: 'Create a new file called `mvc_mysql_app.sql` and place the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mvc_mysql_app.sql`的新文件，并放入以下代码：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Open **Sequel Pro**, click on F**ile > Import >**, and select the SQL file `mvc_mysql_app.sql`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Sequel Pro**，单击**文件 > 导入 >**，然后选择SQL文件`mvc_mysql_app.sql`。
- en: Go back to your browser and refresh the `http://localhost:3000/bands` page;
    you will see the following result:![Adding database content](img/image_02_007.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器并刷新`http://localhost:3000/bands`页面； 您将看到以下结果：![添加数据库内容](img/image_02_007.jpg)
- en: Band-list.html
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Band-list.html
- en: Creating a Bands form
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个乐队表单
- en: 'Now we will create the form for the creation of bands using the modal feature
    bootstrap:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用模态功能bootstrap创建乐队创建表单：
- en: 'Open the `views/pages/index.html` file and add the following code at the end
    of the file:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views/pages/index.html`文件，并在文件末尾添加以下代码：
- en: '[PRE48]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Restart the application, open your terminal/shell, and type the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动应用程序，打开您的终端/ shell，并键入以下命令：
- en: '[PRE49]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Click on **Insert an Album** button, and you can see the band form inside the
    model window, as shown in the following screenshot:![Creating a Bands form](img/image_02_008.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**插入专辑**按钮，您可以在模型窗口内看到乐队表单，如下图所示：![创建乐队表单](img/image_02_008.jpg)
- en: Modal screen
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 模态屏幕
- en: Inserting a new Band
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入新乐队
- en: 'Now let''s check the form behavior:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查表单的行为：
- en: 'Fill in the form with the following data:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下数据填写表单：
- en: 'Name: **Sepultura**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：**Sepultura**
- en: 'Description: **Brazilian Thrash Metal Band**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：**巴西垃圾金属乐队**
- en: 'Best album: **https://s2.vagalume.com/sepultura/discografia/roots-W320.jpg**'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳专辑：**https://s2.vagalume.com/sepultura/discografia/roots-W320.jpg**
- en: 'Year: **1996**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年份：**1996**
- en: Click on the  ****save** changes** button.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**保存更改**按钮。
- en: 'After the form processes, you will be redirected to `band-list.html` with the
    new record, as the following figure shows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 表单处理后，您将被重定向到`band-list.html`，并显示新记录，如下图所示：
- en: '![Inserting a new Band](img/image_02_009.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![插入新乐队](img/image_02_009.jpg)'
- en: Band-list.html screen with the new record
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 带有新记录的Band-list.html屏幕
- en: 'The `create()` function on the `Band.js` controller is activated with the form
    `POST` and the following code from `Band.js` controller is used to save the data
    and redirect the user:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`Band.js`控制器上的`create()`函数通过表单`POST`激活，并且`Band.js`控制器中的以下代码用于保存数据并重定向用户：'
- en: '[PRE50]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Main difference between ODM (mongoose) and ORM (sequelize)
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ODM（mongoose）和ORM（sequelize）之间的主要区别
- en: 'The main difference between both database mappers is that Sequelize uses promises
    and Mongoose does not. Promises are easy to handle with asynchronous events. To
    be more clear, let''s see the following code to compare both middlewares:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 两个数据库映射器之间的主要区别是Sequelize使用promises而Mongoose不使用。 Promises易于处理异步事件。 更明确地说，让我们看一下以下代码来比较这两个中间件：
- en: 'Code block extracted from the `passport.js` file from the previous chapter:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一章的`passport.js`文件中提取的代码块：
- en: '[PRE51]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now the same code block using the `sequelize` promises function:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`sequelize` promises函数的相同代码块：
- en: '[PRE52]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note the use of the `then()` function is to deal with all returns.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`then()`函数处理所有返回。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored all the features of the `sequelize-CLI` command
    line to create a mapping of tables in a relational database. We saw how to create
    models interactively using the sequelize model feature `create()`, and we also
    saw how to migrate the schema files to the database.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了`sequelize-CLI`命令行的所有功能，以在关系数据库中创建表的映射。 我们看到了如何使用`sequelize model
    feature create()`交互式地创建模型，还看到了如何将模式文件迁移到数据库。
- en: We started the application with a standard template engine and saw how to refactor
    the engine templates and use another resource for this, the **Swig** template
    library.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标准模板引擎启动了应用程序，并了解了如何重构引擎模板并使用另一个资源，即**Swig**模板库。
- en: We learned how to use some SQL commands to connect to the MySQL database and
    some basic commands for creating tables.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用一些SQL命令连接到MySQL数据库以及创建表的一些基本命令。
- en: In the next chapter, we will explore the utilization and manipulation of images
    using Node.js and other important resources.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索使用Node.js和其他重要资源来利用和操作图像。
