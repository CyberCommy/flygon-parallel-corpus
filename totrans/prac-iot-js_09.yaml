- en: Smart Surveillance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, we learned how to connect a Raspberry Pi camera module to
    Raspberry Pi 3, grab a picture or video, and then upload/stream it in real time.
    In this chapter, we are going to take this logic to the next level. We are going
    to take a picture when there is an intrusion detected, and then send that image
    to the Amazon Rekognition platform and compare the image against a set of images.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AWS Rekognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeding an AWS Rekognition collection with authorized faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking pictures from Raspberry Pi 3 upon intrusion and comparing them with the
    seed faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Rekognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following quote is from Amazon Rekognition ([https://aws.amazon.com/rekognition/](https://aws.amazon.com/rekognition/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"Amazon Rekognition is a service that makes it easy to add image analysis to
    your applications. With Rekognition, you can detect objects, scenes, faces; recognize
    celebrities; and identify inappropriate content in images. You can also search
    and compare faces. Rekognition''s API enables you to quickly add sophisticated
    deep learning-based visual search and image classification to your applications."'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to leverage the AWS Rekognition feature to help
    us set conditional surveillance based on face recognition, not face detection.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that you had set up a camera at your house entrance using Raspberry
    Pi, and programmed it to keep taking pictures of intruders and sending them to
    you. In this setup, you will be receiving images of everyone who comes to your
    door, for instance, your family, neighbors, and so on. But what if you are notified
    only if the intruder is an unknown person? Now, that is what I call smart surveillance.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, we built a setup that captured images when intrusion is detected
    and which then send an email and updated the apps in real time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going seed AWS Rekognition with a set of faces that
    are trusted. Then, when there is an image captured by the camera, upon intrusion
    detection, we send it to AWS Rekognition to perform facial recognition. If the
    image matches one of the trusted images, nothing happens; otherwise, an email
    notification is sent.
  prefs: []
  type: TYPE_NORMAL
- en: To understand more about AWS Rekogniton and how it works, take a look at *Announcing
    Amazon Rekognition - Deep Learning-Based Image Analysis* ([https://www.youtube.com/watch?v=b6gN9jCmq3w](https://www.youtube.com/watch?v=b6gN9jCmq3w)).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up smart surveillance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an understanding of what we are going to do, we will get started
    with the setup of Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to set up the camera and a motion detector, as we did in [Chapter
    8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry Pi Image
    Streaming*. Next, we will be adding the logic required to capture an image upon
    the detection of motion and then send it for processing.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do that, we need to seed the Rekognition collection with authorized
    faces.
  prefs: []
  type: TYPE_NORMAL
- en: This script can be an API as part of the API engine, and using the web dashboard
    we can upload and seed the images. But to keep things simple, we are going to
    run this standalone script from a machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up AWS credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with development, we need to set up our local machine
    with the AWS CLI and AWS credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the AWS CLI. Head over to [https://aws.amazon.com/cli](https://aws.amazon.com/cli)
    and follow the instructions on the page. To test the installation from the command
    prompt, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the setup is complete we need to configure the AWS credentials, so that
    as long as we are using this machine, we need not enter any credentials within
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be presented with four questions; fill them with the appropriate
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you are facing issues when configuring AWS credentials, refer to [http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration).
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to add the `accessKeyId` and `secretAccessKey` in the code
    itself. But we would still need the `accessKeyId` and `secretAccessKey` to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Once the configuration is done, we will get started interfacing with AWS Rekognition.
  prefs: []
  type: TYPE_NORMAL
- en: Seeding the authorized faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a folder named `chapter9`, and inside this folder, create a folder named
    `rekogniton_seed`. Inside this folder, create a file named `seed.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `seed.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Please refer to the source code for the additional comments: [https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript](https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript).'
  prefs: []
  type: TYPE_NORMAL
- en: As we see from the preceding code snippet, we are creating a new collection
    named `AIOWJS-FACES` in the `eu-west-1` region. You can either use the `accessKeyId`
    and `secretAccessKey` from within the code, or you can use the ones from AWS CLI
    configure. If you are using the key and secret from AWS CLI configure, you can
    comment these two lines out while initializing a new instance of `rekognition`.
  prefs: []
  type: TYPE_NORMAL
- en: We call the `createCollection()` to create a new collection and this needs to
    be run only once.
  prefs: []
  type: TYPE_NORMAL
- en: You can seed data as many times as you want, but collection creation should
    happen only once.
  prefs: []
  type: TYPE_NORMAL
- en: Once the collection is created, we will index a few images from a folder named
    `faces`, which we will create now. Create a folder named `faces` at the root of
    the `rekogniton_seed` folder. Inside this folder, upload clear images with faces.
    The better the quality and clarity of the image is, the better chance it has of
    being recognized.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have dumped a couple of pictures of mine inside the `faces` folder. Before
    we start the seeding, we need to install the required dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open command prompt/terminal inside the `rekogniton_seed` folder and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is complete, create the collection and seed the faces
    by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see an output something like the following for each uploaded image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This object will consist of information about the image that was analyzed by
    Rekognition.
  prefs: []
  type: TYPE_NORMAL
- en: You can look up the `*.json` files inside the `faces` folder once the seeding
    is complete. These JSON files will consist of more information about the image.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the seed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the seed is completed, let's validate the seed. This step is totally
    optional; you can skip this step if you want to.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `rekogniton_seed_test` at the root of the `chapter9`
    folder. Then create a folder named `faces` at the root of `rekogniton_seed_test`
    and dump the image that you would like to test into this folder. In my case, the
    picture is of me at a different location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a file named `seed_test.js` and update it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we pick up the image from the `faces` folder and submit
    it for recognition, and then we print the appropriate response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that is done, we will install the required dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open command prompt/terminal inside the `rekogniton_seed_test` folder and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are all set to run this example. From inside the `rekogniton_seed_test`
    folder, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things to note from the preceding response:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FaceId`: This is the ID against which the current face has been matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ImageId`: This is the image against which the current face has been matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, we can even tag users from the images that we have indexed/seeded.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do a negative test by putting an image that doesn''t match our seed
    data and updating the last line in the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there were no matches found.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the preceding method in our Raspberry Pi, once we have captured
    an image.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seeded a Rekognition collection, as well as tested it (an optional
    step), we are now going to start setting up the Raspberry Pi code.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using all the other code pieces from the `chapter8` folder as is
    and only modifying the Raspberry Pi client in the `chapter9` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the entire code from the `chapter8` folder into the `chapter9` folder.
    Then, open the `pi-client` folder either on your desktop or on the Raspberry Pi
    itself, and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have the required configuration to make a request
    to AWS Rekognition, and then we run `checkForMatch()`, which will take the raw
    photo and check for matches. If any matches are found, we will not get an email,
    and if no matches are found, we will get an email.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is done, start the broker, `api-engine`, and web dashboard.
    Then run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Trigger a motion to capture the image. If the captured image matches one of
    the faces we indexed, we will not get an email; if it does, we will get an email.
  prefs: []
  type: TYPE_NORMAL
- en: Simple isn't it? This is a very powerful setup that we have built to provide
    surveillance at our homes or offices, where simple false alarms can be identified
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: This example can be extended further to send push notifications or call neighbours
    using cloud-based calling services such as Twilio.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to set up a smart surveillance system with
    Raspberry Pi and the AWS Rekognition platform.
  prefs: []
  type: TYPE_NORMAL
- en: We started by understanding the AWS Rekognition platform and then indexing/seeding
    a collection with our images. Next, we updated the Raspberry Pi code to take a
    picture when motion is detected and then send that image to AWS Rekognition to
    identify whether the face in the current photo matches any of the indexed images.
    If it does, we ignore the image; if it does not, we send an email with that image.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we complete, *Practical Internet of Things with JavaScript*. I hope
    you have learned a few ways to leverage JavaScript and Raspberry Pi to build simple
    yet powerful IoT solutions.
  prefs: []
  type: TYPE_NORMAL
