- en: Control Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the final chapter of our exploration into the syntax of JavaScript.
    We have so far covered its more atomic components its many types, operators, declarations,
    and statements. Gaining fluency in these is crucial to working effectively with
    the language at a foundational level and allows us now to take a step back and
    consider a larger concern: controlling a program''s flow. We''ll combine all of
    the syntax we''ve picked up into clean and understandable programs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is control flow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imperative versus declarative programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The movement of control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statements of control flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling cyclomatic complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous control flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is control flow?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Control flow refers to the order in which expressions and statements (and entire
    blocks of code) will run. Programming is, in part, the *art of controlling flow*. By
    writing code, we are specifying where control resides at any single moment.
  prefs: []
  type: TYPE_NORMAL
- en: At a granular level, the order of execution is dictated by the individual operators
    we use in our expressions. We explored the precedence and associativity of operators
    in the last chapter, discovering that, even if you have a series of operators,
    one after another, the exact order of their execution is defined by the individual
    operators' precedence and associativities so that, in the expression, `1 + 2 *
    3`, the `2 * 3` operation will occur before the addition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Outside expressions, on the statement level, we control flow in the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: We can do so by ordering our statements in the order we wish them to occur.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can do so by using conditional or iterative language constructs, including
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch()` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if()` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for()` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while()` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do{...} while()` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can do so by invoking and then returning or yielding from functions or generators
    (*yielding* and *returning* are both ways of *giving back control* to the caller).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s easiest to imagine the control flow globally as a type of *cursor* or *finger* that
    is always pointing to a specific expression or statement of code. When a program
    is executing, the control flow will go down, line by line, until it encounters
    a piece of syntax that will redirect control to another piece of code. If it encounters
    an invocation of a function, then that function will be executed in the same manner;
    the control will be with each consecutive line within the function until it is
    returned to the caller of the function via a `return` statement. As *control* traverses
    down through a program, each language construct it encounters will be given control
    over the execution until they each complete. Consider the following simple piece
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The flow of control that is taken in the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We start with `let basket = [];`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `for` loop begins: `let i = 0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check `i < 3` (`true`!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `makeEgg()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push result via `basket.push(...)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`i++` (`i` is now `1`)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check `i < 3` (`true`!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `makeEgg()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the result via `basket.push(...)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`i++` (`i` is now `2`)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check `i < 3` (`true`!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `makeEgg()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push result via `basket.push(...)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`i++` (`i` is now `3`)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check `i < 3` (`false`!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: End of Program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even for quite a simple program such as this, the flow can be quite complicated
    and lengthy. For the benefit of our fellow programmers, it makes sense to try
    to reduce this complexity whenever possible. The way to accomplish this is via
    abstraction. Abstracting something won't eliminate that complexity, but it will
    hide it so that programmers don't need to concern themselves with it. Therefore,
    before delving into the specific language constructs of control flow in JavaScript,
    we'll be exploring how these concepts of control flow and abstraction interrelate
    via the two opposing approaches of imperative and declarative programming.
  prefs: []
  type: TYPE_NORMAL
- en: Imperative versus declarative programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imperative programming concerns itself with **how** something is accomplished,
    while declarative programming concerns itself with **what** we want accomplished.
    It''s difficult to see the difference between these so it''s best to illustrate
    them with a simple program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This function''s problem domain would be: *getting unpaid invoices*. That is
    the task the function has and it is *what* we want to achieve within the function.
    This particular function, however, concerns itself a lot with *how* to achieve
    its task:'
  prefs: []
  type: TYPE_NORMAL
- en: It initializes an empty array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It initializes a counter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It checks that counter (*multiple times*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It increments that counter (*multiple times*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These and other elements of our function are not at all related to the problem
    domain of *getting unpaid invoices*. Instead, they are the rather annoying implementation
    details that we must go through to get our desired output. Functions like this
    are called **imperative** because they are mostly concerned with *how*.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the *imperative* form of programming busies itself with procedural low-level
    steps involved in a task, the *declarative* form of programming uses abstractions
    to avoid the use of direct control flow, preferring to express things only in
    terms of the problem domain itself. The following is a more declarative version
    of our `getUnpaidInvoices` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are delegating to `Array#filter` so it handles the specifics of initializing
    a new array, iteration, and conditional checking. We have freed ourselves from
    the complexity of conventional control flow by using an abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Declarative patterns such as this have become the staple of modern JavaScript.
    They allow you to express the logic you desire at the level of your problem domain,
    instead of having to worry about lower layers of abstraction such as *how to iterate*.
    It''s important to see that both declarative and imperative approaches are not
    completely distinct. They are at either end of a spectrum. On the declarative
    side of the spectrum, you are operating at a higher level of abstraction, and
    are hence not exposed to the implementation details that you would be without
    such abstraction. On the imperative side of the spectrum, you are operating at
    a lower level of abstraction, utilizing lower-level imperative constructs to tell
    the machine what you want to accomplish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7797e12-6ae7-42f3-b4f0-e8e1d33b4ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: Both of these approaches have implications for our control flow. The more imperative
    approach directly states that it will iterate once through the array and then
    conditionally push to the output array. The more declarative approach does not
    make any demands about how the array is iterated through. Naturally, of course,
    we know that the native `Array#filter` and `Array#map` methods will independently
    iterate through their input arrays, but that is not something we are specifying.
    All we are specifying is the condition on which our data should be filtered and
    mapped. How the data is iterated through is completely the concern of the `Array#filter`
    and `Array#map` abstractions.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of a more declarative approach is that it can increase clarity for
    the human reader and enable you to more efficiently model complex problem domains.
    Since you're not having to worry about *how* things are occurring, your mind is
    left free to purely concern itself with *what* you wish to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine we''re given of task of conditionally executing a specific piece of
    code but only if a certain feature is enabled. In our mind, this is how it should
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the code we want to write, but we later find out that things are not
    so simple. For starters, there is no `isEnabled` property for us to use on the
    feature object. There is, however, a `flags` array property, which when fully
    disabled will include `Feature.DISABLED_FLAG`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That seems simple enough. But then we discover that, even if the feature does
    not have this flag and so seems enabled, we also need to check that the time right
    now aligns with a set of times stored in `feature.enabledTimeSlots`. If the current
    time is not in one of the enabled time slots, then we must conclude that the feature
    is disabled, regardless of whether it has the flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is starting to become quite complicated. In addition to checking for the
    *disabled* flag, we''ll need to go through these time slots to discover whether
    the feature is currently enabled based on the current time. So, our simple `if` statement
    has very quickly become an unwieldy mess, with several layers of control flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is undesirably complex code. It's very far away from the original declarative
    code we wanted to write. To understand this code, a fellow programmer will have
    to maintain the state of `featureIsEnabled` in their head while scanning through
    each of the individual constructs. This is a mentally burdensome piece of code
    to navigate through and is, therefore, more liable to misunderstandings, bugs,
    and general unreliability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key question we must now ask ourselves is the following: what would it
    take for us to abstract away all of these nested layers of control flow away so
    that we can have our simple `if` statement back?'
  prefs: []
  type: TYPE_NORMAL
- en: 'We eventually decide to place all of this logic in a newly created `isEnabled` method
    within the `Feature` class—but not only that! We decide to abstract the logic
    further, by delegating to two internal methods, `_hasDisabledFlag`  and `_isEnabledTimeSlotNow`.
    And these methods themselves delegate their iteration logic to array methods, `includes(...)` and `filter(...)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These very small declarative additions to the `Feature` class enable us to
    write the declarative code we were originally aiming for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This has not only been an exercise in simple abstraction. This has been an exercise
    in reducing the layers of control flow. We've avoided the need to use nested layers
    of for `if` and `for` blocks, reducing the cognitive burden faced by ourselves
    and our fellow programmers, and fulfilling the task we originally set out to accomplish
    in the cleanest way possible.
  prefs: []
  type: TYPE_NORMAL
- en: By carefully refactoring and abstracting our original mess of control flow we
    have, quite oddly, ended up with a set of code that includes very few traditional
    control flow statements (`if`, `for`, `switch`, and so on). This doesn't mean
    our code is without control flow; rather, it means that the control flow is either
    minimized or hidden away under layers of abstractions. When using the native control
    flow constructs of the JavaScript language, it is important to remember that they
    are not your only tool with which to express the flow of a program; you can redirect
    and split complicated logic into abstractions that each handle a very specific
    part of your program's flow.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've got a solid foundational understanding of what control flow is
    and how it melds with what we know about abstractions, we can go through each
    of JavaScript's individual control flow mechanisms, highlighting challenges and
    potential gotchas.
  prefs: []
  type: TYPE_NORMAL
- en: The movement of control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In JavaScript, there are several ways that control can be moved from one piece
    of code to another. Generally, code will be evaluated from *left-to-right* and *top-to-bottom* until
    it reaches any of the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Invoking** (invocation of a function by `fn()`, `fn[PRE8]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: someFunction();
  prefs: []
  type: TYPE_NORMAL
- en: (function(){})();
  prefs: []
  type: TYPE_NORMAL
- en: someObject.someMethod();
  prefs: []
  type: TYPE_NORMAL
- en: '[function(){}][0]();'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: function MyConstructor() {}
  prefs: []
  type: TYPE_NORMAL
- en: '// Both equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: new MyConstructor();
  prefs: []
  type: TYPE_NORMAL
- en: new MyConstructor;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '1();     // ! TypeError: 1 is not a function'
  prefs: []
  type: TYPE_NORMAL
- en: '[]();    // ! TypeError: [] is not a function'
  prefs: []
  type: TYPE_NORMAL
- en: '''wat''(); // ! TypeError: "wat" is not a function'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: const person = {
  prefs: []
  type: TYPE_NORMAL
- en: set name(name) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('You are trying to set the name to', name);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: person.name = 'Leo';
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: "You are trying to set the name to Leo"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: function sayHiToMe(name) {
  prefs: []
  type: TYPE_NORMAL
- en: if (name) {
  prefs: []
  type: TYPE_NORMAL
- en: return `Hi ${name}`;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // In the case of a truthy `name` this code is never arrived at
  prefs: []
  type: TYPE_NORMAL
- en: '// because `return` exists on a previous line:'
  prefs: []
  type: TYPE_NORMAL
- en: throw 'You do not have a name! :(';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: sayHiToMe('James'); // => "Hi James"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: function findHighestMountain(mountains) {
  prefs: []
  type: TYPE_NORMAL
- en: if (!mountains || !mountains.length) {
  prefs: []
  type: TYPE_NORMAL
- en: return null;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (mountains.length === 1) {
  prefs: []
  type: TYPE_NORMAL
- en: return mountains[0];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Do the actual work of finding the
  prefs: []
  type: TYPE_NORMAL
- en: // highest mountain here...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: function* makeSomeNumbers() {
  prefs: []
  type: TYPE_NORMAL
- en: yield 645;
  prefs: []
  type: TYPE_NORMAL
- en: yield 422;
  prefs: []
  type: TYPE_NORMAL
- en: yield 789;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const iterable = makeSomeNumbers();
  prefs: []
  type: TYPE_NORMAL
- en: 'iterable.next(); // => {value: 645, done: false}'
  prefs: []
  type: TYPE_NORMAL
- en: 'iterable.next(); // => {value: 422, done: false}'
  prefs: []
  type: TYPE_NORMAL
- en: 'iterable.next(); // => {value: 789, done: false}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: function* myGenerator() {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Chunk A');
  prefs: []
  type: TYPE_NORMAL
- en: yield;
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Chunk B');
  prefs: []
  type: TYPE_NORMAL
- en: yield;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const iterable = myGenerator();
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Calling first time');
  prefs: []
  type: TYPE_NORMAL
- en: iterable.next();
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Done calling first time');
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Calling second time');
  prefs: []
  type: TYPE_NORMAL
- en: iterable.next();
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Done calling second time');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: function* createAdder() {
  prefs: []
  type: TYPE_NORMAL
- en: let n = 0;
  prefs: []
  type: TYPE_NORMAL
- en: while (true) n += yield n;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const adder = createAdder();
  prefs: []
  type: TYPE_NORMAL
- en: adder.next(); // Initialize (kick things off!)
  prefs: []
  type: TYPE_NORMAL
- en: adder.next(100).value; // => 100
  prefs: []
  type: TYPE_NORMAL
- en: adder.next(100).value; // => 200
  prefs: []
  type: TYPE_NORMAL
- en: adder.next(150).value; // => 350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: for (let i = 0; i < array.length; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: if (myCriteriaIsMet(array[i]) {
  prefs: []
  type: TYPE_NORMAL
- en: happyPath();
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: switch (2) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1: console.log(1);'
  prefs: []
  type: TYPE_NORMAL
- en: 'case 2: console.log(2);'
  prefs: []
  type: TYPE_NORMAL
- en: 'case 3: console.log(3);'
  prefs: []
  type: TYPE_NORMAL
- en: 'case 4: console.log(4); break;'
  prefs: []
  type: TYPE_NORMAL
- en: 'case 5: console.log(5);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: 2, 3, 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'outerLoop: for (let obj in objects) {'
  prefs: []
  type: TYPE_NORMAL
- en: for (let key in obj) {
  prefs: []
  type: TYPE_NORMAL
- en: if (/* some condition */) {
  prefs: []
  type: TYPE_NORMAL
- en: break outerLoop;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'specificWork: {'
  prefs: []
  type: TYPE_NORMAL
- en: doSomeSpecificWork();
  prefs: []
  type: TYPE_NORMAL
- en: if (weAreFinished) {
  prefs: []
  type: TYPE_NORMAL
- en: break specificWork;
  prefs: []
  type: TYPE_NORMAL
- en: '// immediately exits the `specificWork: {...}` block'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: doOtherWork();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: const numbers = [1, 2, 3];
  prefs: []
  type: TYPE_NORMAL
- en: for (const n of numbers) {
  prefs: []
  type: TYPE_NORMAL
- en: if (n === 2) continue;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: 1, 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'objectsIteration: for (let obj in objects) {'
  prefs: []
  type: TYPE_NORMAL
- en: for (let key in obj) {
  prefs: []
  type: TYPE_NORMAL
- en: if (/* some condition */) {
  prefs: []
  type: TYPE_NORMAL
- en: continue objectsIteration;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: function nameToUpperCase(name) {
  prefs: []
  type: TYPE_NORMAL
- en: if (typeof name !== 'string') {
  prefs: []
  type: TYPE_NORMAL
- en: throw new TypeError('Name should be a string');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return name.toUpperCase();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: let theUpperCaseName;
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: theUpperCaseName = nameToUpperCase(null);
  prefs: []
  type: TYPE_NORMAL
- en: '} catch(e) {'
  prefs: []
  type: TYPE_NORMAL
- en: e.message; // => "Name should be a string"
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: class NetworkError extends Error {}
  prefs: []
  type: TYPE_NORMAL
- en: async function makeDataRequest() {
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await fetch('/data');
  prefs: []
  type: TYPE_NORMAL
- en: '} catch(e) {'
  prefs: []
  type: TYPE_NORMAL
- en: throw NetworkError('Cannot fetch data');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // ... (process response) ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: throw new Error;
  prefs: []
  type: TYPE_NORMAL
- en: '} catch(e) {'
  prefs: []
  type: TYPE_NORMAL
- en: e.stack; // => "Error\n at filename.js:2:9"
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: if (ConditionExpression) Statement
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: if (true) {}
  prefs: []
  type: TYPE_NORMAL
- en: if (1 || 2 || 3) {}
  prefs: []
  type: TYPE_NORMAL
- en: if ([1, 2, 3].filter(n => n > 2).length > 0) {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: // These are equivalent
  prefs: []
  type: TYPE_NORMAL
- en: if (true) { doBaz(); }
  prefs: []
  type: TYPE_NORMAL
- en: if (true) doBaz();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: if (false) {}
  prefs: []
  type: TYPE_NORMAL
- en: if (null) {}
  prefs: []
  type: TYPE_NORMAL
- en: if (undefined) {}
  prefs: []
  type: TYPE_NORMAL
- en: if (0n) {}
  prefs: []
  type: TYPE_NORMAL
- en: if (0) {}
  prefs: []
  type: TYPE_NORMAL
- en: if ('') {}
  prefs: []
  type: TYPE_NORMAL
- en: if (NaN) {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: if (isLegalDrinkingAge) drink(); else leave();
  prefs: []
  type: TYPE_NORMAL
- en: '// Equivalent, with Blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: if (isLegalDrinkingAge) {
  prefs: []
  type: TYPE_NORMAL
- en: drink();
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: leave();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: if (number > 5) {
  prefs: []
  type: TYPE_NORMAL
- en: // For numbers larger than five
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (number < 3) {'
  prefs: []
  type: TYPE_NORMAL
- en: // For numbers less than three
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // For everything else
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: if (number > 5) {
  prefs: []
  type: TYPE_NORMAL
- en: // For numbers larger than five
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: if (number < 3) {
  prefs: []
  type: TYPE_NORMAL
- en: // For numbers less than three
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // For everything else
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: for (
  prefs: []
  type: TYPE_NORMAL
- en: InitializerExpression;
  prefs: []
  type: TYPE_NORMAL
- en: ConditionExpression;
  prefs: []
  type: TYPE_NORMAL
- en: UpdateExpression
  prefs: []
  type: TYPE_NORMAL
- en: ) IterationBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: for (let i = 0; i < array.length; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: array[i]; // => (Each `array` item)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[r, g, b, a, r, g, b, a, ...]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: const pixelData = canvas.getContext('2d').getImageData(0, 0, 100, 100).data;
  prefs: []
  type: TYPE_NORMAL
- en: for (let i = 0; i < pixelData.length; i += 4) {
  prefs: []
  type: TYPE_NORMAL
- en: let red = pixelData[i];
  prefs: []
  type: TYPE_NORMAL
- en: let blue = pixelData[i + 1];
  prefs: []
  type: TYPE_NORMAL
- en: let green = pixelData[i + 2];
  prefs: []
  type: TYPE_NORMAL
- en: let alpha = pixelData[i + 3];
  prefs: []
  type: TYPE_NORMAL
- en: // (do something with RGBA)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: var copy = [];
  prefs: []
  type: TYPE_NORMAL
- en: for (
  prefs: []
  type: TYPE_NORMAL
- en: let i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: i < array.length;
  prefs: []
  type: TYPE_NORMAL
- en: copy[i] = array[i++]
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: for (
  prefs: []
  type: TYPE_NORMAL
- en: let i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: i < array.length;
  prefs: []
  type: TYPE_NORMAL
- en: i++
  prefs: []
  type: TYPE_NORMAL
- en: ) {
  prefs: []
  type: TYPE_NORMAL
- en: copy[i] = array[i];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: for (LeftSideAssignment in Object) IterationBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'const city = { name: ''London'', population: 8136000 };'
  prefs: []
  type: TYPE_NORMAL
- en: for (const key in city) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(key);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: "name", "population"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: for (let key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: for (var key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: for (const key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: for (key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: let key;
  prefs: []
  type: TYPE_NORMAL
- en: for (key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: let foo = {};
  prefs: []
  type: TYPE_NORMAL
- en: for (foo.key in obj) {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'const objectA = { isFromObjectA: true };'
  prefs: []
  type: TYPE_NORMAL
- en: 'const objectB = { isFromObjectB: true };'
  prefs: []
  type: TYPE_NORMAL
- en: Object.setPrototypeOf(objectB, objectA);
  prefs: []
  type: TYPE_NORMAL
- en: for (const prop in objectB) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(prop);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: "isFromObjectB", "isFromObjectA"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: for (const key in obj) {
  prefs: []
  type: TYPE_NORMAL
- en: if (obj.hasOwnProperty(key)) {
  prefs: []
  type: TYPE_NORMAL
- en: // `key` is a non-inherited (direct) property of `obj`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: for (LeftSideAssignment in IterableObject) IterationBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: const array = [1, 2, 3];
  prefs: []
  type: TYPE_NORMAL
- en: for (const i of array) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: 1, 2, 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: while (ConditionExpression) IterationBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: const array = ['a', 'b', 'c'];
  prefs: []
  type: TYPE_NORMAL
- en: let i = -1;
  prefs: []
  type: TYPE_NORMAL
- en: while (++i < array.length) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(array[i]);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Logs: ''a'', ''b'', ''c'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: while (true) {
  prefs: []
  type: TYPE_NORMAL
- en: if (/* some custom condition */) {
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: function *loopingAlphabet() {
  prefs: []
  type: TYPE_NORMAL
- en: let i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: while (true) {
  prefs: []
  type: TYPE_NORMAL
- en: yield String.fromCharCode(
  prefs: []
  type: TYPE_NORMAL
- en: '97 + (i >= 26 ? i = 0 : i++)'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const alphabet = loopingAlphabet();
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "a" }'
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "b" }'
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "c" }'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "z" }'
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "a" }'
  prefs: []
  type: TYPE_NORMAL
- en: 'alphabet.next(); // => { value: "b" }'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: do IterationBody while (ConditionExpression)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: do {
  prefs: []
  type: TYPE_NORMAL
- en: // Do something with `element`
  prefs: []
  type: TYPE_NORMAL
- en: '} while (element = element.parentNode);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: switch (SwitchExpression) SwitchBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'case CaseExpression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[other JavaScript statements or additional clauses]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: function generateWelcomeMessage(language) {
  prefs: []
  type: TYPE_NORMAL
- en: let welcomeMessage;
  prefs: []
  type: TYPE_NORMAL
- en: switch (language) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''DE'':'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Willkommen!';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''FR'':'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Bienvenue!';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Welcome!';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return welcomeMessage;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: generateWelcomeMessage('DE'); // => "Willkommen!"
  prefs: []
  type: TYPE_NORMAL
- en: generateWelcomeMessage('FR'); // => "Bienvenue!"
  prefs: []
  type: TYPE_NORMAL
- en: generateWelcomeMessage('EN'); // => "Welcome!"
  prefs: []
  type: TYPE_NORMAL
- en: generateWelcomeMessage(null); // => "Welcome!"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: switch (language) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''German'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''Deutsche'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''DE'':'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Willkommen!';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''French'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case: ''Francais'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''FR'':'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Bienvenue!';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: welcomeMessage = 'Welcome!';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: function generateWelcomeMessage(language) {
  prefs: []
  type: TYPE_NORMAL
- en: switch (language) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''DE'':'
  prefs: []
  type: TYPE_NORMAL
- en: return 'Willkommen!';
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''FR'':'
  prefs: []
  type: TYPE_NORMAL
- en: return 'Bienvenue!';
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: return 'Welcome!';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: switch (speed) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''slow'': {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Initiating slow speed');
  prefs: []
  type: TYPE_NORMAL
- en: car.changeSpeedTo(speed);
  prefs: []
  type: TYPE_NORMAL
- en: car.enableUrbanCollisionControl();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''fast'': {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Initiating fast speed');
  prefs: []
  type: TYPE_NORMAL
- en: car.changeSpeedTo(speed);
  prefs: []
  type: TYPE_NORMAL
- en: car.enableSpeedLimitWarnings();
  prefs: []
  type: TYPE_NORMAL
- en: car.enableCruiseControlOption();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''regular'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'default: {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Initiating regular speed');
  prefs: []
  type: TYPE_NORMAL
- en: car.changeSpeedTo(speed);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: switch (month) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''December'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''January'':'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''February'': {'
  prefs: []
  type: TYPE_NORMAL
- en: const message = 'In the UK, Spring is coming soon!';
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: switch (true) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case user.role === ''admin'' || user.role === ''root'': {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'case user.role === ''member'' && user.isActive: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'case user.role === ''member'' && user.isRecentlyInactive: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: if (a) {
  prefs: []
  type: TYPE_NORMAL
- en: alpha();
  prefs: []
  type: TYPE_NORMAL
- en: if (b) bravo();
  prefs: []
  type: TYPE_NORMAL
- en: if (c) charlie();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (d) delta();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: function getIDsFromLicenses(licenses) {
  prefs: []
  type: TYPE_NORMAL
- en: const ids = [];
  prefs: []
  type: TYPE_NORMAL
- en: for (let i = 0; i < licenses.length; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: let license = licenses[i];
  prefs: []
  type: TYPE_NORMAL
- en: if (license.id != null) {
  prefs: []
  type: TYPE_NORMAL
- en: if (license.id.indexOf('c') === 0) {
  prefs: []
  type: TYPE_NORMAL
- en: let nID = Number(license.id.slice(1));
  prefs: []
  type: TYPE_NORMAL
- en: if (nID >= 1000000) {
  prefs: []
  type: TYPE_NORMAL
- en: 'ids.push({ type: ''car'', digits: nID });'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: 'ids.push({ type: ''car_old'', digits: nID });'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (license.id.indexOf(''h'') === 0) {'
  prefs: []
  type: TYPE_NORMAL
- en: ids.push({
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''hgv'','
  prefs: []
  type: TYPE_NORMAL
- en: 'digits: Number(license.id.slice(1))'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (license.id.indexOf(''m'') === 0) {'
  prefs: []
  type: TYPE_NORMAL
- en: ids.push({
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''motorcycle'','
  prefs: []
  type: TYPE_NORMAL
- en: 'digits: Number(license.id.slice(1))'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return ids;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: getIDsFromLicenses([
  prefs: []
  type: TYPE_NORMAL
- en: '{ name: ''Jon Smith'', id: ''c32948'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ name: ''Marsha Brown'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ name: ''Leah Oak'', id: ''h109'' },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ name: ''Jim Royle'', id: ''c29283928'' }'
  prefs: []
  type: TYPE_NORMAL
- en: ']);'
  prefs: []
  type: TYPE_NORMAL
- en: '// Outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '['
  prefs: []
  type: TYPE_NORMAL
- en: '{type: "car_old", digits: 32948}'
  prefs: []
  type: TYPE_NORMAL
- en: '{type: "hgv", digits: 109}'
  prefs: []
  type: TYPE_NORMAL
- en: '{type: "car", digits: 29283928}'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[INPUT LICENSES] ==> (DERIVATION LOGIC) ==> [OUTPUT ID TYPES AND DIGITS]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: ids = licenses.map(license => license.id)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: ids = ids.filter(id => id != null)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: ids = ids.filter(Boolean)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: ids = ids.map(id => getIDFields(
  prefs: []
  type: TYPE_NORMAL
- en: id.charAt(0),
  prefs: []
  type: TYPE_NORMAL
- en: Number(id.slice(1))
  prefs: []
  type: TYPE_NORMAL
- en: ));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: function getIDFields(idType, digits) {
  prefs: []
  type: TYPE_NORMAL
- en: switch (idType) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''c'': return {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: digits >= 1000000 ? ''car'' : ''car_old'','
  prefs: []
  type: TYPE_NORMAL
- en: digits
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''h'': return { type: ''hgv'', digits };'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''m'': return { type: ''motorcycle'', digits };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'getIDFields(''c'', 1000); // => { type: "car_old", digits: 1000 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'getIDFields(''c'', 2000000); // => { type: "car", digits: 1000 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'getIDFields(''h'', 1000); // => { type: "hgv", digits: 1000 }'
  prefs: []
  type: TYPE_NORMAL
- en: 'getIDFields(''i'', 1000); // => { type: "motorcycle", digits: 1000 }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: function getIDsFromLicenses(licenses) {
  prefs: []
  type: TYPE_NORMAL
- en: return licenses
  prefs: []
  type: TYPE_NORMAL
- en: .map(license => license.id)
  prefs: []
  type: TYPE_NORMAL
- en: .filter(Boolean)
  prefs: []
  type: TYPE_NORMAL
- en: .map(id => getIDFields(
  prefs: []
  type: TYPE_NORMAL
- en: id.charAt(0),
  prefs: []
  type: TYPE_NORMAL
- en: Number(id.slice(1))
  prefs: []
  type: TYPE_NORMAL
- en: ))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: const someValue = getSomeValue();
  prefs: []
  type: TYPE_NORMAL
- en: doSomethingWithTheValue(someValue);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: fetchSomeData();
  prefs: []
  type: TYPE_NORMAL
- en: processFetchedData();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: alert('Hello!');
  prefs: []
  type: TYPE_NORMAL
- en: console.log('The alert has been dismissed by the user');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: function requestData(path, callback) {
  prefs: []
  type: TYPE_NORMAL
- en: // (Implementation of requestData)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: requestData('/data/123', (response) => { /* ... */ });
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: function onResponse(response) {
  prefs: []
  type: TYPE_NORMAL
- en: // Do something with the response...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: requestData('/data/123', onResponse);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: createDropdownComponent({
  prefs: []
  type: TYPE_NORMAL
- en: onOpen() {},
  prefs: []
  type: TYPE_NORMAL
- en: onSelect() {},
  prefs: []
  type: TYPE_NORMAL
- en: onClose() {},
  prefs: []
  type: TYPE_NORMAL
- en: onHover() {} // etc.
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: fs.readFile('/path/to/file', (error, data) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (error) {
  prefs: []
  type: TYPE_NORMAL
- en: // Handle the error!
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // Handle the data! (No error has occurred!)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: requestData('/data/current-user', (userData) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (userData.preferences.twitterEnabled) {
  prefs: []
  type: TYPE_NORMAL
- en: requestData(userData.twitterFeedURL, (twitterFeedData) => {
  prefs: []
  type: TYPE_NORMAL
- en: renderTwitterFeed(twitterFeedData, {
  prefs: []
  type: TYPE_NORMAL
- en: onRendered() {
  prefs: []
  type: TYPE_NORMAL
- en: 'logEvent(''twitterFeedRender'', { userId: userData.id });'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: requestData('/data/current-user', (userData) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (userData.preferences.twitterEnabled) {
  prefs: []
  type: TYPE_NORMAL
- en: renderTwitterForUser(userData);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"click": [Function, Function, Function],'
  prefs: []
  type: TYPE_NORMAL
- en: '"mouseover": [Function, Function],'
  prefs: []
  type: TYPE_NORMAL
- en: '"mouseout": [Function]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: document,body.addEventListener('mousemove', e => {
  prefs: []
  type: TYPE_NORMAL
- en: e; // => the Event object
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: const server = http.createServer(...);
  prefs: []
  type: TYPE_NORMAL
- en: function onConnect(req, cltSocket, head) {
  prefs: []
  type: TYPE_NORMAL
- en: // Connect to an origin server...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Subscribe
  prefs: []
  type: TYPE_NORMAL
- en: server.on('connect', onConnect);
  prefs: []
  type: TYPE_NORMAL
- en: // Unsubscribe
  prefs: []
  type: TYPE_NORMAL
- en: server.off('connect', onConnect);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: const dropdown = new DropDown();
  prefs: []
  type: TYPE_NORMAL
- en: dropdown.on('select', () => { /*...*/ });
  prefs: []
  type: TYPE_NORMAL
- en: dropdown.on('deselect', () => { /*...*/ });
  prefs: []
  type: TYPE_NORMAL
- en: dropdown.on('hover', () => { /*...*/ });
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '// Less transparent & more burdensome:'
  prefs: []
  type: TYPE_NORMAL
- en: dropdown.on('action', event => {
  prefs: []
  type: TYPE_NORMAL
- en: switch (event.action) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''select'': /*...*/; break;'
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''deselect'': /*...*/; break;'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: const answerToEverything = new Promise((resolve, reject) => {
  prefs: []
  type: TYPE_NORMAL
- en: setTimeout(() => {
  prefs: []
  type: TYPE_NORMAL
- en: resolve(42);
  prefs: []
  type: TYPE_NORMAL
- en: '}, 1000);'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: answerToEverything.then(answer => {
  prefs: []
  type: TYPE_NORMAL
- en: answer; // => 42
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: const promiseOfData = fetch('/some/data?foo=bar');
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: const promiseOfData = fetch('/some/data');
  prefs: []
  type: TYPE_NORMAL
- en: promiseOfData.then(
  prefs: []
  type: TYPE_NORMAL
- en: response => {
  prefs: []
  type: TYPE_NORMAL
- en: response; // The "fulfilled" Response
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: error => {
  prefs: []
  type: TYPE_NORMAL
- en: error; // The "rejected" Error
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: fetch('/data/users')
  prefs: []
  type: TYPE_NORMAL
- en: .then(response => response.json())
  prefs: []
  type: TYPE_NORMAL
- en: .then(jsonDataOfUsers => {
  prefs: []
  type: TYPE_NORMAL
- en: jsonDataOfUsers; // the JSON data that we got from response.json()
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: fetch('/data/users')
  prefs: []
  type: TYPE_NORMAL
- en: .then(response => response.json())
  prefs: []
  type: TYPE_NORMAL
- en: .then(users => users.map(user => user.forename))
  prefs: []
  type: TYPE_NORMAL
- en: .then(userForenames => userForenames.sort());
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: const promiseA = fetch('/data/users');
  prefs: []
  type: TYPE_NORMAL
- en: const promiseB = promiseA.then(response => response.json());
  prefs: []
  type: TYPE_NORMAL
- en: const promiseC = promiseB.then(users => users.map(user => user.forename))
  prefs: []
  type: TYPE_NORMAL
- en: const promiseD = promiseC.then(userForenames => userForenames.sort());
  prefs: []
  type: TYPE_NORMAL
- en: promiseA === promiseB; // => false
  prefs: []
  type: TYPE_NORMAL
- en: promiseB === promiseC; // => false
  prefs: []
  type: TYPE_NORMAL
- en: promiseC === promiseD; // => false
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: const users = fetch('/data/users').then(r => r.json());
  prefs: []
  type: TYPE_NORMAL
- en: const forenames = users.then(users => users.map(user => user.forename));
  prefs: []
  type: TYPE_NORMAL
- en: const surnames = users.then(users => users.map(user => user.surname));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: function createForenamesComponent(forenamesPromise) {
  prefs: []
  type: TYPE_NORMAL
- en: const div = document.createElement('div');
  prefs: []
  type: TYPE_NORMAL
- en: function render(forenames) {
  prefs: []
  type: TYPE_NORMAL
- en: 'div.textContent = forenames ? forenames.join('', '') : ''Loading...'';'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: render(null); // Initial render
  prefs: []
  type: TYPE_NORMAL
- en: forenamesPromise.then(forenames => {
  prefs: []
  type: TYPE_NORMAL
- en: '// When we receive the forenames we want to render them:'
  prefs: []
  type: TYPE_NORMAL
- en: render(forenames);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: return div;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: userInfoLoader.init();
  prefs: []
  type: TYPE_NORMAL
- en: appStartup().then(() => {
  prefs: []
  type: TYPE_NORMAL
- en: const userID = userInfoLoader.data.id;
  prefs: []
  type: TYPE_NORMAL
- en: const userName = userInfoLoader.data.name;
  prefs: []
  type: TYPE_NORMAL
- en: renderApplication(userID, userName);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: userInfoLoader.init()
  prefs: []
  type: TYPE_NORMAL
- en: .then(() => appStartup())
  prefs: []
  type: TYPE_NORMAL
- en: .then(() => {
  prefs: []
  type: TYPE_NORMAL
- en: const userID = userInfoLoader.data.id;
  prefs: []
  type: TYPE_NORMAL
- en: const userName = userInfoLoader.data.name;
  prefs: []
  type: TYPE_NORMAL
- en: renderApplication(userID, userName);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: async function getNumber() {
  prefs: []
  type: TYPE_NORMAL
- en: return 42;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: getNumber() instanceof Promise; // => true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: getNumber().then(number => {
  prefs: []
  type: TYPE_NORMAL
- en: number; // => 42
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: await someAsyncFunction();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: const n = await new Promise(fulfill => fulfill(123));
  prefs: []
  type: TYPE_NORMAL
- en: n; // => 123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: async function setupFeed() {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await fetch('/data');
  prefs: []
  type: TYPE_NORMAL
- en: const json = await response.json();
  prefs: []
  type: TYPE_NORMAL
- en: console.log(json);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: function setupFeed() {
  prefs: []
  type: TYPE_NORMAL
- en: fetch('/data').then(response => {
  prefs: []
  type: TYPE_NORMAL
- en: return response.json()
  prefs: []
  type: TYPE_NORMAL
- en: '}).then(json => {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(json);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: const allData = [
  prefs: []
  type: TYPE_NORMAL
- en: fetch('/data/1').then(r => r.json()),
  prefs: []
  type: TYPE_NORMAL
- en: fetch('/data/2').then(r => r.json()),
  prefs: []
  type: TYPE_NORMAL
- en: fetch('/data/3').then(r => r.json())
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: for await (const data of allData) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(data);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Logs data from /data/1, /data/2 and /data/3
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Without *Promises* or `await` and `async`, expressing this kind of asynchronous
    process would require not only also more code but also more time to understand.
    The beauty of these constructs and abstractions is that they allow us to ignore
    the implementation details of asynchronous operations, enabling us to focus purely
    on expressing our problem domain. As we move forward in this book, we will further
    explore this spirit of abstraction as we tackle some larger and more unwieldy
    problem domains.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have finalized our exploration of the JavaScript language,
    discussing the difference between imperative and declarative syntax, exploring
    how to cleanly control flow, and learning how to handle cases of cyclomatic complexity
    in both synchronous and asynchronous contexts. This has involved an in-depth study
    of all iteration and conditional constructs within the language, guidance on their
    usage, and cautions against anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take all of the knowledge we've accrued about the
    JavaScript language and combine it with some explorations into real-world design
    patterns and paradigms that'll help us to build clean abstractions and architectures.
  prefs: []
  type: TYPE_NORMAL
