- en: Managing Routes with vue-router
  prefs: []
  type: TYPE_NORMAL
- en: One of the main parts of your application is router management. Here, it is
    possible to bring together infinite component combinations in a single place.
  prefs: []
  type: TYPE_NORMAL
- en: A router is capable of coordinating component rendering and dictating where
    the application should be, depending on the URL. There are many ways to increase
    the customization of `vue-router`. You can add route guards to check whether specific
    routes are navigatable by access level or fetch data before entering the route
    to manage errors on your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to create application routes, dynamic routes,
    alias and credited routes, and nested router views. We'll also look at how to
    manage errors, create router guards, and lazy load your pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a programmatic navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic router path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a route alias
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a route redirect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a nested router view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a 404 error page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an authentication middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading your pages asynchronously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue-CLI.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention Windows users: you need to install an npm package called `windows-build-tools`
    to be able to install the following required packages. To do so, open the PowerShell
    as an administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Vue-CLI, you need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a simple route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your application, you can create an infinite combination of routes that can
    lead to any number of pages and components.
  prefs: []
  type: TYPE_NORMAL
- en: '`vue-router` is the maintainer of this combination. We need to use this to
    set instructions on how to create paths and lay down routes for our visitors.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create an initial route that will lead
    to a different component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Vue-CLI project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic
    Babel and ESLint project without any plugins or configuration, and the `Manually`
    mode, where you can select more modes, plugins, linters, and options. We will
    go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we are asked about the features that we will want on the project. Those
    features are some Vue plugins such as Vuex or Vue Router (Vue-Router), testers,
    linters, and more. Select `Babel`, `Router`, and `Linter / Formatter`**:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now Vue-CLI will ask if you want to use the history mode on the route management.
    We will choose `Y` (yes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select `ESLint + Airbnb config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied on save or fixed on commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in the `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our recipe will be divided into five parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the `NavigationBar` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the contact page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the about page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the application's main component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the NavigationBar component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we are going to create the `NavigationBar` component that will be used in
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `navigationBar.vue` file in the `src/components` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a default `export` object of the component, with the Vue property `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `div` HTML element with the `id` attribute defined as `"nav"`, and
    inside of it, create three `RouterLink` components. Those components will point
    to the `Home`, `About`, and `Contact` routes. In the `RouterLink` component, we
    will add a `to` attribute that will be defined as the route for each component,
    respectively, and define the text content as the name of the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating the contact page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to make sure the contact page gets rendered when the user enters the
    `/contact` URL. To do so, we need to create a single file component to be used
    as the contact page.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/views` folder, create a new file called `contact.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a default `export` object of the component, with the Vue property `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `div` HTML element, with the `class` attribute defined as `"contact"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of the `<h1>` HTML element, add a text context displaying the current
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating the about page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to make the contact page be rendered when the user enters the `/about` URL.
    In the following subsections, we will create the Single File component for the
    about page.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/views` folder, create a new file called `About.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a default export object of the component, with the Vue property `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `div` HTML element with the `class` attribute defined as `"about"` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of it, place an `<h1>` element with a text context displaying the current
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Changing the application's main component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After creating the pages and the navigation bar, we need to change the application's
    main component to be able to render the routes and have the navigation bar at
    the top.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.vue` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `NavigationBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `components` property, declare the imported `NavigationBar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Inside the `div` HTML element, add the `NavigationBar` component and the `RouterView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating the routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we need to make the routes available in the application. To do so, first,
    we need to declare the routes and the components that the routes will render.
    Follow these steps to create your Vue application router correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/router` folder, open the `index.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `Contact` component page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes` array, we need to create a new `route` object. This object
    will have the `path` property defined as `''/contact''`, `name` defined as `''contact''`,
    and `component` pointing to the imported `Contact` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62dcc997-24fa-40f8-b29c-13cd4caca6cd.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `vue-router` is added to Vue as a plugin, it starts to watch for changes
    on `window.location.pathname`, and other URL properties, to check the weight of
    the current URL on the browser against the list of URLs on your router configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In this particular case, we are using a direct URL and a non-dynamic URL. Because
    of that, the `vue-router` plugin only needs to check direct matches of the URL
    paths and doesn't need to weigh the possible matches against a regex validator.
  prefs: []
  type: TYPE_NORMAL
- en: After a URL is matched, the `router-view` component acts as a **dynamic component**
    and renders the component we defined on the `vue-router` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `vue-router` at [https://router.vuejs.org/.](https://router.vuejs.org/)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about Vue CLI at [https://cli.vuejs.org/.](https://cli.vuejs.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a programmatic navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using `vue-router`, it is also possible to change the current route of
    the application through function execution, without the need for special `vue-router`
    components for creating links.
  prefs: []
  type: TYPE_NORMAL
- en: Using programmatic navigation, you can make sure all the route redirections
    can be executed anywhere in your code. Using this method enables the usage of
    special route directions, such as passing parameters and navigation with the route
    name.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to execute a programmatic navigation function,
    using the extra possibilities it provides.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue-CLI that we created in
    the '*Creating a simple route*'recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add the `Router` as a needed feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application's main component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the contact view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application's main component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will start with the `App.vue` file. We will add a programmatic navigation
    function to be executed after a timeout, which will be added to the component
    life cycle hook.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.vue` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `mounted` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `mounted` property, we need to add a `setTimeout` function, which will
    execute the `$router.push` function. When executed, this function receives a JavaScript object as an
    argument, with two properties, `name`, and `params`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Changing the contact view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the contact view, we need to add an event listener, which will grab the route
    change and execute an action.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `contact.vue` in the `src/views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `mounted` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In this property, we will add a verification that will check whether there
    are any parameters on the `$route.params` object and display an `alert` with that
    `$route.params`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/751bd657-b3cf-44c2-9fbc-ad4027477d67.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$router.push` function, when executed, tells `vue-router` to change where
    the application is, and in this process, you are passing down some parameters
    to the new router that will replace the current route. In those parameters, there's
    a property called `params`, which sends a group of parameters to the new router.
  prefs: []
  type: TYPE_NORMAL
- en: When entering this new router, all the parameters that we will have called from
    within the router will be available in the `$route.params` object; there, we can
    use it in our view or component.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the programmatic navigation, it's possible to navigate through the routers,
    adding them to the browser history with the `$router.push` function, but there
    are other functions that can be used too.
  prefs: []
  type: TYPE_NORMAL
- en: The `$router.replace` function will replace the user navigation history for
    a new one, making it unable to go back to the last page.
  prefs: []
  type: TYPE_NORMAL
- en: '`$router.go` is used to move the user navigation history in steps. To go forward,
    you need to pass positive numbers and to go backward, you will need to pass negative
    numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `vue-router` programmatic navigation at [https://router.vuejs.org/guide/essentials/navigation.html.](https://router.vuejs.org/guide/essentials/navigation.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic router path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a route to your application is a must, but sometimes you need more than
    just simple routes. In this recipe, we'll take a look at how dynamic routes come
    into play. With dynamic routes, you can define custom variables that can be set
    via the URL, and your application can start with those variables already defined.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use a dynamic router path on a CRUD list.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start our component, we will use the Vue project with Vue-CLI that we completed in
    the ''*Creating a CRUD interface with axios and Vuesax*'' recipe in [Chapter 5](626a2474-50de-4cba-a6a9-e75529ea0f92.xhtml),
    *Fetching Data from the Web via HTTP Requests*. In the following steps, we will
    add `vue-router` to the project through the Vue UI dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need to open `vue ui`. To do this, open Terminal (macOS or
    Linux) or Command Prompt/PowerShell(Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There, you will need to import the project by locating the project folder. After importing
    `vue ui`, you will be redirected to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `vue-router` to the plugins by going to the plugins management page and
    clicking on the Add vue-router button. Then, click on the Continuebutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vue-CLI will automatically install and configure vue-router on the project
    for us. We now need to create each view for the **List**, **View,** and **Edit**
    pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To start view development, we will go first by the user list route. In each
    route, we will deconstruct the old component that we had made, and recreate it
    as a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into eight parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application's main component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the route mixin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Axios instance configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User list view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User create view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User information view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User update view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application's main component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After adding the vue-router plugin, `App.vue` will change. We need to revert
    the changes made by the installation of the `vue-router`. This is needed because
    when `vue-ui` adds the `vue-router` plugin, it will change `App.vue`, adding an
    example code that we don't need.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.vue` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove everything, leaving just the `div#app` HTML element and the `router-view`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Changing the route mixin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous recipe, we used a `changeComponent` mixin. Now that we are
    going to work with routes, we need to change this mixin to a `changeRoute` mixin
    and alter its behavior. In the following steps, we will change how the mixin works,
    to be able to change the route instead of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/mixin` folder, rename `changeComponent.js` to `changeRoute.js` and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will remove the `changeComponent` method and create a new one called `changeRoute`.
    This new method will receive two arguments, `name` and `id`. The `name` argument
    is the route name, as set in the `vue-router` configuration and the `id` will
    be the user id that we will pass a parameter in the route change. This method
    will execute `$router.push`, passing those arguments as the parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Axios instance configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To fetch the data in the MirageJS server, we will need to define some options
    in our axios instance. Now, in the following steps, we will configure the axios
    instance to work with the new routering system:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/http` folder, open the `baseFetch.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the creator of the `localApi` instance of `axios`, we will need to add an
    `options` object, passing the `baseURL` property. This `baseURL` will be the current
    browser navigation URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: User list view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create our view, we will extract the code from the `list.vue` component and
    reshape it as a page view.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the `list.vue` file from `components` to the `views` folder, and rename
    it `List.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute`
    mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `getAllUsers` and `deleteUser` methods, we need to remove `${window.location.href}` from
    the `getHttp` and `deleteHttp` function parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow`
    and `VsCol` component. The `VsCol` component will have the `vs-type` attribute defined
    as `''flex''`, `vs-justify` defined as `''left''`, `vs-align` defined as `''left''`,
    and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'On the actions buttons, we will change the `changeComponent` functions to `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `VsCard` footer, we need to change the actions buttons, `changeComponent` method
    to the `changeRoute` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: User create view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create our view, we will extract the code from the `create.vue` component
    and reshape it as a page view.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the `create.vue` file from `components` to the `views` folder, and rename
    it `Create.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `getUserById` method, we need to remove `${window.location.href}` from
    the `postHttp` function URL and change the `changeComponent` functions to `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type` attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `VsCard` footer, we need to change the `Cancel` button''s `changeComponent` functions
    to `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: User information view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create our view, we will extract the code from the `view.vue` component and
    reshape it as a page view.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the `view.vue` file from `src/components` to the `src/views` folder and
    rename it as `View.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `computed` property in the `component` object, with the property `userId`,
    which will return `$route.params.id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `getUserById` method, we need to remove `${window.location.href}` from
    the `getHttp` function URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type` attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `VsCard` footer, we need to change the back button `changeComponent` functions
    to `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: User update view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create our view, we will extract the code from the `update.vue` component
    and reshape it as a page view.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the `update.vue` file from `src/components` to the `src/views` folder and
    rename it `Edit.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the old `changeComponent` mixin import and import the new `changeRoute` mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'At the Vue `mixins` property, we need to replace `changeComponent` with `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `computed` property in the `component` object, with the `userId` property ,
    which will return `$route.params.id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: On the `getUserById` and `updateUser` methods, we need to remove
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`${window.location.href}` from the `getHttp` and `patchHttp` function URLs
    and change the `changeComponent` functions to `changeRoute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap the `VsCard` component and its child contents with a `VsRow` and `VsCol` component.
    The `VsCol` component will have the `vs-type`  attribute defined as `''flex''`, `vs-justify` defined
    as `''left''`, `vs-align` defined as `''left''`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `VsCard` footer, we need to change the `Cancel` button''s change `Component` functions
    to `changeRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Creating dynamic routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, with our page views created, we need to create our routes and make them
    accept parameters, transforming them into dynamic routes. In the following steps,
    we will create the dynamic routes of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to import the four new pages – `List`, `View`, `Edit`, `Create`,
    and `Update`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `routes` array, we will add a new route object for each one of the pages
    that were imported. In this object, there will be three properties: `name`, `path`,
    and `component`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `list` route, we will define `name` as `''list''`, `path` as `''/''`,
    and `component` as the imported `List` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `view` route, we will define `name` as `''view''`, `path` as `''/view/:id''`, and `component` as
    the imported `View` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `edit` route, we will define `name` as `''edit''`, `path `as `''/edit/:id''`,
    and `component` as the imported `Edit` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, at the `create` route, we will define `name` as `''create''`, `path` as `''/create''`,
    and `component` as the imported `Create` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `VueRouter` is created, we will add the `mode` options property and
    set it as `''history''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '**List View Route -** `/` will be your user list page, containing a list of
    all the users in your application and buttons to view, edit, and delete it, as
    well as a button to create a new user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/4ba80475-521f-446f-8c30-8be4c9b739ed.png)'
  prefs: []
  type: TYPE_IMG
- en: '**User View Route -** `/view/:id` will be your user view page, where it''s
    possible to view your user information, such as the user''s name, email, country,
    birthday, and phone number:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/10c4f103-0042-4f58-8c55-74f4ac6fbbef.png)'
  prefs: []
  type: TYPE_IMG
- en: '**User Edit Route -** `/update/:id` will be your user edit page, where it''s
    possible to edit your user''s information, changing the user''s name, email, country,
    birthday, and phone number:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/9010ffcc-0c76-4b96-be5e-d363d55d90d6.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Create User Route -** `/update/:id`will be your user creation page, where
    it''s possible to create a new user on the system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/42da8529-0e65-41c5-a7af-81b391e14ab0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `vue-router` is created, and the route is passed for matching, the router
    analysis check for the best match for the route based on a RegEx for defining
    a weight on each route.
  prefs: []
  type: TYPE_NORMAL
- en: When a route is defined and has a variable in its path, you need to add a `:` before
    the variable parameter. This parameter is passed down to the component in the
    `$route.params` property.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the dynamic router matching at [https://router.vuejs.org/guide/essentials/dynamic-matching.html.](https://router.vuejs.org/guide/essentials/dynamic-matching.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a route alias
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application is a living organism – it evolves, mutates, and changes day
    by day. Sometimes these evolutions can come through the form of a router change,
    for better naming or for a deprecated service. In `vue-router`, it's possible
    to make all those changes invisible to the user, so when they use old links, they
    still can access the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a route alias for our application
    and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we completed in
    the '*Creating a dynamic router path*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `router` as a required feature, as indicated
    in the '*How to do it...*' section of the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the following steps, we will create the router alias:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `list` object, we will change the `path` property from `''/''` to `''/user''`
    and for the `alias` property, we will set `''/''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `view` object, we will change the `path` property from `''/view/:id''` to `''/user/:id''` and
    we will set the `alias` property to `''/view/:id''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `edit` object, we will change the `path` property from `''/edit/:id''` to `''/user/edit/:id''` and
    set the `alias` property to `''/edit/:id''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `create` object, we will change the `path` property from `''/create''` to `''/user/create''` and
    set the `alias` property to `''/create''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user enters your application, `vue-router` will try to match paths
    to the one that the user is trying to access. If there is a property called `alias` in
    the route object, this property will be used by the `vue-router` to maintain the
    old route under the hood and use the alias route instead. If an alias is found,
    the component of that alias is rendered, and the router remains as the alias,
    not showing the user the change, making it transparent.
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, we made a transformation for our application to now handle
    all the users called on the `/user` namespace, but still maintaining the old URL
    structure so that if an old visitor tries to access the website, they will be
    able to use the application normally.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the `vue-router` alias at [https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias.](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#alias)
  prefs: []
  type: TYPE_NORMAL
- en: Creating route redirects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Router redirect works almost the same as the router alias, but the main difference
    is that the user is truly redirected to the new URL. Using this process, you are
    able to manage how the new route can be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we completed in
    the '*Creating a route alias*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' steps in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in these steps, we will create the router redirect rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert a new route object at the end of the `routes` array. This object will
    have two properties, `path` and `redirect`. In the `path` property, we need to
    define the path that the user will enter, `''/create-new-user''`, and in `redirect`,
    the path that the user will be redirected to, in this case, `''/user/create''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new object, and this object will have two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/users''`,
    and in the `redirect`, we will create an object with a property called `name`
    and will put the value as `''list''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new object. This object will have two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/my-user/:id?''`,
    and in the `redirect`, we will create a function, which will receive an argument,
    `to`, which is an object of the current route. We need to check whether the user
    ID is present in the route, to redirect the user to the edit page. Otherwise,
    we will redirect them to the user list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the end, we will create a route object with two properties, `path` and `redirect`.
    In the `path` property, we need to define the path that the user will enter, `''/*''`,
    and in the `redirect`, we need to define the `redirect` property as `''/''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the last route with the `'*'` will always be the route that will
    be rendered when there is no match in the URL that your user is trying to enter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we define `redirect` as a new route, it works similar to the alias, but
    the `redirect` property can receive three types of arguments: a string when redirecting
    for the route itself, objects when redirecting with other parameters such as the
    name of the route, and last but not least, the function type, which `redirect`
    can handle and return one of the first two objects so the user can be redirected.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the `vue-router` redirect at [https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect.](https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a nested router view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `vue-router`, nested routes are like a namespace for your routes, where you
    can have multiple levels of routes inside the same route, use a base view as the
    main view, and have the nested routes rendered inside.
  prefs: []
  type: TYPE_NORMAL
- en: In a multi-module application, this is used to handle routes like CRUD, where
    you will have a base route, and the children will be the CRUD views.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create a nested route.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic router path*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the `router-view` on the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the router files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the router-view on the layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using `vue-router` with children's routes, we need to create the main view,
    which will have a special component called `RouterView`. This component will render
    the current router inside the layout or page you are rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the following steps, we will create the layout for the pages:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/views` folder, we need to create a new folder called `user` and
    move the `Create`, `Edit`, `List`**,** and `View` pages to this new folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `Index.vue` in the `user `folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the single file component `<template>` section, add a `router-view` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Changing the router files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will create a new file that will manage the user's specific routes, which
    will help us to maintain the code and make it cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: User routes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the following steps, we will create routes for the user:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `user.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `Index`, `List`, `View`, `Edit`**,** and `Create` views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an array and make it the default export of the file. In this array,
    add a `route` object, with four properties – `path`, `name`, `component`, and
    `children`. Set the `path` property as `''/user''`, define the `name` property
    as `''user''`, define `component` as the imported `Index` component, and finally,
    define the `children` property as an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `children` property, add a new route object with three properties – `path`,
    `name`, and `component`. Define `path` as `''''`, `name` as `''list''`, and finally,
    define the `component` property as the imported `List` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route object for the view route and use the same structure as the
    last `route` object. Define the `path` property as `'':id''`, define `name` as
    `''view''`, and define `component` as the imported `View` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route object for the `edit` route and use the same structure as the
    last `route` object. Define the `path` property as `''edit/:id''`, define `name` as `''edit''`,
    and define `component` as the imported `Edit` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route object for the `create` route, using the same structure as the
    last `route` object. Define the `path` property as `''create''`, define `name` as `''create''` , and
    define `component` as the imported `Create` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Router manager
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the following steps, we will create the router manager that will control
    all the routes on the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `user.js` file in the `src/router` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes` array, add the imported `UserRoutes` as a destructed array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`vue-router` provides the ability to use child routes as internal components
    of a current view or layout. This gives the possibility to create an initial route
    with a special layout file, and render the child component inside this layout
    through the `RouterView` component.'
  prefs: []
  type: TYPE_NORMAL
- en: This technique is commonly used for defining a layout in an application and
    setting a namespace for the modules where the parent route can have a set of specific
    orders that will be available for every one of its children.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about nested routes at [https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes](https://router.vuejs.org/guide/essentials/nested-routes.html#nested-routes).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a 404 error page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be some occasions when your user may try to enter an old link or
    enter a typo and won't get to the correct route, and this should lead them directly
    to a not found error.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to handle a 404 error in `vue-router`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a nested router view*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it..*.' section in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the `NotFound` view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the router files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the NotFound view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to create a new view to be displayed for the user when there is no matching
    route on the application. This page will be a simple, generic page.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/views` folder, create a new file called `NotFound.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `VsRow` component and inside of it create four `VsCol` components.
    All of those components will have the attribute `vs-w` defined as `12` and `class` as `text-center`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'On the first `VsCol` component, we will add a `VsIcon` component, and set the
    attribute icon as `sentiment_dissatisfied` and define the `size` as `large`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second `VsCol` component, we will add a title for the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'In the third `VsCol` component, we need to create the text that will be placed
    on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, on the fourth `VsCol` component, we will add the `VsButton` component.
    This button will have the attribute `type` defined as `relief` and `to` defined
    as `''/''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <style> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `scoped` tag to the `<style>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new rule named `.text-center`, with the `text-align` property defined
    as `center` and `margin-bottom` defined as `20px;`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Changing the router files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After we have created the view, we need to add it to the router and make it
    available to the user. To do it, we will need to add the view route into the router
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these steps, we will change the router manager, to add the new error page:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `NotFound` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes` array, after `UserRoutes`, add a new `route` object with two
    properties, `path` and `redirect`. Define the `path` property as `''/''` and the
    `redirect` property as `''/user''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'For the not found page, we need to create a new route object that needs to
    be placed in the last position in the `routes` array. This route object will have
    two properties, `path`, and `component`. The `path` property will be defined as `''*''`
    and `component` as the imported `NotFound` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1a7706e3-1b9c-4486-8750-851e47e3f35f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`vue-router` tries to find the best match for the URL that the user wants to
    access; if there isn''t a match, `vue-router` will use the `''*''` path as the
    default value for these scenarios, where the `*` represents any value that the
    user has entered that is not in the router lists.'
  prefs: []
  type: TYPE_NORMAL
- en: Because the process of matching in `vue-router` is determined by the weight
    of the route, we need to place the error page at the very bottom, so `vue-router`
    needs to pass in every possible route before actually calling the `NotFound` route.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about handling 404 errors in the vue-router history
    mode at [https://router.vuejs.org/guide/essentials/history-mode.html#caveat.](https://router.vuejs.org/guide/essentials/history-mode.html#caveat)
  prefs: []
  type: TYPE_NORMAL
- en: Creating and applying authentication middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `vue-router`, it's possible to create router guards – functions that run
    each time a router is changed. Those guards are used as middleware in the router
    management process. It's common to use them as an authentication middleware or
    session validators.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create authentication middleware, add metadata
    to our routes to make them restricted, and create a login page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a 404 error page*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the authentication middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the metadata and the middleware to the router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching the middleware to vue-router and creating the login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the login view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The login view will be the page that the user will see if they are not authenticated.
    We will construct a simple page with two inputs inside – a card and a button.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/views` folder, create a new file called `Login.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `data` property, containing `username`, `password`, and `error`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create the `methods` property with a method called `userSignIn`. This
    method will validate if the `username` and `password` data are complete. If it
    is, it will create a new key called `''auth''` in `sessionStorage`, with encrypted
    stringified JSON of the `username` data. Then, set `error` to `false` and execute `$router.replace` to
    redirect the user to the user list `''/user''`. If any of the fields do not pass
    in any of the validations, the method will define the error as `true` and return
    `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `div.container` HTML element with a `VsRow` component inside. The
    `VsRow` component will have the attribute `vs-align` defined as `"center"` and
    `vs-justify` defined as `"center"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `VsRow` component, add a `VsCol` component with the attribute `vs-lg`
    defined as `4`, `vs-sm` defined as `6`, and `vs-xs` defined as `10`. Then, inside
    the `VsCol` component, we will create a `VsCard` component with the `style` attribute
    defined as `margin: 20px;`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `VsCard` component, create a dynamic `<template>` with the `slot`
    named  `header`, an `h3` HTML element, and your title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `VsRow`component with the attribute `vs-align` defined
    as `"center"`, `vs-justify` defined as `"center"`, and two `VsCol` components
    inside of it, with the attribute `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'On the first `VsCol` component, we will add a `VsInput` component, with the
    attribute `danger` defined as the data `error` value, `danger-text` defined as
    the text that will display on error, `label` defined as `"Username"`, `placeholder` defined
    as `"Username or e-mail"`, and the `v-model` directive bound to `username`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second `VsCol` component, we will add a `VsInput` component, with the
    attribute `danger` defined as the data `error` value, `danger-text` defined as
    the text that will display on error, `label` defined as `"Password"`, `type` defined
    as `password`, `placeholder` defined as `"Your password"`, and the `v-model` directive
    bound to `password`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` with
    the slot named `footer`. Inside this `<template>`, we will add a `VsRow` component
    with the `vs-justify` attribute defined as `flex-start` and insert a `VsButton` with
    the attribute `color` defined as `success`, `type` defined as `filled`, `icon` defined
    as `account_circle`, `size` defined as `small` and the `@click` event listener
    targeted to the `userSignIn` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <style> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make this section scoped, so the CSS rules won''t affect
    any other component of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add the rules for the `container `class and the `VsInput` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5b60b886-7306-4fd7-86ba-ea430ce27ea8.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the middleware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All `vue-router` middleware can also be referred to as navigation guards, and
    they can be attached to the application route changes. Those changes have some
    hooks that you can apply to your middleware. The authentication middleware takes
    place before the router changes, so we can handle everything and send the user
    to the correct route.
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/router` folder, create a new folder called `middleware`, then create
    and open a new file called `authentication.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will create a default `export` function that will have three
    function parameters – `to`, `from`, and `next`. The `to` and `from` parameters
    are objects, and the `next` parameter is a callback function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to check whether the route that we are being redirected to has an authenticated
    `meta` property set to `true` and whether we have a `sessionStorage` item with
    the `''auth''` key. If we pass those validations, we can execute the `next` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if the first validation didn''t pass, we need to check whether the router
    that we are redirecting the user to has the authenticated `meta `property and
    check whether it''s a `false` value. If the validation did pass, we will execute
    the `next` callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if none of our validations pass, execute the `next` callback, passing
    `''/login''` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Adding the metadata and the middleware to the router
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After creating our middleware, we need to define which routes will be authenticated
    and which routes won''t. Then we have to import the middleware to the router and
    define it when it is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `user.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In each `route` object, add a new property called `meta`. This property will
    be an object with an authenticated `key`and a `value` defined as `true`. We need
    to do this to every route – even the children''s routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Open `index.js` in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created middleware and the `Login` view component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `route` object for the login page view. This route object will
    have `path` set to `''/login''`, `name` defined as `''login''`, `component` defined
    as `Login`, and the `meta` property will have the `authenticated` key with the
    value set to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'On the error handling route, we''ll define the `meta` property `authenticated` as
    `false` because the login view is a public route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, after the creation of the `router` constructor, we need to inject
    the middleware in the `beforeEach` execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Router guards work as middleware; they have a hook that is executed in each
    life cycle of the `vue-router` process. For the purposes of this recipe, we chose
    the `beforeEach` hook to add our middleware.
  prefs: []
  type: TYPE_NORMAL
- en: In this hook, we checked whether the user was authenticated and whether the
    user needed authentication to navigate the route or not. After checking these
    variables, we continued the process by sending the user to the route they needed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about vue-router router guards at [https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards](https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards).
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading your pages asynchronously
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components can be loaded when needed, and so can routes. Using lazy loading
    techniques with `vue-router` allows more code-splitting and smaller final bundles
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to transform routes in order to load them
    asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating an authentication middleware*' recipe, or we can start a new
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` as a required feature, as indicated
    in the '*How to do it...*' section in the '*Creating a simple route*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the router manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the user routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the router manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To update the router manager, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.js` file in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In each route that has a `component` property, we will transform the direct
    attribution of the component to a new function. This will be an arrow function
    returning the `import()` method of webpack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Repeat the process on each one of the `route` objects that has a `component`
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the user routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To update the user routes, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `user.js` file in the `src/router` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In each route that has a `component` property, we will transform the direct
    attribution of the component to a new function. This will be an arrow function
    returning the `import()` method of webpack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Repeat the process on each one of the `route` objects that has a `component` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In ECMAScript, `export` and `import` are objects with predefined values when
    we use the `export default` method. This means that when we `import` a new component,
    this component is already being pointed to the `default export` of that file.
  prefs: []
  type: TYPE_NORMAL
- en: To carry out the lazy loading process, we need to pass a function that will
    be executed at runtime, and the return of that function will be the part of the
    code that webpack divides in the bundling process.
  prefs: []
  type: TYPE_NORMAL
- en: When we call this function in `vue-router`, instead of the direct component
    import, `vue-router` does a validation check that the present component import
    is a function and needs to be executed. After the execution of the function, the
    response is used as the component that will be displayed on the user's screen.
  prefs: []
  type: TYPE_NORMAL
- en: Because the webpack `import()` method is asynchronous, this process can happen
    alongside other code execution, without tempering or blocking the main thread
    of the JavaScript VM.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `vue-router` lazy loading at [https://router.vuejs.org/guide/advanced/lazy-loading.html.](https://router.vuejs.org/guide/advanced/lazy-loading.html)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `webpack` code-splitting at [https://webpack.js.org/guides/code-splitting/.](https://webpack.js.org/guides/code-splitting/)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the ECMAScript dynamic import proposal at [https://github.com/tc39/proposal-dynamic-import.](https://github.com/tc39/proposal-dynamic-import)
  prefs: []
  type: TYPE_NORMAL
