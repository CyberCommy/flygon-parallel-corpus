- en: Performing File Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we dealt with package management within the Red Hat
    world. Particularly, we covered the `yum`, `dnf`, `rpm`, and `yumex` utilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our focus will shift toward file management. We will look at
    ways to work in the shell. We will work on creating, modifying, and removing files.
    Additionally, we will work with directories, illustrating how to create, move,
    and remove a directory. Next, we will touch upon performing searches for files
    and directories. Finally, we will cover pipes and redirects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and moving files and directories in the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, copying, moving, renaming, and removing files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and removing directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipes and redirects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and moving files and directories in the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you will need to be familiar with working in the CLI. Throughout the
    previous chapters, we interacted with the shell. Now, we want to become efficient
    in the CLI. When we first open a Terminal, we are placed into the user''s home
    directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we''re being placed into the home directory of the
    user `philip`. This can be confirmed by issuing the print working directory (`pwd`)
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we''ve confirmed that we are indeed in the `/home/philip`
    directory. But, it gets even more interesting. There are various directories inside
    of `/home/philip`. We can confirm this by using the lists (`ls`) command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The directories (folders) listed in the preceding output are created for each
    user in the system. Now, the way in which the directories are displayed doesn''t
    really tell us a lot. To dig deeper, we can issue the `ls` command once again;
    this time, we will pass the `-l` option. The `-l` option exposes things such as
    the file type, user permissions, group permissions, user ownership, group ownership,
    size, and date last modified, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get some useful information from the preceding output. For instance,
    there are permissions for each directory; we can also see the ownership and size.
    Adding to this, in Linux, we have what are known as hidden files/folders. They
    are not displayed by default when we perform a listing; to get them, we have to
    add on the `-a` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! This way, we can tell whether a file or directory is hidden; these
    files/directories begin with a period in front of the name of the file or folder.
    In order to move between directories, we use the `cd` command. Change directory
    or `cd` allows us to navigate the Linux filesystem. So, let''s move on to `/home/philip/Documents`.
    We use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another way to move between directories. The first method that we
    used is known as the absolute path; this means that we specified the complete
    path to the directory. The next method for moving between the directories is specifying
    the relative path, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You have to be in the parent directory of the child directory for the relative
    method to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''re in the child directory, we can perform the `ls` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, they is no content in this directory. In order to move back up to
    the parent directory, we can use the `cd` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we specified the path. This method will always work.
    We can also use the `cd` command in another manner, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding method, we used a double period. The double period indicates
    the parent directory. If we had specified a single period, the following would
    have been the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The single period references the current directory itself. The following method
    can be used in a directory, regardless of where you are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The tilde (`~`) character will always bring us back to the home directory of
    the user. To illustrate this, we will go to the `/etc` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will issue the `cd` command once again, passing the tilde (`~`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! You can now see the power of the tilde (`~`) character. At the
    very top of the filesystem hierarchy lies the root. We usually refer to the root
    as `/`; this is not to be confused with the `/root` directory. The latter is the
    home directory of the root user. From the `/`, every other directory is created.
    We can get to the `/` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we are placed at the root of the filesystem. We can
    view this directory in a similar way to the other directories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice that we have some familiar directories here, such as `/home` and
    `/dev`. Interestingly, we can see the `/root` directory listed. We can change
    to that directory and perform a listing, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the preceding error due to the fact that we do not have permission to
    view the `/root` directory. Let''s authenticate as the root user and retry, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Voila! We are placed into the `/root` directory. This time, when we do a listing,
    we will notice right off the bat that this is not the `/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Based on the preceding output, navigating the directory structure is fairly
    intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, copying, moving, renaming, and removing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section sounds like a mouthful. Not to worry; it covers the techniques
    for creating and removing files. It also covers the methods for copying and renaming
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various files that we use on a daily basis. We can do an `ls` on
    the `/home/philip/Documents/NewTest` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, they aren''t any files inside of this directory. In Linux, we can
    create a file from the shell; we can use the `touch` command to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The file was created using some default permissions. Notably, the `-rw-rw-r--` object
    stands for the user (`-rw`), the group (`-rw`), and the other (`-r--`). The first
    dash (`-`) is referencing the file type. In this case, it''s a regular file. The
    (`rw-`) means that the user/owner has read and write permissions. The second set
    of `rw-` means that the group also has read and execute permissions. Lastly, the
    `r--` means that the other (everyone else) has read permissions. Also, the part
    which states `philip philip` refers to the owner of the file and the group that
    the file belongs to. We can change these permissions for this file by using the
    `chmod` command. Let''s suppose that we want to give the others (everyone else)
    read and write permissions. We can do so as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! We can now see the other permission says `rw-`. There is another way
    to change the permissions, rather than using `o+w`. We can use the numerical value.
    I will change the other back to `r--` by using the numerical format, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can read the preceding code as follows: in the `664`, `6` is equal to read
    and write, `6` is equal to read and write, and `4` is equal to read. The first
    digit is a placeholder for the user. The second digit is a placeholder for the
    group, and the last digit is a placeholder for the other. To further illustrate
    this, we can take off the read and leave the write for the group permissions,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can add on permissions by increasing the value. Let''s pick the
    others; we will give the others the read and execute permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Wonderful! We can even give all of the permissions (read, write, and execute)
    for the user, the group, or the others in a single command. Let''s start with
    the user, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see that the user has read, write, and execute permissions. I got
    the value of `7` by adding read equal to `4`, write equal to `2`, and execute
    equal to `1`. We will now give the group all of the permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! We can also remove all of the permissions for the user, group,
    or others in a single command. Let''s remove the permissions (read, write, and
    execute) for the others, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Placing a zero (`0`) negates all of the permissions for the particular section
    (user, group, or others). You can see the power of permissions. Similarly, we
    can use letters, as seen previously. The `u` means user, `g` means group, and
    `o` means others. We can remove the execute permission from the group as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We can use either a plus (`+`) symbol (to add a permission) or a minus (`-`)
    symbol (to remove a permission). We can also copy a file from one location to
    another, or inside the same location. A different name will have to be given if
    the destination for the file is inside the same location as the source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cp` command is used for copying. We will make a copy of the file and place
    it in `/home/philip/Documents/`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Directories have a `d` in front of their permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also move a file; the `mv` command is used for moving files. Let''s
    move `/home/philip/Documents/NewFile` and place it inside `/home/philip/Documents/NewTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The method that we used was to specify a period (`.`) for the location. This
    indicates the current working directory; so, instead of typing out the full destination
    path, we can use the period (`.`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also rename a file by using the `mv` command. Let''s rename the `NewFile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Voila! We can also rename a file and place it in another directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The file is no longer inside the present directory, but is now inside the `/home/philip/Documents`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! We can also remove a file by using the `rm` command. Let''s remove the
    `/home/philip/Documents/NewTest/OurFile`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Creating and removing directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create directories by using another popular command. The `mkdir` command
    can be used to create a directory. Let''s do a listing, using the `ls` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create our own directory inside of `/home/philip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, our new directory is listed at the bottom. You''ll also
    notice that we used the `ll` command; this is just an alias for the `ls -l` command.
    This can be verified quickly by using the `which` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! We can move into our newly created directory by using the `cd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, suppose that we have created a directory and have made a typo. Not to
    worry; we can leverage the `mv` command, which has the ability to rename a directory.
    Let''s attempt to rename the `/home/Test` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We are encountering this error due to the fact that we are inside the directory.
    Let''s try the command with the `-v` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To get around this, we need to navigate out of the directory, and then retry
    the `mv` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now, the `NewTest` file no longer exists inside of `/home/philip/Documents/`;
    this can be shown by executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also rename a directory by using the `mv` command. The trick is to specify
    a directory name when we call the `mv` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Renaming a directory is that simple. We can also change the permissions on
    a directory. Let''s remove the read, write, and execute permissions from the group,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! The `-R` option tells the `chmod` command to apply the permissions
    to everything that resides inside of the `/home/philip/ReName` directory. When
    we are finished with a directory, we can remove it. The `rmdir` command is used
    to remove directories. Let''s remove the `/home/philip/ReName` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding code, no errors were encountered. This might not be
    the case in your environment. Most often, you will either have files or other
    directories that reside in the directory that you are attempting to remove. Let''s
    quickly create a directory and place three files inside it. Then, we will attempt
    to remove the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will retry the `rm` command and look at the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Lo and behold, we encountered an error. This is common when a directory is
    not empty. We can work around it quite easily; this time, we will use the `rm`
    command with `-r`, which means to delete everything that follows. We can also
    add the `-v` option, which will show the details of any potential permissions
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Great!
  prefs: []
  type: TYPE_NORMAL
- en: You can use `-f` to delete an entire directory without being prompted for confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Finding files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, we are searching for files and directories from the GUI. We can also
    perform searches in the shell. First, we can use the `find` command; let''s look
    for files that have a `.conf` extension. The search function would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you encounter these errors, it''s an indication that you need some
    advanced permissions. Let''s try the search once again, as the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can even broaden the area where we want to perform a search. Let''s
    search the entire filesystem, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Some output has been omitted for brevity throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also search based on a part of a name. Let''s look for any file that
    begins with `gru`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we searched inside of the `/boot` directory. Empty
    files are often just sitting inside of a directory, without being used. We can
    search for empty files by using the `find` command. The `-type` option is passed
    to specify what we''re searching for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! But, wait; we can do some housekeeping by passing the `-delete`
    option, to remove any files that the `find` command has returned from our search.
    We can do so as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when using the `-delete` option, as it will remove the files, and
    even the directories, in some cases. Always back up your data before running `find`
    with the `-delete` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, you will notice that `/home/philip/Documents/RenameFile`,
    in addition to `/home/philip/Documents`, has been removed. Be very cautious whenever
    you pass the `-delete` option. Although in our case, we are using a lab environment,
    be sure to keep this in mind in your real systems. Perform a backup before attempting
    to pass the `-delete` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also search for a file or directory based on permissions. Yes! We would
    pass the `-readable`, `-writable`, and `-executable` options with the `find` command.
    It would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! You can see that the result of the `find` command matches the
    listing for files with the `read` permission. Likewise, we can search for the
    files and directories with execute permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, only the files with execute permissions for the others
    are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding to this, we can search for files and directories with write permissions,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! The results came back empty, because none of the files or directories
    have write permissions for the others. Similarly, we can search using numbers.
    We could look for execute permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, only directories with execute permissions are displayed.
    We can search for files and directories with write permissions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Interestingly enough, the results came back as expected, because the others
    do not have write permissions. Likewise, we can search for write permissions for
    groups, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! The results are empty, because the groups do not have write permissions.
    Lastly, we can search for write permissions for the user; this will yield the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Great job! The syntax is `-perm`, followed by the user (the first digit), the
    group (the second digit), and the others (the last digit).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another popular method for searching files and directories is to use the `locate`
    command. The `locate` utility is faster in terms of results, as compared to the
    `find` utility; this is due to the fact that the `locate` command uses a database
    to perform lookups. The database is called `mlocate`. We can perform a simple
    search of a file we have created, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, the `locate` command is unaware of the specified file.
    Not to worry; we simply have to update the database, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run into this error, it means that you need to run the command as the
    root user, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s more like it! We can also search by extensions. To do so, we can use
    a wildcard, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, only the results with lowercase names are displayed;
    we can fix this by passing `-i`, which tells the `locate` command to ignore the
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the results are the same, due to the fact that the files are
    in lowercase. We can also control how the output is displayed; we can pass the
    `--null` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we can see the desired results. Finally, we can view
    information about the database; to do so, we can use the `-S` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Great job! In addition to the size, we can also see the location of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Pipes and redirects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, when we are viewing output from various commands, the output is a bit
    fuzzy. Fear no more; we have what is known as pipes and redirects. Basically,
    when working with pipes (`|`), we take the output of a command and pass it as
    the input of another command. Redirects (`>`, `<`, `>>`, `2>`, and `2>&1`) are
    similar to taking output from a command, but this time, we send it to a location,
    such as a file or another location, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let''s use the `ls` command; the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We can view the output one page at a time by bringing in yet another powerful
    command—the `less` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to exit the `less` command, we can use the `q` on the keyboard. The
    benefit of using the `less` command is the fact that we can move back and forward,
    as opposed to the `more` command, which can only move forward. We can also use
    the pipe (`|`) character to pass values that another command is expecting. We
    can use the `wc` command to illustrate this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, we took the output from the `ls` command and passed
    it as the input to the `wc` command. The `wc` command is used for the word count;
    the `-w` option is used to display the total words.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can use redirects in a number of ways; in Linux, we have three types
    of streams, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: STDIN = input `<`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STDOUT = output ``>``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STDERR = standard error `2>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, we can mix and match the streams, as you will see later in this section. Let''s
    start with STDIN; we can use the `wc` command and call the input from a file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! The word count of `/boot/grub2/grub.cfg` is passed to the `wc` command.
    Moving on to STDOUT, we can get the output of a command and store it to a file.
    Let''s use the `ls` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we did a listing of `/etc/init.d/` and saved the output
    to `/home/philip/Documents/ls.txt`. This can be verified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, suppose that we use the `ls` command for another directory; this will
    overwrite the existing content of `/home/philip/Documents/ls.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the proof is in the pudding. A way around this would be to
    tell the STDOUT that we want to append the output, instead of overwriting it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go! So, we use `>>` to append data to an existing file. Next, we can
    combine the results of the STDIN of a command and send it to the STDOUT. That
    would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! We can also redirect STDERR to a file. Let''s use the file command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, it appears as though the command worked. Well, the
    truth of the matter is that the listing for `/tmp` worked, but the error for the
    file `TestFileWithError` was not displayed. The error was sent to `/home/philip/Documents/STDERR.txt`.
    This can be verified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! We can also combine the STDOUT with the STDERR, in a single file.
    This is accomplished by telling the shell that we would like to store the STDERR,
    along with the STDOUT, inside the file `2>&1`. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we can see the error at the beginning of the file,
    followed by the listing of the `/tmp`. Finally, it''s possible to display the
    output of a command and simultaneously redirect the output to a file; this is
    made possible by yet another powerful command—the `tee` command. The following
    shows the `tee` command in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, you can see the power of the `tee` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was very detailed. I must say that I had a lot of fun working on
    this chapter. We covered the filesystem structure. You learned how to navigate
    the filesystem using the `cd` command. Then, we looked at how to identify the
    working directory. After that, we covered the method for viewing the contents
    of a directory. Adding to that, we exposed hidden files and directories within
    directories that weren't displayed by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we covered how to create a file in the shell. Furthermore, you saw the
    various permissions for a file and how to change these permissions. Following
    this, we moved on to directories inside a Linux environment. The various methods
    to create, move, rename, and remove a directory were explored. The next topic
    involved techniques to search for files and directories. First, we worked with
    the `find` command extensively. Next, the `locate` command was explored. Finally,
    we worked with pipes and redirects, within the context of the shell environment.
    You saw how you can leverage the output of a command and pass it as the input
    for another command. You then saw how to redirect to and from a file, including
    STDOUT and STDERR. Finally, we took a look at another powerful command: the `tee`
    command.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at processes in the context of the shell environment.
    Particularly, we will look at a technique to manage processes. Some popular commands
    will be covered, such as `top`, `service`, and `systemctl`, used for identifying
    and managing processes. The next chapter will be concise, in the sense that we
    will focus on the methods that are essential for every Linux engineer to be aware
    of when working inside a shell environment. The skill set that you will gain will
    foster even more confidence as you progress in your path to certification.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following directories is the `root` directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/root/`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/root`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/home/root`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands is used to change to another directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `pwd`
  prefs: []
  type: TYPE_NORMAL
- en: B. `chage`
  prefs: []
  type: TYPE_NORMAL
- en: C. `cd`
  prefs: []
  type: TYPE_NORMAL
- en: D. `change dir`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands will print the current working directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `print dir`
  prefs: []
  type: TYPE_NORMAL
- en: B. `pwd`
  prefs: []
  type: TYPE_NORMAL
- en: C. `display`
  prefs: []
  type: TYPE_NORMAL
- en: D. `cd`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands is used to print the content of a directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `ls`
  prefs: []
  type: TYPE_NORMAL
- en: B. `which`
  prefs: []
  type: TYPE_NORMAL
- en: C. `whereis`
  prefs: []
  type: TYPE_NORMAL
- en: D. `cat`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following options can be used to display file and directory permissions,
    using the `ls` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-r`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-b`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-a`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-l`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following options can be used to display hidden files and directories,
    with the `ls` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-l`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-b`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-a`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-u`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands is used to remove a directory, even when it's
    not empty?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `rmdir`
  prefs: []
  type: TYPE_NORMAL
- en: B. `rm`
  prefs: []
  type: TYPE_NORMAL
- en: C. `remove`
  prefs: []
  type: TYPE_NORMAL
- en: D. `mv`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following options are used to find and remove empty files and directories,
    with the `find` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `empty -remove`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-empty -clean`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-empty -delete`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-empty -cycle`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands is used to update the database that the `locate`
    command uses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `updatelocate`
  prefs: []
  type: TYPE_NORMAL
- en: B. `updatedatabase`
  prefs: []
  type: TYPE_NORMAL
- en: C. `locateupdate`
  prefs: []
  type: TYPE_NORMAL
- en: D. `updatedb`
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following commands displays the output of a command and simultaneously
    saves the results to a file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `less`
  prefs: []
  type: TYPE_NORMAL
- en: B. `more`
  prefs: []
  type: TYPE_NORMAL
- en: C. `wc`
  prefs: []
  type: TYPE_NORMAL
- en: D. `tee`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get more information about various distributions about files manipulation
    at: [https://unix.stackexchange.com](https://unix.stackexchange.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a lot of useful tips and best practices from users in the Linux community,
    refer to: [https://journalxtras.com](https://journalxtras.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For general information that relates to various commands that work on both CentOS
    and Ubuntu, and for the ability to post your questions for other community members
    to respond to, refer to [https://www.linuxquestions.org](https://www.linuxquestions.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
