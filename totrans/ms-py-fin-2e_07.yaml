- en: Modeling Interest Rates and Derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interest rates affect economic activities at all levels. Central banks, including
    the **Federal Reserve** (informally known as the **Fed**), target interest rates
    as a policy tool to influence economic activity. Interest rate derivatives are
    popular with investors who require customized cash flow needs or specific views
    on interest-rate movements.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key challenges that interest-rate derivative traders face is to have
    a good and robust pricing procedure for these products. This involves understanding
    the complicated behavior of an individual interest-rate movement. Several interest-rate
    models have been proposed for financial studies. Some common models studied in
    finance are the Vasicek, CIR, and Hull-White models. These interest-rate models
    involve modeling the short-rate and rely on factors (or sources of uncertainty)
    with most of them using only one factor. Two-factor and multi-factor interest
    rate models have been proposed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding yield curves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valuing a zero-coupon bond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrapping a yield curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating forward rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the yield to maturity and price of a bond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the bond duration and convexity using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short-rate modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Vasicek short-rate model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of bond options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pricing a callable bond option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed-income securities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Corporations and governments issue fixed-income securities as a means of raising
    money. The owners of such debts lend money and expect to receive the principal
    when the debt matures. The issuer who wishes to borrow money may issue a fixed
    amount interest payment during the lifetime of the debt at pre-specified times.
  prefs: []
  type: TYPE_NORMAL
- en: The holders of debt securities, such as US Treasury bills, notes, and bonds,
    face the risk of default by the issuer. The federal government and municipal government
    are thought to face the least default risk, since they can easily raise taxes
    and create more money to repay the outstanding debts.
  prefs: []
  type: TYPE_NORMAL
- en: Most bonds pay a fixed amount of interest semi-annually, while some pay quarterly,
    or annually. These interest payments are also referred to as coupons. They are
    quoted as a percentage of the face value or par amount of the bond on an annual
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a 5-year $10,000 Treasury bond with a coupon rate of 5% pays coupons
    of $500 each year, or coupons of $250 every 6 months, up to and including the
    maturity date. Should the interest rates drop and new T-bonds pay a 3% coupon
    rate, the buyer of the new bond will only receive coupons of $300 annually, while
    existing holders of the 5% bond will continue to receive $500 annually. As the
    characteristics of the bonds influence their prices, they''re closely related
    to current levels of interest rates in an inverse way: the value of the bond decreases
    as the interest rates increase. As interest rates decrease, bond prices increase.'
  prefs: []
  type: TYPE_NORMAL
- en: Yield curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a normal yield curve environment, long-term interest rates are higher than
    short-term interest rates. Investors expect to be compensated with higher returns
    when they lend money for a longer period since they are exposed to a higher default
    risk. The normal or positive yield curve is said to be upward sloping, as shown
    in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/185d5168-eff0-4283-a177-f0c361a069c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In certain economic conditions, the yield curve can be inverted. Long-term
    interest rates are lower than short-term interest rates. Such a condition occurs
    when the supply of money is tight. Investors are willing to forgo long-term gains
    to preserve their wealth in the short-term. During periods of high inflation,
    where the inflation rate exceeds the rate of coupon interests, negative interest
    rates may be observed. Investors are willing to pay in the short-term just to
    secure their long-term wealth. The inverted yield curve is said to be downward
    sloping, as shown in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9481ae8a-ca46-4bfa-acdc-a939ed515439.png)'
  prefs: []
  type: TYPE_IMG
- en: Valuing a zero-coupon bond
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **zero-coupon bond** is a bond that does not pay any periodic interest except
    on maturity, where the principal or face value is repaid. Zero-coupon bonds are
    also called **pure discount bonds**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A zero-coupon bond can be valued as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/42054011-f33e-4833-b888-b6402dc75f24.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *y* is the annually-compounded yield or rate of the bond, and *t* is the
    time remaining to the maturity of the bond.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of a five-year zero-coupon bond with a face
    value of $100\. The yield is 5%, compounded annually. The price can be calculated
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a72bb02c-3690-47ee-81ab-c702d8a0dc15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A simple Python zero-coupon bond calculator can be used to illustrate this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding example, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we assumed that the investor is able to invest $78.35
    at the prevailing annual interest rate of 5% for 5 years, compounded annually.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a zero-coupon bond calculator, we can use it to determine zero
    rates by bootstrapping the yield curve, as explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Spot and zero rates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the compounding frequency increases (say, from compounded yearly to compounded
    daily), the future value of money reaches an exponential limit. That is to say,
    the value of $100 today will reach a future value of $100*e*^(*RT*) when it is
    invested at a continuously compounded rate, *R*, for a period of time, *T*. If
    we discount these values for a security that pays $100 at a future time, *T*,
    with a continuously-compounded discount rate, *R*, its value at time zero is ![](Images/ddd168f2-9474-4f69-9bda-a13ced846e86.png).
    This rate is known as the **spot rate**.
  prefs: []
  type: TYPE_NORMAL
- en: Spot rates represent the current interest rates for several maturities, should
    we want to borrow or lend money now. Zero rates represent the internal rate of
    return of zero-coupon bonds.
  prefs: []
  type: TYPE_NORMAL
- en: By deriving the spot rates of bonds with different maturities, we can construct
    the present yield curve through a bootstrapping process using zero-coupon bonds.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping a yield curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Short-term spot rates can be derived directly from various short-term securities,
    such as zero-coupon bonds, T-bills, notes, and eurodollar deposits. However, longer-term
    spot rates are typically derived from the prices of long-term bonds through a
    bootstrapping process, taking into account the spot rates of maturities that correspond
    to the coupon payment date. After obtaining short-term and long-term spot rates,
    the yield curve can then be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: An example of bootstrapping the yield curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s illustrate the bootstrapping of the yield curve with an example. The
    following table shows a list of bonds with different maturities and prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bond face value in dollars** | **Time to maturity in years** | **Annual
    coupon in dollars** | **Bond cash price in dollars** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 0.25 | 0 | 97.50 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 0.50 | 0 | 94.90 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 1.00 | 0 | 90.00 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 1.50 | 8 | 96.00 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 2.00 | 12 | 101.60 |'
  prefs: []
  type: TYPE_TB
- en: 'An investor in a three-month zero-coupon bond today at $97.50 would earn interest
    of $2.50\. The three-month spot rate can be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/561171c6-a427-4988-b07d-0ec8c485ab64.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/dd232279-7f2c-43d5-8aa5-e9751e8a1b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/a0df40f1-7675-4475-8a97-3eee9f6eac05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thus, the 3-month zero rate is 10.127% with continuous compounding. The spot
    rates of the zero-coupon bonds are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Time to maturity in years** | **Spot rate (in percent)** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0.25 | 10.127 |'
  prefs: []
  type: TYPE_TB
- en: '| 0.50 | 10.469 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.00 | 10.536 |'
  prefs: []
  type: TYPE_TB
- en: 'Using these spot rates, we can now price the 1.5-year bond as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bcf4d53d-0ddd-463c-9e77-df1743c0adb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The value of *y* can easily be solved by rearranging the equation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ffe0eb1a-7480-4755-a310-3aecc25f54cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the spot rate of the 1.5-year bond as 10.681%, we can use it to price
    the 2-year bond with coupons of $6 semi-annually, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/06c10adf-5968-4deb-82a1-99e8e2c0c183.png)'
  prefs: []
  type: TYPE_IMG
- en: Rearranging the equation and solving for *y* gives us the spot rate of the 2-year
    bond as 10.808.
  prefs: []
  type: TYPE_NORMAL
- en: Through this iterative procedure of calculating the spot rate of every bond
    in increasing order of maturity and using it in the next iteration, we obtain
    a list of spot rates of different maturities that we can use to construct the
    yield curve.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the yield curve bootstrapping class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for writing the Python code to bootstrap the yield curve and running
    with a plot output are outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class named `BootstrapYieldCurve`, which will implement the bootstrapping
    of the yield curve in Python code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, the two `zero_rates` and `instruments` dictionary variables
    are declared and will be used by several methods, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a method named `add_instrument()`, which appends a tuple of bond information
    to the `instruments` dictionary, indexed by the maturity time. This method is
    written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `get_maturities()`, which simply returns a list of available
    maturities in ascending order. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `get_zero_rates()`, which bootstraps the yield curve, calculates
    the spot rates along that yield curve, and returns a list of zero rates in ascending
    order of maturity. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `bootstrap_zero_coupons()`, which calculates the spot rates
    of the given zero-coupon bonds and adds them to the `zero_rates` dictionary, indexed
    by maturity. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `zero_coupon_spot_rate()`, which calculates the spot rate
    of a zero-coupon bond. This method is called by `bootstrap_zero_coupons()` and
    is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `get_bond_spot_rates()`, which calculates the spot rates
    of non zero-coupon bonds and adds them to the `zero_rates` dictionary, indexed
    by maturity. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `calculate_bond_spot_rate()`, which is called by `get_bond_spot_rates()`
    to calculate the spot rate at a particular maturity period. This method is written
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate the `BootstrapYieldCurve` class and add each bond''s information
    from the preceding table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the `get_zero_rates()` method in the class instance returns a list
    of spot rates in the same order as the maturities, which are stored in the `x`
    and `y` variables, respectively. Issue the following Python code to plot `x` and
    `y` on a graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following yield curve:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/04f8b477-3f32-4b98-943a-13fcbaf1b8e5.png)'
  prefs: []
  type: TYPE_IMG
- en: In a normal yield curve environment, where the interest rates increase as the
    maturities increase, we obtain an upward-sloping yield curve.
  prefs: []
  type: TYPE_NORMAL
- en: Forward rates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An investor who plans to invest at a later time may be curious to know what
    the future interest rate will look like, as implied by today''s term structure
    of interest rates. For example, you might ask, *What is the one-year spot rate
    one year from now?* To answer this question, you can calculate forward rates for
    the period between *T[1]* and *T[2]* using this formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b72dad87-e048-4867-bdfd-2e0bf92a9488.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *r[1]* and *r[2]* are the continuously-compounded annual interest rates
    at time periods *T[1]* and *T[2]*, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `ForwardRates` class helps us generate a list of forward rates
    from a list of spot rates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using spot rates derived from our preceding yield curve, we get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `get_forward_rates()` method of the `ForwardRates` class returns
    a list of forward rates, starting from the next time period.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the yield to maturity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **yield to maturity** (**YTM**) measures the interest rate, as implied by
    the bond, which takes into account the present value of all the future coupon
    payments and the principal. It is assumed that bond holders can invest received
    coupons at the YTM rate until the maturity of the bond; according to risk-neutral
    expectations, the payments received should be the same as the price paid for the
    bond.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of a 5.75% bond that will mature in 1.5 years
    with a par value of 100\. The price of the bond is $95.0428 and coupons are paid
    semi-annually. The pricing equation can be stated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/82dc5d3a-883b-42f7-b6fc-18737b6845b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*c* is the coupon dollar amount paid at each time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*T* is the time period of payment in years'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*n* is the coupon payment frequency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*y* is the YTM that we are interested in solving'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To solve the YTM is typically a complex process, and most bond YTM calculators
    use Newton's method as an iterative process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bond YTM calculator is illustrated by the following `bond_ytm()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remember that we covered the use of Newton's method and other nonlinear function
    root solvers in [Chapter 3](ae0a23e9-876c-43b3-9f48-d1d810f1fb97.xhtml), *Nonlinearity
    in Finance*. For this YTM calculator function, we used the `scipy.optimize` package
    to solve the YTM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the parameters from the bond example, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The YTM of the bond is 9.369%. Now we have a bond YTM calculator that can help
    us compare a bond's expected return with those of other securities.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the price of a bond
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the YTM is known, we can get back the bond price in the same way we used
    the pricing equation. This is implemented by the `bond_price()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Plugging in the same values from the earlier example, we get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This gives us the same original bond price discussed in the earlier example,
    *Calculating the yield to maturity*. With the `bond_ytm()` and `bond_price()`
    functions, we can apply these for further uses in bond pricing, such as finding
    the bond's modified duration and convexity. These two characteristics of bonds
    are of importance to bond traders in helping them formulate various trading strategies
    and hedge their risk.
  prefs: []
  type: TYPE_NORMAL
- en: Bond duration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Duration is a sensitivity measure of bond prices to yield changes. Some duration
    measures are effective duration, Macaulay duration, and modified duration. The
    type of duration that we will discuss is modified duration, which measures the
    percentage change in bond price with respect to a percentage change in yield (typically
    1% or 100 **basis points** (**bps**)).
  prefs: []
  type: TYPE_NORMAL
- en: The higher the duration of a bond, the more sensitive it is to yield changes.
    Conversely, the lower the duration of a bond, the less sensitive it is to yield
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified duration of a bond can be thought of as the first derivative of
    the relationship between price and yield:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b607a62b-2530-40eb-8429-60b806867973.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*dY* is the given change in yield'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*P^−* is the price of the bond from a decrease in yield by *dY*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*P^+* is the price of the bond from an increase in yield by *dY*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*P[0]* is the initial price of the bond'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be noted that the duration describes the linear price-yield relationship
    for a small change in *Y*. Because the yield curve is not linear, using a large
    value of *dY* does not approximate the duration measure well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of the modified duration calculator is given in the following
    `bond_mod_duration()` function. It uses the `bond_ytm()` function as discussed
    earlier in this chapter, *Calculating the yield to maturity*, to determine the
    yield of the bond with the given initial value. Also, it uses the `bond_price()`
    function to determine the price of the bond with the given change in yield:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can find out the modified duration of the 5.75% bond discussed earlier,
    in *Calculating the yield to maturity,* which will mature in 1.5 years with a
    par value of 100 and a bond price of 95.0428:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The modified duration of the bond is 1.392 years.
  prefs: []
  type: TYPE_NORMAL
- en: Bond convexity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Convexity** is the sensitivity measure of the duration of a bond to yield
    changes. Think of convexity as the second derivative of the relationship between
    the price and yield:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b025e982-1290-4e87-9937-a6d87aa0d791.png)'
  prefs: []
  type: TYPE_IMG
- en: Bond traders use convexity as a risk-management tool to measure the amount of
    market risk in their portfolio. Higher-convexity portfolios are less affected
    by interest-rate volatilities than lower-convexity portfolios, given the same
    bond duration and yield. As such, higher-convexity bonds are more expensive than
    lower-convexity ones, everything else being equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of a bond convexity is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now find the convexity of the 5.75% bond discussed earlier, in *Calculating
    the yield to maturity* section, which will mature in 1.5 years with a par value
    of 100 and a bond price of 95.0428:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The convexity of the bond is 2.63\. For two bonds with the same par value, coupon,
    and maturity, their convexity may be different, depending on their location on
    the yield curve. Higher-convexity bonds will exhibit higher price changes for
    the same change in yield.
  prefs: []
  type: TYPE_NORMAL
- en: Short–rate modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In short-rate modeling, the short-rate, *r(t)*, is the spot rate at a particular
    time. It is described as a continuously-compounded, annualized interest rate term
    for an infinitesimally short period of time on the yield curve. The short-rate
    takes on the form of a stochastic variable in interest-rate models, where the
    interest rates may change by small amounts at every point in time. Short-rate
    models attempt to model the evolution of interest rates over time, and hopefully
    describe the economic conditions at certain periods.
  prefs: []
  type: TYPE_NORMAL
- en: Short-rate models are frequently used in the evaluation of interest-rate derivatives.
    Bonds, credit instruments, mortgages, and loan products are sensitive to interest-rate
    changes. Short-rate models are used as interest rate components in conjunction
    with pricing implementations, such as numerical methods, to help price such derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: Interest-rate modeling is considered a fairly complex topic since interest rates
    are affected by a multitude of factors, such as economic states, political decisions,
    government intervention, and laws of supply and demand . A number of interest-rate
    models have been proposed to account for various characteristics of interest rates.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take a look at some of the most popular one-factor
    short-rate models used in financial studies, namely, the Vasicek, Cox-Ingersoll-Ross,
    Rendleman and Bartter, and Brennan and Schwartz models. Using Python, we will
    perform a one-path simulation to obtain a general overview of the interest-rate
    path process. Other models commonly discussed in finance include the Ho-Lee, Hull-White,
    and Black-Karasinki.
  prefs: []
  type: TYPE_NORMAL
- en: The Vasicek model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the one-factor Vasicek model, the short-rate is modeled as a single stochastic
    factor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/37266859-af0c-454c-b012-aa6ddca7c777.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *K*, *θ*, and *σ* are constants, and *σ* is the instantaneous standard
    deviation. *W(t)* is the random Wiener process. The Vasicek follows an Ornstein-Uhlenbeck
    process, where the model reverts around the mean, *θ*, with *K*, the speed of
    mean reversion. As a result, the interest rates may become negative, which is
    an undesirable property in most normal economic conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us understand this model, the following code generates a list of interest
    rates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `vasicek()` function returns a list of time periods and interest rates
    from the Vasicek model. It takes in a number of input arguments: `r0` is the initial
    rate of interest at *t=0*; `K`, `theta`, and `sigma` are constants; `T` is the
    period in terms of number of years; `N` is the number of intervals for the modeling
    process; and `seed` is the initialization value for NumPy''s standard normal random-number
    generator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the current interest rate is close to zero at 0.5%, the long term
    mean level `theta` is `0.15`, and the instantaneous volatility `sigma` is 5%.
    We will use a `T` value of `10` and an `N` value of `200` to model the interest
    rates for different speeds of mean reversion, `K`, with values of `0.002`, `0.02`,
    and `0.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding commands, we get the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/32689e30-70bb-4fec-bf7a-2c4f8addd8f0.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we are running just one simulation to see what the interest
    rates from the Vasicek model looks like. Observe that interest rates did become
    negative at some point. With higher levels of speed for mean reversion, `K`, the
    process reaches its long-term level of 0.15 sooner.
  prefs: []
  type: TYPE_NORMAL
- en: The Cox-Ingersoll-Ross model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Cox-Ingersoll-Ross** (**CIR**) model is a one-factor model that was proposed
    to address the negative interest rates found in the Vasicek model. The process
    is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/320ced44-049d-4768-9b14-48fe8ded0ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The term ![](Images/2bfa78e2-1310-496a-9e74-e15c9fe1de74.png) increases the
    standard deviation as the short-rate increases. Now the `vasicek()` function can
    be rewritten as the CIR model in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the same example given in the *The Vasicek model* section, assume that
    the current interest rate is 0.5%, `theta` is `0.15`, and `sigma` is `0.05`. We
    will use a `T` value of `10` and `N` of `200` to model the interest rates with
    different speeds of mean reversion, `K`, using values of `0.002`, `0.02`, and
    `0.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/407ff3e0-8033-48c3-b5e2-debfc584883c.png)'
  prefs: []
  type: TYPE_IMG
- en: Observe that the CIR interest model does not have negative interest rate values.
  prefs: []
  type: TYPE_NORMAL
- en: The Rendleman and Bartter model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Rendleman and Bartter model, the short-rate process is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f598fed1-d57f-483c-a469-f8004f8c8945.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the instantaneous drift is *θr(t)* with an instantaneous standard deviation, *σr(t)*.
    The Rendleman and Bartter model can be thought of as a geometric Brownian motion,
    akin to a stock price stochastic process that is log-normally distributed. This
    model lacks the property of mean reversion. Mean reversion is a phenomenon where
    the interest rates seem to be pulled back toward a long-term average level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Python code models the Rendleman and Bartter interest-rate process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We will continue to use the example from the previous sections and compare the
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the current interest rate is 0.5%, and `sigma` is `0.05`. We will
    use a `T` value of `10` and `N` of `200` to model the interest rates with different
    instantaneous drift, `theta`, using values of `0.01`, `0.05`, and `0.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following graph is the output for the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0eee54c3-00a1-4ac5-aa21-d65391894a13.png)'
  prefs: []
  type: TYPE_IMG
- en: In general, this model lacks the property of mean reversion and grows toward
    a long-term average level.
  prefs: []
  type: TYPE_NORMAL
- en: The Brennan and Schwartz model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Brennan and Schwartz model is a two-factor model where the short-rate reverts
    toward a long-term rate as the mean, which also follows a stochastic process.
    The short-rate process is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dc9642f7-31df-4525-baeb-415df2d335d1.png)'
  prefs: []
  type: TYPE_IMG
- en: It can be seen that the Brennan and Schwartz model is another form of a geometric
    Brownian motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Python code can now be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume that the current interest rate remains at 0.5%, and the long-term mean
    level of `theta` is 0.006\. `sigma` is `0.05`. We will use a `T` value of `10`
    and `N` of `200` to model the interest rates with different speeds of mean reversion, `K`,
    using values of `0.2`, `0.02`, and `0.002`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding commands, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b45e7c11-d9ec-4fa6-bbf8-0714cfa9b235.png)'
  prefs: []
  type: TYPE_IMG
- en: When k is 0.2, the speed of the mean reversion is fastest toward the long-term
    mean of 0.006.
  prefs: []
  type: TYPE_NORMAL
- en: Bond options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When bond issuers, such as corporations, issue bonds, one of the risks they
    face is the interest rate risk. When interest rates decrease, bond prices increase.
    While existing bondholders will find their bonds more valuable, bond issuers,
    on the other hand, find themselves in a losing position, since they will be issuing
    higher-interest payments than the prevailing interest rate. Conversely, when interest
    rates increase, bond issuers are at an advantage, since they are able to continue
    issuing the same low-interest payments as agreed to on the bond-contract specifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To capitalize on interest-rate changes, bond issuers may embed options within
    a bond. This allows the issuer the right, but not the obligation, to buy or sell
    the issued bond at a predetermined price during a specified period of time. An
    American type of bond option allows the issuer to exercise the rights of the option
    at any point in time during the lifetime of a bond. A European type of bond option
    allows the issuer to exercise the rights of the option on a specific date. The
    exact style of the date of exercise varies from bond option to bond option. Some
    issuers may choose to exercise the right of the bond option when the bond has
    been in circulation in the market for over a year. Some issuers may choose to
    exercise the bond option on one of several specific dates. Regardless of the exercise
    dates of the bond, you may price the bond with an embedded option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price of bond = price of bond with no option - price of embedded option
  prefs: []
  type: TYPE_NORMAL
- en: 'The pricing of a bond with no option is fairly straightforward: the present
    value of the bond to be received at a future date, including all coupon payments.
    A number of assumptions are to be made about the theoretical interest rates in
    the future at which the coupon payments may be reinvested. One such assumption
    might be the movement of interest rates as implied by short-rate models, which
    we covered in the preceding section, *Short-rate modeling*. Another assumption
    might be the movement of interest rates within a binomial or trinomial tree. For
    simplicity, in bond-pricing studies, we will price zero-coupon bonds that will
    not issue coupons during the lifetime of the bond.'
  prefs: []
  type: TYPE_NORMAL
- en: To price an option, one would have to determine available exercise dates. Starting
    from the future value of the bond, the bond price is compared against the exercise
    price of the option and traverses back to the present time using a numerical procedure,
    such as a binomial tree. This price comparison is performed at time points when
    the bond option may be exercised. With the no-arbitrage theory, accounting for
    the present excess values of the bond when exercised, we obtain the price of the
    option. For simplicity, in bond-pricing studies in the later section of this chapter,
    *Pricing callable bond options*, we will treat the embedded option of zero-coupon
    bonds as an American option.
  prefs: []
  type: TYPE_NORMAL
- en: Callable bonds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an economic condition where there are high interest rates, bond issuers are
    likely at risk of facing an interest-rate decrease and having to continue to issue
    higher-interest payments than the prevailing interest rate. As such, they may
    choose to issue callable bonds. A callable bond contains an embedded agreement
    to redeem the bond at agreed dates. Existing bond holders are considered to have
    sold a call option to the bond issuer.
  prefs: []
  type: TYPE_NORMAL
- en: In the event that interest rates fall and the corporation has the right to exercise
    the option to buy back the bond during that period at a specific price, they may
    choose to do so. The company can then issue new bonds at lower interest rates.
    This also means that the company is able to raise more capital in the form of
    higher bond prices.
  prefs: []
  type: TYPE_NORMAL
- en: Puttable bonds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike callable bonds, the owner of puttable bonds has the right, but not the
    obligation, to sell the bond back to the issuer at an agreed price during a certain
    period. Owners of puttable bonds are considered to have bought a put option from
    the bond issuer. When interest rates increase, values of existing bonds become
    less valuable and puttable bond holders are more incentivized to exercise the
    right to sell the bond at a higher exercise price. Since puttable bonds are more
    beneficial to buyers than to the issuers, they are generally less common than
    callable bonds. Variants of puttable bonds can be found in the form of loan and
    deposit instruments. A customer who has placed a fixed-rate deposit with a financial
    institution receives interest payments on specified dates. They are entitled to
    withdraw the deposit at any time. As such, a fixed-rate deposit instrument can
    be thought of as a bond with an embedded American put option.
  prefs: []
  type: TYPE_NORMAL
- en: An investor who wishes to borrow money from a bank enters a loan agreement,
    making interest payments during the lifetime of the agreement until the debt,
    together with the principal amount and agreed interest, is fully repaid. The bank
    can be considered as buying a put option on a bond. Under certain circumstances,
    the bank may exercise the right to redeem the full value of the loan agreement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, the price of puttable bonds can be thought of as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price of puttable bond = price of bond with no option + price of put option
  prefs: []
  type: TYPE_NORMAL
- en: Convertible bonds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Convertible bonds are issued by companies and contain an embedded option that
    allows the holder to convert the bond into a number of shares of common stock.
    The amount of shares to be converted for a bond is defined as the conversion ratio,
    which is determined such that the dollar amount of shares is the same as the value
    of the bond.
  prefs: []
  type: TYPE_NORMAL
- en: Convertible bonds have similarities with callable bonds. They allow the bond
    holders to exercise the bond for an equivalent amount of shares at the specified
    conversion ratio at agreed times. Convertible bonds typically issue lower coupon
    rates than non-convertible bonds, to compensate for the additional value of the
    right to exercise.
  prefs: []
  type: TYPE_NORMAL
- en: When convertible bond holders exercise their rights into stocks, the company's
    debts are reduced. On the other hand, the company's stocks become more diluted
    as the number of shares in the circulation increases, and the company's stock
    price is expected to fall.
  prefs: []
  type: TYPE_NORMAL
- en: As the company's stock price increases, convertible bond prices tend to increase.
    Conversely, as the company's stock price decreases, convertible bond prices tend
    to decrease.
  prefs: []
  type: TYPE_NORMAL
- en: Preferred stocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preferred stocks are stocks that have bond-like qualities. Owners of preferred
    stocks have seniority of claim on dividend payments over common stocks, which
    are usually negotiated as a fixed percentage of their par value. Although there
    is no guarantee of dividend payments, all dividends are paid on preferred stock
    first over common stock. In certain agreements on preferred stocks, dividends
    that are not paid as agreed may accumulate until they are paid at a later time.
    These preferred stocks are known as **cumulative**.
  prefs: []
  type: TYPE_NORMAL
- en: Prices of preferred stocks typically move in tandem with their common stock.
    They may have voting rights associated with common shareholders. In the event
    of bankruptcy, preferred stocks have a first lien of its par value upon liquidation.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing a callable bond option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at pricing a callable bond. We assume
    that the bond to be priced is a zero-coupon paying bond with an embedded European
    call option. The price of a callable bond can be thought of as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Price of callable bond = price of bond with no option − price of call option
  prefs: []
  type: TYPE_NORMAL
- en: Pricing a zero-coupon bond by the Vasicek model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The value of a zero-coupon bond with a par value of 1 at time *t* and a prevailing
    interest rate, *r*, is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/00daba85-1f73-4228-a0a0-285ff6c3bfff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the interest rate, *r*, is always changing, we rewrite the zero-coupon
    bond as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/be2bcba4-d039-45ab-aa8d-8c570c665307.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the interest rate, *r*, is a stochastic process that accounts for the price
    of the bond from time *t* to *T*, where *T* is the time to maturity of the zero-coupon
    bond.
  prefs: []
  type: TYPE_NORMAL
- en: To model the interest rate, *r*, we can use one of the short-rate models as
    a stochastic process. For this purpose, we will use the Vasicek model to model
    the short-rate process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expectation of a log-normally distributed variable, *X*, is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/13f61301-4101-4ebc-b1d8-94b3f6c554b6.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/e393a7b1-f9ee-471d-a186-82d980722ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking moments of the log-normally distributed variable *X*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4aaf67e6-08bf-4d33-bc5f-3203f84f8f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: We obtained the expected value of a log-normally distributed variable, which
    we will use in the interest-rate process for the zero-coupon bond.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the Vasicek short-rate process model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/252c0730-4d5f-46bb-993d-f2f544595c03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, *r(t)* is derived as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/71bee418-e109-41ed-98df-f93d5c3e9633.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the characteristic equation and the interest-rate movements of the Vasicek
    model, we can rewrite the zero-coupon bond price in terms of expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/23fd61a9-b958-4efe-b6ad-00da860e177d.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/a83a9a41-df4a-4ee1-8764-547cf40e77b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f7f8cd6a-4573-47ac-ab9f-baf0f7f9cc1f.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/bd510c68-a70f-4ba1-a614-a880d4c40d3d.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/30b28c87-c8be-4e71-a8fb-f48746691600.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Python implementation of the zero-coupon bond price is given in the `exact_zcb`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: For example, we are interested in finding out the prices of zero-coupon bond
    prices for a number of maturities. We model the Vasicek short-rate process with
    a `theta` value of `0.5`, `kappa` value of `0.02`, `sigma` value of `0.03`, and
    an initial interest rate, `r0`, of `0.015`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugging these values into the `exact_zcb` function, we obtain zero-coupon
    bond prices, for the time period from 0 to 25 years with intervals of 0.5 years,
    and plot out the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following graph is the output for the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/874e6a9d-00e4-4731-92fd-eebafead18e2.png)'
  prefs: []
  type: TYPE_IMG
- en: The value of early exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Issuers of callable bonds may redeem the bond at an agreed price, as specified
    in the contract. To price such a bond, the discounted early-exercise values can
    be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f39ae822-674f-4710-ad99-3eba6b27a43e.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *k* is the price ratio of the strike price to the par value and *r* is
    the interest rate for the strike price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python implementation of the early-exercise option can then be written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are interested in valuing a call option with a
    strike ratio of 0.95 and an initial interest rate of 1.5%. We can then plot the
    values as a function of time and superimpose them onto a graph of zero-coupon
    bond prices to give us a better visual representation of the relationship between
    zero-coupon bond prices and callable bond prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output for the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2be4e238-33bc-4dc1-b834-a748f95db989.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding graph, we can approximate the price of callable zero-coupon
    bond prices. Since the bond issuer owns the call, the price of the callable zero-coupon
    bond can be stated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/79549aaa-58b0-4657-87ed-25540b6fdcce.png)'
  prefs: []
  type: TYPE_IMG
- en: This callable bond price is an approximation, given the current interest-rate
    level. The next step would be to treat early-exercise by going through a form
    of policy iteration, which is a cycle used to determine optimum early-exercise
    values and their effect on other nodes, and check whether they become due for
    an early exercise. In practice, such an iteration only occurs once.
  prefs: []
  type: TYPE_NORMAL
- en: Policy iteration by finite differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used the Vasicek model in our short-rate process to model a
    zero-coupon bond. We can undergo policy iteration by finite differences to check
    for early-exercise conditions and their effect on other nodes. We will use the
    implicit method of finite differences for the numerical pricing procedure, as
    discussed in [Chapter 4](bd8dfd19-c025-4223-8d5e-b7c7893874c3.xhtml)*, Numerical
    Procedures for Pricing Options*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a class named `VasicekCZCB`, which will incorporate all the methods
    used to implement the pricing of callable zero-coupon bonds by the Vasicek model.
    The class with its constructor definition is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the constructor, the `norminv` and `normv` variable is made available to
    all methods that require the computation of the inverse normal cumulative distribution
    function and the normal cumulative distribution function of SciPy, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this base class, let''s discuss the methods required and add them to our
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `vasicek_czcb_values()` method as the point of entry to begin the pricing
    process. The `r0` variable is the short-rate at time *t=0*; `R` is the strike
    zero rate for the bond price; `ratio` is the strike price per par value of the
    bond; `T` is the time to maturity; `sigma` is the volatility of the short-rate, `r`;
    `kappa` is the rate of mean reversion; `theta` is the mean of the short-rate process;
    `M` is the number of steps in the finite differences scheme; `prob` is the probability
    on the normal distribution curve used by the `vasicek_limits` method later to
    determine short-rates; `max_policy_iter` is the maximum number of policy iterations
    used to find early-exercise nodes; `grid_struct_const` is the maximum threshold
    of `dt` movement that determines `N` in the `calculate_N()` method; and `rs` is
    the list of interest rates from which the short-rate process follows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This method returns a list of evenly-spaced short-rates and a list of option
    prices, and is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `vasicek_params()` method to compute the implicit scheme parameters
    for the Vasicek model. It returns a tuple of `r_min`, `dr`, `N`, and `dt`. If
    no value is supplied to `rs`, values of `r_min` to `r_max` will be automatically
    generated by the `vasicek_limits()` method as a function of `prob` following a
    normal distribution. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `calculate_N()` method, which is used by the `vasicek_params()` method
    to compute the grid size parameter, `N`. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `vasicek_limits()` method to compute the minimum and maximum of the
    Vasicek interest rate process by a normal distribution process. The expected value
    of the short-rate process, `r(t)`, under the Vasicek model is given as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/4ec2b772-54cb-4d04-899a-428ad7f2ff1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The variance is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/04ed837e-adf5-40a9-93df-4ff0d69eaaf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This method returns a tuple of the minimum and maximum interest-rate level
    as defined by the probability for the normal distribution process, and is written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `vasicek_diagonals()` method, which returns the diagonals of the implicit
    scheme of finite differences, where:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/b14492d2-171b-462a-ad6d-0b6b19de6d27.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/2f37a2f0-fce9-4a60-bc48-96e8bfcf2907.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](Images/e2dea2bc-2686-4e84-a1e7-eaafe4ac5c2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The boundary conditions are implemented using Neumann boundary conditions.
    This method is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The Neumann boundary condition specifies the boundaries of a given ordinary
    or partial differential equation. Further information can be found at [http://mathworld.wolfram.com/NeumannBoundaryConditions.html](http://mathworld.wolfram.com/NeumannBoundaryConditions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `check_exercise()` method, which returns a list of Boolean values,
    indicating the indices suggesting optimum payoff from an early exercise. This
    method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `exercise_call_price()` method, which returns the discounted value
    of the strike price as a ratio, written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `vasicek_policy_diagonals()` method, which is being called by the policy-iteration
    procedure that updates the sub-diagonals, diagonals, and super-diagonals for one
    iteration. In indices, where an early exercise is carried out, the sub-diagonals
    and super-diagonals will have these values set to 0 and the remaining values on
    the diagonals. The method returns comma-separated values of the new sub-diagonal,
    diagonal, and super-diagonal values. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `iterate()` method, which implements the implicit scheme of finite
    differences by performing a policy iteration, where each cycle involves solving
    the tridiagonal systems of equations, calling the `vasicek_policy_diagonals()`
    method to update the three diagonals, and returns the callable zero-coupon bond
    price if there are no further early-exercise opportunities. It also returns the
    number of policy iterations performed. This method is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `tridiagonal_solve()` method, which implements the Thomas algorithm
    to solve tridiagonal systems of equations. The systems of equations may be written
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/acf0810b-420d-4693-af39-660140134b76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This equation is represented in matrix form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/eeb02184-cbce-4f0e-a3db-119e1913479a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *a* is a list for the sub-diagonals, *b* is a list for the diagonal, and
    *c* is the super-diagonal of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: The Thomas algorithm is a matrix algorithm for solving tridiagonal systems of
    equations using a simplified form of Gaussian elimination. Further information
    can be found at [http://faculty.washington.edu/finlayso/ebook/algebraic/advanced/LUtri.htm](http://faculty.washington.edu/finlayso/ebook/algebraic/advanced/LUtri.htm).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tridiagonal_solve()` method is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: With these methods defined, we can now run our code and price a callable zero-coupon
    bond with the Vasicek model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that we run this model with the following parameters: `r0` is `0.05`,
    `R` is `0.05`, `ratio` is `0.95`, `sigma` is `0.03`, `kappa` is `0.15`, `theta`
    is `0.05`, `prob` is `1e-6`, `M` is `250`, `max_policy_iter` is `10`, `grid_struc_interval`
    is `0.25`, and we are interested in the values of the interest rates between 0%
    and 2%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Python code demonstrates this model for maturities of 1 year,
    5 years, 7 years, 10 years, and 20 years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding commands, you should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7c44e9ce-6056-437a-8f3a-ace4292576a6.png)'
  prefs: []
  type: TYPE_IMG
- en: We obtained the theoretical values of pricing callable zero-coupon bonds for
    various maturities for various interest rates.
  prefs: []
  type: TYPE_NORMAL
- en: Other considerations in callable bond pricing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In pricing callable zero-coupon bonds, we used the Vasicek interest-rate process
    to model interest-rate movement with the aid of a normal distribution process.
    In *The Vasicek model* section, we demonstrated that the Vasicek model can produce
    negative interest rates, which may not be practical for most economic cycles.
    Quantitative analysts often use more than one model in derivative pricing to obtain
    realistic results. The CIR and Hull-White models are some of the commonly-discussed
    models in financial studies. The limitation on these models is that they involve
    only one factor, or a single source of uncertainty.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at the implicit scheme of finite differences for the policy iteration
    of the early exercise. Another method of consideration is the Crank-Nicolson method
    of finite differences. Other methods include the Monte Carlo simulation for calibration
    of this model.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we obtained a final list of short-rates and callable bond prices. To
    infer a fair value for the callable bond for a particular short-rate, interpolation
    of the list of bond prices is required. Often, the linear interpolation method
    is used. Other interpolation methods of consideration are the cubic and spline
    interpolation methods.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on interest-rate and related derivative pricing
    with Python. Most bonds, such as US Treasury bonds, pay a fixed amount of interest
    semi-annually, while other bonds may pay quarterly or annually. It is a characteristic
    of bonds that their prices are closely related to current interest-rate levels
    in an inverse manner. The normal or positive yield curve, where long-term interest
    rates are higher than short-term interest rates, is said to be upward sloping.
    In certain economic conditions, the yield curve can be inverted and is said to
    be downward sloping.
  prefs: []
  type: TYPE_NORMAL
- en: A zero-coupon bond is a bond that pays no coupons during its lifetime, except
    upon maturity when the principal or face value is repaid. We implemented a simple
    zero-coupon bond calculator in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The yield curve can be derived from the short-term zero or spot rates of securities,
    such as zero-coupon bonds, T-bills, notes, and eurodollar deposits using a bootstrapping
    process. With Python, we used a lot of bond information to plot a yield curve,
    and derived forward rates, yield-to-maturity, and bond prices from the yield curve.
  prefs: []
  type: TYPE_NORMAL
- en: Two important metrics to bond traders are duration and convexity. Duration is
    the sensitivity measure of bond prices to yield changes. Convexity is the sensitivity
    measure of the duration of a bond to yield changes. We implemented calculations
    using the modified duration model and convexity calculator in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Short-rate models are frequently used in the evaluation of interest-rate derivatives.
    Interest-rate modeling is a fairly complex topic, since they are affected by a
    multitude of factors, such as economic states, political decisions, government
    intervention, and the laws of supply and demand. A number of interest-rate models
    have been proposed to account for the various characteristics of interest rates.
    Some of the interest-rate models we discussed include the Vasicek, CIR, and Rendleman
    and Bartter models.
  prefs: []
  type: TYPE_NORMAL
- en: Bond issuers may embed options within a bond to allow them the right, but not
    the obligation, to buy or sell the issued bond at a predetermined price during
    a specified period of time. The price of a callable bond can be thought of as
    the price difference of a bond without an option and the price of the embedded
    call option. Using Python, we took a look at pricing a callable zero-coupon bond
    by applying the Vasicek model to the implicit method of finite differences. This
    method is, however, just one of the many methods that quantitative analysts use
    in bond-options modeling.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the statistical analysis of time-series
    data.
  prefs: []
  type: TYPE_NORMAL
