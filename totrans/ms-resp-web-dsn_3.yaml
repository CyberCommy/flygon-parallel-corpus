- en: Chapter 3. Mobile-first or Desktop-first?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my years of experience designing and building responsive websites, I've found
    that in order to have a better view of the content and the messages, it's easier
    to visualize things with a desktop-first approach during the wireframe and design
    phases.
  prefs: []
  type: TYPE_NORMAL
- en: As we are able to see more content in a given layout with a desktop-first approach,
    it allows us to translate the hierarchy of the content that was provided to us
    into a layout that represents said hierarchy. Doing this in a small canvas of
    320 pixel width is more difficult than it needs to be.
  prefs: []
  type: TYPE_NORMAL
- en: When you accomplish that hierarchy, it will remain the same on small-screen
    devices, and the only thing that changes is the layout.
  prefs: []
  type: TYPE_NORMAL
- en: '*Best practices* recommend building mobile-first, but many web professionals
    don''t really know why we build *mobile-first* in the first place. Pun intended.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's clear it up. The reason we build mobile-first is because of three
    principles mentioned by Luke Wroblewski, the author who actually coined the term
    *mobile-first* in 2009\. You will notice that none of those principles are related
    to HTML, CSS, and/or JavaScript. In other words, you don't build mobile-first
    because of any advantage with HTML, CSS, or JavaScript. For more information,
    visit [http://www.lukew.com/ff/entry.asp?933](http://www.lukew.com/ff/entry.asp?933).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobile is exploding**: Well, mobile has already exploded. This basically
    means that it''s a lot easier, faster, and more convenient for people to use their
    mobile devices to access the web. So if you build your website to be compatible
    with mobile devices first, there''s a better chance of providing a better user
    experience and being viewed by more people than if you have a desktop-only website/app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile forces you to focus**: Since there''s a lot less space on a mobile
    device''s screen than on a desktop screen, there''s a mandatory need to prioritize.
    This means that the most important tasks and/or messages need to be visible right
    away.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile extends your capabilities**: Mobile devices have features that a desktop
    device doesn''t have: GPS, accelerometer, multitouch inputs, voice recognition,
    front and rear cameras, and so on. When going mobile-first, you can use these
    advanced technologies to create richer, more exciting experiences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you have a final design, you now need to implement that design into
    HTML, CSS, and JavaScript. For this phase, you should use the mobile-first approach
    and take into account the three reasons we mentioned earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Building mobile-fist means your website/app can be seen by more people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes you prioritize the content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to, it will allow you to use the advanced features and capabilities
    of mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your designs in a desktop-first view, but implement them with mobile-first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass mixins for mobile-first and desktop-first media queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with legacy browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with high-density screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why RWD is sometimes not necessarily the right solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrofitting an old website with RWD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your designs in a desktop-first view, but implement them with mobile-first
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at some terminology so that we''re on the same page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wireframe**: This is a very basic visual representation of a layout using
    only outlines, in other words, in black and white. There are no colors, no branding,
    and no defined styles of any kind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Design/Comp**: This is a *fleshed out* wireframe with colors, branding, and
    styles. It''s a very close representation (usually, say, 95 percent close to the
    final product) of the final page/site/app without going into markup or coding
    of any kind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML mockup or HTML template**: This is when the design has been implemented
    into an actual HTML page with CSS and—sometimes—JavaScript. It can only be viewed
    in the browser. It''s practically an exact representation (99 percent close to
    the final product) of how the page/site/web app will look and work like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the terminology clear, let's continue.
  prefs: []
  type: TYPE_NORMAL
- en: Some professionals, including me, recommend using more modern and efficient
    techniques to create visual assets in order to optimize the time spent during
    the process of wireframing and creating designs/comps. Techniques such as style
    tiles, mood boards, element collages, and atomic design differentiate themselves
    from traditional wireframing and designs/comps methodologies. They offer the opportunity
    to explore layouts and styles, independent of screen widths, technologies, and
    even content creation.
  prefs: []
  type: TYPE_NORMAL
- en: For the scope of this book, we are going to focus on how a few things of the
    traditional wireframing and designs/comps methodologies can still be harnessed
    while maximizing the use of our time in these initial stages of mastering **Responsive
    Web Design** (**RWD**) with HTML5 and CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: Why create designs in a desktop-first view?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The reason behind creating designs in a desktop-first view is simple: real
    estate (space).'
  prefs: []
  type: TYPE_NORMAL
- en: As designers, we are required to reflect the hierarchy of the content in a visual
    way. To accomplish this, we use many design principles such as rhythm, proximity,
    whitespace, patterns, contrast, balance, grid, symmetry, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: When the canvas on which we're creating a wireframe or design/comp is big enough
    to try different arrangements and layouts, we have the necessary flexibility to
    explore different ways that can represent the said content hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we''re using a 12-column grid and the content we were provided
    with dictates the following content hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: The business wants users to be able to provide their e-mail IDs to receive our
    newsletter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to display a *featured post* chosen by the editorial department.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the preceding content hierarchy, we can immediately start picturing different
    layouts to convey this hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: For users to provide their e-mail addresses, we'll create a form with a heading,
    a paragraph, an input type e-mail, and a button. This form will be on the top-left
    corner below the header and it could have a width of three to four columns. I'm
    thinking that maybe four columns is too wide though, but let's wireframe it and
    see how that feels and what usability, accessibility, and legibility issues or
    benefits this could have.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the *featured post*, we'll use the remaining columns. If the e-mail form
    is three-column wide, we'll use the remaining nine; if the e-mail form is four-column
    wide, we'll just use the remaining eight columns. The featured post has a lot
    more content, such as the heading, author, date, category, snippet, thumbnail,
    and a link to the full post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a wide canvas in our design/wireframing application, we can play with these
    different approaches and eventually end with a proposed layout that's sound and
    represents the content hierarchy as required by the business or stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a layout like this one with a mobile-first approach with a small canvas
    is practically impossible. The small real estate screen is incredibly restrictive
    and limited. But when things start to grow, we would need to make this exploration
    process each time we think of a specific breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, we shouldn't be thinking about breakpoints at this point (no pun intended),
    because the content—not specific device widths—is what dictates where a new breakpoint
    needs to be added.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a layout defined that reflects the content hierarchy, we will be
    in a good spot because when that content is rearranged on smaller screens, no
    matter which widths, the hierarchy will remain intact.
  prefs: []
  type: TYPE_NORMAL
- en: Why implement with mobile-first?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s clarify a term first: *implement* means create an HTML mockup with CSS
    and, if necessary, JavaScript, based on a wireframe or design/comp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The reasons mentioned at the beginning of this chapter are the answer to the
    question *why implement with mobile-first?* Remember: mobile is exploding (well,
    it already did), mobile forces you to focus and mobile extends your capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: None of those reasons could be accomplished with a desktop-first implementation,
    except maybe (that's a huge *maybe*) the second premise.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change gears and move on to a subject a bit more technical that will help
    us understand how Sass mixins can help us master RWD for the mobile-first and
    desktop-first methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's recap. Use desktop-first to create your designs and wireframes. Having
    a large canvas allows us to explore different layouts and properly arrange the
    hierarchy of the content. When it's time to implement (create HTML mockups), use
    mobile-first.
  prefs: []
  type: TYPE_NORMAL
- en: Sass mixins for the mobile-first and desktop-first media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our examples, there are two types of Sass mixins we''re going to use in
    this book: a mobile-first mixin that uses the `min-width` property and a desktop-first
    mixin that uses the `max-width` property. We already saw the following mixins
    and how they worked in [Chapter 1](ch01.html "Chapter 1. Harness the Power of
    Sass for Responsive Web Design"), *Harness the Power of Sass for Responsive Web
    Design*, but here''s a refresher.'
  prefs: []
  type: TYPE_NORMAL
- en: The mobile-first mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use the following mobile-first mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The desktop-first mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s the desktop-first mixin we''re going to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The great thing about using these mixins is that it's incredibly easy to find
    out which approach is being used, because we can see either the term `forLargeScreens`
    or `forSmallScreens` is repeated all over our SCSS file. If someone else were
    to edit any of the work we initially did, they will get a clear idea of which
    approach we used to build our site/app just by scanning the SCSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with legacy browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the question "mobile-first or desktop-first?" there's an area that we
    need to cover about legacy browsers. Each project, each client, and their corresponding
    analytics (if they have any, which they should) have different requirements that
    affect how we are supposed to deal with those older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: If you're building with a desktop-first approach, your current workflow should
    remain the same as this is pretty much what we've been doing since before RWD
    became practically mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that you would still use something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'IE7 and IE8 do not support media queries, but the preceding code will work
    just fine because the `header { width: 50%; }` rule is not inside a media query.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you''re doing mobile-first, then `header { width: 50%; }` is going
    to be inside a media query so that IE7 and IE8 won''t be able to see that rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'What do you do then? The solution is quite simple: use the `Respond.js` script.'
  prefs: []
  type: TYPE_NORMAL
- en: How to use Respond.js for RWD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Respond.js` is a type of script called a *polyfill*. A polyfill, according
    to the one who coined the term in the first place, Remy Sharp, is a piece of code
    that provides the technology that we, web developers, expect browsers to provide
    natively.'
  prefs: []
  type: TYPE_NORMAL
- en: In web design and development, polyfills are more abundant as JavaScript implementations,
    in our case, Scott Jehl's `Respond.js`. But we could also say that there are polyfills
    in CSS too, for example, the well-known `reset.css` from Eric Meyer and `Normalize.css`
    from Nicolas Gallagher and Jonathan Neal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Respond.js` script is a polyfill that makes legacy browsers (IE6/7/8)
    support a particular CSS feature they were never made to support: media queries.'
  prefs: []
  type: TYPE_NORMAL
- en: You can download `Respond.js` from [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although I'm suggesting the use of a polyfill, we need to be mindful of the
    additional HTTP request the site/app needs to make in order to fetch this JavaScript
    file. The fewer requests our sites/apps make, the faster they are going to be
    creating many benefits such as improved user experience and positive SEO impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here''s what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the call to `Respond.js` is *after* the call to your CSS file(s) (hopefully
    it is just one CSS file).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call the `Respond.js` script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance best practices recommend placing nonessential scripts at the bottom
    of the markup right before the closing `</body>` tag. Since `Respond.js` is aimed
    at legacy browsers, let's go ahead and do that. Another benefit of placing scripts
    at the bottom of the markup is that it helps to avoid blocking the rendering of
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s our example HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `styles.scss` file, we type the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, when you resize an IE7 or IE8 browser window, it will be able to display
    a red background if the window width is 640 pixels or less, and a green background
    if the window is 641 pixels or more.
  prefs: []
  type: TYPE_NORMAL
- en: The days of an IE-specific style sheet are dead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I''ve avoided creating IE-specific style sheets since I started writing CSS.
    The reasons for this are simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File management**: The fewer files there are to manage when going to production,
    the smoother every process goes; not to mention being less prone to errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: If you need to add, remove, or edit a style, you and your
    team know that the final change(s) needs to end up in your main and only CSS file,
    in our case, the SCSS file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization**: Keep everyone on the same page when adding, removing, or
    editing IE-specific styles in the right CSS file(s), in our case, SCSS file(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: One less HTTP request is a good thing, a very good thing.
    Anything we can do for performance, no matter how small, can go a long way for
    a good user experience; not to mention a fast website is good for SEO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other benefits of not using an IE-specific style sheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In legacy browsers, page rendering is not blocked when they try to download
    the IE-specific style sheet. Also, troubleshooting is easier. So what do we use
    then?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to deal with IE by keeping everything in one style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: Use CSS hacks (not recommended).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `Modernizr.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use conditional classes in the `<html>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's talk a bit more about a popular method, using conditional classes.
  prefs: []
  type: TYPE_NORMAL
- en: Use conditional classes in the <html> tag
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Paul Irish''s 2008 article ([http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/](http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/))
    specifies a method that I recommend for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to implement; it's just a matter of copying and pasting this block
    of markup at the top of our HTML file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not intrusive, since there's no need for anyone in the chain (users, browsers,
    servers, and us) to deal with additional files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't require JavaScript to work; if a visitor has JavaScript unavailable
    or disabled, everything will still work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the one I use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IE10 and above does not support *conditional comments* anymore, that's why there
    isn't any mention of IE10 in the conditional classes markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding conditional classes in place, targeting a specific IE (IE7
    in this example) looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to target all IEs, we would do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For all other browsers, we would do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: It doesn't matter which of the methods you use, `Modernizr.js` or conditional
    classes, it's all personal preference. You'll be doing *the right thing* by using
    either of those two methods.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, avoid CSS hacks at all costs. As web designers and web developers,
    we have a moral responsibility of creating a better web for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: How to deal with high-density screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many articles on the Web that explain what **Dots Per Inch** (**DPI**),
    **Pixels Per Inch** (**PPI**), and **Density-independent Pixel** (**DP/DiP**)
    are. Although it may be important to understand the intricate details of such
    technologies and terms, let's keep the scope of the book in the realms of what
    the basis of high density screens is and what we need to understand to create
    sound responsive designs.
  prefs: []
  type: TYPE_NORMAL
- en: Bitmaps or vectors for high-density screens?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vectors like SVGs, Icon Fonts, or regular fonts are a visual representation
    of mathematical equations, thus they never lose quality, no matter their size.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for bitmap images to display well on high-density screens, we have
    to export a high-resolution version of the *normal-quality* image. This means
    that we need to create two files (or more) for every bitmap image we plan to use:
    one normal-quality image for non-high-density screens (standard LCD displays,
    old TFT monitors, some TVs, and so on) and one (or more) high-quality image for
    high-density screens (any *retina* devices and Super AMOLED displays, for example).'
  prefs: []
  type: TYPE_NORMAL
- en: This is where good design judgment comes into play, because sometimes we may
    not necessarily need to export two (or more) bitmap images every time.
  prefs: []
  type: TYPE_NORMAL
- en: There are several techniques that we can use to deal with images when we have
    to consider high-density screens. These techniques are explained in detail in
    [Chapter 6](ch06.html "Chapter 6. Working with Images and Videos in Responsive
    Web Design"), *Working with Images and Videos in Responsive Web Design*.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes RWD is not necessarily the right solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take, for example, the booking section of most travel sites. The sheer amount
    and type of information a site like this manages makes it quite difficult to have
    a responsive site. When visiting the eight highest ranked travel sites in Google''s
    search results, this is what I saw:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.kayak.com/](http://www.kayak.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.expedia.com/](http://www.expedia.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.hotwire.com/](https://www.hotwire.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.travelocity.com/](http://www.travelocity.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.orbitz.com/](http://www.orbitz.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.priceline.com/](http://www.priceline.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.tripadvisor.in/](http://www.tripadvisor.in/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.hipmunk.com/](https://www.hipmunk.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booking page**: Not responsive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a brief list of our findings:'
  prefs: []
  type: TYPE_NORMAL
- en: Since Expedia acquired Travelocity, they share the same platform. The difference
    is in the branding; thus, I will consider these two sites as one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The homepages of five out of seven sites (71 percent) are not responsive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The booking pages of five out of seven sites (71 percent) are not responsive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one site (Expedia/Travelocity) out of seven (14 percent) is fully responsive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four out of seven sites (57 percent) have no RWD whatsoever.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can conclude that the most popular travel sites have not fully embraced RWD
    yet, but some are hybrids between fixed width and responsive layouts. That's why
    all of those sites have separate mobile apps. For them, RWD may not be a priority,
    so they rely on their mobile apps to balance this deficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Although very rare these days, sometimes we may need to build a site or page
    that is not responsive. Actually, there are some pages out there today that are
    not responsive.
  prefs: []
  type: TYPE_NORMAL
- en: CodePen is one of the most popular frontend sandboxes out there and the editor
    of CodePen is not responsive. Why? Because it doesn't need to be. It's very unlikely
    that a developer would go to CodePen to write HTML, Sass, and JavaScript using
    their phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that being said, if you ever need to build a site/page that doesn''t need
    to be responsive, there are two good options as far as CSS grid systems go:'
  prefs: []
  type: TYPE_NORMAL
- en: Use our old friend, the 960 Grid System ([http://960.gs/](http://960.gs/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the 1140 Grid System ([http://www.1140px.com/](http://www.1140px.com/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a few things to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: The 960 Grid System is aimed at screens 1024px wide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 1140 Grid System is aimed at screens 1280px wide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 1140 Grid System includes media queries by default, so we need to take this
    into account and decide whether it's best to leave them or if it's best to delete
    them to reduce file size and selector limitations in IE6-IE9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because I always thought that the 10px padding on the left and right of the
    960 Grid System left the content too close to the edges of the main container,
    I added 10 more pixels to each side, increasing the padding to 20px—turning the
    960 Grid System into a 980 Grid System. From now on, we will refer to it as the
    980GS.
  prefs: []
  type: TYPE_NORMAL
- en: Retrofitting an old website with RWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If and when the moment comes, we need to be prepared to make a nonresponsive
    or fixed-width site/app responsive.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways of retrofitting a nonresponsive or fixed-width site/app.
    One way is using the **Adaptive Web Design** (**AWD**) technique that uses absolute
    units (that is, pixels). The other way is using RWD and transforming all pixel
    values to percentages with a very simple formula.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which techniques we use, we are going to have to use a desktop-first
    approach since the site we're dealing with was built for wide screens only. This
    means that we're going to use the `max-width` property in our media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at both retrofitting techniques, we need a base page to start
    with.
  prefs: []
  type: TYPE_NORMAL
- en: The base page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The graphic you see here is proportional to a 12-column 980GS layout. The browser
    window is 1024px wide and the page is 980px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The base page](img/B02102_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our main container in gray, which is 980px wide, already has 10px padding to
    the left and right. This means that the sections inside always need to add up
    to **960px**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the container''s components:'
  prefs: []
  type: TYPE_NORMAL
- en: The main container in gray is 980px wide with 10px padding on the left and right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Header** in green and **Footer** in red are 960px or 12-column wide each:
    940px with a 10px margin on the left and right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Nav** section in blue is 240px or 3-column wide: 220px with 10px left
    margin and right margins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Content** section in yellow is 710px or 9-column wide: 700px with 10px
    right margin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gutter in white is 20px wide, that is, a 10px right margin from **Nav**
    and a 10px left margin from **Content**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, *220px Nav + 710px Content + 20px gutter + 10px margins = 960px*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s the markup that represents our base page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: CSS/SCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regarding our CSS/SCSS, we are only going to need to create one partial, the
    `_980gs.scss` file that contains the fixed-width grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we''re going to create a `styles.scss` file with which we are going to
    perform the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `_980gs.scss` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include our simple desktop-first Sass mixin to handle the media queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create all the necessary media queries using the `max-width` property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile it to `styles.css` and use it in our page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the _980gs.scss file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `_980gs.scss` file contains the basic grid and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Retrofitting with AWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike RWD where the widths are fluid and elastic (ems and percentages), hence
    the term *relative units*, in AWD, the widths are fixed (pixels). Hence, we use
    the term *absolute units* and elements will *snap* to these fixed widths when
    we resize our browser window.
  prefs: []
  type: TYPE_NORMAL
- en: In AWD, we use pixels for practically every width, even our media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the styles.scss file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do in the `styles.scss` file is to import the
    partial `_980gs.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''re going to include our simple desktop-first mixin to handle the
    media queries. However, remember I mentioned before how this is mixin is scalable
    and we could make it compile pixel-based values if we wanted to? All we need to
    do is remove the value `/16+em` from the division `$media/16+em`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following rules are merely for styling purposes in order to accomplish
    the same design we saw in the screenshot before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: At this point, our page is 980px wide and it looks like the screenshot we initially
    saw.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the widths at which we are going to make our base page *snap*
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: At 980px, we're going to snap the page to 768px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At 768px, we're going to snap the page to 640px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At 640px, we're going to snap the page to 480px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At 480px, we're going to snap the page to 320px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is where the fun begins. Let's start retrofitting this page by creating
    the media queries for each section.
  prefs: []
  type: TYPE_NORMAL
- en: 980px to 768px (AWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following media queries are aimed at 768px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Admittedly, it is a bit hard to perceive the difference in the book from 980px
    to 768px, but believe me, the following screenshot fully represents a browser
    window 980px wide and a page 768px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![980px to 768px (AWD)](img/B02102_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the moment the screen is 980px, the width of our main container
    (`.container_12`) goes from 980px to 768px. Our main container has 10px padding
    to the left and the right, so the widths of all other sections should add up to
    match 748px.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our **Header** and **Footer** that use the same class `.grid_12` are now 728px
    wide. So if we add: *728px + 10px left margin + 10px right margin = 748px*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add the widths of our **Nav** (`.grid_3`) and **Content** (`.grid_9`)
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*200px Nav + 508px Content = 708px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*708px + 20px gutter = 728px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*728px + 10px left margin on Nav + 10px right margin on Content = 748px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stay with me, I promise this will be very interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 768px to 640px (AWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following media queries are aimed at 640px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Ok, this layout is now a single column page. We're starting to see some results.
    Nice!
  prefs: []
  type: TYPE_NORMAL
- en: '![768px to 640px (AWD)](img/B02102_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, remember that our main container has 10px padding to the left and the
    right, thus the widths of all other sections should add up to match 620px.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make sure our numbers add up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our **Header** and **Footer** that use the same class `.grid_12` are now 600px
    wide. So if we add: *600px + 10px left margin + 10px right margin = 620px*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add the widths of our **Nav** (`.grid_3`) and **Content** (`.grid_9`)
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*160px Nav + 420px Content = 580px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*580px + 20px gutter = 600px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*600px + 10px left margin on Nav + 10px right margin on Content = 620px*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make this page even smaller!
  prefs: []
  type: TYPE_NORMAL
- en: 640px to 480px (AWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following media queries are aimed at 480px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re making some well-deserved progress! Here, the browser window is 640px
    wide and the page is 480px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![640px to 480px (AWD)](img/B02102_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember that our main container has 10px padding to the left and the right,
    thus the widths of all other sections should add up to match 460px.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to change from a 2-column to a 1-column layout. This means
    that all sections now have the exact same width.
  prefs: []
  type: TYPE_NORMAL
- en: 'This also means that in our SCSS file, we can create a single media block for
    all three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make sure our numbers add up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our **Header**, **Nav**, **Content**, and **Footer** sections are now 440px
    wide, stacked one on top of the other. So if we add: *440px of all sections +
    10px left margin + 10px right margin = 460px*.'
  prefs: []
  type: TYPE_NORMAL
- en: Here we go, the last piece of this puzzle!
  prefs: []
  type: TYPE_NORMAL
- en: 480px to 320px (AWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following media queries are aimed at 320px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go! In this screenshot, the browser window is 320px wide—the content
    is 320px wide as well and fits very nicely:'
  prefs: []
  type: TYPE_NORMAL
- en: '![480px to 320px (AWD)](img/B02102_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We already know that our main container has 10px padding to the left and the
    right. In this case, we are going to remove that padding to gain those 20 pixels,
    since our screen real estate is now very small:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The 10px spacing on the left and right are now going to be created by the left
    and right margins from the other sections. This means that the width of each section
    should be 300px.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the new 320px breakpoint is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make sure our numbers add up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our **Header**, **Nav**, **Content**, and **Footer** sections are now 300px
    wide, stacked one on top of the other. So if we add: *300px of all sections +
    10px left margin + 10px right margin = 320px*.'
  prefs: []
  type: TYPE_NORMAL
- en: That's it. We have now retrofitted a fixed-width page to be responsive with
    the AWD technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final SCSS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It compiles to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, several breakpoints are repeated in our final CSS file. This
    is an issue with Sass. However, it's really not an issue or something we need
    to worry about because when this file is gzipped by the server, it will compress
    it at its maximum. If we minimize the final output (which we should anyhow), we'll
    be compressing the file even more. The repeated `@media` breakpoints have very
    little if any impact on performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how retrofitting the same page looks when using percentages and
    RWD.
  prefs: []
  type: TYPE_NORMAL
- en: Retrofitting with RWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how using AWD is accomplished, using pixels. With RWD and a very
    simple equation, we can retrofit a site using relative units, in our case percentages.
    Not to mention it will be a lot easier than using AWD.
  prefs: []
  type: TYPE_NORMAL
- en: The RWD magic formula
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Discovered/created by Ethan Marcotte, who coined the term *Responsive Web Design*,
    the RWD magic formula is a very simple equation:'
  prefs: []
  type: TYPE_NORMAL
- en: (target ÷ context) x 100 = result %
  prefs: []
  type: TYPE_NORMAL
- en: Before we start turning pixels into percentages, we need to see which width
    our *context* is going to be.
  prefs: []
  type: TYPE_NORMAL
- en: The main container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our context is going to be the main container of the page `.container_12`,
    which has a maximum width of 980px. However, there''s a catch involving the main
    container and the columns that will turn this 980px context into 960px. Notice
    the 10px left-right padding on the `.container_12` section and the 10px left-right
    margin in the `.grid` rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The 10px left-right margin in the `.grid` rule means that the widths of all
    the columns have an additional 20px. So, for example, the header and footer that
    are 940px wide are really 960px wide. The `box-sizing: border-box;` property only
    accounts for subtracting what''s inside the box model (padding), not what''s outside
    (margin).'
  prefs: []
  type: TYPE_NORMAL
- en: One solution would be to remove the 10px left-right padding on `.container_12`
    and increase the left-right margin in the `.grid` rule to 20px in order to keep
    the gutters; otherwise, the columns would touch.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the gutters become wider and this may not be intended for design purposes,
    and—believe it or not—somehow an extra 1px is added to the widest containers.
    In our case, it is added to the header and footer.
  prefs: []
  type: TYPE_NORMAL
- en: As a designer, I know I do not want to deal with any of those issues if I don't
    have to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second solution is simpler: make the context 960px. This way, we can remove
    the 10 extra pixels globally without affecting the integrity of the main container
    and the columns, and the resulting values are almost the same since we''re getting
    percentages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words: *(960px ÷ 980px) x 100 = 97.95918367346939% (97.95%)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s practically the same as: *(940px ÷ 960px) x 100 = 97.91666666666667%
    (97.91%)*'
  prefs: []
  type: TYPE_NORMAL
- en: In the second solution, the 1px issue does happen, but happens at random widths
    when resizing the browser. However, the 1px issue is permanent with the first
    solution, regardless of the browser's width.
  prefs: []
  type: TYPE_NORMAL
- en: With this part clear, we are then going to turn all pixel-based widths into
    percentages using 960px as their context.
  prefs: []
  type: TYPE_NORMAL
- en: The Header and Footer sections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both the **Header** and **Footer** sections have the same width, 940px. Knowing
    that their context is 960px, let''s go ahead and find their widths in percentages
    using the magic formula: *(940px ÷ 960px) x 100 = 97.91666666666667%*.'
  prefs: []
  type: TYPE_NORMAL
- en: You might be asking yourselves, "are that many decimals necessary?" Not all
    of them, but at least two are recommended.
  prefs: []
  type: TYPE_NORMAL
- en: So we end up with the **Header** and **Footer** sections of 97.91 percent.
  prefs: []
  type: TYPE_NORMAL
- en: Some developers recommend using all the decimals and letting the browser decide
    how many it wants to use. In the past, I decided to challenge this recommendation
    and use only two decimals to see what happened. Since I started using two decimals,
    I haven't experienced any unwanted behavior or width issues whatsoever in any
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Firefox and IE11 trim the excess decimals to two. Chrome, on the other hand,
    leaves all the decimals. I recommend using no less than two decimals, which is
    what we're going to use in the book to keep things simple and short. However,
    if you prefer to use all the decimals, by all means, go for it! At this point,
    it is a matter of personal preference.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Avoid rounding up the values, and let the browsers deal with the decimals as
    they are. Doing this also keeps you focused on what matters most: being efficient
    and trying to create something memorable for the users.'
  prefs: []
  type: TYPE_NORMAL
- en: The Nav section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find the width of the **Nav** section in percentages, we use 960px as its
    context as well: *(220px ÷ 960px) x 100 = 22.91666666666667%*.'
  prefs: []
  type: TYPE_NORMAL
- en: Using two decimals, we end up with a **Nav** section of 22.91 percent.
  prefs: []
  type: TYPE_NORMAL
- en: The Content section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find out the width of the **Content** section in percentages, our formula
    looks almost identical. The only difference is that we are changing the first
    value which corresponds to the width of the **Content** section in pixels: *(700px
    ÷ 960px) x 100 = 72.91666666666667%*.'
  prefs: []
  type: TYPE_NORMAL
- en: Using only two decimals, our final value is a **Content** section of 72.91 percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what our initial retrofitting RWD SCSS file starts to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's take a step back and address a few other pixel-based widths before
    we continue. Remember the 10px padding to the left and the right of the main container
    `.container_12`? We need to turn those 10px into percentages as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our magic formula, we do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*(10px ÷ 960px) x 100 = 1.041666666666667%*.'
  prefs: []
  type: TYPE_NORMAL
- en: Using only two decimals, our final value is a left and right padding of 1.04
    percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add this value to our SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, all our columns have a 10px margin to the left and right. Since we already
    know that 10px is 1.04 percent, let''s add this value to all our columns in our
    SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a browser window 1024px wide, a layout 980px wide, and all the
    columns at their corresponding percentage values. In reality, this is practically
    impossible without looking at the code to visually tell the differences between
    the fixed width and the percentage-based layouts.
  prefs: []
  type: TYPE_NORMAL
- en: We're doing good here!
  prefs: []
  type: TYPE_NORMAL
- en: '![The Content section](img/B02102_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let the fun begin. Let's add our first media query.
  prefs: []
  type: TYPE_NORMAL
- en: 980px to 768px (RWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following media query is aimed at 768px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Since the widths of the **Header**, **Footer**, **Nav**, and **Content** sections,
    their paddings, and their margins are set in percentages now, we don't have to
    declare any media queries for them—at least not yet because the layout hasn't
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we resize our browser window, the **Header**, **Footer**, **Nav**, and
    **Content** sections automatically respond, shrink proportionally, snap properly,
    and fit the new width of the main container `.container_12` without breaking the
    layout. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![980px to 768px (RWD)](img/B02102_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Let's add another breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 768px to 640px (RWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following breakpoint (640px), our layout is going to change to a single
    column. So we are going to add a new media query that will make the **Nav** and
    **Content** sections as wide as the **Header** and **Footer** sections, and make
    them stack on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following media query is aimed at 640px and makes the **Nav** and **Content**
    sections full width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Ok, we now have a single-column layout. Not bad, not bad!
  prefs: []
  type: TYPE_NORMAL
- en: '![768px to 640px (RWD)](img/B02102_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 640px to 480px (RWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are now going as small as 480px and the one-column layout won't change, only
    the widths of all the containers will change.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following media query is aimed at 480px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Our layout is getting narrower and all we needed to do was add a new media query
    and that was it! No need to mess around with the other containers; they all adapt
    perfectly to any width we define.
  prefs: []
  type: TYPE_NORMAL
- en: '![640px to 480px (RWD)](img/B02102_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 480px to 320px (RWD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we address the 320px width without modifying the one-column layout.
    We remove the padding on `.container_12` to make use of all the available screen
    real estate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following media query is aimed at 320px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once more, we do not have to add anything to the **Header**, **Footer**, **Nav**,
    and **Content** sections, since all of them are now 97.91 percent wide. This makes
    them responsive and we don't have to worry about anything else.
  prefs: []
  type: TYPE_NORMAL
- en: '![480px to 320px (RWD)](img/B02102_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final SCSS, combining all breakpoints and widths, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'It compiles to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it's a lot less code using RWD than AWD to retrofit a site.
    Granted, these examples are an extreme simplification of a site/app layout, but
    now you are aware of the basic concepts of each technique when the time to make
    the call of using AWD or RWD knocks on your door.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed a lot of interesting stuff in this chapter, for sure. We saw how
    using desktop-first to create our designs and wireframes is beneficial because
    having a large canvas allows us to explore different layouts and properly arrange
    the hierarchy of the content.
  prefs: []
  type: TYPE_NORMAL
- en: When creating HTML mockups, using mobile-first is better because a mobile-friendly
    site will have more reach, allow focused content, and leverage mobile devices'
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: We were able to retrofit with AWD and RWD a fixed-width site using the magic
    formula. We also discussed the benefits of RWD, since it required a lot less code.
    However, the analysis of the travel sites clearly shows us that RWD sometimes
    isn't the right solution.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how `Respond.js` can be used to make legacy browsers support media
    queries if we are building with a mobile-first approach. Using conditional classes
    is a good technique because it's not intrusive, it's very easy to implement, and
    it has no JavaScript dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''re going to talk about some of the most interesting
    subjects in the world of RWD: CSS grids, CSS frameworks, and the power of Flexbox.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's do this!
  prefs: []
  type: TYPE_NORMAL
