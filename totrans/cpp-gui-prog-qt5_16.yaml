- en: Testing and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We often see the word *debug* when reading tutorials or articles related to
    programming. But do you know what debugging means? A *bug* in programming terms
    means an error or defect within a computer program that prevents the software
    from operating correctly, which often leads to incorrect output or even a crash.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics and learn how to debug
    our Qt project:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debuggers supported by Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical issues occur all the time during the development process. To tackle
    these problems, we need to find out all these issues and solve them before releasing
    our application to the users, so as not to affect the company/team's reputation.
    The method used to look for technical issues is called debugging. In this section,
    we will look at the common debugging techniques used by professionals to ensure
    their program is reliable and of a high quality.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most important thing when it comes to debugging your program, regardless
    of programming language or platform, is to know which part of your code is causing
    the problem. There are several ways you can identify your problematic code:'
  prefs: []
  type: TYPE_NORMAL
- en: Ask the user at which point the bug happened; for example, which button was
    pressed, what were the steps leading to the crash, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment away part of your code, then build and run the program again to check
    whether the problem still occurs or not. If it still does, continue to comment
    out more code until you find the problematic line of code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the built-in debugger to check for the variable changes within your targeted
    function by setting a data breakpoint. You can easily spot if one of your variables
    has changed to an unexpected value or an object pointer has become an undefined
    pointer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure all the libraries that you included in the installer for your users
    have matching version numbers with the ones used in your project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print variables using QDebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also print out the value of a variable to the application output window,
    using the `QDebug` class. `QDebug` is quite similar to `std::cout` in the standard
    library, but the advantage of using `QDebug` is that since it is part of Qt, it
    supports Qt classes out of the box, and it is able to output its value without
    the need for any conversion.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable `QDebug`, we must first include its header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can call `qDebug()` to print out variables to the application
    output window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/085d30a2-eaa0-43d5-8887-4df07ebf0ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: By using `QDebug`, we will be able to check if our function is running correctly.
    You can just comment out the particular line of code that contains `qDebug()`
    after you have finished checking for the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Setting breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting a breakpoint is another good way to debug your program. When you right-click
    on the line number of your script in Qt Creator, you will get a pop-up menu with
    three options, which you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ee7547c-f999-4056-b55d-41a1ea786a99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first option is called Set Breakpoint at Line..., which lets you set a
    breakpoint at a specific line on your script. A red dot icon will appear beside
    the line number once you have created a breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59956e75-08f7-4699-8bd7-2d45b6d49ee0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second option is called Set Message Tracepoint at Line..., which prints
    a message when the program reaches this particular line of code. An eye icon will
    appear beside the line number once you have created a breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/488f3bb1-e9de-42ac-8600-e4b592256270.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third option is Toggle Bookmark, which lets you set a bookmark for your
    own reference. Let''s create a function called `test()` to try out the breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we call the `test()` function at the `MainWindow` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, press the start debug button located at the bottom left of your Qt Creator
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc999d58-3ca2-4a24-91b9-0474314d3908.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You may get an error message that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8c0529c-a614-491e-ac8f-0089a0b6a7c5.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, make sure your project kit has a debugger linked to it. If this
    error still occurs, close your Qt Creator, go to your project folder and delete
    the `.pro.user` file. After that, open up your project with Qt Creator. Qt Creator
    will reconfigure your project again, and the debug mode should work by now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add two breakpoints to our code and run it. Once our program has been
    started, we will see a yellow arrow appearing on top of the first red dot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5b0fc54-92ce-48ef-a6e6-7ce0af651b97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that the debugger has stopped at the first breakpoint. The Locals
    and Expression window, which is located on the right-hand side of your Qt Creator,
    will now display the variable along with its value and type here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/401c5d9f-2626-4871-ac40-f7bba1272cab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding image, you can see the value is still at 100 because at this
    point the minus operation has not  yet been run. The next thing we need to do
    is to click on the Step Into button on top of the Stack window located at the
    bottom of your Qt Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb1565d7-beb1-4642-ae50-737e7795057c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, the debugger will move on to the next breakpoint, and here we can
    see the value has decreased to 90 as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fca1e49a-7ed7-4b7b-b17e-56aed8a01921.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use this method to easily examine your application. To delete a breakpoint,
    you just have to click on the red dot icon again.
  prefs: []
  type: TYPE_NORMAL
- en: Do note that you must run this in the debug mode. This is because when compiling
    in debug mode, additional debugging symbols will be embedded into your application
    or library that allow your debugger to gain access to information from the source
    code of the binary, such as the name of identifiers, variables, and routines.
    This is also the reason why your application or library will be much bigger in
    file size if compiled in debug mode.
  prefs: []
  type: TYPE_NORMAL
- en: Debuggers supported by Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are different types of debuggers that are supported by Qt. Depending
    on the platform and compiler you''re running for your project, the debugger used
    will also be different. The following is the list of debuggers commonly supported
    by Qt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows (MinGW):** GDB (GNU Debugger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows (MSVC):** CDB (Debugging Tools for Windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS**: LLDB (LLVM Debugger), FSF GDB (Experimental)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**: GDB, LLDB (Experimental)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unix** (FreeBSD, OpenBSD, etc.): GDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android**: GDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS**: LLDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging for PC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With **GDB (GNU Debugger),** there is no need for any manual setup if you're
    using MinGW compiler on Windows, as it usually comes together with your Qt installation.
    If you're running other operating systems such as Linux, you may need to install
    it manually before linking it up with your Qt Creator. Qt Creator detects the
    existence of GDB and links it with your project automatically. If it doesn't,
    you can easily find the GDB executable located in your Qt directory and link it
    by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '**CDB (Debugging Tools for Windows)** on the other hand, needs to be installed
    manually on your Windows machine. Do note that Qt doesn''t support the built-in
    debugger of Visual Studio. Therefore, you need to install the CDB debugger separately
    by selecting an optional component called debugging tools for windows while installing
    the Windows SDK. Qt Creator also normally would recognize the existence of CDB
    and put it on the debugger list under the Debuggers Options page. You can go to Tools | Options | Build
    and Run | Debuggers to look for the settings as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b474cf0-8099-4386-860c-4ef15f5e5e40.png)'
  prefs: []
  type: TYPE_IMG
- en: Debugging for Android devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging for Android devices is slightly more complicated than for a PC. You
    must install all the necessary packages for Android development, such as JDK (version
    6 or later), Android SDK, and Android NDK. Then you also need the Android Debug
    Bridge (ADB)driver on the Windows platform to enable USB debugging, since the
    default USB driver on Windows does not allow for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging for macOS and iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As for macOS and iOS, the debugger used is **LLDB (LLVM Debugger)**, which comes
    with Xcode by default. Qt Creator will also recognize its existence and link it
    with your project automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Every debugger is a little different from another and may behave differently
    on Qt Creator. You can also run the non-GDB debuggers on their respective IDE
    (Visual Studio, XCode, and so on), if you are familiar with those tools and know
    what you're doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to add other debuggers to your project, you can go over to Tools | Options | Build
    and Run | Kits and click Clone to copy an existing kit. Then, under the Debuggers tab,
    click on the Add button to add a new debugger selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/471d3646-ff16-4764-a526-92ea5bf8f6b4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Name field, type in the descriptive name for the debugger so you can
    easily remember its purpose. Then, specify the path to the debugger binary in
    the Path field so that Qt Creator knows which executable to run when you start
    the debugging process. Other than that, the Type and Version fields are used by
    Qt Creator to identify the types of version of the debugger. In addition, Qt Creator
    shows the ABI version that will be used on embedded devices in the ABIs field.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the in-depth information on how to set up different debuggers
    in Qt, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://doc.qt.io/qtcreator/creator-debugger-engines.html.](http://doc.qt.io/qtcreator/creator-debugger-engines.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is an automated process for testing an individual module, class,
    or method in your application. Unit testing finds problems early in the development
    cycle. This includes both bugs in the programmer's implementation and flaws or
    missing parts of the specification for the unit.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing in Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Qt comes with a built-in unit testing module, which we can use by adding the
    `testlib` keyword to our project file (`.pro`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following header to our source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can start testing our code. We must declare our test functions as
    private slots. Other than that, the class must also inherit from the `QOBject`
    class. For example, I created two text functions called `testString()` and `testGui()`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The function definitions look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We used some of the macros provided by the `QTest` class, such as `QVERIFY`,
    `QCOMPARE`, and so on, to evaluate the expression passed as its argument. If the
    expression evaluates to `true`, the execution of the test function continues.
    Otherwise, a message describing the failure is appended to the test log, and the
    test function stops executing.
  prefs: []
  type: TYPE_NORMAL
- en: We also used `QTest::keyClicks()` to simulate mouse clicking in our application.
    In the earlier example, we simulate clicking on the line edit widget on our main
    window widget. Then, we input a line of text to the line edit and use `QCOMPARE`
    macro to test if the text has been correctly inserting into the line edit widget.
    If anything wrong happened, Qt will show us the problem in the application output
    window.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, comment out our `main()` function and use the `QTEST_MAIN()` function
    instead to start testing our `MainWindow` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we build and run our project now, we should be getting similar results as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are many more macros that you can use to test your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://doc.qt.io/qt-5/qtest.html#macros](http://doc.qt.io/qt-5/qtest.html#macros)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to identify technical issues in our Qt
    project by using multiple debugging techniques. Other than that, we have also
    learned about different debuggers that are supported by Qt on different operating
    systems. Finally, we also learned how to automate some of the debugging steps
    through unit testing.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! We have reached the end of this book. Hopefully, you have found this
    book useful on learning how to build your own applications from scratch using
    Qt. You can look for all the source code on GitHub. I wish you all the best!
  prefs: []
  type: TYPE_NORMAL
