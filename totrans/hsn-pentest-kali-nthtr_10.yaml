- en: Packet Sniffing and Traffic Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the reconnaissance, or information-gathering, phase of penetration testing,
    the more information and details we have about the target, the more likely we
    will be to succeed in exploiting a vulnerability on the target system or network.
    We are going to take a look at various sniffing and network traffic analysis tools
    and utilities within Kali Linux and NetHunter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Capturing network traffic using various tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The need for sniffing traffic
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why does a penetration tester need to understand the benefits of packet sniffing?
    Packet sniffing enables a penetration tester to monitor and capture network traffic
    along a segment of the network. Sniffing on a computer network is also a form
    of wiretapping. Wiretapping involves implanting a device into traffic along a
    wire, such as a network cable or a telephone wire, for the purpose of monitoring
    and capturing sensitive data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of sensitive information that may be captured
    by a packet sniffer:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Telnet traffic
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP usernames and passwords
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS traffic
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web traffic
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email traffic
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally any username and password sent in plaintext format
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few, however a lot more information is sent along the network
    in the form of bits. A sniffer can be either hardware-based or software-based
    to be planted on a network. A hardware-based sniffer usually has at least two
    interfaces (ports); this allows the hardware-based sniffer to be placed inline
    on the network and intercept all network traffic that passes through it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a network sniffer that has been placed inline on
    the network, between the switch and the router. All traffic from the client devices,
    such as the PCs, that is destined for the router or beyond and vice versa will
    be intercepted and captured by the device or attacker machine. However, if the
    PCs are intercommunicating, such as PC1 is sending data to PC3, the network sniffer
    won’t be able to intercept or capture the traffic as this traffic will not be
    passing through it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/a03ba595-8c00-4328-b03a-51538f2def42.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'A hardware-based sniffer can be a very small device, maybe just the size of
    a credit card or a box of matches. The following is a picture of a Packet Squirrel
    made by Hak5 ([https://shop.hak5.org](https://shop.hak5.org)). One of its capabilities
    is to capture traffic that is passing inline and store it on a USB flash drive
    (attachable). This device was created for both penetration testers and system
    administrators as it contains functions that allow a system administrator to remotely
    access a network and perform troubleshooting techniques on the device within a
    local area network:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/3a7cb24a-199b-45ed-ae85-3bbe73c38125.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: As we can see, this is an inline packet sniffer. It will be able to capture
    and store all network traffic that passes through it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Types of packet-sniffing techniques
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packet sniffing is usually done using the following techniques:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Active sniffing
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive sniffing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active sniffing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active sniffing involves some sort of action done by a penetration tester, such
    as redirecting user traffic to another gateway for the purpose of monitoring and
    capturing the packets on the network. A penetration tester may perform an ARP
    cache-poisoning attack on a victim’s machine by modifying the IP-MAC entries in
    the ARP table.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Flooding bogus MAC addressing into a switch will cause a CAM Table overflow,
    causing the switch to flood all incoming traffic out of all other ports.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Also, installing a Rogue DHCP Sever on the network provides clients with a nonlegitimate
    default gateway and DNS Server. The victim's traffic will be redirected to potentially
    malicious websites, and their traffic may be intercepted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'The penetration tester will need to execute a precursor attack to cause a redirection
    of the victim’s traffic. The following diagram presents a simple overview of active
    sniffing:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员需要执行一个先导攻击，以引起受害者流量的重定向。 以下图表简要介绍了主动嗅探：
- en: '![image](img/e842fd4b-2328-4af6-95e0-a4b7ca183b7c.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/e842fd4b-2328-4af6-95e0-a4b7ca183b7c.jpg)'
- en: The preceding diagram portrays a typical **man-in-the-middle** (**MITM**) attack.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表描述了典型的中间人（MITM）攻击。
- en: Passive sniffing
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 被动嗅探
- en: Passive sniffing does not require much intervention. It allows a penetration
    tester to monitor and capture network traffic without having to initiate any attack
    to redirect the user's traffic. In passive sniffing, the penetration tester would
    establish a connection to a hub on the network, as hub broadcasts the incoming
    signals out to the all other ports.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 被动嗅探不需要太多干预。 它允许渗透测试人员在不必发起任何攻击来重定向用户流量的情况下监视和捕获网络流量。 在被动嗅探中，渗透测试人员将与网络上的一个集线器建立连接，因为集线器会将传入的信号广播到所有其他端口。
- en: 'The following diagram shows an example of passive sniffing where an attack
    is connected to a hub on a network segment and a copy of all traffic passing along
    the line is sent to their machine:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个被动嗅探的例子，攻击者连接到网络段上的一个集线器，并将沿线传递的所有流量的副本发送到他们的机器：
- en: '![image](img/5f1b94e7-567f-4e36-bdc4-f29602804d2b.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/5f1b94e7-567f-4e36-bdc4-f29602804d2b.jpg)'
- en: The preceding topology shows the effect of implementing a hub on a network.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的拓扑图显示了在网络上实施集线器的效果。
- en: Tools and techniques of packet sniffing
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包嗅探的工具和技术
- en: In this section, we are going to discuss various tools and techniques that can
    assist a penetration tester in successfully capturing packets on a network.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论各种工具和技术，这些工具和技术可以帮助渗透测试人员成功地捕获网络上的数据包。
- en: Aircrack-ng
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Aircrack-ng
- en: One of the most popular wireless-cracking tools is **Aircrack-ng**. **Aircrack-ng**
    is actually a suite of multiple security auditing tools specifically used for
    wireless networks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的无线破解工具之一是Aircrack-ng。 Aircrack-ng实际上是一套专门用于无线网络的多个安全审计工具。
- en: The Aircrack-ng suite of tools allows a penetration tester to monitor wireless
    networks, capture packets in the air, execute various types of attacks, create
    rogue **access points** (**APs**), and perform both WEP and WPA cracking.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Aircrack-ng套件允许渗透测试人员监视无线网络，捕获空中数据包，执行各种类型的攻击，创建伪造的接入点（APs），并执行WEP和WPA破解。
- en: In [Chapter 13](257872df-a718-4552-b80f-fda5bb9ddecc.xhtml)*, Selecting a Kali
    Device and Hardware*, we speak briefly about using external wireless **network
    interface cards** (**NICs**), such as ALFA Network AWUS036NHA. How can you determine
    whether a wireless dongle or WLAN NIC is capable of monitoring or performing packet
    injection on a target network? Within **aircrack-ng**, there exists a tool called **airmon-ng**,
    which allows you to test a wireless NIC for compatibility.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第13章](257872df-a718-4552-b80f-fda5bb9ddecc.xhtml)*选择Kali设备和硬件*中，我们简要讨论了使用外部无线网络接口卡（NICs）（例如ALFA
    Network AWUS036NHA）。 您如何确定无线dongle或WLAN NIC能否在目标网络上进行监视或执行数据包注入？ 在aircrack-ng中，存在一个名为airmon-ng的工具，它允许您测试无线NIC的兼容性。
- en: More information about the Aircrack-ng suite of tools can be found on their
    official website: [www.aircrack-ng.org](http://www.aircrack-ng.org).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Aircrack-ng工具套件的更多信息，请访问它们的官方网站：[www.aircrack-ng.org](http://www.aircrack-ng.org)。
- en: 'Within the aircrack-ng suite, the **airmon-ng** tool is used to monitor wireless
    networks. This tool can help a penetration tester determine the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在aircrack-ng套件中，使用airmon-ng工具来监视无线网络。 此工具可以帮助渗透测试人员确定以下内容：
- en: Extended Service Set Identifier (ESSID)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展服务集标识符（ESSID）
- en: Basic Service Service Set Identifer (BSSID)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本服务集标识符（BSSID）
- en: Wireless encryption standard used on a target wireless network
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标无线网络上使用的无线加密标准
- en: An approximate distance between the penetration tester’s machine and a wireless
    router
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试人员的机器与无线路由器之间的大致距离
- en: The operating channel of a wireless network
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线网络的操作频道
- en: Observing wireless networks using airmon-ng
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用airmon-ng观察无线网络
- en: 'First, we are going to verify the number of wireless interfaces available on
    our device. To do this, use the `iwconfig` command, as shown in the following
    screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将验证设备上可用的无线接口数量。 为此，请使用`iwconfig`命令，如下图所示：
- en: '![image](img/08b8c24d-0140-4564-a82d-3617bd437f4e.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/08b8c24d-0140-4564-a82d-3617bd437f4e.jpg)'
- en: 'Using only the `airmon-ng` command will provide you with a list of local wireless
    interfaces:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用`airmon-ng`命令将为您提供本地无线接口的列表：
- en: '![image](img/d7d18840-a3c3-45e0-bc48-fa1c8a66c5dd.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/d7d18840-a3c3-45e0-bc48-fa1c8a66c5dd.png)'
- en: 'To get started, you must terminate any processes that may cause interference
    when enabling monitoring mode. Use the `airmon-ng check kill` command to check
    and terminate these processes on Kali NetHunter:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您必须终止可能在启用监视模式时引起干扰的任何进程。 使用`airmon-ng check kill`命令在Kali NetHunter上检查并终止这些进程：
- en: '![image](img/63cf422a-2559-4ce6-90aa-2ae5c2628a97.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/63cf422a-2559-4ce6-90aa-2ae5c2628a97.jpg)'
- en: 'Next, we will enable our wireless NIC to begin monitoring (promiscuous) mode
    using the `airmon-ng start wlan1` command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`airmon-ng start wlan1`命令启用无线网卡进入监视（混杂）模式：
- en: '![image](img/6ac17892-cfeb-410f-ac34-5cc863f7b44a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/6ac17892-cfeb-410f-ac34-5cc863f7b44a.png)'
- en: You can use the `iwconfig` command to determine the number of wireless interfaces
    available on your device.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`iwconfig`命令来确定设备上可用的无线接口数量。
- en: With the output, a new logical interface appears: `wlan1mon`. This interface
    will be used to perform all monitoring and capturing functions in Aircrack-ng.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出后，会出现一个新的逻辑接口：`wlan1mon`。 此接口将用于在Aircrack-ng中执行所有监视和捕获功能。
- en: 'Next, to view all wireless networks within your surrounds, use the `airodump-ng
    wlan1mon` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要查看周围所有无线网络，请使用`airodump-ng wlan1mon`命令：
- en: '![image](img/a910f559-dd6f-4290-99f1-3121508df737.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/a910f559-dd6f-4290-99f1-3121508df737.jpg)'
- en: 'In the upper section of the screenshot, we can see the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '**BSSID**: Media access control (MAC) of the access point or wireless router.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PWR**: Power ratings. The lower the power level , the further away it is
    from us.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beacons**: Number of beacon messages from a particular AP or wireless router.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CH**: The channel that the wireless router is operating on.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enc**: The encryption standard, such as WEP, WPA, WPA, or Open.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cipher**: The encryption cipher used within the encryption standard.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auth**: The authentication mechanism, such as pre-shared key (PSK) or management
    (MGT).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESSID**: The name of the wireless network as seen by a mobile device. This
    is also known as the service set identifier (SSID).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s observe the lower sections of the output as well:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/0072246d-0fc1-4fdc-b0e0-d484b269b47c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: The `STATION` column shows the MAC address of clients that are associated with
    a particular wireless router via the BSSID value. The power levels provide a rough
    distance between the clients and your device. The probe displays the networks
    (SSIDs) that the client is looking for.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'To kick it up a notch, using the following command will allow a pentester to
    monitor, capture, and save a copy of the captured data for offline analysis:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is a screenshot that demonstrates how to use the sequence of
    commands – part of the MAC address of the target wireless router was blurred for
    privacy:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/54ddc517-9554-4e53-bef4-f151c2970a4f.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: '`-w` allows you to store a copy of the traffic monitor on the interface. `-c` specifies
    the channel to listen on. The channel number should be the same as the target
    network. `--bssid` specifies the MAC address of the target wireless router.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: By default, the file is saved within the root directory of the device. If you're
    working within another directory, use the `ls –l` command to view the contents
    of your current directory. If you're not sure about your current path, use the
    `pwd` command, which shows your present working directory.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Arpspoof
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One technique a penetration tester can use to ensure they are able to capture
    victim traffic is to perform an MITM attack. Let’s imagine there are two people
    on a wireless network, Alice and Bob. They both wish to exchange some messages
    across the network. However, there is a pentester whose task is to observe and
    capture network traffic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Alice and Bob connect their mobile device to the wireless router or access
    point (AP) and begin to communicate. The wireless router is the intermediary device
    that will handle all their traffic forwarding:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/189ddb88-0af7-4da6-bafe-c4813b39727f.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'Using arpsoof, the Pentester is able to spoof the **media access control**
    (**MAC**) address of the router to trick a victim, making the other user on the
    network believe the pentester’s machine is now the router or default gateway.
    The following diagram shows that the pentester is connected to the same wireless
    network as Alice and Bob. The objective now is to convince Alice’s machine that
    the only way to reach Bob is to send all traffic to the pentester and vice versa
    for Bob’s network traffic:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/cbdb782e-b3b4-4b17-a57d-92cb7d1a33c0.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'The following is the syntax used in the `arpspoof` tool:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`-i`: Allows you to specify an interface'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: Specify a hardware address'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`: Specify the target, such as the default gateway'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host`: Specify the host to intercept packets'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: Allows you to capture a bidirectional flow of traffic'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To execute a successful MITM attack, we will have a victim, Alice, and a pentester
    connected to the same network. The objective is to ensure Alice’s machine thinks
    the default gateway is the pentester''s machine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/5f0d2c0a-7529-44db-ac2d-df4a352cc910.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'Both Alice and the pentester are connected to the same wireless network (dotted
    lines). However, the pentester uses the following command to ensure all of Alice’s
    traffic passes through their machine and then their machine will forward it to
    the actual default gateway:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![image](img/5d29526c-2dfb-4fd1-ad9a-fad754c15783.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Once the command is executed on the pentester's machine, it will send continuous
    gratuitous ARP messages to both Alice and the default gateway (wireless router)
    to ensure their local ARP cache is updated and contains the fake ARP entries.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Dsniff
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described by the creator, **Dsniff** is a collection of network-auditing
    tools and password sniffers. It provides a penetration tester with the capabilities
    to perform MITM attacks, packet analysis, and capture network packets.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following command on either Kali Linux or Kali NetHunter will enable
    Dsniff to listen on any traffic on the specified interface:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following command is an example of using `dsniff` to monitor traffic that
    hits the `wlan0` interface on your device:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![image](img/e2115dc8-bb7c-4a3e-a1ed-8be838b6ec42.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: Kismet
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another very popular wireless-monitoring tool in Kali NetHunter is Kismet. **Kismet**
    is like a Swiss Army knife for wireless networks. It can sniff packets on a wireless
    network, provides a penetration tester with war-driving functionalities, and is
    able to detect various wireless attacks and threats on a target network.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, type `kismet` in the Terminal of Kali NetHunter. You should
    see the following screen appear; select `OK` by hitting the *Enter* key:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/30935e96-3f9b-4e21-a526-c9a32dea8ad1.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Kismet will ask for your permission to autostart the Kismet server; simply
    select Yes:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d4e50e27-b509-42e4-903b-2a7491295b1c.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'The following window will appear. You can enable/disable logging and set a
    title for the log file should you decide to enable logging. I would recommend
    disabling the **Show Console** option before selecting **Start**. Disabling the
    **Show Console** option will carry you directly to the monitoring user interface
    of Kismet:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/213f214a-e4bb-4523-a639-cc1d69528897.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'If you continue with the default parameters, the following window is the console
    window, which displays logs of each activity made by Kismet. Simply click on **Close
    Console Window** to view the monitoring user interface of Kismet:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/2cbe5383-cd51-4fab-892a-86f1fa9457e3.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'Now that you''re on the main interface of Kismet, let’s get familiar with it
    and check out its capabilities. To add a source of monitoring, such as a wireless
    interface, select `Kismet` | `Add Source`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/1918a613-a119-42a4-9ce5-478ee7cfb066.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'I have chosen to add my `wlan1mon` interface as the source. Remember, you can
    use the `iwconfig` command on Kali NetHunter to determine your available wireless
    interfaces:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/50290d4d-71ef-4499-9d45-1cdb29a0d1d8.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Kismet has the ability to determine the manufacturer of a device.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your source interface has been successfully added onto Kismet, you’ll
    begin to see various wireless networks are populating on the upper half of the
    window. By selecting a wireless network, the associated clients are listed in
    the lower half:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/69971b5c-d5ac-4e19-8601-86bb46556036.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: 'To get further details about a target network, select `Windows` | `Network
    Details`. As we can see, Kismet provides us with a simplified view with the target''s
    network name (SSID), the BSSID (MAC address), type of device, operating channel,
    radio frequency, signal strength, and encryption standard and type:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/e982753b-4778-4429-87ac-301ed2aae2c2.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Tcpdump
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To put it simply, the `tcpdump` tool is a command-line protocol analyzer. This
    tool is very useful in a situation where you are remotely accessing a penetration
    testing, such as your Kali NetHunter device or even a Raspberry Pi planted within
    the vicinity of a target wireless network.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable monitoring, enter the `tcpdump –i wlan0` command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用监视，输入`tcpdump –i wlan0`命令：
- en: '![image](img/02edc712-9e04-4207-bdb3-ab20b69221c0.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/02edc712-9e04-4207-bdb3-ab20b69221c0.png)'
- en: Notice once the previous commands are entered, the results begin to populate
    the command-line interface. This is can be very challenging to perform a live
    analysis. I would recommend you first capture the packets and store them in an
    offline file, and then perform your analysis.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦输入了先前的命令，结果就开始在命令行界面中显示。这可能非常具有挑战性，进行实时分析。我建议您首先捕获数据包并将其存储在离线文件中，然后进行分析。
- en: 'To capture network packets and store them in an offline file, we can use the
    `tcpdump –i wlan0 –w tcpdumpcapture.pcap` command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获网络数据包并将其存储在离线文件中，我们可以使用`tcpdump –i wlan0 –w tcpdumpcapture.pcap`命令：
- en: '![image](img/1d093235-183f-42c1-bde1-0f805f65d6ee.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/1d093235-183f-42c1-bde1-0f805f65d6ee.png)'
- en: The `–w` parameter allows you to specify a file to write the captured data to.
    During the capture, the results will not be populated on the screen, but rather
    be written to the `tcpdumpcapture.pcap` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`-w`参数允许您指定要写入捕获数据的文件。在捕获过程中，结果不会显示在屏幕上，而是写入`tcpdumpcapture.pcap`文件。'
- en: 'Using the `ls –l | grep .pcap` command, we can see the file exists as expected:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ls –l | grep .pcap`命令，我们可以看到文件存在如预期的那样：
- en: '![image](img/d21c2fba-24aa-48ce-a3ca-bb4c25ba90fe.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/d21c2fba-24aa-48ce-a3ca-bb4c25ba90fe.png)'
- en: 'To verify or read the data written in a file, use the `tcpdump –r <filename>`
    command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证或读取文件中写入的数据，使用`tcpdump –r <filename>`命令：
- en: '![image](img/f3fc67ae-e29c-4377-b2bc-e09d723c40e6.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/f3fc67ae-e29c-4377-b2bc-e09d723c40e6.jpg)'
- en: TShark
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TShark
- en: '**TShark** is another command-line network protocol analyzer. It has similar
    capabilities to Wireshark for capturing traffic on a live network and even reading
    offline captures that were previously saved for further analysis. Many of its
    features are like the previously mentioned tool, the **tcpdump** tool.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**TShark**是另一个命令行网络协议分析器。它具有类似的功能，可以捕获实时网络上的流量，甚至读取先前保存以供进一步分析的离线捕获。它的许多功能与先前提到的工具**tcpdump**类似。'
- en: 'To capture packets and output the data into a file, we can use the `tshark
    –i <interface> -w <output file>` command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获数据包并将数据输出到文件中，我们可以使用`tshark –i <interface> -w <output file>`命令：
- en: '![image](img/d41e8d76-1ed4-432e-8080-f9111bb39298.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/d41e8d76-1ed4-432e-8080-f9111bb39298.jpg)'
- en: 'Once again, notice the live traffic isn’t displayed on the Terminal as it is
    being written to the `tsharkcapture.pcap` file. However, without using the `–w`
    parameter, we’ll see all the traffic that is hitting our `wlan0` interface:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，实时流量不会显示在终端上，因为它被写入`tsharkcapture.pcap`文件。但是，如果不使用`-w`参数，我们将看到命中我们的`wlan0`接口的所有流量：
- en: '![image](img/71ed1145-f815-428c-ad5b-801dd6b7bd92.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/71ed1145-f815-428c-ad5b-801dd6b7bd92.png)'
- en: The output shows that another machine on my network is attempting to perform
    LAN synchronization for Dropbox.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我的网络上的另一台机器正在尝试为Dropbox执行LAN同步。
- en: The MITM framework
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MITM框架
- en: For this tool, the name says it all. It’s an MITM framework that contains many
    functions, such as capturing a victim’s cookie information, performing keylogging
    functions and Address Resolution Protocol (ARP) injection attacks, and spoofing.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个工具，名字就说明了一切。这是一个包含许多功能的MITM框架，比如捕获受害者的cookie信息，执行键盘记录功能和地址解析协议（ARP）注入攻击，以及欺骗。
- en: 'In this exercise, we are going to intercept packets between a victim and the
    default gateway. To get started, open the menu on your Android device and open
    the NetHunter app:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将拦截受害者和默认网关之间的数据包。要开始，请在您的Android设备上打开菜单并打开NetHunter应用程序：
- en: '![image](img/78d2b8c9-849c-498e-a340-2bb96b7075db.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/78d2b8c9-849c-498e-a340-2bb96b7075db.jpg)'
- en: 'Once the app is opened, use the built-in menu on the left to expand the category
    listing. You will see the MITM Framework with the list, click on it to open it:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 打开应用程序后，使用左侧的内置菜单展开类别列表。您将看到MITM框架与列表，点击它打开：
- en: '![image](img/5b5ae811-9450-4064-be0e-db703aa0c5e6.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/5b5ae811-9450-4064-be0e-db703aa0c5e6.png)'
- en: 'The following window will appear, simply select the interface you would like
    to use for the attack:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现以下窗口，只需选择要用于攻击的接口：
- en: '![image](img/5cfc76a8-e65a-4534-859a-51043a9e4398.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/5cfc76a8-e65a-4534-859a-51043a9e4398.jpg)'
- en: 'Once you’re finished, swipe to the right until you’re on the **Spoof Settings**
    tab. Simply enable the spoofing plugin, select the redirect mode as ARP, and set
    the gateway address and victim’s IP address as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，向右滑动，直到进入**欺骗设置**选项卡。只需启用欺骗插件，选择重定向模式为ARP，并设置网关地址和受害者的IP地址，如下面的屏幕截图所示：
- en: '![image](img/32d7fd33-a5d8-4d04-b79b-48bf2af9f7b0.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/32d7fd33-a5d8-4d04-b79b-48bf2af9f7b0.jpg)'
- en: Once all your parameters are configured, select `Start MITMf attack` to begin
    intercepting packets. Remember, you can use any of the previously mentioned packet-capturing
    tools, such as TShack, Tcpdump, or even Dsniff, to capture and store the packets
    offline for later analysis.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有参数都配置好，选择`开始MITMf攻击`开始拦截数据包。记住，您可以使用先前提到的任何数据包捕获工具，如TShack、Tcpdump，甚至Dsniff，来捕获和存储离线数据包以供以后分析。
- en: Packet analysis techniques
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包分析技术
- en: In this section, we are going to discuss packet analysis using tools in Kali
    NetHunter. We will be using various sample files taken from [https://wiki.wireshark.org/SampleCaptures](https://wiki.wireshark.org/SampleCaptures)
    and [https://www.honeynet.org/challenges](https://www.honeynet.org/challenges)
    as these samples are made for educational uses and contain a lot of data that
    is usually found on production networks.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论使用Kali NetHunter中的工具进行数据包分析。我们将使用来自[https://wiki.wireshark.org/SampleCaptures](https://wiki.wireshark.org/SampleCaptures)和[https://www.honeynet.org/challenges](https://www.honeynet.org/challenges)的各种示例文件，因为这些示例是为教育目的而制作的，并包含通常在生产网络上找到的大量数据。
- en: Dsniff
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dsniff
- en: We used Dsniff earlier to capture packets, but now we are going to use it to
    help us reassemble and view the plaintext transactions that took place in an offline
    PCAP file. For this exercise, we are going to use the `telnet.cooked.pcap` file
    from [https://wiki.wireshark.org/SampleCaptures#Telnet](https://wiki.wireshark.org/SampleCaptures#Telnet).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用Dsniff来捕获数据包，但现在我们将使用它来帮助我们重新组装并查看离线PCAP文件中发生的明文事务。对于此练习，我们将使用来自[https://wiki.wireshark.org/SampleCaptures#Telnet](https://wiki.wireshark.org/SampleCaptures#Telnet)的`telnet.cooked.pcap`文件。
- en: 'Use the `dnsiff –p <filename>` command to enable the processing of contents
    from an offline, previously saved capture file. As we can see in the following
    screenshot, there is a communication that took place between two devices:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dnsiff –p <filename>`命令来启用来自离线先前保存的捕获文件的内容的处理。如下图所示，有两个设备之间进行了通信：
- en: '![image](img/cb0ed1f1-2572-4dda-bf26-ebc6d1ab25d6.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/cb0ed1f1-2572-4dda-bf26-ebc6d1ab25d6.jpg)'
- en: 'The following is the information we are able to interpret:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们能够解释的信息：
- en: '![image](img/2b37e934-e802-493e-9b84-fc2d36f9e25b.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/2b37e934-e802-493e-9b84-fc2d36f9e25b.jpg)'
- en: Furthermore, we know its a Telnet connection which is identified by Dsniff and
    the destination port `23`. The text that follows is the actual commands sent from
    the client (`192.168.0.2`) to the telnet server (`192.168.0.1`).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们知道这是一个由Dsniff识别的Telnet连接，目的端口是`23`。接下来的文本是从客户端（`192.168.0.2`）发送到Telnet服务器（`192.168.0.1`）的实际命令。
- en: Tshark
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tshark
- en: 'We can use TShark to gather information from our offline PCAP file. To get
    a copy of each web browser used to visit per unique website, we can use the following
    command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用TShark从我们的离线PCAP文件中收集信息。要获取用于访问每个唯一网站的每个Web浏览器的副本，我们可以使用以下命令：
- en: '[PRE5]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are able to see each URL (on the left in the following screenshot) and the
    user agent (web browser) that made the `HTTP GET` request to the web server:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够看到每个URL（在下面的截图中左侧）和发出`HTTP GET`请求到Web服务器的用户代理（Web浏览器）：
- en: '![image](img/92aeddee-556e-4781-845f-38e13fdf7800.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/92aeddee-556e-4781-845f-38e13fdf7800.jpg)'
- en: 'Let’s attempt to retrieve all the DNS queries. To do this, we can use the following
    command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试检索所有DNS查询。为此，我们可以使用以下命令：
- en: '[PRE6]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command reads the contents from the `conference.pcapng` file and creates
    an initial filter to show only lines which include the `Standard query` string.
    Once this is done, it will remove any unnecessary data and show each unique domain
    name or hostname in the DNS query:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令从`conference.pcapng`文件中读取内容，并创建一个初始过滤器，只显示包含`Standard query`字符串的行。完成后，它将删除任何不必要的数据，并显示DNS查询中的每个唯一域名或主机名：
- en: '![image](img/8db3a9d8-7b46-459f-a902-cd9289848fcc.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/8db3a9d8-7b46-459f-a902-cd9289848fcc.jpg)'
- en: 'How about extracting artifacts from a saved capture file? It''s possible with
    TShark. Use the `–export-objects [smb, http, smb, tftp] <output_folder>` command
    to extract objects. In this example, we are going to extract all the files that
    were transferred using the HTTP application protocol. We begin by using the following
    command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如何从保存的捕获文件中提取工件？使用TShark是可能的。使用`–export-objects [smb, http, smb, tftp] <output_folder>`命令来提取对象。在这个例子中，我们将提取使用HTTP应用程序协议传输的所有文件。我们首先使用以下命令：
- en: '[PRE7]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then verify that the extraction was successful:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们验证提取是否成功：
- en: '![image](img/71995bf1-b768-4f8e-9efa-307c2c9a8205.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/71995bf1-b768-4f8e-9efa-307c2c9a8205.jpg)'
- en: Urlsnarf
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Urlsnarf
- en: '**Urlsnark** is used to sniff HTTP requests from live network traffic and even
    offline `.pcap` files. This tool can help us determine which websites were visited
    by the clients on a network. For this exercise, we are going to use the `conference.pcap`
    file from [https://www.honeynet.org/node/1220](https://www.honeynet.org/node/1220).'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**Urlsnark**用于从实时网络流量甚至离线`.pcap`文件中嗅探HTTP请求。这个工具可以帮助我们确定网络上的客户端访问了哪些网站。对于此练习，我们将使用来自[https://www.honeynet.org/node/1220](https://www.honeynet.org/node/1220)的`conference.pcap`文件。'
- en: 'To get started, download and the save offline on your device. Use the `urlsnarf
    –p <file>` command to get all the HTTP data:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请下载并在设备上离线保存。使用`urlsnarf –p <file>`命令来获取所有HTTP数据：
- en: '![image](img/85d23bce-3b1d-4a41-acbb-cfb1b2774961.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/85d23bce-3b1d-4a41-acbb-cfb1b2774961.png)'
- en: 'However, as you can see, the output is very overwhelming. Let''s create a filter
    to provide us only with the HTTP URLs from this file. We can use the following
    command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如你所看到的，输出非常庞大。让我们创建一个过滤器，只提供此文件中的HTTP URL。我们可以使用以下命令：
- en: '[PRE8]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![image](img/c6772e4c-3be1-4abe-903c-8573d4a7881b.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/c6772e4c-3be1-4abe-903c-8573d4a7881b.jpg)'
- en: 'Our output is now much clearer. We have a list of all the URLs users visited
    during this capture. Let''s create another filter to determine the user agents
    (client’s web browser) during each communication. Using the following command
    will remove duplications and sort our output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出现在清晰多了。我们有了在此捕获期间用户访问的所有URL的列表。让我们创建另一个过滤器，以确定每次通信期间的用户代理（客户端的Web浏览器）。使用以下命令将删除重复项并对输出进行排序：
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![image](img/36ea403f-3eb7-497d-8549-2bd473526eda.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/36ea403f-3eb7-497d-8549-2bd473526eda.png)'
- en: Tcpdump
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tcpdump
- en: 'We can use Tcpdump to view the user agents by using the `tcpdump –r <file>
    -nn -A -s1500 -l | grep "User-Agent:" | sort –u` command, as shown in the following
    screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Tcpdump来查看用户代理，使用`tcpdump –r <file> -nn -A -s1500 -l | grep "User-Agent:"
    | sort –u`命令，如下图所示：
- en: '![image](img/216622ca-2f39-40a8-b2c5-a984f82b7223.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/216622ca-2f39-40a8-b2c5-a984f82b7223.jpg)'
- en: As mentioned, the user agents determine the web browser. This information can
    be useful during a forensic investigation. Furthermore, we can use `tcpdump` to
    see all the source and destination IP addresses within the capture file.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，用户代理确定Web浏览器。这些信息在取证调查中可能很有用。此外，我们可以使用`tcpdump`来查看捕获文件中的所有源和目的IP地址。
- en: 'To obtain a list of source IP addresses with the source ports, we can use the
    following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取源IP地址和源端口的列表，我们可以使用以下命令：
- en: '![image](img/a0f5f0fe-4306-4fa9-a906-f68469a1743f.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/a0f5f0fe-4306-4fa9-a906-f68469a1743f.jpg)'
- en: 'To view all the destination IP addresses and the destination port numbers,
    use the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 查看所有目标IP地址和目标端口号，请使用以下命令：
- en: '![image](img/0e1b0672-f455-4063-8775-26c3fd9f2b58.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![image](img/0e1b0672-f455-4063-8775-26c3fd9f2b58.jpg)'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the benefits of sniffing and analyzing packets
    on a network. The main point is to capture sensitive information which will assist
    us in a penetration test. We compared and contrasted the active and passive sniffing
    techniques. Furthermore, we demonstrated various packet-capturing techniques and
    analyses using a suite of tools found on Kali NetHunter. I hope this chapter has
    been informative and resourceful foryour studies and career.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了在网络上嗅探和分析数据包的好处。主要目的是捕获敏感信息，这将帮助我们进行渗透测试。我们比较和对比了主动和被动嗅探技术。此外，我们演示了使用Kali
    NetHunter上的一套工具进行各种数据包捕获技术和分析。希望本章对您的学习和职业有所帮助。
- en: In the next chapter, we will cover targeting wireless devices and networks.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖针对无线设备和网络的目标。
