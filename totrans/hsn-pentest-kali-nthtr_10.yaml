- en: Packet Sniffing and Traffic Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the reconnaissance, or information-gathering, phase of penetration testing,
    the more information and details we have about the target, the more likely we
    will be to succeed in exploiting a vulnerability on the target system or network.
    We are going to take a look at various sniffing and network traffic analysis tools
    and utilities within Kali Linux and NetHunter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing network traffic using various tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: The need for sniffing traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why does a penetration tester need to understand the benefits of packet sniffing?
    Packet sniffing enables a penetration tester to monitor and capture network traffic
    along a segment of the network. Sniffing on a computer network is also a form
    of wiretapping. Wiretapping involves implanting a device into traffic along a
    wire, such as a network cable or a telephone wire, for the purpose of monitoring
    and capturing sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of sensitive information that may be captured
    by a packet sniffer:'
  prefs: []
  type: TYPE_NORMAL
- en: Telnet traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP usernames and passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally any username and password sent in plaintext format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few, however a lot more information is sent along the network
    in the form of bits. A sniffer can be either hardware-based or software-based
    to be planted on a network. A hardware-based sniffer usually has at least two
    interfaces (ports); this allows the hardware-based sniffer to be placed inline
    on the network and intercept all network traffic that passes through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a network sniffer that has been placed inline on
    the network, between the switch and the router. All traffic from the client devices,
    such as the PCs, that is destined for the router or beyond and vice versa will
    be intercepted and captured by the device or attacker machine. However, if the
    PCs are intercommunicating, such as PC1 is sending data to PC3, the network sniffer
    won’t be able to intercept or capture the traffic as this traffic will not be
    passing through it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/a03ba595-8c00-4328-b03a-51538f2def42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A hardware-based sniffer can be a very small device, maybe just the size of
    a credit card or a box of matches. The following is a picture of a Packet Squirrel
    made by Hak5 ([https://shop.hak5.org](https://shop.hak5.org)). One of its capabilities
    is to capture traffic that is passing inline and store it on a USB flash drive
    (attachable). This device was created for both penetration testers and system
    administrators as it contains functions that allow a system administrator to remotely
    access a network and perform troubleshooting techniques on the device within a
    local area network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/3a7cb24a-199b-45ed-ae85-3bbe73c38125.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, this is an inline packet sniffer. It will be able to capture
    and store all network traffic that passes through it.
  prefs: []
  type: TYPE_NORMAL
- en: Types of packet-sniffing techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packet sniffing is usually done using the following techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Active sniffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive sniffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active sniffing involves some sort of action done by a penetration tester, such
    as redirecting user traffic to another gateway for the purpose of monitoring and
    capturing the packets on the network. A penetration tester may perform an ARP
    cache-poisoning attack on a victim’s machine by modifying the IP-MAC entries in
    the ARP table.
  prefs: []
  type: TYPE_NORMAL
- en: Flooding bogus MAC addressing into a switch will cause a CAM Table overflow,
    causing the switch to flood all incoming traffic out of all other ports.
  prefs: []
  type: TYPE_NORMAL
- en: Also, installing a Rogue DHCP Sever on the network provides clients with a nonlegitimate
    default gateway and DNS Server. The victim's traffic will be redirected to potentially
    malicious websites, and their traffic may be intercepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The penetration tester will need to execute a precursor attack to cause a redirection
    of the victim’s traffic. The following diagram presents a simple overview of active
    sniffing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/e842fd4b-2328-4af6-95e0-a4b7ca183b7c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram portrays a typical **man-in-the-middle** (**MITM**) attack.
  prefs: []
  type: TYPE_NORMAL
- en: Passive sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passive sniffing does not require much intervention. It allows a penetration
    tester to monitor and capture network traffic without having to initiate any attack
    to redirect the user's traffic. In passive sniffing, the penetration tester would
    establish a connection to a hub on the network, as hub broadcasts the incoming
    signals out to the all other ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows an example of passive sniffing where an attack
    is connected to a hub on a network segment and a copy of all traffic passing along
    the line is sent to their machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/5f1b94e7-567f-4e36-bdc4-f29602804d2b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding topology shows the effect of implementing a hub on a network.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and techniques of packet sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss various tools and techniques that can
    assist a penetration tester in successfully capturing packets on a network.
  prefs: []
  type: TYPE_NORMAL
- en: Aircrack-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular wireless-cracking tools is **Aircrack-ng**. **Aircrack-ng**
    is actually a suite of multiple security auditing tools specifically used for
    wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: The Aircrack-ng suite of tools allows a penetration tester to monitor wireless
    networks, capture packets in the air, execute various types of attacks, create
    rogue **access points** (**APs**), and perform both WEP and WPA cracking.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 13](257872df-a718-4552-b80f-fda5bb9ddecc.xhtml)*, Selecting a Kali
    Device and Hardware*, we speak briefly about using external wireless **network
    interface cards** (**NICs**), such as ALFA Network AWUS036NHA. How can you determine
    whether a wireless dongle or WLAN NIC is capable of monitoring or performing packet
    injection on a target network? Within **aircrack-ng**, there exists a tool called **airmon-ng**,
    which allows you to test a wireless NIC for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: More information about the Aircrack-ng suite of tools can be found on their
    official website: [www.aircrack-ng.org](http://www.aircrack-ng.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the aircrack-ng suite, the **airmon-ng** tool is used to monitor wireless
    networks. This tool can help a penetration tester determine the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extended Service Set Identifier (ESSID)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Service Service Set Identifer (BSSID)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless encryption standard used on a target wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An approximate distance between the penetration tester’s machine and a wireless
    router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating channel of a wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observing wireless networks using airmon-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are going to verify the number of wireless interfaces available on
    our device. To do this, use the `iwconfig` command, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/08b8c24d-0140-4564-a82d-3617bd437f4e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using only the `airmon-ng` command will provide you with a list of local wireless
    interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d7d18840-a3c3-45e0-bc48-fa1c8a66c5dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get started, you must terminate any processes that may cause interference
    when enabling monitoring mode. Use the `airmon-ng check kill` command to check
    and terminate these processes on Kali NetHunter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/63cf422a-2559-4ce6-90aa-2ae5c2628a97.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will enable our wireless NIC to begin monitoring (promiscuous) mode
    using the `airmon-ng start wlan1` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/6ac17892-cfeb-410f-ac34-5cc863f7b44a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the `iwconfig` command to determine the number of wireless interfaces
    available on your device.
  prefs: []
  type: TYPE_NORMAL
- en: With the output, a new logical interface appears: `wlan1mon`. This interface
    will be used to perform all monitoring and capturing functions in Aircrack-ng.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to view all wireless networks within your surrounds, use the `airodump-ng
    wlan1mon` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/a910f559-dd6f-4290-99f1-3121508df737.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the upper section of the screenshot, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BSSID**: Media access control (MAC) of the access point or wireless router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PWR**: Power ratings. The lower the power level , the further away it is
    from us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beacons**: Number of beacon messages from a particular AP or wireless router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CH**: The channel that the wireless router is operating on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enc**: The encryption standard, such as WEP, WPA, WPA, or Open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cipher**: The encryption cipher used within the encryption standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auth**: The authentication mechanism, such as pre-shared key (PSK) or management
    (MGT).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESSID**: The name of the wireless network as seen by a mobile device. This
    is also known as the service set identifier (SSID).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s observe the lower sections of the output as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/0072246d-0fc1-4fdc-b0e0-d484b269b47c.png)'
  prefs: []
  type: TYPE_IMG
- en: The `STATION` column shows the MAC address of clients that are associated with
    a particular wireless router via the BSSID value. The power levels provide a rough
    distance between the clients and your device. The probe displays the networks
    (SSIDs) that the client is looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'To kick it up a notch, using the following command will allow a pentester to
    monitor, capture, and save a copy of the captured data for offline analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot that demonstrates how to use the sequence of
    commands – part of the MAC address of the target wireless router was blurred for
    privacy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/54ddc517-9554-4e53-bef4-f151c2970a4f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`-w` allows you to store a copy of the traffic monitor on the interface. `-c` specifies
    the channel to listen on. The channel number should be the same as the target
    network. `--bssid` specifies the MAC address of the target wireless router.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the file is saved within the root directory of the device. If you're
    working within another directory, use the `ls –l` command to view the contents
    of your current directory. If you're not sure about your current path, use the
    `pwd` command, which shows your present working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Arpspoof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One technique a penetration tester can use to ensure they are able to capture
    victim traffic is to perform an MITM attack. Let’s imagine there are two people
    on a wireless network, Alice and Bob. They both wish to exchange some messages
    across the network. However, there is a pentester whose task is to observe and
    capture network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alice and Bob connect their mobile device to the wireless router or access
    point (AP) and begin to communicate. The wireless router is the intermediary device
    that will handle all their traffic forwarding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/189ddb88-0af7-4da6-bafe-c4813b39727f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using arpsoof, the Pentester is able to spoof the **media access control**
    (**MAC**) address of the router to trick a victim, making the other user on the
    network believe the pentester’s machine is now the router or default gateway.
    The following diagram shows that the pentester is connected to the same wireless
    network as Alice and Bob. The objective now is to convince Alice’s machine that
    the only way to reach Bob is to send all traffic to the pentester and vice versa
    for Bob’s network traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/cbdb782e-b3b4-4b17-a57d-92cb7d1a33c0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the syntax used in the `arpspoof` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`-i`: Allows you to specify an interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: Specify a hardware address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`: Specify the target, such as the default gateway'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host`: Specify the host to intercept packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: Allows you to capture a bidirectional flow of traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To execute a successful MITM attack, we will have a victim, Alice, and a pentester
    connected to the same network. The objective is to ensure Alice’s machine thinks
    the default gateway is the pentester''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/5f0d2c0a-7529-44db-ac2d-df4a352cc910.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Both Alice and the pentester are connected to the same wireless network (dotted
    lines). However, the pentester uses the following command to ensure all of Alice’s
    traffic passes through their machine and then their machine will forward it to
    the actual default gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![image](img/5d29526c-2dfb-4fd1-ad9a-fad754c15783.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the command is executed on the pentester's machine, it will send continuous
    gratuitous ARP messages to both Alice and the default gateway (wireless router)
    to ensure their local ARP cache is updated and contains the fake ARP entries.
  prefs: []
  type: TYPE_NORMAL
- en: Dsniff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described by the creator, **Dsniff** is a collection of network-auditing
    tools and password sniffers. It provides a penetration tester with the capabilities
    to perform MITM attacks, packet analysis, and capture network packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following command on either Kali Linux or Kali NetHunter will enable
    Dsniff to listen on any traffic on the specified interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command is an example of using `dsniff` to monitor traffic that
    hits the `wlan0` interface on your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![image](img/e2115dc8-bb7c-4a3e-a1ed-8be838b6ec42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kismet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another very popular wireless-monitoring tool in Kali NetHunter is Kismet. **Kismet**
    is like a Swiss Army knife for wireless networks. It can sniff packets on a wireless
    network, provides a penetration tester with war-driving functionalities, and is
    able to detect various wireless attacks and threats on a target network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, type `kismet` in the Terminal of Kali NetHunter. You should
    see the following screen appear; select `OK` by hitting the *Enter* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/30935e96-3f9b-4e21-a526-c9a32dea8ad1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Kismet will ask for your permission to autostart the Kismet server; simply
    select Yes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d4e50e27-b509-42e4-903b-2a7491295b1c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following window will appear. You can enable/disable logging and set a
    title for the log file should you decide to enable logging. I would recommend
    disabling the **Show Console** option before selecting **Start**. Disabling the
    **Show Console** option will carry you directly to the monitoring user interface
    of Kismet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/213f214a-e4bb-4523-a639-cc1d69528897.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you continue with the default parameters, the following window is the console
    window, which displays logs of each activity made by Kismet. Simply click on **Close
    Console Window** to view the monitoring user interface of Kismet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/2cbe5383-cd51-4fab-892a-86f1fa9457e3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you''re on the main interface of Kismet, let’s get familiar with it
    and check out its capabilities. To add a source of monitoring, such as a wireless
    interface, select `Kismet` | `Add Source`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/1918a613-a119-42a4-9ce5-478ee7cfb066.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I have chosen to add my `wlan1mon` interface as the source. Remember, you can
    use the `iwconfig` command on Kali NetHunter to determine your available wireless
    interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/50290d4d-71ef-4499-9d45-1cdb29a0d1d8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kismet has the ability to determine the manufacturer of a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your source interface has been successfully added onto Kismet, you’ll
    begin to see various wireless networks are populating on the upper half of the
    window. By selecting a wireless network, the associated clients are listed in
    the lower half:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/69971b5c-d5ac-4e19-8601-86bb46556036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get further details about a target network, select `Windows` | `Network
    Details`. As we can see, Kismet provides us with a simplified view with the target''s
    network name (SSID), the BSSID (MAC address), type of device, operating channel,
    radio frequency, signal strength, and encryption standard and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/e982753b-4778-4429-87ac-301ed2aae2c2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To put it simply, the `tcpdump` tool is a command-line protocol analyzer. This
    tool is very useful in a situation where you are remotely accessing a penetration
    testing, such as your Kali NetHunter device or even a Raspberry Pi planted within
    the vicinity of a target wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable monitoring, enter the `tcpdump –i wlan0` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/02edc712-9e04-4207-bdb3-ab20b69221c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice once the previous commands are entered, the results begin to populate
    the command-line interface. This is can be very challenging to perform a live
    analysis. I would recommend you first capture the packets and store them in an
    offline file, and then perform your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture network packets and store them in an offline file, we can use the
    `tcpdump –i wlan0 –w tcpdumpcapture.pcap` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/1d093235-183f-42c1-bde1-0f805f65d6ee.png)'
  prefs: []
  type: TYPE_IMG
- en: The `–w` parameter allows you to specify a file to write the captured data to.
    During the capture, the results will not be populated on the screen, but rather
    be written to the `tcpdumpcapture.pcap` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ls –l | grep .pcap` command, we can see the file exists as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d21c2fba-24aa-48ce-a3ca-bb4c25ba90fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To verify or read the data written in a file, use the `tcpdump –r <filename>`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/f3fc67ae-e29c-4377-b2bc-e09d723c40e6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: TShark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**TShark** is another command-line network protocol analyzer. It has similar
    capabilities to Wireshark for capturing traffic on a live network and even reading
    offline captures that were previously saved for further analysis. Many of its
    features are like the previously mentioned tool, the **tcpdump** tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture packets and output the data into a file, we can use the `tshark
    –i <interface> -w <output file>` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d41e8d76-1ed4-432e-8080-f9111bb39298.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, notice the live traffic isn’t displayed on the Terminal as it is
    being written to the `tsharkcapture.pcap` file. However, without using the `–w`
    parameter, we’ll see all the traffic that is hitting our `wlan0` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/71ed1145-f815-428c-ad5b-801dd6b7bd92.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows that another machine on my network is attempting to perform
    LAN synchronization for Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: The MITM framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this tool, the name says it all. It’s an MITM framework that contains many
    functions, such as capturing a victim’s cookie information, performing keylogging
    functions and Address Resolution Protocol (ARP) injection attacks, and spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to intercept packets between a victim and the
    default gateway. To get started, open the menu on your Android device and open
    the NetHunter app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/78d2b8c9-849c-498e-a340-2bb96b7075db.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the app is opened, use the built-in menu on the left to expand the category
    listing. You will see the MITM Framework with the list, click on it to open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/5b5ae811-9450-4064-be0e-db703aa0c5e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following window will appear, simply select the interface you would like
    to use for the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/5cfc76a8-e65a-4534-859a-51043a9e4398.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you’re finished, swipe to the right until you’re on the **Spoof Settings**
    tab. Simply enable the spoofing plugin, select the redirect mode as ARP, and set
    the gateway address and victim’s IP address as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/32d7fd33-a5d8-4d04-b79b-48bf2af9f7b0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once all your parameters are configured, select `Start MITMf attack` to begin
    intercepting packets. Remember, you can use any of the previously mentioned packet-capturing
    tools, such as TShack, Tcpdump, or even Dsniff, to capture and store the packets
    offline for later analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Packet analysis techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss packet analysis using tools in Kali
    NetHunter. We will be using various sample files taken from [https://wiki.wireshark.org/SampleCaptures](https://wiki.wireshark.org/SampleCaptures)
    and [https://www.honeynet.org/challenges](https://www.honeynet.org/challenges)
    as these samples are made for educational uses and contain a lot of data that
    is usually found on production networks.
  prefs: []
  type: TYPE_NORMAL
- en: Dsniff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used Dsniff earlier to capture packets, but now we are going to use it to
    help us reassemble and view the plaintext transactions that took place in an offline
    PCAP file. For this exercise, we are going to use the `telnet.cooked.pcap` file
    from [https://wiki.wireshark.org/SampleCaptures#Telnet](https://wiki.wireshark.org/SampleCaptures#Telnet).
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `dnsiff –p <filename>` command to enable the processing of contents
    from an offline, previously saved capture file. As we can see in the following
    screenshot, there is a communication that took place between two devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/cb0ed1f1-2572-4dda-bf26-ebc6d1ab25d6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the information we are able to interpret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/2b37e934-e802-493e-9b84-fc2d36f9e25b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, we know its a Telnet connection which is identified by Dsniff and
    the destination port `23`. The text that follows is the actual commands sent from
    the client (`192.168.0.2`) to the telnet server (`192.168.0.1`).
  prefs: []
  type: TYPE_NORMAL
- en: Tshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use TShark to gather information from our offline PCAP file. To get
    a copy of each web browser used to visit per unique website, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We are able to see each URL (on the left in the following screenshot) and the
    user agent (web browser) that made the `HTTP GET` request to the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/92aeddee-556e-4781-845f-38e13fdf7800.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s attempt to retrieve all the DNS queries. To do this, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This command reads the contents from the `conference.pcapng` file and creates
    an initial filter to show only lines which include the `Standard query` string.
    Once this is done, it will remove any unnecessary data and show each unique domain
    name or hostname in the DNS query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/8db3a9d8-7b46-459f-a902-cd9289848fcc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'How about extracting artifacts from a saved capture file? It''s possible with
    TShark. Use the `–export-objects [smb, http, smb, tftp] <output_folder>` command
    to extract objects. In this example, we are going to extract all the files that
    were transferred using the HTTP application protocol. We begin by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We then verify that the extraction was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/71995bf1-b768-4f8e-9efa-307c2c9a8205.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Urlsnarf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Urlsnark** is used to sniff HTTP requests from live network traffic and even
    offline `.pcap` files. This tool can help us determine which websites were visited
    by the clients on a network. For this exercise, we are going to use the `conference.pcap`
    file from [https://www.honeynet.org/node/1220](https://www.honeynet.org/node/1220).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, download and the save offline on your device. Use the `urlsnarf
    –p <file>` command to get all the HTTP data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/85d23bce-3b1d-4a41-acbb-cfb1b2774961.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, as you can see, the output is very overwhelming. Let''s create a filter
    to provide us only with the HTTP URLs from this file. We can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![image](img/c6772e4c-3be1-4abe-903c-8573d4a7881b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our output is now much clearer. We have a list of all the URLs users visited
    during this capture. Let''s create another filter to determine the user agents
    (client’s web browser) during each communication. Using the following command
    will remove duplications and sort our output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![image](img/36ea403f-3eb7-497d-8549-2bd473526eda.png)'
  prefs: []
  type: TYPE_IMG
- en: Tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use Tcpdump to view the user agents by using the `tcpdump –r <file>
    -nn -A -s1500 -l | grep "User-Agent:" | sort –u` command, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/216622ca-2f39-40a8-b2c5-a984f82b7223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned, the user agents determine the web browser. This information can
    be useful during a forensic investigation. Furthermore, we can use `tcpdump` to
    see all the source and destination IP addresses within the capture file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a list of source IP addresses with the source ports, we can use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/a0f5f0fe-4306-4fa9-a906-f68469a1743f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To view all the destination IP addresses and the destination port numbers,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/0e1b0672-f455-4063-8775-26c3fd9f2b58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the benefits of sniffing and analyzing packets
    on a network. The main point is to capture sensitive information which will assist
    us in a penetration test. We compared and contrasted the active and passive sniffing
    techniques. Furthermore, we demonstrated various packet-capturing techniques and
    analyses using a suite of tools found on Kali NetHunter. I hope this chapter has
    been informative and resourceful foryour studies and career.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover targeting wireless devices and networks.
  prefs: []
  type: TYPE_NORMAL
