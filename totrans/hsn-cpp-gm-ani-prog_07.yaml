- en: '*Chapter 7*: Exploring the glTF File Format'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore glTF, a file format that contains everything
    you need to display animated models. It's a standard format that most three-dimensional
    content creation applications can export to and allows you to load any arbitrary
    model.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on the file format itself. Later chapters will focus on
    implementing loading parts of glTF files as they become relevant. By the end of
    this chapter, you should have a solid understanding of the glTF file format.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will focus on building the following skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what data is inside of a glTF file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a glTF loading using cgltf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to export glTF files from Blender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover every concept of glTF files that you will need to load
    and display animated models. The chapter, however, is not a complete guide to
    the file format. Before reading this chapter, take a few minutes to familiarize
    yourself with the glTF format by reading the reference guide at [https://www.khronos.org/files/gltf20-reference-guide.pdf](https://www.khronos.org/files/gltf20-reference-guide.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: You will be using cgltf ([https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf))
    to parse glTF files. If a glTF file isn't displaying properly, it might be a bad
    file. If you suspect a file might be bad, check it against the glTF reference
    viewer at [https://gltf-viewer.donmccurdy.com/](https://gltf-viewer.donmccurdy.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring how glTF files are stored
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: glTF files are stored as either plain text JSON files or in a more compact binary
    representation. The plain text variant commonly has a `.gltf` extension, while
    the binary variant commonly has a `.glb` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'There might be multiple files. A glTF file can choose to embed large chunks
    of binary data—even textures—or it can choose to store them in external files.
    This is reflected in the following screenshot of Blender3D''s glTF export options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Blender3D’s glTF export options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.1_B16191.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.1: Blender3D''s glTF export options'
  prefs: []
  type: TYPE_NORMAL
- en: Sample files provided with the downloadable content for this book are stored
    as glTF embedded files (`.gltf`). This is the plain text variant of glTF that
    can be inspected with any text editor. More importantly, it's a single file to
    keep track of. Even though the files provided with this book are in the glTF embedded
    format, the final code will support loading the binary format and separate files
    (`.bin`) as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've explored the different ways a glTF file can be stored, let's
    get ready to learn what's stored inside glTF files. The glTF file was intended
    to store an entire scene, not just a single model. In the next section, you will
    explore the intended use of glTF files.
  prefs: []
  type: TYPE_NORMAL
- en: glTF files store a scene, not a model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's important to know that glTF files are meant to represent an entire three-dimensional
    scene, not just a single animated model. As such, glTF has support for features
    you won't need to use for animation, such as cameras and PBR materials. For animation,
    we only care about using a small subset of the supported features. Let's outline
    what they are.
  prefs: []
  type: TYPE_NORMAL
- en: A glTF file can contain different types of meshes. It contains static meshes,
    such as props. These meshes are only moved by the animation of the node they are
    attached to; it can contain morph targets. Morph animation can be used for things
    such as facial expressions.
  prefs: []
  type: TYPE_NORMAL
- en: A glTF file can also contain skinned meshes. These are the meshes you will use
    to animate characters. Skinned meshes describe how the vertices of a model are
    affected by the transform hierarchy (or skeleton) of the model. With a skinned
    mesh, each vertex of a mesh can be bound to a joint in the hierarchy. As the hierarchy
    animates, the mesh is deformed.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that glTF is intended to describe a scene, not a single model, is going
    to make some of the loading code a bit tricky. In the next section, you will start
    to explore what the actual content of a glTF file is from a high-level perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the glTF format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The root of a glTF file is the scene. A glTF file can contain one or more scenes.
    A scene contains one or more nodes. A node can have a skin, a mesh, an animation,
    a camera, a light, or blend weights attached to it. Meshes, skins, and animations
    each store large chunks of information in buffers. To access a buffer, they contain
    an accessor that contains a buffer view, which in turn contains the buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'A description provided through text can be very hard to follow. The following
    diagram illustrates the file layout described. Since glTF is a scene description
    format, there are a decent number of data types that we don''t have to care about.
    The next section explores these:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: The contents of a glTF file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.2_B16191.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.2: The contents of a glTF file'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea of what is stored in a glTF file, the following section
    will explore the parts of the file format needed for skinned animation.
  prefs: []
  type: TYPE_NORMAL
- en: The parts you need for animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using glTF files to load animated models, the required components of the
    file are the scene, nodes, meshes, and skins. This is a small subset to work with;
    these bits and their relationships are highlighted in the following diagram. The
    relationship between these data types can be depicted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: Parts of a glTF file used for skinned animation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.3_B16191.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.3: Parts of a glTF file used for skinned animation'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram omits much of the data that is in each data structure,
    instead focusing only on what you will need to implement skinned animation. In
    the next section, we will explore what parts of a glTF file are not required for
    skinned animation.
  prefs: []
  type: TYPE_NORMAL
- en: The parts you don't need for animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To implement skinned animations, you won't need lights, cameras, materials,
    textures, images, and samplers. In the following section, you will explore how
    to actually read data from glTF files.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Accessing data gets a little tricky, but it''s not too difficult. Mesh, skin,
    and animation objects all contain a glTF accessor. This **accessor** references
    a **buffer view** and the buffer view references a **buffer**. The following diagram
    demonstrates this relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: Accessing data in a glTF file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.4_B16191.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.4: Accessing data in a glTF file'
  prefs: []
  type: TYPE_NORMAL
- en: Given these three separate steps, how can you access the buffer data? In the
    next section, you will learn how data is interpreted from buffers using buffer
    views and finally, accessors.
  prefs: []
  type: TYPE_NORMAL
- en: Buffer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Think of a buffer as an OpenGL buffer. It''s just a large, linear array of
    values. This is analogous to the `Attributes` class you built in [*Chapter 6*](B16191_06_Final_JC_ePub.xhtml#_idTextAnchor104),
    *Building An Abstract Renderer*. The `Set` function of the `Attributes` class
    calls `glBufferData`, which has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A buffer in glTF contains all the information needed to call the `glBufferData`
    function. It contains a size, a void pointer, and optional offsets, which only
    modify the source pointer and the size. Think of a glTF buffer as everything needed
    to fill an OpenGL buffer with data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how buffer views are used in conjunction
    with buffers.
  prefs: []
  type: TYPE_NORMAL
- en: Buffer view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A buffer is just some large chunk of data. There is no context for what is
    stored inside the buffer. This is where the buffer view comes in. The buffer view
    describes what is in a buffer. If a buffer contains the information for `glBufferData`,
    then a buffer view contains some of the parameters to call `glVertexAttribPointer`.
    The `glVertexAttribPointer` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The buffer view contains `type`, which determines whether the view is a vertex
    buffer or an index buffer. This is important since a vertex buffer is bound to
    `GL_ARRAY_BUFFER`, but an index buffer is bound to `GL_ELEMENT_ARRAY_BUFFER`.
    In [*Chapter 6*](B16191_06_Final_JC_ePub.xhtml#_idTextAnchor104), *Building An
    Abstract Renderer*, we built two different classes for these different buffer
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Like the buffer, the buffer view also contains some optional offsets that further
    modify the location of the source pointer and its size. In the following section,
    you will explore how to use accessors, which describe the contents of the buffer
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Accessor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An accessor stores higher-level information. Most importantly, the accessor
    describes the type of data you are dealing with, such as `scalar`, `vec2`, `vec3`,
    or `vec4`. The `size` argument of `glVertexAttribPointer` is determined using
    this data.
  prefs: []
  type: TYPE_NORMAL
- en: The accessor answers questions such as whether the data is normalized and what
    the storage mode of the data is. The accessor also contains additional offset,
    size, and stride information on top of what the buffer and buffer view already
    contain.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will demonstrate how data can be loaded into a linear scalar
    array from a glTF file.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even with the relationship of the accessor, buffer view, and buffer laid out,
    parsing data might still be a bit confusing. To try to clear it up a bit, let''s
    explore how you could convert an accessor to a flat list of floating-point values.
    The following code is intended to be a sample; it will not be used in the rest
    of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code for parsing glTF files can get verbose; in the previous code sample,
    the glTF file was already parsed. Most of the work in loading glTF files is actually
    in parsing the binary or JSON data. In the next section, we will explore how the
    cgltf library can be used to parse glTF files.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring cgltf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we explored what it would take to convert a glTF accessor
    into a linear array of floating-point numbers. The code omitted some of the more
    complicated tasks, such as normalizing the data or dealing with different storage
    types.
  prefs: []
  type: TYPE_NORMAL
- en: The sample code provided also assumed that the data would have already been
    parsed out of the JSON (or binary) format. Writing a JSON parser is out of the
    scope of this book but dealing with glTF files is not.
  prefs: []
  type: TYPE_NORMAL
- en: To help manage some of the complexity of loading glTF files, as well as to avoid
    having to write a JSON parser from scratch, the next section will teach you how
    to use cgltf to load JSON files. Cgltf is a single header glTF loading library;
    you can find it on GitHub at [https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf).
    In the next section, we will start to integrate cgltf into our project.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating cgltf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To integrate cgltf into a project, download the header file from GitHub at
    [https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h](https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h).
    Then, add this header file to the project. Next, add a new `.c` file to the project
    and name it `cgltf.c`. This file should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: CGLTF is now integrated into the project. In this chapter, you will implement
    code that parses a glTF file. How to load the contents of the glTF file into runtime
    data will be covered in later chapters as the code for that runtime data is written.
    In the following section, we will learn how to implement the glTF parsing code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a glTF loader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will explore how to load a glTF file using cgltf. The code
    to load the file into a runtime data structure, `cgltf_data`, is simple. In future
    chapters, you will learn how to parse the contents of this `cgltf_data` struct.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load a file, you need to create an instance of `cgltf_options`. You won''t
    need to set any option flags; just instantiate the `cgltf_options` struct with
    `0` for all member values. Next, declare a `cgltf_data` pointer. The address this
    pointer will be passed to is `cgltf_parse_file`. After `cgltf_parse_file` has
    filled in the `cgltf_data` structure, you are ready to parse the contents of the
    file. To free the `cgltf_data` structure later, call `cgltf_free`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `GLTFLoader.h` that includes `cgltf.h`. Add function declarations
    for the `LoadGLTFFile` and `FreeGLTFFile` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file, `GLTFLoader.cpp`. This function takes a path and returns
    a `cgltf_data` pointer. Internally, the function calls `cgltf_parse_file` to load
    the glTF data from the file. `cgltf_load_buffers` is used to load any external
    buffer data. Finally, `cgltf_validate` makes sure that the glTF file that was
    just loaded was valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `FreeGLTFFile` function in `GLTFLoader.cpp` as well. This function
    is simple; it needs to call `cgltf_free` if the input pointer wasn''t `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In later chapters, you will expand on the glTF `Loader` functions by introducing
    functions to load meshes, poses, and animations. In the next section, you will
    explore how glTF files can be exported from Blender3D.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the sample assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sample files you will be using throughout this book are CC0, public-domain-licensed
    assets from Quaternius. You can find additional assets in a similar style at [http://quaternius.com/assets.html](http://quaternius.com/assets.html).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, later chapters also include screenshots of the open, three-dimensional
    Mannequin from GDQuest, available under an MIT license at [https://github.com/GDQuest/godot-3d-mannequin](https://github.com/GDQuest/godot-3d-mannequin).
  prefs: []
  type: TYPE_NORMAL
- en: Some assets already come in a glTF format, but some might be in `.blend`, `.fbx`,
    or some other format. When this happens, it's easy to import the model into Blender
    and export a glTF file. The next section will guide you through exporting glTF
    files from Blender.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting from Blender
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blender is a free, three-dimensional content creation tool. You can download
    Blender from [https://www.blender.org/](https://www.blender.org/). The following
    instructions are written for Blender 2.8 but they should work the same in newer
    versions as well.
  prefs: []
  type: TYPE_NORMAL
- en: If the model you are importing is already a `.blend` file, just double-click
    it and it should load up in Blender.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the model is in a different format, such as `.DAE` or `.FBX`, you will need
    to import it. To do so, open Blender and you should see the default scene load
    up. This default scene has a cube, a light, and a camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: A default Blender3D scene'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.5_B16191.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.5: A default Blender3D scene'
  prefs: []
  type: TYPE_NORMAL
- en: Select the cube by left-clicking on it, then hover over the three-dimensional
    viewport and hit the *Delete* key to delete the cube. Left-click on the camera
    to select it and delete it by hitting the *Delete* key. Do the same for the light.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have an empty scene. From the **File** menu, select **File**|**Import**
    and select the appropriate model format to import. Find your file and double-click
    it to import it. Once a model is imported, select **File**|**Export glTF 2.0**.
    Set the export format to either glTF (text file) or glb (binary file).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what glTF files are, what parts of the glTF format
    are useful for skinned animation, and how to use cglTF to load a glTF file. Don't
    worry if the format is still a bit confusing; it will make more sense as you start
    to parse various bits of data from cgltf files. Using cgltf will let you focus
    on converting glTF data into useful runtime structures without having to worry
    about manually parsing JSON files. In the next chapter, you will start implementing
    the building blocks of animation by implementing curves, frames, and tracks.
  prefs: []
  type: TYPE_NORMAL
