- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In theory, nothing works, but everyone knows why. In practice, everything
    works but no one knows why. Here, we combine theory and practice; nothing works
    and no one knows why!*'
  prefs: []
  type: TYPE_NORMAL
- en: Learning computer science must always be a combination of theory and practice;
    you need to know what you're doing (theory), but you also need to know how to
    do it (practice). My experience of learning how to create web applications was
    that few teachers found a sweet spot for this balance; either I read pages and
    pages about inheritance, virtual environments, and test-driven development, wondering
    how it all applied to me, or I installed a bunch of tools and frameworks and libraries
    and watched the magic happen with no idea how it worked.
  prefs: []
  type: TYPE_NORMAL
- en: What follows is, I hope, a good balance. From the first chapter, you'll have
    a Flask web application running that the whole world can visit, which is quite
    practical even if it doesn't do anything but greet visitors with "Hello, World!".
    In the chapters that follow, we'll walk through building three interesting and
    useful projects together. In general, we'll build things ourselves wherever possible.
    While it's not good to reinvent the wheel, it is good to be exposed to a problem
    before you're exposed to the solution. Learning a CSS framework before you write
    a single line of CSS leaves you in a confused state, in which you would wonder,
    "But why do I actually need this?", and the same goes for many other frameworks
    and tools. So, we'll start from scratch, take a look at why it's difficult, and
    then introduce tools to make our lives easier. I think this is the ideal balance
    between theory and practice.
  prefs: []
  type: TYPE_NORMAL
- en: When I told people I was writing a book on Flask, the common response was "Why?
    There are already so many books and tutorials on Flask." This is a valid question,
    and the answer to it provides a nice outline for what to expect from this book.
    *Flask By Example* is different from other Flask educational material and here's
    why.
  prefs: []
  type: TYPE_NORMAL
- en: '**We won''t leave you stranded**'
  prefs: []
  type: TYPE_NORMAL
- en: Many Flask tutorials show you how to develop a Flask application and run it
    locally on your own machine, and then they end. This is great as a first step,
    but if you're interested in building web applications, you probably want them
    to be accessible on the Web so that your friends, family, coworkers, and customers
    can admire your handiwork without popping by your house. From our first project
    onward, our applications will run on a Virtual Private Server (VPS) and be accessible
    to the world.
  prefs: []
  type: TYPE_NORMAL
- en: '**We won''t build a blogging application**'
  prefs: []
  type: TYPE_NORMAL
- en: If you've read any web application development tutorials, you must have noticed
    that nearly every one of them is about how to build a blog using x and y. I'm
    pretty tired of the blog example (actually, I never want to see anyone show me
    how to build a blog again). Instead, you'll create some interesting, original,
    and possibly even useful projects while learning how to develop web applications
    with Flask.
  prefs: []
  type: TYPE_NORMAL
- en: '**We will focus on security**'
  prefs: []
  type: TYPE_NORMAL
- en: Cybercrime has become something of a buzzword of late. Arguably, the reason
    that we read about major web applications being hacked on an almost daily basis
    is because so many developers do not know about SQL Injection, CSRF, XSS, how
    to store passwords, and so many other things that should really be considered
    basic knowledge. As we develop the three projects in this book, we'll take the
    time to explain some core security concepts in detail and show you how to harden
    our applications against potentially malicious attackers.
  prefs: []
  type: TYPE_NORMAL
- en: '**We will give in-depth explanations**'
  prefs: []
  type: TYPE_NORMAL
- en: We won't just give you some code and tell you to run it. Wherever possible,
    we will explain what we're doing, why we're doing it, and how we're doing it.
    This means that you'll be able to take ideas from all of the projects, combine
    them with your own ideas, and get started with building original content right
    after working through this book.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I hope that this book will be of use to you, no matter whether you
    are beginning to cut your teeth in the world of computer science and programming
    or have a computer science degree from a famous university and have compiler theory
    pouring out of your ears but now want to build something practical and fun. May
    you have as much fun working through the projects as I did while putting them
    together!
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Hello, World!"), *Hello, World!*, teaches
    you to set up our development environment and a web server and write our first
    Flask application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Getting Started with Our Headlines Project"),
    *Getting Started with Our Headlines Project*, shows you how to run Python code
    when the user visits a URL and how to return basic data to the user. We will also
    look at fetching the latest headlines automatically using RSS feeds.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Using Templates in Our Headlines Project"),
    *Using Templates in Our Headlines Project*, introduces Jinja templates and integrates
    them into our Headlines project. We will show how to serve dynamic HTML content
    by passing data from our Python code to template files.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. User Input for Our Headlines Project"), *User
    Input for Our Headlines Project*, shows how to get input from our users over the
    Internet and use this input to customize what we will show our users. We will
    look at how to access currenct weather information through JSON APIs and include
    this information in our Headlines project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Improving the User Experience of Our Headlines
    Project"), *Improving the User Experience of Our Headlines Project*, instructs
    you to add cookies to our Headlines project so that our application can remember
    our users'' choices. We will also style our application by adding some basic CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Building an Interactive Crime Map"), *Building
    an Interactive Crime Map*, introduces our new project, which is a crime map. We
    will introduce relational databases, install MySQL on our server, and look at
    how to interact with our database from our Flask application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Adding Google Maps to Our Crime Map Project"),
    *Adding Google Maps to our Crime Map Project*, instructs you on adding a Google
    Maps widget and shows how to add and remove markers from the map based on our
    database. We will add an HTML form with various inputs for users to submit new
    crimes and also display the existing crimes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Validating User Input in Our Crime Map Project"),
    *Validating User Input in Our Crime Map Project,* polishes off our second project
    by making sure that users can''t break it accidentally or through maliciously
    crafted input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Building a Waiter Caller App"), *Building
    a Waiter Caller App*, introduces our final project, which is an application to
    call a waiter to the table at a restaurant. We will introduce Bootstrap and set
    up a basic User Account Control system that uses Bootstrap as the frontend.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Template Inheritance and WTForms in Waiter
    Caller Project"), *Template Inheritance and WTForms in Waiter Caller Project*,
    introduces Jinja''s template inheritance features so that we can add similar pages
    without duplicating code. We will use the WTForms library to make our web forms
    easier to build and validate.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Using MongoDB with Our Waiter Caller Project"),
    *Using MongoDB with Our Waiter Caller Project*, discusses how to install and configure
    MongoDB on our server and links it to our Waiter Caller project. We will finish
    off our final project by adding indices to our database and a favicon to our application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](apa.html "Appendix A. A Sneak Peek into the Future"), *A Sneak Peek
    into the Future*, outlines some important topics and technologies that we weren''t
    able to cover in detail and gives pointers on where more can be learned about
    these.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the examples we will use assume that you use the Ubuntu operating system
    on your development machine and that you have access to a server that runs Ubuntu
    Server (we will discuss how to set the latter up in the first chapter). If you
    strongly prefer another operating system and already have a Python environment
    set up (including the Python package manger pip), then the examples will be easily
    translatable.
  prefs: []
  type: TYPE_NORMAL
- en: All other software and libraries used in the book are freely available, and
    we will demonstrate how to install and configure them in detail as the need arises.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you looked at PHP and hated the clunky bloated syntax? Or, have you looked
    at .Net and wished that it was more open and flexible? Have you tried your hand
    at GUI libraries in Python and found them hard to use? If your answer to any one
    of these questions is yes, then this is just the book for you.
  prefs: []
  type: TYPE_NORMAL
- en: It is also intended for people who know the basics of Python and want to learn
    how to use it to build powerful solutions with a web frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
