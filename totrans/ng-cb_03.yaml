- en: '*Chapter 3*: The Magic of Dependency Injection in Angular'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is all about the magic of **dependency injection** (**DI**) in
    Angular. Here, you'll learn some detailed information about the concept of DI
    in Angular. DI is the process that Angular uses to inject different dependencies
    into components, directives, and services. You'll work with several examples using
    services and providers to get some hands-on experience that you can utilize in
    your later Angular projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an injector with a DI token
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using `providedIn`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using `forRoot()`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing different services to the app with the same Aliased class provider
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value providers in Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the recipes in this chapter, ensure you have **Git** and **NodeJS** installed
    on your machine. You also need to have the `@angular/cli` package installed, which
    you can do so using `npm install -g @angular/cli` from your Terminal. The code
    for this chapter can be found at [https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter03](https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter03).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an injector with a DI token
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to create a basic DI token for a regular TypeScript
    class to be used as an Angular service. We have a service (`UserService`) in our
    application, which currently uses the `Greeter` class to create a user with a
    `greet` method. Since Angular is all about DI and services, we'll implement a
    way in which to use this regular TypeScript class, named `Greeter`, as an Angular
    service. We'll use `InjectionToken` to create a DI token and then the `@Inject`
    decorator to enable us to use the class in our service.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter03/start_here/ng-di-token`,
    which is inside the cloned repository. Perform the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Terminal and run `npm install` to install the dependencies of the project.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab; you should see something similar
    to the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The ng-di-token app running on http://localhost:4200'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.1_B15150.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The ng-di-token app running on http://localhost:4200
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, we can move on to the steps for the recipe.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app we have right now shows a greeting message to a random user that has
    been retrieved from our `UserService`. And `UserService` uses the `Greeter` class
    as it is. Instead of using it as a class, we''ll use it as an Angular service
    using DI. We''ll start by creating an `InjectionToken` for our `Greeter` class,
    which is a regular TypeScript class, and then we''ll inject it into our services.
    Perform these steps to follow along:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create an `InjectionToken` in the `greeter.class.ts` file, called `''Greeter''`,
    using the `InjectionToken` class from the `@angular/core` package. Additionally,
    we''ll export this token from the file:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we''ll use the `Inject` decorator from the `@angular/core` package and
    the `GREETER` token from `greeter.class.ts` so that we can use them in the next
    step:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll now inject the `Greeter` class using the `@Inject` decorator in `constructor`
    of `UserService` as an Angular service.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that we''ll be using `typeof Greeter` instead of just `Greeter` because
    we need to use the constructor later on:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we can replace the usage of `new Greeter(user)` inside the `getUser`
    method by using the injected service, as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we know the recipe, let's take a closer look at how it works.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular doesn''t recognize regular TypeScript classes as injectables in services.
    However, we can create our own injection tokens and use the `@Inject` decorator
    to inject them whenever possible. Angular recognizes our token behind the scenes
    and finds its corresponding definition, which is usually in the form of a factory
    function. Notice that we''re using `providedIn: ''root''` within the token definition.
    This means that there will be only one instance of the class in the entire application.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency Injection in Angular ([https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InjectionToken documentation ([https://angular.io/api/core/InjectionToken](https://angular.io/api/core/InjectionToken))
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional dependencies
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optional dependencies in Angular are really powerful when you use or configure
    a dependency that may or may not exist or that has been provided within an Angular
    application. In this recipe, we'll learn how to use the `@Optional` decorator
    to configure optional dependencies in our components/services. We'll work with
    `LoggerService` and ensure our components do not break if it has not already been
    provided.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，可选依赖项在您使用或配置可能存在或已在Angular应用程序中提供的依赖项时非常强大。在本示例中，我们将学习如何使用`@Optional`装饰器来配置组件/服务中的可选依赖项。我们将使用`LoggerService`，并确保我们的组件在未提供时不会中断。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The project for this recipe resides in `chapter03/start_here/ng-optional-dependencies`.
    Perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例项目位于`chapter03/start_here/ng-optional-dependencies`中。执行以下步骤：
- en: Open the project in Visual Studio Code.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中打开项目。
- en: Open the Terminal, and run `npm install` to install the dependencies of the
    project.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，并运行`npm install`来安装项目的依赖项。
- en: Once done, run `ng serve -o`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，运行`ng serve -o`。
- en: 'This should open the app in a new browser tab. You should see something similar
    to the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在新的浏览器选项卡中打开应用程序。您应该看到类似以下截图的内容：
- en: '![Figure 3.2 – The ng-optional-dependencies app running on http://localhost:4200'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 - ng-optional-dependencies应用程序在http://localhost:4200上运行'
- en: '](image/Figure_3.2_B15150.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.2_B15150.jpg)'
- en: Figure 3.2 – The ng-optional-dependencies app running on http://localhost:4200
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - ng-optional-dependencies应用程序在http://localhost:4200上运行
- en: Now that we have the app running, we can move on to the steps for the recipe.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序正在运行，我们可以继续进行该示例的步骤。
- en: How to do it
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'We''ll start with an app that has a `LoggerService` with `providedIn: ''root''`
    set to its injectable configuration. We''ll see what happens when we don''t provide
    this service anywhere. Then, we''ll identify and fix the issues using the `@Optional`
    decorator. Follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将从一个具有`providedIn: ''root''`设置为其可注入配置的`LoggerService`的应用程序开始。我们将看到当我们没有在任何地方提供此服务时会发生什么。然后，我们将使用`@Optional`装饰器来识别和解决问题。按照以下步骤进行操作：'
- en: First, let's run the app and change the version in the input.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们运行应用程序并更改输入中的版本。
- en: 'This will result in the logs being saved in `localStorage` via `LoggerService`.
    Open **Chrome Dev Tools**, navigate to **Application**, select **Local Storage**,
    and then click on `localhost:4200`. You will see the `key log_log` with log values,
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致日志通过`LoggerService`保存在`localStorage`中。打开**Chrome Dev Tools**，导航到**Application**，选择**Local
    Storage**，然后点击`localhost:4200`。您将看到具有日志值的`key log_log`，如下所示：
- en: '![Figure 3.3 – The logs are saved in localStorage for http://localhost:4200'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 - 日志保存在http://localhost:4200的localStorage中'
- en: '](image/Figure_3.3_B15150.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.3_B15150.jpg)'
- en: Figure 3.3 – The logs are saved in localStorage for http://localhost:4200
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 - 日志保存在http://localhost:4200的localStorage中
- en: 'Now, let''s try to remove the configuration provided in the `@Injectable` decorator
    for `LoggerService`, which is highlighted in the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试删除`@Injectable`装饰器中提供的`LoggerService`的配置，如下面的代码中所突出显示的那样：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will result in Angular not being able to recognize it and throwing an
    error to `VcLogsComponent`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致Angular无法识别它，并向`VcLogsComponent`抛出错误：
- en: '![Figure 3.4 – An error detailing that Angular doesn''t recognize LoggerService'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 - 详细说明了Angular无法识别LoggerService的错误'
- en: '](image/Figure_3.4_B15150.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.4_B15150.jpg)'
- en: Figure 3.4 – An error detailing that Angular doesn't recognize LoggerService
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - 详细说明了Angular无法识别LoggerService的错误
- en: 'We can now use the `@Optional` decorator to mark the dependency as optional.
    Let''s import it from the `@angular/core` package and use the decorator in the
    constructor of `VcLogsComponent` in the `vc-logs.component.ts` file, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Great! Now if you refresh the app and view the console, there shouldn''t be
    any errors. However, if you change the version and hit the **Submit** button,
    you''ll see that it throws the following error because the component is unable
    to retrieve `LoggerService` as a dependency:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – An error detailing that this.logger is essentially null at the
    moment'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.5_B15150.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – An error detailing that this.logger is essentially null at the
    moment
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we can either decide not to log anything at all, or we can
    fall back to the `console.*` methods if `LoggerService` is not provided. The code
    to fall back to the `console.*` methods should appear as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, if you update the version and hit **Submit**, you should see the logs
    on the console, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The logs being printed on the console as a fallback to LoggerService
    not being provided'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.6_B15150.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – The logs being printed on the console as a fallback to LoggerService
    not being provided
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Great! We've finished the recipe and everything looks great. Please refer to
    the next section to understand how it works.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `@Optional` decorator is a special parameter from the `@angular/core` package,
    which allows you to mark a parameter for a dependency as optional. Behind the
    scenes, Angular will provide the value as `null` when the dependency doesn't exist
    or is not provided to the app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optional Dependencies in Angular ([https://angular.io/guide/dependency-injection#optional-dependencies](https://angular.io/guide/dependency-injection#optional-dependencies))
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical Injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using providedIn
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn several tips on how to ensure your Angular service
    is being used as a singleton. This means that there will only be one instance
    of your service in the entire application. Here, we''ll use a couple of techniques,
    including the `providedIn: ''root''` statement and making sure we only provide
    the service once in the entire app by using the `@Optional()` and `@SkipSelf()`
    decorators.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in the `chapter03/start_here/ng-singleton-service`
    path. Perform the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Terminal, and run `npm install` to install the dependencies of the
    project.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab. You should see something similar
    to the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The ng-singleton-service app running on http://localhost:4200'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.7_B15150.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – The ng-singleton-service app running on http://localhost:4200
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your app running, let's see move ahead and look at the steps
    of this recipe.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The problem with the app is that if you add or remove any notifications, the
    count on the bell icon in the header does not change. That''s due to us having
    multiple instances of `NotificationsService`. Please refer to the following steps
    to ensure we only have a single instance of the service in the app:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, as Angular developers, we already know that we can use `providedIn:
    ''root''` for a service to tell Angular that it is only provided in the root module,
    and it should only have one instance in the entire app. So, let''s go to `notifications.service.ts`
    and pass `providedIn: ''root''` in the `@Injectable` decorator parameters, as
    follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Great! Now even if you refresh and try adding or removing notifications, you'll
    still see that the count in the header doesn't change. "But why is this, Ahsan?"
    Well, I'm glad you asked. That's because we're still providing the service in
    `AppModule` as well as in `VersioningModule`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s remove `NotificationsService` from the `providers` array in `app.module.ts`,
    as highlighted in the following code block:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we''ll remove `NotificationsService` from `versioning.module.ts`, as highlighted
    in the following code block:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Awesome! Now you should be able to see the count in the header change according
    to whether you add/remove notifications. However, what happens if someone still
    provides it in another lazily loaded module by mistake?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put `NotificationsService` back in the `versioning.module.ts` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Boom! We don't have any errors on the console or during compile time. However,
    we do have the issue of the count not updating in the header. So, how do we alert
    the developers if they make such a mistake? Please refer to the next step.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to alert the developer about potential duplicate providers, use the
    `@SkipSelf` decorator from the `@angular/core` package in our `NotificationsService`,
    and throw an error to notify and modify `NotificationsService`, as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提醒开发人员可能存在重复提供者，我们在`NotificationsService`中使用`@angular/core`包中的`@SkipSelf`装饰器，并抛出错误来通知和修改`NotificationsService`，如下所示：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the previous step now complete, you''ll notice that we have a problem.
    That is we have failed to provide `NotificationsService` to our app at all. You
    should see this in the console:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前面的步骤已经完成，你会注意到我们有一个问题。那就是我们未能为我们的应用程序提供`NotificationsService`。你应该在控制台中看到这个：
- en: '![Figure 3.8 – An error detailing that NotificationsService can''t be injected
    into NotificationsService'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8 - 详细说明NotificationsService无法注入到NotificationsService中的错误'
- en: '](image/Figure_3.8_B15150.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.8_B15150.jpg)'
- en: Figure 3.8 – An error detailing that NotificationsService can't be injected
    into NotificationsService
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 - 详细说明NotificationsService无法注入到NotificationsService中
- en: The reason for this is that `NotificationsService` is now a dependency of `NotificationsService`
    itself. This can't work as it has not already been resolved by Angular. To fix
    this, we'll also use the `@Optional()` decorator in the next step.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是`NotificationsService`现在是`NotificationsService`本身的一个依赖项。这是行不通的，因为它还没有被Angular解析。为了解决这个问题，我们在下一步中也将使用`@Optional()`装饰器。
- en: 'All right, now we''ll use the `@Optional()` decorator in `notifications.service.ts`,
    which is in the constructor for the dependency alongside the `@SkipSelf` decorator.
    The code should appear as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好了，现在我们将在`notifications.service.ts`中的构造函数中，与`@SkipSelf`装饰器一起使用`@Optional()`装饰器。代码应该如下所示：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We have now fixed the `NotificationsService -> NotificationsService` dependency
    issue. You should see the proper error for the `NotificationsService` being provided
    multiple times in the console, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经解决了`NotificationsService -> NotificationsService`的依赖问题。你应该在控制台中看到`NotificationsService`被多次提供的正确错误，如下所示：
- en: '![Figure 3.9 – An error detailing that NotificationsService is already provided
    in the app'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9 - 详细说明NotificationsService已经在应用程序中提供'
- en: '](image/Figure_3.9_B15150.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.9_B15150.jpg)'
- en: Figure 3.9 – An error detailing that NotificationsService is already provided
    in the app
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 - 详细说明NotificationsService已经在应用程序中提供
- en: 'Now, we''ll safely remove the provided `NotificationsService` from the `providers`
    array in the `versioning.module.ts` file and check whether the app is working
    correctly:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将安全地从`versioning.module.ts`文件的`providers`数组中移除提供的`NotificationsService`，并检查应用程序是否正常工作：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Bam! We now have a singleton service using the `providedIn` strategy. In the
    next section, let's discuss how it works.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！我们现在使用了`providedIn`策略来创建一个单例服务。在下一节中，让我们讨论它是如何工作的。
- en: How it works
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: 'Whenever we try to inject a service somewhere, by default, it tries to find
    a service inside the associated module of where you''re injecting the service.
    When we use `providedIn: ''root''` to declare a service, whenever the service
    is injected anywhere in the app, Angular knows that it simply has to find the
    service definition in the root module and not in the feature modules or anywhere
    else.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '每当我们尝试在某个地方注入一个服务时，默认情况下，它会尝试在注入服务的相关模块中查找服务。当我们使用`providedIn: ''root''`来声明一个服务时，无论在应用程序的任何地方注入服务，Angular都知道它只需在根模块中找到服务定义，而不是在功能模块或其他任何地方。'
- en: 'However, you have to make sure that the service is only provided once in the
    entire application. If you provide it in multiple modules, then even with `providedIn:
    ''root''`, you''ll have multiple instances of the service. To avoid providing
    a service in multiple modules or at multiple places in the app, we can use the
    `@SkipSelf()` decorator with the `@Optional()` decorator in the services'' constructor
    to check whether the service has already been provided in the app.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hierarchical Dependency Injection in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a singleton service using forRoot()
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use `ModuleWithProviders` and the `forRoot()`
    statement to ensure your Angular service is being used as a singleton in the entire
    app. We'll start with an app that has multiple instances of `NotificationsService`,
    and we'll implement the necessary code to make sure we end up with a single instance
    of the app.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in the `chapter03/start_here/ng-singleton-service-forroot`
    path. Perform the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Terminal, and run `npm install` to install the dependencies of the
    project.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab. The app should appear as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The ng-singleton-service-forroot app running on http://localhost:4200'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.10_B15150.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – The ng-singleton-service-forroot app running on http://localhost:4200
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, in the next section, we can move on to the
    steps for the recipe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to make sure we only have a singleton service in the app with the
    `forRoot()` method, you need to understand how `ModuleWithProviders` and the `static
    forRoot()` method are created and implemented. Perform the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll make sure that the service has its own module. In many Angular
    applications, you''ll probably see `CoreModule` where the services are provided
    (given we''re not using the `providedIn: ''root''` syntax for some reason). To
    begin, we''ll create a module, named `ServicesModule`, using the following command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have created the module, let''s create a static method inside the
    `services.module.ts` file. We''ll name the method `forRoot` and return a `ModuleWithProviders`
    object that contains the `NotificationsService` provided in the `providers` array,
    as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了模块，让我们在`services.module.ts`文件中创建一个静态方法。我们将命名该方法为`forRoot`，并返回一个包含在`providers`数组中提供的`NotificationsService`的`ModuleWithProviders`对象，如下所示：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now we'll remove the `NotificationsService` from the `app.module.ts` file's
    `imports` array and include `ServicesModule` in the `app.module.ts` file; in particular,
    we'll add in the `imports` array using the `forRoot()` method, as highlighted
    in the following code block.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将从`app.module.ts`文件的`imports`数组中删除`NotificationsService`，并在`app.module.ts`文件中包含`ServicesModule`；特别是，我们将在`imports`数组中使用`forRoot()`方法添加，如下面的代码块中所示。
- en: 'This is because it injects `ServicesModule` with the providers in `AppModule`,
    for instance, with the `NotificationsService` being provided as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它在`AppModule`中用`ServicesModule`注入了提供者，例如，`NotificationsService`的提供方式如下：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You'll notice that when adding/removing notifications, the count in the header
    still doesn't change. This is because we're still providing the `NotificationsService`
    in the `versioning.module.ts` file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，当添加/删除通知时，标题中的计数仍然不会改变。这是因为我们仍然在`versioning.module.ts`文件中提供了`NotificationsService`。
- en: 'We''ll remove the `NotificationsService` from the `providers` array in the
    `versioning.module.ts` file, as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从`versioning.module.ts`文件的`providers`数组中删除`NotificationsService`，如下所示：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: All right, so far, you've done a great job. Now that we have finished the recipe,
    in the next section, let's discuss how it works.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，到目前为止，你做得很好。现在我们已经完成了这个教程，在下一节中，让我们讨论它是如何工作的。
- en: How it works
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: '`ModuleWithProviders` is a wrapper around `NgModule`, which is associated with
    the `providers` array that is used in `NgModule`. It allows you to declare `NgModule`
    with providers, so the module where it is being imported gets the providers as
    well. We created a `forRoot()` method in our `ServicesModule` class that returns
    `ModuleWithProviders` containing our provided `NotificationsService`. This allows
    us to provide `NotificationsService` only once in the entire app, which results
    in only one instance of the service in the app.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModuleWithProviders`是`NgModule`的包装器，与`NgModule`中使用的`providers`数组相关联。它允许您声明带有提供者的`NgModule`，因此导入它的模块也会得到这些提供者。我们在`ServicesModule`类中创建了一个`forRoot()`方法，它返回包含我们提供的`NotificationsService`的`ModuleWithProviders`。这使我们能够在整个应用程序中只提供一次`NotificationsService`，这导致应用程序中只有一个服务实例。'
- en: See also
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The `ModuleWithProviders` Angular documentation (h[ttps://angular.io/api/core/ModuleWithProviders](https://angular.io/api/core/ModuleWithProviders)).
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ModuleWithProviders` Angular文档（h[ttps://angular.io/api/core/ModuleWithProviders](https://angular.io/api/core/ModuleWithProviders)）。'
- en: The `ModuleWithProviders` migration documentation (h[ttps://angular.io/guide/migration-module-with-providers).](https://angular.io/guide/migration-module-with-providers)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ModuleWithProviders`迁移文档（h[ttps://angular.io/guide/migration-module-with-providers)。](https://angular.io/guide/migration-module-with-providers)'
- en: Providing different services to the app with the same Aliased class provider
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相同的别名类提供者为应用程序提供不同的服务
- en: In this recipe, you'll learn how to provide two different services to the app
    using `Aliased` class providers. This is extremely helpful in complex applications
    where you need to narrow down the implementation of the base class for some components/modules.
    Additionally, aliasing is used in component/service unit tests to mock the dependent
    service's actual implementation so that we don't rely on it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，您将学习如何使用`Aliased`类提供者为应用程序提供两种不同的服务。这在复杂的应用程序中非常有帮助，其中您需要缩小一些组件/模块的基类实现。此外，别名在组件/服务单元测试中用于模拟依赖服务的实际实现，以便我们不依赖于它。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in the `chapter03/start_here/ng-aliased-class-providers`
    path, which is inside the cloned repository. Perform the following steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Terminal and run `npm install` to install the dependencies of the project.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the app in a new browser tab.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Login as Admin** button. You should see something similar to
    the following screenshot:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The ng-aliased-class-providers app running on http://localhost:4200'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.11_B15150.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – The ng-aliased-class-providers app running on http://localhost:4200
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, let's move to the next section to follow the
    steps for the recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a shared component named `BucketComponent`, which is being used in
    both the admin and employee modules. `BucketComponent` uses `BucketService` behind
    the scenes to add/remove items from and to a bucket. For the employee, we''ll
    restrict the the ability to remove an item by providing an `aliased` class provider
    and a different `EmployeeBucketService`. This is so that we can override the remove
    item functionality. Perform the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by creating `EmployeeBucketService` within the `employee` folder,
    as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we''ll extend `EmployeeBucketService` from `BucketService` so that we
    get all the goodness of `BucketService`. Let''s modify the code as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will now override the `removeItem()` method to simply display a simple `alert()`
    mentioning that the employees can''t remove items from the bucket. Your code should
    appear as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As a final step, we need to provide the `aliased` class provider to the `employee.module.ts`
    file, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you now log in as an employee in the app and try to remove an item, you'll
    see an alert pop up, which says **Employees cannot delete items**.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we inject a service into a component, Angular tries to find that component
    from the injected place by moving up the hierarchy of components and modules.
    Our `BucketService` is provided in `''root''` using the `providedIn: ''root''`
    syntax. Therefore, it resides at the top of the hierarchy. However, since, in
    this recipe, we use an `aliased` class provider in `EmployeeModule`, when Angular
    searches for `BucketService`, it quickly finds it inside `EmployeeModule` and
    stops there before it even reaches `''root''` to get the actual `BucketService`.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency Injection in Angular ([https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical Injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value providers in Angular
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use value providers in Angular to provide
    constants and config values to your app. We'll start with the same example from
    the previous recipe, that is, `EmployeeModule` and `AdminModule` using the shared
    component named `BucketComponent`. We will restrict the employee from deleting
    items from the bucket by using a value provider, so the employees won't even see
    the **delete** button.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in the `chapter03/start_here/ng-value-providers`
    path, which is inside the cloned repository. Perform the following steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Terminal, and run `npm install` to install the dependencies of the
    project.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o` .
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the app in a new browser tab.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Login as Admin** button. You should see something similar to
    the following screenshot:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The ng-value-providers app running on http://localhost:4200'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.12_B15150.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – The ng-value-providers app running on http://localhost:4200
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: We have a shared component, named `BucketComponent`, that is being used in both
    the admin and employee modules. For the employee, we'll restrict the ability to
    remove an item by providing a value provider in `EmployeeModule`. This is so that
    we can hide the **delete** button based on its value.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll start by creating the value provider with `InjectionToken` within
    a new file, named `app-config.ts`, inside the `app/constants` folder. The code
    should appear as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Before we can actually use this `AppConfig` constant in our `BucketComponent`,
    we need to register it to the `AppModule` so that when we inject this in the `BucketComponent`,
    the value of the provider is resolved.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the provider to the `app.module.ts` file, as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now the app knows about the `AppConfig` constants. The next step is to use this
    constant in `BucketComponent`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use the `@Inject()` decorator to inject it inside the `BucketComponent`
    class, in the `shared/components/bucket/bucket.component.ts` file, as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Great! The constant has been injected. Now, if you refresh the app, you shouldn't
    get any errors. The next step is to use the `canDeleteItems` property from `config`
    in `BucketComponent` to show/hide the **delete** button.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first add the property to the `shared/components/bucket/bucket.component.ts`
    file and assign it to the `ngOnInit()` method, as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we''ll add an `*ngIf` directive in the `shared/components/bucket/ bucket.component.html`
    file to only show the **delete** button if the value of `canDeleteItems` is `true`:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can test whether everything works by setting the `AppConfig` constant's
    `canDeleteItems` property to `false`. Note that the **delete** button is now hidden
    for both the admin and employee. Once tested, set the value of `canDeleteItems`
    back to `true` again.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Now we have everything set up. Let's add a new constant so that we can hide
    the **delete** button for the employee only.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a folder, named `constants`, inside the `employee` folder. Then,
    we''ll create a new file underneath the `employee/constants` path, called `employee-config.ts`,
    and we will add the following code to it:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we''ll provide this `EmployeeConfig` constant to the `EmployeeModule`
    for the same `APP_CONFIG` injection token. The code in the `employee.module.ts`
    file should appear as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And we're done! The recipe is now complete. You can see that the **delete**
    button is visible to the admin but hidden for the employee. It's all thanks to
    the magic of value providers.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we inject a token into a component, Angular tries to find the resolved
    value of the token from the injected place by moving up the hierarchy of components
    and modules. We provided `EmployeeConfig` as `APP_CONFIG` in `EmployeeModule`.
    When Angular tries to resolve its value for `BucketComponent`, it finds it early
    at `EmployeeModule` as `EmployeeConfig`. Therefore, Angular stops right there
    and doesn't reach `AppComponent`. Notice that the value for `APP_CONFIG` in `AppComponent`
    is the `AppConfig` constant.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency Injection in Angular )[https://angular.io/guide/dependency-injection](https://angular.io/guide/dependency-injection))
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hierarchical Injectors in Angular ([https://angular.io/guide/hierarchical-dependency-injection](https://angular.io/guide/hierarchical-dependency-injection))
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
