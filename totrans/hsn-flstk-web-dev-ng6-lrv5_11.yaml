- en: Building and Deploying Angular Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, you learned how to install, customize, and extend a Bootstrap
    CSS framework; how to use `NgBootstrap` components; and how to connect Angular
    services with components and UI interfaces. Now, let''s look at another key point
    in Angular applications: tests.'
  prefs: []
  type: TYPE_NORMAL
- en: Tests are a great way to check your application code to find issues. In this
    chapter, you will learn how to test Angular applications, how to configure application
    linters (for SCSS and TSLint files) to keep code consistency, and how to create
    `npm` build scripts. In addition, you will learn how to create a Docker image
    for a frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting application linters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Angular tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing unit and e2e tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to prepare our baseline code, a process very similar to that
    of previous chapters. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all of the content from the `chapter-10` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder `chapter-11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `storage-db` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `docker-compose.yml` and replace the contents with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container_name: chapter-11-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-11-webserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-11-php-fpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE=chapter-11`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER=chapter-11`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the `.env` file with the following connection string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the changes that we made to the Git source control. Open Terminal window
    and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Setting application linters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of us want a clean and consistent code base. Independent of the programming
    language adopted, it is very common to use linters for JavaScript and other languages.
    But, when we discuss CSS or SCSS/LESS, this practice is not very common; we rarely
    use a linter for our style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: A **linter** is a tool that analyzes code and reports errors. We set the rules,
    and when a piece of code doesn't pass the rules defined in the linter's configuration,
    the linter reports an error. This feature is very useful when a team is growing
    and needs to keep the code base consistent.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have strict rules for coding style, code can become a mess very
    quickly. Even if you work alone, it is always a good practice to keep your code
    consistent.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you will learn how to apply a linter for SCSS and
    TypeScript files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding stylelint for SCSS files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using `stylelint`, a mighty, modern style sheet linter, supporting
    CSS, LESS, and SASS. `stylelint` has a lot of rules, available by default, and
    it is very easy to extend with our own rules, it's totally un-opinionated. Another
    advantage is that all rules are disabled by default, and we only enable the ones
    that we want to use. Let's see it in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal window inside of the `./Client` folder, and type the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding commands are very clear, right? We are installing the default
    configuration standard plugin, along with the SCSS plugin.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about `stylelint` in the official documentation at [https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint).
  prefs: []
  type: TYPE_NORMAL
- en: Adding new scripts to the package.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `package.json` file at the root of the `./Client` folder and add the
    following code, right after the `lint` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the `Stylelint` from our local `node_modules` folder.
    This helps us to ensure that the whole team uses the same plugin version, avoiding
    compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the .stylelintrc configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add our own rules, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside of `./Client`, create a new file, called `.stylelintrc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following rules to the `./Client/.stylelintrc` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you can use whatever rules you want; there''s no right or wrong.
    It''s just a matter of taste and team preference. For example, if your team chooses
    to use only `px` pixels for the entire project, your `unit-whitelist` configuration
    will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s perform a brief test to check that everything is going well. Open Terminal
    window at `./Client` and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command reports 77 errors in our project. How is that possible?
    We only have a few lines of code, and most of them are code indentation on a `style.scss`
    file. Well, this is expected, because this is the only file with SCSS. Remember
    that we didn't add any SCSS code to our `components.scss` files.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Stylelint plugin for VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using `vs.code` (and I hope you are), install the Stylelint plugin,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In VS Code, open the left `extensions` panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `stylelint`, on the search input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose `stylelint` extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting VS Code for the new linter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s configure VS Code to only use `stylelint` rules; this will prevent
    us from seeing double error messages in the VS Code integrated Terminal (if you
    are using a different code editor, don''t worry about it). The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In VS Code, navigate to Code | Preferences | Settings in the top menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the right-hand panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the plugin in action, open the `style.scss` file in `./Client/src/style.scss`.
    You will see the following in the bottom panel in VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a9e8bfc7-a0c5-4d6e-be18-528e9679166a.png)Errors logged by the stylelint
    extension'
  prefs: []
  type: TYPE_NORMAL
- en: These are the same output errors we saw when using the `npm run sass-lint` command,
    but here, we can navigate the files. If you are on macOS, use *Command* + mouse-click.
    If you are on Windows or Linux, use *Ctrl* *+* mouse-click.
  prefs: []
  type: TYPE_NORMAL
- en: Applying stylelint rules on style.scss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's pretty simple to validate the `style.scss` file. Let's read the error messages.
  prefs: []
  type: TYPE_NORMAL
- en: From lines 9 to 44, the errors are about indentation spaces, so let's remove
    the empty space.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the space between `@import` and the left-hand side, for all Bootstrap
    imports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have 41 errors. If you are inside VS Code, click on the error link
    on the bottom panel (on the Problems tab), and open the file right in the error,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9c2091e1-6040-4591-9ca7-46e77deaf747.png)VS Code stylelint plugin
    errors'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not using VS Code, the Terminal message after running `npm run sass-lint` will
    be the same, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/101a8613-1083-4a71-be1d-e3b61f9fa8f7.png)VS Code Terminal stylelint
    errors'
  prefs: []
  type: TYPE_NORMAL
- en: Fixing SCSS errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's fix all of the error messages in our `style.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/style.scss` and replace the content after `@imports` with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are no errors now, and our project will be safe and consistent with our
    rules. Next, let's look at how to use the built-in TypeScript linter in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding TSLint-angular to the package.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, code consistency is a key point for a successful
    project. By default, the Angular CLI has already added `tslint` to our project,
    as we can see in the `package.json` file and in the scripts tag, with the `ng-lint`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, while we were writing this chapter, the Angular CLI had a small bug
    and reported the error message twice when we used the `ng-lint` command. To avoid
    that, let''s add the following lines to our `package.json` file, right after the
    `sass-lint` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the previous lines, we used the local `tslint` binary from the `node_modules`
    folder. This will help us to avoid compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: As we are working in an Angular project, it will be very helpful for us to follow
    Angular's official style guide, as it has been adopted throughout the developer
    community.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the Angular style guide in the official documentation
    at [https://angular.io/guide/styleguide](https://angular.io/guide/styleguide).
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us with the style guide, we will use a package called `tslint-angular`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `./Client/src/tslint.json` file and replace the contents with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the previous code, we are using the `extends` property to extend
    the default configuration in `./Client/tslint.ts` and the `tslint-angular` from
    our `node_modules` folder.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about recommended Angular rules at [https://github.com/mgechev/codelyzer#recommended-configuration](https://github.com/mgechev/codelyzer#recommended-configuration).
  prefs: []
  type: TYPE_NORMAL
- en: Creating linter tasks in package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create some tasks to run the linters that we just set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/package.json` and add the following line before the `sasalint`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will execute two commands: one for `sasslint` and another
    for `tslint`. So, we are ready to start testing our application and preparing
    the deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about TSlint-angular in the official documentation at [https://github.com/mgechev/tslint-angular](https://github.com/mgechev/tslint-angular).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Angular tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tests are very important for any modern web application, and Angular includes
    some testing tools by default, such as Jasmine, Karma, and protectors for unit
    tests and end-to-end tests. Let''s look at the main focus of each tool, in order
    to see the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Unit Tests | End to End Tests |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Test a single component, service, pipe, and so on. | Test the whole application
    |'
  prefs: []
  type: TYPE_TB
- en: '| Test a single, specific behavior. | Test real-world situations |'
  prefs: []
  type: TYPE_TB
- en: '| Require mocking the backend to test. | Test important features on complete
    applications |'
  prefs: []
  type: TYPE_TB
- en: '| Test edge cases on the most detailed level. | Do not test edge cases |'
  prefs: []
  type: TYPE_TB
- en: The preceding table is simple, but we can see all of the main differences between
    unit tests and end-to-end tests, also know as **e2e tests**. Also, both tools
    use the Jasmine framework, a **behavior-driven** development framework for testing
    JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Jasmine at [https://jasmine.github.io/](https://jasmine.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, both tools are installed when we use the Angular CLI
    to generate the application.
  prefs: []
  type: TYPE_NORMAL
- en: For unit tests, we will use the Karma test runner; before we go further, let's
    look at `karma.conf.js` to better understand what we already have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `karma.conf.js` inside the root of the `./Client` folder and check the
    `plugins` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: By default, we already have some plugins installed, as we can see on the previous
    block of code.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the Karma test runner in the official documentation
    at [https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have the configuration for the browser that will be used in the tests;
    by default, we already have Chrome installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'What if you want to use a different browser to run the tests? It is very easy
    to do that; just install your favorite browser. The Karma test runner supports
    the most popular browsers, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Safari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, we are ready to start testing our application. Let's look at
    how everything works.
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit and e2e tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you will learn how to run the tests so that you can better understand what
    happens to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, let's run the command to execute the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will execute all of the unit tests; after that, we will see
    all of the errors in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line will be very similar to the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Each test that fails is marked in red, and is followed by an error message,
    as you can see in the following excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: With so many lines of output in Terminal, it is difficult to even see the tests
    that have passed. Note that there are seven of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Monitoring the tests in Terminal may not be the easiest task, so we can run
    the tests in the browser by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will open Chrome and start the tests, but remember that
    you must have the Chrome browser installed on your machine. After the test is
    done, you can now see the results in a more effective way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a926a042-84bc-4705-9cdb-a83b0b2f7d28.png)'
  prefs: []
  type: TYPE_IMG
- en: The Karma runner in a browser
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot is much better than the Terminal window, right? So,
    when we click on the *Spec List* tab menu, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a07a062b-4e1a-49a5-bb05-b167005bd63e.png)Testing view'
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is possible to click on a test suite and check all of the related tests
    from that suite. Let's look at that feature in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to start fixing all the tests. Let''s see how to make all green:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the Chrome browser, click on the first test suite, called **AppComponent
    should create the app**. You will see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8e02a044-95d6-4c13-ad54-f1e7cb9efde0.png)'
  prefs: []
  type: TYPE_IMG
- en: AppComponent
  prefs: []
  type: TYPE_NORMAL
- en: Note that, in the previous screenshot, you are only seeing the `AppComponent`
    – related tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the Spec List and click on **AppComponent should create the app**;
    you will see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d7dcfd79-88a0-4926-9a41-1785a34c3127.png)'
  prefs: []
  type: TYPE_IMG
- en: AppComponent should create the app
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding error message is very clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a template error, and Angular suggests two ways to deal with it. The
    first suggestion is to check `app.module.ts`, to see if we added the `app-nav`
    component import. Let''s check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding snippet was taken from the `app.module.ts` file, and we imported
    the `NavComponent`. Our action is to add `@NgModule.schemas` to our testing specs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/app.component.spec.ts` and replace the contents with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we added the `schemas` tag, and also our route module, so that the
    test would pass, as you can see in the next snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we check the browser again, we will see the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da0317a6-22c3-4423-b967-920fcd1fc0a4.png)'
  prefs: []
  type: TYPE_IMG
- en: AppComponent success
  prefs: []
  type: TYPE_NORMAL
- en: 'The next test that failed is `NavComponent should created`; let''s look at
    the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Again, the error message is clear; we need to add `RouterTestingModule` to `nav.component.spec.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/layout/nav.component.spec.ts` and replace the contents
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see that our test for `NavComponent` works, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc872d68-33d1-41a3-bb4a-e98cde881ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: NavComponent works
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a breath and consider the next lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are very similar to the steps that we have performed so
    far. We should mention that we are using routes in our application, so we need
    to add `RoutingTestingModule` to the `imports` tag in all of the tests, within
    the configuration of `TestBed.configureTestingModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In addition, we have to inject the same dependency into all of the components
    that use services (such as `BikeService` and `BuilderService`), as we did in the `components.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will replace the code of many files. Don't worry –
    when something is important, we will mention it.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing authGuard tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/_guards/auth.guard.spec.ts` and replace the
    contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are injecting `AuthService` as a provider; don't worry about that
    now. Later on in this chapter, we will explain it more thoroughly. Let's just
    focus on the test.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing authService tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/_services/auth.service.spec.ts` and replace
    the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Fixing login tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/login/login.component.spec.ts` and replace
    the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned previously, practically all of the error messages are related
    to whether we included dependencies, such as services or direct Angular dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing register tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/register/register.component.spec.ts` and
    replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Fixing bike service tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/_services/bikes.service.spec.ts` and replace
    the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Fixing bike-detail tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bike-detail/bike-detail.component.spec.ts`
    and replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Fixing bike-list tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.spec.ts` and
    replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Fixing bike tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.spec.ts` and replace contents
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Fixing builders service tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/_gservices/builders.service.spec.ts`and
    replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Fixing builder-detail tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builder-detail/builder-detail.component.spec.ts`
    and replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Fixing builder-list components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builder-list/builder-list.component.spec.ts`
    and replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Fixing builders tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/builders/builders.component.spec.ts` and replace
    the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Fixing home tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/home/home.component.spec.ts` and replace the contents
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Fixing app tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/app.component.spec.ts` and replace the contents with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Fixing app interceptor tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/shared/_services/app-http-interceptor.service.spec.ts`
    and replace the contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We have now fixed all of the tests, so let's add some more.
  prefs: []
  type: TYPE_NORMAL
- en: Adding unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've come a long way, and now, all of the tests are passing. So, it is time
    to create some new tests.
  prefs: []
  type: TYPE_NORMAL
- en: The following lines are very simple, and we have already followed this path
    in previous examples, so, if something new comes up, we will mention it at the
    end of the code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create some unit tests in our application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/app.component.spec.ts` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will check the `router-outlet` tag inside of `app.component.spec.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/_guards/auth.guard.spec.ts` and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are creating two new tests: one to check `AuthService`, and another
    to check `AuthGuard`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.spec.ts` and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./Client/src/app/pages/builders/builders.component.spec.ts` and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./Client/src/app/pages/home/home.component.spec.ts` and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./Client/src/app/app.component.spec.ts` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now finished the sample unit tests. If we execute the tests using `ng
    test`, we will see the following results in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Fixing e2e tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we are going to run the `e2e` tests, as we mentioned earlier
    in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/e2e/src/app.e2e-spec.ts` and replace the contents with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Open Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the preceding command will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8741ca4d-20b9-4cd1-8d5c-3281a2080771.png)e2e test results'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you need to run the Angular commands inside of the `./Client` folder;
    otherwise, you will see an error message, because the Angular CLI needs the `angular.json`
    file to execute the `ng` commands, and this file is inside of the `./Client` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Application deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now finished all of the necessary steps to test our application. The
    tests can be very comprehensive or quite simple; this will depend on the type
    of approach that you (or your team) choose.
  prefs: []
  type: TYPE_NORMAL
- en: There are many debates about tests within the community. Some people defend
    the development-oriented tests, such as** Behavior-Driven Development **(**BDD**)
    or** Test-Driven Development **(**TDD**).
  prefs: []
  type: TYPE_NORMAL
- en: Again, we will note that the most important thing is that your code, structure,
    and tests are consistent, regardless of what type of development is adopted.
  prefs: []
  type: TYPE_NORMAL
- en: In this last section, we will look at how we can prepare our application to
    be published in production. From the beginning of this book, we have been using
    Docker, and we would not finish the book in any other way.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's look at how we can prepare our application, using some Docker features.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Docker images for frontend applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed previously, we already have an environment configured with Docker,
    but it only covers our backend application, since we run our frontend code using
    the Angular CLI installed on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: In the development environment, this is not a problem, since we need the code
    that we write in our host to update in our Docker container. However, when we
    are discussing deployment, we take into account the fact that our code is ready
    to run, without any changes to files.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are not talking about writing on the disk or data persistence;
    we will only mention changes in the source code of the application.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, let's create an image of our frontend application using a
    Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file called `Dockerfile` inside of the `./Client` folder, and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is very simple; we are using an image from `nginx:alpine`,
    a Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about official Docker images at [https://hub.docker.com/explore/](https://hub.docker.com/explore/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are using a configuration file for the nginx server. Remember, the
    Angular application must be hosted by a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an nginx file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file called `nginx.conf` inside of the `./Client` folder, and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: There's nothing new here – it's just a basic nginx configuration to serve the
    Angular files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating npm building tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Dockerfile in place, we just need to create a building process using
    the `npm` that we have available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/package.json` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explain what we did in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Script tag: `docker:image` will use a bash script file to generate a Docker
    image; later, we will see this file in detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Script tag: `build:docker` will execute the following steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run SASS listen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `Tslint`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run unit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run e2e tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Docker image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we go further, let's explain why we are using a bash file to create the
    Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: Bash files are very useful in many places, and aren't different in any build
    processes as we will see on the following lines to execute some Docker commands.
    To avoid more complexity in `npm` packages, we will use a call to the `create-docker-image.sh`
    file that will execute the command necessary to generate our image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bash script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to add a new directory in our frontend application, to store
    all of the bash script files that our application can have. In this example, we
    will only use one, but in real-world applications, this folder can store a series
    of bash files:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside of `./Client`, create a new folder, called `_scripts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of the `./Client/_scripts` folder, create a new file called `create-docker-image.sh`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note that you can use any name for your application; we are using `angular-laravel-book` for
    the book example.
  prefs: []
  type: TYPE_NORMAL
- en: Running npm build scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s make a small adjustment to the `angular.json` file; remove the
    `Client` folder from the `output` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The last step is to run the `build` command, to test and create our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal window inside of the `./Client` folder, and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The build process will take a few minutes; at the end, you will see a message
    similar to the following in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62e99ca8-1ade-4e6f-b92b-a1043f84abc3.png)End-to-end testsIf you
    face errors with permissions, perform the following. Open Terminal window inside
    of the `./Client/_scripts` folder and type `chmod 755 create-docker-image.sh`.'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Docker commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some observations for the end of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the book, we used Docker to create the development environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we created an image for our frontend application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, now is the right time to check over what we've done so far.
  prefs: []
  type: TYPE_NORMAL
- en: From [Chapter 4](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml), *Building the
    Baseline Application*, we have been using Docker to create the backend API application.
    In this chapter, we have been using Docker to turn the frontend Angular application
    into a Docker image. So, we can assume that we have an image for our backend with
    a server and a database, and another for the frontend application, also known
    as the client-side application.
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the advantage of hosting the services separately, as we mentioned
    earlier in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that our backend API is totally independent of the frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: Building the application for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make some adjustments in our `docker-compose.yml` file and add the image
    of the frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/docker-compose.yml` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Note the commented lines. As part of the `build` command, we are using the `angular-laravel-book`
    image created with the `npm run build:docker` command. So, if you forget to run
    the build script, every time you run the `docker-compose up -d` command, the image
    will be created (if it does not already exist).
  prefs: []
  type: TYPE_NORMAL
- en: Testing Docker images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it is time to check the Docker containers and images.
  prefs: []
  type: TYPE_NORMAL
- en: Attention, the next command, will erase all the Docker images and containers
    that you have in your machine. If you used Docker for other projects besides the
    book examples, we recommend that you only delete images and containers related
    to our example application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command erases all images and containers in your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the containers, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The output returned will be an empty table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: At the end, you will again see an empty table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! We have successfully built all of the images and containers.
  prefs: []
  type: TYPE_NORMAL
- en: Repeat step 1 to list all containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will be the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Container ID | Image | Name |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ContainerID | `chapter-11_php-fpm` | `chapter-11-php-fpm` |'
  prefs: []
  type: TYPE_TB
- en: '| ContainerID | `nginx:alpine` | `chapter-11-webserver` |'
  prefs: []
  type: TYPE_TB
- en: '| ContainerID | `mysql:5.7` | `chapter-11-mysql` |'
  prefs: []
  type: TYPE_TB
- en: '| ContainerID | `angular-laravel-book` | `chapter-11-appserver` |'
  prefs: []
  type: TYPE_TB
- en: Note that the container names are the same as those we chose in the `docker-compose.yml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following images represent our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frontend**: `angular-laravel-book`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backend**: `phpdockerio/php72-fpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now ready to deploy on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have the necessary baseline code to put our application into production.
    The next steps are the most varied, because a multitude of cloud services are
    able to store Docker images for production websites and applications – and it
    often involves the use of a paid service. But we now have a robust and scalable
    application using the latest technology, namely Angular 6 and Laravel 5.
  prefs: []
  type: TYPE_NORMAL
- en: We have come a long way since the start of this book, explaining and introducing
    advanced web development techniques. You are now able to create an application
    from scratch, all the way to deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to always keep yourself up to date, and keep in mind that consistent
    code can always help you.
  prefs: []
  type: TYPE_NORMAL
