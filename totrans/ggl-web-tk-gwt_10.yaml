- en: Chapter 10. Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will first learn how to manually deploy GWT applications,
    so we can gain familiarity with all the artifacts that are part of the deployment.
    We will then automate this process by using Apache Ant.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual deployment in Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated deployment using Ant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment from Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual Deployment in Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to take the `Samples` application that we have been working on
    in this book, and go through the various steps needed to have it manually deployed
    and running in Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Deploying a GWT Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps required to manually deploy a GWT application to Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Apache Tomcat for your platform ([http://tomcat.apache.org](http://tomcat.apache.org)).
    Select the latest stable version from the 5.x series. I am going to refer to the
    directory where Tomcat is installed as `$TOMCAT_DIR`, and the directory that contains
    the `Samples` project as `$SAMPLES_DIR`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `$SAMPLES_DIR/Samples-compile` to compile the entire application. This will
    create a new directory named `www` under `$SAMPLES_DIR`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `web.xml` in the `$SAMPLES_DIR` directory. Add a display
    name and a description for our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The display name is displayed when you browse the list of deployed applications
    using the Tomcat manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `web.xml` file created in the previous step, add entries for each of
    the RPC services we are using in our application and a corresponding servlet mapping
    for each entry. Add an entry for the live-search service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the password-strength service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the auto-form-fill service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the dynamic-lists service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the pageable-data service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the live-data-grid service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the log-spy service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for the weather service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Add an entry for the welcome file and set the welcome file to the main HTML
    page for our application—`Samples.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `WEB-INF` under the `www/com.packtpub.gwtbook.samples.Samples`
    directory. Create two subdirectories `lib` and `classes` under the `WEB-INF` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the above `web.xml` file to the `WEB-INF` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of `$SAMPLES_DIR/bin` to the `WEB-INF/classes` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of `$SAMPLES_DIR/lib` to the `WEB-INF/lib` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `www/com.packtpub.gwtbook.samples.Samples` directory to `$TOMCAT_DIR/webapps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start up Tomcat. Once it is up and running, navigate to the following URL to
    see the `Samples` application that we have created in this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/com.packtpub.gwtbook.samples.Samples/`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Deploying a GWT Application](img/1007_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compiling a GWT application generates HTML and JavaScript for the application
    in the `www` directory. This contains all the artifacts needed for the user interface
    and can actually be run on any web server. However, if you are using any RPC services,
    then you need to ensure that any third-party JARs needed by the services along
    with the service and support classes are deployed to a servlet container along
    with the contents of the `www` directory. We have chosen Tomcat for this, as it
    is one of the most widely used servlet containers and is the reference implementation
    for the JSP and Servlet specifications. We can similarly deploy our application
    to any other container such as Geronimo, JBoss, WebSphere, JOnAS, or Weblogic.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to a servlet container such as Tomcat implies that we structure our
    deployment to mimic the WAR format. So we need to ensure that all the Java classes
    from our application are available in the `WEB-INF/classes` directory, and all
    the JAR files used by our application need to be in the `WEB-INF/lib` directory.
    Accordingly, we copy those artifacts to these directories. We also create a deployment
    descriptor that is needed for Tomcat to recognize our deployment. This file is
    `web.xml`, and it needs to be copied to the `WEB-INF` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have everything in place in the `www/com.packtpub.gwtbook.samples.Samples`
    directory, we copy `com.packtpub.gwtbook.samples.Samples` to the web applications
    directory for Tomcat—`$TOMCAT_DIR/webapps`. Then we start Tomcat, which on startup
    will register the application from the `web.xml` file and make it available at
    the context—`com.packtpub.gwtbook.samples.Samples`.
  prefs: []
  type: TYPE_NORMAL
- en: Automated Deployment Using Ant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to make things easier on ourselves and reduce the tedious work,
    by letting Ant handle the deployment of our GWT application. We will automate
    everything we did in the previous section by using Apache Ant.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating the Ant Build File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for automating the deployment to Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify the `$SAMPLES_DIR/Samples.ant.xml` file that was created when
    we ran `applicationCreator` to create our project in[Chapter 3](ch03.html "Chapter 3. Creating
    Services"). Create global properties to refer various directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Add the JARs that we will need while compiling to the `classpath:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `clean` target to include other artifacts to clean up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a new target named `create-war:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a new target named `deploy-war:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Install Apache Ant if you do not already have it ([http://ant.apache.org](http://ant.apache.org)).
    Make sure that the Ant binary is on your `path`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run Ant from `$SAMPLES_DIR` with these parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will clean the build artifacts, compile the entire application, create
    a WAR file, and deploy the WAR file to Tomcat. You can access the deployed application
    at the URL `http://localhost:8080/Samples`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output when you run Ant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating the Ant Build File](img/1007_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apache Ant provides a great way to automate deploying our application. We create
    targets for cleaning out the old build artifacts, creating a WAR file, and deploying
    this WAR file to the Tomcat `webapps` directory. The `applicationCreator` command
    has an option for generating a simple `build.xml` file. We used this option to
    generate a skeleton `build.xml` file for our `Samples` project in[Chapter 3](ch03.html
    "Chapter 3. Creating Services"). We took this generated file and modified it to
    add all the additional targets that we needed. We also packaged all the `class`
    files for our application into `Samples.jar` instead of copying the classes themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment from Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we created the build file that is used along with Ant
    to automate deployment of our application to Tomcat. However, we were running
    Ant from the command line. In this section, we will go through the steps needed
    to run Ant from inside Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Running Ant from Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for running our build file from inside Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Samples.ant.xml` file in the **Navigator** view in Eclipse.
    This will display the option for running Ant. Select **Run As | 1 Ant Build:**![Time
    for Action—Running Ant from Eclipse](img/1007_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will execute Ant and display the output by running the build in the **Console**
    view in Eclipse:![Time for Action—Running Ant from Eclipse](img/1007_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous screenshot shows the output of the `compile` target from the Ant
    script, which is the default target if you don't specify any other. Now we are
    going to run the `deploy-war` target. Right-click the `Samples.ant.xml` file again
    in the **Navigator** view in Eclipse. This time select **Run As | 2 Ant Build...**
    option, as shown in the following screenshot:![Time for Action—Running Ant from
    Eclipse](img/1007_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will display the window where you can select which target to execute:![Time
    for Action—Running Ant from Eclipse](img/1007_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `deploy-war` and click **Run** to run the Ant build. The output will
    be displayed in the **Console** view in Eclipse:![Time for Action—Running Ant
    from Eclipse](img/1007_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can run Ant from inside Eclipse and successfully deploy our application
    to Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eclipse provides excellent support for editing and running Ant build files.
    It recognizes `build.xml` files, and adds context actions to the various views
    so that you can right-click on a `build.xml` file and execute an Ant build. It
    also provides you with the option to run a specified target instead of just running
    the default target specified in the file. In this section, we learned how to use
    this support so that we can deploy to Tomcat directly from inside the Eclipse
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to manually deploy our GWT application to Tomcat.
    Then, we saw how to automate the deployment with Ant, which lets us deploy our
    application from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we leveraged Eclipse's built-in Ant support to run our Ant build file
    from inside Eclipse.
  prefs: []
  type: TYPE_NORMAL
