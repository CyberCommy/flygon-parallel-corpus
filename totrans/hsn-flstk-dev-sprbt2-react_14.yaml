- en: Deploying Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to deploy your backend and frontend to a server. There
    are a variety of cloud servers or **PaaS** (**Platform as a Service**) providers
    available, such as Amazon (AWS), DigitalOcean, and Microsoft Azure. In this book,
    we are using Heroku, which supports multiple programming languages that are used
    in web development. We will also show you how to use Docker containers in deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Different options for deploying the Spring Boot application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy the Spring Boot application to Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy the React app to Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create the Spring Boot and MariaDB Docker container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, is required (GitHub*: *[https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204))*.*
  prefs: []
  type: TYPE_NORMAL
- en: The React app that we used in the previous chapter is also required (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).
  prefs: []
  type: TYPE_NORMAL
- en: Docker installation is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are going to use your own server, the easiest way to deploy the Spring
    Boot application is to use an executable JAR file. An executable JAR file is generated,
    if you use Maven, in the command line by typing the `mvn clean install` command.
    That command creates the JAR file in the `build` folder. In this case, you don''t
    have to install a separate application server because it is embedded in your JAR
    file. Then you just have to run the JAR file using the `java` command, `java -jar
    your_appfile.jar`. The embedded Tomcat version can be defined in the `pom.xml`
    file with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using a separate application server, you have to create a WAR package.
    That is a little bit more complicated and you have to make some modifications
    to your application. The following are the steps to create the WAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify an application main class by extending `SpringBootServletIntializer`
    and overriding the `configure` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the packaging from JAR to WAR in the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following dependency to the `pom.xml` file. Then, the Tomcat application
    is no longer embedded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you build your application, the WAR file is generated. It can be deployed
    to the existing Tomcat by copying the file to Tomcat's `/webapps` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, cloud servers are the major way to provide your application to end
    users. Next, we are going to deploy our backend to the Heroku cloud server ([https://www.heroku.com/](https://www.heroku.com/)).
    Heroku offers a free account that you can use to deploy your own applications.
    With the free account, your applications go to sleep after 30 minutes of inactivity
    and it takes a little bit more time to restart application. But the free account
    is enough for testing and hobby purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For deployment, you can use Heroku''s web-based user interface. The following
    steps go through the deployment process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created an account with Heroku, log in to the Heroku website.
    Navigate to the dashboard that shows a list of your applications. There is a button
    called New that opens a menu. Select Create new app from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6d4ea22-fcf1-4db9-87dd-809aee5975e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name your app, select a region, and press the Create app button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a149f89b-24ef-44e8-aa3e-d84df8e12c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a deployment method. There are several options; we are using the GitHub
    option. In that method, you first have to push your application to GitHub and
    then link your GitHub repository to Heroku:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfe74268-512d-47d2-820e-2b0c4e71dcd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Search for a repository you want to deploy to and then press the Connect button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b165d48-afdd-475c-b80e-c541060f3089.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose between automatic and manual deployment. The automatic option deploys
    your app automatically when you push a new version to connected the GitHub repository.
    You also have to select a branch you want to deploy. We will now use the manual
    option that deploys the app when you press the Deploy branch button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb891230-f8f6-49cf-bfb7-c25a8c010213.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Deployment starts and you can see a build log. You should see a message that
    says Your app was successfully deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e706d00-ec4a-48bd-be9f-f7cef58af9c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, your application is deployed to the Heroku cloud server. If you are using
    the H2 in-memory database, this would be enough and your application should work.
    We are using MariaDB; therefore, we have to install the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Heroku, we can use JawsDB, which is available in Heroku as an add-on. JawsDB
    is a **Database as a Service** (**DBaaS**) provider that offers MariaDB database,
    which can be used in Heroku. The following steps describe how to start using the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Resources tab in your Heroku app page and type `JawsDB` into the Add-ons
    search field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ad75340-c8c9-47b2-b6f4-10c3be62c991.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select JawsDB Maria from the dropdown list. You can see JawsDB in your adds-on
    list. Click JawsDB and you can see the connection info of your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9a31fdb-7bc5-4e8b-987f-5bf9c9cad006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the database connection definition in the `application.properties` file
    with the values from the JawsDB connection info page. In this example we use plain
    password but it is recommended to encrypt password using for example, **Java Simplified
    Encryption** (**JASYPT**) library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With the free account, we can have a maximum of 10 concurrent connections to
    our database; therefore, we also have to add the following line to the `application.properties`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Push your changes to GitHub and deploy your app in Heroku. Now, your application
    is ready and we can test that with Postman. The URL of the app is `https://carbackend.herokuapp.com/`,
    but you can also use your own domain. If we send the `POST` request to the `/login`
    endpoint with the credential, we can get the token in the response header. So,
    everything seems to work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/118749ea-0281-4a31-998b-ec964fffbac8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also connect to the JawsDB database with HeidiSQL, and we can see that
    our car database has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1249d3d7-581b-4bca-b51d-5985cc9de735.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can watch application logs by selecting View logs from the More menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd9588eb-733b-49d1-9680-1bb8943220f6.png)'
  prefs: []
  type: TYPE_IMG
- en: The application log view looks like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/363c4ce1-f69f-470c-ba27-6d799636bcfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will deploy our React frontend to Heroku. The easiest way
    to deploy the React app to Heroku is to use the Heroku Buildpack for create-react-app
    ([https://github.com/mars/create-react-app-buildpack](https://github.com/mars/create-react-app-buildpack)).
    For deployment, we have to install the Heroku CLI, which is the command-line tool
    for Heroku. You can download the installation package from `https://devcenter.heroku.com/articles/heroku-cli`.
    After the installation has finished, you can use the Heroku CLI from PowerShell
    or the Terminal you''re using. The following steps describe the deployment process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your frontend project with VS Code and open the `constant.js` file in
    the editor. Change the `SERVER_URL` constant to match our backend''s URL and save
    the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a local Git repository to your project and commit the files, if you
    haven''t done that, yet. Navigate to your project folder with the Git command-line
    tool and type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command creates a new Heroku app and asks for credentials to
    log in to Heroku. Replace `[APPNAME]` with your own app name. After the command
    has been executed, you should see the new app in your Heroku dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy your code to Heroku by typing the following command to PowerShell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After the deployment is ready, you should see the Verifying deploy... done message
    in PowerShell, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d390c43a-34b7-472f-ba2f-81edd960b837.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can go to your Heroku dashboard and see the URL of your frontend;
    you can also open it from the Heroku CLI by typing the `heroku open` command.
    If you navigate to your frontend, you should see the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0dd6d124-54bd-46c9-8dec-8cc247c37495.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker is a container platform that makes software development, deployment,
    and shipping easier. Containers are lightweight and executable software packages
    that include everything that is needed to run software. In this section, we are
    creating a container from our Spring Boot backend, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker to your workstation. You can find the installation packages at [https://www.docker.com/get-docker](https://www.docker.com/get-docker).
    There are installation packages for multiple platforms and if you have Windows
    operating system, you can go through the installation wizard using the default
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Spring Boot application is just an executable JAR file that can be executed
    with Java. The JAR file can be created with the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use Eclipse to run Maven goals by opening the Run | Run configurations... menu.
    Select your project in the Base directory field, using the Workspace button. Type
    clean install into the Goals field and press the Run button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/787f9e0c-1e26-4665-a2fb-7e45e7e50913.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the build is finished, you can find the executable JAR file from the
    `/target` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2492af3f-cc3b-41c8-b4f0-8229438a3b18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can test that the build went correctly by running the JAR file with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see the application''s starting messages and, finally, your application
    is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14a5ad6d-15a2-4e4f-8fdb-f4e0b78be6bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Containers are defined by using Dockerfiles.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Dockerfile in the root folder of your project and name it `Dockerfile`.
    The following lines show the content of the Dockerfile. We are using Alpine Linux. `EXPOSE`
    defines the port that should be published outside of the container. `COPY` copies
    the JAR file to the container's filesystem and renames it `app.jar`. `ENTRYPOINT`
    defines the command-line arguments that the Docker container runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is also a Maven plugin available to build Docker images. It is developed
    by Spotify and can be found at [https://github.com/spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin).
  prefs: []
  type: TYPE_NORMAL
- en: The following lines show the content of `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the container with the following command. With the `-t` argument, we
    can give a friendly name to our container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the build command, you should see the Successfully built message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d14a98c9-6013-4f50-a078-d0261a7ac6fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the list of the container using the `docker image ls` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a711dc13-1ae6-4f6e-906d-3aea1272fbae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the container with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The Spring Boot application starts but it ends with an error because we are
    trying to access the localhost database. The localhost now points to the container
    itself and there is no MariaDB installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create our own container for MariaDB. You can pull the latest MariaDB
    container from the Docker Hub using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the MariaDB container. The following command sets the root user password
    and creates a new database, called `cardb`, that we need for our Spring Boot application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to make one change to our Spring Boot `application.properties` file.
    Change the `datasource` URL to the following. In the next step, we will specify
    that our application can access the database container using the `mariadb` name.
    After the change, you have to build your application and re-create the Spring
    Boot container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run our Spring Boot container and link the MariaDB container to it using
    the following command. The command now defines that our Spring Boot container
    can access the MariaDB container using the `mariadb` name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also access our application logs by typing the `docker logs carapp` command.
    We can see that our application has started successfully and the demo data has
    been inserted into the database that exists in the MariaDB container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e83d7a2-9eb6-4f6c-9948-ed2f9e288e01.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deploy the Spring Boot application. We went
    through the different deployment options of the Spring Boot application and deployed
    the application to Heroku. Next, we deployed our React frontend to Heroku using
    the Heroku Buildpack for create-react-app, which makes the deployment process
    fast. Finally, we used Docker to create containers from our Spring Boot application
    and MariaDB database. In the next chapter, we will cover some more technologies
    and best practises that you should explore.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you create a Spring Boot-executable JAR file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you deploy the Spring Boot application to Heroku?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you deploy the React app to Heroku?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you create the Spring Boot application container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you create the MariaDB container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React, Spring Boot, and
    Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/deployment-docker](https://www.packtpub.com/virtualization-and-cloud/deployment-docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course](https://www.packtpub.com/virtualization-and-cloud/docker-fundamentals-integrated-course)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
