- en: Getting Started with Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible enables you to easily deploy applications and systems consistently and
    repeatably using native communication protocols such as SSH and WinRM. Perhaps
    most importantly, Ansible is agentless and so requires nothing to be installed
    on the managed systems (except for Python, which, these days, is present on most
    systems). As a result, it enables you to build a simple yet robust automation
    platform for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible is simple and straightforward to install and comes packaged for most
    modern systems. Its architecture is serverless as well as agentless, and so it
    has a minimal footprint. You can choose to run it from a central server or your
    own laptop—the choice is entirely yours. You can manage anything from a single
    host to hundreds of thousands of remote hosts from one Ansible control machine.
    All remote machines can be (with sufficient playbooks being written) managed by
    Ansible, and with everything created correctly, you may never have to log in to
    any of these machines individually again.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will begin to teach you the practical skills to cover the
    very fundamentals of Ansible, starting with how to install Ansible on a wide variety
    of operating systems. We will then look at how to configure Windows hosts to enable
    them to be managed with Ansible automation, before delving into greater depth
    on the topic of how Ansible connects to its target hosts. We'll then look at node
    requirements and how to validate your Ansible installation, before finally looking
    at how to obtain and run the very latest Ansible source code if you wish to either
    contribute to its development or gain access to the very latest of features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding your Ansible installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running from source versus pre-built RPMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible has a fairly minimal set of system requirements—as such, you should
    find that if you have a machine (either a laptop, a server, or a virtual machine)
    that is capable of running Python, then you will be able to run Ansible on it.
    Later in this chapter, we will demonstrate the installation methods for Ansible
    on a variety of operating systems—it is hence left to you to decide which operating
    systems are right for you.
  prefs: []
  type: TYPE_NORMAL
- en: The one exception to the preceding statement is Microsoft Windows—although there
    are Python environments available for Windows, there is as yet no native build
    of Ansible for Windows. Readers running more recent versions of Windows will be
    able to install Ansible using Windows Subsystem for Linux (henceforth, WSL) and
    by following the procedures outlined later for their chosen WSL environment (for
    example, if you install Ubuntu on WSL, you should simply follow the instructions
    given in this chapter for installing Ansible on Ubuntu).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is written in Python and, as such, can be run on a wide range of systems.
    This includes most popular flavors of Linux, FreeBSD, and macOS. The one exception
    to this is Windows, where though native Python distributions exist, there is as
    yet no native Ansible build. As a result, your best option at the time of writing
    is to install Ansible under WSL proceeding as if you were running on a native
    Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have established the system on which you wish to run Ansible, the installation
    process is normally simple and straightforward. In the following sections, we
    will discuss how to install Ansible on a wide range of different systems, so that
    most readers should be able to get up and running with Ansible in a matter of
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible on Linux and FreeBSD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The release cycle for Ansible is usually about four months, and during this
    short release cycle, there are normally many changes, from minor bug fixes to
    major ones, to new features and even sometimes fundamental changes to the language.
    The simplest way to not only get up and running with Ansible but to keep yourself
    up to date is to use the native packages built for your operating system where
    they are available.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you wish to run the latest version of Ansible on top of Linux
    distribution such as CentOS, Fedora, **Red Hat Enterprise Linux** (**RHEL**),
    Debian, and Ubuntu, I strongly recommend that you use an operating system package
    manager such as `yum` on Red Hat-based distributions or `apt` on Debian-based
    ones. In this manner, whenever you update your operating system, you will update
    Ansible simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it might be that you need to retain a specific version of Ansible
    for certain purposes—perhaps because your playbooks have been tested with this.
    In this instance, you would almost certainly choose an alternative installation
    method, but this is beyond the scope of this book. Also, it is recommended that,
    where possible, you create and maintain your playbooks in line with documented
    best practices, which should mean that they survive most Ansible upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples showing how you might install Ansible on several
    Linux distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Ansible on Ubuntu**: To install the latest version of the Ansible
    control machine on Ubuntu, the `apt` packaging tool makes it easy using the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are running an older version of Ubuntu, you might need to replace `software-properties-common`
    with `python-software-properties` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Ansible on Debian:** You should add the following line into your
    `/etc/apt/sources.list` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will note that the word `ubuntu` appears in the preceding line of configuration
    along with `trusty`, which is an Ubuntu version. Debian builds of Ansible are,
    at the time of writing, taken from the Ansible repositories for Ubuntu and work
    without issue. You might need to change the version string in the preceding configuration
    according to your Debian build, but for most common use cases, the line quoted
    here will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, you can install Ansible on Debian as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible on Gentoo**: To install the latest version of the Ansible
    control machine on Gentoo, the `portage` package manager makes it easy with the
    following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible on FreeBSD**: To install the latest version of the Ansible
    control machine on FreeBSD, the PKG manager makes it easy with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible on Fedora**: To install the latest version of the Ansible
    control machine on Fedora, the `dnf` package manager makes it easy with the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible on CentOS**: To install the latest version of the Ansible
    control machine on CentOS or RHEL, the `yum` package manager makes it easy with
    the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you execute the preceding commands on RHEL, you have to make sure that the
    Ansible repository is enabled. If it''s not, you need to enable the relevant repository
    with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible on Arch Linux**: To install the latest version of the
    Ansible control machine on Arch Linux, the `pacman` package manager makes it easy
    with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have installed Ansible on the specific Linux distribution that you
    use, you can begin to explore. Let''s start with a simple example—when you run
    the `ansible` command, you will see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Those who wish to test the very latest versions of Ansible, fresh from GitHub
    itself, might be interested in building an RPM package for installing to control
    machines. This method is, of course, only suitable for Red Hat-based distributions
    such as Fedora, CentOS, and RHEL. To do this, you will need to clone source code
    from the GitHub repository and build the RPM package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have seen how to install Ansible on Linux, we'll take a brief look
    at how to install Ansible on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to install Ansible on macOS. The easiest
    installation method is to use Homebrew, but you could also use the Python package
    manager. Let's get started by installing Homebrew, which is a fast and convenient
    package management solution for macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t already have Homebrew installed on macOS, you can easily install
    it as detailed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Homebrew**: Normally the two commands shown here are all that
    is required to install Homebrew on macOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have already installed the Xcode command-line tools for another purpose,
    you might see the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You may want to open the App Store on macOS and check whether updates to Xcode
    are required, but as long as the command-line tools are installed, your Homebrew
    installation should proceed smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to confirm that your installation of Homebrew was successful, you
    can run the following command, which will warn you about any potential issues
    with your install—for example, the following output is warning us that, although
    Homebrew is installed successfully, it is not in our `PATH` and so we may not
    be able to run any executables without specifying their absolute path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing the Python package manager (pip)**: If you don''t wish to use
    Homebrew to install Ansible, you can instead install `pip` using with the following
    simple commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Also check that your Python version is at least 2.7, as Ansible won''t run
    on anything older (this should be the case with almost all modern installations
    of macOS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use either Homebrew or the Python package manager to install the latest
    version of Ansible on macOS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Ansible via Homebrew**:To install Ansible via Homebrew, run the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Installing Ansible via the Python package manager (pip)**:To install Ansible via
    `pip`, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You might be interested in running the latest development version of Ansible
    direct from GitHub, and if so, you can achieve this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have installed Ansible using your preferred method, you can run
    the `ansible` command as before, and if all has gone according to plan, you will
    see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running macOS 10.9, you may experience issues when installing Ansible
    using `pip`. The following is a workaround that should resolve the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to update your Ansible version, `pip` makes it easy via the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can upgrade it using the `brew` command if that was your install
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have learned the steps to install Ansible on macOS, let's see how
    to configure a Windows host for automation with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Windows hosts for Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed earlier, there is no direct installation method for Ansible on
    Windows—simply, it is recommended that, where available, you install WSL and install
    Ansible as if you were running Linux natively, using the processes outlined earlier
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Despite this limitation, however, Ansible is not limited to managing just Linux-
    and BSD-based systems—it is capable of the agentless management of Windows hosts
    using the native WinRM protocol, with modules and raw commands making use of PowerShell,
    which is available in every modern Windows installation. In this section, you
    will learn how to configure Windows to enable task automation with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at what Ansible is capable of when automating Windows hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather facts about remote hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and uninstall Windows features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage and query Windows services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage user accounts and a list of users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage packages using Chocolatey (a software repository and accompanying management
    tool for Windows).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform Windows updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch multiple files from a remote machine to the Windows host.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute raw PowerShell commands and scripts on target hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible allows you to automate tasks on Windows machines by connecting with
    either a local user or a domain user. You can run actions as an administrator
    using the Windows `runas`support, just as with the `sudo` command on Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as Ansible is open source software, it is easy to extend its functionality
    by creating your own modules in PowerShell or even sending raw PowerShell commands.
    For example, an InfoSec team could manage filesystem ACLs, configure Windows Firewall,
    and manage hostnames and domain membership with ease, using a mix of native Ansible
    modules and, where necessary, raw commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Windows host must meet the following requirements for the Ansible control
    machine to communicate with it:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible attempts to support all Windows versions that are under either current
    or extended support from Microsoft, including desktop platforms such as Windows
    7, 8.1, and 10, along with server operating systems including Windows Server 2008
    (and R2), 2012 (and R2), 2016, and 2019.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need to install PowerShell 3.0 or later and at least .NET 4.0
    on your Windows host.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need to create and activate a WinRM listener, which is described in
    detail later. For security reasons, this is not enabled by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look in more detail at how to prepare a Windows host to be automated
    by Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With regard to prerequisites, you have to make sure PowerShell 3.0 and .NET
    Framework 4.0 are installed on Windows machines. If you''re still using the older
    version of PowerShell or .NET Framework, you need to upgrade them. You are free
    to perform this manually, or the following PowerShell script can handle it automatically
    for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This script works by examining the programs that need to be installed (such
    as .NET Framework 4.5.2) and the required PowerShell version, rebooting if required,
    and setting the username and password parameters. The script will automatically
    restart and log on at reboot so that no more action is required and the script
    will continue until the PowerShell version matches the target version.
  prefs: []
  type: TYPE_NORMAL
- en: If the username and password parameters aren't set, the script will ask the
    user to reboot and log in manually if necessary, and the next time the user logs
    in, the script will continue at the point where it was interrupted. The process
    continues until the host meets the requirements for Ansible automation.
  prefs: []
  type: TYPE_NORMAL
- en: When PowerShell has been upgraded to at least version 3.0, the next step will
    be to configure the WinRM service so that Ansible can connect to it. WinRM service
    configuration defines how Ansible can interface with the Windows hosts, including
    the listener port and protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have never set up a WinRM listener before, you have three options to
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you can use `winrm quickconfig` for HTTP and `winrm quickconfig -transport:https` for
    HTTPS. This is the simplest method to use when you need to run outside of the
    domain environment and just create a simple listener. This process has the advantage
    of opening the required port in the Windows firewall and automatically starting
    the WinRM service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are running in a domain environment, I strongly recommend using**Group
    Policy Objects** (**GPOs**) because if the host is the domain member, then the
    configuration is done automatically without user input. There are many documented
    procedures for doing this available, and as this is a very Windows domain-centric
    task, it is beyond the scope of this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you can create a listener with a specific configuration by running
    the following PowerShell commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `CertificateThumbprint` should match the thumbprint of a valid
    SSL certificate that you previously created or imported into the Windows Certificate
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are running in PowerShell v3.0, you might face an issue with the WinRM
    service that limits the amount of memory available. This is a known bug and a
    hotfix is available to resolve it. An example process (written in PowerShell)
    to apply this hotfix is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuring the WinRM listeners can be a complex task, so it is important to
    be able to check the results of your configuration process. The following command
    (which can be run from Command Prompt) will display the current WinRM listener
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should have output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the preceding output, two listeners are active—one to listen on
    port `5985` over HTTP and the other to listen on port `5986` over HTTPS providing
    greater security. By way of additional explanation, the following parameters are
    also displayed in the preceding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Transport`: This should be set to either HTTPS or HTTPS, though it is strongly
    recommended that you use the HTTPS listener to ensure your automation commands
    are not subject to snooping or manipulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Port`: This is the port on which the listener operates, by default `5985`
    for HTTP or `5986` for HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`URLPrefix`: This is the URL prefix to communicate with, by default, `wsman`.
    If you change it, you must set the `ansible_winrm_path` host on your Ansible control
    host to the same value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CertificateThumbprint`: If running on an HTTPS listener, this is the certificate
    thumbprint of the Windows Certificate Store used by the connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you need to debug any connection issues after setting up your WinRM listener,
    you may find the following commands valuable as they perform WinRM-based connections
    between Windows hosts without Ansible—hence, you can use them to distinguish whether
    an issue you might be experiencing is related to your Ansible host or whether
    there is an issue with the WinRM listener itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If one of the preceding commands fails, you should investigate your WinRM listener
    setup before attempting to set up or configure your Ansible control host.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, Windows should be ready to receive communication from Ansible
    over WinRM. To complete this process, you will need to also perform some additional
    configuration on your Ansible control host. First of all, you will need to install
    the `winrm` Python module, which, depending on your control hosts'' configuration,
    may or may not have been installed before. The installation method will vary from
    one operating system to another, but it can generally be installed on most platforms
    with `pip` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is complete, you will need to define some additional inventory variables
    for your Windows hosts—don''t worry too much about inventories for now as we will
    cover these later in this book. The following example is just for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you should be able to run the Ansible `ping` module to perform an
    end-to-end connectivity test with a command like the following (adjust for your
    inventory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have learned the necessary steps to configure Windows hosts for
    Ansible, let's see how to connect multiple hosts via Ansible in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding your Ansible installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this stage in this chapter, regardless of your operating system choice for
    your Ansible control machine, you should have a working installation of Ansible
    with which to begin exploring the world of automation. In this section, we will
    carry out a practical exploration of the fundamentals of Ansible to help you to
    understand how to work with it. Once you have mastered these basic skills, you
    will then have the knowledge required to get the most out of the remainder of
    this book. Let's get started with an overview of how Ansible connects to non-Windows
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Ansible connects to hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the exception of Windows hosts (as discussed at the end of the previous
    section), Ansible uses the SSH protocol to communicate with hosts. The reasons
    for this choice in the Ansible design are many, not least that just about every
    Linux/FreeBSD/macOS host has it built in, as do many network devices such as switches
    and routers. This SSH service is normally integrated with the operating system
    authentication stack, enabling you to take advantage of things such as Kerberos
    to improve authentication security. Also, features of OpenSSH such as `ControlPersist`
    are used to increase the performance of the automation tasks and SSH jump hosts
    for network isolation and security.
  prefs: []
  type: TYPE_NORMAL
- en: '`ControlPersist` is enabled by default on most modern Linux distributions as
    part of the OpenSSH server installation. However, on some older operating systems
    such as Red Hat Enterprise Linux 6 (and CentOS 6), it is not supported, and so
    you will not be able to use it. Ansible automation is still perfectly possible,
    but longer playbooks might run slower.'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible makes use of the same authentication methods that you will already be
    familiar with, and SSH keys are normally the easiest way to proceed as they remove
    the need for users to input the authentication password every time a playbook
    is run. However, this is by no means mandatory, and Ansible supports password
    authentication through the use of the `--ask-pass` switch. If you are connecting
    to an unprivileged account on the hosts, and need to perform the Ansible equivalent
    of running commands under `sudo`, you can also add `--ask-become-pass` when you
    run your playbooks to allow this to be specified at runtime as well.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of automation is to be able to run tasks securely but with the minimum
    of user intervention. As a result, it is highly recommended that you use SSH keys
    for authentication, and if you have several keys to manage, then be sure to make
    use of `ssh-agent`.
  prefs: []
  type: TYPE_NORMAL
- en: Every Ansible task, whether it is run singly or as part of a complex playbook,
    is run against an inventory. An inventory is, quite simply, a list of the hosts
    that you wish to run the automation commands against. Ansible supports a wide
    range of inventory formats, including the use of dynamic inventories, which can
    populate themselves automatically from an orchestration provider (for example,
    you can generate an Ansible inventory dynamically from your Amazon EC2 instances,
    meaning you don't have to keep up with all of the changes in your cloud infrastructure).
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic inventory plugins have been written for most major cloud providers (for
    example, Amazon EC2, Google Cloud Platform, and Microsoft Azure), as well as on-premises
    systems such as OpenShift and OpenStack. There are even plugins for Docker. The
    beauty of open source software is that, for most of the major use cases you can
    dream of, someone has already contributed the code and so you don't need to figure
    it out or write it for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible's agentless architecture and the fact that it doesn't rely on SSL means
    that you don't need to worry about DNS not being set up or even time skew problems
    as a result of NTP not working—these can, in fact, be tasks performed by an Ansible
    playbook! Ansible really was designed to get your infrastructure running from
    a virtually bare operating system image.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s focus on the INI formatted inventory. An example is shown here
    with four servers, each split into two groups. Ansible commands and playbooks
    can be run against an entire inventory (that is, all four servers), one or more
    groups (for example, `webservers`), or even down to a single server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use this inventory file along with the Ansible `ping` module, which
    is used to test whether Ansible can successfully perform automation tasks on the
    inventory host in question. The following example assumes you have installed the
    inventory in the default location, which is normally `/etc/ansible/hosts`. When
    you run the following `ansible` command, you see a similar output to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `ping` module was only run on the two hosts in the `webservers`
    group and not the entire inventory—this was by virtue of us specifying this in
    the command-line parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The `ping` module is one of many thousands of modules for Ansible, all of which
    perform a given set of tasks (from copying files between hosts, to text substitution,
    to complex network device configuration). Again, as Ansible is open source software,
    there is a veritable army of coders out there who are writing and contributing
    modules, which means if you can dream of a task, there's probably already an Ansible
    module for it. Even in the instance that no module exists, Ansible supports sending
    raw shell commands (or PowerShell commands for Windows hosts) and so even in this
    instance, you can complete your desired tasks without having to move away from
    Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: As long as the Ansible control host can communicate with the hosts in your inventory,
    you can automate your tasks. However, it is worth giving some consideration to
    where you place your control host. For example, if you are working exclusively
    with a set of Amazon EC2 machines, it arguably would make more sense for your
    Ansible control machine to be an EC2 instance—in this way, you are not sending
    all of your automation commands over the internet. It also means that you don't
    need to expose the SSH port of your EC2 hosts to the internet, hence keeping them
    more secure.
  prefs: []
  type: TYPE_NORMAL
- en: We have so far covered a brief explanation of how Ansible communicates with
    its target hosts, including what inventories are and the importance of SSH communication
    to all except Windows hosts. In the next section, we will build on this by looking
    in greater detail at how to verify your Ansible installation.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Ansible installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how you can verify your Ansible installation
    with simple ad hoc commands.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed previously, Ansible can authenticate with your target hosts several
    ways. In this section, we will assume you want to make use of SSH keys, and that
    you have already generated your public and private key pair and applied your public
    key to all of your target hosts that you will be automating tasks on.
  prefs: []
  type: TYPE_NORMAL
- en: The `ssh-copy-id` utility is incredibly useful for distributing your public
    SSH key to your target hosts before you proceed any further. An example command
    might be `ssh-copy-id -i ~/.ssh/id_rsa ansibleuser@web1.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure Ansible can authenticate with your private key, you could make use
    of `ssh-agent`—the commands show a simple example of how to start `ssh-agent`
    and add your private key to it. Naturally, you should replace the path with that
    to your own private key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As we discussed in the previous section, we must also define an inventory for
    Ansible to run against. Another simple example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `ansible` command that we used in the previous section has two important
    switches that you will almost always use: `-m <MODULE_NAME>` to run a module on
    the hosts from your inventory that you specify and, optionally, the module arguments
    passed using the `-a OPT_ARGS` switch. Commands run using the `ansible` binary
    are known as ad hoc commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are three simple examples that demonstrate ad hoc commands—they are
    also valuable for verifying both the installation of Ansible on your control machine
    and the configuration of your target hosts, and they will return an error if there
    is an issue with any part of the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ping hosts**: You can perform an Ansible "ping" on your inventory hosts using
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**Display gathered facts**:You can display gathered facts about your inventory
    hosts using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Filter gathered facts**: You can filter gathered facts using the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'For every ad hoc command you run, you will get a response in JSON format—the
    following example output results from running the `ping` module successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Ansible can also gather and return "facts" about your target hosts—facts are
    all manner of useful information about your hosts, from CPU and memory configuration
    to network parameters, to disk geometry. These facts are intended to enable you
    to write intelligent playbooks that perform conditional actions—for example, you
    might only want to install a given software package on hosts with more than 4
    GB of RAM or perhaps perform a specific configuration only on macOS hosts. The
    following is an example of the filtered facts from a macOS-based host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Ad hoc commands are incredibly powerful, both for verifying your Ansible installation
    and for learning Ansible and how to work with modules as you don''t need to write
    a whole playbook—you can just run a module with an ad hoc command and learn how
    it responds. Here are some more ad hoc examples for you to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy a file from the Ansible control host to all hosts in the `frontends` group
    with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new directory on all hosts in the `frontends` inventory group, and
    create it with specific ownership and permissions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a specific directory from all hosts in the `frontends` group with the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `httpd` package with `yum` if it is not already present—if it is
    present, do not update it. Again, this applies to all hosts in the `frontends` inventory
    group:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command is similar to the previous one, except that changing
    `state=present` to `state=latest` causes Ansible to install the (latest version
    of the) package if it is not present, and update it to the latest version if it
    is present:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Display all facts about all the hosts in your inventory (warning—this will
    produce a lot of JSON!):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have learned more about verifying your Ansible installation and
    about how to run ad hoc commands, let's proceed to look in a bit more detail at
    the requirements of the nodes that are to be managed by Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Managed node requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have focused almost exclusively on the requirements for the Ansible
    control host and have assumed that (except for the distribution of the SSH keys)
    the target hosts will just work. This, of course, is not always the case, and
    for example, while a modern installation of Linux installed from an ISO will often
    just work, cloud operating system images are often stripped down to keep them
    small, and so might lack important packages such as Python, without which Ansible
    cannot operate.
  prefs: []
  type: TYPE_NORMAL
- en: If your target hosts are lacking Python, it is usually easy to install it through
    your operating system's package management system. Ansible requires you to install
    either Python version 2.7 or 3.5 (and above) on both the Ansible control machine
    (as we covered earlier in this chapter) and on every managed node. Again, the
    exception here is Windows, which relies on PowerShell instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are working with operating system images that lack Python, the following
    commands provide a quick guide to getting Python installed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Python using `yum` (on older releases of Fedora and CentOS/RHEL
    7 and below), use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'On RHEL and CentOS version 8 and newer versions of Fedora, you would use the
    `dnf` package manager instead:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You might also elect to install a specific version to suit your needs, as in
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian and Ubuntu systems, you would use the `apt` package manager to install
    Python, again specifying a version if required (the example given here is to install
    Python 3.6 and would work on Ubuntu 18.04):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `ping` module we discussed earlier in this chapter for Ansible not only
    checks connectivity and authentication with your managed hosts, but it uses the
    managed hosts' Python environment to perform some basic host checks. As a result,
    it is a fantastic end-to-end test to give you confidence that your managed hosts
    are configured correctly as hosts, with the connectivity and authentication set
    up perfectly, but where Python is missing, it would return a `failed` result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, a perfect question at this stage would be: how can Ansible help
    if you roll out 100 cloud servers using a stripped-down base image without Python?
    Does that mean you have to manually go through all 100 nodes and install Python
    by hand before you can start automating?'
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Ansible has you covered even in this case, thanks to the `raw` module.
    This module is used to send raw shell commands to the managed nodes—and it works
    both with SSH-managed hosts and Windows PowerShell-managed hosts. As a result,
    you can use Ansible to install Python on a whole set of systems from which it
    is missing, or even run an entire shell script to bootstrap a managed node. Most
    importantly, the raw module is one of very few that does not require Python to
    be installed on the managed node, so it is perfect for our use case where we must
    roll out Python to enable further automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of tasks in an Ansible playbook that you might
    use to bootstrap a managed node and prepare it for Ansible management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: We have now covered the basics of setting up Ansible both on the control host
    and on the managed nodes, and we have given you a brief primer on configuring
    your first connections. Before we wrap up this chapter, we will look in more detail
    at how you might run the latest development version of Ansible, direct from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Running from source versus pre-built RPMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is always rapidly evolving, and there may be times, either for early
    access to a new feature (or module) or as part of your own development efforts,
    that you wish to run the latest, bleeding-edge version of Ansible from GitHub.
    In this section, we will look at how you can quickly get up and running with the
    source code. The method outlined in this chapter has the advantage that, unlike
    package-manager-based installs that must be performed as root, the end result
    is a working installation of Ansible without the need for any root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started by checking out the very latest version of the source code
    from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You must clone the sources from the `git` repository first, and then change
    to the directory containing the checked-out code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you can proceed with any development work, or indeed to run Ansible
    from the source code, you must set up your shell environment. Several scripts
    are provided for just that purpose, each being suitable for different shell environments.
    For example, if you are running the venerable Bash shell, you would set up your
    environment with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Conversely, if you are running the Fish shell, you would set up your environment
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have set up your environment, you must install the `pip` Python package
    manager, and then use this to install all of the required Python packages (note:
    you can skip the first command if you already have `pip` on your system):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note that, when you have run the `env-setup` script, you'll be running from
    your source code checkout, and the default inventory file will be `/etc/ansible/hosts`.
    You can optionally specify an inventory file other than `/etc/ansible/hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the `env-setup` script, Ansible runs from the source code checkout,
    and the default inventory file is `/etc/ansible/hosts`; however, you can optionally
    specify an inventory file wherever you want on your machine (see *Working with
    Inventory**,* [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory), for
    more details). The following command provides an example of how you might do this,
    but obviously, your filename and contents are almost certainly going to vary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`ANSIBLE_INVENTORY` applies to Ansible version 1.9 and above and replaces the
    deprecated `ANSIBLE_HOSTS` environment variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed these steps, you can run Ansible exactly as we have
    discussed throughout this chapter, with the exception that you must specify the
    absolute path to it. For example, if you set up your inventory as in the preceding
    code and clone the Ansible source into your home directory, you could run the
    ad hoc `ping` command that we are now familiar with, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, the Ansible source tree is constantly changing and it is unlikely
    you would just want to stick with the copy you cloned. When the time comes to
    update it, you don''t need to clone a new copy; you can simply update your existing
    working copy using the following commands (again, assuming that you initially
    cloned the source tree into your home directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: That concludes our introduction to setting up both your Ansible control machine
    and managed nodes. It is hoped that the knowledge you have gained in this chapter
    will help you to get your own Ansible installation up and running and set the
    groundwork for the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is a powerful and versatile yet simple automation tool, of which the
    key benefits are its agentless architecture and its simple installation process.
    Ansible was designed to get you from zero to automation rapidly and with minimal
    effort, and we have demonstrated the simplicity with which you can get up and
    running with Ansible in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of setting up Ansible—how to install
    it to control other hosts and the requirements for nodes being managed by Ansible.
    You learned about the fundamentals required to set up SSH and WinRM for Ansible
    automation, as well as how to bootstrap managed nodes to ensure they are suitable
    for Ansible automation. You also learned about ad hoc commands and their benefits.
    Finally, you learned how to run the latest version of the code directly from GitHub,
    which both enables you to contribute directly to the development of Ansible and
    gives you access to the very latest features should you wish to make use of them
    on your infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn Ansible language fundamentals to enable you
    to write your first playbooks and to help you to create templated configurations
    and start to build up complex automation workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On which operating systems can you install Ansible? (Multiple correct answers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: B) Fedora
  prefs: []
  type: TYPE_NORMAL
- en: C) Windows 2019 server
  prefs: []
  type: TYPE_NORMAL
- en: D) HP-UX
  prefs: []
  type: TYPE_NORMAL
- en: E) Mainframe
  prefs: []
  type: TYPE_NORMAL
- en: Which protocol does Ansible use to connect the remote machine for running tasks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) HTTP
  prefs: []
  type: TYPE_NORMAL
- en: B) HTTPS
  prefs: []
  type: TYPE_NORMAL
- en: C) SSH
  prefs: []
  type: TYPE_NORMAL
- en: D) TCP
  prefs: []
  type: TYPE_NORMAL
- en: E) UDP
  prefs: []
  type: TYPE_NORMAL
- en: To execute a specific module in the Ansible ad hoc command line, you need to
    use the `-m` option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) True
  prefs: []
  type: TYPE_NORMAL
- en: B) False
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For any questions about installation via Ansible Mailing Liston Google Groups,
    see the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)'
  prefs: []
  type: TYPE_NORMAL
- en: 'How to install the latest version of `pip` can be found here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pip.pypa.io/en/stable/installing/#installation](https://pip.pypa.io/en/stable/installing/#installation)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specific Windows modules using PowerShell can be found here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ansible/ansible-modules-core/tree/devel/windows](https://github.com/ansible/ansible-modules-core/tree/devel/windows)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a GitHub account and want to follow the GitHub project, you can
    keep tracking issues, bugs, and ideas for Ansible:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ansible/ansible](https://github.com/ansible/ansible)'
  prefs: []
  type: TYPE_NORMAL
