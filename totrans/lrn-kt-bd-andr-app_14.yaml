- en: Making Your App Available to the World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having built the app after working many long hours and learning many new things,
    the ultimate satisfaction for a developer is to see users download it with ease
    and enjoy the experience of using the app while getting the most out of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn various steps involved in distributing our app
    via the Google Play Store and Amazon App Store. We will also learn about digitally
    signing our app to verify its authenticity of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the focus will be on learning the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Key store generation through Android Studio and the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the App via the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the App via the Amazon App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key store generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important security features of Android is allowing the installation
    of APKs, but onlyfrom a trusted source such as Google Play Store or Amazon App
    Store. These distribution channels mandate that the developer authenticates the
    app, stating that it is indeed the app that he or she intends for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The owner of the app, that is, the developer, will have the private key, and
    the distribution channel signs this with the corresponding public key. This combination
    of the public and private key means that the digital signature is stored in the  `keyStore` file.
    The `keyStore` is a binary file where the digital keys for signing the app are
    stored.
  prefs: []
  type: TYPE_NORMAL
- en: It is important and mandatory to have the APKs digitally signed before we release
    the app to the Google Play Store for distribution. The digital signature serves
    as authentication of the developer and ensures updates to the app can only be
    made through a trusted source.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to keep the keystore file safe and to remember the key password.
    Once an app is signed and released with the keystore file, any further updates
    to the app can only be done by using the same key.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `KeyStore` can be generated in a couple of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss the steps involved in the generation of the key store in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Key store generation through Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the steps we need to follow for the generation of the key store through
    Android:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we open the project we wish to generate the APK for, click on Build |
    Generate Signed APK**. **This will result in the Generate Signed APK screen to
    be displayed.  Android Studio expects the user to select the Key Store Path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9ac4376-b811-4ff7-b38a-8e030ce63796.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we would be generating a new key store, click on Create new button. This
    will display the New Key Store window as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/444a4f85-f43a-40e8-bf21-79fc39dd9bb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Key Store path and provide a name for the `.jks` (Java Key Store)
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94d5b9d4-a6fc-4004-ad46-b3ef943e9d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we confirm the Key Store path, we are required to fill in the Key Store 
    Password, Key Alias, Password for the key alias, First and Last Name, Organizational
    Unit, Organization, City or Locality, State or Province, and Country Code (XX):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25ecf02c-068d-417a-8988-b7b01c897be8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the required details are filled in and the OK button is clicked, we should
    be able to proceed with the Generate Signed APK screen. Click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0f56374-a0ec-4471-8c32-e69c610ef506.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, we will have the option to choose the APK destination folder and
    the build type. Afterwards, click on the Finish button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f71ee512-86de-4821-adce-fd03db5b1d6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon completion, the confirmation of the generation of the signed APK along
    with the option to locate or analyze the APK is displayed in the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20790051-e811-489b-bcd6-38fe45b1f15c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The signed APK that is digitally signed and eligible for release via the Google
    Play store and other release platforms can be found at the destination folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5be464c0-d783-4cc2-bb4c-444d79bc07c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the keystore generated, whenever we make an update to the
    app in the future, Android Studio will provide us with the Generate Signed APK screen
    with the path, and expects the password to be filled in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2919050f-4ea7-4de4-acf3-2c4c6efe53be.png)'
  prefs: []
  type: TYPE_IMG
- en: Following the same process described in new *key store* *generation*, users
    should be able to generate the signed APK.
  prefs: []
  type: TYPE_NORMAL
- en: Auto signing the APK through Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have the option to have the signed APK generate automatically whenever changes
    are made to the app. This can be achieved by doing the following in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Right click on **App** | **Project Structure**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Signing tab. In this tab, we need to provide the details of the
    app signing configuration. Here, we have named it `config`and we are storing the
    Key Alias, Password, and the path to the store file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6705b337-6114-47cb-8b5a-ea447d13b43f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding the signing `config` will result in signing details being added to the `build.gradle`
    file as plain text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is prudent to move this information out of build files to ensure that sensitive
    information is not easily accessible by others.  In the root directory of the
    project, we should create a file called `keystore.properties`. This file will
    contain the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we have moved the Key Store details to a separate file, we should now add
    the following code in the `build.gradle` file to ensure that the signing config
    is available for auto signing the APKs.  We should load the `keystore.properties`
    file before the `android{}` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this code, we are creating a variable called `keystorePropertiesFile`and
    initializing it with the `keystore.properties`file which we created.  Furthermore,
    we initialize a new `Properties()`object called `keyStoreProperties`. The details
    of the `keystorePropertiesFile` are loaded into the `keystoreProperties` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the addition of the preceding code, we can refer to all properties stored
    in the `keystoreProperties`using the syntax `keystoreProperties[''propertyName'']`***. ***
    We should be able to modify the signing config present in the `build.gradle` file
    as plain text, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The build file is now secure and does not include any sensitive information.
    If we are to use any source control or share the code base, we need to ensure
    that the `keystore.properties` file is removed and kept secure.
  prefs: []
  type: TYPE_NORMAL
- en: Build types and flavors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers can maintain variants in build types, and these can be configured
    through the `build.gradle` file. The configuration makes it easy for developers
    to maintain the debugging code and the release version of the code in the same
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debug:** Turns debug options **ON** and can also sign the app with the debug
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release:** Turns debug options **OFF**, signs the app with the release key,
    and also reduces or removes code related to debugging from the final APK'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can define the type of build—debug or release, in Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Right click on app | Project structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Build Types tab, we need to add a new type of build variant. We have
    two build types, debug and release, which are shown in the following screenshot. 
    While creating the Build Types, we will have the option to select the Signing
    Config for the build variant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bfdaa86-84ef-475d-98c3-f8a730347f15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will add the following code in the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Providing basic features on the free app and preimum features of the paid app
    is a generic norm in the app world. Android provides the option of defining them
    as **productFlavors**.
  prefs: []
  type: TYPE_NORMAL
- en: Free and paid are common product flavors used by developers. By defining various
    product flavors, developers will have the option to maintain different code and
    thereby different or extra features for the same app. The code base for the common
    functionality offered by free and Paid versions can be the same, while the premium
    features can be enabled for the paid product flavor version of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a product flavor, right click on **app** |** Project Structure**,
    and in the Flavors tab, you can define the product flavors—free or paid. The signing
    configuration can also be customized to match the `productFlavors`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a356a2e-9508-438b-bdd1-c5fc96c1f43f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `build.gradle` file will contain the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Key store generation through the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Key store can also be generated via the command line using the keytool**. **The
    keytool is available in the `bin` directory of the jdk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22b2c77a-f1e9-4695-aba5-e564962563cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Launch the command prompt and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f0f113f4-e4de-4e86-9980-416174331acc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding command takes a keystore path, the type of security algorithm
    to be used for the key sign, the size of the key, validity, and the key alias
    name. Once the preceding command is executed, we are be required to provide the
    password and a few more additional details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caa30500-3927-480a-a911-2c3a334bd3ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On successful execution of the command, we can find the `keystore` file being
    generated at the same location of the keytool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/983beac9-97b7-469e-9d31-697c2feee2ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Publishing the app in Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the signed release version of the APKs available with us, it
    is time to publish them via the Google Play Store for worldwide distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Registration for Google Play Store developer accounts requires a one time fee
    of $25\. Log on to [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/) and
    complete the registration process.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play Store provides an excellent console for the developers called
    the Google Play Console. This developer console contains all the features required
    to manage the Android application publishing life cycle.  We shall look at the
    important features that enable us to publish our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step for publishing the app is to create the app in the Google Play
    Console. The console provides an option to create the application, which kick-starts
    the process of publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9df6089-18c7-475c-9afa-0ca69b0589f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click on Create Application, we will be prompted to enter the default
    language and the title for the app. Clicking the createbutton will create the
    app for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a255bae-7921-4d7c-b96d-5212483e4c62.png)'
  prefs: []
  type: TYPE_IMG
- en: The developer console provides a host of options for the developer to fill in
    in the menu. However, there are four important and mandatory sections that one
    needs to fill in to ensure that the app can be published.
  prefs: []
  type: TYPE_NORMAL
- en: 'These four sections are App releases, Store listing, Content rating, and Pricing
    & distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04b29151-2e78-4a46-a1a4-7050d5c96498.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's focus on the details that need to be filled in for these mandatory
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: App release section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The app release section enables the developer to manage the entire life cycle
    of APK release. Developers can distribute their app for internal testing, alpha,
    and beta release before moving the APK into production for public distribution. 
    The various stages of release help developers to collect feedback on the app by
    restricting the app so that it is only available to specific users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a8a61a8-455c-47e5-ad6e-e8e5dc016d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to upload the signed APK that was generated for the build type release
    in order for the production to roll out. One can browse the APK files and get
    them uploaded to the Play Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cae8811-de6a-4876-a4df-137356ab8e34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the APK is uploaded, the same can be found in the release section with
    a version code and the option to remove the APK. Uploading the signed APK completes
    the details required for the app release section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/096fdd4c-2235-4c42-bf7c-5b8aa11d4e8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Store listing section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Store listing section is the next section to focus on. It is an important
    section, as it is where users will get to see the various screenshots, short,
    and detailed descriptions of the app.  Developers will have the option to save
    a draft and come back any time to continue filling in the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/359584c3-af8d-4675-99f4-da36313b2a10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Google Play Store, the store listing section mandates the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Two screenshots of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hi-res icon - 512 * 512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A feature graphic - 1,024 W  x 500 H:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d35945b8-42d4-483e-b49a-d7aa64bc8316.png)'
  prefs: []
  type: TYPE_IMG
- en: Creation of the graphical assets can be done using free image editors such as **gimp.**
    It is important and mandatory to follow the guidelines of the graphic specification.
  prefs: []
  type: TYPE_NORMAL
- en: Developers will be required to provide the type and category of the application
    along with contact details and the privacy policy, if there is one. Once all of
    the details are provided, the store listing section will be complete.
  prefs: []
  type: TYPE_NORMAL
- en: Content rating section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers should do a self declaration of the content provided in the app.
    The content rating section has a questionnaire which requests developers to provide
    specific answers. Answering the questionnaire is a straightforward task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7babce2-d3f2-4444-9191-da12983dff6f.png)'
  prefs: []
  type: TYPE_IMG
- en: It is important that developers provide the right information about the content
    of the app, as providing incorrect information can affect the store listing.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing and distribution section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last and final mandatory section, pricing and distribution, requires developers
    to provide information related to the pricing of their app—free or paid, the list
    of countries the app is to be distributed to, if the app if primarily directed
    at children, if the app contains ads, content guidelines, and an affirmation from
    the developer to comply with US export laws:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ead3aba-fa15-4fba-9cdb-b87d0004667b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the developer provides all the necessary details in the pricing and distribution
    section, a message stating Ready to publishwill appear.  Also, note that all four
    mandatory sections are marked in green, stating that they have been completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2351c62b-d7cd-441b-b1e7-63d2dad21fed.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the app is submitted for publishing, it is reviewed and made available
    for download within a few hours. In case any queries are raised, developers needs
    to address them and resubmit the app for release.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the app in Amazon Appstore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon Appstore provides a free market place for developers to distribute
    their Android app. Developers can log on and create their free account at the
    following URL: [https://developer.amazon.com/apps-and-games/app-submission/android.](https://developer.amazon.com/apps-and-games/app-submission/android)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we log in to the appstore, we will need to click on the Add Android Appbutton
    in the amazon appstore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c12f4793-9c16-4dec-ae88-9d976ab7483a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Amazon Appstore requires the following sections to be filled in: General
    Information, Availability & Pricing, Description, Images & Multimedia, Content
    Rating, and Binary File(s).
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at each of these sections in detail.
  prefs: []
  type: TYPE_NORMAL
- en: General information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the general information section, developers are required to provide information
    about the app title, package name, app ID, release ID, category of the app, and
    contact details of the developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c446bd6e-a3cb-4e76-9c7d-a80e60a2fe75.png)'
  prefs: []
  type: TYPE_IMG
- en: Availability & Pricing section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, the developers are expected to provide information about:'
  prefs: []
  type: TYPE_NORMAL
- en: The app's pricing—free or paid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of countries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The date and time for the app to be published:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3cadd242-28fb-4f5f-bdaf-dfd0394e1707.png)'
  prefs: []
  type: TYPE_IMG
- en: Description section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Description section, developers are expected fill in details about the
    title, short description, and long description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11555c56-54bf-4cad-84b2-ceaac768536e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This section also enables developers to provide Product feature bullets and
    specific Keywords which identify the app. Users will also have the option to add
    localized descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f73a9a7-764c-4fb2-ad00-6dc976fe6ec6.png)'
  prefs: []
  type: TYPE_IMG
- en: Images & Multimedia section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Images & Multimedia section, developers are expected to enter the graphical
    assets related to the app. The users are expected to provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Icons**: 512 * 512 PNG and 114 * 114 PNG'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screenshots**: Between 3 to 10 PNGs or JPGs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also an option to provide graphics related to form factors such as
    tablets and phones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5f4f1c9-ae66-4fdd-a738-d1527f517065.png)'
  prefs: []
  type: TYPE_IMG
- en: Content Rating section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Content Rating section, developers are expected to answer a set of questions
    related to the nature of the content displayed in the app. These questions come
    under the subject matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cd6474e-a7d1-4452-a00b-8751e678ba4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The developers are expected to answer questions about the usage of location-based
    services, ads in the app, provide a privacy policy (if any), and disclose whether
    the app is directed at children under the age of 13:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecc4aa67-40d5-4c04-90bd-f3fe1b02f53e.png)'
  prefs: []
  type: TYPE_IMG
- en: Binary File(s) section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, developers are expected to upload the signed APK generated
    from Android Studio or the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39094e6c-ad97-4a9e-8066-7ebae7a6288c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Developers also get the option to decide on Device Support, Language Support,
    Export Compliance, and Use Amazon Maps Redirection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16c9800e-def0-4976-8a77-640b27a3725e.png)'
  prefs: []
  type: TYPE_IMG
- en: Device support for non-Amazon Android devices is NOT enabled by default. Developers
    need to enable this explicitly by clicking on Edit device support and making the
    changes required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having filled out all the required information, it is time to actually publish
    the app in the Amazon Appstore. Developers will have an option to review all the
    information they have entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9258231-4b5a-419d-98a8-164c1bebf487.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The store listing, key words, description, and so on play a huge role in the
    identification of apps and ultimately toward the success of the app and the developer.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we discussed the various steps involved in the generation of
    the keystore file using Android Studio, signing APKs automatically, generating
    the keystore file from the command line, and publishing the app via the Google
    Play Store and the Amazon Appstore.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about working with one of the most interesting
    and important APIs available to us—the Google Faces API. The Google Faces API
    enables developers to provide cool features such as facial detection, identification
    of people in a photograph, and so on.
  prefs: []
  type: TYPE_NORMAL
