- en: Chapter 23. Android Sound Effects and the Spinner Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will study the `SoundPool` class and the different ways
    we can use it depending on whether we just want to play sounds or go further and
    keep track of the sounds we are playing. Then, we will put everything we will
    have learned into action by producing a cool sound demo app, which will also introduce
    us to a new UI widget: the **spinner**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the Android `SoundPool` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code a sound-based app using `SpinnerView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: The SoundPool class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `SoundPool` class allows us to hold and manipulate a collection of sound
    effects: literally, a pool of sounds. The class handles everything from decompressing
    a sound file, such as a `.wav` or a `.ogg` file, keeping an identifying reference
    to it via an integer ID, and, of course, playing the sound. When the sound is
    played, it is played in a non-blocking manner (using a thread behind the scenes)
    that does not interfere with the smooth running of our app or our user''s interaction
    with it.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is add the sound effects to a folder called `assets`
    in the `main` folder of the game project. We will do this shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in our Kotlin code, we declare an object of the `SoundPool` type and
    an `Int` identifier for each sound effect we intend to use, as shown in the following
    code. We will also declare another `Int` called `nowPlaying`, which we can use
    to track which sound is currently playing; we will see how we do this shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will look at the way we initialize a `SoundPool`.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing SoundPool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use an `AudioAttributes` object to set the attributes of the pool of
    sound we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first block of code uses chaining, and calls four separate functions on
    one object that initializes our `AudioAttributes` object (`audioAttributes`),
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we used the `Builder` function of this class to initialize
    an `AudioAttributes` instance to let it know that it will be used for user interface
    interaction with `USAGE_ASSISTANCE_SONIFICATION`.
  prefs: []
  type: TYPE_NORMAL
- en: We also used `CONTENT_TYPE_SONIFICATION`, which lets the class know that it
    is for responsive sounds, for example, button clicks, a collision, or similar.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can initialize the `SoundPool` (`sp`) itself by passing in the `AudioAttributes`
    object (`audioAttributes`) and the maximum number of simultaneous sounds we are
    likely to want to play.
  prefs: []
  type: TYPE_NORMAL
- en: The second block of code chains another four functions to initialize `sp`, including
    a call to `setAudioAttributes` that uses the `audioAttributes` object that we
    initialized in the earlier block of chained functions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can go ahead and load up (decompress) the sound files into our `SoundPool`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading sound files into memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like our thread control, we are required to wrap our code in `try`-`catch` blocks.
    This makes sense because reading a file can fail for reasons beyond our control,
    but we also do this because we are forced to, as the function that we use throws
    an exception and the code we write will not compile otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `try` block, we declare and initialize objects of the `AssetManager`
    and `AssetFileDescriptor` types.
  prefs: []
  type: TYPE_NORMAL
- en: The `AssetFileDescriptor` is initialized by using the `openFd` function of the
    `AssetManager` object that decompresses the sound file. We then initialize our
    ID (`idFX1`) at the same time that we load the contents of the `AssetFileDescriptor`
    instance into our `SoundPool`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `catch` block simply outputs a message to the console to let us know whether
    something has gone wrong, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to make some noise.
  prefs: []
  type: TYPE_NORMAL
- en: Playing a sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, there is a sound effect in our `SoundPool`, and we have an ID
    that we can use to refer to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how we play the sound. Note that in the following line of code, we
    initialize the `nowPlaying` variable with the return value from the same function
    that plays the sound. The following code therefore simultaneously plays a sound
    and loads the value of the ID that is being played into `nowPlaying`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not necessary to store the ID in `nowPlaying` in order to play a sound,
    but it has its uses, as we will now see.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters of the `play` function are as follows, from left to right:'
  prefs: []
  type: TYPE_NORMAL
- en: The ID of the sound effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left and right speaker volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The priority over other sounds that might be playing/played
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of times the sound is repeated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rate/speed it is played at (1 being the normal rate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's just one more thing we need to cover before we make the sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping a sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also very easy to stop a sound when it is still playing by using the
    `stop` function, as shown in the following code. Note that there might be more
    than one sound effect playing at any given time, so the `stop` function needs
    the ID of the sound effect that you want to stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When you call `play`, you only need to store the ID of the currently playing
    sound if you want to track it so that you can interact with it later. Now, we
    can make the Sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: Sound demo app introducing the Spinner widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, with all this talk of sound effects, we need some actual sound files.
    You can make you own with BFXR (as explained in the next section) or use the ones
    supplied. The sound effects for this app are in the download bundle, and can be
    found in the `assets` folder of the `Chapter23/Sound Demo` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Making sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is an open source app called BFXR that allows us to make our own sound
    effects. Here is a very fast guide to making your own sound effects using BFXR.
    Grab a free copy from [www.bfxr.net](http://www.bfxr.net).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the sound effects for the Sound demo app are supplied to you in the
    `Chapter23/assets` folder. You don't have to create your own sound effects unless
    you want to, but it is still worth getting this free software and learning how
    to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the simple instructions on the website to set it up. Try out a few of
    these things to make cool sound effects:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a seriously condensed tutorial. You can do so much with BFXR. To learn
    more, read the tips on the website at the URL we mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: Run `bfxr`. You should see a screen similar to the one shown in the following
    screenshot:![Making sound effects](img/B12806_23_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try out all the preset types that generate a random sound of that type, as shown
    in the following screenshot. When you have a sound that is close to what you want,
    move on to the next step:![Making sound effects](img/B12806_23_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the sliders to fine-tune the pitch, duration, and other aspects of your
    new sound, as shown in the following screenshot:![Making sound effects](img/B12806_23_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your sound by clicking the **Export Wav** button, as shown in the following
    screenshot. Despite the text of this button, as we will see, we can also save
    in formats other than `.wav`:![Making sound effects](img/B12806_23_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android works very well with sounds in OGG format, so when asked to name your
    file, use the `.ogg` extension at the end of the filename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 2 to 5 to create three cool sound effects. Name them `fx1.ogg`,
    `fx2.ogg`, and `fx3.ogg`. We use the `.ogg` file format as it is more compressed
    than formats such as WAV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have your sound files ready, we can proceed with the app.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the sound demo UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will describe the parts of the project we are getting used to a little more
    briefly than I did in previous projects. Every time there is a new concept, however,
    I will be sure to explain it in full. I guess by now you will be just fine dragging
    a few widgets onto a `ConstraintLayout` and changing their `text` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the following steps, and if you have any problems, you can copy or
    view the code in the `Chapter23/Sound Demo` folder of the download bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project, call it `Sound Demo`, choose a **Basic Activity**, and
    choose **API 21: Android 5.0 (Lollipop)** on the **Minimum API level** option,
    but leave all the other settings at their defaults and delete the **Hello world!**
    `TextView`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this order, from top to bottom, and then from left to right, drag a **Spinner**
    from the **Containers** category, a **SeekBar** **(discrete)** from the **Widgets**
    category, and four **Buttons** from the palette onto the layout while arranging
    and resizing them and setting their `text` properties, as shown in the following
    screenshot:![Laying out the sound demo UI](img/B12806_23_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Infer Constraints** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following table to set their attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Widget | Property to change | Value to set |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Spinner | id | `spinner` |'
  prefs: []
  type: TYPE_TB
- en: '| Spinner | spinnerMode | `dropdown` |'
  prefs: []
  type: TYPE_TB
- en: '| Spinner | entries | `@array/spinner_options` |'
  prefs: []
  type: TYPE_TB
- en: '| SeekBar | id | `seekBar` |'
  prefs: []
  type: TYPE_TB
- en: '| SeekBar | max | `10` |'
  prefs: []
  type: TYPE_TB
- en: '| Button (**FX 1**) | id | `btnFX1` |'
  prefs: []
  type: TYPE_TB
- en: '| Button (**FX 2**) | id | `btnFX2` |'
  prefs: []
  type: TYPE_TB
- en: '| Button (**FX 3**) | id | `btnFX3` |'
  prefs: []
  type: TYPE_TB
- en: '| Button (**STOP**) | id | `btnStop` |'
  prefs: []
  type: TYPE_TB
- en: 'Next, add the following highlighted code to the `strings.xml` file in the `values`
    folder. We used this array of String resources, which is named `spinner_options`,
    for the `options` property in the previous step. It will represent the options
    that can be chosen from our spinner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and you will not initially see anything that you haven''t seen
    before. If you click on the spinner, however, then you will see the options from
    our String array called `spinner_options`. We will use the spinner to control
    the number of times a sound effect repeats itself when played, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Laying out the sound demo UI](img/B12806_23_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's write the Kotlin code to make this app work, including how we interact
    with our spinner.
  prefs: []
  type: TYPE_NORMAL
- en: Using your operating system's file browser, go to the `app\src\main` folder
    of the project and add a new folder called `assets`.
  prefs: []
  type: TYPE_NORMAL
- en: There are three sound files ready-made for you in the `Chapter23/Sound Demo/assets`
    folder of the download bundle. Place these three files into the `assets` directory
    you just created or use the ones you created yourself. The important thing is
    that their filenames must be `fx1.ogg`, `fx2.ogg`, and `fx3.ogg`.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the Sound demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will change the class declaration so that we can handle interaction
    with all our widgets efficiently. Edit the declaration to implement `View.OnClickListener`,
    as highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will add the required `onClick` function shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add some properties for our `SoundPool` instance, sound effect
    IDs, and a `nowPlaying Int` property, as we discussed previously, and we will
    also add a `Float` to hold a value for a volume between 0 (silent) and 1 (full
    volume, based on the current volume of the device). We will also add an `Int`
    property called `repeats`, which, unsurprisingly, holds the value of the number
    of times we will repeat a given sound effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we also added an `init` block where we initialized our
    `SoundPool` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code to work using your
    preferred method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `onCreate` function, we can set a click listener for our buttons
    in the usual way, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Be sure to add the following `import` to make the preceding code work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we load each of our sound effects in turn and initialize our IDs with
    a value that matches the related sound effect that we load into the `SoundPool`.
    The whole thing is wrapped in a `try`-`catch` block, as required, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will look at how we are going to handle the `SeekBar`. As you have
    probably come to expect, we will use a lambda. We will use `OnSeekBarChangeListener`
    and override the `onProgressChanged`, `onStartTrackingTouch`, and `onStopTrackingTouch`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need to add code to the `onProgressChanged` function. Within this function,
    we simply change the value of our `volume` variable and then use the `setVolume`
    function on our `SoundPool` object, passing in the currently playing sound effect
    and the volume of the left and right channels of sound, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After the `SeekBar` comes the `Spinner` and another lambda to handle user interaction.
    We will use the `AdapterView.OnItemSelectedListener` to override the `onItemSelected`
    and `onNothingSelected` functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'All our code goes in to the `onItemSelected` function, which creates a temporary
    `String` named `temp`, and then uses the `Integer.ValueOf` function to convert
    the `String` in to an `Int`, which we can use to initialize the `repeats` property,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following `import` statements to the previous code using your preferred
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: That's everything for the `onCreate` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, implement the `onClick` function, which is required because this class
    implements the `View.OnClickListener` interface. Quite simply, there is a `when`
    option for each button. Note that the return value for each call to `play` is
    stored in `nowPlaying`. When the user presses the **STOP** button, we simply call
    `stop` with the current value of `nowPlaying`, causing the most recently started
    sound effect to stop, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can now run the app. Make sure that the volume on your device is turned up
    if you can't hear anything.
  prefs: []
  type: TYPE_NORMAL
- en: Click the appropriate button for the sound effect you want to play. Change the
    volume and the number of times it is repeated and, of course, try stopping it
    with the **STOP** button.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that you can repeatedly tap multiple play buttons when a sound effect
    is already playing, and the sounds will be played simultaneously up to the maximum
    number of streams that we set (five).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked closely at how to use `SoundPool`, and we used all
    this knowledge to complete the Sound demo app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how to make our apps work with multiple
    different layouts.
  prefs: []
  type: TYPE_NORMAL
