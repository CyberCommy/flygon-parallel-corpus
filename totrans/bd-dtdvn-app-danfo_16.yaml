- en: '*Chapter 13*: Appendix: Essential JavaScript Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the final chapter of this book. We have placed this chapter at the
    end of this book so as not to bore the experienced JavaScript developers with
    introductory concepts. This chapter should be read by developers who want a refresher
    on the basics of JavaScript before attempting to use `Danfo.js`.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll understand basic concepts of JavaScript that
    are essential to building applications in the language. You'll learn about data
    types, conditional branching and looping constructs, and JavaScript functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we''ll cover the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick overview of JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the fundamentals of JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using the developer console for all code examples in this chapter.
    To run any code snippet in your default browser, you need to open the developer
    console. The commands for opening the console provided for various browsers are
    shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Chrome**: To open the developer console in Google Chrome, open the
    **Chrome** menu from the upper-right-hand corner of the browser window and select
    **More Tools** | **Developer Tools**. You can also use the *Option* + *Command*
    + *J* shortcut on macOS, or *Shift* + *Ctrl* + *J* on Windows/Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Edge**: In Microsoft Edge, open the **Edge** menu in the upper-right-hand
    corner of the browser window and select **F12 Developer Tools**, or you can just
    press *F12* to open it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mozilla Firefox**: In Mozilla Firefox, click on the **Firefox** menu in the
    upper-right-hand corner of the browser and select **Web Developer** | **Browser****Console**.
    You can also use the *Shift* + *⌘* + *J* shortcut on macOS or *Shift* + *Ctrl*
    + *J* on Windows/Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple Safari**: In Safari, you''ll first need to enable the **Developer**
    menu in your browser settings. To do that, open Safari''s preferences (*Safari
    Menu* | **Preferences**), select the **Advanced** tab, and then enable the **Developer**
    menu. Once that menu is enabled, you will find the developer console by clicking
    on **Develop** | **Show JavaScript Console**. You can also use the *Option* +
    *⌘* + *C* shortcut.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once your developer console is open, depending on your browser, you will see
    a console similar to the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Chrome browser developer console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_13_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Chrome browser developer console
  prefs: []
  type: TYPE_NORMAL
- en: With your console open, you're ready to start writing and testing JavaScript
    code. In the next section, we'll quickly go over some important concepts of the
    JavaScript language.
  prefs: []
  type: TYPE_NORMAL
- en: Quick overview of JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the *Stack Overflow 2020 Developer Survey* ([https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/](https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/)),
    **JavaScript** (also referred to as **JS**) is the most common programming language
    in the world, with approximately 70% of developers using it for one task or another.
    This statistic is not surprising as JavaScript had been the most popular language
    for a good number of years before the survey was carried out. There are many reasons
    why this is so, and we will list some of them here:'
  prefs: []
  type: TYPE_NORMAL
- en: It runs in the most common and readily available platform—the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numerous useful frameworks such as Node.js, React, and Angular are built around
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is versatile—that is, it can be used for both frontend and backend applications.
    For example, you can use JavaScript libraries such as React, Vue, and Angular
    to build great **user interfaces** (**UIs**), while you can use server-side packages
    such as Node.jS and Deno to build efficient backend/server-side applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used for **Internet of Things** (**IoT**) and cross-platform mobile
    applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript was initially created to be a browser-only language but has quickly
    evolved to be used almost everywhere, from frontend applications to backend applications
    with Node.js, to IoT applications, and—more recently—in the data science/**machine
    learning** (**ML**) field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse JavaScript with the Java programming language ([https://en.wikipedia.org/wiki/Java_(programming_language)](https://en.wikipedia.org/wiki/Java_(programming_language))).
    Although the names may be similar, they are very much different in terms of use,
    syntax, and even semantics.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is dynamic and event-driven and thus is the subject of numerous concerns,
    especially for programmers coming from other languages. This has led to the creation
    of languages that can be directly transpiled to JavaScript. Some of these languages
    are **TypeScript** (a language with strict data typing developed by Microsoft),
    **Dart** (a standalone language developed by Google), **CoffeeScript**, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the fundamentals of JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, as a memory refresher, we'll quickly go over the basic concepts
    of modern JavaScript. If you are familiar with JavaScript, then you can skip this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: As we have repeatedly mentioned, JavaScript can be used for both frontend and
    server-side scripting, so there is syntax or features that are particular to each
    environment— for instance, browser-side JavaScript does not have access to filesystems
    such as Node.js because of security reasons. So, in this section, we'll introduce
    concepts that can work in both environments/any environment.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`const` and `let`, although in older scripts, you''ll find the `var` keyword
    used for declaring variables. Using `var` for variable declaration is generally
    discouraged and should only be used rarely. In a later section, we will discuss
    some reasons why it is encouraged to use `let` instead of `var` in modern JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following statement declares a variable using the `let` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The next keyword, `const`, can be used to declare a constant variable—that is,
    a variable whose reference cannot be changed during the runtime of an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of `const` declarations are shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Using uppercase variable names when declaring constants is a common and widely
    encouraged practice, not just in JavaScript but in many programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript supports eight basic types of data. Data types of declared variables
    are automatically inferred at runtime by the JavaScript compiler because JavaScript
    is a dynamically typed language. The eight supported data types are **number**,
    **string**, **Boolean**, **object**, **BigInt**, **undefined**, **null**, and
    **symbol**.
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `number` type can represent `integers`, `floating-point numbers`, `infinity`,
    `-infinity`, and `number`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '`infinity` and `-infinity` represent mathematical positive and negative infinity
    (∞). These values are bigger than any number. You can see an example here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(1 / 0); // Infinity`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NaN` sub-types represent an error in a mathematical operation with numbers—for
    instance, trying to divide a string with a number, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log("girl" / 2); // NaN`'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Strings in JavaScript represent texts and must be surrounded with single (`''
    ''`), double (`" "`), or backtick (`'' ''`) quotes. You can see some examples
    of strings in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The choice of double or single quotes is based on preference as they both perform
    the same function. Backticks, on the other hand, have more functionalities than
    basic quotes. They allow you to embed variables and expressions into strings easily,
    using the `${...}` template literal syntax. For example, in the following code
    snippet, we show how to easily embed `name`, `address`, and `dog_counts` variables
    in a new variable message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: A string data type has many built-in functions for manipulating it. You can
    find many of these functions on the **Mozilla Developer Network** (**MDN**) documentation
    page ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)).
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Boolean data type is a logical type. It has only two values: `true` and
    `false`. Boolean values are mostly used in comparison operations and for storing
    *yes*/*no* values. Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's talk about the object type.
  prefs: []
  type: TYPE_NORMAL
- en: Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The object in JavaScript is a very special type. It is perhaps the most important
    type in JavaScript and is used in almost every aspect of the language. The object
    data type is the only non-primitive type in JavaScript. It can store keyed collections
    of different types of data, including itself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Primitive types in programming languages are the most basic types and generally
    store a single kind of value. Non-primitive types, on the other hand, can store
    more than one type of value and can also be extended to perform other functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways for creating objects, outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first and most common way is to use curly brackets with an optional list
    of key-value properties, as illustrated here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`let page = {}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And a not so common way is by using object constructor syntax, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`let page = new Object()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects can be created and initialized in the same step, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that an object page can store numerous types of data, even other objects
    (as the owner). This shows that objects can be nested to contain more and more
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access object values, you can use square brackets, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use dot `page.rank` notation, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In [*Chapter 1*](B17076_01_ePub_RK.xhtml#_idTextAnchor014), *Overview of Modern
    JavaScript*, you learned about some important properties of objects that make
    them very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional branching and loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditional branching and loops are important aspects of any programming language,
    and JavaScript provides them as well. To perform different actions based on some
    conditions, you can use `if`, `if..else`, conditional/ternary operators, and `switch`
    syntax. Besides conditional branching, you may want to perform repeated actions
    a specific number of times. This is where looping comes into play. JavaScript
    provides looping constructs such as `while`, `do...while`, `for..of`, `for..in`,
    and traditional `for` loops. We'll briefly cover each of these statements in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: if statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An `if` statement evaluates an expression, a condition, or a piece of code
    in the parentheses and will only execute the statement if it is `true`. This is
    a one-way conditional that only runs when it is true. You can see an example of
    this in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: if...else statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An `if...else` statement provides an extra block that runs when the initial
    condition becomes `false`. Here is an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Conditional/ternary operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A ternary operator is a shorter and more concise way to write an `if..else`
    statement. It is mostly used in assigning variables based on two conditions. The
    syntax for ternary operators is illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the condition is true, then `val1` gets executed and assigned to `result`,
    else `val2` becomes assigned. An example of using this is shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: switch statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `switch` statement can be used to replace multiple `if...else` statements
    in a more concise and readable way. The syntax is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The variable or expression in the `switch` parentheses is checked against each
    `case` statement, and the corresponding code is executed if the condition is true.
    The default statement gets executed when every other condition fails. The following
    code snippet shows an example of using a `switch` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A `break` statement after each case is important in order to stop the execution
    of succeeding cases. If you neglect the `break` statement, then the succeeding
    cases will also be executed.
  prefs: []
  type: TYPE_NORMAL
- en: while loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `while` loop will execute a block of code repeatedly as long as the condition
    is true. The syntax is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the following example of using a `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will continually print out the year as long as it is less
    than or equal to `2020`. Note the `year++` part. This is important in order to
    break the `while` loop at some point.
  prefs: []
  type: TYPE_NORMAL
- en: do…while loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `do...while` loop is very similar to a `while` loop, with just one little
    difference— the body is executed at least once before the condition is tested.
    The syntax is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the following example of a `do...while` loop in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: A `do...while` loop is important if you need to execute a piece of code at least
    once before a conditional check is carried out.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Always remember to set a condition that breaks a loop at some point, else your
    loops will execute forever—theoretically, though, the browser and server side
    will stop such loops after a certain time.
  prefs: []
  type: TYPE_NORMAL
- en: for loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `for` loop is the most popular looping construct in JavaScript. The syntax
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax has three important parts, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`let i = 0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The condition part**: This code is checked before each loop interaction.
    If this is false, then the loop is stopped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The step part**: The step is important because it will generally increase
    a counter or variable that will be tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of using a `for` loop is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we used a post-incremental operator (`i++)` in the step part of
    the `for` loop? This is pretty standard, and this is just shorthand for `i = i
    + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: for...of and for...in loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`for...of` and `for...in` loops are variants of a `for` loop for iterating
    over iterables. **Iterables** are special data types such as objects, arrays,
    maps, and strings that have an iterable property—in other words, the properties
    or values can be looped through.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `for...of` loop is mostly used for iterating over objects such as arrays
    and strings. The syntax is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the following example of using a `for...of` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'A `for...in` loop is used to loop over objects. The syntax is very similar
    to a `for...of` loop, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: A `for...in` loop should be used only with enumerables such as objects and not
    with iterables such as arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using a `for...in` loop is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: '`for...in` and `for...of` are looping constructs that are used to iterate over
    data structures. The main difference between them is the data structure they iterate
    over. `for...in` iterates over all enumerable property keys of an object, while
    `for...of` iterates over the values of an iterable object.'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn about JavaScript functions. `console.log` built-in
    function whenever we need to print text to the console. This shows how important
    functions can be, as a single function, once defined, can be called in any way
    and any number of times to perform the same action.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function in JavaScript typically looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can also take a list of comma-separated parameters inside parentheses,
    which can be used to perform computation. For instance, a function with some parameters
    will typically look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Some important things to note about functions are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables declared inside a function are local to that function and can only
    be accessed inside the function. Here''s an example of this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can access global variables. Global variables are variables declared
    outside the function scope and are available to every code block. You can see
    an example of this here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can return values. This is important when a function performs some
    computation and the result needs to be used elsewhere. The functions we have been
    working with up till now mostly return nothing/undefined and they are referred
    to as void functions. Let''s look at the following example of a function returning
    a value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The `return` statement in a function can only return a single value at a time.
    In order to return more than one value, you can return the result as a JavaScript
    object. You can see an example of this here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function add(num1, num2) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let sum = num1 + num2`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return {sum: sum, funcName: "add"}}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let result = add(25, 30)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(result)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`//output`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object { funcName: "add", sum: 55}`'
  prefs: []
  type: TYPE_NORMAL
- en: Callback functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Callbacks are very important in JavaScript. A callback is a function passed
    into another function as an argument. This argument is called to perform some
    action based on some conditions in the outer function. Let''s look at the following
    example to better understand callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code example, we created two callback functions, `showValue`
    and `error`. You can see these in use in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `showValue` callback function prints the argument passed to it to the console,
    while the `error` callback function prints an error message. The callback functions
    can now be used, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `printValues` function first tests if the value is greater than `0`, and
    then either calls the `showValue` or the `error` callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Callbacks don't just take in named functions. They can also take in anonymous
    functions; with this, it is possible to create *nested callbacks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we have a `doSomething` function that does a particular task,
    and we would like to perform different operations before the task is completed.
    That means we can pass a callback function to another callback function, thereby
    creating nested callbacks, as shown in the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is what we call a *callback hell*. This approach has lots
    of issues and becomes difficult to manage. In [*Chapter 1*](B17076_01_ePub_RK.xhtml#_idTextAnchor014),
    An *Overview of Modern JavaScript*, we introduced a modern and more efficient
    way to work with callbacks by using a **application programming interface** (**API**).
    This is much cleaner and will eliminate many of the problems associated with callback
    hell.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is asynchronous by default, thus long executing functions are queued
    and may never get executed before you need them. Callbacks are mostly used to
    continue code execution and ensure that the right result is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced essential aspects of the JavaScript programming
    language. We started with some basic background that explained why JavaScript
    is the most popular language in the world today, as well as the various uses of
    JavaScript. Next, we looked at the fundamental concepts of the language, where
    we talked about declaring variables and also the eight data types available in
    JavaScript. Following that, we talked about branching and looping constructs in
    JavaScript and showed some examples of using them, and finally, we briefly discussed
    functions and classes in JavaScript.
  prefs: []
  type: TYPE_NORMAL
