- en: Setting Up the Environment and Tools – Backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will set up the environment and tools needed for backend
    programming with Spring Boot. Spring Boot is a modern Java-based backend framework
    that makes development faster than traditional Java-based frameworks. With Spring
    Boot, you can make a standalone web application that has an embedded application
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Building the environment for Spring Boot development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of Eclipse IDE and Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and running Spring Boot projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving common problems of running Spring Boot applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java SDK version 8 or higher is necessary to use of Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are using the Windows operating system, but all tools are available
    for Linux and macOS as well.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of different IDE tools that you can use to develop Spring Boot
    applications. In this book, we are using Eclipse, that is an open source IDE for
    multiple programming languages. We will create our first Spring Boot project by
    using the Spring Initializr project starter page. The project is then imported
    into Eclipse and executed. Reading the console log is a crucial skill when developing
    Spring Boot applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse is an open source programming IDE developed by the Eclipse Foundation.
    An installation package can be downloaded from [https://www.eclipse.org/downloads](https://www.eclipse.org/downloads).
    Eclipse is available for Windows, Linux, and macOS. You should download the latest
    version of Eclipse IDE for Java EE developers.
  prefs: []
  type: TYPE_NORMAL
- en: You can either download a ZIP package of Eclipse or an installer package that
    executes the installation wizard. If using the ZIP package, you just have to extract
    the package to your local disk and it will contain an executable `Eclipse.exe`
    file, that you can run by double-clicking on the file.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of Eclipse and Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Eclipse is an IDE for multiple programming languages, such as Java, C++, and
    Python. Eclipse contains different perspectives for your needs. A perspective
    is a set of views and editors in the Eclipse Workbench. The following screenshot
    shows common perspectives for Java development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21f6b430-4b00-4aee-975e-b8d0290586b7.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left side, we have Project Explorer, where we can see our project structure
    and resources. Project Explorer is also used to open files by double-clicking
    on them. The files will be opened in the editor, that is located in the middle
    of the workbench. The Console view can be found in the lower section of the workbench.
    The Console view is really important because it shows application logging messages.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the **Spring Tool Suite** (**STS**) for Eclipse if you want, but
    we are not going to use it in this book because the plain Eclipse installation
    is enough for our purposes. STS is a set of plugins that makes Spring application
    development easier ([https://spring.io/tools](https://spring.io/tools)).
  prefs: []
  type: TYPE_NORMAL
- en: Apache Maven is a software project management tool. The basis of Maven is the **project
    object model** (**pom**). Maven makes the software development process easier
    and it also unifies the development process. You can also use another project
    management tool called Gradle with Spring Boot, but in this book, we will focus
    on using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: The pom is a `pom.xml` file that contains basic information about the project.
    There are also all the dependencies that Maven should download to be able to build
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Basic information about the project can be found at the beginning of the `pom.xml`
    file, which defines, for example, the version of the application, packaging format,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The minimum version of the `pom.xml` file should contain the project root, `modelVersion`,
    `groupId`, `artifactId`, and `version`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dependencies are defined inside the dependencies section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Maven is normally used from the command line. Eclipse contains embedded Maven,
    and that handles all the Maven operations we need. Therefore, we are not focusing
    on Maven command-line usage here. The most important thing is to understand the
    structure of the `pom.xml` file and how to add new dependencies to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project with Spring Initializr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create our backend project with Spring Intializr, that is a web-based
    tool that''s used to create Spring Boot projects. Spring Intializr can be found
    at [https://start.spring.io](https://start.spring.io):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/506bc928-20ef-4c53-813b-94a3301058ec.png)'
  prefs: []
  type: TYPE_IMG
- en: We will generate a Maven project with Java and the latest Spring Boot version.
    In the Group field, we will define our group ID, that will also become a base
    package in our Java project. In the Artifact field, we will define the artifact
    ID, that will also be the name of our project in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Dependencies section, we will select the starters and dependencies that
    are needed in our project. Spring Boot provides starter packages that simplify
    your Maven configuration. Spring Boot starters are actually a set of dependencies
    that you can include in your project. You can either type the keyword of the dependency
    into the search field, or you can see all available dependencies by clicking on
    the Switch to the full version link.  We will start our project by selecting two
    dependencies—Web and DevTools. You can type the dependencies into the search field
    or switch to the full version and see all the starter packages and dependencies
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fc7e3aa-21c8-4c67-bba0-d356b18ff5d4.png)'
  prefs: []
  type: TYPE_IMG
- en: The DevTools dependency provides us with Spring Boot development tools, that
    provide automatic restart functionality. It makes development much faster because
    the application is automatically restarted when changes have been saved. The web
    starter pack is a base for full-stack development and provides embedded Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you have to press the Generate Project button and that generates the
    project starter ZIP package for us.
  prefs: []
  type: TYPE_NORMAL
- en: How to run the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extract the project ZIP package that we created in the previous topic and open
    Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to import our project into Eclipse IDE. To start the import process,
    select the File | Import menu and the import wizard will be opened. The following
    screenshot shows the first page of the wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99a3be84-b10e-4d22-bd46-32baa4927237.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the first phase, you should select Existing Maven Projects from the list
    under the `Maven` folder, and then go to the next phase by pressing the Next button.
    The following screenshot shows the second step of the import wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3a17fd6-7875-4660-88c7-62dc2919b040.png)'
  prefs: []
  type: TYPE_IMG
- en: In this phase, select the extracted project folder by pressing the Browse... button.
    Then, Eclipse finds the `pom.xml` file from the root of your project folder and
    shows it inside the Projects section of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the Finish button to finalize the import. If everything went correctly,
    you should see the `cardatabase` project in Eclipse Project Explorer. It takes
    a while when the project is ready because all dependencies will be loaded by Maven
    after import. You can see the progress of the dependency download at the bottom-right
    corner of Eclipse. The following screenshot shows Eclipse Project Explorer after
    successful import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30e8b5c1-9e30-4589-9f91-10553da21385.png)'
  prefs: []
  type: TYPE_IMG
- en: The Project Explorer also shows the package structure of our project, and now
    at the beginning there is only one package called `com.packt.cardatabase`. Under
    that package is our main application class, called `CardatabaseApplication.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we don''t have any functionality in our application, but we can run it
    and see whether everything has started successfully. To run the project, open
    the main class by double-clicking on it and then pressing the Run button in the
    Eclipse toolbar, or select the run menu and press Run as | Java Application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72e8172c-ee62-4733-aec1-58268f340153.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the Console view opening in Eclipse, and that contains important
    information about the execution of the project. This is the view where all log
    texts and error messages appear, and it is therefore really important to check
    the content of the view when something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if the project was executed correctly, you should see the text `Started
    CardatabaseApplication in...` at the end of the console. The following screenshot
    shows the content of the Eclipse console after our Spring Boot project has been
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f00d6bf-b504-4f06-9e42-2d7722157dd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the root of our project there is the `pom.xml` file, that is the Maven configuration
    file for our project. If you look at the dependencies inside the file, you can
    see that there are now dependencies that we selected on the Spring Initializr
    page. There is also a test dependency included automatically without any selection.
    In the next chapters, we are going to add more functionality to our application,
    and then we will add more dependencies manually to the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the Spring Boot main class more carefully. At the beginning
    of the class, there is the `@SpringBootApplication` annotation. It is actually
    a combination of multiple annotations, such as, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Annotation** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `@EnableAutoConfiguration` | Enables Spring Boot automatic configuration.
    Spring Boot will automatically configure your project based on dependencies. For
    example, if you have the `spring-boot-starter-web` dependency, Spring Boot assumes
    that you are developing a web application and configures your application accordingly.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@ComponentScan` | Enables the Spring Boot component scan to find all components
    from your application. |'
  prefs: []
  type: TYPE_TB
- en: '| `@Configure` | Defines the class that can be used as a source of bean definitions.
    |'
  prefs: []
  type: TYPE_TB
- en: 'The following code shows the Spring Boot application''s `main` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The execution of the application starts from the `main` method, as in standard
    Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to locate the `main` application class in the root package
    above other classes. Quite a common reason for an application to not work correctly
    is due to a situation where Spring Boot can't find some critical classes.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Boot development tools make the application development process easier.
    Projects will include the developer tools if the following dependency is added
    to the Maven `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Development tools are disabled when you create a fully-packed production version
    of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application is automatically restarted when you make changes to your project
    classpath files. You can test that by adding one comment line to your `main` class.
    After saving the file, you can see in the console that the application has restarted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Logs and problem solving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Boot starter packages provide a logback, that we can use for logging
    without any configuration. The following sample code shows how to use logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Logging messages can be seen in the console after you run the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c49a8750-9889-42a3-aec9-3d812ac16808.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are seven different levels for logging—`TRACE`, `DEBUG`, `INFO`, `WARN`,
    `ERROR`, `FATAL`, and `OFF`. You can configure the level of logging in your Spring
    Boot `application.properties` file. The file can be found in the `resources` folder
    inside your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b2cf448-8526-4f57-a0bb-413aaba12765.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we set the logging level to `INFO`, we can see log messages from levels
    that are under `INFO` (`INFO`, `WARN`, `ERROR`, and `FATAL`). In the following
    example, we set the log level for the root, but you can also set it at the package
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you run the project, you can''t see the `TRACE` and `DEBUG` messages
    anymore. That might be a good setting for a production version of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25e9f9d4-4fdc-4c88-91c4-d02ceb95d964.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Spring Boot is using Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
    as an application server, by default. As a default, Tomcat is running in port
    `8080`. You can change the port in the `application.properties` file. The following
    setting will start Tomcat in port `8081`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If the port is occupied, the application won''t start and you will see the
    following message in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/797452b6-c4f3-4cfe-83b9-82742f1aa197.png)'
  prefs: []
  type: TYPE_IMG
- en: You have to stop the process that is listening on port `8080` or use another
    port in your Spring Boot application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, we are going to use MariaDB, and therefore we will install
    it locally to your computer. MariaDB is a widely used open source relational database.
    MariaDB is available for Windows and Linux, and you can download the latest stable
    version from [https://downloads.mariadb.org/](https://downloads.mariadb.org/).
    MariaDB is developed under a GNU GPL 2 license.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, there is the MSI installer, that we will use here. Download the
    installer and execute it. Install all features from the installation wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b31bc8c-0924-4877-b114-d02e221657e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step, you should give the password for the root user. This password
    is needed in the next chapter, when we connect to the database with our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fae938c-a3aa-4875-b313-01d137018b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next phase, we can use the default settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84b2f956-de37-4aad-8021-029d9fc1e576.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the installation starts, and MariaDB will be installed to your local computer.
    The installation wizard will install **HeidiSQL** for us. This is a graphically
    easy-to-use database client. We will use this to add a new database and make queries
    to our database. You can also use the Command Prompt included in the installation
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebd75046-230f-4433-8b68-1a6b3975b4ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed the tools that are needed for backend development
    with Spring Boot. For Java development, we used Eclipse IDE, that is a widely
    used programming IDE. We created a new Spring Boot project by using the Spring
    Initializr page. After creating the project, it was imported to Eclipse and, finally,
    executed. We also covered how to solve common problems with Spring Boot and how
    to find important error and log messages. Finally, we installed a MariaDB database,
    that we are going to use in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Spring Boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Eclipse IDE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Maven?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a Spring Boot project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we run a Spring Boot project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we use logging with Spring Boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we find error and log messages in Eclipse?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition](https://www.packtpub.com/application-development/learning-spring-boot-20-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course](https://www.packtpub.com/web-development/spring-boot-getting-started-integrated-course)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
