- en: Go on the Front-End with GopherJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever since its creation, JavaScript has been the de facto programming language
    of the web browser. Accordingly, it has had a monopoly over front-end web development
    for a very long period of time. It's been the only game in town that comes with
    the capability to manipulate a web page's **Document Object Model** (**DOM**)
    and access various **application programming interfaces** (**APIs**) implemented
    in modern web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Due to this exclusivity, JavaScript has been the only viable option for isomorphic
    web application development. With the introduction of GopherJS, we now have the
    ability to create Go programs in the web browser, which also makes it possible
    to develop isomorphic web applications using Go.
  prefs: []
  type: TYPE_NORMAL
- en: GopherJS allows us to write programs, in Go, that get converted into an equivalent
    JavaScript representation, which is suitable to run in any JavaScript-enabled
    web browser. GopherJS provides us with a viable and attractive alternative to
    using JavaScript, especially if we are using Go on the server side. With Go on
    both ends of the spectrum (front-end and back-end), we have new opportunities
    to share code and eliminate the mental context shifts that come with having to
    juggle different programming languages across environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Document Object Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic DOM operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GopherJS overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GopherJS examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline template rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Document Object Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive deeper into GopherJS, it's important for us to get an appreciation
    of what JavaScript, and by extension—GopherJS, does for us. One of the major capabilities
    that JavaScript has is its ability to access and manipulate the **DOM** (short
    for **Document Object Model**). The DOM is a tree data structure that represents
    the structure of a web page and all of the nodes (elements) that exist within
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The significance of the DOM is that it acts as a programming interface for HTML
    documents, whereby programs that have access to the DOM can change a web page's
    style, structure, and content. Since each node in a DOM tree is an object, the
    DOM can be considered the object-oriented representation of a given web page.
    As such, the objects and their given properties can be accessed and changed using
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.1* depicts the DOM hierarchy for a given web page. All elements on
    the web page are children of the **html** node, which is represented by the `<html>` tag
    in the web page''s HTML source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cae7934-c0ad-4bab-96d3-ff260b9d3422.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: A web page''s DOM hierarchy'
  prefs: []
  type: TYPE_NORMAL
- en: The **head** node is a child of the **html** node and contains two children—meta
    (defined, in HTML, using the `<meta>` tag) and a script node (for an external
    CSS or JavaScript source file). At the same level of the head node exists the
    body node, which is defined using the `<body>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The body node contains all the elements that are to be rendered on the web page.
    Directly under the body node, we have a child, which is a heading node (defined
    using the `<h1>` tag), that is, the title of the web page. This node has no child
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: At the same level of the heading node, we also have a div node (defined using
    a `<div>` tag). This node contains a div child node, which has two children—a
    paragraph node (defined using the `<p>` tag) and at the same level of this node
    exists an image node (defined using the `<img>` tag).
  prefs: []
  type: TYPE_NORMAL
- en: The image node has no child elements, and the paragraph node has one child element—a
    span node (defined using the `<span>` tag).
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript runtime included in the web browser provides us with the functionality
    to access the various nodes in the DOM tree along with their respective values.
    Using the JavaScript runtime, we can access both an individual node, and, if the
    given node contains children, we can access a collection of all the parent's child
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Since web pages are represented as a collection of objects, using the DOM we
    can access the events, methods, and properties of any given DOM object. In fact,
    the `document` object represents the web page document itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a helpful introduction to the DOM from the MDN website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction).'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing and manipulating the DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As noted previously, we can use JavaScript to access and manipulate the DOM
    for a given web page. Since GopherJS transpiles to JavaScript, we now have the
    capability to access and manipulate the DOM within the confines of Go. *Figure
    3.2* depicts a JavaScript Program accessing/manipulating the DOM along with a
    Go program also accessing/manipulating the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b73a589-0ac3-48df-9410-e1418404e5b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: The DOM can be accessed and manipulated by a JavaScript program
    and/or a Go program (using GopherJS)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at a few simple programming snippets, where we can access
    the JavaScript functionality using Go, followed by some basic DOM operations using
    JavaScript and their equivalent instruction in GopherJS. For the time being, let's
    get a preview of what coding with GopherJS looks like. These concepts will be
    explained in further detail, as fully fleshed out examples, later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Basic DOM operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll look at a collection of some basic DOM operations. Each
    DOM operation presented includes the equivalent operation performed in JavaScript,
    GopherJS, and using the DOM binding.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an alert message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**GopherJS**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**DOM Binding**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the most basic operations we can perform is to show an `alert` message
    in a modal dialog. In JavaScript, we can display the `alert` message using the
    built-in `alert` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This line of code will print out the message `Hello Isomorphic Go!` in a modal
    window dialog. The `alert` function blocks further execution until the user dismisses
    the `alert` dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we make a call to the `alert` method, we are actually calling it in this
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `window` object is a global object, representing an open window in the web
    browser. The JavaScript implementation allows us to directly call the `alert`
    function along with the other built-in functions, without explicitly referencing
    them as methods of the window object as a means of convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `js` package to access the JavaScript functionality through Go,
    using GopherJS. We can import the package into our Go program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `js` package provides us with functionality to interact with native JavaScript
    APIs. Calls to functions in the `js` package are translated directly to their
    equivalent JavaScript syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can display an `alert` message dialog using Go, with GopherJS, in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we used the `Call` method that is available to
    the `js.Global` object. The `js.Global` object provides us with JavaScript's global
    object (the `window` object).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the `Call` method signature looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Call` method will call the global object's method with the provided name.
    The first parameter provided to the method is the name of the method to call.
    The second parameter is a list of arguments that are to be passed on to the global
    object's method. The `Call` method is known as a variadic function, since it can
    take in a variable number of parameters of the `interface{}` type.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the `Call` method by viewing the GopherJS documentation
    at [https://godoc.org/github.com/gopherjs/gopherjs/js#Object.Call](https://godoc.org/github.com/gopherjs/gopherjs/js#Object.Call).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how to display the `alert` dialog window using the `Call`
    method of the `js.Global` object, let's take a look at the DOM bindings.
  prefs: []
  type: TYPE_NORMAL
- en: The `dom` package provides us with convenient GopherJS bindings to the JavaScript
    DOM API. The idea behind using this package, as opposed to performing all operations
    using the `js.Global` object, is that the DOM bindings provides us with an idiomatic
    way to call the common DOM API functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are already familiar with the JavaScript APIs used to access and manipulate
    the DOM, then using the `dom` package will feel second nature to you. We can access
    the global window object using the `GetWindow` function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `dom` package, we can display the alert dialog message with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A cursory view of this code snippet shows that this feels closer to the JavaScript
    way of calling the `alert` dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Due to this similarity, it's a good idea to be well-versed in the JavaScript
    DOM APIs, since it will provide you with the ability to be familiar with equivalent
    function calls, using the `dom` package.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the `dom` package by viewing the documentation for
    the package at </span>[https://godoc.org/honnef.co/go/js/dom](https://godoc.org/honnef.co/go/js/dom).
  prefs: []
  type: TYPE_NORMAL
- en: Getting a DOM element by ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `document` object's `getElementById` method to access an element
    for a given `id`. In these examples, we access the primary content `div` container,
    which has `id` of `"primaryContent"`.
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**GopherJS**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**DOM Binding**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Although the `dom` package's method calls are very similar to the JavaScript
    method calls, subtle differences can occur.
  prefs: []
  type: TYPE_NORMAL
- en: For example, take note of the capitalization in the `getElementById` method
    call on the `document` object using JavaScript, and compare it with the capitalization
    of the `GetElementByID` method call when using the DOM binding.
  prefs: []
  type: TYPE_NORMAL
- en: In order to export the `GetElementByID` method in Go, we must capitalize the
    first letter, here, *G*. Also, notice the subtle difference in the capitalization
    of the substring *Id* when using the JavaScript way, compared with the capitalization
    of *ID* when using the DOM binding.
  prefs: []
  type: TYPE_NORMAL
- en: Query selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `querySelector` method of the `document` object provides us with a means
    to access a DOM element using a CSS query selector, in a manner similar to the
    jQuery library. We can access the `h2` element containing the welcome message,
    on the IGWEB homepage, using the `querySelector` method of the document object.
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**GopherJS**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**DOMBinding**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Changing the CSS style property of an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous code snippets that we covered, we only considered examples where
    we accessed the DOM element. Now, let's consider an example where we change an
    element's CSS style property. We will hide the content inside the primary content
    `div` container by changing the value of the `div` element's `display` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can save ourselves some typing by aliasing calls to `js.Global` and the `dom` package
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For GopherJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JS := js.Global`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `dom` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`D := dom.GetWindow().Document()`'
  prefs: []
  type: TYPE_NORMAL
- en: In order to change the display property of the primary content div container,
    we will first need to access the `div` element, and then change it's `display`
    property to the `none` value.
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**GopherJS**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**DOM Binding**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can get a feel for working with GopherJS, using the GopherJS Playground
    at [https://gopherjs.github.io/playground/](https://gopherjs.github.io/playground/).
  prefs: []
  type: TYPE_NORMAL
- en: GopherJS overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve seen a preview of using GopherJS, let''s consider a high-level
    overview on how GopherJS works. *Figure 3.3* depicts an Isomorphic Go application
    that consists of a Go front-end web application (using GopherJS) and a Go back-end
    web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20fc07f2-fb79-454b-a515-00ad25513e50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: An Isomorphic Go web application consists of a Go front-end web
    application (using GopherJS) and a Go back-end web application'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 3.3*, we illustrated the means of communication as an HTTP transaction,
    but it's important to note that this is not the only means by which the client
    and web server can communicate. We can also establish a persistent connection
    using the web browser's WebSocket API, which we will cover in [Chapter 8](38c071ef-d44c-452c-80dd-0b76837cc5e8.xhtml),
    *Real-Time Web Application Functionality*.
  prefs: []
  type: TYPE_NORMAL
- en: In the microexamples that we covered in the previous section, we were introduced
    to the GopherJS DOM bindings, which provide us access to the DOM API—a JavaScript
    API implemented in the web browser. In addition to the DOM API, there are other
    APIs such as the XHR (to create and send XMLHttpRequests) API and WebSocket API
    (to create a bidirectional, persistent connection with the web server). There
    are GopherJS bindings available for the XHR and WebSocket APIs as well.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.4* depicts common JavaScript APIs on the left, and their equivalent
    GopherJS binding on the right. With a GopherJS binding available, we can access
    JavaScript API functionality from within the Go programming language itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f3bdd37-00ad-44a5-90ba-567cdcdebe49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Common JavaScript APIs and their Equivalent GopherJS bindings'
  prefs: []
  type: TYPE_NORMAL
- en: The GopherJS transpiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use the GopherJS transpiler to convert a Go program into a JavaScript program.
    *Figure 3.5* depicts a Go program that not only makes use of the functionality
    from the Go standard library but also uses the functionality from various JavaScript
    APIs using the equivalent GopherJS bindings package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03e2e6dc-3294-4428-896f-ac16c157496a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: A Go program that makes use of the standard library and GopherJS
    bindings transpiled to an equivalent JavaScript program'
  prefs: []
  type: TYPE_NORMAL
- en: We use the `gopherjs build` command to transpile the Go program into its equivalent
    JavaScript representation. The produced JavaSript source code is not meant to
    be modified by humans. The JavaScript program has access to the underlying JavaScript
    runtime embedded in the web browser, along with access to common JavaScript APIs.
  prefs: []
  type: TYPE_NORMAL
- en: To get an idea of how types are converted from Go to JavaScript, take a look
    at the table available at [https://godoc.org/github.com/gopherjs/gopherjs/js](https://godoc.org/github.com/gopherjs/gopherjs/js).
  prefs: []
  type: TYPE_NORMAL
- en: With regard to IGWEB, we have organized the front-end Go web application project
    code inside of the `client` folder. This allows us to neatly separate the front-end
    web application from the back-end web application.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.6* depicts the client project folder containing numerous Go source
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4758a86b-a357-4112-b9f0-c6040844c343.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: The client Folder Houses the Go source files that comprise the
    Front-End Go Web application. The GopherJS transpiler produces a JavaScript program
    (client.js) and a source map (client.js.map)'
  prefs: []
  type: TYPE_NORMAL
- en: Upon running the GopherJS transpiler on the Go source files inside the `client`
    folder, by issuing the `gopherjs build` command, two output files are created.
    The first output file is the `client.js` file, which represents the equivalent
    JavaScript program. The second output file is the `client.js.map` file, which
    is a source map that's used for debugging purposes. This source map helps us when
    we are chasing down bugs using the web browser's console by providing us detailed
    information on produced errors.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Appendix: Debugging Isomorphic Go*, contains guidance and advice on debugging
    an isomorphic web application implemented in Go.'
  prefs: []
  type: TYPE_NORMAL
- en: The `gopherjs build` command is synonymous in behavior with its `go build` counterpart.
    The client project folder can contain any number of subfolders, which may also
    contain Go source files. When we execute the `gopherjs build` command, a single
    JavaScript source program is created along with a source `map` file. This is analogous
    to the single static binary file that gets created when issuing a `go build` command.
  prefs: []
  type: TYPE_NORMAL
- en: Code that is shared between the server and the client, outside of the client
    folder, may be shared by specifying the proper path to the shared package in the
    `import` statement. The `shared` folder will contain code that is to be shared
    across environments, such as models and templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can include the GopherJS produced JavaScript source file as an external
    `javascript` source file in our web page using the `<script>` tag, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that when we issue a `gopherjs build` command, we are not just
    creating a JavaScript equivalent of the program we are writing, but we are also
    bringing along any packages from the standard library or third-party packages
    that our program relies on. So in addition to including our front-end Go program,
    GophjerJS also includes any dependent packages that our program is dependent on.
  prefs: []
  type: TYPE_NORMAL
- en: Not all packages from the Go standard library work inside the web browser. You
    can reference the GopherJS compatibility table to view a list of supported packages
    from the Go standard library at [https://github.com/gopherjs/gopherjs/blob/master/doc/packages.md](https://github.com/gopherjs/gopherjs/blob/master/doc/packages.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'The ramification of this fact is that the produced JavaScript source code''s
    file size will grow proportionately to the amount of dependencies we introduce
    in our Go program. The other ramification of this fact is that it doesn''t make
    sense to include multiple GopherJS produced JavaScript files on the same same
    web page as depicted in *Figure 3.7*, since dependent packages (such as common
    packages from the standard library) will be included multiple times, unnecessarily
    bulking up our total script payload and offering no value in return:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c50fbfc9-8ffa-41b3-94bf-91fd6243c09e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Do not import multiple GopherJS produced source files in a single
    web page'
  prefs: []
  type: TYPE_NORMAL
- en: 'A web page should therefore, at maximum, include only one GopherJS produced
    source file, as depicted in *Figure 3.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99c52275-0f7c-4958-9f46-6168436a2eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Only a single GopherJS produced source file should be included
    in a web page'
  prefs: []
  type: TYPE_NORMAL
- en: GopherJS examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, we got a preview of what coding with GopherJS looks
    like. Now we will take a look at some fully fleshed out examples to solidify our
    understanding of some basic concepts.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, the source code for the front-end web application can
    be found within the `client` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to manually transpile the Go code in the client directory, you
    can issue the `gopherjs build` command inside the `client` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, two source files will be produced—the `client.js` JavaScript
    source file, and the `client.js.map` source map file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the web server manually, you can go into the `igweb` folder and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A more convenient alternative is to compile the Go code and the GopherJS code
    using `kick`, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of using `kick` is that it will automatically watch for changes
    made either to the Go back-end web application or the GopherJS front-end web application.
    As noted in the previous chapter, `kick` will perform an *instant kickstart* when
    a change is detected, which will speed up your iterative development cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the `igweb` program running, you may access the GopherJS examples
    at the following URL: [](http://localhost:8080/front-end-examples-demo) `http://localhost:8080/front-end-examples-demo`'
  prefs: []
  type: TYPE_NORMAL
- en: The front-end examples demo will contain some basic GopherJS examples. Let's
    open up the `igweb.go` source file in the `igweb` folder to see how everything
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `registerRoutes` function, we register the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/front-end-examples-demo` route is used to display our front-end examples
    web page. The `/lowercase-text` route is used to transform text into lowercase.
    We will be covering the second route in more detail later on; first, let''s take
    a look at the handler function (found in the `handlers/frontendexamples.go` source
    file) that handles the `/front-end-examples-demo` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined our handler function, `FrontEndExamplesHandler`, which
    accepts a pointer to an `env` object as an input argument, and returns an `http.Handler`
    function. We have defined a closure to return the `http.HandlerFunc`, which accepts
    `http.ResponseWriter` and `*http.Request` as input arguments.
  prefs: []
  type: TYPE_NORMAL
- en: We call the `Render` method on the `TemplateSet` object to render the front-end
    examples page. The first input argument to the method is the template's name,
    which is `frontend_examples_page`. The second input argument is the render parameters
    that are to be used. Since we are rendering the template from the server side,
    we pass `w`, `http.ResponseWriter`, which is responsible for writing out the web
    page response (the rendered template). Since we are not passing any data to the
    template, we assign a value of `nil` to the `Data` field of the `RenderParams`
    struct.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic Templates*,
    we will explain how template sets work, and how we can use the isomorphic template renderer,
    provided by the `isokit` package, to render templates on both the server-side
    and the client-side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the partial source code listing of the `initializePage` function, found
    in the `client.go` source file, we have included the following line of code to
    initialize the GopherJS code examples (shown in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `gopherjsprimer.InitializePage` function is responsible for adding event
    listeners to elements found on the front-end examples web page. Before we register
    any events, we first check to see if the page with the `/front-end-examples` route has
    been accessed. If the user is accessing a page with a different route, such as
    `/index`, there is no need to set up the event handlers for the front-end examples
    page. If the user has accessed the `/front-end-examples` route, then the flow
    of control will reach the `case` statement specifying the `"front-end-examples-demo"` value,
    and we will set up all the event handlers for the UI elements on the web page
    by calling the `gopherjsprimer.InitializePage` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `InitializePage` function found in the `client/gopherjsprimer/initpage.go` source
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `InitializePage` function is responsible for adding the event listeners
    to elements found in the front-end examples web page using the element's `AddEventListener`
    method (shown in bold).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an alert message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start off with an example to display an alert dialog. Earlier in this
    chapter, we saw how we could accomplish displaying the alert dialog using the
    `Call` method of the `js.Global` object and the GopherJS DOM bindings. *Figure
    3.9* depicts the user interface of our first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/740dc41d-898d-425d-9898-8ee2959e019c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: The Display Alert message example'
  prefs: []
  type: TYPE_NORMAL
- en: 'The user interface consists of an input text field, where the user can enter
    a custom message to display in the alert dialog. Following the text field are
    two buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: The first button will display the alert dialog using the `Call` method on the
    `js.Global` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second button will display the alert dialog using the GopherJS DOM Bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML markup for the front-end examples can be found in the template file
    located at `shared/templates/frontend_examples_page.tmpl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the HTML markup for the alert message example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, we declared two buttons (shown in bold) and assigned unique ids to them.
    The button that will display the alert dialog using the `js.Global.Call` functionality
    has an `id` of `alertMessageJSGlobal`. The button that will display the alert
    dialog using the GopherJS DOM bindings has an `id` of `alertMessageDOM`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet from the `InitializePage` function, defined in the
    `initpage.go` source file, is responsible for setting up the event handlers for
    the `Display Alert Message` buttons that will be displayed in the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We fetch the first button by making a call to the `GetElementByID` function
    on the `document` object, passing in the `id` of the button as the input argument
    to the function. We then call the `AddEventListener` method on the button to create
    a new event listener, which will listen for a click event. We call the `DisplayAlertMessagesJSGlobal`
    function when the first button has been clicked, and pass in the value of the
    `messageInput` text field, which contains the custom Alert Message that the user
    can enter.
  prefs: []
  type: TYPE_NORMAL
- en: We set up the event listener for the second button in a similar fashion, except
    the function we call when a click event is detected on the button is `DisplayAlertMessageDOM`,
    which calls the function to show the alert dialog using the GopherJS DOM bindings.
    Again, we pass in the value of the `messageInput` text field to the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you were to click on either button, you should be able to see the alert
    dialog. Change the alert message to something different, and notice that the change
    you make to the Alert Message text field will be reflected in the alert dialog.
    *Figure 3.10* depicts the alert dialog with a custom message of Hello Isomorphic
    Gopher!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ce236ca-e89a-45e5-b86d-0ef86cca8a95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: The example that displays the alert dialog with a custom alert
    message'
  prefs: []
  type: TYPE_NORMAL
- en: Changing an element's CSS style property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will take a look at an example where we actually manipulate the DOM
    by changing an element''s CSS style property. The user interface of this example
    consists of the image of the Isomorphic Gopher, and right below it are two buttons,
    as shown in *Figure 3.11*. The first button, when clicked, will show the Isomorphic
    Gopher image, if it is hidden. The second button, when clicked, will hide the
    Isomorphic Gopher image, if it is shown. *Figure 3.11* shows the Isomorphic Gopher
    when it is visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08a48cf6-fa7c-4848-a09b-a8981a2fb0c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: The user interface when the Isomorphic Gopher image is visible'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.12* depicts the user interface when the Isomorphic Gopher image is
    not visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14bd6b99-7a09-41af-b4cd-815616e2a4a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: The user interface when the Isomorphic Gopher image is not visible'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the HTML markup that generates the user interface for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we declare an image tag that represents the Isomorphic Go image and assign
    it an `id` of `isomorphicGopher`. We declare two buttons (shown in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: The first button, having an `id` of `showGopher`, will show the Isomorphic Gopher
    image, when clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second button, having an `id` of `hideGopher`, will hide the Isomorphic
    Gopher image, when clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet from the `InitializePage` function is responsible
    for setting up the event handlers for the two buttons that show and hide the Isomorphic
    Gopher image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If the Show Isomorphic Gopher button is clicked, we call the `ShowIsomorphicGopher` function.
    If the Hide Isomorphic Gopher button is clicked, we call the `HideIsomorphicGopher` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the `ShowIsomorphicGopher` and `HideIsomorphicGopher` functions
    defined in the `client/gopherjsprimer/cssexample.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Both the `ShowIsomorphicGopher` and `HideIsomorphicGopher` functions call the
    `toggleIsomorphicGopher` function. The only difference is that the `ShowIsomorphicGopher` function
    calls the `toggleIsomorphicGopher` function with an input parameter of true, and
    the `HideIsomorphicGopher` function calls the `toggleIsomorphicGopher` function
    with an input parameter of `false`.
  prefs: []
  type: TYPE_NORMAL
- en: The `toggleIsomorphicGopher` function takes in a single argument, which is a
    Boolean variable indicating whether or not the `IsomorphicGopher` image should
    be shown, or not.
  prefs: []
  type: TYPE_NORMAL
- en: If we pass in a value of `true` to the function, then the Isomorphic Gopher
    image should be displayed, as shown in *Figure 3.11*. If we pass in a value of
    `false` to the function, then the Isomorphic Gopher image should not be displayed,
    as shown in *Figure 3.12*. We assign the value of the `Document` object to the `d` variable.
    We make a call to the `GetElementByID` method of the `Document` object to get
    the Isomorphic Gopher image. Notice that we have performed a type assertion (shown
    in bold) to assert that the value returned by `d.GetElementByID("isomorphicGopher")`
    has a concrete type of `*dom.HTMLImageElement`.
  prefs: []
  type: TYPE_NORMAL
- en: We declared an `if` conditional block that checks if the value of the `isVisible`
    Boolean variable is `true`, and if it is, we set the `display` property of the
    image element's `Style` object to be `inline`. This will cause the Isomorphic
    Gopher image to appear, as shown in *Figure 3.11*.
  prefs: []
  type: TYPE_NORMAL
- en: If the value of the `isVisible` Boolean variable is `false`, we reach the `else`
    block, and we set the `display` property of the image element's `Style` object
    to be `none`, which will prevent the Isomorphic Gopher image from being displayed,
    as shown in *Figure 3.12*.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript typeof operator functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JavaScript `typeof` operator is used to return the type of a given operand.
    For example, let''s consider the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This expression will evaluate to the Boolean value of `true`. On a similar
    note, now consider this JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This expression will also evaluate to the Boolean value of `true`.
  prefs: []
  type: TYPE_NORMAL
- en: So you might be wondering, how can we make use of the JavaScript `typeof` operator
    using Go? The answer is, we will need the `jsbuiltin` package, the GopherJS bindings
    for built-in JavaScript functionality, which includes the `typeof` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will make use of JavaScript''s `typeof` operator using
    the `jsbuiltin` package. *Figure 3.13* depicts the user interface for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12865f98-0842-417e-8e3d-b5b7ea66b13a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: The user interface for the JavaScript typeof example'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the HTML markup that implements the user interface for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We have declared a button with an `id` of `bultinDemoButton`. Now, let''s set
    up an event listener for the Builtin Demo button, inside the `InitializePage`
    function, to handle the click event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We get the `button` element by calling the `GetElementID` method on the `Document`
    object, `d`. We assign the returned `button` element to the `builtinDemoButton` variable.
    We then add an event listener to the `button` element to detect when it's clicked.
    If a click event is detected, we call the `builtinDemo` function and pass in the
    value of the `button` element, which happens to be the event target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the `builtindemo.go` source file found in the `client/gopherjsprimer`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `bulitindemo` function accepts an input argument of the `dom.Element` type.
    Inside this function, we perform a JavaScript `typeof` operation on the element
    that''s passed into the function by calling the `TypeOf` function from the `jsbuiltin`
    package (shown in bold). We check to see if the element passed in is an object.
    If it is an object, we print out a message to the web console, confirming that
    the element passed into the function is an object. *Figure 3.14* depicts the message
    printed on the web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/668122f7-9980-4234-b3b0-50af070d483f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: The message printed on the web console after the built in demo
    button is clicked'
  prefs: []
  type: TYPE_NORMAL
- en: On the surface, this is a pretty trivial example. However, it highlights a very
    important concept—from within the confines of Go, we can still access the built-in
    JavaScript functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming text to lowercase using an XHR post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create a simple lowercase text transformer. Any text the user enters
    will be converted to lowercase. The user interface for our lowercase text transformer
    solution is depicted in *Figure 3.15*. In the image, the input text is GopherJS.
    When the user clicks on the Lowercase It! button, the text in the text field will
    be transformed to its lowercase equivalent, which is gopherjs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9618da7-a56b-498f-b10c-74e41aa50f38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: The lowercase Text Transformer example'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, we can apply the text transformation on the client side; however, it
    would be more interesting to see an example where we send the input text over
    to the web server in the form of an `XHR Post`, and then perform the lowercase
    transformation on the server side. Once the server is done transforming the text
    to lowercase, the input is sent back to the client, and the text field is updated
    with the lowercase version of the input text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the HTML markup for the user interface looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We declare an `input` text field, where the user can enter text that they want
    to convert to lowercase. We assign an `id` of `textToLowercase` for the `input`
    text field. We then declare a button with an `id` of `lowercaseTransformButton`.
    When this button is clicked, we will initiate an `XHR Post` to the server. The
    server will convert the text to lowercase and send back the lowercase version
    of the entered text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code from the `InitializePage` function, that is used to set up
    the event listener for the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We assign the `button` element to the `lowercaseTransformButton` variable. We
    then call the `AddEventListener` method on the `button` element to detect a click
    event. When a click event is detected, we call the `lowercaseTextTransformer` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `lowercaseTextTransformer` function defined in the `client/gopherjsprimer/xhrpost.go`
    source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We first start out by fetching the text input element and assigning it to the `textToLowercase` variable.
    We then marshal the text value entered into the text input element to its JSON
    representation, using the `Marshal` function from the `json` package. We assign
    the marshaled value to the `textBytes` variable.
  prefs: []
  type: TYPE_NORMAL
- en: We use the GopherJS XHR bindings to send the `XHR Post` to the web server. The
    XHR bindings are made available to us through the `xhr` package. We call the `Send`
    function from the `xhr` package to submit the `XHR Post`. The first argument to
    the function is the HTTP method that we are going to use to submit the data. Here
    we have specified `POST` as the HTTP method. The second input argument is the
    path to `POST` the data to. Here we have specified the `/lowercase-text` route, which
    we had set up in the `igweb.go` source file. The third and last argument is the
    data that is to be sent through the `XHR Post`, which is `textBytes`—the JSON
    marshaled data.
  prefs: []
  type: TYPE_NORMAL
- en: The server response from the `XHR Post` will be stored in the `data` variable.
    We call the `Unmarshal` function in the `json` package to unmarshal the server's
    response and assign the unmarshaled value to the `s` variable of the `string`
    type. We then set the value of the text input element to the value of the `s` variable,
    using the `Set` method of the `textToLowercase` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the server-side handler that''s responsible for
    the lowercase transformation in the `handlers/lowercasetext.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the `LowercaseTextTransformHandler` function, we make a call to the `ReadAll`
    function in the `ioutil` package to read the request body. We save the string
    value of `reqBody` to the `reqBodyString` variable. We then JSON unmarshal this
    string, and store the unmarshaled value to the `s` variable, which is of the `string` type.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `ToLower` function from the `strings` package to transform the value
    of the `s` string variable to lowercase, and marshal the value into its JSON representation.
    We then call the `Write` method on `http.ResponseWriter`, `w`, to write out the
    JSON marshaled value of the string in lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on the Lowercase It! button in the user interface, the string
    GopherJS gets transformed into its lowercase representation gopherjs, as shown
    in *Figure 3.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51fee22d-c095-4427-aeee-15ef890c2179.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: The text "GopherJS" is converted to lowercase "gopherjs" once
    the button is clicked'
  prefs: []
  type: TYPE_NORMAL
- en: Inline template rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to perform client-side template rendering
    in Go using GopherJS. We can render templates directly within the web browser
    using the `html/template` package. We will render the individual rows of a table
    of cars, using an inline template.
  prefs: []
  type: TYPE_NORMAL
- en: The cars listing demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the cars listing demo, we will populate a table with rows that are rendered
    from an inline client-side Go template. In our example, the table will be a list
    of cars, and we will obtain the cars to be shown in the table from a slice of
    cars. We will then encode the slice of cars using `gob` encoding and transmit
    the data to the web server instance over an XHR call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Client-side template rendering has many benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: CPU usage on the web server is rendered, which is caused by server-side template
    rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full page reloads are not required to render the client-side template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bandwidth consumption is reduced by rendering the template on the client-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s open up the `cars.html` source file in the `shared/templates/carsdemo_page.tmpl` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This HTML source file contains the web page content for our example, a table
    of cars, where we will be rendering each row of the table using an inline template.
  prefs: []
  type: TYPE_NORMAL
- en: We have declared the table that will be displayed on the web page using the
    `table` tag. We have declared the headers for each column. Since we will be displaying
    a table of cars, we have three columns for each car; we have a column for the
    the model name, a column for the color, and a column for the manufacturer.
  prefs: []
  type: TYPE_NORMAL
- en: Each new row that we will be adding to the table will be appended to the `tbody`
    element (shown in bold).
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we use the `carsdemolayout.tmpl` layout template, to layout the
    cars demo page. Let''s open this file located in the `shared/templates/layouts`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The layout template is responsible for not only rendering the `pagecontent`
    template but also the header template, `carsdemoheader.tmpl`, which is located
    in the `templates/shared/partials` directory. The layout template is also responsible
    for importing the `client.js` external JavaScript source file that was produced
    by GopherJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `carsdemoheader.tmpl` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In this header template file, we import the CSS stylesheet and the JavaScript
    source file for Material Design Library. We'll use Material Design Library to
    make our table look pretty with the default material design styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `initializePage` function of the `client.go` source file, we included
    the following line of code to initialize the cars demo code example, upon landing
    on the cars demo web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `cars.go` source file in the `client/carsdemo` directory, we have
    declared the inline template used to render the information for a given car:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We declared the `CarItemTemplate` constant, which is a multi-line string that
    comprises our inline template. In the first line of our template, we render the
    column containing the model name. In the second line of our template, we render
    the color of the car. Finally, in the third line of our template, we render the
    manufacturer of the car.
  prefs: []
  type: TYPE_NORMAL
- en: 'We declared and initialized the `D` variable with the `Document` object, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InitializePage` function (found in the `client/carsdemo/cars.go` source
    file) is responsible for calling the `cars` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `cars` function, we create a `nano`, an `ambassador`, and an `omni`—three
    instances of the `Car` type. Right after this, we use the car objects to populate
    the `cars` slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a slice of `cars` to populate the table with, it''s time to
    generate each row of the table with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have declared and initialized the `autoTableBody` variable, which is
    the `tbody` element of the table. This is the element we will use to append new
    rows to the table. We loop through the `cars` slice, and for each `Car` struct,
    we dynamically create a `tr` element, using the `CreateElement` method of the
    `Document` object. We then create a new template, and parse the contents of the
    car item template.
  prefs: []
  type: TYPE_NORMAL
- en: We declare a buffer variable named `buff`, to hold the result of the executed
    template. We call the `Execute` function on the template object, `tpl`, passing
    in `buff`, and the current `Car` record at the `i` index of the `cars` slice,
    which will be the data object that is fed to the inline template.
  prefs: []
  type: TYPE_NORMAL
- en: We then call the `SetInnerHTML` method on the `tr` element object and pass in
    the string value of the `buff` variable, which will contain our rendered template
    contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the cars table looks like with all the rows populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5cb151a-e871-42ea-9bd8-f2ebbe2f98d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: The cars table'
  prefs: []
  type: TYPE_NORMAL
- en: This example was useful for illustration purposes, however, it is not very practical
    in a real-world scenario. Mixing inline templates, written in HTML, inside Go
    source files can become an unmaintainable mess, as the project codebase scales.
    In addition to this, it would be nice if we had a means to access all the templates
    for user-facing web pages that the server had access to, on the client side. In
    fact, we can, and that will be our focus in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic
    Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how to render an inline template, let's consider how we
    can transmit the `cars` slice to the server as binary data, encoded in the `gob`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Transmitting gob encoded data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `encoding/gob` package provides us with the functionality to manage streams
    of gobs, which are binary values exchanged between an encoder and a decoder. You
    use the encoder to encode a value into `gob` encoded data and you use the decoder
    to decode `gob` encoded data.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Go on the server side and on the client-side, we have created a Go-specific
    environment, as shown in *Figure 3.18*. This is an ideal environment to use the `encoding/gob` package, as
    a means for data exchange between the client and the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/948fb981-58cf-4b2a-b0ff-e74256d19245.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: A Go-specific environment'
  prefs: []
  type: TYPE_NORMAL
- en: The data that we will be transmitting consists of the `cars` slice. The `Car`
    struct can be considered isomorphic, since we can use the `Car` struct on both
    the client side and the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that in the `cars.go` source file, we have included the `encoding/gob`
    package (shown in bold) in our import groupings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We encode the `cars` slice to the `gob` format using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Here we have declared a bytes buffer called `carsDataBuffer` that will contain
    the `gob` encoded data. We created a new `gob` encoder, and specified that we
    want to store the encoded data into `carsDataBuffer`. We then called the `Encode`
    method on our `gob` encoder object, and passed in the `cars` slice. At this point,
    we have encoded the `cars` slice into `carsDataBuffer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have encoded the `cars` slice into the `gob` format, we can transmit
    the `gob` encoded data to the server over an XHR call using the `HTTP POST` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We call the `Send` function in the `xhr` package, and specify that we want to
    use the `POST` method, and will be sending the data to the `/cars-data` URL. We
    call the `Bytes` method on the `carsDataBuffer` to get the representation of the
    buffer as a byte slice. It is this byte slice that we will send off to the server,
    and it is the `gob` encoded `car` slice.
  prefs: []
  type: TYPE_NORMAL
- en: The response from the server will be stored in the `xhrResponse` variable, and
    we will print this variable out in the web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve seen the client-side of our program, it''s time to take a look
    at the server-side handler function that services the `/cars-data` route. Let''s
    examine the `CarsDataHandler` function defined in the `carsdata.go` source file
    found in the handlers directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `CarsDataHandler` function, we declare the `cars` variable, which
    is a slice of `Car` objects. Right below this, we have `carsDataBuffer`, which
    will contain the `gob` encoded data that we receive from the XHR call that was
    sent from the client-side web application.
  prefs: []
  type: TYPE_NORMAL
- en: We create a new `gob` decoder and we specify that the `gob` data will be stored
    in `carsDataBuffer`. We then use the `ReadAll` function from the `ioutil` package
    to read the request body and to save all the contents to the `body` variable.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a new bytes buffer and pass in the `body` variable as the input
    argument to the `NewBuffer` function. The `carsDataBuffer` now contains the `gob`
    encoded data that was transmitted over the XHR call. Finally, we make a call to
    the `Decode` function of the `dec` object to convert the `gob` encoded data back
    into a slice of the `Car` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we didn''t receive any errors, we print out the `cars` slice to standard
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to printing the `cars` slice to standard out, we write a response
    back to the web client indicating that the slice of `cars` has been received successfully.
    We can view this message in the web browser console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24b9fade-eb63-4b23-a704-55d075d06f03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: The server response to the web client'
  prefs: []
  type: TYPE_NORMAL
- en: Local storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Did you know that the web browser comes with a built-in key-value database?
    The name of this database is local storage, and in JavaScript, we can access the
    `localStorage` object as a property of the `window` object. Local storage allows
    us to store data locally within the web browser. Local storage is per domain and
    protocol, meaning that pages from the same origin can access and modify shared
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some benefits of local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides secure data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a far greater storage limit than cookies (at least 5 MB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides low latency data access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is helpful for web applications that need to operate offline (internet connection
    not required)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be utilized as a local cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common local storage operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be showing you how to perform some common operations on the `localStorage`
    object using JavaScript code. These operations include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting a key-value pair
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting a value for a given key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting all key-value pairs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clearing all entries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will show you how to perform the same operations using
    GopherJS, in a fully fleshed out example.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a key-value pair
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To store an item into local storage, we call the `setItem` method of the `localStorage`
    object, and pass in the key and value as parameters to the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Here we have provided a `"foo"` key, with a `"bar"` value.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a value for a given key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get an item from local storage, we call the `getItem` method of the `localStorage`
    object and pass in the key as the single parameter to the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Here we have provided the `"foo"` key, and we expect that the value of the `x` variable will
    be equal to `"bar"`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting all key value pairs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can retrieve all key-value pairs from local storage using a `for` loop and
    accessing the values of the key and value, using the `key` and `getItem` methods
    of the `localStorage` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We use the `key` method on the `localStorage` object, passing in the numeric
    index, `i`, to get the i^(*th*) key in the storage. Similarly, we pass in the `i` numeric
    index to the `key` method of the `localStorage` object, in order to get the name
    of the key at the ith place in the storage. Note that the name of the key is obtained
    by the `localStorage.key(i)` method call and passed to the `getItem` method to
    retrieve the value for the given key.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing all entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can easily remove all the entries in local storage by calling the `clear`
    method on the `localStorage` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Building a local storage inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the information presented in the previous section on how to utilize the
    `localStorage` object, let''s go ahead and build a local storage inspector. The
    local storage inspector, will allow us to perform the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing all the key-value pairs that are currently stored in local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new key-value pair to local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing all key-value pairs in local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 3.20* depicts the user interface for the local storage inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f23ed4be-f436-4afe-b71f-7ced3274cf8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: The Local Storage Demo user interface'
  prefs: []
  type: TYPE_NORMAL
- en: The box directly under the LocalStorage Demo title is a `div` container that
    is responsible for holding the list of key-value pairs that are currently stored
    in local storage. The Key input text field is where the user enters the key for
    the key-value pair. The Value input text field is where the user enters the value
    for the key-value pair. Clicking on the Save button will save the new key-value
    entry into local storage. Clicking on the Clear All button, will clear all key-value
    entries in local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve defined the layout for the local storage demo page inside the `localstorage_layout.tmpl`
    source file found in the `shared/templates/layouts` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: This layout template defines the layout of the local storage demo web page.
    We use template actions (shown in bold) to render the `partials/localstorageheader_partial` header
    template, and the `pagecontent` page content template.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the bottom of the web page, we include the JavaScript source
    file, `client.js`, which was produced by GopherJS, using the `script` tag (shown
    in bold).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve defined the header template for the local storage demo page inside the
    `localstorageheader_partial.tmpl` source file found in the `shared/templates/partials`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This header template is meant to render the `head` tag, where we include external
    CSS stylesheets using the `link` tags (shown in bold).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve defined the HTML markup for the local storage demo''s user interface
    in the `localstorage_example_page.tmpl` source file found in the `shared/templates`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `div` element with the `id` of `"storageContents"` will be used to store
    the list of item entries in the local storage database. In fact, we will use the
    dl (description list) element with `id` of `"itemList"` to display all the key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: We have defined an input text field for the user to enter the key, and we have
    also defined an input text field for the user to enter the value. We've also defined
    the markup for the `Save` button, and directly under that, we've defined the markup
    for the `Clear All` button.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the server-side route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve registered the `/localstorage-demo` route inside the `registerRoutes`
    function found in the `igweb.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve defined the `LocalStorageDemoHandler` server-side handler function to
    service the `/localstorage-demo` server-side route in the `localstoragedemo.go`
    source file found in the `handlers` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The `LocalStorageDemoHandler` function is responsible for writing the web page
    response to the client. It calls the `Render` method of the application's `TemplateSet`
    object, to render the `localstorage_example_page` template. You will learn more
    about rendering isomorphic templates, in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic
    Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the client-side functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Implementing the client-side functionality of the local storage inspector consists
    of these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the local storage inspector web page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing the local storage inspector
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initializing the local storage inspector web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to initialize the event handlers on the local storage inspector web
    page, we need to add the following line of code in the localstorage-demo `case`,
    inside the `initializePage` function found in the `client.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `InitializePage` function, defined in the `localstoragedemo` package,
    will add the event listeners for the Save and Clear All buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the local storage inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation of the local storage inspector can be found in the `localstorage.go`
    source file in the `client/localstoragedemo` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `import` groupings we include the `js` and `dom` packages (shown in
    bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve defined the `localStorage` variable and we''ve assigned it the value
    of the `localStorage` object that is attached to the `window` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As usual, we''ve aliased the `Document` object with the `D` variable to save
    us some typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InitializePage` function is responsible for setting up the event listeners
    for the Save and Clear All buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We fetch the `saveButton` element by calling the `GetElementByID` method of
    the `Document` object and providing the `id`, `"saveButton"`, as the sole input
    parameter to the method. Right below this, we add an event listener on the click
    event to call the `Save` function. Calling the `Save` function will save a new
    key-value pair entry.
  prefs: []
  type: TYPE_NORMAL
- en: We also fetch the `clearAllButton` element by calling the `GetElementByID` method
    of the `Document` object and providing the `id`, `"clearAllButton"`, as the sole
    input parameter to the method. Right below this, we add an event listener on the
    click event to call the `ClearAll` function. Calling the `ClearAll` function will
    clear all key-value pairs that are currently stored in local storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Save` function is responsible for saving the key-value pair into the web
    browser''s local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: We get the text input fields for the key and the value (shown in bold) using
    the `GetElementByID` method of the `Document` object. In the `if` conditional
    block, we check to see if the user has not entered a value for the Key input text
    field. If they have not entered a value, we return from the function.
  prefs: []
  type: TYPE_NORMAL
- en: If the user has entered a value into the Key input text field, we continue forward.
    We call the `SetKeyValuePair` function and provide the values for `itemKey` and
    `itemValue` as input parameters to the function.
  prefs: []
  type: TYPE_NORMAL
- en: We then set the `Value` property of both `itemKey` and `itemValue` to an empty
    string, to clear the input text field, so that the user can easily add new entries
    later without having to manually clear the text in these fields.
  prefs: []
  type: TYPE_NORMAL
- en: Finally we call the `DisplayStorageContents` function, which is responsible
    for displaying all the current entries in local storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `SetKeyValuePair` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Inside this function, we simply call the `setItem` method of the `localStorage`
    object, passing in the `itemKey` and `itemValue` as input parameters to the function.
    At this point, the key-value pair entry will be saved to the web browser's local
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DisplayStorageContents` function is responsible for displaying all the
    key-value pairs that are in local storage inside the `itemList` element, which
    is a `dl` (description list) element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: We call the `SetInnerHTML` method with an input value of empty string to clear
    the contents of the list.
  prefs: []
  type: TYPE_NORMAL
- en: We iterate through all the entries in local storage using a `for` loop. For
    each key-value pair present, we get `itemKey` and `itemValue` by calling the `localStorage`
    object's `key` and `getItem` methods, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: We use a `dt` element (`dtElement`) to display the key. A `dt` element is used
    to define a term in a description list. We use a `dd` element (`ddElement`) to
    display the value. A `dd` element is used to describe a term in a description
    list. Using the description list and its associated elements to display key-value
    pairs, we are using a semantic friendly approach to displaying the key-value pairs
    on the web page. We append the `dt` and `dd` elements to the `itemList` object
    by calling its `AppendChild` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ClearAll` function is used to remove all the key-value pairs that have
    been saved in local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: We call the `clear` method of the `localStorage` object, and then make a call
    to the `DisplayStorageContents` function. If everything is working properly, all
    the items should be cleared, and we should see no values appear in the `itemList`
    element once the Clear All button has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Running the local storage demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access the local storage demo at `http://localhost:8080/localstorage-demo`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a new key-value pair to local storage. In the Key input text field,
    let's add the `"foo"` key, and in the Value input text field, let's add the `"bar"` value.
    Click on the Save button to add the new key-value pair to local storage.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.21* shows the newly created key-value pair appear, after clicking
    on the Save button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/923f5dd7-6b4b-42d9-b8bd-d739bf695dfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: The Local Storage Inspector showing a newly added key-value pair'
  prefs: []
  type: TYPE_NORMAL
- en: Try refreshing the web page, and after that, try restarting the web browser
    and returning to the web page. Notice that in these scenarios, local storage still
    retains the key-value pairs that were saved. Upon clicking on the Clear All button,
    you will notice that the `itemList` has been cleared, as shown in *Figure 3.20*,
    since local storage has been emptied of all key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The local storage inspector that we just created is especially handy to inspect
    key-value pairs that have been populated by third party JavaScript solutions,
    used by our client-side web application. If you land on the local storage demo
    page, after viewing the image carousel on the IGWEB home page, you will notice
    that the itemList is populated with the key-value pairs shown in *Figure 3.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7232412-3b7a-4b72-873e-9f60e2b7fd6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: Local Storage Demo displaying key-value pairs that were populated
    by the image carousel'
  prefs: []
  type: TYPE_NORMAL
- en: These key-value pairs were populated by the image carousel, which we will implement
    as a reusable component in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml), *Cogs
    – Reusable Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced you to programming with Go on the front-end using
    GopherJS. We introduced you to the DOM and showed how you can access and manipulate
    it using GopherJS. We walked you through several microexamples to get you acquainted
    with what coding with GopherJS looks like. We then proceeded to show you fully
    fleshed out examples.
  prefs: []
  type: TYPE_NORMAL
- en: We showed you how to display the alert dialog and display a custom message.
    We also showed you how to change the CSS style property of an element. We proceeded
    to show you how to call JavaScript's `typeof` operator from within the confines
    of Go using the `jsbuiltin` package. We showed you how to create a simple lowercase
    text transformer and demonstrated how to send an `XHR Post` using the `xhr` package.
    We also showed you how to render an inline Go template, and finally, we showed
    you how to build a local storage inspector.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic Templates*,
    we will introduce isomorphic templates, which are templates that can be rendered
    either on the server side or the client side.
  prefs: []
  type: TYPE_NORMAL
