- en: Chapter 8. Raising Your Productivity with CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Class-based views** (**CBVs**) are views generated from models. In simple
    terms, we can say that these are like ModelForms, in that they simplify the view
    and work for common cases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'CRUD is the short form we use when referring to the four major operations performed
    on a database: create, read, update, and delete. CBV is the best way to create
    pages that perform these actions very quickly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating forms for creating and editing a model or database table data is a
    very repetitive part of the job of a developer. They may spend a lot of time in
    doing this properly (validation, prefilled fields, and so on). With CBV, Django
    allows a developer to perform CRUD operations for a model in less than 10 minutes.
    They also have an important advantage: if the model evolves and CBVs were well
    done, changing the model will automatically change the CRUD operations within
    the website. In this case, adding a line in our models allows us to save tens
    or hundreds of lines of code.'
  prefs: []
  type: TYPE_NORMAL
- en: CBVs still have a drawback. They are not very easy to customize with advanced
    features or those that are not provided. In many cases, when you try to perform
    a CRUD operation that has some peculiarities, it is better to create a new view.
  prefs: []
  type: TYPE_NORMAL
- en: You might ask why we did not directly study them—we could have saved a lot of
    time, especially when adding a developer in the database. This is because these
    views are generic. They are suitable for simple operations that do not require
    a lot of changes. When we need a complex form, CBVs will not be useful and will
    even extend the duration of programming.
  prefs: []
  type: TYPE_NORMAL
- en: We should use CBVs because they allow us to save a lot of time that would normally
    be used in running CRUD operations on models.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will make the most of our `TasksManager` application. Indeed,
    we will enjoy the time savings offered by the CBVs to move quickly with this project.
    If you do not understand the functioning of CBVs immediately, it doesn't matter.
    What we have seen so far in previous chapters already allows us to make websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will try to improve our productivity by covering the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `CreateView` CBV to quickly build the page to add projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see later how to display a list of objects and use the paging system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then use the `DetailView` CBV to display the project information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then learn how to change the data in a record with the `UpdateView`
    CBV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to change the form generated by a CBV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then create a page to delete a record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will eventually create a child class of `UpdateView` to make using
    it more flexible in our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CreateView CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CreateView` CBV allows you to create a view that will automatically generate
    a form based on a model and automatically save the data in this form. It can be
    compared to ModelForm, except that we do not need to create a view. Indeed, all
    the code for this will be placed in the `urls.py` file except in special cases.
  prefs: []
  type: TYPE_NORMAL
- en: An example of minimalist usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a CBV that will allow us to create a project. This example aims
    to show that you can save even more time than with Django forms. We will be able
    to use the template used for the creation of forms in the previous chapter''s
    project. Now, we will change our `create_project` URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add the following lines at the beginning of the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In our new URL, we used the following new features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CreateView.as_view`: We call the method `as_view` of the CBV `CreateView`.
    This method returns a complete view to the user. Moreover, we return multiple
    parameters in this method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: This defines the model that will apply the CBV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template_name`: This defines the template that will display the form. As the
    CBV uses `ModelForm`, we do not need to change our `create_project.html` template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success_url`: This defines the URL to which we will be redirected once the
    change has been taken into account. This parameter is not very DRY because we
    cannot use the `name` property of the URL. When we extend our CBV, we will see
    how to use the name of the URL to be redirected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s all! The three lines that we have added to the `urls.py` file will
    perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate the view that sends the form to the template with or without errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data is sent by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We just used one of the most interesting features of Django. Indeed, with only
    three lines, we have been doing what would have taken more than a hundred lines
    without any framework. We will also write the CBV that will allow us to add a
    task. Have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We then need to duplicate the `create_project.html` template and change the
    link in the `base.html` template. Our new view is functional, and we used the
    same template for project creation. This is a common method because it saves a
    lot of time for the developer, but there is a more rigorous way to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the code, we can add the following link to the end of the `article_content`
    block of the `index.htm`l template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Working with ListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ListView` is a CBV that displays a list of records for a given model. The
    view is generated to send a template object from which we view the list.'
  prefs: []
  type: TYPE_NORMAL
- en: An example of minimalist usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will look at an example displaying the list of projects and create a link
    to the details of a project. To do this, we must add the following lines in the
    `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following URLs to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create the template that will be used to display the results in a tabular
    form by adding the following lines in the `article_content` block after extending
    the `base.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We created the same list as in [Chapter 6](part0050.html#page "Chapter 6. Getting
    a Model's Data with Querysets"), *Getting a Model's Data with Querysets*, about
    the queryset. The advantage is that we used a lot less lines and we did not use
    any view to create it. In the next part, we will implement paging by extending
    this CBV.
  prefs: []
  type: TYPE_NORMAL
- en: Extending ListView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to extend the possibilities of the ListView CBV and customize
    them. This allows us to adapt the CBV to the needs of the websites. We can define
    the same elements as in the parameters in the `as_view` method, but it will be
    more readable and we can also override the methods. Depending on the type of CBV,
    spreading them allows you to:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the model and template as we did in the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the queryset to be executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the name of the object sent to the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the URL that will redirect the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will expand our first CBV by modifying the list of projects that we have
    done. We will make two changes to this list by sorting by title and adding pagination.
    We will create the `ListView.py` file in the `views/cbv` module. This file will
    contain our customized `listView`. It is also possible to choose the architecture.
    For example, we could create a file named `project.py` to store all the CBVs concerning
    the projects. This file will contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on, the new page is functional. If we test it, we will realize that
    only the first five projects are displayed. Indeed, in the `Project_list` object,
    we defined a pagination of five items per page. To navigate through the list,
    we need to add the following code in the template before the end of the `article_content`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of the template allows us to create links to the preceding and following
    pages at the bottom of the page. With this example, we created a sorted list of
    projects with pagination very quickly. The extending of CBVs can be very convenient
    and allows us to adapt to more complex uses. After this complete example, we will
    create a CBV to display a list of developers. This list will be useful later in
    the book. We must add the following URL after importing the `ListView` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use an inherited template of `base.html` and put the following code
    in the `article_content` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We will notice that the name of the developer is an empty link. You should refill
    it when we create the page that displays the details of the developer. This is
    what we will do in the next section with `DetailView`.
  prefs: []
  type: TYPE_NORMAL
- en: The DetailView CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DetailView` CBV allows us to display information from a registration model.
    This is the first CBV we will study that has URL parameters. In order to view
    the details of a record, it will send its ID to the CBV. We will study some examples.
  prefs: []
  type: TYPE_NORMAL
- en: An example of minimalist usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create a page that will display the details of a task. For this,
    we will create the URL by adding these lines in the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this URL, we added the parameter-sending aspect. We have already discussed
    this type of URL in an earlier chapter when we covered querysets.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This time, we really need to name the parameter `pk`; otherwise, the CBV will
    not work. `pk` means primary key, and it will contain the ID of the record you
    want to view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding the template, we will create the `en/public/task_detail.html` template
    and place the following code in the `article_content` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we refer to the foreign keys `Developer` and `Project`. Using
    this syntax in the template, we call the `__ unicode__()` of the model in question.
    This enables the title of the project to be displayed. To test this piece of code,
    we need to create a link to a parameterized URL. Add this line to your `index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This line will allow us to see the details of the first task. You can try to
    create a list of tasks and a link to `DetailView` in each row of the table. This
    is what we will do.
  prefs: []
  type: TYPE_NORMAL
- en: Extending DetailView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create the page that displays the details of a developer and his/her
    tasks. To get it done, we''ll override the `DetailView` class by creating a `DetailView.py`
    file in the `views/cbv` module and add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the following lines of code to the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the main data and develop tasks, we create the `developer_detail.html`
    template. After extending from `base.html`, we must enter the following lines
    in the `article_content` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This example has allowed us to see how to send data to the template while using
    CBVs.
  prefs: []
  type: TYPE_NORMAL
- en: The UpdateView CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`UpdateView` is the CBV that will create and edit forms easily. This is the
    CBV that saves more time compared to developing without the MVC pattern. As with
    `DetailView`, we will have to send the logins of the record to the URL. To address
    `UpdateView`, we will discuss two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing a task for the supervisor to be able to edit a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the time spent to perform a task to develop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of minimalist usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This example will show how to create the page that will allow the supervisor
    to modify a task. As with other CBVs, we will add the following lines in the `urls.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will write a very similar template to the one we used for `CreateView`.
    The only difference (except the button text) will be the `action` field of the
    form, which we will define as `empty`. We will see how to fill the field at the
    end of this chapter. For now, we will make use of the fact that browsers submit
    the form to the current page when the field is empty. It remains visible so users
    can write the content to include in our `article_content` block. Have a look at
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This example is really simple. It could have been more DRY if we entered the
    name of the URL in the `success_url` property.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the UpdateView CBV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our application, the life cycle of a task is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The supervisor creates the task without any duration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the developer has completed the task, they save their working time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will work on the latter point, where the developer can only change the duration
    of the task. In this example, we will override the `UpdateView` class. To do this,
    we will create an `UpdateView.py` file in the `views/cbv` module. We need to add
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We may use this CBV with the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For the `update_task_developer.html` template, we just need to duplicate the
    `update_task.html` template and modify its titles.
  prefs: []
  type: TYPE_NORMAL
- en: The DeleteView CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeleteView` CBV can easily delete a record. It does not save a lot of
    time compared to a normal view, but it cannot be burdened with unnecessary views.
    We will show an example of task deletion. For this, we need to create the `DeleteView.py`
    file in the `views/cbv` module. Indeed, we need to override it because we will
    enter the name of the URL that we want to redirect. We can only put the URL in
    `success_url`, but we want our URL to be as DRY as possible. We will add the following
    code in the `DeleteView.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the template will be used to confirm the deletion. Indeed,
    the `DeleteView` CBV will ask for user confirmation before deleting. We will add
    the following lines in the `urls.py` file to add the URL of the deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish our task suppression page, we will create the `confirm_delete_task.html`
    template by extending `base.html` with the following content in the `article_content`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Going further by extending the CBV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CBVs allow us to save a lot of time during page creation by performing CRUD
    actions with our models. By extending them, it is possible to adapt them to our
    use and save even more time.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom class CBV update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish our suppression page, in this chapter, we have seen that CBVs allow
    us to not be burdened with unnecessary views. However, we have created many templates
    that are similar, and we override the CBV only to use the DRY URLs. We will fix
    these small imperfections. In this section, we will create a CBV and generic template
    that will allow us to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use this CBV directly in the `urls.py` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the `name` property URLs for redirection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefit from a template for all uses of these CBVs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before writing our CBV, we will modify the `models.py` file, giving each model
    a `verbose_name` property and `verbose_name_plural`. For this, we will use the
    `Meta` class. For example, the `Task` model will become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create an `UpdateViewCustom.py` file in the `views/cbv` folder and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to create the template that displays the form. For this, we need
    to create the `UpdateViewCustom.html` file and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To test these new CBVs, we will change the `update_task` URL in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot that shows what the CBV will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a custom class CBV update](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned how to use one of the most powerful features
    of Django: CBVs. With them, developers can run efficient CRUD operations.'
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to change CBVs to suit our use by adding pagination on a
    list of items or displaying the work of a developer on the page that displays
    the information for this user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use session variables. We will explore
    this with a practical example. In this example, we will modify the task list to
    show the last task accessed.
  prefs: []
  type: TYPE_NORMAL
