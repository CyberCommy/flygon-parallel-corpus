- en: BSDs, Solaris, Windows, IaaS and PaaS, and DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining the type of system you're on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how the BSDs differ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how Solaris and illumos differ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how Windows differs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IaaS (Infrastructure as a Service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PaaS (Platform as a Service)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ops versus DevOps Wars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I was approached to write this book, I was initially asked to compose twelve
    chapters on the Linux system and modern administration. I now wish I'd agreed
    to that initial pitch, but instead I brazenly suggested a thirteenth chapter.
    What a fool I was.
  prefs: []
  type: TYPE_NORMAL
- en: So here we are, the ultimate chapter in this slog of a read (sorry, I'm so sorry),
    and it's all about the other systems in the computing world that you're going
    to need to know, because unfortunately, modern computing and IT infrastructure
    is frequently a hodgepodge of trends and antiques, in the form of Windows, Linux,
    and the mesh that goes in between.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to look at the BSDs briefly, because they're probably the closest
    you can get to "real" Unix in this day and age, and they're also close enough
    to Linux that there's BSD users out there who get viscerally angry when you use
    phrases like "they're close enough to Linux."
  prefs: []
  type: TYPE_NORMAL
- en: Then, we're going to discuss Solaris (again, in brief) and talk about the two
    forms it takes in modern infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: We'll have to discuss Windows, although I'm going to attempt to keep this section
    the briefest. If you're anything like me, you dislike the word "Windows" and all
    the connotations it brings. (We're not fooled by your semi-hippy approach to Linux
    in recent years, Microsoft—some of us like to be stubbornly tribal.)
  prefs: []
  type: TYPE_NORMAL
- en: Following our foray into other OSes, we're also going to look at **Infrastructure
    as a Service** (**IaaS**) and **Platform as a Service** (**PaaS**), despite how
    stupid these anagrams are, because they're a big part of modern DevOps and platform
    creation. You will have to use services like AWS and Azure in any full career,
    so it's good to get an understanding of the way they work sooner rather than later.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, there'll be a word on DevOps (I'll save the surprises of that section,
    for that section).
  prefs: []
  type: TYPE_NORMAL
- en: Determining the type of system you're on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Think about this: you were blindfolded, bundled into the trunk of a car, and
    then unmasked at the other end of a long journey to be presented with a blinking
    prompt. How would you determine what sort of system you were on?'
  prefs: []
  type: TYPE_NORMAL
- en: Your immediate instinct might be to assume you've been placed in front of a
    Linux box, but that's not a certainty. While it's true that Linux dominates the
    server's space, just because the instance has a black screen, white text, and
    a login prompt, doesn't mean that you've been placed in front of our friendly
    penguin OS.
  prefs: []
  type: TYPE_NORMAL
- en: It could be Linux, a BSD system, a Solaris system, or one of the many Unix derivatives
    from the nineties.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you've been given the credentials to log in, do so.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's an easy starting point.
  prefs: []
  type: TYPE_NORMAL
- en: uname
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''ve logged in successfully, determine what sort of kernel you''re
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Well that was anti-climactic... it's just a regular Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if it wasn''t? Imagine the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's more like it! This is a FreeBSD box!
  prefs: []
  type: TYPE_NORMAL
- en: Or is it a different BSD?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An OpenBSD box, cool! But we can go one further:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Huh? What's a `SunOS` when it's at home?
  prefs: []
  type: TYPE_NORMAL
- en: The short answer is that you can assume you've landed on either an Oracle Solaris
    or illumos distribution, both of which are relatively rare, but deserve a degree
    of respect.
  prefs: []
  type: TYPE_NORMAL
- en: The filesystem check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re still uncertain, you can quickly check the type of filesystem being
    used for slash-root, `/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'XFS is commonly found on Linux systems, specifically RHEL and CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Unix file system** (**UFS**) is usually seen on FreeBSD boxes (alongside
    ZFS, if you''ve got the RAM for it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'FFS? You''re joking... no, it''s the **fast file system** (**FFS**), and it''s
    commonly used on OpenBSD boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: FFS and UFS have the same heritage, though the code base isn't identical.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While we don''t get an actual filesystem type here, we can see `openindiana`
    listed in the output, which we know to be an illumos distribution. We can then
    use `zfs` to determine what our filesystem design is (and confirm it''s `zfs`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though the prompts might look the same (though generally, these distributions
    don't set Bash as the default shell; that's a Linux thing), but the underlying
    system can be vastly different from the familiar GNU userland that you're used
    to.
  prefs: []
  type: TYPE_NORMAL
- en: When we run `uname`, as we've discussed previously, we output the kernel of
    the system we've logged on to.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully it's a Linux box, especially if you've been held against your will
    and asked to fix something, but even if you're somewhat good with Linux, things
    should be relatively familiar. Processes run, the default tools are the same,
    and you can read `README` files or man pages to understand what you don't yet.
  prefs: []
  type: TYPE_NORMAL
- en: The filesystem check we did isn't the most scientific, but you can usually guarantee
    that commands like `mount` and `df` will be available to you, thanks to their
    pedigree.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a notable omission in the preceding section, and that's how you work
    out if you're on a Windows system or not.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way I've found to check that I'm at a Windows prompt is to measure
    how quickly my soul is ebbing away from my body. Failing that, I look for a `Music`
    folder somewhere on the filesystem, which seems to be inexplicably on desktop
    and server installs alike.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, if the preceding two methods fail you, then consider that Windows
    usually has a GUI (unless it's a modern Server OS with a trendy systems administrator,
    in which case it might just be a blue PowerShell prompt instead. Either way, I
    suspect you'll know).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how the BSDs differ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noticed that I deliberately split up OpenBSD and FreeBSD in this
    chapter, but they're just different distributions of "BSD", right?
  prefs: []
  type: TYPE_NORMAL
- en: Wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Linux, the different "flavors" of BSD don't share a kernel, and are more
    like different OSes than different distributions.
  prefs: []
  type: TYPE_NORMAL
- en: OpenBSD, FreeBSD, NetBSD, and Dragonfly BSD are all unique and distinct projects.
  prefs: []
  type: TYPE_NORMAL
- en: NetBSD even has a Dreamcast port. Finally, that console has a use!
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say there's no sharing of code and fixes between the distributions—providing
    porting is quicker than writing your own implementation, and the BSDs are more
    likely to use more "liberal" open source licenses, such as the MIT license, instead
    of "restrictive" open source licenses like the GPL (generally for ideological
    reasons).
  prefs: []
  type: TYPE_NORMAL
- en: The differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve already said, the BSDs are distinct operating systems, with an estimated
    ranking of popularity as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: FreeBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other BSDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, I''m going to touch on the two most popular and well-known: FreeBSD and
    OpenBSD.'
  prefs: []
  type: TYPE_NORMAL
- en: FreeBSD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An OS with a varied focus (servers, desktops, IOT devices), FreeBSD is the most
    popular of the BSD derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: It prides itself on having a vast array of software available, both in the form
    of pre-built packages (built quarterly at the time of writing) and "ports" that
    are built locally and are usually the most recent version of that piece of software.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of open source software is heavily Linux focused. This isn't the fault
    of the BSDs—it simply comes down to market share. Because of this focus, the FreeBSD
    project has a lot of volunteers who dedicate their time to making packages work
    natively on FreeBSD, having to do minor and sometimes major tweaks to software
    to get it to compile and run. Much of this effort is then pushed back upstream,
    and I've yet to see a project that isn't thankful for FreeBSD support being added.
  prefs: []
  type: TYPE_NORMAL
- en: Another element of FreeBSD that makes it a popular choice for people of the
    BSD mindset is the fact that it ships with ZFS as standard, and you're prompted
    to use ZFS for additional storage as well as the root filesystem of your device.
  prefs: []
  type: TYPE_NORMAL
- en: ZFS (specifically OpenZFS) is a filesystem, storage management, and all round
    wonder solution for storage desires. I've heard it being called "the last word
    in filesystems," and it's only the license associated with it that makes it uncommon
    on Linux platforms (FreeBSD has no such qualms).
  prefs: []
  type: TYPE_NORMAL
- en: The cuddle, or **C****ommon Development and Distribution License** (**CDDL**)
    is a fairly rare license in the open source world. Produced by Sun Microsystems
    in its heyday, the license has been called "incompatible" with the GPL.
  prefs: []
  type: TYPE_NORMAL
- en: While ZFS really is a great solution for storage, it can be confusing to newcomers,
    owing to the fact it doesn't follow the same patterns as traditional filesystems
    (even UFS—FreeBSD's simpler alternative) and blurs the lines a lot between filesystems
    and things like partitions. It also has some flaws. Because of its design, ZFS
    is memory-hungry, and given the fluctuating price of RAM in recent years, this
    can be prohibitive for end users.
  prefs: []
  type: TYPE_NORMAL
- en: FreeBSD also has a focus on stability, meaning that it includes features like
    the ability to rollback changes easily (if using ZFS) and has a very solid upgrade
    path (though it can be a little confusing and convoluted).
  prefs: []
  type: TYPE_NORMAL
- en: Jails are worth a mention too, since FreeBSD fans will be annoyed if I don't
    bring them up. Before Docker, there were jails, the ability to segment portions
    of your OS from each other on FreeBSD systems. Introduced in 2000, they allow
    FreeBSD users to segregate their software on a host system, and even install different
    versions of FreeBSD alongside each other so that software explicitly written for
    FreeBSD 9 can run on a FreeBSD 12 box.
  prefs: []
  type: TYPE_NORMAL
- en: It's a bit unfair that jails didn't really take off, though a lot of this is
    down to FreeBSD market share again. They're also a lot more unwieldy than Docker
    and other container solutions, despite being arguably superior. I hold that Docker
    took off in the way it did owing in large part to places like Docker Hub, which
    FreeBSD lacked an equivalent of.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, I can sum up FreeBSD like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pros**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ships with ZFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very up-to-date packages available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD jails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensible segmentation of first-party packages and third-party (additional packages
    are normally wholly installed under `/usr/local/`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very good "FreeBSD Handbook"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller install base than Linux systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlikely to have newer drivers (though this has improved in recent years)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually favors older solutions (X over Wayland)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade process can be confusing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes gets overlooked by vendors for patches and security disclosures (think
    vulnerabilities in Intel CPUs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD is a good choice, but I deliberately don't recommend it to Windows or
    macOS switchers. Instead, I point them to popular Linux distributions like Ubuntu
    and Fedora. FreeBSD has its place, and you can do a lot worse for a storage server,
    but it's not the first choice in a lot of minds.
  prefs: []
  type: TYPE_NORMAL
- en: OpenBSD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An OS with an almost legendary focus on security and stability, OpenBSD is the
    software that took out its "Linux compatibility layer" because of concerns around
    the security of keeping it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve not heard of or used OpenBSD, I can guarantee that you''ve at least
    used an associated project. Some that fall under the OpenBSD realm are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: LibreSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSMTPD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenNTPD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: httpd (that's the OpenBSD-specific package, not re-badged Apache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that while you've probably never SSH'd onto an OpenBSD system itself,
    you're still using software that's built primarily on OpenBSD systems. I know
    of no distribution of Linux that doesn't use OpenSSH as the default SSH client
    and server (though alternatives do exist).
  prefs: []
  type: TYPE_NORMAL
- en: The software aside, for as good as that software is, OpenBSD is so much more.
  prefs: []
  type: TYPE_NORMAL
- en: Being a relatively small project, and again both open source and donation-funded,
    OpenBSD doesn't have a very large install base, but it's extremely popular when
    it comes to embedded systems, firewalls, and routers. This is because while its
    multi-processor elements perhaps aren't as robust as some other projects, it features
    software such as the **packet filter** (**pf**) firewall, and is known for putting
    security first.
  prefs: []
  type: TYPE_NORMAL
- en: OpenBSD's tagline on their website is "Only two remote holes in the default
    install, in a heck of a long time!", which just goes to show exactly how committed
    to security they are. I've seen OpenBSD actively remove software because of the
    simple fact that it had dubious security associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: LibreSSL was born out of the frustration around OpenSSL and the fact that it
    was easier to fork and fix the project (in the developer's minds) than it was
    to argue for increased security upstream. It's easy to see how software that underpins
    a lot of the internet's security should be kept secure.
  prefs: []
  type: TYPE_NORMAL
- en: Famous for tweaking software to diminish the opportunity for vulnerabilities
    to pop up, this can sometimes backfire on OpenBSD, as they can get overlooked
    for vulnerability disclosure, for fear they'll fix the problem immediately (instead
    of waiting until the "official" date at which the vulnerability can be revealed
    to the public). For an interesting case study of this, see the "KRACK Attacks"
    vulnerability, and OpenBSD's response ([https://www.krackattacks.com/#openbsd](https://www.krackattacks.com/#openbsd)).
  prefs: []
  type: TYPE_NORMAL
- en: Because OpenBSD is a different OS to FreeBSD, it doesn't include the likes of
    jails nor does it have ZFS (favoring FFS). There isn't much you can do to the
    default installation in terms of tweaks, and the argument goes that "you shouldn't
    have to."
  prefs: []
  type: TYPE_NORMAL
- en: It can be used as a desktop, server (generally a firewall from what I've seen),
    or an embedded OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could probably sum up OpenBSD as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pros**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extremely heavy focus on security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heavy focus on quality of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasonable upgrade path (though time-consuming)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent release cycle and fast patching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pf, which is honestly great
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of packages (though its ports system has a lot)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable and secure can mean a lack of features (this depends on the individual
    really)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very small install base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FFS is creaky and showing its age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theo de Raadt (OpenBSD's benevolent dictator for life) is known to speak his
    mind (read into that what you will)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I use OpenBSD on a singular laptop, mostly for the experience of the thing,
    but we're on 6.4 now and it was first installed with 6.0 (that also featured some
    kick-ass release artwork). The laptop runs well, though it's doing very little
    most of the time. I have also tried using OpenBSD as a server, but for my sins
    I soon found it annoying when I couldn't get hold of packages I thought were pretty
    standard.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Solaris and illumos differ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've sort of been dreading this section, because it's very hard to talk about
    companies like Oracle without getting at least a little annoyed.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to look briefly at the history of Oracle and their Sun acquisition,
    as well as looking at the OpenSolaris movement and the systems that spawned out
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, I should point out that illumos and Solaris have a very Unix
    background, and they're arguably the "purest" Unix derivatives available today.
    You might have never used either of them, but there's a good chance you've used
    a website or an online portal that's back-ended by either of these two OSes.
  prefs: []
  type: TYPE_NORMAL
- en: The differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, a bit of history.
  prefs: []
  type: TYPE_NORMAL
- en: Solaris (sort-of-previously SunOS) was released in the early nineties by Sun
    Microsystems, and was initially designed to work on the also-Sun SPARC line of
    processors, though it quickly got expanded to support x86 processors too.
  prefs: []
  type: TYPE_NORMAL
- en: For a while, Sun (and its purple behemoths in server racks everywhere) were
    well regarded and a fairly common sight in data centers. The company went from
    strength to strength, developing things such as Solaris Zones (like FreeBSD jails,
    as we discussed previously), ZFS, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: Not really a home-user system, Solaris was popular alongside SPARC processors
    in enterprise environments, though as Linux gained traction and market mind-share,
    this and other alternative OSes, soon lost ground.
  prefs: []
  type: TYPE_NORMAL
- en: In 2005, Sun made the decision to open source Solaris under the CDDL license,
    creating the "OpenSolaris" project at the same time. This was an effort to build
    a community around Solaris that might increase uptake and mind-share.
  prefs: []
  type: TYPE_NORMAL
- en: However, when Oracle bought Sun in 2009 (completed in 2010), they almost immediately
    discontinued the practice of distributing public updates to the source code, and
    effectively reverted Solaris 11 (as it was) to being a closed source product.
  prefs: []
  type: TYPE_NORMAL
- en: They couldn't put the genie back in the bottle though, and the code had been
    released once already, meaning that while OpenSolaris effectively died, derivatives
    continued.
  prefs: []
  type: TYPE_NORMAL
- en: Confusingly, a lot of these derivatives fall under the "illumos" umbrella, which
    is probably the main fork of the OpenSolaris project, with some related projects
    such as SmartOS (from Joyent, now a Samsung company) deviating slightly.
  prefs: []
  type: TYPE_NORMAL
- en: illumos (small "i", for some reason) comprises a kernel, system libraries, system
    software, and device drivers.
  prefs: []
  type: TYPE_NORMAL
- en: In general, this means that when people refer to "Solaris" nowadays, they're
    either remembering Sun-of-old lovingly, alongside installations they may have
    done a decade ago, or they're using it to refer to the not-uncommon Solaris 11
    that Oracle is still publishing, supporting, and allegedly actively developing.
    At the time of writing, the latest release was 11.4 in August of 2018.
  prefs: []
  type: TYPE_NORMAL
- en: I refer to SmartOS, OpenIndiana, and others as Solaris in casual conversation,
    though this is technically incorrect and probably going to get me an angry letter
    from Oracle one of these days.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle Solaris
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've already said, Oracle still actively publishes and supports Solaris,
    though a lot of the installations you'll come across these days are likely old
    installs that are still going. Solaris 10, first released in 2005, is technically
    still in support.
  prefs: []
  type: TYPE_NORMAL
- en: Solaris 10 officially goes out of support in January 2021—though I'm willing
    to bet the limit to how long this support continues comes down to how deep your
    pockets are.
  prefs: []
  type: TYPE_NORMAL
- en: Featuring SPARC processor support and a tendency toward database installations,
    Solaris may be something you come across in your lifetime as an engineer, and
    if you do decide to become familiar with it, there's a good chance you'll join
    a diminishing pool of people with the knowledge of how to support it, meaning
    you may find yourself in demand.
  prefs: []
  type: TYPE_NORMAL
- en: Please don't decide to learn Oracle Solaris inside and out on the gamble of
    having work in the future—I won't be held responsible if you find yourself an
    expert in a dead field.
  prefs: []
  type: TYPE_NORMAL
- en: ZFS is also a strong feature of Solaris, and while cross compatibility was attempted
    by the OpenZFS project, this seems to have fallen by the wayside in recent years,
    owing mostly to the diverging code base and a seeming unwillingness to keep parity
    of features by Oracle (though don't take my word on that—I'm just a consumer of
    rumor).
  prefs: []
  type: TYPE_NORMAL
- en: illumos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The spiritual continuation of the OpenSolaris project, illumos forms the base
    of a few different distributions that sought to keep the legacy of CDDL-based
    Solaris alive.
  prefs: []
  type: TYPE_NORMAL
- en: OpenIndiana is perhaps the most user-friendly of these distributions, and still
    features ongoing enhancements. It can be downloaded and tried out in a VM (which
    I would encourage, just for a poke around).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run it, though, don''t be surprised to find references to Solaris
    and SunOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Featuring a small package pool, you're also unlikely to find the trendier software
    of the day, but it will have the programming languages you're familiar with, and
    it's undeniably solid.
  prefs: []
  type: TYPE_NORMAL
- en: Both Oracle's Solaris and illumos have had some great minds work on them in
    the past, meaning that they also feature stable kernels and sensible approaches
    to development (if you believe some of the more vocal engineers who worked on
    it).
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, there's a certain amount of head-butting that goes on in the Solaris,
    BSD, and Linux world, with everyone being very opinionated about the "correct"
    way to do specific things, despite all of these OSes being able to trace their
    legacy or inspiration back to a common core (Unix).
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I like installing OSs and tinkering—I'm weird like that.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Windows differs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll have to use Windows—it's a fact of life (at least at the moment).
  prefs: []
  type: TYPE_NORMAL
- en: If you're not forced to use Windows as the desktop OS of choice in your workplace,
    then there's a good chance there's going to be at least one Windows server you
    have to babysit or manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows still sees common installations for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Active Directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email with Exchange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also used in the wider server world, with software like IIS holding a sizeable
    (though much smaller than open source offerings) chunk of the web.
  prefs: []
  type: TYPE_NORMAL
- en: Right from the off, and as we talked about previously, Windows and Linux differ
    in some key ways.
  prefs: []
  type: TYPE_NORMAL
- en: The differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows is licensed. This is perhaps the most obvious difference between the
    open source offerings and the proprietary world. If you want to use Windows in
    production, you have to ensure that you're correctly licensed, or face a fine
    for being out of compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Funnily enough, this is probably the biggest reason why Linux saw the adoption
    that it did. When faced with a free offering of something that can do the exact
    same thing you're trying to do with Windows, most admins would at least try the
    free version first.
  prefs: []
  type: TYPE_NORMAL
- en: The second most obvious difference, although this is slowly changing, is the
    fact that Windows installs a GUI by default, whereas Linux prefers a simple text
    prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The argument of CLI versus GUI has raged for years, and I'm not about to continue
    it now, but I will say that expending extra resources on graphics capabilities
    on an OS that's rarely—if ever—going to be logged into, seems immensely stupid
    and wasteful.
  prefs: []
  type: TYPE_NORMAL
- en: While it's perfectly possible to install a cut-down version of Windows now that
    doesn't feature a GUI (Windows Server 2016 Nano, for example), it's still not
    frequently seen in data centers, and a lot of functionality is still mostly driven
    by GUIs (especially in third-party software).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Linux, where SSH is king, Windows features **Remote Desktop Protocol**
    (**RDP**) as its connection method of choice, delivering a graphical representation
    of the server's desktop to your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Amusingly, RDP has also started to be replaced by the likes of remote PowerShell
    connections, and even SSH (which Microsoft has seemingly started to appreciate
    as a very nice and lightweight solution, though adoption rates are still up in
    the air).
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, Windows also doesn't feature the Linux kernel, instead using the
    **NT kernel** for its own interaction with hardware and low-level work.
  prefs: []
  type: TYPE_NORMAL
- en: Anecdote time!
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, I was talking with a friend as we walked through the city after
    work. I was young and naive, so I casually mentioned that it might be a good idea
    for Linux people to use Windows more, because adoption from our side would only
    drive improvements on the other side of the fence.
  prefs: []
  type: TYPE_NORMAL
- en: This resulted in raucous laughter and mockery, along with my friend relaying
    this mad suggestion to others from our workplace once we got to the restaurant
    we were heading to. Everyone had a good chuckle at my expense and the matter was
    closed, with the general consensus from us Linux people being that Windows was
    always going to be garbage, and nothing could save it.
  prefs: []
  type: TYPE_NORMAL
- en: Fast forward a few years, that same friend now actively advocates PowerShell,
    has Windows installed on his work machine, and talks about the virtues of using
    Windows over Linux for select tasks.
  prefs: []
  type: TYPE_NORMAL
- en: I bring this up because I suspect he'll read this book at some point, and I
    just want to remind him that back in the midst of time, he dismissed Windows out
    of hand, just for being Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Times do change, and while Microsoft still get a lot of (arguably justified)
    flack for their stance on things like privacy, they do seem to be making an effort
    to realize their OS as a cloud-world solution.
  prefs: []
  type: TYPE_NORMAL
- en: Some people reading this will be old enough to remember **embrace, extend, and
    extinguish** (**EEE**), which is a phrase that was used internally at Microsoft
    to talk about its plan for manipulating open and widely adopted standards, extending
    them with proprietary additions before pushing the open and free alternatives
    out of the market, by saying their product could do everything the others could,
    and more. (Think AD, which is basically LDAP with more bells and whistles.)
  prefs: []
  type: TYPE_NORMAL
- en: There's a few people who believe Microsoft's recent "Microsoft loves Linux"
    stance is just a ploy, and we're about to see a revival of the "EEE" approach.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS (Infrastructure as a Service)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In short and disingenuously, IaaS can be summed up as "cloud servers."
  prefs: []
  type: TYPE_NORMAL
- en: IaaS is the term used by cloud providers for denoting the idea that you can
    shift all those dusty, noisy, and expensive on-premises boxes into "the cloud."
  prefs: []
  type: TYPE_NORMAL
- en: In reality, the cloud is just the marketing term for "a bunch of servers in
    various data centres," and it annoys many engineers who dislike wool-filled terms
    that only serve to obfuscate and confuse.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of doing something like shifting your infrastructure into the cloud
    should be obvious, and we've discussed the idea of **Infrastructure as Code**
    (**IaC**)before.
  prefs: []
  type: TYPE_NORMAL
- en: Gone are the days when deploying a development environment means buying new
    servers from your distributor, racking and cabling them all, and making sure you've
    got a decent method of getting your OS of choice on there.
  prefs: []
  type: TYPE_NORMAL
- en: Now, infrastructure, from switches to firewalls and servers, can be deployed
    with only a few clicks of the mouse, or better yet, a few commands on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS means that you can deploy thousands of boxes in seconds, and tear them
    down just as quickly. This scalability and ease of deployment has meant that companies
    who would previously need to have entire data centres, just for jobs they ran
    once a month, can now save the cost of power and cooling by simply spinning up
    those servers for one "fifteen minute job" and then removing them again.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the biggest benefit of using a cloud solution for your infrastructure
    though, is the fact you don't have to worry about the underlying hardware. Someone
    else (the provider) is responsible for making sure that the servers you're building
    on top of are working, and you generally don't have to concern yourself with things
    like hardware alarms.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS providers and features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest provider of IaaS services at the moment is Amazon, with their **Amazon
    Web Services** (**AWS**) offering. It might seem a bit strange that an online
    retailer is also the biggest supplier of cloud solutions, but when you consider
    the infrastructure they would have had to design and build for their own platform,
    it makes sense that they would see their way to selling it as a service.
  prefs: []
  type: TYPE_NORMAL
- en: AWS is well supported by IaC tools such as Terraform and Packer, being a first
    class citizen, and it also features tools of its own, such as CloudFormation (like
    Terraform).
  prefs: []
  type: TYPE_NORMAL
- en: Amusingly, AWS also obfuscates names for some strange reason, leading to sites
    like [https://www.expeditedssl.com/aws-in-plain-english](https://www.expeditedssl.com/aws-in-plain-english),
    which offers a list of Amazon's names for things, and then the English equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: EC2, for example, is basically Amazon's name for servers.
  prefs: []
  type: TYPE_NORMAL
- en: AWS was launched in 2006, meaning that they had a head-start on Azure, which
    launched in 2010.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft, with Azure, are probably the second largest supplier of cloud solutions,
    and they have the added advantage that if your enterprise signs up to use Office365
    for email and documents, there's a good chance Microsoft will push you to use
    Azure for your infrastructure, too.
  prefs: []
  type: TYPE_NORMAL
- en: There's obviously other providers too, and not all IaaS has to be a remote solution.
    You could deploy an OpenStack installation in your data centre, and then interact
    with its APIs to create an IaaS platform that you use to programmatically spin
    up virtual infrastructure. Obviously, the caveat here is that you still have to
    maintain the underlying boxes, OS, and IaaS software.
  prefs: []
  type: TYPE_NORMAL
- en: Google has an IaaS offering, as do Oracle, Rackspace, and IBM. On the smaller
    side, you have the likes of DigitalOcean, Scaleway, and OVH. The choice is yours
    as to which you use, and it comes down to features that are offered more often
    than not.
  prefs: []
  type: TYPE_NORMAL
- en: If you have certain requirements (such as data sovereignty), you may find that
    you absolutely have to use an on-shore offering, meaning that you may find some
    of the contenders for IaaS providers are instantly ruled out, but there's usually
    something to fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS provides the administrator with flexibility, which means that you no longer
    run the risk of under-speccing a box for specific software, as you can determine
    if you need more resources and simply destroy the box, before creating a new one
    of a bigger type.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS means that your firewall and load balancer rules are no longer stored in
    a dumped config file from the half-U box that's inconspicuously whirring near
    your feat. Instead, you can configure text files, which are then read and applied
    as the rest of your infrastructure is built.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS even means that you can test your infrastructure periodically, destroying
    and rebuilding whole clusters on a schedule, just to make sure an OS update or
    a code change hasn't broken anything.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS (Platform as a Service)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the other side of IaaS, or perhaps in parallel to it, is the concept of PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Platform as a Service is almost the logical continuation of the virtualization
    of infrastructure, abstracting one level further and asking the question "why
    are we asking our users to spin up a server for PostgreSQL, when we could just
    spin up a PostgreSQL instance?".
  prefs: []
  type: TYPE_NORMAL
- en: Yes, there will always be a server somewhere, that's a given. These services
    don't just run ephemerally atop a CPU that's floating in a room full of mist somewhere
    (despite that being a cool mental image), but the critical part of this philosophy
    is the idea that you don't care.
  prefs: []
  type: TYPE_NORMAL
- en: Realistically, you don't give a damn about the OS your database is running on,
    as long as it's actually running and isn't about to crash. However, as an administrator in
    the past, you would be tasked with exactly that—keeping on top of patches and
    reboots just to make sure that the database itself kept going.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS as a concept therefore sounds wonderful.
  prefs: []
  type: TYPE_NORMAL
- en: Why should you spin up several OS instances for hosting a website, running a
    database, or deploying Redis, when you could use off-the-shelf offerings that
    provide an endpoint to connect to, and leave the worry of the OS behind?
  prefs: []
  type: TYPE_NORMAL
- en: In the new world, you can deploy your website to a shared web segment, connect
    to a database you've specified, and interact with a Redis endpoint that you've
    no idea what version of Linux it's running on top of (if it's Linux at all!).
  prefs: []
  type: TYPE_NORMAL
- en: In theory, this also means that developers will have an easier time when writing
    software, as they don't have to concern themselves with specific OS quirks or
    minor differences that might affect their code. As long as developers target the
    common platform provided to them by PaaS, they need not know what OS is running
    underneath at all.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS providers and features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with IaaS, AWS and Azure are rife with PaaS offerings.
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious offerings are databases, with AWS offering PaaS relational
    databases, NoSQL databases (DynamoDB), and caching systems like Amazon ElastiCache.
  prefs: []
  type: TYPE_NORMAL
- en: Azure offerings for databases include MSSQL deployments (obviously) and recently,
    the inclusion of PostgreSQL too.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon offer domain name services in the form of Route 53 (ha-ha guys, very
    clever, now quit it with the stupid naming). They also offer CDN solutions, VPN
    setups, and Active Directory services.
  prefs: []
  type: TYPE_NORMAL
- en: Azure offer a CDN solution too, alongside Web Apps (used to host web applications
    and sites), Azure Blob Storage, and non-relational database offerings, such as
    Cosmos DB. There's even a specifically named "Redis Cache" offering to stop you
    having to create your own.
  prefs: []
  type: TYPE_NORMAL
- en: The list goes on and on, meaning that it's not uncommon for greenfield projects
    to get lost among the potentials they can use in their deployment. I would hazard
    that a good rule of thumb for any 21st Century sysadmin should be "if you don't
    have to manage it, don't try."
  prefs: []
  type: TYPE_NORMAL
- en: If you can get away with using a PaaS option, do, because in the long run it'll
    save you an immense amount of headaches. While the learning curve might be steep
    to begin with, you'll thank your lucky stars that you've gone with a PaaS offering
    the next time there's some major OS vulnerability and you need to start a round
    of critical patching.
  prefs: []
  type: TYPE_NORMAL
- en: Azure and AWS are the obvious two, but as with IaaS, other providers do exist.
    GCP (Google Compute Platform) is the most obvious third contender, but the smaller
    providers are taking their tentative first steps into the market too.
  prefs: []
  type: TYPE_NORMAL
- en: DigitalOcean have started offering things like managed Kubernetes (which is
    sort of PaaS, because you can deploy your own containers into a managed platform),
    block storage, and load balancers. Scaleway have started a public beta for Object
    Storage (at the time of writing).
  prefs: []
  type: TYPE_NORMAL
- en: I think the biggest problem with PaaS is the fact that a lot of work goes into
    it behind the scenes to make it seamless for the end users.
  prefs: []
  type: TYPE_NORMAL
- en: You consume that database offering like it's nothing, creating your schema atop
    a transparent fabric, but somewhere down the chain, someone is having to design
    and maintain the systems those PaaS offerings sit atop... I hope they get paid
    a lot of money to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, there's negatives—when you go PaaS, there's frequently a case of
    WYSIWYG (what you see is what you get), and the off-the-shelf offering you're
    using won't always be a hundred percent suitable for what you need. If it's ninety
    percent suitable, though, you need to make the judgement call on if it's worth
    that ten percent, or if you'd rather fight a full-fat but customizable IaaS deployment
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: The Ops versus DevOps Wars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps as a word has been misunderstood, abused, and twisted by recruiters everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the subreddit for DevOps ([https://old.reddit.com/r/devops](https://old.reddit.com/r/devops))
    and you'll see DevOps referred to as a "movement," which is what it was originally
    intended to be.
  prefs: []
  type: TYPE_NORMAL
- en: A contraction of Development and Operations, DevOps is supposed to be a methodology
    that combines the principles of software development with traditional IT operations.
  prefs: []
  type: TYPE_NORMAL
- en: However, we live in the real world, and while it might be fun for you to shout
    "DevOps isn't a job title!" at the recruiter on the other end of the phone (don't
    do this), it doesn't make the winds of change any weaker.
  prefs: []
  type: TYPE_NORMAL
- en: I've been called a DevOps engineer, and I know many other people who have too.
    I've also applied for jobs that were specifically hiring for "a DevOps person
    to come on-board and help us evolve." It comes down to usage, as with so much
    in the language world, and if the person doing the hiring says "I want a DevOps,"
    then the recruiter is going to advertise for one.
  prefs: []
  type: TYPE_NORMAL
- en: The sector itself is only going from strength to strength, as the proven advantages
    of combining traditional development approaches with infrastructure and application
    management become more obvious, and the rise of IaaS and PaaS solutions has only
    succeeded in speeding this adoption up.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, I would say working in a DevOps environment comes down to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Appreciating infrastructure as code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valuing reusability of code and practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing and adopting new technologies or practices where appropriate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many people have different definitions of what "DevOps" is, despite those who
    shout until they're blue in the face that it's a black and white definition, but
    perhaps the worst offenders are the stuck sysadmins and operations engineers who
    simply don't believe in progress.
  prefs: []
  type: TYPE_NORMAL
- en: I've met people like this—those who don't believe in codification—who seem to
    like snowflake servers for some reason, and who always bill themselves as administrators,
    despite being overlooked for jobs because of it.
  prefs: []
  type: TYPE_NORMAL
- en: There's definitely value in knowing and appreciating traditional system administration,
    but those skills go hand in hand with modern methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: More of a skirmish, really
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It used to be that every sysadmin was expected to know at least a little bit
    of SQL, because they were usually thought of as being the DBA (Database Administrator)
    for the infrastructure, too. Now, it's assumed that the sysadmin will also be
    proficient in at least a couple of "DevOps" tools.
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps tools" also has a bit of a vague definition, but anything by Hashicorp
    probably applies.'
  prefs: []
  type: TYPE_NORMAL
- en: Where things start to get tricky is the devolution of responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are companies out there that have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A platform team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An operations team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DevOps team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A development team with a DevOps engineer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You tell me, based on the aforementioned list, who is responsible for making
    sure that the OS is up to date.
  prefs: []
  type: TYPE_NORMAL
- en: It's the platform team, surely? The platform is theirs, so they've got a responsibility
    to ensure that all the OSes in the environment are on the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: But what about the DevOps team? They wrote the code to configure the boxes,
    and we know that a bit of their Ansible runs a "yum update" right at the beginning—surely
    they should just run that same Ansible again?
  prefs: []
  type: TYPE_NORMAL
- en: What about operations? In the past, their responsibility might have been ensuring
    OS changes didn't impact software, so surely they should be the ones to update
    the OS?
  prefs: []
  type: TYPE_NORMAL
- en: The developers are the ones who want the latest features of that OS package,
    and they're the ones who've asked for the update to be done—does the responsibility
    therefore lie with their "DevOps" team member?
  prefs: []
  type: TYPE_NORMAL
- en: It's confusing, but not uncommon, to see arguments about responsibility, or
    even arguments about what job title an individual is hired for.
  prefs: []
  type: TYPE_NORMAL
- en: Partly, this is the fault of the company for not defining a rigid structure,
    but it's also the fault of people who bill themselves a certain way and then silo
    themselves from anything they don't deem to be related to their job.
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself in a company like this, with warring factions who don't
    want to take responsibility for anything, it might be an idea to talk to your
    superior, or superior's superior, or even CTO, about structure.
  prefs: []
  type: TYPE_NORMAL
- en: A friend of mine once said (and I'm paraphrasing), "the job title changes, but
    we're just operations engineers at the end of the day." His meaning was that while
    new technologies and trends come and go (I'm looking at you, Node.js!), we'll
    still be needed in our traditional capacities to pick up the pieces when it all
    goes to hell.
  prefs: []
  type: TYPE_NORMAL
- en: Roundup - BSDs, Solaris, Windows, IaaS and PaaS, DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I wanted this chapter to be a bit of a mixed bag that touched on various addendum
    elements to our existence as system administrators. Many of these concepts could
    fill a chapter on their own, but I've already been told by a few people that this
    book is too long, and I've not even finished writing it yet!
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you've got some idea about the other OSes that exist in the world,
    if you didn't already, and you might even have an inclination to go away from
    this chapter and install SmartOS, or OpenBSD, which I would highly encourage.
    It's good to not silo yourself, and who knows? At some point in the future, this
    beast we know as Linux might die, and something else could rise from the ashes
    to take its place. You should be ready.
  prefs: []
  type: TYPE_NORMAL
- en: Like Linux dying, traditional system administration is definitely changing,
    and if my somewhat sarcastic tone throughout this chapter has suggested anything,
    it's that you should be ready to change with it. IaaS is already commonplace,
    though it's increasingly losing market share to PaaS solutions, especially in
    the enterprise world. Learn how to deploy a website without touching an underlying
    OS once, and you'll be in demand (for the moment, at least).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, there's DevOps, which I've tried to keep short on purpose, because I
    already think I'm going to get people arguing with me about definitions. My friend
    is right, and our job title seems to changes every five years, but ultimately
    it always comes back to the same thing—do you know where to find the log file,
    and can you work out why the service crashed?
  prefs: []
  type: TYPE_NORMAL
- en: If you take anything away from this section, take away the fact that you'll
    never know everything there is to know about the systems administration world,
    but the more you know, the more you can earn... or the more pride you might feel
    in your work—something fluffy like that.
  prefs: []
  type: TYPE_NORMAL
