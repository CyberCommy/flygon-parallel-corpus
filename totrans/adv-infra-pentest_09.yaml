- en: VoIP Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Voice over IP** (**VoIP**) is pushing business communications to a new level
    of efficiency and productivity. VoIP-based systems are facing security risks on
    a daily basis. Although a lot of companies are focusing on the VoIP quality of
    service, they ignore the security aspects of the VoIP infrastructure, which makes
    them vulnerable to dangerous attacks. This chapter will tackle most VoIP security
    issues using a step-by-step guidance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: VoIP protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoIP attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoLTE attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to defend against VoIP attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoIP fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to learn how to pentest VoIP, we need to have a clear understanding
    of how the VoIP infrastructure actually works. We are going to dissect VoIP protocols
    in order to learn later how to attack VoIP systems. The following subsections
    are some well-known standards that voice and video communications make possible.
    Let's explore them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: H.323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'H.323 is a data over IP standard introduced by the **International Telecommunication
    Union Standardization Sector** (**ITU-T**). As you can see, this standardization
    body uses letters to define the scope based on many criteria, listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H**: For audiovisual and multimedia systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**G**: For transmission systems and media'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q**: For switching and signaling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**T**: For terminals for telematic services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H.323 is one of the oldest packet-based communication systems protocols. Thus,
    this protocol is stable. The current version is v6\. It is well used by many vendors
    in many products, such as Cisco call manager, NetMeeting, and RadVision.
  prefs: []
  type: TYPE_NORMAL
- en: 'H.323 uses many types of devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminals:** These are user devices such as IP phones and videoconferencing
    systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multipoint control units:** These are composed of two logical components—
    the **Multipoint Controller** (**MC**) and the **Multipoint Processor** (**MP**).
    Their role is managing multipoint conferences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gatekeeper: **This is optional. Gatekeepers provide some additional services
    such as user authentication and address resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The H.323 stack is based on the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: IPv4 network layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User datagram protocol layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signaling protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-call setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video codecs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio codecs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the different components of the H.323 stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Skinny Call Control Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Skinny Call Control Protocol** (**SCCP**), developed by Selsius, is a Cisco-proprietary
    protocol. It is called skinny because it is a lightweight protocol used in IP
    telephony and call managers'' communications. This communication uses the following
    different types of messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0001**: `RegisterMessage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0002**: `IPportMessage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0081**: `RegisterAckMessage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These messages follow this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot is taken from a Skinny capture using Wireshark, downloaded
    from the Wireshark website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: RTP/RTCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Real-time Protocol** (**RTP**) is a transport protocol, specifically over
    **UDP**, based on RFC 3550\. It is used in real-time multimedia applications and
    in end-to-end real-time data stream transfer. In order to achieve that, a video,
    for example, goes through a number of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packetizing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transport Control
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reassembly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decoding
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Although RTP is specified to carry the media stream, there is another protocol
    that works with RTP called **Real-time Control Protocol** (**RTCP**). This protocol
    works side by side with RTP to monitor transmissions and assure **Quality of Service**
    (**QoS**). The aim of RTCP is checking whether there is packet loss during the
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Secure Real-time Transport Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure Real-time Transport Protocol (SRTP)** is an application protocol based
    on RFC3711. SRTP provides enhanced security features; thus, it secures RTP by
    encryption using an XOR operation with a keystream. The algorithm used is AES
    and the master key is called SRTP MKI. The following diagram illustrates the difference
    between a normal RTP packet and a secure RTP packet. The Auth field contains the
    message authentication code. These techniques provide anti-replay mechanisms to
    the voice traffic and ensure its integrity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: H.248 and Media Gateway Control Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Media Gateway Control Protocol** (**MGCP**) is a protocol developed by Cisco.
    The goal of MGCP is to handle signals and session management. It is a communication
    mechanism between media gateway controllers and media gateways. Thus, the control
    is centralized. In other words, the controller communicates with many media gateways.
    The controller also supervises terminals and registers the new ones in its zone.
    H.248 is also like H.323, an ITU-based protocol. It is an enhanced version of
    MGCP. As you can see in the diagram, MGCP is a master-slave protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00278.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Session Initiation Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Session Initiation Protocol** (**SIP**) is a session management protocol
    based on the RFC 3261 protocol. It works on both **UDP** and **TCP,** and it also
    supports **TLS**. It is more scalable than H323\. SIP handles calls in the following
    five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: User location
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User availability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User capability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Session set up
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Session management
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start a SIP operation, a registration is needed by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram describes the steps required to establish a connection
    between two user agent clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'SIP requests are similar to HTTP requests. They are in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`METHOD URI SIP/X.X`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HEADER: XXX`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the method is the request type, and we have the following six methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Register
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bye
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SIP reply requests require this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SIP/X.X  <status code> description`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Header: XXX`'
  prefs: []
  type: TYPE_NORMAL
- en: '**URI**: The file identification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SIP/X.X**: SIP version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Header**: This contains the information about the receiver (To, From, Call-ID
    are some of the SIP header fields)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following are the possible status codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1xx`: Informational'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2xx`: Success'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3xx`: Redirection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4xx`: Failure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5xx`: Server error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6xx`: Global failure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoIP exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, after getting a clear understanding of the major protocols that play a
    vital role in VoIP, it is time to learn how to penetrate the VoIP infrastructure.
    Like any other penetration testing, to exploit the VoIP infrastructure, we need
    to follow a strategic operation based on a number of steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before attacking any infrastructure, we''ve learned that we need to perform
    footprinting, scanning, and enumeration before exploiting it, and that is exactly
    what we are going to do with VoIP. To perform VoIP information gathering, we need
    to collect as much useful information as possible about the target. As a start,
    you can do a simple search online. For example, job announcements could be a valuable
    source of information. For example, the following job description gives the attacker
    an idea about the VoIP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Later, an attacker could search for vulnerabilities out there to try exploiting
    that particular system. Searching for phone numbers could also be a smart move,
    to have an idea of the target based on its voicemail, because each vendor has
    a default one. If the administrator has  not changed it, listening to the voicemail
    can let you know about your target. If you want to have a look at some of default
    voicemails, check [http://www.hackingvoip.com/voicemail.html](http://www.hackingvoip.com/voicemail.html).
    It is a great resource for learning a great deal about hacking VoIP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google hacking is an amazing technique for searching for information and online
    portals. We discussed Google hacking using Dorks, in the previous chapters. The
    following demonstration is the output of this Google Dork—in  URL: Network Configuration
    Cisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find connected VoIP devices using the `Shodan.io` search engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'VoIP devices are generally connected to the internet. Thus, they can be reached
    by an outsider. They can be exposed via their web interfaces; that is why, sometimes
    leaving installation files exposed could be dangerous, because using a search
    engine can lead to indexing the portal. The following screenshot is taken from
    an online Asterisk management portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00284.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'And this screenshot is taken from a configuration page of an exposed website,
    using a simple search engine query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After collecting juicy information about the target, from an attacker perspective,
    we usually should perform scanning. Using scanning techniques discussed in the
    previous chapters is necessary during this phase. Carrying out Host Discovery
    and Nmap scanning is a good way of scanning the infrastructure to search for VoIP
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning can lead us to discover VoIP services. For example, we saw the `-sV`
    option in Nmap to check services. In VoIP, if port `2000` is open, it is a Cisco
    CallManager because the SCCP protocol uses that port as default, or if there is
    a UDP `5060` port, it is SIP.
  prefs: []
  type: TYPE_NORMAL
- en: The `-O` Nmap option could be useful for identifying the running operating system,
    as there are a lot of VoIP devices that are running on a specific operating system,
    such as Cisco embedded.
  prefs: []
  type: TYPE_NORMAL
- en: You know what to do now. After footprinting and scanning, we need to enumerate
    the target. As you can see, when exploiting an infrastructure we generally follow
    the same methodological steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Banner grabbing is a well-known technique in enumeration, and the first step
    to enumerate a VoIP infrastructure is by starting a banner grabbing move. In order
    to do that, using the Netcat utility would help you grab the banner easily, or
    you can simply use the Nmap script named banner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a specific vendor, there are a lot of enumeration tools you can use; EnumIAX
    is one of them. It is a built-in enumeration tool in Kali Linux to brute force
    Inter-Asterisk Exchange protocol usernames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Automated Corporate Enumerator** (**ACE**) is another built-in enumeration
    tool in Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`svmap` is an open source built-in tool in Kali Linux for identifying SIP devices.
    Type `svmap -h` and you will get all the available options for this amazing tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: VoIP attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you have learned the required skills to perform VoIP footprinting, scanning,
    and enumeration. Let's discover the major VoIP attacks. VoIP is facing multiple
    threats from different attack vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Denial-of-Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Denial-of-Service** (**DoS**) is a threat to the availability of a network.
    This attack was discussed in the previous chapters. DoS could be dangerous too
    for VoIP, as ensuring the availability of calls is vital in modern organizations.
    Not only the availability, but also the clearness of calls is a necessity nowadays.
    To monitor the QoS of VoIP, you can use many tools that are out there; one of
    them is CiscoWorks QoS Policy Manager 4.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To measure the quality of VoIP, there are some scoring systems, such as the
    **Mean Opinion Score** (**MOS**)  or the R-value based on several parameters (jitter,
    latency, and packet loss). Scores of the mean opinion score range from 1 to 5
    (bad to very clear) and scores of R-value range from 1 to 100 (bad to very clear).
    The following screenshot is taken from an analysis of an RTP packet downloaded
    from the Wireshark website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also analyze the RTP jitter graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'VoIP infrastructure can be attacked by the classic DoS attacks. We saw some
    of them previously:'
  prefs: []
  type: TYPE_NORMAL
- en: Smurf flooding attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP SYN flood attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDP flooding attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the DoS attack tools is `iaxflood`. It is available in Kali Linux to
    perform DoS attacks. **IAX** stands for  **Inter-Asterisk Exchange**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Kali terminal and type ` iaxflood <Source IP> <Destination IP>  <Number
    of packets>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The VoIP infrastructure can not only be attacked by the previous attacks attackers
    can perform packet Fragmentation and Malformed Packets to attack the infrastructure,
    using fuzzing tools.
  prefs: []
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Eavesdropping** is one of the most serious VoIP attacks. It lets attackers
    take over your privacy, including your calls. There are many eavesdropping techniques;
    for example, an attacker can sniff the network for TFTP configuration files while
    they contain a password. The following screenshot describes an analysis of a **TFTP**
    capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, an attacker can harvest phone numbers and build a valid phone numbers
    databases, after recording all the outgoing and ongoing calls. Eavesdropping does
    not stop there, attackers can record your calls and even know what you are typing
    using the **Dual-Tone Multi-Frequency** (**DTMF**). You can use the DTMF decoder/encoder
    from this link [http://www.polar-electric.com/DTMF/](http://www.polar-electric.com/DTMF/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Voice Over Misconfigured Internet Telephones** (**VOMIT**) is a great utility
    to convert Cisco IP Phone conversations into WAV files. You can download it from
    its official website [http://vomit.xtdnet.nl/](http://vomit.xtdnet.nl/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SIP attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another attacking technique is SIP rogues. We can perform two types of SIP
    rogues. From an attacker''s perspective, we can implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rogue SIP B2BUA**: In  this attacking technique, the attacker mimics SIP
    B2BUA:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**SIP rogue as a proxy**: Here, the attacker mimics a SIP proxy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SIP registration hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SIP registration hijacking** is a serious VoIP security problem. Previously,
    we saw that before establishing a SIP session, there is a registration step. Registration
    can be hijacked by attackers. During a SIP registration hijacking attack, the
    attacker disables a normal user by a Denial of Service, for example, and simply
    sends a registration request with his own IP address instead of that users because,
    in SIP, messages are transferred clearly, so SIP does not ensure the integrity
    of signaling messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you are a Metasploit enthusiast, you can try many other SIP modules. Open
    a Metasploit console by typing `msfconsole` and search SIP modules using `search
    SIP:`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use a specific SIP module, simply type `use <module >`. The following interface
    is an example of SIP module usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Spam over Internet Telephony
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Spam over Internet Telephony** (**SPIT**), sometimes called **Voice spam**,
    is like email spam, but it effects VoIP. To perform a SPIT attack, you can use
    a generation tool called **spitter**.'
  prefs: []
  type: TYPE_NORMAL
- en: Embedding malware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Malware** is a major threat to VoIP infrastructure. Your insecure VoIP endpoints
    can be exploited by different types of malware, such as Worms and VoIP Botnets.'
  prefs: []
  type: TYPE_NORMAL
- en: Softphones are also a highly probable target for attackers. Compromising your
    softphone could be very dangerous, because if an attacker exploits it, they can
    compromise your VoIP network. Malware is not the only threat against VoIP endpoints.
    VoIP firmware is a potential attack vector for hackers. Firmware hacking can lead
    to phones being compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Viproy – VoIP penetration testing kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Viproy VoIP penetration testing kit (v4) ** is a VoIP and unified communications
    services pentesting tool presented at Black Hat Arsenal USA 2014 by Fatih Ozavci:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To download this project, clone it from its official repository, [https://github.com/fozavci/viproy-voipkit:](https://github.com/fozavci/viproy-voipkit)
  prefs: []
  type: TYPE_NORMAL
- en: '`# git clone https://github.com/fozavci/viproy-voipkit.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following project contains many modules to test SIP and Skinny protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00303.gif)'
  prefs: []
  type: TYPE_IMG
- en: To use them, copy the `lib`, `modules`, and `data` folders to a `Metasploit`
    folder in your system.
  prefs: []
  type: TYPE_NORMAL
- en: VoLTE Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Voice over LTE** (**VoLTE**) carries voice over 4G networks. Its call quality
    is higher than the other VoIP variants, in addition to providing better coverage. 
    VoLTE, as well as the other voice technologies, faces various threats from attackers.
    Let''s begin discovering VoLTE fundamentals, in order to learn later how to attack
    it. **L****ong-term Evolution** (**LTE**) was developed by the **3rd Generation
    Partnership Project** (**3GPP**) in 2014\. It is an IP-based packet switch network.
    It uses the two modes—**Time Division Duplex** (**TDD**) and **Frequency Division
    Duplex** (**FDD**). LTE architecture is composed of the following three major
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The User Equipment** (**UE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Evolved UMTS Terrestrial Radio Access Network** (**E-UTRAN**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Evolved Packet Core** (**EPC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: VoLTE  attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VoLTE has been adopted by a few telecommunication companies, such as AT&T and
    T-Mobile. It is the center of a lot of research to try and exploit the communication
    protocols involved in VoLTE. One of the research papers by Sreepriya Chalakkal
    presents several attacks against VoLTE. Here are some of the attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing VoLTE interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposed keys in GSM SIM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User location manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roaming information manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Side channel attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SiGploit – Telecom Signaling Exploitation Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SiGploit is a security framework that helps telecom security professionals enhance
    mobile network infrastructure. To test the project, clone it from [https://github.com/SigPloiter/SigPloit:](https://github.com/SigPloiter/SigPloit)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00305.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the tool, go to the `bin` directory and run the `SiGsploit.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00306.gif)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we demonstrated how to exploit the VoIP infrastructure. We
    started by studying the core protocols involved in VoIP. Then, we explored the
    major VoIP attacks and how to defend against them, in addition to the tools and
    utilities most commonly used by penetration testers. We finished the chapter with
    an overview of some of the state-of-the-art attacks against VoLTE.
  prefs: []
  type: TYPE_NORMAL
