- en: Chapter 3. Operating System-based Vulnerability Assessment and Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploit usage quick tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing on a Windows XP SP2 machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a shell to the target for remote access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration testing on the Windows 2003 Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7/Server 2008 R2 SMB client infinite loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting a Linux (Ubuntu) machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Windows DLL injection flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on gathering information about our target.
    Various information included the target IP address, open ports, available services,
    operating system, and so on. One of the biggest assets in the process of information
    gathering is gaining knowledge about the operating system used by the target server
    or system. This information can prove to be very helpful in penetrating the target
    machine as we can quickly look for exploits and vulnerabilities of the operating
    system in use. Well, the process is not as straightforward as it sounds, but knowledge
    about the target operating system can ease our task to much extent.
  prefs: []
  type: TYPE_NORMAL
- en: Every flavor of operating system has some or other bug in it. Once it gets reported,
    the process of developing exploits for it starts. Licensed operating systems such
    as Windows quickly develop patches for the bug or vulnerability and provide it
    as an update to its users. Vulnerability disclosure is a big issue these days.
    Many zero day disclosures create havoc in the computer industry. Zero day vulnerabilities
    are highly sought after and in underground markets, the price may range from 50
    K USD to 100 K USD. Vulnerabilities are detected and exploited but the disclosure
    of vulnerability depends on the researcher and their intention.
  prefs: []
  type: TYPE_NORMAL
- en: Well known products such as Microsoft and Adobe issue patches at regular intervals
    but it's up to the user to apply them. In Corporate scenarios, this gets even
    worse—it takes weeks before servers are being patched because of the downtime
    involved and to ensure business continuity is not hampered. So, it is always recommended
    to update or keep an eye on any latest vulnerability discovered in your operating
    system in use. Unpatched systems are a safe haven for hackers, as they immediately
    launch exploits to compromise the target. Hence, regular patching and updating
    the operating systems is essential. In this chapter, we will focus on vulnerabilities
    that are reported in some of the most popular operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the process of penetration testing, once the information about the target
    operating system is available, the pen-testers start looking for available exploits
    for the particular operating system flaws. So, this chapter will be the first
    step towards penetrating our target through vulnerabilities in the operating system.
    We will focus on some of the most widely used home- and enterprise-based operating
    systems of Microsoft and some flavors of Linux. We will also look at how to use
    exploits and set up its parameters to make it executable on the target machine.
    Last, but not least, we will discuss some of the useful payloads available to
    us in the Metasploit framework. So let us start with the recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit usage quick tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to use exploits and payload on target machines, we will first
    have to know some basics about them. It is very essential to understand the usage
    of exploits so that you can overcome some common errors that may arise due to
    misconfiguration of parameters. So, let us begin with some basics of using exploits
    and how to set parameter values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to start using exploits on your target, the first thing required is
    to scan the target for open ports and services. Once you have gathered enough
    information about the target, the next step is to select exploits accordingly.
    So let us analyze some of the exploit commands that can be launched directly from
    msfconsole.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a list of commands that will be helpful during exploit usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msf > show exploits` and `msf > show payloads:` These two commands will display
    all the available exploits and payloads in the Metasploit directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msf > search exploit:` This command will search for a particular exploit.
    We can also use this command to search for any specific search terms. The command
    should be passed in the following manner:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msf > search exploit-name or search-term`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`msf > use exploit:` This command is used to set any exploit as active and
    ready to use. The command is passed in the following manner:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: msf > use exploit name
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing this command, the prompt also changes to the exploit type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`show options:` This command is used to see the available options or parameters
    of the exploit in use. The various parameters include the host IP, port, threads,
    and so on. The parameters marked `yes` must have a value in order to execute the
    exploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`set:` This command is used to set a value to a parameter in the exploit under
    use. It is used to set up a payload for a particular exploit in use. The command
    can be passed in the following manner:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msf > set parameter-name parameter-value`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can use the `unset` command as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are optional commands named `setg` and `unsetg`. These commands are used
    when we have to globally set a parameter value in `msfconsole`. It, thus, saves
    us from re-entering the same value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show targets:` Every exploit is made to attack a particular target service.
    This command displays the information on what possible targets can the exploit
    be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here we can see that the `dcom` exploit is available for several flavors of
    the Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Metasploit Quick Tips for Security Professionals"),
    *Metasploit Quick Tips for Security Professionals*, we have discussed that the
    entire Metasploit framework has a modular architecture. Different exploits are
    converted into a framework-understandable module which can function in accordance
    with it. Different commands are called to load and set up the modules. The command-line
    interface of `msfconsole` makes it easy to access different modules and perform
    penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing on a Windows XP SP2 machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now get our hands into the world of exploits. To start with, we will
    work on the most primary, yet most widely used, operating system, Windows XP.
    In this recipe, we will see how we can use Metasploit to break into our target
    system which is running on the Windows XP machine. We will be using the commands
    we learnt in the previous recipe and then move ahead to select exploits and payloads,
    and set up various required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start our penetration testing process right from `msfconsole`. So, launch
    the console and perform a port scan to gather information about the target. We
    have discussed port scanning in detail in the previous chapter. Here, I will assume
    that you have gathered information about the target and it is running a Windows
    XP operating system. So let us proceed with selecting exploits and payloads.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform penetration testing on a Windows XP SP2 machine, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary goal will be to select an exploit that can be used on a Windows
    XP machine. You can browse to the `/exploits/windows` directory or simply make
    a search for a list of available exploits for the Windows XP platform. We will
    be using RPC `dcom` vulnerability to penetrate our target. So let us first search
    for the RPC `dcom` vulnerability, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the search has produced three results. We will be working on
    the first exploit as its `rank` is listed as `great` so it will have a better
    success rate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set `exploit/windows/dcerpc/ms03_026_dcom` as the usable exploit,
    we will execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The change in the prompt symbolizes that the command is executed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will be to set up the various parameters of the exploit. The
    `show options` command will list the available parameters in the exploit. Then,
    by using the `set` command, we can set up the various parameters. Some parameters
    will have default values as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `RHOST` denotes the IP address of the remote host and `RPORT` denotes
    the default bind port. The value or `RPORT` has been set to `135` by default.
    We will have to set the value of `RHOST` to our target IP address in order to
    execute the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `ms03_026_dcom` exploit has the ID set to `0`. This means that
    we do not need to specify which Windows machine is running on the target. It can
    exploit any of the Windows machines listed in it. For any other exploit, we may
    have to select the target operating system by using the `show targets` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now the value of `RHOST` has been set to our target IP address. If we try to
    run the exploit then we will get an error message. The reason is we have not yet
    selected any payload for the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step will be to choose a relevant payload. We can use the command
    `show payloads` to list all the available payloads. We will start with a simple
    example of the `windows/adduser` payload. This payload will add a new user in
    the target''s operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we again use the `show options` command then it will list the parameters
    for both the exploit, as well as the payload. The payload parameters will look
    something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We can see the default username and password that will be added to our target
    operating system is `metasploit` and `metasploit`. We can change these values
    by using the `set PASS` and `set USER` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our payload is set, we are ready to penetrate the target machine.
    We will use the following command to launch the exploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The last line of the output shows that the exploit was completed successfully
    on the target machine. Now there will be a new user added in the target machine.
    The output also says that no session was created. This is because the payload
    we used was a simple `adduser` that doesn't need any active session. Hence, once
    the exploit completes, the connection with the target is ended. In the next recipe,
    we will use the payload to set up a session.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is vulnerability in the part of RPC that deals with the message exchange
    over TCP/IP. The failure results because of incorrect handling of malformed messages.
    This particular vulnerability affects a **Distributed Component Object Model (DCOM)**
    interface with RPC, which listens on RPC enabled ports. So, the target machine
    must have an available port running an RPC service.
  prefs: []
  type: TYPE_NORMAL
- en: This interface handles the DCOM object activation requests that are sent by
    client machines to the server. An attacker who successfully exploited this vulnerability
    would be able to run the code with local system privileges on an affected system.
    The attacker would be able to take any action on the system. This includes installing
    programs, viewing/changing/deleting data, or creating new accounts with full privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on this vulnerability, you can visit the following link to
    Microsoft Security Bulletin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://technet.microsoft.com/en-us/security/bulletin/ms03-026](http://technet.microsoft.com/en-us/security/bulletin/ms03-026)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in order to understand the working of the `adduser` payload, we will analyze
    the ruby code for the payload. Let us browse to the payload location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following part of the code that is of interest for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can understand the code through the comments added with the `#` symbol.
    The code is simple and self-explanatory. It first registers values for the username
    and password. Then it goes on to hide the `CMD` function from appearing on the
    target screen while the payload gets executed. Then, the code overrides the `windows/exec`
    payload to pass the parameter values and launch a stealth command prompt to execute
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: You can play with the code and make your own changes. This will help you dig
    deeper into the world of payloads.
  prefs: []
  type: TYPE_NORMAL
- en: Binding a shell to the target for remote access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we analyzed how to exploit a Windows SP2 machine and
    add a new user account. But the connection was terminated immediately after the
    execution of exploit. In this recipe, we will move a step ahead and bind a shell
    to the target so that we can set up a remote connectivity with the target and
    gain control over it. The process is similar to the one mentioned in the previous
    recipe. All we have to do is use a different payload that can start a shell for
    us on the target machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will again start off by launching our `msfconsole` and our target is the
    same as in the *Penetration testing on a Windows XP SP2 machine* recipe. We will
    use the same `dcom` vulnerability and then use a different payload this time to
    bind a shell to the target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To bind a shell to the target, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by selecting the `dcom` exploit against our target machine. We
    will set up the various exploit parameters and then select the payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our exploit is set up, we will now move to payload. Using the `show
    payloads` command will list all the available payloads. Now, we will use the `windows/shell/bind_tcp`
    payload that will open a TCP connection on port `4444` (by default) on the target
    machine and provide us a command shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now: using the `show options` command, we can set up other relevant parameters
    such as `RHOST` and change the default port. After setting up the parameters,
    we will execute the exploit. Let us see what the output of the execution is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The exploit has been executed successfully and we have a command prompt started
    in our `msfconsole`. Now this session can be used to gain complete remote access
    of the target machine. We can exit from this session anytime by using the `exit`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: You might have realized by now the power of payloads in Metasploit. It is highly
    encouraged that one should try various available payloads in order to understand
    their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The working of `dcom` exploit is the same as explained in the previous recipe.
    To understand the working of `bind_tcp`, we will have to wait a bit as it involves
    some concepts that we will deal with in a later chapter of this book. Still, you
    can have a look at the payload ruby code by browsing to `/pentest/exploits/framework3/modules/payloads/stagers/windows/bind_tcp.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What next? How can a shell access provide us control over the target.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining complete control of the target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have a shell connectivity set up with our target machine, we can
    have full access to the target machine by using the command prompt. We can now
    move ahead to explore the target machine by using the common DOS commands available
    to us. Some of the basic operations include directory listing, copying files and
    folders, creating user agents, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing on the Windows 2003 Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we analyzed how to use the `dcom` exploit to cause a
    buffer overflow and exploit our Windows target. In this recipe, we will focus
    on a similar but logically different environment. The Windows 2003 Server is one
    of the most widely used enterprise-based operating systems of Microsoft. In this
    recipe, we will see how we can exploit a Windows 2003 Server. The updated versions
    of the Windows 2003 Server are patched so the `dcom` vulnerability doesn't work
    in it. So we will try different vulnerability in this recipe. We will be using
    the `netapi32.dll` vulnerability. First, we will analyze the exploitation process
    and then analyze the cause of this vulnerability. So let us start our penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, let us launch `msfconsole` and perform a quick scan of the target.
    It is always recommended that you should follow all the steps in a sequential
    order to make sure it strengthens the basics. The next step will be the same as
    we discussed in the previous two recipes. The only difference will be in using
    the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform penetration testing on the Windows 2003 Server, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us start with searching for `netapi`. This will list any available exploit
    related to `netapi` in the Metasploit directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, out of the four results, the last exploit has a great rating.
    So we will prefer using this exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set up `RHOST` as our target Windows 2003 Server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Again, the `Id` value `0` suggests that we do not need to specify the target
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have completed the exploit loading the process, the next step will be
    to set up the payload. We will again set up a `tcp_bind` shell on the target machine,
    as we discussed earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, our exploit and payload are ready. The next and the final step is to
    use the `exploit` command. Let us analyze the result of the execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Bingo! We have a shell connection with our target. This gives us access to the
    target machine through the command line. You can see how powerful Metasploit can
    be for penetrating target machines. It really simplifies our task to a greater
    extent. Let us take a quick look at the exploit we used in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This module exploits a parsing flaw in the path canonicalization code of `netapi32.dll`
    through the Server Service. This module is capable of bypassing NX on some operating
    systems and service packs. The correct target must be used to prevent the Server
    Service (along with a dozen others in the same process) from crashing.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 7/Server 2008 R2 SMB client infinite loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are very few exploits available for Windows 7 and Windows Server 2008\.
    The SMB client infinite loop is one such vulnerability that causes a system crash.
    This vulnerability will not provide any session or shell connectivity, but it
    is worth discussing. We will deal with the DLL injection flaw in Windows 7 in
    the *Understanding the Windows DLL injection flaws* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The SMB client in the kernel in Microsoft Windows Server 2008 R2 and Windows
    7 allows remote SMB servers and man-in-the-middle attackers to cause a denial
    of service (infinite loop and system hang) via SMBv1 or SMBv2 response packet.
    The packet contains an incorrect length value in a NetBIOS header or an additional
    length field at the end of this response packet. This incorrect header value is
    the main reason for the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit contains an auxiliary module `auxiliary/dos/windows/smb/ms10_006_negotiate_response_loop`
    which can be used to exploit the SMB server and cause a denial of service. The
    attack vector works by passing a UNC path into a web page and asking the user
    to execute it. Once the user opens the shared file, the system crashes completely
    and the target will be forced to restart.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin using this auxiliary module, we will have to execute the `use` command
    along with the path to the module. Then, we will move ahead to set up the required
    parameters and execute the module. Let us proceed to practically implement these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let us quickly set up the various parameters. The only parameter to look for
    is `SRVHOST` that is the localhost IP address or the penetration testers IP address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `run` command to execute the auxiliary module. Once the module
    executes, it generates a shared folder link which has to be sent to the target.
    In this case, the link generated is `\\192.168.56.101\Shared\Anything`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now we can make the link look less suspicious by crafting a web page and attaching
    this link to it and then sending it to the target user. Once the target clicks
    on this link, the system will completely freeze and will lead to a complete denial
    of service, thus leading to restart the system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting a Linux (Ubuntu) machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is also one of the widely used operating systems after Windows. In the
    previous few recipes, we saw how we can penetrate a Windows machine by exploiting
    critical flaws in available services. In this recipe, we will deal with the Linux
    operating systems. We will be using Ubuntu 9.0 in this recipe, but the process
    will be similar for exploiting any flavor of Linux and Solaris running the Samba
    service. Let us move ahead with the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by scanning our target Linux machine to gather information about
    the available services. Let us perform a quick Nmap scan and analyze its result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: So now we have gathered information about the target. Our next step will be
    to select an exploit and a suitable payload for it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process of penetrating a Linux machine is similar to that of Windows. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'All we have to focus on is selecting the right exploit and payload. Let us
    search for any Samba exploit available in the Metasploit directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The command will provide a list of various auxiliaries and exploit modules for
    Samba. We will use the `exploit/linux/samba/lsa_transnames_heap` module that is
    listed as a good rank exploit. So it will have higher probability of exploiting
    the target. Let us set the exploit as active and set up the parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now our next task is to select a payload. We will have to keep one thing in
    mind that as we are targeting a Linux machine, we will have to select a Linux
    payload for our penetration process. We will be using the `linux/x86/shell_bind_tcp`
    payload that works similar to the `bind_tcp` payload we analyzed in the previous
    recipes for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We are all set now and our final step will be to provide the exploit command
    to begin the process of exploitation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: On successful execution of the exploit, we will be provided with shell connectivity
    with our target machine. The process is very much similar to the ones we discussed
    in previous recipes. The only difference lies in selecting exploits and payloads.
    The more different combinations of exploits and payloads you try the better will
    be your understanding about it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us go through a quick note about the service, its exploit, and working.
    Samba is used for printers and file sharing between Linux and Windows machines.
    This module triggers a heap overflow in the LSA RPC service of the Samba daemon.
    This module uses the talloc chunk overwrite method (credit Ramon and Adriano),
    which only works with Samba versions 3.0.21-3.0.24\. The exploit takes advantage
    of dynamic memory allocation in heaps. There are chances that the exploit may
    not succeed on the first attempt, so you can try multiple times to achieve success.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us cover some more relevant modules related to the Linux operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Other relevant exploit modules for Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from the exploit module discussed in this recipe, there are two more
    modules which deserve some attention. It is highly recommended that you should
    try these exploits manually to understand them deeply. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Samba chain_reply Memory Corruption:** This exploit works by corrupting the
    memory allocated to the response packets in Samba versions prior to 3.3.13\. The
    memory crashes by passing a value larger than the destination buffer size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Samba trans2open Overflow:** This is a buffer overflow vulnerability existing
    in Samba versions 2.2.0 to 2.2.8\. It works by exploiting the flaw on x86 Linux
    machines that do not have the `noexec` stack option set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Windows DLL injection flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will deal with a special kind of vulnerability that does
    not directly exist in the Windows operating system. In fact, it exists in various
    application software that run on Windows. This remote attack vector deals with
    a class of vulnerabilities that affects how applications load external libraries.
    We will give an oversight of this issue to analyze it closely.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack vector involves creation of a vulnerable path or directory that
    the target will have to execute in order to trigger it. The directory can be a
    file, extracted archive, USB drive, network share, and so on. The file created
    will be completely harmless, but it will execute a DLL injection code to compromise
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us analyze a practical implementation of a DLL injection. In this example,
    our target machine is an unpatched Windows 7 Ultimate machine. The process works
    by creating a link to share the file which the target will have to access and
    execute. You will understand the process as we move ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the `exploit/windows/browser/webdav_dll_hijacker` module as
    an exploit and `windows/meterpreter/bind_tcp` as the payload. Let us quickly set
    up the exploit and payload along with other required parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The various parameters of the exploit will help in creating a particular file
    and top-level share. The `BASENAME` parameter contains the name of the file to
    be created. `EXTENSIONS` is the file type to be created. `SHARENAME` is the top-level
    shared directory that will be created for access. `SRVHOST` is the local listening
    port and `SRVPORT` is the port number on which the the `SRVHOST` will listen for
    a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set up the respective parameters of exploit and payload, the
    next step is to execute the exploit. Let us see what happens when we execute it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Once the exploit executes successfully, it starts listening for a connection
    and also provides a shared link that the target will have to open in order to
    trigger the exploit. Let us switch to the target screen to see what happens:![How
    to do it...](img/7423_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The target will view a simple file, `policy.txt`, which has been shared by
    the attacker. The file is completely harmless. Once the user executes this file,
    a connection is established with the attacker''s machine and shell connectivity
    is established. Once the file is executed on the target, the DLL will execute
    and you will see a lot of activity on your `msfconsole` screen. Once the DLL injection
    succeeds, we will have shell connectivity (see the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7423_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us dig out the reason for this vulnerability. **Dynamic Link Library(DLL)**
    is Microsoft's implementation of shared library concept for Windows. DLLs are
    the executables that are associated with a program during the runtime to load
    the shared libraries linked with it. When an application runs, a `loadlibrary()`
    function loads the required DLL at runtime. If the location of the DLL to be loaded
    is not specified or an insufficiently qualified library path is provided by the
    application, Windows uses its own set of defined order to search for it. One of
    the locations in this default order is the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now when the target user visits the shared location, it reaches an attacker-controlled
    zone. How? The shared file (`policy.txt`) contains a less qualified path of the
    DLL, so when the target user executes it, Windows starts its own search for the
    missing DLL. Now, as the current working directory (`/documents`) is controlled
    by the attacker, he/she can add a malicious DLL code in it that Windows will execute
    (as the current working directory is one of the default locations where Windows
    looks for the libraries). Now this malicious DLL can give the power of executing
    external scripts to the attacker. Hence, the payload now comes into action and
    it sets up a shell connectivity giving full access to the target system to the
    attacker. This is how this whole attack vector is crafted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can look for a DLL injection using a simple tool developed by H. D. Moore.
    Let us have a quick overview of it.
  prefs: []
  type: TYPE_NORMAL
- en: The DllHijackAudit kit by H. D. Moore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The creator of Metasploit, H. D. Moore created this security audit tool which
    can be used to perform a test for DLL injection flaws in your own environment.
    It leverages the process monitoring utility and Ruby interpreter. It works by
    monitoring whether or not a DLL was accessed within the working directory of the
    associated file. It also generates test reports. The tool and detailed documentation
    can be found at [http://blog.metasploit.com/2010/08/better-faster-stronger.html](http://blog.metasploit.com/2010/08/better-faster-stronger.html).
  prefs: []
  type: TYPE_NORMAL
