- en: Android Preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we were dealing with complex data that was stored in
    the SQLite database. This time, we will deal with a much simpler form of data.
    We will cover one particular case of use to demonstrate the use of Android shared
    preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we want to remember the last page position of our `ViewPager`
    class and to open it every time an application is started. We will use shared
    preferences to remember it and persist that information on each view page position
    change and retrieve it when it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this rather short chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Android's preferences and how can you use them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining your own preferences manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are Android preferences?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preferences for our application that are persisted and retrieved by Android's
    shared preferences mechanism are called **shared preferences**. Shared preferences
    themselves represent XML data that is accessed and modified by Android and its
    API. Android handles all theÂ work for us regarding retrieving and saving preferences.
    It also provides the mechanism for these preferences to be private, hidden from
    the public access. Android SDK has a great set of classes for preferences management.
    Also, there are abstractions available so you are not limited to default XMLs,
    but you can create your own persistence layer.
  prefs: []
  type: TYPE_NORMAL
- en: How can you use them?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use shared preferences, you have to obtain the `SharedPreferences` instance
    from the current context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `key` represents a `String` that will name this shared preferences instance.
    The XML file in the system will have that name as well. These are modes (operation
    modes) that can be available from `Context class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MODE_PRIVATE`: This is a default mode, and the created file can only be accessed
    by our calling application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MODE_WORLD_READABLE`: This is deprecated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MODE_WORLD_WRITEABLE`: This is deprecated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we can store values or retrieve them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There is a similar `getter` method for all common data types.
  prefs: []
  type: TYPE_NORMAL
- en: Editing (storing) preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start this section by providing an example of preferences editing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `commit()` method executes the operation immediately, while the `apply()`
    method executes it in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Never obtain or manipulate your shared preferences from an application's main
    thread if you use the `commit()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that all writing and reading is performed in the background. You can
    use `AsyncTask` for that purpose or, instead of `commit()`, use `apply()`.
  prefs: []
  type: TYPE_NORMAL
- en: Removing preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remove preferences, there is a `remove` method available, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Do not remove your preferences by overwriting them with empty data. For example,
    overwriting integers with null or strings with empty string.
  prefs: []
  type: TYPE_NORMAL
- en: Defining your own preferences manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To achieve the mission from the beginning of this chapter, we will create a
    proper mechanism to obtaining shared preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new package called `preferences`. We will put all `preferences` related
    code in that package. For shared preferences management, we will need the following
    three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PreferencesProviderAbstract`: This is basic abstraction to provide access
    to SharedPreferences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreferencesProvider`: This is a `PreferencesProviderAbstract` implementation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreferencesConfiguration`: This class is responsible for describing preferences
    we try to instantiate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefit of using this approach is a unified approach to shared preferences access
    in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define each class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PreferencesProviderAbstract` class code is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `PreferencesConfiguration` class code is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `PreferencesProvider` class code is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we created a simple mechanism to obtain shared preferences.
    We will incorporate it. Open the `MainActivity` class and extend it according
    to this piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We created the `preferences` instance that is used to persist and read the
    view pager position. Build and run your application; swipe to one of the pages
    and then kill your application and run it again. If you take a look at Logcat,
    you will see something like this (filter it by `Page`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We opened the application again after closing, and swiped back to the page with
    index `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the Android shared preferences mechanism
    for persisting application preferences. As you can see, it is very easy to create
    application preferences and use them in your application. In the next chapter,
    we will focus on concurrency in Android. We will learn about the mechanisms Android
    offers and give examples of how to use them.
  prefs: []
  type: TYPE_NORMAL
