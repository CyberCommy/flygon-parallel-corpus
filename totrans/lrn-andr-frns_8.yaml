- en: Chapter 8. Android Forensic Tools Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is an overview of the free and open source Android forensic tools
    and will show you how to use these tools for common investigative scenarios. By
    the end of this chapter, the reader should be familiar with the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: ViaExtract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autopsy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViaLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ViaExtract
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ViaExtract is a logical and physical extraction tool created by NowSecure (formerly
    known as ViaForensics). Logical acquisitions (including backups) are available
    with the free version, while the paid version adds physical extractions. It is
    freely distributed inside of a virtual machine file (either VMWare or Virtual
    Box formats) running NowSecure's Santoku Linux distribution. An active Internet
    connection is required while using the free version. The download and full feature
    list can be found at [https://www.nowsecure.com/forensics/community/](https://www.nowsecure.com/forensics/community/).
    Registration is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The icons to register the tool and launch ViaExtract can be found on the desktop
    of the ViaExtract virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ViaExtract](img/image00415.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Before launching ViaExtract, ensure that the device to be examined is connected
    to the computer via a USB. This will ensure that the device is detected. The device
    will also need to be powered on. Note the appropriate network-isolation measures
    as discussed in [Chapter 1](part0014.xhtml "Chapter 1. Introducing Android Forensics"),
    *Introducing Android Forensics*. In the following example, we will examine an
    LG Nexus 5 running Android Lollipop 5.1\. Note that this is shown in the bottom-left
    corner of the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **New** button in the upper-left corner will bring up the **Create
    a new project** dialog box:![ViaExtract](img/image00416.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing **Forward** will bring up the **Device Info** tab, which is where we
    will begin our extractions. The list of supported extractions is shown in the
    following screenshot. In this case, our two options are **Android Backup** or
    **Android Logical**:![ViaExtract](img/image00417.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backup extraction with ViaExtract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform backup extraction, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Extract** (as seen in the preceding screenshot) will show the
    **Select extraction type** dialog box. We choose to do a backup extraction first
    from the **Type** drop-down menu:![Backup extraction with ViaExtract](img/image00418.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all of the fields are filled in, the **OK** button will become available.
    Selecting **OK** will display instructions to accept the process on the device.
    However, this step will not be available on the device yet:![Backup extraction
    with ViaExtract](img/image00419.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After choosing **Forward** on the **Android Backup: Allow backup** screen,
    ViaExtract will give you the option to attempt the recovery of deleted SQLite
    data. Though this is only a logical extraction, it is possible, as discussed in
    detail previously in this book, because of the way SQLite databases store their
    data.![Backup extraction with ViaExtract](img/image00420.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choosing **Forward on the Android Backup: SQLite recovery** screen will begin
    the backup. At this point, the backup will have to be accepted on the device,
    as shown in the preceding **Android:Backup Allow backup** screenshot:![Backup
    extraction with ViaExtract](img/image00421.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After clicking on **Close**, the backup should now be seen progressing in the
    **Tasks** tab in the upper-left corner as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Backup extraction with ViaExtract](img/image00422.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Logical extraction with ViaExtract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin a logical extraction, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Extract** from the **Device Info** tab, just as with the backup extraction
    we completed earlier. This time, however, choose **Android Logical** from the
    **Type** drop-down menu. This will launch the logical extraction wizard, which
    begins by noting that it will require us to install an application on the device:![Logical
    extraction with ViaExtract](img/image00423.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choosing **Forward** will advance to the **Logical extraction: Options** menu.
    Here, certain file types can be ignored to speed up the extraction process:![Logical
    extraction with ViaExtract](img/image00424.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the ViaExtract application will be pushed to the device and further
    action may be required on the device. We will choose **DECLINE** on the following
    pop-up message:![Logical extraction with ViaExtract](img/image00425.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After declining the popup, the application can be seen running on the device:![Logical
    extraction with ViaExtract](img/image00426.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back on the computer, the following message will be displayed:![Logical extraction
    with ViaExtract](img/image00427.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once again, the progress will be visible in the **Tasks** tab in the upper-left
    corner, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Logical extraction with ViaExtract](img/image00428.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Examining data in ViaExtract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once an extraction is complete, the data can be viewed in the **Project** tab
    in the upper-left corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining data in ViaExtract](img/image00429.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the content, simply click on it, and it will be displayed on the right-hand
    side. Here is an example of bookmarks found in a logical extraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining data in ViaExtract](img/image00430.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When examining a backup, the process is the same. Here is an excerpt of the
    `Tango tc.db` file analyzed in [Chapter 7](part0053.xhtml "Chapter 7. Forensic
    Analysis of Android Applications"), *Forensic Analysis of Android Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining data in ViaExtract](img/image00431.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Other tools within ViaExtract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ViaExtract can also attempt to root a device and bypass the passcode. Clicking
    on the **Root** button from the **Device Info** tab will launch the rooting wizard.
    Simply follow the pop-up messages to root the device. We did not have any success
    with this on our test devices, Nexus 5, Moto X (2013 model), and an HTC Droid
    DNA.
  prefs: []
  type: TYPE_NORMAL
- en: The lock screen bypass wizard is launched from the Tools menu in the upper-right
    corner. Then, select **Unlock Screen**. This will push an app to the device (which
    requires USB debugging to be enabled and the RSA authentication to be passed)
    that will remove the lock screen. This is a useful tool because unlike the manual
    methods shown in [Chapter 4](part0031.xhtml "Chapter 4. Extracting Data Logically
    from Android Devices"), *Extracting Data Logically from Android Devices*, it does
    not require root access. It was unsuccessful on our Nexus 5 and HTC Droid DNA,
    but worked perfectly on our Moto X.
  prefs: []
  type: TYPE_NORMAL
- en: Autopsy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autopsy is a free and open source analysis tool initially developed by Brian
    Carrier. Autopsy started as a Graphical User Interface for the underlying Linux-based
    SleuthKit toolset, but the latest release (version 3) is a standalone tool built
    for Windows. Autopsy can be downloaded at [http://www.sleuthkit.org/autopsy/](http://www.sleuthkit.org/autopsy/).
  prefs: []
  type: TYPE_NORMAL
- en: Autopsy is not intended to perform acquisitions of mobile devices, but can analyze
    the most common Android filesystems (such as YAFFS and ext). For this example,
    we will load a full physical image obtained via dd from an HTC Droid DNA, as outlined
    in [Chapter 5](part0040.xhtml "Chapter 5. Extracting Data Physically from Android
    Devices"), *Extracting Data Physically from Android Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a case in Autopsy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On opening Autopsy, the user will be prompted to choose **Create New Case**,
    **Open Recent Case**, or **Open Existing Case**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a case in Autopsy](img/image00432.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will create a new case. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: After filling in the **Case Name** field, the **Next** button will become available:![Creating
    a case in Autopsy](img/image00433.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, an optional **Case Number** and **Examiner** can be entered:![Creating
    a case in Autopsy](img/image00434.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting **Finish** will bring up the **Enter Data Source Information** screen.
    Clicking on **Browse** will allow the user to select an image file to load:![Creating
    a case in Autopsy](img/image00435.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After choosing an image file, the **Next** button can be clicked to advance
    to the **Configure Ingest Modules wizard**:![Creating a case in Autopsy](img/image00436.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ingest Modules are tools built into Autopsy that can be run when the case is
    started or at any point afterwards. The default modules in this version of Autopsy
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recent Activity**: This extracts recent user activity such as Web browsing,
    recently used documents, and installed programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hash Lookup**: This identifies known and notable files using supplied hash
    databases, such as a standard NSRL database. It also allows importing custom hash
    databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Type Identification**: This matches file types based on binary signatures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Archive Extractor**: This extracts archive files (`.zip`, `.rar`, `.arj`,
    `.7z`, `.gzip`, `.bzip2`, `.tar`). It automatically extracts these file types
    and puts their contents into the directory tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EXIF Parser**: This ingests JPEG files and retrieves their EXIF metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyword Search**: This performs file indexing and periodic search using keywords
    and regular expressions in lists. It allows loading of custom keywords/lists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email Parser**: This module detects and parses mbox and pst/ost files and
    populates e-mail artifacts in the blackboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extension Mismatch Detector**: These are flag files that have a non-standard
    extension based on their file types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E01 Verifier**: This validates the integrity of E01 files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Analyzer**: This extracts Android system and third-party app data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interesting Files Identifier**: This identifies interesting items, as defined
    by interesting item rule sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these modules will not be needed for Android devices (E01 Verifier and
    Email Parser, for example). Only selecting useful modules will speed up the ingest
    time. Also, note that clicking on a module may bring up more options, as seen
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Next** will load the Data Source and begin the Ingest process.
    Any errors encountered will be noted:![Creating a case in Autopsy](img/image00437.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing **Finish** will bring the examiner to the main screen for analysis
    of the ingested case:![Creating a case in Autopsy](img/image00438.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing data in Autopsy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though the case is still being loaded and Ingest Modules are being run
    (as seen by the progress bar in the bottom-right corner of the previous screenshot),
    an examiner can begin analyzing the case. Expanding the image file in the upper-left
    corner will show partitions/volumes identified by Autopsy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00439.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Autopsy identified `65` partitions on our device, the vast majority of which
    are unallocated. To find the data partition (since we know this is where the vast
    majority of the data we are interested in is stored), we can simply expand the
    allocated partitions until we find one that looks like the data partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00440.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In our image, volume 124 is the data partition. We can see that it has an app
    directory (where APK files are stored), a data directory (where app data is stored),
    and a media directory (the symbolically linked location for the SD card).
  prefs: []
  type: TYPE_NORMAL
- en: 'Expanding the data directory will reveal information we should remember from
    [Chapter 7](part0053.xhtml "Chapter 7. Forensic Analysis of Android Applications"),
    *Forensic Analysis of Android Applications*. This can also be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00441.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Right away, we can see `com.android.providers.telephony` and `userdictionary`
    as well as `com.facebook.katana`. How to analyze these applications is covered
    in [Chapter 7](part0053.xhtml "Chapter 7. Forensic Analysis of Android Applications"),
    *Forensic Analysis of Android Applications*; this is how to access the relevant
    files using Autopsy. For example, expanding `com.android.providers.telephony`
    will show the `mmssms.db` file needed to analyze SMS and MMS data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00442.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-clicking on the file will allow the user to choose **Extract File(s)**
    or **Open in External Viewer** for further analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00443.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s take a look at the rest of Autopsy''s features. Expanding the **Views**
    section on the left-hand side of the screen will show results from a few of the
    Ingest Modules used, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00444.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **File Types** view shows files identified by the `File Type Identification`
    module. **Recent Files** shows the results from the `Recent Activity` module.
    In this case, it appears that the device wasn''t used for 6 days and then was
    used on the **Final Day**. Viewing the files identified here can show the user''s
    activity in that time period. Note the red cross, indicating that some of these
    files were deleted but recovered by Autopsy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00445.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In our case, we can see that the `downloads.db` and `EmailProvider.db` databases
    were modified. Analyzing these files will show that an e-mail with an attachment
    was received, and the attachment was then downloaded to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the **Views** section identifies deleted files (which are very common
    on mobile devices as a result of wear leveling), as well as large files (which
    can be useful o quickly find images/video or identify steganography).
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Results** section will show the output from the Android Analyzer and
    Keyword Search modules, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00446.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Android Analyzer results seen under **Extracted Content** were mostly as
    expected. It is worth noting that the **Contacts (1)** section only points to
    the `contacts.db` file and does not actually parse data from it. For example,
    **Call Logs** displays data pulled from `contacts2.db`, as described in [Chapter
    7](part0053.xhtml "Chapter 7. Forensic Analysis of Android Applications"), *Forensic
    Analysis of Android Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00447.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Extension Mismatch Detected** results also show the data we found in [Chapter
    7](part0053.xhtml "Chapter 7. Forensic Analysis of Android Applications"), *Forensic
    Analysis of Android Applications*. Several apps were described as having `.cnt`
    files that were actually JPEG images, and these were appropriately identified
    by Autopsy, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data in Autopsy](img/image00448.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Double-clicking on any of the files seen above will take the user to the location
    where the file was found in the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: The **Keyword Hits** section appropriately found many e-mail addresses and phone
    numbers. However, many of these were found within application files (that is,
    contact information for the developer of the app) and other places that were not
    actually stored by the user (this is very common with both mobile and computer
    forensic tools).
  prefs: []
  type: TYPE_NORMAL
- en: There are many other more advanced features of Autopsy that aren't covered here.
    To learn more, Basis Technology offers an Autopsy Training course that can be
    found at [http://www.basistech.com/digital-forensics/autopsy/training/](http://www.basistech.com/digital-forensics/autopsy/training/).
  prefs: []
  type: TYPE_NORMAL
- en: ViaLab Community Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ViaLab Community Edition is another free tool developed and released by NowSecure.
    It is shipped as a standalone virtual machine and can be found at [https://www.nowsecure.com/apptesting/community/](https://www.nowsecure.com/apptesting/community/)
    (registration is required). The VM is actually very similar to the Santoku download,
    which we discussed at the beginning of this chapter, but includes the ViaLab Community
    Edition tool.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ViaLab requires the examiner's computer to have an Internet connection, in order
    to use the tool.
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose of ViaLab is to analyze the behavior of an APK, although many
    of the features to do so are unavailable in the free Community Edition. ViaLab
    allows you to either manually load an APK file into the Android emulator or run
    the application on a rooted device. For our example, we manually loaded the APK
    file for Kik into the Android emulator. We chose Kik because it was analyzed thoroughly
    in [Chapter 7](part0053.xhtml "Chapter 7. Forensic Analysis of Android Applications"),
    *Forensic Analysis of Android Applications*, so we had a good idea of what to
    expect and could confirm our previous finding. A good forensic use case for this
    would be researching an application to learn what data it stores. For example,
    if a prosecutor is looking for saved videos, an examiner can determine whether
    the application has that capability and where they are stored.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the emulator in ViaLab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin using ViaLab, it must first be activated. This is done through the
    ViaForensics Product Activation tool found on the desktop. After registering,
    follow these steps to set up the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **ViaLab** icon on the desktop to launch the tool:![Setting up
    the emulator in ViaLab](img/image00449.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program may prompt for the root password. In the ViaLab VM, the default
    password is `vialab1`:![Setting up the emulator in ViaLab](img/image00450.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the program launches, a system check will be run. Clicking on **Close**
    will finish the system check. The **Always run System Check on startup** box can
    also be deselected to skip this step in the future:![Setting up the emulator in
    ViaLab](img/image00451.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable the Android emulator (or to configure a real device for ViaLab), select
    the **Device Manager** icon in the bottom-left corner of the main screen and make
    the appropriate selection in the window that opens:![Setting up the emulator in
    ViaLab](img/image00452.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time the Android emulator is used, additional packages will have to
    be installed:![Setting up the emulator in ViaLab](img/image00453.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the emulator package is installed and ViaLab is restarted, the **Device
    Manager** will now show a **Start Emulator** option. Choose this to launch the
    Android emulator:![Setting up the emulator in ViaLab](img/image00454.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Android emulator will launch and appear in a separate window. The **Device
    Manager** icon in the bottom-right corner should show that ViaLab is now connected
    to the emulator:![Setting up the emulator in ViaLab](img/image00455.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing an application on the emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin the ViaLab analysis, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **New** in the upper-left corner. This will open a window to add a new
    project:![Installing an application on the emulator](img/image00456.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting **Forward** from the **Add a project** dialog will bring you to the
    setup page:![Installing an application on the emulator](img/image00457.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To select an APK file to install into the emulator, choose **Add app manually**
    and select the file. Once the APK file has been selected, the **Download** button
    will become usable. Select this to push the APK to the emulator, and choose **OK**
    once it has completed:![Installing an application on the emulator](img/image00458.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now go to the emulator window and use the application to populate it
    with test data. Note that performance may be quite slow, as the emulator is a
    virtual machine running within a virtual machine:![Installing an application on
    the emulator](img/image00459.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Applications may perform differently when under emulation. For example, Kik
    required us to solve a Captcha to prove that we were human! Other apps may have
    reduced functionality (such as anything involving GPS data).
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing data with ViaLab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After populating data within the application, let''s analyze it! Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to ViaLab and choose the **Forensics** tab at the top of the screen.
    Selecting **Refresh Application Folder** will pull the data from the device:![Analyzing
    data with ViaLab](img/image00460.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the data has been synced, the **File List** button can be selected to filter
    the files by type:![Analyzing data with ViaLab](img/image00461.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As an example, here is the contact data we populated within the app, stored
    in the database we examined in [Chapter 7](part0053.xhtml "Chapter 7. Forensic
    Analysis of Android Applications"), *Forensic Analysis of Android Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data with ViaLab](img/image00462.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter was an overview of a few free tools available for Android forensic
    examiners. These tools are summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | Features |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ViaExtract |'
  prefs: []
  type: TYPE_TB
- en: Free, requires registration and an active Internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical extractions via an application pushed to the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup extractions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem extractions if device is rooted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roots devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypasses screen locks without root by pushing an application to the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Autopsy |'
  prefs: []
  type: TYPE_TB
- en: Free and open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to examine extractions done by other tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows keyword searching, hash lists, and other common forensic methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powerful timeline feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can recover deleted data from supported filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| ViaLab |'
  prefs: []
  type: TYPE_TB
- en: Free, requires registration and an active Internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows an examiner to run an application from the APK and determine data storage
    locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs the application in an emulator or on a test device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valuable tool to show an examiner where data is stored in an app's directory,
    as well as see the functionality of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'd like to wish all of you the best of luck with your future Android examinations.
    We sincerely hope that something from this book will help you at some point. Our
    goal was to make an informative guide to the entire Android forensic process,
    from beginning to end. We hope you've learned plenty along the way (we certainly
    did while writing it). Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
