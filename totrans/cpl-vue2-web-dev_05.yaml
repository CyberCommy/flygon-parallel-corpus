- en: Navigating through the File Tree and Loading Folders from the URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](975e2a98-103c-45f3-8296-c2f44d60a634.xhtml), *Getting a List
    of Files Using the Dropbox API*,  we created an app that listed the file and folder
    contents of a specified Dropbox folder. We now need to make our app easy to navigate.
    This means the user will be able to click the folder names to navigate into and
    list the contents of, and also give the user the ability to download the file.
  prefs: []
  type: TYPE_NORMAL
- en: Before you proceed, ensure you have the Vue and Dropbox JavaScript files included
    in your HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to be:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component for both files and folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding links to the folder component to update the directory listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a download button to the file component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a breadcrumb component, so the user can easily navigate back up the
    tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically updating the browser URL, so if a folder is bookmarked or a link
    shared, the correct folder loads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating out files and folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we create the components, we need to separate our files and folders in
    our structure, so we can easily identify and display our different types. Thanks
    to the `.tag` attribute on each item, we can split up our folders and files.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to update our `structure` data property to be an object containing
    both the `files` and the `folders` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This gives us the ability to append our files and folders to different arrays,
    meaning we can display them differently in our view.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to populate these arrays with the data of the current folder.
    All the following code takes place in the first `then()` function of the `getFolderStructure` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript loop to cycle through the entries and check the `.tag`
    property of the item. If it is equal to `folder`, append it to the `structure.folder`
    array, otherwise, add it to the `structure.files` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code loops through the entries, as we were in the view and checks the `.tag`
    attribute. As the attribute itself begins with a `.`, we are unable to use the
    object style notation to access the property like we would, for example, do for
    the name -  `entry.name`. We then append the entry to either the `files` or `folders`
    array using JavaScript push, depending on the type.
  prefs: []
  type: TYPE_NORMAL
- en: To display this new data, we need to update the view to loop through both types
    of array. This is a perfect use case for using the `<template>` tag as we want
    to append both arrays to the same unordered list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the view to list the two arrays separately. We can remove the size option
    from the folder display section, as it will never feature a `size` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This now gives us the opportunity to create components for both types.
  prefs: []
  type: TYPE_NORMAL
- en: Making file and folder components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our data types separated out, we can create individual components to compartmentalize
    the data and methods. Create a `folder` component that accepts a single property,
    allowing the `folder` object variable to be passed through. As the template is
    so small, there is no need for a view or `<script>` block-based template; instead,
    we can pass it in as a string on the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To make our code smaller and less repetitive, the prop is called `f`. This tidies
    up the view and lets the component name determine the display type without repeating
    the word `folder` several times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the view to use the folder component, and pass in the `entry` variable
    to the `f` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Repeat the process with files by creating a `file` component. When creating
    the `file` component, we can move both the `bytesToSize` method and `byteSizes`
    data property from the parent `dropbox-viewer` component as it would only ever
    be used when displaying files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, we can use `f` for the prop name to reduce repetition (and the
    file size of our app). Update the view once again to use this new component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Linking folders and updating the structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our folders and files separated, we can transform our folder
    names into links. These links will then update the structure to show the contents
    of the selected folder. For this, we are going to use the `path_lower` property
    in each folder to build the link target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a dynamic link to each folder `name`, linking to the folder''s `path_lower`.
    As we are getting more familiar with Vue, the `v-bind` property has been shortened
    to just the colon notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We now need to add a `click` listener for this link. When clicked, we need to
    trigger the `getFolderStructure` method on the `dropbox-viewer` component. Although
    the click method will use the `f` variable on each instance to get the data, it's
    good practice to have the `href` attribute set to the folder URL.
  prefs: []
  type: TYPE_NORMAL
- en: Using what we learned in the early chapters of the book, create a method on
    the `folder` component that, when triggered, emits the folder path to the parent
    component. The `dropbox-viewer` component also needs a new method to update the
    structure with the given parameter when fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the new method on the `folder` component and add the `click` event to
    the folder link. As with the `v-bind` directive, we are now using the shorthand
    notation for `v-on`, represented by an `@` symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Along with defining the `click` event, an event modifier has also been added.
    Using `.prevent` after the click event adds `preventDefault` to the link action,
    this stops the link from actually going to the specified URL and instead lets
    the `click` method handle everything. More event modifiers and details about them
    can be found in the Vue documentation.
  prefs: []
  type: TYPE_NORMAL
- en: When clicked, the navigate method is fired, which emits the folder's lower path
    using the `path` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our `click` handler and the variable being emitted, we need
    to update the view to trigger a method on the parent `dropbox-viewer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new method on the Dropbox component with the same name as the value
    of the `v-on` attribute, in this case `updateStructure`. This method will have
    one parameter, which is the path we emitted earlier. From here, we can trigger
    our original `getFolderStructure` method using the path variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Viewing our app in the browser should now list the folders and links and, when
    clicked, show the contents of the new folder.
  prefs: []
  type: TYPE_NORMAL
- en: When doing so, however, there are a couple of issues that are raised. Firstly,
    the files and folders are appended to the existing list rather than replacing
    it. Secondly, there is no feedback to the user that the app is loading the next
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The first issue can be resolved by clearing the folder and file arrays before
    appending the new structure. The second can be addressed by utilizing the loading
    screen we used at the beginning of the app - this will give the user some feedback.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address the first issue, create a new `structure` object inside the success
    promise function for the `getFolderStructure` method. This object should replicate
    that of the `structure` object in the `data` object. This should set blank arrays
    for both files and folders. Update the `for` loop to use the local structure arrays
    rather than the component ones. Lastly, update the component `structure` object
    with the new version, including the updated files and folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As this method gets called when the app gets mounted and creates its own version
    of the structure object, there is no need to declare the arrays in the `data`
    function. Update the data object to just initialize the `structure` property as
    an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the app now will render the file list, which will be cleared and updated
    when a new folder is clicked into. To give the user some feedback and let them
    know the app is working, let's toggle the loading screen after each click.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do this, however, let's fully understand where the delay comes from
    and where is best to trigger the loading screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The click on the link is instantaneous, which triggers the navigate method
    on the folder component, which in turn fires the `updateStructure` method on the
    Dropbox component. The delay comes when the app gets to the `filesListFolder`
    function on the Dropbox instance, inside the `getFolderStructure` method. As we
    may want to fire the `getFolderStucture` method at a later date without triggering
    the loading screen, set the `isLoading` variable to `true` inside the `updateStructure`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With the animations in place, the app fades between both the loading screen
    and folder structure when navigating through folders.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a breadcrumb from the current path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When navigating through folders or a nested structure of any kind, it's always
    nice to have a breadcrumb available so the user knows where they are, how far
    they've gone, and also so they can get back to a previous folder easily. We are
    going to make a component for the breadcrumb as it is going to feature various
    properties, computed functions, and methods.
  prefs: []
  type: TYPE_NORMAL
- en: The breadcrumb component is going to list each folder depth as a link to a folder
    icon. Clicking the link will take the user directly to that folder - even if it
    is several layers up. To achieve this, we will need to have a list of links we
    can loop through, each with two properties - one being the full path to the folder
    and the other just being the folder name.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we had the folder structure of `/images/holiday/summer/iphone`,
    we would want to be able to click on `Holiday` and for the app to navigate to
    `/images/holiday`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your breadcrumb component — for now, add an empty `<div>` to the template
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the component to your view. We''re going to want the breadcrumb to fade
    in and out with the structure list, so we need to tweak the HTML to wrap both
    the list and breadcrumb component in a container that has the `v-if` declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We now need to make a variable available to us that stores the current folder
    path. We can then manipulate this variable within the breadcrumb component. This
    will be stored and updated on the Dropbox component and passed down to the breadcrumb
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new property called `path` on the `dropbox-viewer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to ensure this path gets updated whenever the structure is retrieved
    from the Dropbox API. Do this within the `getFolderStructure` method, just before
    the `isLoading` variable is disabled. This ensures it only gets updated once the
    structure has been loaded, but before the files and folders are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a variable populated with the current path, we can pass it
    through to the breadcrumb component as a prop. Add a new attribute to the breadcrumb
    with the path variable as the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the component to accept the prop as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `p` attribute now contains the full path of where we are (for example `/images/holiday/summer`).
    We want to break up this string so we can identify the folder name and build the
    breadcrumb for the component to render.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `computed` object on the component and create a new function titled
    `folders()`. This is going to create the breadcrumb array for us to loop through
    in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to set up some variables for us to use. Create a new, empty array
    called `output`. This is where we are going to build up our breadcrumb. We also
    need an empty variable titled `slug` as a string. The `slug` variable refers to
    a part of a URL and its use was made popular by WordPress. The last variable is
    the path created as an array. As we know, each folder is separated by a `/`, we
    can use this to explode or split the string into various parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to look at the parts variable for our `Summer`folder, it would look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We can now loop through the array to create the breadcrumb. Each breadcrumb
    item is going to be an object with the `name` of the individual folder, for example,
    `holiday` or `summer`, and the `slug`, which would be `/images/holiday` for the
    former and `/images/holiday/summer` for the latter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each object will be constructed and then added to the `output` array. We can
    then return the output for our template to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This loop creates our breadcrumb by taking the following steps. For this example,
    we''ll assume we are in the `/images/holiday`folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parts` will now be an array containing three items, `['''', ''images'', holiday'']`.
    If the string you split on begins with the item you''re splitting, an empty item
    will be made as the first item.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the beginning of the loop, the first slug variable will be equal to `''`,
    as it is the first item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `output` array will have a new item appended to it with the object of `{''name'':
    '''', ''path'': ''''}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `slug` variable then has a `/` added to the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looping through the next item, the `slug` variable gets the name of the item
    (`images`) added to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`output` now has a new object added, with the value of `{''name'': ''images'',
    ''path'': ''/images''}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the last item, another `/` is added along with the next name, `holiday`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`output` gets the last object added, the value being `{''name'': ''holiday'',
    ''path'': ''/images/holiday''}` - note the path is building up whereas the name
    remains the singular folder name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have our breadcrumb output array that we can loop through in the view.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we add the slash after we've appended to the output array is that
    the API states that to get the root of the Dropbox we pass in an empty string,
    whereas all other paths must begin with a `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to output the breadcrumb into our view. As this template is
    small, we are going to use the multiline JavaScript notation. Loop through the
    items within the `folders` computed variable, outputting a link for each of the
    items. Don''t forget to keep a containing element around all the links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendering this app in the browser should reveal a breadcrumb - albeit a bit
    squished together and missing a home link (as the first item didn''t have a name).
    Head back to the `folders` function and add an `if` statement - checking whether
    the item has a name and, if it doesn''t, adding a hard-coded value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The other option is to add the `if` statement in the template itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If we wanted to display a divider between the folder names, such as a slash
    or chevron, this can be easily added. However, a slight hurdle arises when we
    want to display the separator between the links, but not at the beginning or end.
    To resolve this, we are going to utilize the `index` keyword available when doing
    a loop. We are then going to compare this against the length of the array and
    operate a `v-if` declaration on an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'When looping through an array, Vue allows you to utilize another variable.
    This, by default, is the index (the position of the item in the array); however,
    the index may be set to a value if your array is constructed in a key/value fashion.
    If this is the case, you can still access the index by adding a third variable.
    As our array is a simple list, we can easily use this variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Update the `f` variable to a pair of brackets containing an `f` and an `i`, comma
    separated. The `f` variable is the current folder in the loop, while the `i` variable
    that has been created is the index of the item. Bear in mind that the array indexes
    start at `0` instead of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The separator we've added is contained in a span tag with a `v-if` attribute,
    the contents of which could look confusing. This is confusing the current index
    with the length of the `folders` array (how many items it has) minus 1\. The `-
    1` is because of the index starting at 0 and not 1, as you would expect. If the
    numbers do not match, then the `span` element is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we need to do is make our breadcrumb navigate to the selected
    folder. We can do this by adapting the navigate function we wrote for the `folder`
    component. However, because our whole component is the breadcrumb and not each
    individual link, we need to alter it so it accepts a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start off by adding the `click` event to the link, passing in the `folder`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the `navigate` method on your breadcrumb component, making sure
    you accept the `folder` parameter and emit the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to trigger the parent method when the path gets emitted. For
    this, we can utilize the same `updateStructure` method on the `dropbox-viewer`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We now have a fully operational breadcrumb that allows the user to navigate
    down the folder structure using the folder links and back up via breadcrumb links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our full breadcrumb component looks like is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Adding the ability to download files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our users can navigate through the folder structure, we need to add
    the ability to download the files. Unfortunately, this isn't as simple as accessing
    a link attribute on the file. To get the download link, we have to query the Dropbox
    API for each file.
  prefs: []
  type: TYPE_NORMAL
- en: We will query the API on the creation of the file component, this will asynchronously
    get the download link and show it once available. Before we can do this, we need
    to make the Dropbox instance available to the file component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new attribute to the file component in the view, and pass the Dropbox
    method through as the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `d` variable to the `props` object of your component accepting an Object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We are now going to add a data attribute of `link`. This should be set to `false`
    by default, so we can hide the link, and we'll populate it with the download link
    once the API has returned with the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `created()` function to the file component, and inside add the API
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This API method accepts an object, similar to the `filesListFolder` function.
    We're passing the path of the current file. Once the data is returned, we can
    set the component's `link` attribute to the download link.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add a download link to the template of the component. Add a `v-if`
    to only show the `<a>` once the download link has been retrieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Browsing through the files, we can now see a download link appearing next to
    each file, the speed of which will depend on your internet connection and the
    API speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full file component, with the download link added, now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Updating the URL hash and using it to navigate through the folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our Dropbox web app now fully navigable via both the structure list and
    breadcrumb, we can now add and update the browser URL for quick folder access
    and sharing. We can do this in two ways: we can either update the hash, for example,
    `www.domain.com/#/images/holiday/summer`, or we can redirect all the paths to
    the single page and handle the routing without the hash in the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: For this app, we will use the `#` method in the URL. We'll cover the URL routing
    technique in the third section of the book when we introduce `vue-router`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get the app to show the corresponding folder of the URL, we first
    need to get the URL to update when navigating to a new folder. We can do this
    using the native `window.location.hash` JavaScript object. We want to update the
    URL as soon as the user clicks a link, rather than waiting for the data to load
    to update.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the `getFolderStructure` method gets fired whenever we update the structure,
    add the code to the top of this function. This would mean the URL gets updated
    and then the Dropbox API is called to update the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you navigate through your app, it should be updating the URL to include the
    current folder path.
  prefs: []
  type: TYPE_NORMAL
- en: However, what you will find when you press refresh with a folder; is that the
    URL resets to just having a hash with no folder afterward as it is being reset
    by the empty path passed in via the method in the `created()` function.
  prefs: []
  type: TYPE_NORMAL
- en: We can remedy this by passing in the current hash to the `getFolderStructure`
    within the `created` function, however, there will be a few checks and error catching
    we will need to do if we do this.
  prefs: []
  type: TYPE_NORMAL
- en: First, when calling `window.location.hash`, you also get the hash returned as
    part of the string, so we will need to remove that. Second, we need to handle
    the instance of an incorrect URL, should the user enter an incorrect path or the
    folder gets moved. Lastly, we need to let the user use the back and forward buttons
    (or keyboard shortcuts) in their browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the folder based on the URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When our app mounts, it already calls a function to request the structure for
    the base folder. We wrote this function to allow the path to be passed in and,
    within the `created()` function, we have fixed the value to be the root folder
    of `''`. This gives us the flexibility to adapt this function to pass in the hash
    from the URL, instead of a fixed string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the function to accept the hash of the URL and, if it doesn''t have
    one, the original fixed string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Create a new variable called `hash` and assign `window.location.hash` to it.
    Becuase the variable starts with `#`, which is not needed for our app, use the
    `substring` function to remove the first character from the string. We can then
    use a logical operator to use either the hash variable, or if that equates to
    nothing, the original fixed string.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to still navigate through your app with the URL updating.
    If you press refresh at any time or copy and paste the URL into a different browser
    window, the folder you were in should load.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an error message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our app accepting URLs, we need to handle a case where someone is entering
    a URL and makes a mistake, or a folder is shared that has since been moved.
  prefs: []
  type: TYPE_NORMAL
- en: 'As this error is an edge case, we are going to hijack the `isLoading` parameter
    if there is an error in loading the data. In the `getFolderStructure` function,
    we have a `catch` function returned as a promise that gets fired if there is an
    error with the API call. In this function, set the `isLoading` variable to `''error''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `console.log` has been left in, should we need to diagnose a problem beyond
    a wrong file path. Although the API can throw several different errors, we are
    going to assume for this app that the error is due to a wrong path. If you wanted
    to cater for other errors in the app, you can identify the error type by its `status_code`
    attribute. More details on this can be found in the Dropbox API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your view to handle this new `isLoading` variable property. When set
    to error, the `isLoading` variable is still "true," so within your loading element,
    add a new `v-if` to check whether the loading variable is set to `error`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This is set to display the first element of the `isLoading` variable is set
    to `error`; otherwise, show the loading text. In the error text, a link is included
    to send the user back to the current URL without any URL hash. This will "reset"
    them back to the top of the document tree so they can navigate back down. An improvement
    could be to break the current URL down and suggest the same URL with the last
    folder removed.
  prefs: []
  type: TYPE_NORMAL
- en: Verify the error code is loading by adding a nonexistent path to the end of
    your URL and ensuring the error message is displayed. Bear in mind your user may
    experience a false positive on this error message in the sense that if the Dropbox
    API throws any kind of error, this message will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Using the back and forward buttons in your browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the back and forward buttons in our browser, we are going to need to
    update our code significantly. Currently, when the user clicks on a folder from
    either the structure or breadcrumb, we prevent the default behavior of the browser
    by using `.prevent` on our `click` handlers. We then immediately update the URL
    before we process the folder.
  prefs: []
  type: TYPE_NORMAL
- en: However, if we allow the app to update the URL using native behavior, we can
    then watch for a hash URL update and use this to retrieve our new structure. Using
    this methodology, the back and forward buttons would work without any further
    intervention, as they would be updating the URL hash.
  prefs: []
  type: TYPE_NORMAL
- en: This would also improve the readability of our app, and reduce code weight as
    we would be able to remove the `navigate` methods and `click` handlers on the
    links.
  prefs: []
  type: TYPE_NORMAL
- en: Removing unneeded code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step, before we add more code, is to remove the unnecessary code from
    our components. Starting with the breadcrumb, remove the `navigate` method from
    the component and the `@click.prevent` attribute from the link in the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to update the `slug` of each of the items to prepend a `#` - this
    ensures the app doesn''t try and navigate to a brand new page when clicked. As
    we are looping through our breadcrumb items in the folders `computed` function,
    add a hash to each `slug` when pushing the object to the `output` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove the `v-on` declaration on the breadcrumb component in the
    `dropbox-viewer-template`. It should only have the path being passed in as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We can now repeat the same pattern for the folder component. Remove the `@click.prevent`
    declaration from the link and delete the `navigate` method.
  prefs: []
  type: TYPE_NORMAL
- en: As we are not looping through or editing the folder object before displaying
    it, we can prepend the `#` in the template. As we are telling Vue the `href` is
    bound to a JavaScript object (with the colon), we need to encapsulate the hash
    in quotes and concatenate it with the folder path using the JavaScript `+` notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are already inside both single and double quotes, so we need to inform JavaScript
    we *literally* mean a single quote and this is done by using a backslash in front
    of the single quote character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove the `@path` attribute from the `<folder>` component in the
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Already our code is looking cleaner, less cluttered, and smaller in file size.
    Viewing the app in the browser will render the structure of the folder you are
    in; however, clicking links will update the URL but not change what is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the structure with a URL change and setting Vue data outside of the
    instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our URL updating correctly, we can get the new structure whenever
    the hash changes. This can be done natively with JavaScript with the `onhashchange`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to create a function that fires whenever the hash of the URL updates,
    which, in turn, will update a path variable on the parent Vue instance. This variable
    will be passed to the child `dropbox-viewer` component as a prop. This component
    will be watching for a change in the variable and, upon update, it will retrieve
    the new structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, update the parent Vue instance to have a data object with a
    path key - set to the empty string property. We are also going to assign our Vue
    instance to a constant variable of `app`—this allows us to set data and call methods
    outside of the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to update this data property every time the URL gets updated.
    This is done using `window.onhashchange`, which is a native JavaScript function
    that fires every time the hash changes in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the hash modifier from the `created` function on the Dropbox
    component, and use that to modify the hash and store the value on the Vue instance.
    If the hash doesn''t exist, we will pass an empty string to the path variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to pass this path variable through to the Dropbox component. Add
    a prop of `p` with the `path` variable as the value in your view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `props` object to the Dropbox component to accept a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now going to add a watch function to the `dropbox-viewer` component.
    This function will watch the `p` prop and, when updated, call the `updateStructure()`
    method with the modified path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Heading back to the browser we should now be able to navigate through our Dropbox
    structure, as before, using both the folder links and breadcrumb as navigation.
    We should now be able to use the back and forward browser buttons, plus any keyboard
    shortcuts, to also navigate back through the folders.
  prefs: []
  type: TYPE_NORMAL
- en: Before we head to Chapter 6, *Caching the Current Folder Structure Using Vuex*,
    and introduce folder caching to our app using `vuex`, there are a few optimizations
    we can make to our Dropbox component.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the `getFolderStructure` function, we can remove the first line where
    the URL hash gets set to the path. This is because the URL has already been updated
    when the link is used. Remove this line from your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Second, there is now repetition in the Dropbox component with the `this.path` variable
    and the `p` prop. Eliminating this requires some slight reworking, as you are
    not allowed to modify a prop directly as you are with the path; however, it needs
    to be kept in sync so the breadcrumb can be correctly rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `path` property from the data object in the Dropbox component, and
    also delete the  `this.path` = path line from the `getFolderStructure` function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, update the prop to be equal to `path`, not `p`. This will also require
    the `watch` function to be updated to watch the `path` variable and not `p()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the created method to just use `this.path` as the parameter to the function.
    The Dropbox component should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the view to accept the `prop` as `path`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We now need to ensure the parent `Vue` instance has the correct path on both
    page load and hash change. To avoid repetition, we are going to extend our `Vue`
    instance with both a method and a `created` function.
  prefs: []
  type: TYPE_NORMAL
- en: Keep the path variable set to an empty string. Create a new method titled `updateHash()` that
    removes the first character from the window hash and then sets the `path` variable
    either to the hash or an empty string. Next, create a `created()` function that
    runs the `updateHash` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Vue` instance now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, to remove repetition, we can fire the `updateHash` method when the
    hash changes in the address bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Final Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our code now complete your view and JavaScript file should look like the
    following. Firstly, the view should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The accompanying JavaScript app should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a fully functioning Dropbox viewer app featuring navigation for
    folders and download links for files. We can use either the folder links or breadcrumb
    for navigation and use the back and/or forward buttons. We can also share or bookmark
    a link and load the contents of that folder.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 6, *Caching the Current Folder Structure Using Vuex*, we are going
    to speed up the navigation process by caching the current folder contents using
    Vuex.
  prefs: []
  type: TYPE_NORMAL
