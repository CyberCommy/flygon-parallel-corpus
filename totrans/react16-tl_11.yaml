- en: Building and Deploying React Applications with Docker Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until this point in the book, you''ve been running your React applications
    in development mode, using the various tools that you''ve been learning. In this
    chapter, we''ll switch our focus to production environment tooling. The overall
    aim is to be able to deploy your React application to a production environment.
    Thankfully, there''s much tooling to help with this work, which you''ll familiarize
    yourself with in this chapter. Your goals in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a basic messaging React app that utilizes an API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Node container to run your React application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting your app into deployable services that run in containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using static React builds for production environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a messaging app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's difficult to talk about tooling used to deploy React applications without
    any context. For this, you'll throw together a basic messaging app. In this section,
    you'll see how the app works and how it is built. Then, you'll be ready for the
    remaining chapter sections where you'll learn how to deploy your application as
    a set of containers.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea of this app is to be able to login and send messages to your
    contacts, as well as receiving messages. We'll keep it super simple. In terms
    of functionality, it'll barely match SMS capabilities. In fact, that can be the
    app title—*Barely SMS*. The idea is to have a React application with enough moving
    parts to test out in a production setting, as well as a server that you'll be
    able to deploy in a container later on.
  prefs: []
  type: TYPE_NORMAL
- en: For visual appearance, we'll use the Material-UI ([https://material-ui-next.com/](https://material-ui-next.com/))
    component library. However, the choice of UI components should not affect the
    lessons of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Barely SMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get familiar with *Barely SMS*, let''s start it up in your terminal the
    same way you''ve been doing all along in this book so far. Once you change into
    the `building-a-messaging-app` directory in the source code bundle that comes
    with this book, you can start the development server just like any other `create-react-app`
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In another Terminal window or tab, you can start the API server for *Barely
    SMS* by running the following command from within the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start a basic Express ([http://expressjs.com/](http://expressjs.com/))
    app. Once the server is up and listening for requests, you should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now you're ready to login.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you first load the UI, you should see the login screen that looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ec33f5d6-91f8-4260-a34d-844e97afd21a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following mock users exist as part of the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The password isn''t actually validated against anything, so leaving it blank
    or entering gibberish should authenticate any of the preceding users. Let''s take
    a look at the `Login` component that renders this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's a lot of Material-UI going on here, but feel free to ignore the majority
    of it. The important bit is the `login()` function that's imported from the `api`
    module. This is used to make a call to the `/api/login` endpoint. The reason this
    is relevant from the perspective of production React deployment is because this
    is an interaction with a service that might be deployed as its own container.
  prefs: []
  type: TYPE_NORMAL
- en: The home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you were able to login successfully, you''ll be taken to the home page of
    the app. You should see a page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/78c26332-ca7d-4f7f-881f-217225d77bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The home page of *Barely SMS* shows the user''s contacts who are currently
    online. In this case, there are clearly no other users online yet. Let''s take
    a look at the `Home` component source now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `componentWillMount()` life cycle method, the contacts API endpoint is
    fetched using the `getContacts()` function. This is then repeated using an interval
    so that as your contacts login, they'll show up here. When the component is unmounted,
    the interval is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this, I''m going to open up Firefox (it doesn''t actually matter which
    browser you use, as long as it''s something different from where you''re signed
    in as `user1`). From here, I can sign in as `user2`, which is a contact of `user1`
    and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d501457c-2f04-4794-a963-3096931a1049.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as I login here, I see that User 1 is online in another browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ba043e19-7741-4420-bafb-285a5ef83fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if I return to Chrome where I logged in as User 1, I should see that my
    User 2 contact has signed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0601e247-9a9b-4618-b9e5-65bdb8116db9.png)'
  prefs: []
  type: TYPE_IMG
- en: This app will follow a similar refresh pattern on other pages—an interval is
    used to fetch data from the API service endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The contacts page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to view all of your contacts and not just those which are currently
    online, you have to go to the contacts page. To get there, you have to expand
    the navigation menu by clicking on the hamburger button to the left of the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/486fc220-77b9-4373-8e04-54f73ad9299a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the Contacts link, you''re taken to the contacts page which
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3a72390a-a867-4bdd-8c65-e60d836db914.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This page is very similar to the home page except that it shows all contacts.
    You can send a message to any user, not just those that are currently online.
    Let''s take a look at the `Contacts` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Like the `Home` component, `Contacts` uses the interval pattern to refresh contacts.
    For example, in the future if you wanted to add an enhancement to this page that
    visually indicated which users were online, you would need to have fresh data
    from your services.
  prefs: []
  type: TYPE_NORMAL
- en: The messages page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you expand the navigation menu and visit the messages page, you''ll see
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f0d2b42c-32ae-449d-8ea0-7519231f9f04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are no messages yet. Let''s take a look at the `Messages` component before
    sending a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once again, the same pattern of refreshing data using an interval is in place
    here. When the user clicks on one of the messages, they're taken to the message
    details page where they can read the message content.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go back to the other browser (Firefox in my case) where you logged in
    as User 2. Click on the little message icon beside User 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/29613984-ecaa-4e82-832f-c4d3753bdbf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will bring you to the new message page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cad052ae-c842-4543-ab99-7428c3113bc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go ahead and type a message, and hit SEND. Then, go back to Chrome where you''re
    logged in as User 1. You should see a new message appear on the messages page
    from User 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/269d214d-bbe1-4559-a06d-5b29486a596c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you click on the message, you should be able to read the message content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/15d3bd2d-4a92-4ab9-b7a5-90aff7597e65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you can click on the REPLY button to take you to the new message
    page, which will be addressed to User 2 or you can delete the message. Before
    we look at the API code, let''s take a look at the `NewMessage` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `postMessage()` API function is used to send the message using the
    API service. Now let''s look at the `MessageDetails` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `getMessage()` API function is used to load the message content. Note
    that neither of these components use the same refresh pattern that other components
    have been using because the information never changes.
  prefs: []
  type: TYPE_NORMAL
- en: The API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API is the service that your React app interacts with in order to retrieve
    and manipulate data. When thinking about deploying production React applications,
    it's important to use the API as abstraction that not only represents one service,
    but potentially several microservices that your application interacts with.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, let''s look at the API functions that are used by your React
    components that make up *Barely SMS*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'These simple abstractions use `fetch()` to make HTTP requests to the API services.
    Right now, there''s only one API service running as a single process that has
    mock user data and all changes happen in memory only—nothing is persisted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is an Express app that keeps app data in simple JavaScript objects and
    arrays. While everything happens within this one service now, that might not always
    be the case. Some of these API calls might live in different services. This is
    what makes deploying to containers so powerful—you can abstract complex deployments
    at a high level.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Node containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start things off by running the *Barely SMS* React dev server within a
    Node.js Docker image. Note that this is not part of the production deployment.
    This is just a starting point for you to get familiar with deploying Docker containers.
    As we progress through the remaining sections in this chapter, you'll move steadily
    toward a production-level deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to getting your React application into a container is creating
    a `Dockerfile`. If you don''t have Docker installed on your system already, find
    it here along with installation instructions: [https://www.docker.com/community-edition](https://www.docker.com/community-edition).
    If you open up a terminal and change into the `getting-started-with-containers`
    directory, you''ll see a file called `Dockerfile`. Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the file that''s used to build an image. An image is like a template
    for the container process that runs your React application. Essentially, these
    lines do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM node:alpine`: What''s the base image that this image uses. This is a
    small version of Linux with Node.js on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WORKDIR /usr/src/app`: Changes the working directory on the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPY package*.json ./`: Copies `package.json` and `package-lock.json` to the
    container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RUN npm install`: Installs npm package dependencies on the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPY . .`: Copies the source code of your app to the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXPOSE 3000`: Exposes port `3000` when the container is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CMD [ "npm", "start" ]`: Runs `npm start` when the container starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next file that you''ll want to add is a `.dockerignore` file. This file
    lists everything that you don''t want included on the image by the `COPY` command.
    Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It's important that you don't copy over `npm_modules` that you might have installed
    on your system because the `npm install` command will install them again and you'll
    have two copies of your libs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you build the Docker image that you can deploy, there are a couple of
    minor changes to make. First, you need to figure out what your IP address is so
    that you can use it to communicate with the API server. You can find it by running
    `ifconfig` in your terminal. Once you have it, you can update the `proxy` value
    in `package.json`. It used to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it should have an IP address so that your Docker container can reach it
    once it''s running. Here''s what mine looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you''ll want to pass your IP as an argument to the `listen()` method
    in `server.js`. It used to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what mine looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you''re ready to build the Docker image by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will build an image with the ID `barely-sms-ui` using the `Dockerfile`
    found in the current directory. Once built, you can see the image by running `docker
    images`. The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you''re ready to deploy the container with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To cleanup old unused containers, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-p 3000:3000` argument ensures that the exposed port, `3000`, on the container
    is mapped to port `3000` on your system. You can test this by opening `http://localhost:3000/`.
    However, you might see an error that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f345d99f-4de5-4ba7-b55b-b200a24620b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you look at the container console output, you''ll see something that
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is because you haven't started the API server yet. You'll actually see
    a similar error if you put an invalid IP address as a proxy address. If you have
    or you need to change the proxy value for whatever reason, you'll have to rebuild
    the image and then restart the container. If you start the API by running `npm
    run api` in another terminal and then reload the UI, everything should work as
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: Composing React apps with services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main challenge with the previous section was that you had a user interface
    service self-contained as a running container. The API service, on the other hand,
    was off doing its own thing. The next tool that you'll learn how to use is `docker-compose`.
    As the name suggests, `docker-compose` is how you compose larger applications
    out of smaller services. The next natural step for *Barely SMS* is to use this
    Docker tool to make the API service and to control both services as one application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, we''ll need two `Dockerfile` files. You can reuse the `Dockerfile`
    from the preceding section—just rename it to `Dockerfile.ui`. Then, create another
    `Dockerfile` that''s nearly identical—call it `Dockerfile.api` and give it the
    following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The two differences are the `EXPOSE` port value and the `CMD` that is run. This
    command starts the API server instead of the React development server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you build the images, the `server.js` and `package.js` files need minor
    adjustments. In `package.json`, the proxy can simply point to `http://api:3001`.
    In `server.js`, make sure that you''re no longer passing a specific IP address
    to `listen()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Building the two images requires a slight modification as well because you''re
    no longer using the standard name for the `Dockerfile`. Here''s how to build the
    UI image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, build the API image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you''re ready to create a `docker-compose.yml`. This is how
    you declare what the `docker-compose` tool should do when invoked. Here''s what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this YAML markup is clearly separated into two services. First
    there's the `api` service, which points to the `barely-sms-api` image and maps
    ports accordingly. Then, there's the `ui` service, which does the same thing except
    that it points to the `barely-sms-ui` image and maps to different ports. It also
    links to the API service because you want to make sure that the API service is
    available before the UI is loaded in any browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bring the services up, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You should then see logs from bother services in your console. Then, if you
    visit `http://localhost:3000/`, you should be able to use *Barely SMS* as you
    normally would, except this time, everything is self-contained. From this point
    forward, you're in a better position to grow your application as the requirements
    evolve. As necessary, you can add new services and have your React components
    talk to them like they're all talking to the same application while keeping the
    services modular and self-contained.
  prefs: []
  type: TYPE_NORMAL
- en: Static React builds for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step to making *Barely SMS* ready for production deployment is removing
    the React development server from the UI service. The development server was never
    intended for production use because it has many parts that aid developers, but
    ultimately slow down the overall user experience and have no place in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using a Node.js based image, you can use a simple NGINX HTTP server
    that serves static content. Since this is a production environment and you don''t
    need a development server that builds UI assets on the fly, you can just use the
    `create-react-app` build script to build your static artifacts for NGINX to serve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can change the `Dockerfile.ui` file so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the image is basic on an NGINX server that serves static content,
    and we''re passing it a `nginx.conf` file. Here''s what this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here you have a fine-grained level of control over where HTTP requests are sent.
    For example, if the `/api/login` and `/api/logout` endpoints were moved to their
    own service, you could control this change here rather than having to rebuild
    the UI image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last change that''s required to be done is to `docker-compose.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice that port `3000` now maps to port `80` in the `ui` service? This
    is because NGINX serves on port `80`. If you run `docker-compose up`, you should
    be able to visit `http://localhost:3000/` and interact with your static build.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! With no more React development server, you're just about as
    ready for production as you can be from a build tool perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you built a simple messaging app called *Barely SMS*. Then,
    you learned how to deploy this app as a Docker container. Then, you learned how
    to package services together, including the UI service, so that you have a higher
    level of abstraction to work with when deploying applications with many moving
    parts. Lastly, you learned how to build production-ready static assets and serve
    them with an industrial strength HTTP server—NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this has been an enlightening read. It was both a challenge and a joy
    to write. Tooling in web development shouldn't be as difficult as it has been
    over the past decade. Projects like React and browser vendors like Chrome are
    starting to change this trend. I believe that any technology is only as good as
    its tooling. Now that you have a firm handle on tooling available in the React
    ecosystem, put it to good use and let it do the hard work for you.
  prefs: []
  type: TYPE_NORMAL
