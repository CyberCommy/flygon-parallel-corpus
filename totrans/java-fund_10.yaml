- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: It includes detailed steps that are to be performed by the students to achieve
    the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 1: Introduction to Java'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Printing the Results of Simple Arithmetic Operations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class named `Operations` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `main()`, print a sentence describing the operation on the values you
    will be performing along with the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 2: Reading Values from the User and Performing Operations Using the
    Scanner Class.'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ReadScanner` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 3: Calculating the Percent Increase or Decrease of Financial Instruments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `StockChangeCalculator` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 2: Variables, Data Types, and Operators'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 4: Inputting Student Information and Outputting an ID'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Scanner` package and create a new class
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Take the student name as a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Take the university name as a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Take the student's age as an integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Print out the student details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 5: Calculating the Number of Full Fruit Boxes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `PeachCalculator` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 3: Control Flow'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 6: Controlling the Flow of Execution Using Conditionals'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class named `Salary` and add `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Initialize two variables `workerhours` and `salary`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the `if` condition, check whether the working hours of the worker is below
    the required hours. If the condition holds `true`, then the salary should be (working
    hours * 10).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Use the `else if` statement to check if the working hours lies between 8 hours
    and 12 hours. If that is true, then the salary should be calculated at $10 per
    hour for the first eight hours and the remaining hours should be calculated at
    $12 per hour.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Use the `else` block for the default of $160 (additional day's salary) per day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 7: Developing a Temperature System'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare two strings, `temp` and `weatherWarning`, and then initialize `temp`
    with either `High`, `Low`, or `Humid`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Create a switch statement that checks the different cases of `temp`, and then
    initialize the variable `weatherWarning` to appropriate messages for each case
    of temp (`High`, `Low`, `Humid`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the default case, initialize `weatherWarning` to "The weather looks good.
    Take a walk outside".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: After you complete the switch construct, print the value of `weatherWarning`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program to see the output, it should be similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Full code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 8: Implementing the for Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `PeachBoxCounter` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 9: Implementing the while Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `PeachBoxCounters` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 10: Implementing Looping Constructs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the packages that are required to read data from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Declare the variables to store the total number of seats available, remaining
    seats, and tickets requested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Within a `while` loop, implement the `if else` loop that checks whether the
    request is valid, which implies that the number of tickets requested is less than
    the number of seats remaining.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If the logic in the previous step is true, then print a message to denote that
    the ticket is processed, set the remaining seats to the appropriate value, and
    ask for the next set of tickets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If the logic in step 3 is false, then print an appropriate message and break
    out of the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 11: Continuous Peach Shipment with Nested Loops'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `PeachBoxCounter` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main()` enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 4: Object-Oriented Programming'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 12: Creating a Simple Class in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in the IDE named `Animals`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the project, create a new file named `Animal.java` under the `src/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Animal.java` and paste in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the curly braces, create the following instance variables to hold our
    data, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Below the instance variables, define two constructors. One will take no arguments
    and initialize legs to 4, ears to 2, and eyes to 2\. The second constructor will
    take the value of legs, ears, and eyes as arguments and set those values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define four methods, two to set and get the family and two to set and get the
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We have finished constructing our Animal class. Let's continue and create a
    few instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `Animals.java` and copy the following code into it,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two objects of the `Animal` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create another animal with 2 legs, 2 ears and 2 eyes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the animals'' names and family, we will use the getters and setters
    we created in the class. Copy/write the following lines into the `Animals` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/C09581_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Output of the Animal class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 13: Writing a Calculator Class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Calculator class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Create three fields `double operand1`, `double operand2`, and `String operator`.
    Add a constructor that sets all three fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, add an `operate` method that will check what operator is ("+",
    "-", "x" or "/") and executes the correct operation, returning the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a `main()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 14: Creating a Calculator Using Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class `Operator` that has one String field initialized in the constructor
    that represents the operator. This class should have a default constructor that
    represents the default operator, which is sum. The `Operator` class should also
    have a method called `operate` that receives two doubles and return the result
    of the operator as a double. The default operation is `sum`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Create another class named `Subtraction`. It extends from `Operator` and override
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the `operate` method with each operation that it represents. It also need a
    no-argument constructor that calls super passing the operator that it
  prefs: []
  type: TYPE_NORMAL
- en: 'represents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another class named `Multiplication`. It extends from Operator and override
    the `operate` method with each operation that it represents. It also need a no-argument
    constructor that calls super passing the operator that it represents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another class named `Division`. It extends from Operator and override
    the `operate` method with each operation that it represents. It also need a no-argument
    constructor that calls super passing the operator that it represents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'As the previous `Calculator` class, this one will also have an `operate` method,
    but it will only delegate to the operator instance. Last, write a `main` method
    that calls the new calculator a few times, printing the results of the operation
    for each time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 15: Understanding Inheritance and Polymorphism in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Cat` class that inherits from `Animal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Create instance variables `owner`, `numberOfTeeth`, and `age` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `main()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The output is as follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 5: OOP in Depth'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Activity 16: Creating and Implementing Interfaces in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our `Animals` project from the previous lesson.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new interface called `AnimalBehavior`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this create two methods `void move()` and `void makeSound().`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `public` class called `Cow` and implement the `AnimalBehavior`
    interface. Override the two methods, but leave them blank for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `Cow` class, create two fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the overridden methods to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another interface called `AnimalListener` with the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Let the `Cow` class also implement this interface. Make sure that you override
    the two methods in the interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the two methods to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `main` method to test your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `Cow` class and view the output. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 17: Using instanceof and Typecasting'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `Random` package to generate random employees:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `EmployeeLoader` class that will serve as a datasource as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a static pseudo-random generator as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a new randomly picked employee as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another file with `SalesWithCommission` class that extends `Sales`.
    Add a constructor that receives the gross sales as double and store it as a field.
    Also add a method called `getCommission` which returns a double that is the gross
    sales times 15% (0.15):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a class `ShowSalaryAndCommission` with `main()` method, that calls `getEmployee()`
    repeatedly inside a `for` loop and print the information about the Employee salary
    and tax. And if the employee is an instance of `SalesWithCommission`, also print
    his commission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 18: Understanding Typecasting in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our `Animals` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new class called `AnimalTest` and, inside it, create the main method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `main` method, create two variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the owner of the `cat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Upcast the `cat` to `Animal` and try to print the owner once more. What error
    do you get? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The error message is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Exception while accessing the variables of the subclass for upcasting'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Reason: Since we did an upcast, we cannot access the variables of the subclass
    anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Print the sound of the `cow`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Try to upcast the `cow` to `Animal`. Why error do you get? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The error message is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Exception while upcasting cow to Animal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Reason: Cow does not inherit from the Animal class, so they don''t share the
    same hierarchical tree.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Downcast the `animal` to `cat1` and print the owner again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The full `AnimalTest` class should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Output of the AnimalTest class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 19: Implementing Abstract Classes and Methods in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project called `Hospital` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `src` folder, create an abstract class called `Person`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an abstract method that returns the type of person in the hospital.
    Name this method String `getPersonType()`, returning a String:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: We have finished our abstract class and method. Now, we will continue to inherit
    from it and implement this abstract method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called Doctor that inherits from the Person class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `getPersonType` abstract method in our `Doctor` class. Return
    the string "`Arzt`". This is German for Doctor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another class called `Patient` to represent the patients in the hospital.
    Similarly, make sure that the class inherits from `Person` and overrides the `getPersonType`
    method. Return "`Kranke`". This is German for Patient:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have the two classes. We will now test our code using a third test class.
  prefs: []
  type: TYPE_NORMAL
- en: Create a third class called `HospitalTest`. We will use this class to test the
    two classes we created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `HospitalTest` class, create the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `main` method, create an instance of `Doctor` and another instance
    of `Patient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Try calling the `getPersonType` method for each of the objects and print it
    out to the console. What is the output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: Output on calling getPersonType()'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 20: Use abstract class to Encapsulate Common Logic'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an abstract class `GenericEmployee` that has a constructor that receives
    the gross salary and stores that in a field. It should implement the Employee
    interface and have two methods: `getGrossSalary()` and `getNetSalary()`. The first
    will just return the value passed into the constructor. The latter will return
    the gross salary minus the result of calling `getTax()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new generic version of each type of employee: `GenericEngineer`. It
    will need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new generic version of each type of employee: `GenericManager`. It
    will need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new generic version of each type of employee: `GenericSales`. It will
    need a constructor that receives gross salary and pass it to the super constructor.
    It also needs to implement the `getTax()` method, returning the correct tax value
    for each class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new generic version of each type of employee: `GenericSalesWithCommission`.
    It will need a constructor that receives gross salary and pass it to the super
    constructor. It also needs to implement the `getTax()` method, returning the correct
    tax value for each class. Remember to also receive the gross sales on the `GenericSalesWithCommission`
    class, and add the method that calculates the commission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new method `getEmployeeWithSalary` to your `EmployeeLoader` class. This
    method will generate a random salary between 70,000 and 120,000 and assign to
    the newly created employee before returning it. Remember to also provide a gross
    sales when creating a `GenericSalesWithCommission` employee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Write an application that calls the `getEmployeeWithSalary` method multiple
    times from inside `for` loop. This method will work like the one in the previous
    activity: print the net salary and tax for all employees. If the employee is an
    instance of `GenericSalesWithCommission` also print his commission.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 6: Data Structures, Arrays, and Strings'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 21: Finding the Smallest Number in an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the `main` method in a new class file known as `ExampleArray:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an array of 20 numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Set the minimum float as the first number
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Create a for loop to check all the numbers in the array
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Use if to test each number against the minimum. If it is smaller than the minimum
    then make that number the new minimum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'After the loop completes, print out the minimum number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The full code should look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 22: Calculator with Array of Operators'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class `Operators` that will contain the logic of determining what
    operator to use based out of a String. In this class create a `public` constant
    field `default_operator` that is going to be an instance of the `Operator` class.
    Then create another constant field called `operators` of type array of `Operator`
    and initialize it with an instance of each of the operators you have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Operators` class, add a `public static` method called `findOperator`
    that receives the operator as a String and return an instance of `Operator`. Inside
    it iterate over the possible operators array and, using the `matches` method for
    each operator, return the selected operator, or the default one if it didn''t
    match any of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `CalculatorWithDynamicOperator` class with three fields: `operand1`
    and `operator2` as `double` and `operator` of type `Operator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a constructor that receives three parameters: `operand1` and `operand2`
    of type `double` and `operator` as a String. In the constructor, instead of having
    an if-else to select the operator, use the `Operators.findOperator` method to
    set the operator field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `main` method where you call the `Calculator` class multiple times and
    print the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 23: Working with ArrayList'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `ArrayList` and `Iterator` from `java.util`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new class called `StudentsArray`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main` method define an `ArrayList` of `Student` objects. Insert 4 student
    instances, instantiated with different kinds of constructors we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an iterator for your list and print the name of each student:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Clear all the `students`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The final code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.30: Output of the StudentsArray class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 24: Input a String and Output Its Length and as an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a public class called `NameTell` and a `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Use the `Scanner` and `nextLine` to input a string at the prompt "`Enter your
    name:`"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Count the length of the string and find the first character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Print an output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.31: Output of the NameTell class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 25: Calculator Reads from Input'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `CommandLineCalculator` with a `main()` method in
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Use an infinite loop to keep the application running until the user asks to
    exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Collect the user input to decide which action to execute. If the action is
    **Q** or **q**, exit the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'If the action is anything else, find an operator and request two other inputs
    that will be the operands covering them to double:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Call the `operate` method on the Operator found and print the result to the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 26: Removing Duplicate Characters from a String'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Unique class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new method `removeDups` called that takes and returns a string. This
    is where our algorithm will go. This method should be `public` and `static`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the method, check whether the string is null, empty, or has a length
    of 1\. If any of these cases are true, then just return the original string since
    there checking is not needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a string called `result` that is empty. This will be a unique string
    to be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Create for loop from `0` to the length of the string passed into the method.
    Inside the `for` loop, get the character at the current index of the string. Name
    the variable `c`. Also create a `boolean` called `isDuplicate` and initialize
    it to `false`. When we encounter a duplicate, we will change it to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another nested `for` loop from `0` to the `length()` of result. Inside
    the `for` loop, also get the character at the current index of result. Name it
    `d`. Compare `c` and d. If they are equal, then set `isDuplicate` to `true` and
    `break`. Close the inner `for` loop and go inside the first `for` loop. Check
    if `isDuplicate` is false. If it is, then append `c` to result. Go outside the
    first `for` loop and return the result. That concludes our algorithm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.32: Output of Unique class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The full code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30: Output of Unique class](img/C09581_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.33: Output of Unique class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Lesson 7: The Java Collections Framework and Generics'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 27: Read Users from CSV Using Array with Initial Capacity'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class called `UseInitialCapacity` with a `main()` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a constant field that will be the initial capacity of the array. It will
    also be used when the array needs to grow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `static` method that will resize arrays. It receives two parameters:
    an array of Users and an `int` that represents the new size for the array. It
    should also return an array of Users. Implement the resize algorithm using `System.arraycopy`
    like you did in the previous exercise. Be mindful that the new size might be smaller
    than the current size of the passed in array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Write another `static` method that will load the users from a CSV file into
    an array. It needs to ensure that the array has the capacity to receive the users
    as they are loaded from the file. You''ll also need to ensure that after finishing
    loading the users, the array do not contain extra slots at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main` method, call the load users method and print the total number
    of users loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 28: Reading a Real Dataset Using Vector'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting, change your `CSVLoader` to support files without headers.
    To do that, add a new constructor that receives a `boolean` that tells if it should
    ignore the first line or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the old constructor to call this new one passing true to ignore the
    first line. This will avoid you to go back and change any existing code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class called `CalculateAverageSalary` with `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another method that reads data from the CSV and load the wages into
    a Vector. The method should return the Vector at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main` method, call the `loadWages` method and store the loaded wages
    in a Vector. Also store the initial time that the application started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize three variables to store the min, max and sum of all wages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'In a for-each loop, process all wages, storing the min, max and adding it to
    the sum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end print the number of wages loaded and total time it took to load
    and process them. Also print the average, min and max wages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 29: Iterating on Vector of Users'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `IterateOnUsersVector` with `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main method, call the `UsersLoader.loadUsersInVector` passing the first
    argument passed from the command line as the file to load from and store the data
    in a Vector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterate over the users Vector using a `for-each` loop and print the information
    about the users to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 30: Using a Hashtable to Group Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class called `GroupWageByEducation` with a `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `static` method that creates and returns a `Hashtable` with keys of
    type String and values of type Vector of Integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Between creating the `Hashtable` and returning it, load the rows from the CSV
    ensuring they have the correct format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `if` inside the `while` loop, get the education level and wage for the
    record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the Vector in the `Hashtable` that corresponds to the current education
    level and add the new wage to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main method, call your `loadWages` method passing the first argument
    from the command line as the file to load the data from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterate on the `Hashtable` entries using a `for-each` loop and for each entry,
    get the Vector of the corresponding wages and initialize min, max and sum variables
    for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'After initializing the variables, iterate over all wages and store the min,
    max and sum values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, print the information found for the specified entry, which represents
    an education level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 31: Sorting Users'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a comparator class to compare Users by ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a comparator class to compare Users by email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a comparator class to compare Users by name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new class called `SortUsers` with a `main` method which loads the
    unique users keyed by email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'After loading the users, transfer the users into a Vector of Users to be able
    to preserve order since `Hashtable` doesn''t do that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Ask the user to pick what field he wants to sort the users by and collect the
    input from standard input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the input in a `switch` statement to pick what comparator to use. If the
    input is not valid, print a friendly message and exit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell the user what field you''re going to sort by and sort the Vector of users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the users using a `for-each` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 8: Advanced Data Structures in Java'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 32: Creating a Custom Linked List in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class named, `SimpleObjLinkedList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named Node that represents each element in a Linked List. Each
    node will have an Object that it needs to hold, and it will have a reference to
    the next Node. The `LinkedList` class will have a reference to the head node and
    will be able to traverse to the next Node by using `Node.getNext()`. Head being
    the first element, we could traverse to the next element by moving `next` in the
    current Node. Like this, we could traverse till the last element of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement a `toString()` method to represent this object. Starting from the
    head Node, iterate all the nodes until the last node is found. On each iteration,
    construct a string representation of the object stored in each node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `add(Object item)` method so that any item/object can be added
    into this List. Construct a new Node object by passing the `newItem = new Node(item)`
    Item. Starting at the head node, crawl to the end of the list. In the last node,
    set the next node as our newly created node (`newItem`). Increment the index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Implement `get(Integer index`) method to retrieve the item from the list based
    on the index. Index must not be less than 0\. Write a logic to crawl to the specified
    index, identify the node, and return the value from the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `remove(Integer index)` method to remove the item from the list
    based on the index. Write logic to crawl to the node before the specified index
    and identify the node. In this node, set the `next` as `getNext()`. Return true
    if the element was found and deleted. If the element was not found, return false:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a member attribute of type Node (pointing to the head node). Write a
    `main` method, create an object of `SimpleObjLinkedList`, and add five strings,
    one after the other `("INPUT-1", "INPUT-2", "INPUT-3", "INPUT-4","INPUT-5")`,
    to it respectively. Print the `SimpleObjLinkedList` object. In the `main` method,
    get the item from the list using `get(2)` and print the value of the item retrieved.
    Also, remove the item from list `remove(2)` and print the value of the list. One
    element should have been deleted from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 33: Implementing the Methods in the BinarySearchTree Class to Find
    the Highest and Lowest Value in the BST'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the same class we used in the previous exercise: `BinarySearchTree`. Add
    a new method, `int` `getLow()`, to find the lowest value in the BST and return
    it. As we learned about the BST, the leftmost node will be the lowest of all the
    values. Iterate all of the left nodes until we reach an empty left node and get
    the value of its root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new method, `int` `getHigh()`, to find the highest value in the BST and
    return it. As we learned about the BST, the rightmost node will be the highest
    of all the values. Iterate all the right nodes until we reach an empty right node
    and get the value of its root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main` method, construct a BST, add values to it, and then print the
    highest and lowest values by calling `getLow()` and `getHigh()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 34: Using an Enum to Hold College Department Details'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `DeptEnum` enum using the `enum` keyword. Add two private attributes
    (`String deptName` and `int deptNo`) to hold the values to be kept in the enum.
    Override a constructor to take an acronym and `deptNo` and place it in the member
    variables. Add enum constants adhering to the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Add getter methods for `deptName` and `deptNo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s write a `main` method and sample program to demonstrate the use of enums:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 35: Implementing Reverse Lookup'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an enum `App`, that declares constants BE, BCOM, BSC and BARC, along
    with their full forms and department numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Also declare two private variables `accronym` and `deptNo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Create a parameterized constructor and assign the variables `accronym` and `deptNo`
    with values passed as arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Declare a public method `getAccronym()` that returns the variable `accronym`
    and a public method `getDeptNo()` that returns the variable `deptNo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Implement reverse look up that takes in the course name, and searches the corresponding
    acronym in the `App` enum.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Implement the main method, and run the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'Lesson 9: Exception Handling'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Activity 36: Handling Mistakes in Numeric User Input'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **src** folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class `Adder`, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Adder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'In `main()` method, use the `for` loop to read values from the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: In the same loop, check if the valid value is entered. If the value is valid,
    add a try block to calculate the sum of three numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: The catch block should prompt the user to input valid numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the sum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the result to the console. Here is a sample output of a case with no
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is a sample output of a run with errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 37: Writing Custom Exceptions in Java'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **src** folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `RollerCoasterWithAge` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an exception class, `TooYoungException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, prints the name of the visitor riding the Roller Coaster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'The catch block will display the message that is to be displayed for visitors
    below the age of 15:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 38: Dealing with Multiple Exceptions in a Block'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **src** folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `RollerCoasterWithAgeAndHeight` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an exception class, `TooYoungException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an exception class, `TooShortException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, `TooShortException` if the height is below 130, and prints
    the name of the visitor riding the Roller Coaster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: 'The catch block will display the message that is to be displayed for visitors
    below the age of 15 or height below 130:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 39: Working with Multiple Custom Exceptions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **src** folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `RollerCoasterWithAgeAndHeight` as the class name, and then click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an exception class, `TooYoungException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Create an exception class, `TooShortException`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: 'In `main()`, create a loop that reads in the names of the visitors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'The `try` block, read the age of the visitors, throws `TooYoungException` if
    the age is below 15, `TooShortException` if the height is below 130, and prints
    the name of the visitor riding the Roller Coaster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a catch block for `TooYoungException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a catch block for `TooShortException`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a finally block that prints a message for escorting visitors off the
    premises:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
