- en: Chapter 12. Using Third-party Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to combine all the theories and principles that we learned so far
    and try to understand how we can utilize third-party packages to achieve lots
    of possible projects, such as the Twitter API, the use of Social Auth, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Diving into the world of open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Social Auth in Django projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building REST APIs in Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from the core modules required to build a website using Django and Python,
    we need some third-party packages as well. There are many third-party packages
    freely available over the Internet; you can find many useful packages at [https://www.djangopackages.com/](https://www.djangopackages.com/).
    We will try to use open source third-party packages for our project(s).
  prefs: []
  type: TYPE_NORMAL
- en: Diving into the world of open source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we see the word open source, the first question that comes to our mind
    is what does open source actually mean?
  prefs: []
  type: TYPE_NORMAL
- en: Well, open source is a term that refers to something whose design is publicly
    accessible and can be modified by anyone as per their need, without requiring
    any prior permission.
  prefs: []
  type: TYPE_NORMAL
- en: Okay then, let's move on, and dive deep into the aspects of the open source
    world.
  prefs: []
  type: TYPE_NORMAL
- en: What is an open source software?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open source software means that the software's source code is publicly accessible,
    thus it can be modified in any possible way. Also, anyone can contribute to the
    source code, which often leads to enhancement of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Now, most software users don't ever see source code, which programmers can modify
    to get the result as per their need; this basically means that having the source
    code in the programmer's hand gives them total control over the software.
  prefs: []
  type: TYPE_NORMAL
- en: A programmer can then move forward with the software either by fixing any bugs
    or by adding any new feature to it.
  prefs: []
  type: TYPE_NORMAL
- en: What's the difference between open source and other software?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the source code is not released for public access, or the code is accessible
    only to the particular group of people who created it, this type of software is
    called **proprietary software** or **closed source software**. Examples of closed
    source software are Microsoft products, such as Microsoft Windows, Word, Excel,
    PowerPoint, Adobe Photoshop, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To use proprietary software, users must agree (usually by signing a license
    that is displayed the first time they run this software) that they will not do
    anything with the software that the software's authors have not expressly permitted.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas open source software is different. Authors of open source software make
    its code available to others who would like to view that code, copy it, learn
    from it, alter it, or share it. Python and Django programs are examples of open
    source software.
  prefs: []
  type: TYPE_NORMAL
- en: Just as there are licenses for proprietary software, open source software also
    has a license, but a much different one. These licenses promote open source development;
    they allow modification and bug fixes to their own source code.
  prefs: []
  type: TYPE_NORMAL
- en: Doesn't open source just mean that something is free of charge?
  prefs: []
  type: TYPE_NORMAL
- en: '*"Open source doesn''t just mean getting access to the source code."* As explained
    by **Open Source Initiative**, it means that anyone should be able to modify the
    source code to suit a programmer''s need.'
  prefs: []
  type: TYPE_NORMAL
- en: There can be a misconception about what an open source ecosystem can be thought
    of as. Programmers can charge the open source software they create, but that will
    not make any sense, as the person buying it has the full right to modify it and
    distribute it free of cost. Instead of charging for the open source software,
    programmers charge for the services they build around it, such as support, or
    other secondary components that add much value to the original software. Companies
    such as **Red Hat** charge by giving support to their open source Red Hat operating
    system. **Elasticsearch** charges for a component called marvel that monitors
    Elasticsearch, which helps a lot when Elasticsearch runs in production.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people think that only Internet-famous rock star programmers can contribute
    to open source projects, but, in fact, open source communities thrive on contributions
    from beginners to experts, and even nonprogrammers.
  prefs: []
  type: TYPE_NORMAL
- en: Using SocialAuth in Django projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every website needs to store user data to give them a better and exclusive experience,
    but to do this, the website needs you to register by filling out the user details
    form, where they ask you to enter your basic information. Filling these can be
    boring and tedious. One practical solution to such a problem is **Social Auth**,
    where you get registered to a site by a single click that fills up your basic
    information automatically from the social site that you are already registered
    on.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have seen many sites while browsing the Web that give
    you the option of a couple of social buttons, such as, Google, Facebook, Twitter,
    and so on, to login or register on their website. If you login or register using
    any of these social buttons, they will pull up your basic details, such as e-mail,
    gender, and so on, from that social site where the information is already updated,
    so that you don't need to fill out the form manually.
  prefs: []
  type: TYPE_NORMAL
- en: Building the complete end-to-end implementation of this alone could be a project
    in Django, and if you want your site to have the same functionality, you don't
    need to reinvent the wheel. We can just import a third-party library, which, with
    minimal configuration changes in the `settings.py` file, will make users log in
    or register with the help of their existing social account.
  prefs: []
  type: TYPE_NORMAL
- en: How OAuth works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how **OAuth** works, let's consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth is like a valet key for the Web. Most luxury cars come with a valet key,
    which the owner hands down to the parking attendant. With that key, the car is
    not allowed to travel longer distance, and other features, such as trunk on board
    luxury features, are disabled.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the login button you see on a website does not give the site
    full access to your social account; it will simply pass on the details that you
    grant, or the default information, such as an e-mail, gender, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In order to access this information, sites used to ask for a user's username
    and password, which increased the risk of getting your personal information exposed
    or account hacked. The possibility of people having the same username and password
    for their banking account makes it more dangerous.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the aim of OAuth is to provide a method for users to grant third-party
    access to their information without sharing the passwords. By following this method,
    limited access can also be granted (such as, e-mail, permission to create a post,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: For example, for a login register site, it will be very weird if they ask for
    access to your personal photos. So, at the time of giving permission to the application
    using OAuth, permission can actually be reviewed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram gives you the overview of the OAuth mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How OAuth works](img/image00314.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding figure, you can see the client application that needs your
    credentials asking you to either login or register using any of the social accounts.
    This is shown in the first part of the figure, where the client asks the user
    for social account authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Once you decide to login via a social account and you grant the client application
    permission to access your social account, the client application that is already
    registered with the same social site with an API key of its own, asks the social
    site for your user details with its API request. At this stage, you might have
    seen the list of the records that the client application will access. Some sites
    may also let you edit these access rights. After the server grants authorization
    to the client application, the client gets an access token for your social account
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Client application may store this access token for future use or, as it is popularly
    called, **offline access**.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between registering and logging in with this social OAuth method
    is that when you are already registered, chances are that the client application
    will store your access token, so that the next time you try to log in, you don't
    have to go through the same social site authorization page, as you have already
    given them your authorization credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing social OAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn to implement social OAuth in our existing project.
    To implement social authentication for our application, we will use a third-party
    library called `python-social-auth`. We will use Twitter social Auth to authenticate
    our users. Let''s take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will install the third-party app called **Python-Social-Auth**. The
    installation of `python-social-auth` can be done simply using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once we have completed the installation of this third-party library, we will
    move to our mytweet application and make the configuration changes in the `settings.py`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are including this third-party library as an application in our application,
    so we have to create the entry of this application in the `INSTALLED_APPS` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, add the `''social.apps.django_app.default`'' parameter to the `INSTALLED_APPS`
    variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add the `AUTHENTICATION_BACKEND` variable in the `settings.py`
    file, which enlists all social login sites that we want to support. For this demonstration,
    we will add only Twitter social Auth, but as per the use case, you can add any
    or as many Twitter social Auth as you want. The `AUTHENTICATION_BACKENDS` parameter
    is the list of the Python class paths, which knows how to authenticate the user.
    The default points to the ''`django.contrib.auth.backends.ModelBackend`'' parameter.
    We will add the ''`social.backends.twitter.TwitterOAuth`'' parameter to the `AUTHENTICATION_BACKENDS`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the `TEMPLATE_CONTEXT_PROCESSORS` parameter, which will add
    backends and associated data in the template''s context, which will in turn load
    the backend key with three entries, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Associated**: If the user is logged in, this will be a list of UserSocialAuth
    instances; otherwise, it will be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not_associated**: If the user is logged in, this will be a list of nonassociated
    backends; otherwise, it will contain a list of all the available backends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backends**: This is a list of all the available backend names. Let''s take
    a look at the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our mytweet application already has a user model through which users are able
    to log in and post tweets. We will use the same model class to create a user from
    social Auth. For this, we need to add this line that tells `python-social-auth`
    to use the existing `user_profile` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add custom URLs that will be used for social Auth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding these to the `settings.py` file tells social Auth to fall for the corresponding
    URLs in the following situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOCIAL_AUTH_LOGIN_REDIRECT_URL`: This URL will be triggered when the social
    authentication is successful. We will use this URL to send the logged-in user
    his profile page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOCIAL_AUTH_LOGIN_ERROR_URL`: This URL will be triggered when there is an
    error during social authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOCIAL_AUTH_LOGIN_URL`: This is the URL from where social Auth will be done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOCIAL_AUTH_DISCONNECT_REDIRECT_URL`: After the user has logged out, he/she
    will be redirected to this URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have added a new application to our existing project, we need to create
    the corresponding tables in our database, which we have already learned in the
    previous chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to migrate our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the last configuration change, we need to add an entry to the social Auth
    URLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated URL patterns will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Twitter application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will move ahead and create a Twitter application that will give us
    the API keys to make this social Auth work:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into your Twitter account and open [https://apps.twitter.com/app/new](https://apps.twitter.com/app/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The page will look somewhat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Twitter application](img/image00315.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fill up the details and create your Twitter application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we are locally testing our app, place `http://127.0.0.1:8000/complete/twitter`
    as the callback URL, and also check the **Allow this application to be used to
    Sign in with Twitter** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it is successfully created, your application will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Twitter application](img/image00316.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Move ahead with the **Keys and Access Tokens** tab and copy the **Consumer Key**
    (API key) and **Consumer Secret** (API secret) keys, as shown in the following
    screenshot:![Creating a Twitter application](img/image00317.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the `settings.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Update our user class to use the Auth appropriately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, start the server or open `http://127.0.0.1:8000/login/twitter/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will take you to the following authorization page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Twitter application](img/image00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Sign In** button as we will use this Twitter application to sign
    into our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, it will redirect the request back to the mytweet app with your
    basic information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Twitter application](img/image00319.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If the username does not exist in our database, it will create the user profile
    with the Twitter username.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create two tweets and save them.![Creating a Twitter application](img/image00320.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, just to check whether social Auth works, we will log out and try to open
    the URL again. You will get redirected to the same preceding profile page after
    redirection.
  prefs: []
  type: TYPE_NORMAL
- en: So, we learned how to create a Twitter API step by step by registering your
    application with Twitter to set your keys in your program. Then, we saw how our
    application sends you to the Twitter site for authentication, and how it redirects
    you to our site after the authentication done from the Twitter website.
  prefs: []
  type: TYPE_NORMAL
- en: Building REST APIs in Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**) is the underlying architectural
    principle of the Web. Any API that follows REST principles is designed so that
    the client who is the browser here does not need to know anything about the structure
    of the API. The API server only needs to respond to the request made by clients.'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP works on the verbs that get applied to the resources. Some of the verbs
    that are very popular are GET and POST, but there exists other important verbs,
    such as PUT, DELETE, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we will use our Twitter database, which is managed by a web service
    as the REST API. For all REST communication, the media type is the main thing
    that an API server has to care about, and the format in which it has to respond
    to the client's request. Our API service uses a custom hypermedia based on JSON,
    for which we will assign the /`json+tweetdb` MIME type application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A request for the base resource will return something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can observe the output by referring to the `href` links through which we
    are trying to send or retrieve the information, which are nothing but Hypermedia
    controls. We can get the user list by sending another request through the `/user`
    command with the `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Seeing the preceding generated output, we can guess who all the users are,
    and which are the requests that we can send, such as the `DELETE` or `PUT` request.
    In the same way, we can even create a new user by sending a `POST` request to
    `/user`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also update the existing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can easily note, we are using different `HTTP` verbs (`GET`, `PUT`, `POST`,
    `DELETE`, and so on) to manipulate these resources.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have the basic idea of how REST works, so we will move ahead and use
    a third-party library called **Tastypie** to play with our mytweets application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Django Tastypie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django Tastypie makes developing RESTful APIs for web applications easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Tastypie, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add the `tastypie` parameter to the `INSTALLED_APPS` variable in the `settings.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other configurable settings that an API needs, such as a limit
    on API calls and so on, but by default, they are set to default initially. You
    can either change this, or leave it like that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the API settings that you should know about, and can modify as per
    your need, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`API_LIMIT_PER_PAGE` (optional): This option controls the default number of
    records that Tastypie will return in the `view.applies` list when a user does
    not specify a limit to the GET parameter. The number of results to be returned
    are not overridden by the `resource` subclass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The default limit here is 20 though.
  prefs: []
  type: TYPE_NORMAL
- en: '`TASTYPIE_FULL_DEBUG` (optional): When an exception occurs, this controls the
    behavior of whether to show the REST response or the 500 error page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If set to `True` and `settings.DEBUG = True`, the **500 Error** page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: If it is not set or set to `False`, Tastypie returns a serialized response.
  prefs: []
  type: TYPE_NORMAL
- en: If `settings.DEBUG` is `True`, you'll get the actual exception message plus
    a trace back.
  prefs: []
  type: TYPE_NORMAL
- en: If `settings`.`DEBUG` is `False`, Tastypie will call the `mail_admins()` function
    and provide a canned error message (which you can override with `TASTYPIE_CANNED_ERROR`)
    in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The default is `False` though.
  prefs: []
  type: TYPE_NORMAL
- en: '`TASTYPIE_CANNED_ERROR` (optional): You can write your customized error messages
    when an unhandled exception is raised and `settings.DEBUG` is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The default here is *"Sorry, this request could not be processed. Please try
    again later."*
  prefs: []
  type: TYPE_NORMAL
- en: '`TASTYPIE_ALLOW_MISSING_SLASH` (optional): You can call the REST API without
    giving the final slashes, which are mainly used to iterate the API with other
    systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must also have `settings.APPEND_SLASH = False`, so that Django does not
    emit HTTP 302 redirects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The default here is `False`.
  prefs: []
  type: TYPE_NORMAL
- en: '`TASTYPIE_DATETIME_FORMATTING` (optional): This setting configures the global
    datetime/date/time data for the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The valid options for this are:'
  prefs: []
  type: TYPE_NORMAL
- en: iso-8601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DateTime::ISO8601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ISO-8601 (example: 2015-02-15T18:37:01+0000)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iso-8601-strict, which is the same as iso-8601 but trips the microseconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rfc-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DateTime::RFC2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RFC 2822 (for example, Sun, 15 Feb 2015 18:37:01 +0000)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: The default here is iso-8601.
  prefs: []
  type: TYPE_NORMAL
- en: '`TASTYPIE_DEFAULT_FORMATS` (optional): This globally configures the list of
    serialization formats for your entire site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This defaults to [`json, xml, yaml,html, plist`].
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple JSON API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make REST-style architecture, we need to define the resource class for our
    tweets, so let''s create a `api.py` file in the `tweets` folder with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a URL where all the API requests will be made for this Tweet resource,
    so let''s add an entry for this in the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: That's all that we need to create a basic REST API for tweets.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will see the various outputs based on the variations of the REST URL.
    In a browser, open the URLs, as follows, and observe the output in the `.json`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first URL will display the Tweet API details in the `.json` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8000/api/v1/?format=json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the first output, we will call our tweet API, which would give us
    details of the tweet info and other details, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8000/api/v1/tweet/?format=json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Our basic REST API is ready, which lists all tweets. If you look at the schema,
    it gives us many details about the API, such as which HTTP methods are allowed,
    which format the output will be in, and other different fields. This actually
    helps us to understand what we can do using our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8000/api/v1/tweet/schema/?format=json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Some APIs might need authorized access, such as a user profile, account details,
    and so on. Basic HTTP authorization can be added to the Tastypie API by just adding
    a basic authorization line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Basic HTTP authorization can be added with a header file as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will ask for authentication via a basic HTTP request, which looks like
    the following screenshot. Once this is successful, all requests in the current
    session are authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a simple JSON API](img/image00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This, followed by a demonstration, shows the real-world application of how to
    scale the Django system with MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about open source and how to use and implement
    open source third-party packages in our project. Now, you will be comfortable
    to implement social Auth from Twitter. You can try the same for Facebook and Google+
    by yourself as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn more about the debugging techniques that
    we need to use when we face any errors or warnings in our code, or some configuration
    issues. You will also learn the tools for product development, such as Git, the
    Sublime Text editor, and so on.
  prefs: []
  type: TYPE_NORMAL
