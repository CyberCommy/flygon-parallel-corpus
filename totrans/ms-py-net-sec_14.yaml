- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1 : Working with Python Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the differences between Python 2.x and 3.x?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Unicode support in Python 3.x has been improved. The other changes are to
    do with the `print` and `exec` functions, which have been adjusted to be more
    readable and coherent.
  prefs: []
  type: TYPE_NORMAL
- en: What is the main programming paradigm used by Python developers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Object-oriented programming.
  prefs: []
  type: TYPE_NORMAL
- en: What data structure in Python allows us to associate values with keys?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python dictionary data structure provides a hash table that can store any
    number of Python objects. The dictionary consists of pairs of items containing
    a key and a value.
  prefs: []
  type: TYPE_NORMAL
- en: What are the main development environments for Python scripting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PyCharm, Wing IDE, and Python IDLE.
  prefs: []
  type: TYPE_NORMAL
- en: What is the methodology we can follow as a set of best practices in Python for
    the development of security tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Open Methodology for Security Tool Developers** (**OMSTD**)'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Python module that helps to create isolated Python environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`virtualenv`'
  prefs: []
  type: TYPE_NORMAL
- en: Which tool allows us to create a base project on which we can start to develop
    our own tool?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Security Tool Builder** (**SBT**)'
  prefs: []
  type: TYPE_NORMAL
- en: How can we debug variables in Python development environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By adding a breakpoint. In this way, we can debug and see the content of the
    variables just at the point where we have established the breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: How can we add a breakpoint in PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can set a breakpoint with the `call` function in the Debug Tool Window.
  prefs: []
  type: TYPE_NORMAL
- en: How can we add a breakpoint in Wing IDE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can set a breakpoint with the `call` function in the Debug option menu.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2: System Programming Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the main module that allows us to interact with the Python interpreter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The system (`sys`) module.
  prefs: []
  type: TYPE_NORMAL
- en: What is the main module that allows us to interact with the OS environment,
    filesystem, and permissions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The operating system (`os`) module
  prefs: []
  type: TYPE_NORMAL
- en: Which modules and methods are used to list the contents of the current working
    directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The operating system (`os`) module and the `getcwd()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Which module is used to execute a command or invoke a process via the `call()`
    function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`>>> subprocess.call("cls", shell=True)`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the approach that we can follow in Python to handle files and manage
    exceptions in an easy and secure way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use the context manager approach and the `with` statement.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between processes and threads?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Processes are full programs. Threads are similar to processes: they are also
    code in execution. However, threads are executed within a process, and the threads
    of a process share resources among themselves, such as memory.'
  prefs: []
  type: TYPE_NORMAL
- en: What are the main modules in Python for creating and managing threads?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: The `thread` module provides primitive operations for writing multithreaded
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: The `threading` module provides a more convenient interface.
  prefs: []
  type: TYPE_NORMAL
- en: What is the limitation that Python has when working with threads?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The execution of threads in Python is controlled by the Global Interpreter Lock
    (GIL) so that only one thread can be executed at any time, independently of the
    number of processors of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Which class provides a high-level interface for executing input/output tasks
    in an asynchronous way?    `ThreadPoolExecutors` provides a simple abstraction
    around spinning up multiple threads and          using these threads to perform
    tasks in a concurrent way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the function in the `threading` module that determines which thread
    has performed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use the `threading.current_thread()` function in order to determine which
    thread has      performed the current task.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3: Socket Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which method of the `sockets` module allows a domain name to be obtained from
    an IP address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `gethostbyaddr(address)` method, we can obtain a domain name from an
    IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the `socket` module allows a server socket to accept requests
    from a client socket from another host?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.accept()` is used to accept the connection from the client. This method
    returns two values: `client_socket` and `client_address`, where `client_socket`
    is a new socket object used to send and receive data over the connection.'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the `socket` module allows the sending of data to a given address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.sendto(data, address)` is used to send data to a given address.'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the `socket` module allows you to associate a host and a port
    with a specific socket?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `bind(IP,PORT)` method allows you to associate a host and a port with a
    specific socket; for example,
  prefs: []
  type: TYPE_NORMAL
- en: '`>>> server.bind((“localhost”, 9999))`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which is the the difference between the TCP and UDP protocols and how do you
    implement them in Python with the `socket` module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main difference between TCP and UDP is that UDP is not connection-oriented.
    This means that there is no guarantee that our packets will reach their destinations,
    and there is no error notification if a delivery fails.
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the `socket` module allows you to convert a hostname to the
    IPv4 address format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.gethostbyname(hostname)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the `socket` module allows you to implement port-scanning with
    sockets and check the port state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.connect_ex(address)` is used for implementing port scanning with sockets.'
  prefs: []
  type: TYPE_NORMAL
- en: Which exception of the `socket` module allows you to catch exceptions related
    to the expiration of waiting times?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.timeout`'
  prefs: []
  type: TYPE_NORMAL
- en: Which exception of the `socket` module allows you to catch errors during the
    search for information about IP addresses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `socket.gaierror` exception, which is thrown with the message `“connection
    error to the server: [Errno 11001] getaddrinfo failed"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which exception of the `socket` module allows you to catch generic input and
    output errors and communications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`socket.error`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4: HTTP Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which module is the easiest to use since it is designed to facilitate requests
    to a REST API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `requests` module.
  prefs: []
  type: TYPE_NORMAL
- en: How is a POST request made by passing a dictionary-type data structure that
    would be sent in the body of the request?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`response = requests.post(url, data=data)`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the correct way to make a POST request through a proxy server and modify
    the information of the headers at the same time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`requests.post(url,headers=headers,proxies=proxy)`'
  prefs: []
  type: TYPE_NORMAL
- en: What data structure is necessary to mount if we need to send a request with
    `requests` through a proxy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dictionary data structure; for example, `proxy = {“protocol”:”ip:port”}`.
  prefs: []
  type: TYPE_NORMAL
- en: How do we obtain the code of an HTTP request returned by the server if, in the
    `response` object, we have the response of the server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`response.status_code`'
  prefs: []
  type: TYPE_NORMAL
- en: With which module can we indicate the number of connections that we are going
    to reserve using the `PoolManager` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`urllib3`'
  prefs: []
  type: TYPE_NORMAL
- en: Which module of the `requests` library offers the possibility of performing
    digest-type authentication?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HTTPDigestAuth`'
  prefs: []
  type: TYPE_NORMAL
- en: What coding system does the basic authentication mechanism use to send the username
    and password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The HTTP basic authentication mechanism is based on forms and uses `Base64`
    to encode the username and password composition separated by a colon (`user: password`).'
  prefs: []
  type: TYPE_NORMAL
- en: Which mechanism is used to improve the basic authentication process by using
    a one-way hashing cryptographic algorithm (MD5)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The HTTP digest authentication mechanism uses MD5 to encrypt the user, key,
    and realm hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Which header is used to identify the browser and operating system that we are
    using to send requests to a URL?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **User-Agent** header.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5: Analyzing Network Traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the Scapy function that can capture packets in the same way that tools
    such as `tcpdump` and Wireshark do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scapy> pkts = sniff (iface = "eth0", count = n)`, where `n` is the number
    of packets.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the best way to send a packet with Scapy indefinitely every five seconds
    in the form of a loop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scapy> sendp (packet, loop=1, inter=5)`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the method that must be invoked with Scapy to check whether a certain
    port (`port`) is open or closed on a certain machine (`host`), and also to show
    detailed information about how packets are being sent?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scapy> sr1(IP(dst=host)/TCP(dport=port), verbose=True)`'
  prefs: []
  type: TYPE_NORMAL
- en: What functions are necessary for implementing the `traceroute` command in Scapy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IP`/`UDP`/`sr1`'
  prefs: []
  type: TYPE_NORMAL
- en: Which Python extension module interfaces with the `libpcap` packet capture library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pcapy.`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method in the `Pcapy` interface allows us to capture packets on a specific
    device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use the `open_live` method in the Pcapy interface for capturing packets
    on a specific device, and we can specify the number of bytes per capture and other
    parameters, such as promiscuous mode and timeout.
  prefs: []
  type: TYPE_NORMAL
- en: What are the methods for sending a package in Scapy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`send(): sends layer-3 packets`'
  prefs: []
  type: TYPE_NORMAL
- en: '`sendp(): sends layer-2 packets`'
  prefs: []
  type: TYPE_NORMAL
- en: Which parameter of the `sniff` function allows us to define a function that
    will be applied to each captured packet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `prn` parameter will be present in many other functions and, as can be
    seen in the documentation, refers to a function as an input parameter. Here''s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`>>> packet=sniff(filter="tcp", iface="eth0", prn=lambda x:x.summary())`'
  prefs: []
  type: TYPE_NORMAL
- en: Which format supports Scapy for applying filters over network packets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Berkeley Packet Filters** (**BPFs**)'
  prefs: []
  type: TYPE_NORMAL
- en: What is the command that allows you to follow the route that a data packet (IP
    packet) will take to go from computer A to computer B?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`**traceroute**`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6: Gathering Information from Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What do we need to access the Shodan Developer API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register at the Shodan website and use `API_KEY`, which gives you access to
    their services.
  prefs: []
  type: TYPE_NORMAL
- en: Which method should be called in the Shodan API to obtain information about
    a given host and what data structure does that method return?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method is the `host()` method, and it returns the dictionary data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Which module can be used to obtain the banner of a server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create a socket with the` sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)` instruction,
    send a GET request with the `sock.sendall(http_get)` instruction, and finally
    receive data with the `data = sock.recvfrom(1024)` instruction.
  prefs: []
  type: TYPE_NORMAL
- en: Which method should be called and what parameters should be passed to obtain
    the IPv6 address records with the `DNSPython` module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dns.resolver.query(''domain'',''AAAA'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method should be called and what parameters should be passed to obtain
    the records for mail servers with the `DNSPython` module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dns.resolver.query(''domain'',''MX'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method should be called and what parameters should be passed to obtain
    the records for name servers with the `DNSPython` module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dns.resolver.query(''domain'',''NS'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Which project contains files and folders that contain patterns of known attacks
    that have been collected in various pentesting tests on web applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `FuzzDB` project provides categories that are separated into different directories
    that contain predictable resource location patterns and patterns for detecting
    vulnerabilities with malicious payloads or vulnerable routes.
  prefs: []
  type: TYPE_NORMAL
- en: Which module should be used to look for login pages on a server that may be
    vulnerable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fuzzdb.Discovery.PredictableRes.Logins`'
  prefs: []
  type: TYPE_NORMAL
- en: Which FuzzDB project module allows us to obtain strings to detect SQL injection-type
    vulnerabilities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fuzzdb.attack_payloads.sql_injection.detect.GenericBlind`'
  prefs: []
  type: TYPE_NORMAL
- en: Which port do DNS servers use to resolve requests for mail server names?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`53(UDP)`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7: Interacting with FTP, SSH, and SNMP Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we connect to an FTP server using the `ftplib` module through the `connect()`
    and `login()` methods?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ftp = FTP()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp.connect(host, 21)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp.login(‘user’, ‘password’)`'
  prefs: []
  type: TYPE_NORMAL
- en: What method of the `ftplib` module allows it to list the files of an FTP server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FTP.dir()`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the Paramiko module allows us to connect to an SSH server and
    with what parameters (host, username, password)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ssh = paramiko.SSHClient()`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssh.connect(host, username=’username’, password=’password’)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the Paramiko module allows us to open a session to be able to
    execute commands subsequently?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ssh_session = client.get_transport().open_session()`'
  prefs: []
  type: TYPE_NORMAL
- en: How do we log in to an SSH server with an RSA certificate from which we've found
    out the route and password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rsa_key= RSAKey.from_private_key_file(''path_key_rsa'',password)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`client.connect(''host'',username='''',pkey= rsa_key,password='''')`'
  prefs: []
  type: TYPE_NORMAL
- en: Which main class of the `PySNMP` module allows queries on SNMP agents?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CommandGenerator`. Here''s an example of its use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from pysnmp.entity.rfc3413.oneliner import cmdgen`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cmdGen = cmdgen.CommandGenerator()`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the instruction for informing Paramiko to accept server keys for the
    first time without interrupting the session or prompting the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())`'
  prefs: []
  type: TYPE_NORMAL
- en: Which way of connecting to an SSH server through the `Transport()` method provides
    another type of object to authenticate against the server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`transport = paramiko.Transport(ip_address)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`transport.start_client()`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Python FTP module, based in Paramiko, that provides a connection
    with FTP servers in a secure way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pysftp`, which is based on paramiko.'
  prefs: []
  type: TYPE_NORMAL
- en: Which  method from `ftplib` do we need to use to download files, and which `ftp`
    command do we need to execute?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`file_handler = open(DOWNLOAD_FILE_NAME, ''wb'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp_cmd = ''RETR %s'' %DOWNLOAD_FILE_NAME`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp_client.retrbinary(ftp_cmd,file_handler.write)`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8: Working with Nmap Scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which method allows us to see the machines that have been targeted for scanning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nmap.all_hosts()`'
  prefs: []
  type: TYPE_NORMAL
- en: How do we invoke the `scan` function if we want to perform an asynchronous scan
    and also execute a script at the end of that scan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nmasync.scan(''ip'',''ports'',arguments=''--script=/usr/local/share/nmap/scripts/'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method can we use to obtain the result of the scan in dictionary format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nmap.csv()`'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of Nmap module is used to perform scans asynchronously?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nma = nmap.PortScannerAsync()`'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of Nmap module is used to perform scans synchronously?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nma = nmap.PortScanner()`'
  prefs: []
  type: TYPE_NORMAL
- en: How can we launch a synchronous scan on a given host, on a given port if we
    initialize the object with the `self.nmsync = nmap.PortScanner ()` instruction?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`self.nmsync.scan(hostname, port)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method can we use to check whether a host is up or not in a specific network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see whether a host is up or not with the `state()` function. Here''s
    an example of its use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap[‘127.0.0.1’].state()`'
  prefs: []
  type: TYPE_NORMAL
- en: What function is it necessary to define when we perform asynchronous scans using
    the `PortScannerAsync()` class ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When performing the scan, we can indicate an additional callback parameter
    where we define the `return` function, which would be executed at the end of the
    scan. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`def callback_result(host, scan_result)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmasync.scan(hosts=’127.0.0.1’, arguments=’-sP’, callback=callback_result)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which script do we need to run on port `21` if we need to know whether the FTP
    service allows authentication anonymously without having to enter a username and
    password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ftp-anon.nse`'
  prefs: []
  type: TYPE_NORMAL
- en: Which script do we need to run on port `3306` if we need to know whether the
    MySQL service allows authentication anonymously without having to enter a username
    and password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mysql-enum.nse`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9: Connecting with the Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the interface for interacting with modules and executing exploits in
    Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`msfconsole`'
  prefs: []
  type: TYPE_NORMAL
- en: What are the main steps for exploiting a system with the Metasploit Framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The five steps to exploit a system with the Metasploit Framework are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Configuring the active exploit
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Verifying the exploit options
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Selecting a target
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Selecting the payload
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Launching the exploit
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the interface that uses the Metasploit Framework for the
    exchange of information between the clients and the Metasploit server instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The MSGRPC interface uses the `MessagePack` format for the exchange of information
    between the Metasploit Framework instance and the clients.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between `generic/shell_bind_tcp` and `generic/shell_reverse_tcp`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The difference between them is that with `generic/shell_bind_tcp`, the connection
    is established from the machine of the attacker to the machine of the victim,
    while with `generic/shell_reverse_tcp`, the connection is established from the
    machine of the victim, which requires the attacker's machine to have a program
    that is listening to detect that connection.
  prefs: []
  type: TYPE_NORMAL
- en: Which command can we execute to connect with `msfconsole`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./msfrpcd -U user -P password -p 55553 -n -f`'
  prefs: []
  type: TYPE_NORMAL
- en: In this way, Metasploit's RPC interface is listening on port `55553`.
  prefs: []
  type: TYPE_NORMAL
- en: Which function do we need to use to interact with the framework in the same
    way that we can do with the `msfconsole` utility?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use the `console.create` function and then use the console identifier returned
    by that function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`import msfrpc`'
  prefs: []
  type: TYPE_NORMAL
- en: '`client = msfrpc.Msfrpc({''uri'':''/msfrpc'', ''port'':''5553'', ''host'':''127.0.0.1'',
    ''ssl'': True})`'
  prefs: []
  type: TYPE_NORMAL
- en: '`client.call(''console.create'')`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the remote-access interface that uses the Metasploit Framework
    for the exchange of information between clients and the Metasploit server instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MSGRPC`'
  prefs: []
  type: TYPE_NORMAL
- en: How we can obtain a list of all exploits from the Metasploit server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To obtain the exploits, you can use the `**show exploits**` command once you
    are working on that tool.
  prefs: []
  type: TYPE_NORMAL
- en: Which modules in the Metasploit Framework obtain access to the application manager
    in Apache Tomcat and exploit the Apache Tomcat server to get a session meterpreter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Metasploit Framework, there is an auxiliary module named `tomcat_mgr_login`,
    which provides the attacker with a username and password to access the Tomcat
    Manager.
  prefs: []
  type: TYPE_NORMAL
- en: What is the the payload name that establishes a meterpreter session when the
    exploit is executed in the Tomcat server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`java/meterpreter/bind_tcp`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10: Interacting with the Vulnerabilities Scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the main mechanisms for scoring vulnerabilities, taking into account
    a set of standardized and easy-to-measure criteria?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Common Vulnerabilities Scoring System** (**CVSS**)'
  prefs: []
  type: TYPE_NORMAL
- en: Which package and class did we use to interact with Nessus from Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`from nessrest import ness6rest`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method in the `nessrest` module launches a scan in a specific target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scan = ness6rest.Scanner(url="https://nessusscanner:8834", login="username",
    password="password")`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method in the `nessrest` module gets the details of a scan in a specific
    target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `scan_details(self, name)` method fetches the details of the requested scan.
  prefs: []
  type: TYPE_NORMAL
- en: What is the main class for connecting from Python with the `nexpose` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To connect to Python with the `nexpose` server, we use the `NeXposeServer` class,
    which is inside the `pynexpose.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: What are the methods responsible for listing all detected vulnerabilities and
    returning the details of a particular vulnerability in the nexpose server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `vulnerability_listing()` and `vulnerability_details()` methods are responsible
    for listing all detected vulnerabilities and returning the details of a particular
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the Python module that allows us to parse and get the information
    obtained from the `nexpose` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BeautifulSoup`.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the Python module that allows us to connect to the `NexPose`
    vulnerability scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Pynexpose` module allows programmatic access from Python to the vulnerability
    scanner located on a web server.
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the Python module that allows us to connect to the `Nessus`
    vulnerability scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nessrest`.'
  prefs: []
  type: TYPE_NORMAL
- en: In what format does the `Nexpose` server return the responses to be processed
    from Python in a simple way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: XML.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11: Identifying Server Vulnerabilities in Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which type of vulnerability is an attack that injects malicious scripts into
    web pages to redirect users to fake websites or gather personal information?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cross-Site Scripting** (**XSS**) allows attackers to execute scripts in the
    victim''s browser, allowing them to hijack user sessions or redirect the user
    to a malicious site.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the technique where an attacker inserts SQL database commands into a
    data input field of an order form used by a web-based application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL injection is a technique that is used to steal data by taking advantage
    of a `nonvalidated` input vulnerability. Basically, it is a code injection technique
    where an attacker executes malicious SQL queries that control a web application’s
    database.
  prefs: []
  type: TYPE_NORMAL
- en: You want to prevent your browser from running JavaScript commands that are potentially
    harmful. What tool allows you to detect vulnerabilities in web applications related
    to JavaScript?
  prefs: []
  type: TYPE_NORMAL
- en: You can use `xssscrapy` to detect XSS vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What tool allows you to obtain data structures from websites?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Scrapy` is a framework for Python that allows you to perform web-scraping
    tasks and web-crawling processes and data analysis. It allows you to recursively
    scan the contents of a website and apply a set of rules on the content to extract
    information that may be useful to you.'
  prefs: []
  type: TYPE_NORMAL
- en: What tools allow you to detect SQL injection-type vulnerabilities in web applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Sqlmap` and `xsscrapy`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which profile of the w3af tool performs a scan to identify higher-risk vulnerabilities,
    such as SQL injection and XSS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `audit_high_risk` profile performs a scan to identify higher-risk vulnerabilities,
    such as SQL injection and XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Which is the main class in the w3af API that contains all the methods and properties
    needed to enable plugins, establish the objective of an attack, and manage profiles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the whole attack process, it is most important to manage the `w3afCore` class
    of the `core.controllers.w3afCore` module. An instance of that class contains
    all the methods and properties needed to enable plugins, establish the objective
    of an attack, manage profiles, and, above all, start, interrupt, and stop the
    attack process.
  prefs: []
  type: TYPE_NORMAL
- en: Which `slmap` option lists all the available databases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `dbs` option. Here''s an example of its use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`>>>sqlmap -u http://testphp.productweb.com/showproducts.php?cat=1 –dbs`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the Nmap script that allows scanning for the Heartbleed
    vulnerability in a server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ssl-heartbleed`'
  prefs: []
  type: TYPE_NORMAL
- en: Which process allows us to establish an SSL connection with a server, consisting
    of the exchange of symmetric and asymmetric keys to establish an encrypted connection
    between a client and server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HandShake` determines what cipher suite will be used to encrypt their communication,
    verify the server, and establish that a secure connection is in place before beginning
    the actual transfer of data.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12: Extracting Geolocation and Metadata from Documents, Images, and
    Browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which Python module allows us to retrieve geographic information from an IP
    address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygeoip` allows you to retrieve geographic information from an IP address.
    It is based on GeoIP databases, which are distributed in several files depending
    on their type (the types are `city`, `region`, `country`, `ISP`).'
  prefs: []
  type: TYPE_NORMAL
- en: Which module uses Google Geocoding API v3 services to retrieve the coordinates
    of a specific address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygeocoder` is a Python module that facilitates the use of Google''s geolocation
    functionality. With this module, you can easily find addresses corresponding to
    coordinates and vice versa. We can also use it to validate and format addresses.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the main class of the `pygeocoder` module that allows queries to be
    made both from the description of a place and from a specific location?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main class of this module is the `Geocoder` class, which allows queries
    to be made both from the description of a place and from a specific location.
  prefs: []
  type: TYPE_NORMAL
- en: Which method allows the reversal of a process to recover the address of a given
    site from the coordinates corresponding to latitude and longitude?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`results = Geocoder.reverse_geocode(results.latitude, results.longitude)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method within the `pygeoip` module allows us to obtain the value of the
    country name from the IP address passed by the parameter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`country_name_by_addr(<ip_address>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method within the `pygeoip` module allows us to obtain a structure in
    the form of a dictionary with the geographic data (country, city, area, latitude,
    longitude) from the IP address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`record_by_addr(<ip_address>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method within the `pygeoip` module allows us to obtain the name of the
    organization from the domain name?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`org_by_name(<domain_name>)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which Python module allows us to extract metadata from PDF documents?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PyPDF2`'
  prefs: []
  type: TYPE_NORMAL
- en: Which class and method can we use to obtain information from a PDF document?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `PyPDF2` module offers the ability to extract document information as well
    as encrypt and decrypt documents. To extract metadata, we can use the `PdfFileReader`
    class and the `getDocumentInfo()` method, which return a dictionary with the document
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Which module allows us to extract image information from tags in EXIF format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PIL.ExifTags` is used to obtain the EXIF tags information of an image; the
    `_getexif()` method of the image object can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13: Cryptography and Steganography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which algorithm type uses the same key for encrypting and decrypting data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Symmetric encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Which algorithm type uses two different keys, one for encryption and the other
    for decryption?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Public key algorithms use two different keys: one for encryption and the other
    for decryption. Users of this technology publish their public key, while keeping
    their private key secret. This enables anyone to send them a message encrypted
    with the public key, which only the holder of the private key can decrypt.'
  prefs: []
  type: TYPE_NORMAL
- en: Which package can we use in `pycrypto` to use an encryption algorithm such as
    AES?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`from Crypto.Cipher import AES`'
  prefs: []
  type: TYPE_NORMAL
- en: For which algorithm do we need to ensure that the data is a multiple of 16-bytes
    in length?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AES encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Which package for the cryptography module can we use for symmetric encryption?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `fernet` package is an implementation of symmetric encryption and guarantees
    that a message that is encrypted cannot be manipulated or read without the key.
    Here''s an example of its use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from cryptography.fernet import Fernet`'
  prefs: []
  type: TYPE_NORMAL
- en: Which algorithm is used to derive a cryptographic key from a password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Password-Based Key Derivation Function 2** (**PBKDF2**). For the cryptography
    module, we can use the package from `cryptography.hazmat.primitives.kdf.pbkdf2`
    import `PBKDF2HMAC`'
  prefs: []
  type: TYPE_NORMAL
- en: What provides the `fernet` package for symmetric encryption and which method
    is used to generate the key?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `fernet` package is an implementation of symmetric encryption and guarantees
    that a message encrypted cannot be manipulated or read without the key. To generate
    the key, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from cryptography.fernet import Fernet`'
  prefs: []
  type: TYPE_NORMAL
- en: '`key = Fernet.generate_key()`'
  prefs: []
  type: TYPE_NORMAL
- en: Which class provides the `ciphers` package symmetric encryption?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cryptography.hazmat.primitives.ciphers.Cipher`'
  prefs: []
  type: TYPE_NORMAL
- en: Which method from `stepic` generates an image with hidden data, starting with
    an existing image and arbitrary data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`encode(image,data)`'
  prefs: []
  type: TYPE_NORMAL
- en: Which package from `pycrypto` contains some hash functions that allow one-way
    encryption?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`from Crypto.Hash import [Hash Type]`'
  prefs: []
  type: TYPE_NORMAL
