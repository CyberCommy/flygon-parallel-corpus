- en: Chapter 2. Using HTML5 for Page Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first chapter of this book, we saw a compressed overview of the basic
    and foundational techniques for working in Dreamweaver CS6: working in a defined
    Dreamweaver site, building HTML5 pages, linking CSS stylesheet files, and constraining
    page content in a `<div>` container tag.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn to build web pages in Dreamweaver using HTML5
    container tags. These are the following four things we will accomplish by learning
    to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Building page layouts relying exclusively on HTML5 layouts will hone our skills
    at using these new tools for page design, and introduce HTML5 Code Hints in Dreamweaver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relying on *standardized* and *defined* HTML5 layout elements (as opposed to
    custom-defined, irregularly-implemented `div` tags) streamlines the page design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are actual, significant real-world scenarios where building pages relying
    exclusively on HTML5 layout elements is the best way to design pages (for example,
    when designing pages for iPhones or iPads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are functional advantages beyond design considerations for organizing
    page content in HTML5 layout elements. We will examine those advantages as we
    build HTML5 pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the course of building pages using just HTML5 layout elements, we'll explore
    all four advantages of relying on HTML5 listed previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'And here it is important to review, or at least reinforce the following two
    foundational techniques in building any professional-quality website in Dreamweaver:'
  prefs: []
  type: TYPE_NORMAL
- en: Do nothing without first defining a Dreamweaver site. Review [Chapter 1](ch01.html
    "Chapter 1. Creating Sites and Pages with Dreamweaver CS6"), *Creating Sites and
    Pages with Dreamweaver CS6*, if you are not currently working within a defined
    site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Secondly, and not quite so essential but still pretty foundational: We always
    work with *external* stylesheets. This allows the styles we define to be applied
    globally, across an entire website, and makes updating sites possible. As we begin
    to coordinate styling in the CSS Styles panel and constructing pages with HTML5
    elements, I''ll be reminding you, and when necessary, walking you through the
    steps required to make sure all styles are saved to an external stylesheet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this as a preview and cautionary reminder, let's dive in to creating pages
    with HTML5 layout elements.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring pages with HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a new approach and opened up new and intuitive techniques for
    organizing page content. Until the advent of HTML, we had tags that assigned heading
    levels (`H1`… `H6`), paragraph tags, list tags, and other elements that defined
    mainly how content would be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: When it came to organizing content into containers or boxes, we were left to
    our own devices. And so developers created their own sets of ID and class styles—ID
    styles that were used once per HTML file (like a wrapper style), and class styles
    that were used multiple times on a page (like a style that defined picture/caption
    boxes).
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML5 standardizes the elements used to organize content on a page. The key
    HTML5 structuring elements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<header>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<nav>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<article>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<section>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<aside>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<footer>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The names of these elements are pretty much self-explanatory. The `<header>`
    elements define header content at the top of a page, and `<footer>` elements define
    footer content. The `<nav>` element defines navigation content. The `<article>`
    tags define different articles or coherent blocks of content within a page, and
    larger or longer articles can be subdivided into sections. The `<aside>` elements
    define sidebar content that should be embedded within an `<article>` or a `<section>`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: There are other HTML5 elements that define content such as dates, times, and
    addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Structuring pages with HTML5 elements is referred to as *semantic markup* because
    these markup elements actually describe the type of content within the tag. Using
    HTML5 semantic markup accomplishes two things:'
  prefs: []
  type: TYPE_NORMAL
- en: For the developer, HTML5 elements eliminate the need to create a whole set of
    individually defined `<div>` tag styles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the user, the advantages of HTML5 elements essentially boil down to search
    engine optimization. By clearly delineating what the content is (a heading, a
    date, a navigation bar, an article, and so on), HTML5 elements help search engines
    identify your content and make it accessible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 structural elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's continue our exploration of building pages with HTML5 in Dreamweaver CS6\.
    Now, we'll walk through the steps involved in building a fairly complex HTML5
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to alert browsers that we are presenting HTML5 content, for
    that, we need to indicate at the top of our HTML5 code that this is an HTML5 page.
    As for those browsers that respond "Huh, what''s that?"—I''ll explain how to solve
    that challenge at the end of this chapter. But first, use the following steps
    to create a new HTML5 page from scratch:'
  prefs: []
  type: TYPE_NORMAL
- en: With your Dreamweaver site defined, choose **File** | **New**. In the **New
    Document** dialog, choose **Blank Page** from the category list on the left-hand
    side of the dialog. Choose **HTML** in the **Page Type** column. Choose **<none>**
    in the **Layout** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Layout CSS** pop up is set to **Create New File**. Remember, we'll be
    saving our styles to an external stylesheet. If you already have a CSS file to
    use with HTML layouts, you could choose **Link to Exiting File** instead, and
    select your existing HTML5-related CSS file as the styles file for your page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **DocType** pop up, choose **HTML 5** if that is not already selected,
    as shown in the following screenshot:![HTML5 structural elements](img/4742_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows a new HTML5 page being generated in the **New
    Document** dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create** to generate the blank page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A blank page appears in the **Design** view of the **Document** window. In
    the **Split** view, we can see that the following basic code has been generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Breaking down HTML5 page code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's quickly walk through this basic code to situate ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: The `<!DOCTYPE HTML>` and `<html>` tags are sort of evolutionary holdovers from
    previous versions of HTML, and not actually required for HTML5 browsers. This
    code might be useful when taking into account non-HTML5 browsers, as we will be
    examining shortly. By the way, the `<!DOCTYPE>` declaration for HTML5 is not case
    sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: And here's another intriguing thing about an HTML5 `<!DOCTYPE>` declarations.
    By telling browsers that we are structuring our content in HTML5, we are also
    telling older browsers to be less strict in enforcing rules, such as ending every
    paragraph element with `</p>`. Thus, we avoid annoying and unnecessary browser
    error messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to our generated code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<head>` and `</head>` tags demarcate the head content that is not displayed
    on the page, but serves as instructions to browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the content inside the `<head>` element identifies that the current,
    most widely applicable character set, **UTF-8**, is implemented. This character
    set allows the display of characters from a wide range of languages.
  prefs: []
  type: TYPE_NORMAL
- en: All of the content we create for the page will be placed within the `<body>`
    and `</body>` tags. For this reason, our first step in creating our CSS styles
    for this page, will be to define a couple of basic attributes for the `</body>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, save this page as an HTML file. Choose **File** | **Save**. In the
    **Save As** dialog, make sure the folder selected in the **Where** pop up is your
    Dreamweaver site folder (or a subfolder within that). Give the file a name, such
    as `html5_test`, and click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking down HTML5 page code](img/4742_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows how to save an HTML5 page.
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, enter a descriptive title in the **Title** box of the **Document**
    toolbar. Re-save periodically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking down HTML5 page code](img/4742_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows how to define a page title.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTML5 structure elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having set up our HTML5 document with basic web page coding, we're now ready
    to create and format the HTML5 layout elements that will define how the page looks.
  prefs: []
  type: TYPE_NORMAL
- en: A basic HTML5 page layout is illustrated in the following screenshot. It demonstrates
    a certain hierarchy to the page. All content is constrained (for size) within
    a traditional wrapper `div` tag. Within that, the page has a header, a footer,
    and `article` elements. The `section` elements are present within `article` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that the `nav` element (holding navigation content) can be used either
    inside another element (such as a header or footer) or outside any HTML5 semantic
    layout elements. And, note that an `aside` element can be used within either an
    `article` or a `section` element.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using HTML5 structure elements](img/4742_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows an HTML5 page layout.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Hints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I won't mince words, Dreamweaver CS6 pretty much eschews any WYSIWYG support
    for HTML5 page structuring. At this stage of the game, most of us use Dreamweaver's
    **Split** view anyway, and Dreamweaver's **Code** view (available as half the
    screen in the **Split** view) has helpful code-hinting for creating HTML5 page
    structure. As you begin typing HTML5 elements in the **Code** view, beginning
    with `<`, Dreamweaver prompts you with a set of tags that begin with the letter
    you type. So, for example, typing `<he` produces code hints from which you can
    click on **<>header** and press the *Enter* key (Windows) or the *Return* key
    (Mac) to place the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dreamweaver provides code hinting for HTML5 semantic layout elements, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Code Hints](img/4742_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To *close* (define the end of) an HTML5 layout element, simply type `</`. When
    you do that, Dreamweaver auto-enters the closing code for the open element.
  prefs: []
  type: TYPE_NORMAL
- en: As we walk through the coding involved in defining different HTML5 layout elements
    in the remainder of this chapter, you can enter the necessary code in the **Split**
    view, utilizing code hints, and seeing the results in the **Design** view of the
    **Split** view.
  prefs: []
  type: TYPE_NORMAL
- en: Adding header, nav, and hgroup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<header>` element is used to organize all the content that goes at the
    top of a page. Within the `<header>` element, you might well include the `<nav>`
    content as shown in the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: And, you will probably include standard (traditional) HTML tags such as headings
    and links.
  prefs: []
  type: TYPE_NORMAL
- en: So, the `<nav>` content—the links at the top of a page—are included in the `<header>`
    element when they are placed at the top of a page. Navigation elements placed
    in sidebars are also enclosed with the `<nav>` element, but since—in this case—they
    are not part of the header, they are not enclosed in the `<header>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Within a `<header>` element, CSS styles associated with tags (`<h1>`, `<h2>`,
    and so on), or with the class `<div>` tags can be used to supply additional formatting
    rules for how content will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: With the aim of making content within a header more easily categorized, HTML5
    includes the `<hgroup>` element. The formal requirement for the `<hgroup>` content
    is that it should include at least one heading tag (`<h1>`, `<h2>`, `<h3>`, `<h4>`,
    `<h5>`, or `<h6>`).
  prefs: []
  type: TYPE_NORMAL
- en: The concept is that the heading content such as subheadings, alternative titles,
    or taglines should all be grouped within a header for easy access. So, for example,
    in the next screenshot, the two heading lines have been wrapped in an `<hgroup>`
    element. But the navigation content, although part of the header, is not included
    in the `<hgroup>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, an `<h1>` heading and an `<h2>` heading, along with
    a `<nav>` element with its own `<h5>` heading (and three placeholder links), are
    all part of a `<header>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot illustrates how this looks in the **Split** view in
    Dreamweaver (with the **Live** view on in the **Design** view side of **Split**
    view).
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding header, nav, and hgroup](img/4742_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating articles and sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you write for a living, like I do, you learn to organize content into chunks
    and sub-chunks, concepts and sub-concepts, ideas and more detailed ideas, and
    so on. The basic rule for organizing content in this way is that if you create
    a sub-section, you have to create two subsections. Otherwise, there's no point
    in creating just one subsection.
  prefs: []
  type: TYPE_NORMAL
- en: In line with our recurring theme of unity between content and design in HTML5
    layout, the content in HTML5 pages, where it has to be broken down, is broken
    down into what are called **articles**. And, where there is a need for distinct
    subsections within an article, those subsections are **sections**.
  prefs: []
  type: TYPE_NORMAL
- en: As you create a CSS file to match your HTML layout elements, you might well
    assign specific formatting to articles and to sections. For example, you might
    choose to indent section content or place a unique background behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `<article>` and `<section>` elements in the preceding illustration,
    including the placeholder text and headings is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Or, you might choose *not* to apply specific CSS rules to articles and sections,
    and simply wrap the content in the `<article>` and `<section>` elements for content-organizing
    purposes while relying on the `<body>` tag, the `<p>` (paragraph) tag, or custom
    class styles that you define in Dreamweaver for formatting the article and section
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding aside content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside is reserved for sidebar content that is dependent on the content present
    in an article or section of an article. The `<aside>` element is not intended,
    for example, to serve as a container for navigation content (navigation content
    is supposed to be identified by and wrapped in the `<nav>` element discussed earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that aside content is generally formatted as a sidebar, there is a particular
    style generally associated with the use of `<aside>` elements: `Float`. The CSS
    `Float` attribute moves a container to the left-hand side (`float:left`) or to
    the right-hand side (`float:right`) of other content, and flows other content
    around the container. When we''ll define CSS styles for our HTML5 semantic layout
    elements at the end of this chapter, we''ll be sure to float our `<aside>` element
    style.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final piece of an HTML5 page layout is usually a `<footer>` element. As
    with all HTML5 layout elements, `<footer>` elements have content assignments.
    Footers usually include site content author information, legal notices (such as
    copyright information), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: An HTML5 layout template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code incorporates all the HTML5 semantic layout elements discussed
    so far. Feel free to copy and paste it into the **Code** side of Dreamweaver's
    **Split** view and use it to experiment with and familiarize yourself with HTML5
    page structuring.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, this code will provide a good basis to experiment with CSS styling for
    HTML5 elements—the next step in our journey:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code example includes one metadata element that we haven't explored yet—a
    `<figure>` element. I figured I'd throw it into the code so as to keep things
    organized and simple, but let's now move on to exploring this and other HTML5
    metadata elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HTML5 layout elements we''ve explored thus far have—as we have seen—a dual
    function: They serve as styleable elements that can control how content is displayed,
    and they organize content for accessibility. These HTML5 elements can be thought
    of as metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: Both the style and content dimensions of HTML5 layout elements are evolving,
    but already they serve as tools for designing pages and for delivering content.
    The example we explored earlier of being able to easily select an article or an
    article section for copying on an iPhone gives a taste of how this is likely to
    evolve in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the key layout elements explored so far, it is worth briefly
    noting a few HTML5 elements whose main role it is to index content (even though
    they can be used to apply styles as well).
  prefs: []
  type: TYPE_NORMAL
- en: Defining an address
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, one of the first things a visitor to a site seeks is, contact information
    such as a URL (if the page is not a site's home page), an e-mail address, or a
    physical address if he or she is looking to locate the hottest underground club
    or the nearest highly-rated shish-kabob stand.
  prefs: []
  type: TYPE_NORMAL
- en: An `<address>` element can be placed within any other HTML5 semantic layout
    element such as an `<article>` element if it is providing contact information
    for the author of (or topic of) the article. Or, an `<address>` element can be
    associated with (placed within) a `<footer>` element if it is providing contact
    information for the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: Figures and captions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<figure>` and `<figcaption>` elements identify a figure, and an associated
    caption intuitively enough. Again, assigning these elements to content helps content
    aggregators and indexing programs (such as search engines) interpret your page
    content and make it more accessible. And, you can use these elements to style
    figures and/or captions as well.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `<figure>` element can be wrapped around both an image and a
    caption (`<figcaption>`).
  prefs: []
  type: TYPE_NORMAL
- en: Indicating date and time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Speaking of using HTML5 elements to convey content, there are different HTML5
    elements associated with different kinds of time and date information.
  prefs: []
  type: TYPE_NORMAL
- en: The `<time>` element is used to mark off times and dates for upcoming events.
    It is not intended to define every reference to a date and time. You would not,
    for example, use the `<time>` element when citing dates for different historical
    events while writing an historical article.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<time>` element can be used to set off a specific time, as in the following
    HTML5 code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, date and time information can be encoded within text using the `datetime`
    parameter, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The format for time and date is: `YYYY-MM-DDThh:mm:ssTZD`, where `TZD` is the
    time zone.'
  prefs: []
  type: TYPE_NORMAL
- en: You are unlikely to use the `<time>` element as a styling tool. Instead, it
    is best used to demarcate dates and times.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CSS file for HTML5 page structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hand-in-hand with our HTML5 file, designers create and use a CSS file to organize
    and manage all the styling in the page. So, let's create that CSS file now, and
    as we do, add a line that will make our HTML5 page compatible with all current
    browsers and most older ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New**, and in the **New Document** dialog, choose the
    **Blank Page** category on the left-hand side, and **CSS** from the **Page Type**
    category. Click on **Create** to generate and open a new CSS file.![Creating a
    CSS file for HTML5 page structure](img/4742_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows the generation of a new CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: The file opens in **Code** view. We'll be editing it in the **CSS Styles** panel,
    so—except as a learning experience—we won't need to view this page again. But
    we do need to save it. Navigate to **File** | **Save**, and give the file a name
    such as `html5_layout.css`. Make sure the site folder is selected in the **Where**
    pop up, and click on **Save**, as shown in the following screenshot:![Creating
    a CSS file for HTML5 page structure](img/4742_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot displays saving a CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: In the tab bar at the top of the document window, toggle back to the HTML file
    you created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the **CSS Styles** panel (if it is not visible, navigate to **Window**
    | **CSS Styles**), and click on the **Attach Style Sheet** icon as shown in the
    following screenshot:![Creating a CSS file for HTML5 page structure](img/4742_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Attach External Style Sheet** dialog appears. Use the **Browse** button
    to navigate to the CSS file you just created, and click on **OK** to attach the
    stylesheet. The CSS file appears in the **CSS Files** panel (use the **All** tab
    in the **CSS Styles** panel as the norm, unless you are doing some detective work
    on particular styles, which may require the **Current** tab). You will also see
    the link to the CSS file in the **Code** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assigning a block property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will add a single attribute that enables most browsers to interpret
    the HTML5 elements even if they are not HTML5 compliant. Here, we'll be revisiting
    the technique we noted in the previous chapter where we saw how Dreamweaver CS6's
    HTML5 layouts use the `display:block` CSS attribute to keep HTML5 layouts from
    collapsing in non-HTML5 browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel—it
    is just to the right-hand side of the **Attach Style Sheet** icon identified in
    the previous figure. The **New CSS Rule** dialog appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New CSS Rule** dialog, choose **Compound** from the first pop up. We
    are creating a rule that will apply to more than one HTML5 layout element. These
    are HTML5 tags that we want to prevent from collapsing when viewed in non-HTML5
    browsers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Choose or Enter a Name for Your Selector** field, enter `header`. We
    actually want to apply the rule we're working on to additional HTML5 elements,
    but we'll add those shortly. In the **Rule Definition** section of the dialog,
    make sure your attached CSS file is selected (it will be by default). Click on
    **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **CSS Rule Definition for Header** dialog, select the **Block** category,
    choose **Block** from the **Display** pop up as shown in the following screenshot,
    and then click on **OK**:![Assigning a block property](img/4742_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot displays the process of defining a block display.
  prefs: []
  type: TYPE_NORMAL
- en: The `header` style appears in the **CSS Styles** panel when you expand the CSS
    styles file linked to the page. You can see that the **display** property for
    the header style has a **block** attribute associated with it in the **CSS Styles**
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to expand the list of HTML5 elements to which this `display:block` attribute
    is assigned. The long, slow way to do that is to duplicate steps we've traversed
    so far for each additional element. To do that the quick and easy way, click once
    in the header row in the top half of the **CSS Styles** panel, and edit the list
    of elements to include the `<address>`, `<article>`, `<footer>`, `<nav>`, and
    `<section>` elements. Use commas (",") to separate the additional elements as
    you type them in. These are HTML5 tags that we want to prevent from collapsing
    when viewed in non-HTML5 browsers. The **CSS Styles** panel should now look like
    the the following screenshot:![Assigning a block property](img/4742_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows the process of assigning a block display to multiple
    HTML5 semantic layout tags.
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding set of steps, we've told most non-HTML5 browsers to keep
    our basic HTML5 building-block elements on their own distinct horizontal row,
    so they don't get smushed into each other.
  prefs: []
  type: TYPE_NORMAL
- en: Defining styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I won't bore you here by rehearsing the basic techniques for defining styles
    within a linked stylesheet in Dreamweaver CS6\. We walked through this in a compressed
    way, for review, in [Chapter 1](ch01.html "Chapter 1. Creating Sites and Pages
    with Dreamweaver CS6"), *Creating Sites and Pages with Dreamweaver CS6*, and we
    defined one (compound) style in our linked CSS file in the previous set of steps.
  prefs: []
  type: TYPE_NORMAL
- en: To quickly review, new CSS style definitions are added to the linked stylesheet
    by clicking on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel.
    All the styles we'll create are tag-type styles, applying as they do to HTML5
    semantic elements (tags).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define the following styles in that manner using the **CSS Styles**
    panel. Or, you can enter (or copy) the following code into your CSS stylesheet
    after the compound style we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A few notes on the CSS we created: We''re using very minimalist background
    and text colors (shades of gray plus white and black) both to make a minimalist
    aesthetic statement and to keep our project simple.'
  prefs: []
  type: TYPE_NORMAL
- en: The `float` attribute on the `<aside>` element aligns the aside (sidebar) box
    with the right-hand side of the page, flowing content around it to the right-hand
    side. The extra padding and margin enforce spacing both, between the aside content
    and the border of the box, and between the box itself and the content that flows
    around it.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the `float` and `margin` attributes assigned to the `<figure>` element
    align the box that will hold images and captions with the right-hand side of the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the `margin` to zero for the article sections keeps that content from
    indenting further beyond the indent inherited from the margin assigned to the
    `<article>` and `<section>` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Solving HTML5 compatibility challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, HTML5 is a work in progress. What does that
    mean? In historic terms, it means the standards for HTML5 are still being systematized,
    although a critical mass has been reached where the meaning and effect of most
    HTML5 terms is widely agreed upon, and browsers either support HTML5, or they
    are evolving in that direction in finite terms.
  prefs: []
  type: TYPE_NORMAL
- en: For developers, it means that as we explore the time- and stress-saving features
    of HTML5 to build web pages, we have to be aware of, and compensate for the fact
    that some browsers will not support some aspects of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: In the main, that means supporting the stubbornly-entrenched Internet Explorer
    community, particularly older versions of IE whose users have been abandoned by
    Microsoft, which does not provide upgrade options for most of those users.
  prefs: []
  type: TYPE_NORMAL
- en: In order to not leave these users locked out of HTML5 pages, developers have
    adopted the HTML5 Shiv script and the designer's link to it. That JavaScript allows
    IE8 to recognize HTML5 semantic structure tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the HTML5 Shiv JavaScript to pages, insert the following code in the
    `<head>` element of your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored using HTML5 semantic layout elements to build pages
    in Dreamweaver. We saw how these elements function as both design containers,
    and as content identifiers. We also saw how, for some environments, an entire
    page can be built using only a few basic HTML tags plus HTML layout elements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore Dreamweaver CS6's powerful tools for generating
    validated forms.
  prefs: []
  type: TYPE_NORMAL
