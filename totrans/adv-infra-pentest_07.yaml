- en: Metasploit and PowerShell for Post-Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, you learned the power of **PowerShell** as an attacking
    platform. It was just the beginning. Now it is time to feel the real power of
    it as a perfect tool for performing sophisticated attacks, and also, we will discover
    how to use it side-by-side with the **Metasploit Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell essentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell payload modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nishang PowerShell for penetration testing and offensive security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dissecting Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit Framework is the most well-known open source exploitation tool.
    It was developed at first in Perl by HD Moore, but later, it was shifted into
    Ruby. This framework is loaded with many useful features for hackers and penetration
    testers. To install Metasploit Framework, visit [https://www.rapid7.com/products/metasploit/download/](https://www.rapid7.com/products/metasploit/download/)
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose your plan, register, and select your operating system. In this demonstration,
    I am using the Windows 64-bit trial version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will receive an email with the trial activation key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now install it on your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Voila! You can start your exploitation journey:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Metasploit architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit architecture is composed of many important components. To fully
    use the power of Metasploit, many components are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools**: This is a set of useful utilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: These are loadable extensions at runtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Libraries**: These are useful Ruby libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces**: These give users the ability to access Metasploit in different
    ways (CLI and web for instance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: These are components that perform specific tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This diagram illustrates the architecture of Metasploit framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many modules used by the Metasploit Framework. If you are using the
    Metasploit Framework in the Kali Linux Distribution, you can list these modules.
    Navigate to `/usr/share/metasploit-framework/modules` and use the `ls` command
    to explore them, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed during our journey, exploitation is a major step in hacking.
    In fact, Metasploit gives hackers and security professionals  a great exploitation
    power in their hands, thanks to the loaded exploits. This phase will not only
    minimize the false-positive rates of vulnerability tools and scanners by finding
    real proofs of exploiting vulnerabilities, but it will also lead to post-exploitation.
    There are three types of exploits in the wild:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-side exploits**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client-side exploits**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local-privilege escalation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Payloads are exploit modules. There are two payload categories: `staged`. Inline
    payloads (or single payloads) are all inclusive and self-contained. Staged payloads
    contain multiple pieces of the payload, referred to as **stagers**. In other words,
    the full payload is composed by stagers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit is loaded with various types of payloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bind shells**: These just listen for hackers to connect to or send instructions.
    They are a good choice if the victim is directly connected with the machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse shells**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Listeners**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stages**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Meterpreters**: They are a specialized command environment. They work entirely
    within the memory used by an exploited process. You can use many meterpreter commands
    for post-exploitation, such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sysinfo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getsystem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getuid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kill`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a penetration tester, meterpreters will give you a lot of other handy commands,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ifconfig`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`route`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portfwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcam_list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcam_snap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`record_mic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screenshot`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`idletime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uictl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paranoid Meterpreter payloads**: These use signed  SSL/TLS certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stageless Meterpreter payloads**:These contain all that is required to get
    a session running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auxiliaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Auxiliaries perform various tasks, including scanning, DNS interrogation, and
    more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auxillary/scanner/portscan/tcp`: Connect scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary/scanner/portscan/syn`: Half-open SYN stealth scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary/scanner/discovery/udp_sweep`: UDP sweep'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Encoders are used to evade detection, because generating a payload with Metasploit
    and using it directly is not a wise decision, as it will be detectable by most
    anti-malware programs. Thus, encoders can be used to encode a payload thanks to
    many available encoders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: NOPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NOP** is the abbreviation of **No Operation** in assembly code. It assures
    that any unused space is still valid for the processor executions with no effects.
    In Metasploit, they are used to keep the payload sizes consistent.'
  prefs: []
  type: TYPE_NORMAL
- en: Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Posts are used in post-exploitation (after successfully exploiting the system).
    You can find the post-exploitation modules in `/usr/share/metasploit-framework/modules/post`,
    or  you can just type  `show post` in the Metasploit console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To know more about a post, use the `info` command. For example, if you want
    to learn more about the `golden_ticket`  post module, just type `info post/windows/escalate/golden_ticket`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This amazing tool also  gives you the freedom to load your own modules using
    the `loadpath` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Starting Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start Metasploit, you need to open the shell and type `msfconsole`. The following
    screenshot represents the console mode (`msfconsole`) of Metasploit. As discussed,
    Metasploit has other interfaces, such as `msfcli` (it's like `msfconsole`, but
    not interactive), `msfgui` (the graphic version), and `armitage` (a powerful GUI
    interface).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is of `msfcli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit commands are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`help`: Gives information about how to use a feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show payloads`: Lists available payloads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show exploits`: Lists available exploits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show options`: Lists the required options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfupdate`: Updates Metasploit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use`: Uses a module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`: A search function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit`: Launches the exploit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before diving into Metasploit''s powerful commands, let''s check the Metasploit
    Framework components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msfpayload`: The script that you want to run on the target machine after the
    exploitation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfencode`: An amazing utility for avoiding the detection of the payload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfvenom`: This is like a combination of the two previous utilities. It''s
    a new feature in Metasploit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can check the available payload formats by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For  example, if you want to generate a Windows payload, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bypassing antivirus with the Veil-Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a penetration tester, always remember that you are simulating real-world
    attacks, and in the real world, hackers are trying to bypass antivirus protection
    using many techniques. The **Veil-Framework** is a fantastic tool for avoiding
    payload detection. To install Veil 3.0, you need to download it from its official
    GitHub source at [https://github.com/Veil-Framework/Veil](https://github.com/Veil-Framework/Veil):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you just need to select a task from an assisted main menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00215.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To generate a payload, select `list`, and type `use 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00216.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'To list all the available payloads, use `list` as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00217.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your payload using the `use` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00218.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter `generate` to create the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00219.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Complete the options, and you will generate an undetectable payload, as simple
    as that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00220.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also do an Nmap scan using Metasploit, exporting the results and importing
    them later from the database (Metasploit uses the PostgreSQL database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit is an incredible tool. Thus, it gives pentesters a huge number of
    capabilities; one of them is the ability to export results to databases like PostgreSQL.
    If you''ve already installed PostgreSQL, you can verify the connection between
    Metasploit and the database using Metasploit''s `db_connect` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Metasploit eases searching for a huge number of exploits by adding the `searchsploit`
    utility. You can add up to three search terms.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, `# searchsploit local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Writing your own Metasploit module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, a white hat hacker should know how to write their own
    tools and scripts. So, let's see how to create a simple Metasploit module. In
    this demonstration, we'll use Ruby as a programming language, and we'll build
    a TCP scanner.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a Ruby file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the response, create a text file named `server.txt`, and set up a netcat
    listener. Now, save it at `usr/share/metasploit-framework/modules/auxiliary/scanner`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Metasploit, and type `use scanner/TCPScanner`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can report the results by including `include Msf::Auxiliary::Report`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, you can use this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Metasploit Persistence scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Persistence is a major need in every successful hacking attack. Metasploit
    Framework comes with two major Persistence scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**S4U Persistence (Scheduled Persistence)**: to use it type `use exploit/windows/local/s4u_persistence`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Volume Shadow Copy Service Persistence (VSS Persistence)**: to use it, type
    `use exploit/windows/local/vss_persistence `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some additional options for Persistence:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Metasploit Service**, (or** Metsvc**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VNCInject**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use Windows binaries. To locate these binaries, go to `/usr/share/windows-binaries
    path`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Weaponized PowerShell with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we witnessed the power of PowerShell and its potential.
    It was just the beginning; now, we are ready to leverage its power to the next
    level. Combining the flexibility of Metasploit and PowerShell is a great opportunity
    to perform more customized attacks and security tests.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PowerShell attacks are already integrated into Metasploit. You can check by
    using the `search` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In [Chapter 4](part0202.html#60KHK0-ccc418ef6725406983cf4586f3600cdf), *Active
    Directory Exploitation*, you learned how to perform some tasks using PowerShell.
    Now it is time to learn how to use Metasploit with PowerShell. For a demonstration
    of one of the many uses, you can convert a PowerShell script into an executable
    file using the `msfvenom` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: PowerSploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PowerSploit is an amazing set of PowerShell scripts used by information security
    professionals, and especially penetration testers. To download PowerSploit, you
    need to grab it from its official GitHub repository, [https://github.com/PowerShellMafia/PowerSploit](https://github.com/PowerShellMafia/PowerSploit):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After cloning the project, use the `ls` command to list the files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the following screenshot, you can note that PowerSploit contains a lot
    of amazing scripts for performing a number of tasks, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AntivirusBypass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exfiltration`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``Persistence``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PowerSploit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PowerUp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PowerView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Nishang – PowerShell for penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nishang is a great collection of tools used to perform many tasks during all
    the penetration testing phases. You can get it from [https://github.com/samratashok/nishang](https://github.com/samratashok/nishang):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from listing the downloaded project, Nishang is loaded with
    many various scripts and utilities for performing a lot of required tasks during
    penetration testing missions, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Privilege escalation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scanning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pivoting  **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can explore all the available scripts by listing the content of Nishang
    project using the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s explore some of Nishang''s script power on a Windows machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can import all the modules using the `Import-Module` PowerShell cmdlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Oops, something went wrong! Don''t worry, in order to use the `Import-Module`,
    you need to open PowerShell as an administrator, and type ` Set-ExecutionPolicy
    -ExecutionPolicy RemoteSigned`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then you can import the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you want, for example, to use the `Get-Information` module, you just
    need to type `Get-Information`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want  to unveil WLAN keys, type `Get-WLAN-Keys`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can go further and dump password hashes from a target machine in a post-exploitation
    mission. Thanks to the `Get-PassHashes` module, you are able to dump password
    hashes. This is the output of it from my local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if you want to pop the command after getting a shell, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even perform a phishing attack using `Invoke-CredentialPhish`, like
    in the previous demonstration. You can run this attack on the victim''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Defending against PowerShell attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we went through various techniques for attacking
    machines using Metasploit and PowerShell. Now it is time to learn how to defend
    against and mitigate PowerShell attacks. In order to protect against PowerShell
    attacks, you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the latest PowerShell version (version 5, when this book was written).
    To check, type `Get-Host`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Monitor PowerShell logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure a least-privilege policy and group policies settings. You can edit them
    with the Local Group Policy Editor. If you are using the Windows 10 Enterprise
    edition, you can also use `AppLocker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the Constrained Language mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the Constrained Language mode, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'That way, malicious scripts won''t work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use Metasploit and PowerShell side by side
    to penetrate the infrastructure and leverage your attacks to the next level, starting
    from reconnaissance, to maintaining access and persistence. We studied the two
    weapons of architecture and operations. The next chapter will be a new experience,
    when you will learn how to exploit enterprise VLANS, and go from theory to real-world
    experience.
  prefs: []
  type: TYPE_NORMAL
