- en: Error Handling in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is important for even the most basic Go program. Errors in Go
    implement the `Error` interface and must be dealt with at every layer of the code.
    Go errors do not work like exceptions, and unhandled errors can cause enormous
    problems. You should strive to handle and consider errors whenever they occur.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also covers logging since it's common to log whenever an actual
    error occurs. We'll also investigate wrapping errors, so that the given error
    should provide an additional context as it's returned up the function stack, so
    that it's easier to determine the actual cause of certain errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors and the Error interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the pkg/errors package and wrapping errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the log package and understanding when to log errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structured logging with the apex and logrus packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging with the context package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using package-level global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching panics for long-running processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6, or later, on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal/console application; create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All code will be run and modified
    from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and,
    optionally, work from that directory, rather than typing in the examples manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Handling errors and the Error interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Error` interface is a pretty small and simple interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This interface is elegant because it's simple to make anything in order to satisfy
    it. Unfortunately, this also creates confusion for packages that need to take
    certain actions depending on the error received.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to create errors in Go; this recipe will explore
    the creation of basic errors, errors that have assigned values or types, and a
    custom error using a structure.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/basicerrors`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/basicerrors`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `basicerrors.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `custom.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you use `errors.New`, `fmt.Errorf`, or a custom error, the most important
    thing to remember is that you should never leave errors unhandled in your code.
    These different methods of defining errors give a lot of flexibility. You can,
    for example, put extra functions in your structure to further interrogate an error
    and cast the interface to your error type in the calling function to get some
    added functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The interface itself is very simple and the only requirement is that you return
    a valid string. Connecting this to a structure can be useful for some high-level
    applications that have consistent error handling throughout, but want to work
    nicely with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using the pkg/errors package and wrapping errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `errors` package located in `github.com/pkg/errors` is a drop-in replacement
    for the standard Go `errors` package. Additionally, it provides some very useful
    functionality for wrapping and handling errors. The typed and declared errors
    in the preceding recipe are a good example—they can be useful to add additional
    information to an error, but wrapping it in the standard way will change its type
    and break the type assertion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This recipe will demonstrate how to use the `pkg/errors` package to add annotation
    to errors throughout your code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/errwrap`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/errwrap`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `errwrap.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `unwrap.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file should be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pkg/errors` package is a very useful tool. It makes sense to wrap every
    returned error using this package to provide extra context in logging and error
    debugging. It''s flexible enough to print the entire stack traces when an error
    occurs or to just add a prefix to your errors when printing them. It can also
    clean up code, since a wrapped nil returns a `nil` value; for example, consider
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In some cases, this can save you from having to check whether an error is `nil`
    first, before simply returning it. This recipe demonstrates how to use the package
    to wrap and unwrap errors, as well as basic stack trace functionality. The documentation
    for the package also provides some other useful examples such as printing partial
    stacks. Dave Cheney, the author of this library, has also written a number of
    helpful blogs and given talks on the subject; you can go to [https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)
    to find out more.
  prefs: []
  type: TYPE_NORMAL
- en: Using the log package and understanding when to log errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging should typically occur when an error is the final result. In other words,
    it's useful to log when something exceptional or unexpected occurs. It might also
    be appropriate, if you use a log that provides log levels, to sprinkle debug or
    info statements at key parts of your code to quickly debug issues during development.
    Too much logging will make it difficult to find anything useful, but not enough
    logging can result in broken systems with no insight into the root cause. This
    recipe will demonstrate the use of the default Go `log` package and some useful
    options, and also showcase when a log should likely occur.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/log`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/log`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `error.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can either initialize a logger and pass it around using `log.NewLogger()`,
    or use the `log` package level logger to log messages. The `log.go` file in this
    recipe does the former and `error.go` does the latter. It also shows when logging
    might make sense after an error has reached its final destination; otherwise,
    it's likely that you'll log multiple times for one event.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few issues with this approach. First, you may have additional context
    in one of the intermediate functions, such as the variables you'd like to log.
    Second, logging a bunch of variables can get messy, making it confusing and difficult
    to read. The next recipe explores structured logging that provides flexibility
    in logging variables, and, in a later recipe, we will explore implementing a global
    package-level logger as well.
  prefs: []
  type: TYPE_NORMAL
- en: Structured logging with the apex and logrus packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary reason to log information is to examine the state of the system
    when events occur or have occurred in the past. Basic log messages are tricky
    to comb over when you have a large number of microservices that are logging.
  prefs: []
  type: TYPE_NORMAL
- en: There's a variety of third-party packages for combing over logs if you can get
    the logs into a data format they understand. These packages provide indexing functionality,
    searchability, and more. The `sirupsen/logrus` and `apex/log` packages provide
    a way to do structured logging where you can log a number of fields that can be
    reformatted to fit these third-party log readers. For example, it's simple to
    emit logs in JSON format to be parsed by a variety of services.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/structured`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/structured`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `logrus.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `apex.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file should be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sirupsen/logrus` and `apex/log` packages are both excellent structured
    loggers. Both provide hooks for either emitting to multiple events or to add extra
    fields to a log entry. It would be relatively simple, for example, to use the
    `logrus` hook or the `apex` custom handler to add line numbers to all of your
    logs, as well as service names. Another use for a hook might include `traceID`, in
    order to trace a request across different services.
  prefs: []
  type: TYPE_NORMAL
- en: While `logrus` splits the hook and the formatter, `apex` combines them. In addition
    to this, `apex` adds some convenience functions such as `WithError` to add an
    `error` field as well as tracing, both of which are demonstrated in this recipe.
    It's also relatively simple to adapt hooks from `logrus` to the `apex` handlers.
    For both solutions, it would be a simple change to convert to JSON formatting,
    instead of ANSI-colored text.
  prefs: []
  type: TYPE_NORMAL
- en: Logging with the context package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate a way to pass log fields between various functions.
    The Go `pkg/context` package is an excellent way to pass additional variables
    and cancellations between functions. This recipe will explore using this functionality
    to distribute variables between functions for logging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: This style can be adapted to `logrus` or `apex` from the previous recipe. We'll
    use `apex` for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/context`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/context`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `collect.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `context` package now appears in a variety of packages, including the database
    and HTTP packages. This recipe will allow you to attach log fields to a context
    and use them for logging purposes. The idea is that separate methods can attach
    more fields to a context as it is passed around, and then the final call site
    can perform logging and aggregate variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe mimics the `WithField` and `WithFields` methods found in the logging
    packages in the previous recipe. These modify a single value stored in the context
    and also provide the other benefits of using a context: cancellation, timeouts,
    and thread safety.'
  prefs: []
  type: TYPE_NORMAL
- en: Using package-level global variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `apex` and `logrus` packages in the earlier examples both used a package-level
    global variable. Sometimes, it's useful to structure your libraries to support
    both structures with a variety of methods and top-level functions so that you
    can use them directly without passing them around.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also demonstrates using `sync.Once` to ensure that the global logger
    will only be initialized once. It can also be bypassed by the `Set` method. The
    recipe only exports `WithField` and `Debug`, but you can imagine exporting every
    method attached to a `log` object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/global`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/global`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `global.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `log.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file gets updated and the `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common pattern for these `global` package-level objects is to keep the `global` variable
    unexported and expose only the desired functionality through methods. Typically,
    you could also include a method to return a copy of the `global` logger for packages
    that want a `logger` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `sync.Once` type is a newly introduced structure. This structure, in conjunction
    with the `Do` method, will only execute in the code once. We use this in our initialization
    code, and the `Init` function will throw an error if `Init` is called more than
    once. We use a custom `Init` function instead of the built-in `init()` function,
    if we want to pass in parameters to our `global` log.
  prefs: []
  type: TYPE_NORMAL
- en: Although this example uses a log, you can also imagine cases where this might
    be useful with a database connection, data streams, and a number of other use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Catching panics for long-running processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When implementing long-running processes, it's possible that certain code paths
    will result in a panic. This is usually common for things such as uninitialized
    maps and pointers, as well as division by zero problems in the case of poorly
    validated user input.
  prefs: []
  type: TYPE_NORMAL
- en: Having a program crash completely in these cases is frequently much worse than
    the panic itself, and so it can be helpful to catch and handle panics.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal/console application, create a new directory called `~/projects/go-programming-cookbook/chapter4/panic`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter4/panic`,
    or use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `panic.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, then go up one directory and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is a very basic example of how to catch panics. You can imagine
    with more complex middleware how you can defer a recover and catch it after running
    many nested functions. Within the recover, you can, essentially, do anything you
    want, although emitting a log is common.
  prefs: []
  type: TYPE_NORMAL
- en: In most web applications, it's common to catch panics and emit an `http.InternalServerError`
    message when a panic occurs.
  prefs: []
  type: TYPE_NORMAL
