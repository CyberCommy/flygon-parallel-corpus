- en: I/O and Filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go provides excellent support for both basic and complex I/O. The recipes in
    this chapter will explore common Go interfaces that are used to deal with I/O
    and show you how to make use of them. The Go standard library frequently uses
    these interfaces, and they will be used by recipes throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: You'll learn how to work with data in memory and in the form of streams. You'll
    see examples of working with files, directories, and the CSV format. The temporary
    files recipe looks at a mechanism to work with files without the overhead of dealing
    with name collision and more. Lastly, we'll explore Go standard templates for
    both plain text and HTML.
  prefs: []
  type: TYPE_NORMAL
- en: These recipes should lay the foundation for the use of interfaces to represent
    and modify data, and should help you think about data in an abstract and flexible
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the common I/O interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the bytes and strings packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with directories and files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the CSV format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with temporary files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with text/template and html/template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application and create and navigate to a project
    directory, such as `~/projects/go-programming-cookbook`. All code will be run
    and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`, as
    shown in the following code. It is recommended that you work from that directory
    rather than typing the examples manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using the common I/O interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go language provides a number of I/O interfaces that are used throughout
    the standard library. It is best practice to make use of these interfaces wherever
    possible rather than passing structures or other types directly. Two powerful
    interfaces we will explore in this recipe are the `io.Reader` and `io.Writer`
    interfaces. These interfaces are used throughout the standard library, and understanding
    how to use them will make you a better Go developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Reader` and `Writer` interfaces look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Go also makes it easy to combine interfaces. For example, take a look at the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe will also explore an `io` function called `Pipe()`, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The remainder of this book will make use of these interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/interfaces`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter1/interfaces` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `interfaces.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `pipes.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Copy()` function copies bytes between interfaces and treats that data like
    a stream. Thinking of data as streams has a lot of practical uses, especially
    when working with network traffic or filesystems. The `Copy()` function also creates
    a `MultiWriter` interface that combines two writer streams and writes to them
    twice using `ReadSeeker`. If a `Reader` interface was used instead, rather than
    seeing `exampleexample`, you would only see `example` despite copying to the `MultiWriter`
    interface twice. You can also use a buffered write if your stream is not fitted
    into the memory.
  prefs: []
  type: TYPE_NORMAL
- en: The `PipeReader` and `PipeWriter` structures implement the `io.Reader` and `io.Writer`
    interfaces. They're connected, creating an in-memory pipe. The primary purpose
    of a pipe is to read from a stream while simultaneously writing from the same
    stream to a different source. In essence, it combines the two streams into a pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Go interfaces are a clean abstraction to wrap data that performs common operations.
    This is made apparent when doing I/O operations, and so the `io` package is a
    great resource for learning about interface composition. The `pipe` package is
    often underused, but provides great flexibility with thread safety when linking
    input and output streams.
  prefs: []
  type: TYPE_NORMAL
- en: Using the bytes and strings packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `bytes` and `strings` packages have a number of useful helpers to work with
    and convert the data from string to byte types, and vice versa. They allow the
    creation of buffers that work with a number of common I/O interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/bytestrings`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/bytestrings` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `buffer.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `bytes.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `string.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `bytes` library provides a number of convenience functions when working
    with data. A buffer, for example, is far more flexible than an array of bytes
    when working with stream-processing libraries or methods. Once you've created
    a buffer, it can be used to satisfy an `io.Reader` interface so that you can take
    advantage of `ioutil` functions to manipulate the data. For streaming applications,
    you'd probably want to use a buffer and a scanner. The `bufio` package comes in
    handy for these cases. Sometimes, using an array or slice is more appropriate
    for smaller datasets or when you have a lot of memory on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Go provides a lot of flexibility in converting data between interfaces when
    using these basic types—it's relatively simple to convert between strings and
    bytes. When working with strings, the `strings` package provides a number of convenience
    functions to work with, search, and manipulate strings. In some cases, a good
    regular expression may be appropriate, but most of the time, the `strings` and
    `strconv` packages are sufficient. The `strings` package allows you to make a
    string look like a title, split it into an array, or trim whitespace. It also
    provides a `Reader` interface of its own that can be used instead of the `bytes`
    package reader type.
  prefs: []
  type: TYPE_NORMAL
- en: Working with directories and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with directories and files can be difficult when you switch between
    platforms (Windows and Linux, for example). Go provides cross-platform support
    to work with files and directories in the `os` and `ioutils` packages. We've already
    seen examples of `ioutils`, but now we'll explore how to use them in another way!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/filedirs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter1/filedirs` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `dirs.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `files.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're familiar with files in Unix, the Go `os` library should feel very
    familiar. You can perform basically all common operations—`Stat` a file to collect
    attributes, collect a file with different permissions, and create and modify directories
    and files. In this recipe, we performed a number of manipulations to directories
    and files and then cleaned up after ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Working with file objects is very similar to working with in-memory streams.
    Files also provide a number of convenience functions directly, such as `Chown`,
    `Stat`, and `Truncate`. The easiest way to get comfortable with files is to make
    use of them. In all the previous recipes, we have to be careful to clean up after
    our programs.
  prefs: []
  type: TYPE_NORMAL
- en: Working with files is a very common operation when building backend applications.
    Files can be used for configuration, secret keys, as temporary storage, and more.
    Go wraps OS system calls using the `os` package and allows the same functions
    to operate regardless of whether you're using Windows or Unix.
  prefs: []
  type: TYPE_NORMAL
- en: Once your file is opened and stored in a `File` structure, it can easily be
    passed into a number of interfaces (we discussed these interfaces earlier). All
    the earlier examples can use `os.File` structures directly instead of buffers
    and in-memory data streams in order to operate on data stored on the disk . This
    may be useful for certain techniques, such as writing all logs to `stderr` and
    the file at the same time with a single write call.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the CSV format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSV is a common format that is used to manipulate data. It's common, for example,
    to import or export a CSV file into Excel. The Go `CSV` package operates on data
    interfaces, and as a result, it's easy to write data to a buffer, `stdout`, a
    file, or a socket. The examples in this section will show some common ways to
    get data into and out of the CSV format.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/csvformat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/csvformat` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `read_csv.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this additional function to `read_csv.go`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `write_csv.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these additional functions to `write_csv.go`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to learn how to read a CSV format, we first represent our data as a
    structure. In Go, it's very useful to format data as a structure, as it makes
    things such as marshaling and encoding relatively simple. Our read example uses
    movies as our data type. The function takes an `io.Reader` interface that holds
    our CSV data as an input. This could be a file or a buffer. We then use that data
    to create and populate a `Movie` structure, including converting the year into
    an integer. We also add options to the CSV parser to use `;` (semi-colon) as the
    separator and `-` (hyphen) as a comment line.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explore the same idea, but in reverse. Novels are represented with
    a title and an author. We initialize an array of novels and then write specific
    novels in the CSV format to an `io.Writer` interface. Once again, this can be
    a file, `stdout`, or a buffer.
  prefs: []
  type: TYPE_NORMAL
- en: The `CSV` package is an excellent example of why you'd want to think of data
    flows in Go as implementing common interfaces. It's easy to change the source
    and destination of our data with small one-line tweaks, and we can easily manipulate
    CSV data without using an excessive amount of memory or time. For example, it
    would be possible to read from a stream of data one record at a time and write
    to a separate stream in a modified format one record at a time. Doing this would
    not incur significant memory or processor usage.
  prefs: []
  type: TYPE_NORMAL
- en: Later, when we explore data pipelines and worker pools, you'll see how these
    ideas can be combined and how to handle these streams in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Working with temporary files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've created and made use of files for a number of examples so far. We've also
    had to manually deal with cleanup, name collision, and more. Temporary files and
    directories are a quicker, simpler way to handle these cases.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/tempfiles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/tempfiles` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `temp_files.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output (with a different path):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating temporary files and directories can be done using the `ioutil` package.
    Although you must still delete the files yourself, using `RemoveAll` is the convention,
    and it will do this for you with only one extra line of code.
  prefs: []
  type: TYPE_NORMAL
- en: When writing tests, the use of temporary files is highly recommended. It's also
    useful for things such as build artifacts and more. The Go `ioutil` package will
    try and honor the OS preferences by default, but it allows you to fall back to
    other directories if required.
  prefs: []
  type: TYPE_NORMAL
- en: Working with text/template and html/template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go provides rich support for templates. It is simple to nest templates, import
    functions, represent variables, iterate over data, and so on. If you need something
    more sophisticated than a CSV writer, templates may be a great solution.
  prefs: []
  type: TYPE_NORMAL
- en: Another application for templates is for websites. When we want to render server-side
    data to the client, templates fit the bill nicely. At first, Go templates can
    appear confusing. This section will explore working with templates, collecting
    templates inside of a directory, and working with HTML templates.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover how to write and run your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter1/templates`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Copy the tests from `~/projects/go-programming-cookbook-original/chapter1/templates` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `templates.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a function to the end of `templates.go`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `template_files.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `html_templates.go` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run .`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output (with a different path):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef2b6984-de94-468d-b65b-f6d33afaa564.png)'
  prefs: []
  type: TYPE_IMG
- en: If you copied or wrote your own tests, go up one directory and run `go test`,
    and ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go has two template packages: `text/template` and `html/template`. They share
    functionality and a variety of functions. In general, you should use `html/template`
    to render websites and `text/template` for everything else. Templates are plain
    text, but variables and functions can be used inside of curly brace blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: The template packages also provide convenience methods to work with files. The
    example that we used here creates a number of templates in a temporary directory
    and then reads them all with a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: The `html/template` package is a wrapper around the `text/template` package.
    All of the template examples work with the `html/template` package directly, using
    no modification and only changing the import statement. HTML templates provide
    the added benefit of context-aware safety; this prevents security breaches such
    as JavaScript injection.
  prefs: []
  type: TYPE_NORMAL
- en: The template packages provide what you'd expect from a modern template library.
    It's easy to combine templates, add application logic, and ensure safety when
    emitting results to HTML and JavaScript.
  prefs: []
  type: TYPE_NORMAL
