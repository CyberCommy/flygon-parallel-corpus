- en: Chapter 9. Spring Security with Spring Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Spring Social to access Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Spring Social to access Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with multiple authentication providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Social is a famous API. Most web applications want to give users an option
    to post to social networking sites such as Facebook and Twitter from their application.
    Spring Social is built to meet this requirement.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall integrate Spring Security with Spring Social to connect
    to Facebook and Twitter accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Spring Social to access Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For authentication, Spring Social uses the `spring-security` API. We need to
    add the spring-social dependency in the `pom.xml` along with with the `spring-core`
    and `spring-security` packages. In this section we shall demonstrate how Spring
    Social can bridge our java application to Facebook. We can log in to the Facebook
    application in our java application.
  prefs: []
  type: TYPE_NORMAL
- en: Once the connection is established to the social networking site, the user can
    post and retrieve messages from it.
  prefs: []
  type: TYPE_NORMAL
- en: We have used the same hibernate horror movie application. I have used derby
    database and have deployed the application on the glassfish server. Spring Social
    internally uses Spring's `jdbctemplate` class to retrieve database information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to perform the following tasks to access Facebook using Spring
    Security with Spring Social:'
  prefs: []
  type: TYPE_NORMAL
- en: Register as a Facebook developer and create an app. You will get an appID and
    secret key which can be used for integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add request mapping to the controller to handle the Facebook created `jsp` pages
    to post messages onto Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `UserConnection` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Jackson dependency into your `pom.xml` file. The demo project will be available
    for download with this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the Spring Social dependencies such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-facebook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-twitter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-linkedin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spring-social-github`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `.jsp` pages for the user to sign in and sign out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide the database connection properties in the `spring.properties` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide Facebook's apps- secret key and appID in the `jdbc.properties` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for implementing an application that allow users
    to sign in to the Facebook app with Spring Social and Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a controller named `MyController` to handle the Facebook pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide the connection factories in the `Spring-social.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `ConnectionFactory` locator creates the Facebook bean. Here you can add
    other social networking providers such as Digg and Flickr. `UsersConnectionRepository`
    uses the JDBC template to execute queries for connecting with various social networking
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the connection factory in the `spring-social.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `ConnectController` class in the `spring-social` file. The `ConnectController`
    class plays an important role in connecting to the provider. It is mapped with
    the (`/connect`) URL. To make best use of the `ConnectController` class, create
    separate folders for Facebook and Twitter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Run a SQL command in your derby database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Social uses the `UserConnection` table to store the networking site provider
    information along with the user information. Spring Social uses Spring Security
    along with the appID and secret key to authenticate the user.
  prefs: []
  type: TYPE_NORMAL
- en: Access the URL:`http://localhost:8080/horrormovie/list`
  prefs: []
  type: TYPE_NORMAL
- en: You will be redirected to `http://localhost:8080/horrormovie/login;jsessionid=581813e14c1752d2260521830d3d`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with the username and password. You will be connected to the `horromovie`
    database, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Connect to Facebook profile** link, and the user will be redirected
    to the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The page displays the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Profile link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Textbox to post messages to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can post messages from this application and then open the Facebook profile
    to see the posted messages. The message will be posted in the name of the Facebook
    app that you have created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Twitter* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with OAuth* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Spring Social to access Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just now connected with Facebook and were able to post messages. In this
    section, we will see how to connect to Twitter. Let's use the same application
    that we used for Facebook with derby database and hibernate the authentication
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to perform the following tasks to access Twitter with Spring
    Social using Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Twitter app: [https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the consumer ID and key to the `.properties` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the controller to handle Twitter requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create JSP files to access and display Twitter objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the step for implementing Twitter sign-in options in the application
    demonstrated in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the controller named `HorrorMovie Controller` to handle Twitter requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/horrormovie/list.`'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Social will check if the user is already connected to Twitter. If the
    user is already connected, the user is redirected to Twitter page and will be
    asked to log in. Spring Social uses the Twitter consumer ID and key with Spring
    Security to log in to Twitter account from the application. This is the basis
    on which most of the mobile phone applications allow us to log in to Twitter and
    Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Facebook* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with OAuth* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with multiple authentication providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will demonstrate multiple authentications with Spring Social
    and database. In our previous recipe, we used the `ConnectController` class which
    handled the Facebook and Twitter connections. Access to Facebook and Twitter was
    restricted to the Spring Security URL, that is, only `ROLE_EDITOR` had access
    to Facebook and Twitter. The user had to be authenticated and authorized to use
    Facebook and Twitter. In this example, we shall allow the users to log in to the
    application with Facebook and Twitter or normal user ID.
  prefs: []
  type: TYPE_NORMAL
- en: '*Craig Walls* is a lead on Spring Social API and has provided various samples
    on gitHub, which uses Spring Social with Spring Security. This is one of the samples
    provided by *Craig Walls*.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a common page to sign in as a user or sign up using Twitter, Facebook,
    or linked-in profiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Social API has a `ConnectController` class, which automatically looks
    out for a connect folder. Create a connect folder, add `${provider}Connect.jsp`
    and `${provider} Connected.jsp. $provider{twitter,facebook,linked-in,github}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Social internally uses `spring-security`. It has its own user details
    class – `SocialUserDetailsService`. Create a class that implements `SocialUserDetailsService`
    and override the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the social authentication provider in the `social-security.xml` file.
    The `SocialAuthenticationProvider` class accepts two inputs such as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`usersConnectionRepository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`socialuserDetailsService` – the class that implements `SocialUserDetailsService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the multiple authentication providers in `security-xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SocialAuthenticationProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserDetailsService`, the jdbc interface giving user details service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the filter, `SocialAuthenticationFilter`, for handling the provider
    sign-in flow within the Spring Security filter chain. It should be added into
    the chain at or before the `PRE_AUTH_FILTER` location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to implement authentication with multiple providers
    using Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `SocialUsersDetailServiceImpl` class to implement the `SocialUserDetailsService`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the class, `SocialAuthenticationProvider` in the `Security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure multiple authentication providers in the `Security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the `SocialAuthenticationFilter` class in the `Social-security.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the `SocialAuthenticationFilter` class with Security in the `security.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this implementation, the user can log in to the application either by using
    some credentials in the database or by using the social networking site ID and
    password. The `SocialAuthenticationProvider` class along with `SocialAuthenticationFilter`
    handles the authentication to social networking sites and `UserDetailsService`
    manages the database authentication. These two classes are configured in the `security.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the workflow of the implementation. Access the URL: `http://localhost:8080/spring-social-showcase-sec-xml/signin`.
    You will be directed to the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Facebook* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Twitter* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with OAuth* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth authentication has been used widely by many applications. OAuth is a protocol
    through which applications can share the data in a secured manner. For example,
    consider a simple scenario in which one photo-sharing application allows the user
    to upload photos and the second application integrates with all photo-storing
    applications such as Flickr, Dropbox, and similar sites. When a second application
    wants to access the first application to print the photos that are uploaded, it
    uses the OAuth authentication to get confirmation from the user to access the
    photos. Ideally, it does exchange some security tokens between the applications,
    that is, the private key of the consumer and the public key of the server should
    match for the authorization to be successful.
  prefs: []
  type: TYPE_NORMAL
- en: The first application acts likes a server and the second application acts like
    a consumer who wants to access certain authenticated data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the parameters that are exchanged between the client and server applications
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Oauth_consumerKey`: We can generate an OAuth request using the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Oauth_token`: This token gets encoded and is passed to the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Oauth_timestamp`: This parameter is added to each request with nonce to prevent
    the serviced request being used again called as replay attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Oauth_version`: This defines the version of OAuth protocol being used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Oauth_signaturemethod`: This parameter is used to sign and verify the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Oauth_nonce`: This parameter is used with timestamp'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Size`: This parameter defines the size of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File`: This parameter defines the name of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s develop a sample client-server application to demonstrate OAuth with
    Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The server application: Let''s think of a movie story application. The application
    accepts stories from the users. The users can upload their stories to the application.
    This application behaves like a service provider. A user writes some horror stories
    and submits them to movie making companies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The client application: Think of another movie making company application that
    accepts stories to be uploaded from the server application. The movie making company
    has to get authorization from the movie story application to download the stories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following tasks to integrate Spring Security with OAuth:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a server application with the `ConfirmAccessController` and `StoryController`
    classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a client-side application to access server data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `spring-security-oauth` dependency to the `pom.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate `spring-security` with `spring-oauth`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `CreateStoryController` class for stories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Create the `ConfirmAccessController` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Configure Spring Security with OAuth.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to first access the `movieCompanyapp` site. The `movieCompanyapp` in
    turn gets stories from the `storyapp` site. So we have to deploy both the applications
    in the same port.
  prefs: []
  type: TYPE_NORMAL
- en: We created two users (`raghu`/`raghu123` for `movieCompanyapp` and `anju`/`anju123`
    for `storyapp`). When the user clicks on the **Get stories from storyapp** link,
    the user will be asked to log in again. This time the user has to enter their
    credentials, and then they will get to read the story.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/movieCompanyapp/spring_security_login;jsessionid=3b654cf3917d105caa7c273283b5`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_04.jpg)![How it works...](img/7525OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will be asked to authorize in order to show the story to the company. This
    happens in the `storyapp` application.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After authorizing, the story will be available in `movieCompanyapp`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Facebook* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Spring Social to access Twitter* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
