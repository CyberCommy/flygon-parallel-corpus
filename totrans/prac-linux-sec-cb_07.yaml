- en: Chapter 7. Security Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux sXID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PortSentry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Squid Proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tripwire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shorewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux sXID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, normally a file has permissions of read, write, and execute. Apart
    from these permissions, it can also have special permissions, such as **Set owner
    User ID** (**SUID**) and **Set Group ID up on execution** (**SGID**). Due to these
    permissions, it is possible for a user to log in from their account and still
    run a particular file/program with the permissions of the actual file owner (which
    can be root also).
  prefs: []
  type: TYPE_NORMAL
- en: sXid is the tool for monitoring SUID/SGID on a regular basis. Using this tool,
    we can track changes in the SUID/SGID of files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the tool, we need to install the `sxid` package on our Linux system.
    We can either use the `apt-get` command to install the package, or we can download
    the package and manually configure and install it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start monitoring SUID/SGID files and folders, we begin with the installation
    of the package and then we configure the tool as per our requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to install the `sxid` package. To do so, we run the command
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation completes, we start editing the file `/etc/sxid.conf`
    to use the tool as per our requirements. Open the file in any editor of your choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the configuration file, look for the line shown in the following screenshot:![How
    to do it...](img/B04234_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value for `EMAIL` to any other email ID if you wish to get the output
    of changes whenever `sxid` is run to your email ID.
  prefs: []
  type: TYPE_NORMAL
- en: Next, look for the line which reads `KEEP_LOGS` and change the value to any
    numerical value of your choice. This number defines how many log files to keep:![How
    to do it...](img/B04234_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you wish to get the logs even when `sXid` finds no changes, then change the
    value for `ALWAYS_NOTIFY` to `yes`:![How to do it...](img/B04234_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can define a list of directories, separated with spaces, for the option `SEARCH`
    for `sXID` to use as a starting point for its search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, if we wish to exclude any directory from the search, we can specify
    it under the `EXCLUDE` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Suppose we have a directory `/usr/local/share` to be searched, and the `/usr/local`
    directory has been mentioned in the exclude list, then it will still be searched.
    This becomes useful for excluding a main directory, and only specifying one.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more options in `/etc/sxid.conf` that can be configured as per
    our requirements. Once we are done with editing the file, save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if we want to run `sXid` manually for spot-checking, we use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the `-c` option helps to define the path of the `config` file if it is
    not automatically picked by the command. The `-k` option runs the tool.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we install the `sXid` package, and then we configure it by editing the
    file `/etc/sxid.conf` as per our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Once the configuration has been done, we run `sXid` manually to perform spot-checking.
  prefs: []
  type: TYPE_NORMAL
- en: We can even add an entry in `crontab` to run `sXid` automatically at a defined
    interval if we wish to.
  prefs: []
  type: TYPE_NORMAL
- en: PortSentry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a system administrator, one major concern is to protect the system from network
    intrusions.
  prefs: []
  type: TYPE_NORMAL
- en: This is where **PortSentry** comes into the picture. It has the ability to detect
    scans on a host system and react to those scans in the way we choose.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the implementation and usage of PortSentry, we need two systems
    on the same network that can ping each other.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we need the `Nmap` package on one system, which will be used as the client,
    and on the other system, we will install and configure the `PortSentry` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the `Nmap` package, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting Ready](img/B04234_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the first system, we install the `Portsentry` package, using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it?](img/B04234_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: During the installation process a window will open containing some information
    about `Portsentry`. Just click `OK` to continue:![How to do it?](img/B04234_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As soon as the installation completes, `portsentry` starts monitoring on the
    TCP and UDP ports. We can verify this by checking the file `/var/log/syslog` using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it?](img/B04234_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see messages related to `portsentry` in the log.
  prefs: []
  type: TYPE_NORMAL
- en: Now, on the second machine, which we are using as client, run the `Nmap` command
    as shown in the following:![How to do it?](img/B04234_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also use any other command of Nmap to perform a TCP or UDP scan on the
    first system, which has `portsentry` running. To learn more about `Nmap` commands,
    see [Chapter 1](ch01.html "Chapter 1. Linux Security Problems"), *Linux Security
    Problems*.
  prefs: []
  type: TYPE_NORMAL
- en: In the above result, we can see that `Nmap` is able to scan successfully even
    when `portsentry` is running on the first system.
  prefs: []
  type: TYPE_NORMAL
- en: We can even try to ping the server system from the client to see if it is working
    after installing `portsentry`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's configure `portsentry` by editing the file `/etc/portsentry/portsentry.conf`
    on the server system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After opening in an editor of your choice, look for the following lines and
    change the value to `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it?](img/B04234_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down and then find and uncomment the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it?](img/B04234_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, uncomment the line shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it?](img/B04234_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once done, save and close the file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, edit the file `/etc/default/portsentry`:![How to do it?](img/B04234_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the lines shown above, we need to mention for which protocol `portsentry`
    should be working, TCP or ATCP.
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the file `/etc/portsentry/portsentry.ignore.static` and add a line
    at the bottom, as shown in the following screenshot:![How to do it?](img/B04234_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `192.168.1.104` is the IP address of the client machine which we are trying
    to block.
  prefs: []
  type: TYPE_NORMAL
- en: Now restart the `portsentry` service by running the following command:![How
    to do it?](img/B04234_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the above steps are complete, we will again try to run `Nmap` on the client
    machine and see if it still works properly:![How to do it?](img/B04234_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that now `Nmap` is not able to scan the IP address.
  prefs: []
  type: TYPE_NORMAL
- en: If we try to ping the server from the client, even that does not work:![How
    to do it?](img/B04234_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we check the file `/etc/hosts.deny`, we shall see the following line has
    automatically been added:![How to do it?](img/B04234_07_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, when we check the file `/var/lib/portsentry/portsentry.history`,
    we get a result similar to the last line in the image below:![How to do it?](img/B04234_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use two systems. The first system acts as a `portsentry` server, while the
    other acts as the client.
  prefs: []
  type: TYPE_NORMAL
- en: On the first system, we install the `portsentry` package, and on the second
    system we install `Nmap`, which will be used to demonstrate the working.
  prefs: []
  type: TYPE_NORMAL
- en: Now we perform an `Nmap` scan from the client machine on the server. We can
    see that it works fine.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we configure `portsentry` as per the requirements, by editing various
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Once editing is complete, restart the `portsentry` service and again try to
    perform the `Nmap` scan from the client on the server. We see that now the scan
    does not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Using Squid proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Squid is a web proxy application with a variety of configurations and uses.
    Squid has a large number of access controls, and supports different protocols,
    such as HTTP, HTTPS, FTP, SSL, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will see how to use Squid as an HTTP proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install and use Squid on a particular system on a network, ensure that the
    particular system has enough physical memory, because Squid also works as a cache
    proxy server and thus needs space to maintain the cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using a Ubuntu system for our example and Squid is available in Ubuntu
    repositories, so we need to ensure that our system is up to date. For doing this
    we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install and configure Squid on our system, we have to take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to install the `squid` package, and to do so, we run the command
    as follows:![How to do it...](img/B04234_07_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as the installation of Squid completes, it starts running with the default
    configuration, which is defined to block all the HTTP/HTTPs traffic on the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check this, we just need to configure the browser, on any system on the
    network, to use the IP address of the proxy system as proxy, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once done, we can now try to access any website and we will see an error screen
    as shown in the following image:![How to do it...](img/B04234_07_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will start configuring our proxy server to get it to work as per our
    requirements. For this we will edit the file `/etc/squid3/squid.conf` in any editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is open in the editor, search for the category which reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TAG: visible_hostname`:Under this category, add the line—`visible_hostname
    ourProxyServer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, `ourProxyServer` is a name we have given to our proxy server. You can
    choose any name you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, search for the category which reads `TAG: cache_mgr` and add the line
    `cache_mgr email@yourdomainname`. Here, mention the email ID of the administrator,
    who can be contacted instead of `email@yourdomainname`.![How to do it...](img/B04234_07_26.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we search for the line which reads as shown in the following screenshot.
    The `http_port` variable defines the port on which the Squid proxy will listen.
    The default port is 3128; however, we can change to any other port which is not
    being used. We can even define more than one port for Squid to listen to, as shown
    in the following screenshot:![How to do it...](img/B04234_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add the rule to allow traffic on the network computers, as per
    our requirements. For this we will search for the line which reads `acl localnet
    src 10.0.0.8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we add our rule `acl localnetwork src 192.168.1.0/24`, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding rule, `acl` is used to define a new rule and `localnetwork`
    is the name we have given to our rule. `src` defines the source of the traffic
    which will come to the proxy server. We define the network IP address with the
    subnet in bits as shown previously.
  prefs: []
  type: TYPE_NORMAL
- en: We can add as many rules as we wish to, according to our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, search for the line which reads `http_access allow localhost`, and below
    this add the line `http_access allow localnetwork` to start using the rule which
    we added in the previous step, to allow the traffic:![How to do it...](img/B04234_07_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we are done with the preceding configuration steps, we restart the Squid
    service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now our Squid proxy server is running. To check, we can try to access the IP
    address of the proxy server from a browser on any system on the network:![How
    to do it...](img/B04234_07_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The above error screen tells us that the Squid proxy is working fine.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can try to visit any other website and it should open as per the rule
    we have added in the configuration file of Squid.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing the Squid package. Once the package is installed, we
    edit its configuration file `/etc/squid3/squid.conf` and add the hostname, email
    ID of the administrator, and the port on which Squid will listen.
  prefs: []
  type: TYPE_NORMAL
- en: Then we create the rule to allow traffic for all the systems on the same network.
    Once we save all the configurations, we restart the Squid service, and our proxy
    server is now working.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSL is a protocol used for transmitting sensitive information over the Internet.
    This could include information such as account passwords, credit card details,
    and so on. SSL is most popularly used in conjunction with web browsing over the
    HTTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '`OpenSSL` library provides an implementation of **Secure Sockets Layer (SSL)**
    and TLS **Transport Layer Security (TLS)** protocols.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the use of `OpenSSL`, we need two systems. One will be used as
    a server on which we will install the `OpenSSL` package and also Apache. The second
    system will be used as the client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now see how to create a self-signed certificate using `OpenSSL`, for
    Apache. This will help encrypt traffic to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: We start by installing `OpenSSL` package on the first system using the following
    command:![How to do it...](img/B04234_07_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will install Apache on the same system, as shown in the following:![How
    to do it...](img/B04234_07_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Apache is installed, we need to enable SSL support, which comes as standard
    in the Apache package for Ubuntu. To do this, we run the command as follows:![How
    to do it...](img/B04234_07_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After enabling SSL support, restart Apache as shown in the preceding screenshot,
    using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a directory inside Apache''s configuration directory. This is the
    place where we shall keep the certificate files, which we will be making in the
    next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now we will create the key and the certificate using the following command:![How
    to do it...](img/B04234_07_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding command, `req –x509` specifies that we will be creating a self-signed
    certificate, which will adhere to X.509 **Certificate Signing Request** (**CSR**)
    management.
  prefs: []
  type: TYPE_NORMAL
- en: '`-nodes` specifies that the key file will be created without being protected
    with any password.'
  prefs: []
  type: TYPE_NORMAL
- en: '`-days 365` tells us that the certificate being created will be valid for one
    year.'
  prefs: []
  type: TYPE_NORMAL
- en: '`-newkeyrsa:2048` tells us that the private key file and the certificate file
    will both be created at the same time and that the key generated will be 2048
    bits long.'
  prefs: []
  type: TYPE_NORMAL
- en: The next parameter, `-keyout`, specifies the name for the private key which
    will be created.
  prefs: []
  type: TYPE_NORMAL
- en: The `-out` parameter mentions the name of the certificate file being created.
  prefs: []
  type: TYPE_NORMAL
- en: When the key and certificate files are being created, you will be asked a few
    questions. Provide the details as per your configuration. However, the option
    which reads `Common Name (e.g. server FQDN or YOUR name)` is important, and we
    have to provide either the domain name or the server's public IP:![How to do it...](img/B04234_07_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to edit the file `/etc/apache2/sites-available/default` to configure
    Apache to use the key file and the certificate file created in the previous steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find and edit the lines as shown in the following screenshot. For `ServerName`,
    we have provided the IP address of the Apache server system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the same file, scroll to the end of the file, and before the `<VirtualHost>`
    block closes, add the lines given in the following screenshot. Mention the key
    file name and certificate file name which was used while creating these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, on the client system, open any browser and visit the Apache server's public
    IP using the `https://` protocol, as shown in the following:![How to do it...](img/B04234_07_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser will show a warning message regarding the connection not being secure,
    because the certificate is not signed by any trusted authorities.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **I Understand the Risks** and then click on the button **Add Exception**
    to add the certificate in the browser:![How to do it...](img/B04234_07_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next windows will show some information about the server. To proceed further
    and add the certificate, click on **Confirm Security Exception**:![How to do it...](img/B04234_07_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you wish to check more the details of the certificate, click on **View**
    in the previous screen and you will get a new window showing complete details
    of the certificate, as shown in the following:![How to do it...](img/B04234_07_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the certificate has been added successfully, the web page loading will
    complete, as shown in the following:![How to do it...](img/B04234_07_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use two systems in this setup. First is the Apache server, on which we install
    the `OpenSSL` package. The second system works as the client, from which we will
    try to connect to the Apache web server.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the Apache and `OpenSSL` package on the first system, we enable
    SSL support for Apache. Then we create the server key and server certificate file
    using the `OpenSSL` tool and a few arguments.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we edit the file `/etc/apache2/sites-available/default`, so that
    Apache can use the key and certificate that we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, we try to access the Apache web server through a browser on the client
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: We see that it asks for the new certificate to be added to the browser, and
    after doing this, we are able to visit the web browser using HTTPS protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Tripwire
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the increasing number of attacks on servers nowadays, administering the
    server securely is becoming a complex problem. It is difficult to be sure that
    every attack has been effectively blocked.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tripwire** is a host-based **Intrusion Detection System** (**IDS**), which
    can be used to monitor different filesystem data points and then alert us if any
    file gets modified or changed.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We only need to install the Tripwire package on our Linux system to configure
    our IDS. In the next section, we will see how to install and configure the tool.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will discuss how to install and configure Tripwire on our Ubuntu system
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step will be to install the Tripwire package using `apt-get`, as shown
    here:![How to do it...](img/B04234_07_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the installation process it will show an information window. Press **OK**
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window select **Internet Site** for type of mail configuration and
    press **OK**:![How to do it...](img/B04234_07_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next window will will ask for the **system mail name**. Enter the domain
    name of the system on which you are configuring Tripwire:![How to do it...](img/B04234_07_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *O* in the next screen to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will be asked if we want to create a passphrase for Tripwire. Select
    **Yes** and continue:![How to do it...](img/B04234_07_46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will be asked if we want to rebuild the configuration file. Select **Yes**
    and continue:![How to do it...](img/B04234_07_47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Yes** to rebuild the policy file of Tripwire:![How to do it...](img/B04234_07_48.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide the passphrase you wish to configure for Tripwire:![How to do
    it...](img/B04234_07_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will also ask to re-confirm the passphrase in the next screen.
  prefs: []
  type: TYPE_NORMAL
- en: Next, provide a passphrase for the local key and also re-confirm in the next
    screen:![How to do it...](img/B04234_07_50.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen confirms that the installation process has completed successfully.
    Press **OK** to complete the installation:![How to do it...](img/B04234_07_51.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation has been completed successfully, our next step is to initialize
    the Tripwire database. To do so we run the command as shown in the following screenshot:![How
    to do it...](img/B04234_07_52.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding output, we can see that an error called `No such file or directory`
    is displayed for many filenames. This happens because Tripwire scans for every
    file which is mentioned in its configuration file, whether it exists on the system
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to remove the error shown in the previous screenshot, we have to
    edit the file `/etc/tripwire/tw.pol` and comment the lines for the file/directory
    which are not present in our system. We can even leave it as it is if we wish
    to as it does not hamper the working of Tripwire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now test how Tripwire is working. To do so, we will create a new file
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can choose any name for the file as per your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run the Tripwire interactive command to test it is working. To do so, the
    command is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_07_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will get an out put, as shown in the preceding screenshot. Tripwire checks
    all the files/directories, and if there are any modifications, it will be shown
    in the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In our case, it displays a line as shown in the preceding screenshot, which
    tells us that a file `tripwire_testing` has been added to the `/root` directory.
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to keep the changes shown, just save the result file that was automatically
    opened in an editor.
  prefs: []
  type: TYPE_NORMAL
- en: While saving the result, you will be prompted for the local passphrase. Enter
    the passphrase which you configured during the installation of Tripwire.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add an entry to crontab to run Tripwire automatically to check for
    the changes in file /directory. Open the file `/etc/crontab` in any editor of
    your choice and add the following line:![How to do it...](img/B04234_07_55.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `00 6` tells us that Tripwire will check daily at 6 o'clock.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we install the Tripwire package, and during the installation we fill in
    the details as asked. Once the installation completes, we initialize the Tripwire
    database.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we check whether Tripwire is working properly or not. For this,
    we first create a new file at any location and then we run the Tripwire interactive
    command. Once the command completes, we see in the output that it shows the new
    file that has been added. This confirms that Tripwire is working perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: We then edit Crontab configuration to run Tripwire automatically at a particular
    interval.
  prefs: []
  type: TYPE_NORMAL
- en: Shorewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you wish to set up a Linux system as a firewall for a small network? Shorewall
    helps us to configure an enterprise-level firewall via standard Shorewall tools.
  prefs: []
  type: TYPE_NORMAL
- en: Shorewall is actually built upon Iptables. However, Shorewall makes it easier
    to configure the things.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Linux system with two network cards installed and working is needed to configure
    Shorewall. One card will be used as an external network interface and the second
    will be used as an internal network interface. In our example, we are using `eth0`
    as the external, and `eth1` as the internal interface.
  prefs: []
  type: TYPE_NORMAL
- en: Configure both cards as per the network configuration. Make sure that you are
    able to ping another system on the local network and also something on the external
    network, the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: On this system, we will be installing the Shorewall package and then configuring
    it as per our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by installing `shorewall` on our system using the `apt-get` command:![How
    to do it...](img/B04234_07_56.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, try to start `shorewall`. You will get an
    error message, as follows:![How to do it...](img/B04234_07_57.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This means we need to first configure Shorewall before it can start running.
  prefs: []
  type: TYPE_NORMAL
- en: To configure Shorewall, edit the file `/etc/default/shorewall` in any editor
    of your choice. Look for the line that reads `startup=0` and change its value
    to the following:![How to do it...](img/B04234_07_58.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, edit the file `/etc/shorewall/shorewall.conf` and find the line which
    reads `IP_FORWARDING`. Verify that its value is set to `On`:![How to do it...](img/B04234_07_59.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The configuration files of Shorewall are located in the `/etc/shorewall` directory.
    The minimum essential files which are essential for its working are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of these files is not found in `/etc/shorewall` directory after its installation,
    we can find the same files in the directory `/usr/share/doc/shorewall/default-config/`.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the required files from this location to the `/etc/shorewall` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the file `/etc/shorewall/`interfaces and add the lines as shown in
    the following image:![How to do it...](img/B04234_07_60.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are referring `eth0` as `net` in our configuration, and `eth1` as `local`.
    You can choose any other name as long as it is alphanumeric and five characters
    or less.
  prefs: []
  type: TYPE_NORMAL
- en: Next, edit the file `/etc/shorewall/zones`. Zone is mainly used to set whether
    to use `ipv4` or `ipv6`:![How to do it...](img/B04234_07_61.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding configuration, `fw` refers to me, or the Shorewall firewall
    itself. The next two lines define ipv4 for both the network interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the policy file `/etc/shorewall/`. This file is mainly used to set
    the overall policy about who is allowed to go where.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each line in this file is processed from top to bottom and each is read in
    the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: If a packet is sent from the____to the____then______it
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In our example, if we read the first policy, it will be read as—If a packet
    is sent from the local to the net then Accept it.
  prefs: []
  type: TYPE_NORMAL
- en: You can add as many policies as you want in the same way, and the Shorewall
    firewall will work accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we edit the file `/etc/shorewall/rules`. This file is used to create
    exceptions to the policy. It is mainly used if you wish to allow people from the
    external network into the internal network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sample rules files is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have added the rule which says Accept a packet if it is sent from the `net`
    to the `fw`, using the protocol of `tcp` on port number `80`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are done with configuring the preceding files as per the requirements,
    we can test the settings by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output shown, scroll to the bottom, and if it says `Shorewall configuration
    verified`, it means the settings have been done properly and that Shorewall can
    now be used as a firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_07_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now restart the Shorewall service to apply the settings as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin with installing Shorewall on the system, which has two network interface
    cards.
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is done, we edit the `/etc/default/shorewall` file and
    also the `/etc/shorewall/shorewall.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we edit or create these files in the `/etc/shorewall` location: interfaces,
    policy, rules, and zones. And we add the lines to each file as per the requirements
    given.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the editing is done, we check if everything is fine and then we start the
    Shorewall service to start our firewall.
  prefs: []
  type: TYPE_NORMAL
